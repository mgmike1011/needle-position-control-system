/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
// Motor drive
#include "A4988_Drive.h"
// Sensor
#include "VL6180X.h"
// Screen
#include "SSD1306_OLED.h"
#include "GFX_BW.h"
#include "fonts/fonts.h"
// Temperature sensor
#include "bmp280.h"
// printf external library
#include "printf.h"
// MCU libraries
#include "usart.h"
#include "i2c.h"
#include "tim.h"
// Standard library
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
//
// Syringe info data structure for queue
//
typedef struct{
	uint16_t MEASURE_Syringe; // distance in mm
	uint16_t Set_distance_syringe; // distance in mm
}Syringe_info;
//
// Needle info data structure for queue
//
typedef struct{
	uint16_t MEASURE_Needle; // distance in mm
	uint16_t Set_distance_needle; // distance in mm
}Needle_info;
//
// Temperature info data structure for queue
//
typedef struct{
	float Temperature;
	uint8_t Fan_info;
}Temperature_info;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//
// Direction control
//
#define FORWARD_NEEDLE 	RIGHT_DIR
#define BACK_NEEDLE 	LEFT_DIR
#define SUCK_SYRINGE	RIGHT_DIR
#define BLOW_SYRINGE	LEFT_DIR
//
// Control type
//
#define OPEN_LOOP 1
#define CLOSE_LOOP 2
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
//
// Receive buffer
//
uint8_t Buffor_Rx_USART[4];
//
// Idle time
//
uint32_t IdleTicks;
/* USER CODE END Variables */
/* Definitions for HeartBeatTast */
osThreadId_t HeartBeatTastHandle;
const osThreadAttr_t HeartBeatTast_attributes = {
  .name = "HeartBeatTast",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for SyringeControlT */
osThreadId_t SyringeControlTHandle;
const osThreadAttr_t SyringeControlT_attributes = {
  .name = "SyringeControlT",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* Definitions for OLEDTask */
osThreadId_t OLEDTaskHandle;
const osThreadAttr_t OLEDTask_attributes = {
  .name = "OLEDTask",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for NeedleControlTa */
osThreadId_t NeedleControlTaHandle;
const osThreadAttr_t NeedleControlTa_attributes = {
  .name = "NeedleControlTa",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal1,
};
/* Definitions for CommunicationTa */
osThreadId_t CommunicationTaHandle;
const osThreadAttr_t CommunicationTa_attributes = {
  .name = "CommunicationTa",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for TemperatureTask */
osThreadId_t TemperatureTaskHandle;
const osThreadAttr_t TemperatureTask_attributes = {
  .name = "TemperatureTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal1,
};
/* Definitions for QueueSyringeInfoOLED */
osMessageQueueId_t QueueSyringeInfoOLEDHandle;
const osMessageQueueAttr_t QueueSyringeInfoOLED_attributes = {
  .name = "QueueSyringeInfoOLED"
};
/* Definitions for QueueSyringeInfoCommunication */
osMessageQueueId_t QueueSyringeInfoCommunicationHandle;
const osMessageQueueAttr_t QueueSyringeInfoCommunication_attributes = {
  .name = "QueueSyringeInfoCommunication"
};
/* Definitions for QueueNeedleInfoOLED */
osMessageQueueId_t QueueNeedleInfoOLEDHandle;
const osMessageQueueAttr_t QueueNeedleInfoOLED_attributes = {
  .name = "QueueNeedleInfoOLED"
};
/* Definitions for QueueNeedleInfoCommunication */
osMessageQueueId_t QueueNeedleInfoCommunicationHandle;
const osMessageQueueAttr_t QueueNeedleInfoCommunication_attributes = {
  .name = "QueueNeedleInfoCommunication"
};
/* Definitions for QueueTemperatureCommunication */
osMessageQueueId_t QueueTemperatureCommunicationHandle;
const osMessageQueueAttr_t QueueTemperatureCommunication_attributes = {
  .name = "QueueTemperatureCommunication"
};
/* Definitions for QueueNeedleSetPointCommunication */
osMessageQueueId_t QueueNeedleSetPointCommunicationHandle;
const osMessageQueueAttr_t QueueNeedleSetPointCommunication_attributes = {
  .name = "QueueNeedleSetPointCommunication"
};
/* Definitions for QueueSyringeSetPointCommunication */
osMessageQueueId_t QueueSyringeSetPointCommunicationHandle;
const osMessageQueueAttr_t QueueSyringeSetPointCommunication_attributes = {
  .name = "QueueSyringeSetPointCommunication"
};
/* Definitions for QueueSyringePermission */
osMessageQueueId_t QueueSyringePermissionHandle;
const osMessageQueueAttr_t QueueSyringePermission_attributes = {
  .name = "QueueSyringePermission"
};
/* Definitions for QueueNeedlePermission */
osMessageQueueId_t QueueNeedlePermissionHandle;
const osMessageQueueAttr_t QueueNeedlePermission_attributes = {
  .name = "QueueNeedlePermission"
};
/* Definitions for QueueCommunicationPermission */
osMessageQueueId_t QueueCommunicationPermissionHandle;
const osMessageQueueAttr_t QueueCommunicationPermission_attributes = {
  .name = "QueueCommunicationPermission"
};
/* Definitions for QueueSyringeSpeedRPM */
osMessageQueueId_t QueueSyringeSpeedRPMHandle;
const osMessageQueueAttr_t QueueSyringeSpeedRPM_attributes = {
  .name = "QueueSyringeSpeedRPM"
};
/* Definitions for QueueNeedleSpeedRPM */
osMessageQueueId_t QueueNeedleSpeedRPMHandle;
const osMessageQueueAttr_t QueueNeedleSpeedRPM_attributes = {
  .name = "QueueNeedleSpeedRPM"
};
/* Definitions for SyringeInfoTimerOLED */
osTimerId_t SyringeInfoTimerOLEDHandle;
const osTimerAttr_t SyringeInfoTimerOLED_attributes = {
  .name = "SyringeInfoTimerOLED"
};
/* Definitions for NeedleInfoTimerOLED */
osTimerId_t NeedleInfoTimerOLEDHandle;
const osTimerAttr_t NeedleInfoTimerOLED_attributes = {
  .name = "NeedleInfoTimerOLED"
};
/* Definitions for SyringeInfoTimerCommunication */
osTimerId_t SyringeInfoTimerCommunicationHandle;
const osTimerAttr_t SyringeInfoTimerCommunication_attributes = {
  .name = "SyringeInfoTimerCommunication"
};
/* Definitions for NeedleInfoTimerCommunication */
osTimerId_t NeedleInfoTimerCommunicationHandle;
const osTimerAttr_t NeedleInfoTimerCommunication_attributes = {
  .name = "NeedleInfoTimerCommunication"
};
/* Definitions for IDLETimeTimer */
osTimerId_t IDLETimeTimerHandle;
const osTimerAttr_t IDLETimeTimer_attributes = {
  .name = "IDLETimeTimer"
};
/* Definitions for TemperatureInfoCommunicationTimer */
osTimerId_t TemperatureInfoCommunicationTimerHandle;
const osTimerAttr_t TemperatureInfoCommunicationTimer_attributes = {
  .name = "TemperatureInfoCommunicationTimer"
};
/* Definitions for MutexPrintf */
osMutexId_t MutexPrintfHandle;
const osMutexAttr_t MutexPrintf_attributes = {
  .name = "MutexPrintf"
};
/* Definitions for MutexI2C2 */
osMutexId_t MutexI2C2Handle;
const osMutexAttr_t MutexI2C2_attributes = {
  .name = "MutexI2C2"
};
/* Definitions for MutexI2C4 */
osMutexId_t MutexI2C4Handle;
const osMutexAttr_t MutexI2C4_attributes = {
  .name = "MutexI2C4"
};
/* Definitions for SyringeInfoOLEDSemaphore */
osSemaphoreId_t SyringeInfoOLEDSemaphoreHandle;
const osSemaphoreAttr_t SyringeInfoOLEDSemaphore_attributes = {
  .name = "SyringeInfoOLEDSemaphore"
};
/* Definitions for NeedleInfoOLEDSemaphore */
osSemaphoreId_t NeedleInfoOLEDSemaphoreHandle;
const osSemaphoreAttr_t NeedleInfoOLEDSemaphore_attributes = {
  .name = "NeedleInfoOLEDSemaphore"
};
/* Definitions for TemperatureInfoCommunicationSemaphore */
osSemaphoreId_t TemperatureInfoCommunicationSemaphoreHandle;
const osSemaphoreAttr_t TemperatureInfoCommunicationSemaphore_attributes = {
  .name = "TemperatureInfoCommunicationSemaphore"
};
/* Definitions for SyringeInfoCommunicationSemaphore */
osSemaphoreId_t SyringeInfoCommunicationSemaphoreHandle;
const osSemaphoreAttr_t SyringeInfoCommunicationSemaphore_attributes = {
  .name = "SyringeInfoCommunicationSemaphore"
};
/* Definitions for NeedleInfoCommunicationSemaphore */
osSemaphoreId_t NeedleInfoCommunicationSemaphoreHandle;
const osSemaphoreAttr_t NeedleInfoCommunicationSemaphore_attributes = {
  .name = "NeedleInfoCommunicationSemaphore"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
//
// printf function prototype
//
void _putchar(char character);
/* USER CODE END FunctionPrototypes */

void StartHeartBeatTast(void *argument);
void StartSyringeControlTask(void *argument);
void StartOLEDTask(void *argument);
void StartNeedleControlTask(void *argument);
void StartCommunicationTask(void *argument);
void StartTemperatureTask(void *argument);
void SyringeInfoTimerOLEDCallback(void *argument);
void NeedleInfoTimerOLEDCallback(void *argument);
void SyringeInfoTimerCommunicationCallback(void *argument);
void NeedleInfoTimerCommunicationCallback(void *argument);
void IDLETimeTimerCallback(void *argument);
void TemperatureInfoCommunicationTimerCallback(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
   /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
   to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
   task. It is essential that code added to this hook function never attempts
   to block in any way (for example, call xQueueReceive() with a block time
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	static uint32_t LastTick;

	if(LastTick < osKernelGetTickCount()){
		IdleTicks++;
		LastTick = osKernelGetTickCount();
	}
}
/* USER CODE END 2 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);

  /* creation of MutexI2C4 */
  MutexI2C4Handle = osMutexNew(&MutexI2C4_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SyringeInfoOLEDSemaphore */
  SyringeInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoOLEDSemaphore_attributes);

  /* creation of NeedleInfoOLEDSemaphore */
  NeedleInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoOLEDSemaphore_attributes);

  /* creation of TemperatureInfoCommunicationSemaphore */
  TemperatureInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &TemperatureInfoCommunicationSemaphore_attributes);

  /* creation of SyringeInfoCommunicationSemaphore */
  SyringeInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoCommunicationSemaphore_attributes);

  /* creation of NeedleInfoCommunicationSemaphore */
  NeedleInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoCommunicationSemaphore_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SyringeInfoTimerOLED */
  SyringeInfoTimerOLEDHandle = osTimerNew(SyringeInfoTimerOLEDCallback, osTimerPeriodic, NULL, &SyringeInfoTimerOLED_attributes);

  /* creation of NeedleInfoTimerOLED */
  NeedleInfoTimerOLEDHandle = osTimerNew(NeedleInfoTimerOLEDCallback, osTimerPeriodic, NULL, &NeedleInfoTimerOLED_attributes);

  /* creation of SyringeInfoTimerCommunication */
  SyringeInfoTimerCommunicationHandle = osTimerNew(SyringeInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &SyringeInfoTimerCommunication_attributes);

  /* creation of NeedleInfoTimerCommunication */
  NeedleInfoTimerCommunicationHandle = osTimerNew(NeedleInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &NeedleInfoTimerCommunication_attributes);

  /* creation of IDLETimeTimer */
  IDLETimeTimerHandle = osTimerNew(IDLETimeTimerCallback, osTimerPeriodic, NULL, &IDLETimeTimer_attributes);

  /* creation of TemperatureInfoCommunicationTimer */
  TemperatureInfoCommunicationTimerHandle = osTimerNew(TemperatureInfoCommunicationTimerCallback, osTimerPeriodic, NULL, &TemperatureInfoCommunicationTimer_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSyringeInfoOLED */
  QueueSyringeInfoOLEDHandle = osMessageQueueNew (8, sizeof(Syringe_info), &QueueSyringeInfoOLED_attributes);

  /* creation of QueueSyringeInfoCommunication */
  QueueSyringeInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Syringe_info), &QueueSyringeInfoCommunication_attributes);

  /* creation of QueueNeedleInfoOLED */
  QueueNeedleInfoOLEDHandle = osMessageQueueNew (8, sizeof(Needle_info), &QueueNeedleInfoOLED_attributes);

  /* creation of QueueNeedleInfoCommunication */
  QueueNeedleInfoCommunicationHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoCommunication_attributes);

  /* creation of QueueTemperatureCommunication */
  QueueTemperatureCommunicationHandle = osMessageQueueNew (4, sizeof(Temperature_info), &QueueTemperatureCommunication_attributes);

  /* creation of QueueNeedleSetPointCommunication */
  QueueNeedleSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueNeedleSetPointCommunication_attributes);

  /* creation of QueueSyringeSetPointCommunication */
  QueueSyringeSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueSyringeSetPointCommunication_attributes);

  /* creation of QueueSyringePermission */
  QueueSyringePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueSyringePermission_attributes);

  /* creation of QueueNeedlePermission */
  QueueNeedlePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueNeedlePermission_attributes);

  /* creation of QueueCommunicationPermission */
  QueueCommunicationPermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueCommunicationPermission_attributes);

  /* creation of QueueSyringeSpeedRPM */
  QueueSyringeSpeedRPMHandle = osMessageQueueNew (2, sizeof(uint16_t), &QueueSyringeSpeedRPM_attributes);

  /* creation of QueueNeedleSpeedRPM */
  QueueNeedleSpeedRPMHandle = osMessageQueueNew (2, sizeof(uint16_t), &QueueNeedleSpeedRPM_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTast */
  HeartBeatTastHandle = osThreadNew(StartHeartBeatTast, NULL, &HeartBeatTast_attributes);

  /* creation of SyringeControlT */
  SyringeControlTHandle = osThreadNew(StartSyringeControlTask, NULL, &SyringeControlT_attributes);

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);

  /* creation of NeedleControlTa */
  NeedleControlTaHandle = osThreadNew(StartNeedleControlTask, NULL, &NeedleControlTa_attributes);

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);

  /* creation of TemperatureTask */
  TemperatureTaskHandle = osThreadNew(StartTemperatureTask, NULL, &TemperatureTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartHeartBeatTast */
/**
  * @brief  Main basic function informing about MCU work.
  * @priority: Low
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTast */
void StartHeartBeatTast(void *argument)
{
  /* USER CODE BEGIN StartHeartBeatTast */
	osTimerStart(IDLETimeTimerHandle, 1000);
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
  }
  /* USER CODE END StartHeartBeatTast */
}

/* USER CODE BEGIN Header_StartSyringeControlTask */
/**
* @brief Function implementing the SyringeControlTask thread.
* @priority: Above normal
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSyringeControlTask */
void StartSyringeControlTask(void *argument)
{
  /* USER CODE BEGIN StartSyringeControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Syringe = {	.NAME = "SYRINGE",
							.STEPS = 200,
							.RESOLUTION = HALF_STEP,
							.PORT_DIR = DIR_SYRINGE_GPIO_Port,
							.PIN_DIR = DIR_SYRINGE_Pin,
							.PORT_ENABLE = ENABLE_SYRINGE_GPIO_Port,
							.PIN_ENABLE = ENABLE_SYRINGE_Pin,
							.PORT_MS1 = MS1_SYRINGE_GPIO_Port,
							.PIN_MS1 = MS1_SYRINGE_Pin,
							.PORT_MS2 = MS2_SYRINGE_GPIO_Port,
							.PIN_MS2 = MS2_SYRINGE_Pin,
							.PORT_MS3 = MS3_SYRINGE_GPIO_Port,
							.PIN_MS3 = MS3_SYRINGE_Pin,
							.STEP_mm_RESOLUTION = 0.01,
							.PORT_RESET = RESET_SYRINGE_GPIO_Port,
							.PIN_RESET = RESET_SYRINGE_Pin,
							.PORT_SLEEP = SLEEP_SYRINGE_GPIO_Port,
							.PIN_SLEEP = SLEEP_SYRINGE_Pin,
							.TIM_STEP = &htim2,
							.TIM_STEP_CHANNEL = TIM_CHANNEL_1,
							.TIM_COUNTER_SLAVE = &htim3
							};
//	uint16_t Syringe_speed_rmp;
	//
	// Distance Sensors
	//
	VL6180X_ Syringe_sensor;
	//
	// Queue info
	//
	Syringe_info _Syringe_info;
	uint16_t syringe_setpoint_change;
	uint8_t _Permission;
	_Permission = 0;
	//
	// Initialization
	//
	Init_A4988(&Syringe); // Drive initialization
	HAL_TIM_Base_Stop_IT(Syringe.TIM_COUNTER_SLAVE);

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
	VL6180X_Init(&Syringe_sensor, &hi2c4); // Sensor initialization
	configureDefault_VL6180X(&Syringe_sensor); // Sensor initialization
	osMutexRelease(MutexI2C4Handle);

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
	_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Initial measurement
	_Syringe_info.Set_distance_syringe = _Syringe_info.MEASURE_Syringe;
	osMutexRelease(MutexI2C4Handle);

	//
	// Timers
	//
	osTimerStart(SyringeInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
	osTimerStart(SyringeInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer

  /* Infinite loop */
  for(;;)
  {
	  //
	  // Get data
	  //
	  // Get SetPoint
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
		  _Syringe_info.Set_distance_syringe = syringe_setpoint_change;
	  }
	  // Get permission
	  osMessageQueueGet(QueueSyringePermissionHandle, &_Permission, NULL, 0);
	  // Get Speed in rpm
//	  if(osOK == osMessageQueueGet(QueueSyringeSpeedRPMHandle, &Syringe_speed_rmp, NULL, 0)){
//		  Set_Speed(&Syringe, Syringe_speed_rmp);
//	  }

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
	  _Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
	  osMutexRelease(MutexI2C4Handle);

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(SyringeInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
		  osMessageQueuePut(QueueSyringeInfoCommunicationHandle, &_Syringe_info, 0, osWaitForever);
	  }
	  if (osOK == osSemaphoreAcquire(SyringeInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
	  		osMessageQueuePut(QueueSyringeInfoOLEDHandle, &_Syringe_info, 0, osWaitForever);
	  }

	  //
	  // Control algorithm
	  //
	  if(_Permission == 1){
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
  }
  /* USER CODE END StartSyringeControlTask */
}

/* USER CODE BEGIN Header_StartOLEDTask */
/**
* @brief OLED screen print
* @priority: Below normal
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
  /* USER CODE BEGIN StartOLEDTask */
	//
	// Info data initialization
	//
	char Message_OLED[32]; // Message buffer
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	_Needle_info.Set_distance_needle = 0;
	_Needle_info.MEASURE_Needle = 0;
	_Syringe_info.Set_distance_syringe = 0;
	_Syringe_info.MEASURE_Syringe = 0;

	//
	// Screen initialization
	//
	osMutexAcquire(MutexI2C4Handle, osWaitForever);
	SSD1306_Init(&hi2c4);
	osMutexRelease(MutexI2C4Handle);

	GFX_SetFont(font_8x5);
	GFX_SetFontSize(1);

	SSD1306_Clear(BLACK);

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
	SSD1306_Display();
	osMutexRelease(MutexI2C4Handle);
  /* Infinite loop */
  for(;;)
  {
	  //
	  // Get data from queues
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoOLEDHandle, &_Needle_info, NULL, 0);

	  //
	  // Make message
	  //
	  SSD1306_Clear(BLACK);
	  sprintf(Message_OLED, "Needle position");
	  GFX_DrawString(20, 0, Message_OLED, WHITE, 0);
	  GFX_DrawLine(0, 9, 128, 9, WHITE);
	  sprintf(Message_OLED, "Set: %d mm", _Needle_info.Set_distance_needle); //Set_distance_needle
	  GFX_DrawString(0, 12, Message_OLED, WHITE, 0);
	  sprintf(Message_OLED, "Measure: %d mm", _Needle_info.MEASURE_Needle); //MEASURE_Needle
	  GFX_DrawString(0, 22, Message_OLED, WHITE, 0);
	  sprintf(Message_OLED, "Syringe position");
	  GFX_DrawString(15, 32, Message_OLED, WHITE, 0);
	  GFX_DrawLine(0, 41, 128, 41, WHITE);
	  sprintf(Message_OLED, "Set: %d mm", _Syringe_info.Set_distance_syringe); //Set_distance_syringe
	  GFX_DrawString(0, 44, Message_OLED, WHITE, 0);
	  sprintf(Message_OLED, "Measure: %d mm", _Syringe_info.MEASURE_Syringe); //MEASURE_Syringe
	  GFX_DrawString(0, 54, Message_OLED, WHITE, 0);

	  //
	  // Display
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
	  SSD1306_Display();
	  osMutexRelease(MutexI2C4Handle);

	  //
	  // Time interval
	  //
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
  }
  /* USER CODE END StartOLEDTask */
}

/* USER CODE BEGIN Header_StartNeedleControlTask */
/**
* @brief Function implementing the NeedleControlTask thread.
* @priority: Above normal 1
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNeedleControlTask */
void StartNeedleControlTask(void *argument)
{
  /* USER CODE BEGIN StartNeedleControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Needle = {	.NAME = "NEEDLE",
							.STEPS = 200,
							.RESOLUTION = HALF_STEP,
							.STEP_mm_RESOLUTION = 0.005,
							.PORT_DIR = DIR_NEEDLE_GPIO_Port,
							.PIN_DIR = DIR_NEEDLE_Pin,
							.PORT_ENABLE = ENABLE_NEEDLE_GPIO_Port,
							.PIN_ENABLE = ENABLE_NEEDLE_Pin,
							.PORT_MS1 = MS1_NEEDLE_GPIO_Port,
							.PIN_MS1 = MS1_NEEDLE_Pin,
							.PORT_MS2 = MS2_NEEDLE_GPIO_Port,
							.PIN_MS2 = MS2_NEEDLE_Pin,
							.PORT_MS3 = MS3_NEEDLE_GPIO_Port,
							.PIN_MS3 = MS3_NEEDLE_Pin,
							.PORT_RESET = RESET_NEEDLE_GPIO_Port,
							.PIN_RESET = RESET_NEEDLE_Pin,
							.PORT_SLEEP = SLEEP_NEEDLE_GPIO_Port,
							.PIN_SLEEP = SLEEP_NEEDLE_Pin,
							.TIM_STEP = &htim4,
							.TIM_STEP_CHANNEL = TIM_CHANNEL_1,
							.TIM_COUNTER_SLAVE = &htim5
							};
//	uint16_t Needle_speed_rmp;
	//
	// Distance Sensors
	//
	VL6180X_ Needle_sensor;
	//
	// Queue info
	//
	Needle_info _Needle_info;
	uint16_t needle_setpoint_change;
	uint8_t _Permission;
	_Needle_info.MEASURE_Needle = 10;
	_Needle_info.Set_distance_needle = 20;
	_Permission = 0;
	//
	// Initialization
	//
	Init_A4988(&Needle); // Drive initialization
	HAL_TIM_Base_Stop_IT(Needle.TIM_COUNTER_SLAVE);

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
	VL6180X_Init(&Needle_sensor, &hi2c2); // Sensor initialization
	configureDefault_VL6180X(&Needle_sensor); // Sensor initialization
	osMutexRelease(MutexI2C2Handle);

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
	_Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Initial measurement
	_Needle_info.Set_distance_needle = _Needle_info.MEASURE_Needle;
	osMutexRelease(MutexI2C2Handle);

	//
	// Timers
	//
	osTimerStart(NeedleInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
	osTimerStart(NeedleInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
  /* Infinite loop */
  for(;;)
  {
	  //
	  // Get Data
	  //
	  // Get set point
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
		  _Needle_info.Set_distance_needle = needle_setpoint_change;
	  }
	  // Get permission
	  osMessageQueueGet(QueueNeedlePermissionHandle, &_Permission, NULL, 0);
//	  // Get Speed in rpm
//	  if(osOK == osMessageQueueGet(QueueNeedleSpeedRPMHandle, &Needle_speed_rmp, NULL, 0)){
//		  Set_Speed(&Needle, Needle_speed_rmp);
//	  }

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
	  _Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Measurement
	  osMutexRelease(MutexI2C2Handle);

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(NeedleInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
		  osMessageQueuePut(QueueNeedleInfoCommunicationHandle, &_Needle_info, 0, osWaitForever);
	  }
	  if (osOK == osSemaphoreAcquire(NeedleInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
		  osMessageQueuePut(QueueNeedleInfoOLEDHandle, &_Needle_info, 0, osWaitForever);
	  }

	  //
	  // Control algorithm
	  //
	  if(_Permission == 1){
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
  }
  /* USER CODE END StartNeedleControlTask */
}

/* USER CODE BEGIN Header_StartCommunicationTask */
/**
* @brief Function implementing the CommunicationTa thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
  /* USER CODE BEGIN StartCommunicationTask */
	//
	// Time interval
	//
	uint32_t DelayTick = osKernelGetTickCount();

	//
	//Receive data
	//
	HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);

	//
	// Info data initialization
	//
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	Temperature_info _Temperature_info;
	uint8_t _Permission;
	_Needle_info.Set_distance_needle = 0;
	_Needle_info.MEASURE_Needle = 0;
	_Syringe_info.Set_distance_syringe = 0;
	_Syringe_info.MEASURE_Syringe = 0;
	_Temperature_info.Fan_info = 0;
	_Temperature_info.Temperature = 0;
	_Permission = 0;

  /* Infinite loop */
  for(;;)
  {
	  //
	  // Get data
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoCommunicationHandle, &_Needle_info, NULL, 0);
	  // Get data from Temperature info queue
	  osMessageQueueGet(QueueTemperatureCommunicationHandle, &_Temperature_info, NULL, 0);
	  // Get permission
	  osMessageQueueGet(QueueCommunicationPermissionHandle, &_Permission, NULL, 0);

	  //
	  // Send message
	  //
	  if(_Permission == 1){
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
				  _Temperature_info.Fan_info,0);
	  }

	  //
	  // Time interval
	  //
	  DelayTick += 500;
	  osDelayUntil(DelayTick);
  }
  /* USER CODE END StartCommunicationTask */
}

/* USER CODE BEGIN Header_StartTemperatureTask */
/**
* @brief Function implementing the TemperatureTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperatureTask */
void StartTemperatureTask(void *argument)
{
  /* USER CODE BEGIN StartTemperatureTask */
	//
	// Info data initialization
	//
	Temperature_info _Temperature_info;
	_Temperature_info.Fan_info = 0;
	_Temperature_info.Temperature = 10;

	BMP280_t Bmp280;

	//
	// Initialize the sensor
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
	BMP280_Init(&Bmp280, &hi2c2, 0x76);
	osMutexRelease(MutexI2C2Handle);

	//
	// Initial measurement
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
	_Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
	osMutexRelease(MutexI2C2Handle);

	//
	// Timer start
	//
	osTimerStart(TemperatureInfoCommunicationTimerHandle, (1000 * osKernelGetTickFreq()) / 1000 ); // Communication Timer

	/* Infinite loop */
  for(;;)
  {
	  //
	  // Measurement
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
	  _Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
	  if(_Temperature_info.Temperature < 0 ){
		  _Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
	  }
	  osMutexRelease(MutexI2C2Handle);
	  //
	  // Fan functioning
	  //
	  if (_Temperature_info.Temperature >= 31.0) {
		  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_SET);
		  _Temperature_info.Fan_info = 1;
	  }else{
		  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_RESET);
		  _Temperature_info.Fan_info = 0;
	  }

	  //
	  // Send to queue
	  //
	  if(osOK == osSemaphoreAcquire(TemperatureInfoCommunicationSemaphoreHandle, 0)){
		  osMessageQueuePut(QueueTemperatureCommunicationHandle, &_Temperature_info, 0, osWaitForever);
	  }

	  //
	  // Time interval
	  //
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
  }
  /* USER CODE END StartTemperatureTask */
}

/* SyringeInfoTimerOLEDCallback function */
void SyringeInfoTimerOLEDCallback(void *argument)
{
  /* USER CODE BEGIN SyringeInfoTimerOLEDCallback */
	osSemaphoreRelease(SyringeInfoOLEDSemaphoreHandle);
  /* USER CODE END SyringeInfoTimerOLEDCallback */
}

/* NeedleInfoTimerOLEDCallback function */
void NeedleInfoTimerOLEDCallback(void *argument)
{
  /* USER CODE BEGIN NeedleInfoTimerOLEDCallback */
	osSemaphoreRelease(NeedleInfoOLEDSemaphoreHandle);
  /* USER CODE END NeedleInfoTimerOLEDCallback */
}

/* SyringeInfoTimerCommunicationCallback function */
void SyringeInfoTimerCommunicationCallback(void *argument)
{
  /* USER CODE BEGIN SyringeInfoTimerCommunicationCallback */
	osSemaphoreRelease(SyringeInfoCommunicationSemaphoreHandle);
  /* USER CODE END SyringeInfoTimerCommunicationCallback */
}

/* NeedleInfoTimerCommunicationCallback function */
void NeedleInfoTimerCommunicationCallback(void *argument)
{
  /* USER CODE BEGIN NeedleInfoTimerCommunicationCallback */
	osSemaphoreRelease(NeedleInfoCommunicationSemaphoreHandle);
  /* USER CODE END NeedleInfoTimerCommunicationCallback */
}

/* IDLETimeTimerCallback function */
void IDLETimeTimerCallback(void *argument)
{
  /* USER CODE BEGIN IDLETimeTimerCallback */
	uint32_t IdleTime;
	IdleTime = (IdleTicks * 100) / 1000;
	IdleTicks = 0;
//	printf("IdleTime: %d\n\r",IdleTime);
  /* USER CODE END IDLETimeTimerCallback */
}

/* TemperatureInfoCommunicationTimerCallback function */
void TemperatureInfoCommunicationTimerCallback(void *argument)
{
  /* USER CODE BEGIN TemperatureInfoCommunicationTimerCallback */
	osSemaphoreRelease(TemperatureInfoCommunicationSemaphoreHandle);
  /* USER CODE END TemperatureInfoCommunicationTimerCallback */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//
// Printf function implementation
//
void _putchar(char character)
{
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 1000);
	osMutexRelease(MutexPrintfHandle);
}
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART3)
	{
		//
		// Start of handling message
		//
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

		//
		// Handling the message
		//
		if(Buffor_Rx_USART[0] == 'N'){ // Needle set position
			uint16_t needle_set_point_change;
			char needle_set_point_change_str[3];
			// Convert to uint16_t
			needle_set_point_change_str[0] = Buffor_Rx_USART[1];
			needle_set_point_change_str[1] = Buffor_Rx_USART[2];
			needle_set_point_change_str[2] = Buffor_Rx_USART[3];
			needle_set_point_change =  (uint16_t)atoi(needle_set_point_change_str);
			// Send to queue
			osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'S') { // Syringe set position
			uint16_t syringe_set_point_change;
			char syringe_set_point_change_str[3];
			// Convert to uint16_t
			syringe_set_point_change_str[0] = Buffor_Rx_USART[1];
			syringe_set_point_change_str[1] = Buffor_Rx_USART[2];
			syringe_set_point_change_str[2] = Buffor_Rx_USART[3];
			syringe_set_point_change =  (uint16_t)atoi(syringe_set_point_change_str);
			// Send to queue
			osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'T') { // Test connection
			printf("T");
		}else if (Buffor_Rx_USART[0] == 'O') { // Start ALL
			uint8_t permission = 1;
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'E') { // STOP ALL
			uint8_t permission = 0;
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'R') { // STOP communication
			uint8_t permission = 0;
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'M') { // STOP motors
			uint8_t permission = 0;
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'Q') { // Needle speed in rpm
			uint16_t Needle_speed_changed;
			char Needle_speed_changed_str[3];
			// Convert to uint16_t
			Needle_speed_changed_str[0] = Buffor_Rx_USART[1];
			Needle_speed_changed_str[1] = Buffor_Rx_USART[2];
			Needle_speed_changed_str[2] = Buffor_Rx_USART[3];
			Needle_speed_changed =  (uint16_t)atoi(Needle_speed_changed_str);
			// Send to queue
			osMessageQueuePut(QueueNeedleSpeedRPMHandle, &Needle_speed_changed, 0, 0U);
		}else if (Buffor_Rx_USART[0] == 'W') { // Syringe speed in rpm
			uint16_t Syringe_speed_changed;
			char Syringe_speed_changed_str[3];
			// Convert to uint16_t
			Syringe_speed_changed_str[0] = Buffor_Rx_USART[1];
			Syringe_speed_changed_str[1] = Buffor_Rx_USART[2];
			Syringe_speed_changed_str[2] = Buffor_Rx_USART[3];
			Syringe_speed_changed =  (uint16_t)atoi(Syringe_speed_changed_str);
			// Send to queue
			osMessageQueuePut(QueueSyringeSpeedRPMHandle, &Syringe_speed_changed, 0, 0U);
		}
		//
		// Listening setup
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
	}
}
//
// Safety interlock (limit switch)
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == END_STOP_SYRINGE_1_Pin){ // END STOP Syringe Near Drive
		uint16_t syringe_set_point_change = 120; // TODO change the stop point
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
	}else if (GPIO_Pin == END_STOP_SYRINGE_2_Pin){ // END STOP Syringe Near Syringe
		uint16_t syringe_set_point_change = 20; // TODO change the stop point
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
	}else if(GPIO_Pin == END_STOP_NEEDLE_1_Pin){ // END STOP Needle Near Drive
		uint16_t needle_set_point_change = 120; // TODO change the stop point
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
		uint16_t needle_set_point_change = 20; // TODO change the stop point
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}
}
/* USER CODE END Application */

