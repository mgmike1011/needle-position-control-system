
MCU-767-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e87c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b34  0800ea80  0800ea80  0001ea80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5b4  0800f5b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5b4  0800f5b4  0001f5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5bc  0800f5bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5bc  0800f5bc  0001f5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5c0  0800f5c0  0001f5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e18  20000078  0800f63c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009e90  0800f63c  00029e90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027ddb  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e11  00000000  00000000  00047e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca8  00000000  00000000  0004cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ab8  00000000  00000000  0004e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c1ed  00000000  00000000  000503f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023b23  00000000  00000000  0007c5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109dfa  00000000  00000000  000a0108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b38  00000000  00000000  001a9f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ea64 	.word	0x0800ea64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800ea64 	.word	0x0800ea64

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	2b04      	cmp	r3, #4
 8000554:	f200 809a 	bhi.w	800068c <Set_Resolution_A4988+0x148>
 8000558:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <Set_Resolution_A4988+0x1c>)
 800055a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055e:	bf00      	nop
 8000560:	08000575 	.word	0x08000575
 8000564:	080005ad 	.word	0x080005ad
 8000568:	080005e5 	.word	0x080005e5
 800056c:	0800061d 	.word	0x0800061d
 8000570:	08000655 	.word	0x08000655
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	69d8      	ldr	r0, [r3, #28]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800057c:	2200      	movs	r2, #0
 800057e:	4619      	mov	r1, r3
 8000580:	f005 f934 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a18      	ldr	r0, [r3, #32]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	f005 f92c 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	f005 f924 	bl	80057ec <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80005aa:	e08b      	b.n	80006c4 <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	69d8      	ldr	r0, [r3, #28]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f005 f918 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6a18      	ldr	r0, [r3, #32]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	f005 f910 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	f005 f908 	bl	80057ec <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2202      	movs	r2, #2
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80005e2:	e06f      	b.n	80006c4 <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	69d8      	ldr	r0, [r3, #28]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005ec:	2200      	movs	r2, #0
 80005ee:	4619      	mov	r1, r3
 80005f0:	f005 f8fc 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a18      	ldr	r0, [r3, #32]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	f005 f8f4 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f005 f8ec 	bl	80057ec <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2204      	movs	r2, #4
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800061a:	e053      	b.n	80006c4 <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	69d8      	ldr	r0, [r3, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000624:	2201      	movs	r2, #1
 8000626:	4619      	mov	r1, r3
 8000628:	f005 f8e0 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6a18      	ldr	r0, [r3, #32]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	f005 f8d8 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f005 f8d0 	bl	80057ec <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2208      	movs	r2, #8
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000652:	e037      	b.n	80006c4 <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	69d8      	ldr	r0, [r3, #28]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	f005 f8c4 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6a18      	ldr	r0, [r3, #32]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	f005 f8bc 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800067c:	2201      	movs	r2, #1
 800067e:	4619      	mov	r1, r3
 8000680:	f005 f8b4 	bl	80057ec <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2210      	movs	r2, #16
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800068a:	e01b      	b.n	80006c4 <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	69d8      	ldr	r0, [r3, #28]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f005 f8a8 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a18      	ldr	r0, [r3, #32]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f005 f8a0 	bl	80057ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f005 f898 	bl	80057ec <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2210      	movs	r2, #16
 80006c0:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d003      	beq.n	80006e4 <Set_Direction_A4988+0x18>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d009      	beq.n	80006f6 <Set_Direction_A4988+0x2a>
 80006e2:	e011      	b.n	8000708 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6958      	ldr	r0, [r3, #20]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	8b1b      	ldrh	r3, [r3, #24]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	f005 f87c 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 80006f4:	e011      	b.n	800071a <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6958      	ldr	r0, [r3, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	8b1b      	ldrh	r3, [r3, #24]
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	f005 f873 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 8000706:	e008      	b.n	800071a <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6958      	ldr	r0, [r3, #20]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	8b1b      	ldrh	r3, [r3, #24]
 8000710:	2201      	movs	r2, #1
 8000712:	4619      	mov	r1, r3
 8000714:	f005 f86a 	bl	80057ec <HAL_GPIO_WritePin>
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d003      	beq.n	800073a <Enable_A4988+0x18>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d009      	beq.n	800074c <Enable_A4988+0x2a>
 8000738:	e011      	b.n	800075e <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	f005 f851 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 800074a:	e011      	b.n	8000770 <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	f005 f848 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 800075c:	e008      	b.n	8000770 <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	f005 f83f 	bl	80057ec <HAL_GPIO_WritePin>
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d003      	beq.n	8000790 <Reset_A4988+0x18>
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d00a      	beq.n	80007a4 <Reset_A4988+0x2c>
 800078e:	e013      	b.n	80007b8 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	f005 f825 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 80007a2:	e013      	b.n	80007cc <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f005 f81b 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 80007b6:	e009      	b.n	80007cc <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	f005 f811 	bl	80057ec <HAL_GPIO_WritePin>
	}
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d003      	beq.n	80007ec <Sleep_A4988+0x18>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d00a      	beq.n	8000800 <Sleep_A4988+0x2c>
 80007ea:	e013      	b.n	8000814 <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80007f6:	2201      	movs	r2, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	f004 fff7 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 80007fe:	e013      	b.n	8000828 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	f004 ffed 	bl	80057ec <HAL_GPIO_WritePin>
			break;
 8000812:	e009      	b.n	8000828 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f004 ffe3 	bl	80057ec <HAL_GPIO_WritePin>
	}
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Set_Speed>:
	//
	float step_res_ = 360/(float)(drive->STEPS);
	float angle = (distance*step_res_)/((float)(drive->STEP_mm_RESOLUTION));
	Rotate_A4988(drive, angle);
}
void Set_Speed(A4988_Drive* drive, int rpm){
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	//	Sets the speed of rotor.
	//	@param rpm: Revolutions per minute
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	if(rpm > 0){
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dd5d      	ble.n	80008fc <Set_Speed+0xcc>
		uint16_t arr_val = TIM_CLK/(((drive->TIM_STEP->Instance->PSC+1)*rpm*drive->RESOLUTION*drive->STEPS)/60)-1;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	3301      	adds	r3, #1
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	fb02 f303 	mul.w	r3, r2, r3
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000854:	fb02 f303 	mul.w	r3, r2, r3
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	fb02 f303 	mul.w	r3, r2, r3
 8000860:	4a45      	ldr	r2, [pc, #276]	; (8000978 <Set_Speed+0x148>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	4a44      	ldr	r2, [pc, #272]	; (800097c <Set_Speed+0x14c>)
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	b29b      	uxth	r3, r3
 8000870:	3b01      	subs	r3, #1
 8000872:	81fb      	strh	r3, [r7, #14]
		uint16_t pulse_val = arr_val / 2;
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	085b      	lsrs	r3, r3, #1
 8000878:	81bb      	strh	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(drive->TIM_STEP, arr_val);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	89fa      	ldrh	r2, [r7, #14]
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000888:	89fa      	ldrh	r2, [r7, #14]
 800088a:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000890:	2b00      	cmp	r3, #0
 8000892:	d105      	bne.n	80008a0 <Set_Speed+0x70>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	89ba      	ldrh	r2, [r7, #12]
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
 800089e:	e065      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d105      	bne.n	80008b4 <Set_Speed+0x84>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	6393      	str	r3, [r2, #56]	; 0x38
 80008b2:	e05b      	b.n	800096c <Set_Speed+0x13c>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d105      	bne.n	80008c8 <Set_Speed+0x98>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	89bb      	ldrh	r3, [r7, #12]
 80008c4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008c6:	e051      	b.n	800096c <Set_Speed+0x13c>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008cc:	2b0c      	cmp	r3, #12
 80008ce:	d105      	bne.n	80008dc <Set_Speed+0xac>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	89bb      	ldrh	r3, [r7, #12]
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	e047      	b.n	800096c <Set_Speed+0x13c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008e0:	2b10      	cmp	r3, #16
 80008e2:	d105      	bne.n	80008f0 <Set_Speed+0xc0>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	89bb      	ldrh	r3, [r7, #12]
 80008ec:	6593      	str	r3, [r2, #88]	; 0x58
 80008ee:	e03d      	b.n	800096c <Set_Speed+0x13c>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	89bb      	ldrh	r3, [r7, #12]
 80008f8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80008fa:	e037      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000900:	2b00      	cmp	r3, #0
 8000902:	d105      	bne.n	8000910 <Set_Speed+0xe0>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800090e:	e02d      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000914:	2b04      	cmp	r3, #4
 8000916:	d105      	bne.n	8000924 <Set_Speed+0xf4>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000922:	e023      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000928:	2b08      	cmp	r3, #8
 800092a:	d105      	bne.n	8000938 <Set_Speed+0x108>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000936:	e019      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800093c:	2b0c      	cmp	r3, #12
 800093e:	d105      	bne.n	800094c <Set_Speed+0x11c>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
}
 800094a:	e00f      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000950:	2b10      	cmp	r3, #16
 8000952:	d105      	bne.n	8000960 <Set_Speed+0x130>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800095e:	e005      	b.n	800096c <Set_Speed+0x13c>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800096a:	e7ff      	b.n	800096c <Set_Speed+0x13c>
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	88888889 	.word	0x88888889
 800097c:	044aa200 	.word	0x044aa200

08000980 <Init_A4988>:
void Init_A4988(A4988_Drive* drive){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800098c:	4618      	mov	r0, r3
 800098e:	f006 ff0b 	bl	80077a8 <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 8000992:	2102      	movs	r1, #2
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fdd5 	bl	8000544 <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 800099a:	2101      	movs	r1, #1
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fe95 	bl	80006cc <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 80009a2:	2101      	movs	r1, #1
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff febc 	bl	8000722 <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 80009aa:	2101      	movs	r1, #1
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fee3 	bl	8000778 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 80009b2:	2102      	movs	r1, #2
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff0d 	bl	80007d4 <Sleep_A4988>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	font = font_t;
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <GFX_SetFont+0x1c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000094 	.word	0x20000094

080009e4 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <GFX_SetFontSize+0x16>
		size = size_t;
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <GFX_SetFontSize+0x24>)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	7013      	strb	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000

08000a0c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	4611      	mov	r1, r2
 8000a18:	461a      	mov	r2, r3
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b7e      	cmp	r3, #126	; 0x7e
 8000a26:	f200 80a3 	bhi.w	8000b70 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	75fb      	strb	r3, [r7, #23]
 8000a2e:	e096      	b.n	8000b5e <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000a30:	4b51      	ldr	r3, [pc, #324]	; (8000b78 <GFX_DrawChar+0x16c>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	3b20      	subs	r3, #32
 8000a38:	494f      	ldr	r1, [pc, #316]	; (8000b78 <GFX_DrawChar+0x16c>)
 8000a3a:	6809      	ldr	r1, [r1, #0]
 8000a3c:	3101      	adds	r1, #1
 8000a3e:	7809      	ldrb	r1, [r1, #0]
 8000a40:	fb03 f101 	mul.w	r1, r3, r1
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	440b      	add	r3, r1
 8000a48:	3302      	adds	r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000a50:	2300      	movs	r3, #0
 8000a52:	757b      	strb	r3, [r7, #21]
 8000a54:	e078      	b.n	8000b48 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d032      	beq.n	8000ac6 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000a60:	4b46      	ldr	r3, [pc, #280]	; (8000b7c <GFX_DrawChar+0x170>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d113      	bne.n	8000a90 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b218      	sxth	r0, r3
 8000a76:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f000 fa2f 	bl	8000eec <SSD1306_DrawPixel>
 8000a8e:	e052      	b.n	8000b36 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	4a3a      	ldr	r2, [pc, #232]	; (8000b7c <GFX_DrawChar+0x170>)
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	fb03 f202 	mul.w	r2, r3, r2
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	18d0      	adds	r0, r2, r3
 8000a9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000aa2:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <GFX_DrawChar+0x170>)
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	fb03 f202 	mul.w	r2, r3, r2
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	18d1      	adds	r1, r2, r3
 8000aae:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <GFX_DrawChar+0x170>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <GFX_DrawChar+0x170>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b29c      	uxth	r4, r3
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	4623      	mov	r3, r4
 8000ac0:	f000 f9bd 	bl	8000e3e <GFX_DrawFillRectangle>
 8000ac4:	e037      	b.n	8000b36 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8000ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d133      	bne.n	8000b36 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <GFX_DrawChar+0x170>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d114      	bne.n	8000b00 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b218      	sxth	r0, r3
 8000ae4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4413      	add	r3, r2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000af8:	4619      	mov	r1, r3
 8000afa:	f000 f9f7 	bl	8000eec <SSD1306_DrawPixel>
 8000afe:	e01a      	b.n	8000b36 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8000b00:	7dfb      	ldrb	r3, [r7, #23]
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <GFX_DrawChar+0x170>)
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	fb03 f202 	mul.w	r2, r3, r2
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	18d0      	adds	r0, r2, r3
 8000b0e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <GFX_DrawChar+0x170>)
 8000b14:	7812      	ldrb	r2, [r2, #0]
 8000b16:	fb03 f202 	mul.w	r2, r3, r2
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	18d1      	adds	r1, r2, r3
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <GFX_DrawChar+0x170>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <GFX_DrawChar+0x170>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b29c      	uxth	r4, r3
 8000b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4623      	mov	r3, r4
 8000b32:	f000 f984 	bl	8000e3e <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000b36:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	757b      	strb	r3, [r7, #21]
 8000b42:	7dbb      	ldrb	r3, [r7, #22]
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	75bb      	strb	r3, [r7, #22]
 8000b48:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <GFX_DrawChar+0x16c>)
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	f6ff af7f 	blt.w	8000a56 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	75fb      	strb	r3, [r7, #23]
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <GFX_DrawChar+0x16c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	7dfa      	ldrb	r2, [r7, #23]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f4ff af61 	bcc.w	8000a30 <GFX_DrawChar+0x24>
 8000b6e:	e000      	b.n	8000b72 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000b70:	bf00      	nop
            }
        }
    }
}
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	20000000 	.word	0x20000000

08000b80 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8000b98:	e03e      	b.n	8000c18 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8000b9a:	78f9      	ldrb	r1, [r7, #3]
 8000b9c:	7cfa      	ldrb	r2, [r7, #19]
 8000b9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff ff2f 	bl	8000a0c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <GFX_DrawString+0xb0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <GFX_DrawString+0xb4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	fb02 f303 	mul.w	r3, r2, r3
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8000bc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d120      	bne.n	8000c12 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	74bb      	strb	r3, [r7, #18]
 8000bd4:	e012      	b.n	8000bfc <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b218      	sxth	r0, r3
 8000be0:	7cbb      	ldrb	r3, [r7, #18]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f000 f97b 	bl	8000eec <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000bf6:	7cbb      	ldrb	r3, [r7, #18]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	74bb      	strb	r3, [r7, #18]
 8000bfc:	7cba      	ldrb	r2, [r7, #18]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <GFX_DrawString+0xb0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <GFX_DrawString+0xb4>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	fb01 f303 	mul.w	r3, r1, r3
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dbe1      	blt.n	8000bd6 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1ba      	bne.n	8000b9a <GFX_DrawString+0x1a>
	}
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000094 	.word	0x20000094
 8000c34:	20000000 	.word	0x20000000

08000c38 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1acb      	subs	r3, r1, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bfb8      	it	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	429a      	cmp	r2, r3
 8000c62:	bfcc      	ite	gt
 8000c64:	2301      	movgt	r3, #1
 8000c66:	2300      	movle	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000c6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dd0b      	ble.n	8000cac <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bfb8      	it	lt
 8000cc4:	425b      	neglt	r3, r3
 8000cc6:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000cc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da00      	bge.n	8000cd2 <GFX_WriteLine+0x9a>
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	105b      	asrs	r3, r3, #1
 8000cd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	da02      	bge.n	8000ce4 <GFX_WriteLine+0xac>
	        ystep = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000ce2:	e030      	b.n	8000d46 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8000ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000cea:	e02c      	b.n	8000d46 <GFX_WriteLine+0x10e>
	        if (steep) {
 8000cec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d009      	beq.n	8000d08 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	b211      	sxth	r1, r2
 8000cfc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8f3 	bl	8000eec <SSD1306_DrawPixel>
 8000d06:	e008      	b.n	8000d1a <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	b211      	sxth	r1, r2
 8000d10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f8e9 	bl	8000eec <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000d1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d1c:	8abb      	ldrh	r3, [r7, #20]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8000d24:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da09      	bge.n	8000d40 <GFX_WriteLine+0x108>
	            y_start += ystep;
 8000d2c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	4413      	add	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000d36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d38:	8afb      	ldrh	r3, [r7, #22]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	ddce      	ble.n	8000cec <GFX_WriteLine+0xb4>
	        }
	    }
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4613      	mov	r3, r2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff ff5d 	bl	8000c38 <GFX_WriteLine>
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af02      	add	r7, sp, #8
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff ff47 	bl	8000c38 <GFX_WriteLine>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b088      	sub	sp, #32
 8000db6:	af02      	add	r7, sp, #8
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d114      	bne.n	8000df2 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dd05      	ble.n	8000ddc <GFX_DrawLine+0x2a>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff ffb4 	bl	8000d58 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8000df0:	e021      	b.n	8000e36 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d114      	bne.n	8000e24 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd05      	ble.n	8000e0e <GFX_DrawLine+0x5c>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff ffb2 	bl	8000d86 <GFX_DrawFastHLine>
}
 8000e22:	e008      	b.n	8000e36 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8000e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ff01 	bl	8000c38 <GFX_WriteLine>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	80fb      	strh	r3, [r7, #6]
 8000e50:	4613      	mov	r3, r2
 8000e52:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8000e5a:	88ba      	ldrh	r2, [r7, #4]
 8000e5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff78 	bl	8000d58 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dbef      	blt.n	8000e5a <GFX_DrawFillRectangle+0x1c>
    }

}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <SSD1306_Command+0x30>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2178      	movs	r1, #120	; 0x78
 8000ea6:	f004 fd7d 	bl	80059a4 <HAL_I2C_Mem_Write>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000098 	.word	0x20000098

08000eb8 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <SSD1306_Data+0x30>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	2178      	movs	r1, #120	; 0x78
 8000edc:	f004 fd62 	bl	80059a4 <HAL_I2C_Mem_Write>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000098 	.word	0x20000098

08000eec <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	80bb      	strh	r3, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8000efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db79      	blt.n	8000ffa <SSD1306_DrawPixel+0x10e>
 8000f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f0c:	dc75      	bgt.n	8000ffa <SSD1306_DrawPixel+0x10e>
 8000f0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db71      	blt.n	8000ffa <SSD1306_DrawPixel+0x10e>
 8000f16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1c:	dc6d      	bgt.n	8000ffa <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d049      	beq.n	8000fb8 <SSD1306_DrawPixel+0xcc>
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	dc69      	bgt.n	8000ffc <SSD1306_DrawPixel+0x110>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d022      	beq.n	8000f72 <SSD1306_DrawPixel+0x86>
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d165      	bne.n	8000ffc <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8000f30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da00      	bge.n	8000f3e <SSD1306_DrawPixel+0x52>
 8000f3c:	3307      	adds	r3, #7
 8000f3e:	10db      	asrs	r3, r3, #3
 8000f40:	b218      	sxth	r0, r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	01db      	lsls	r3, r3, #7
 8000f46:	4413      	add	r3, r2
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <SSD1306_DrawPixel+0x11c>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	b25a      	sxtb	r2, r3
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b259      	sxtb	r1, r3
 8000f60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f64:	4603      	mov	r3, r0
 8000f66:	01db      	lsls	r3, r3, #7
 8000f68:	4413      	add	r3, r2
 8000f6a:	b2c9      	uxtb	r1, r1
 8000f6c:	4a26      	ldr	r2, [pc, #152]	; (8001008 <SSD1306_DrawPixel+0x11c>)
 8000f6e:	54d1      	strb	r1, [r2, r3]
      break;
 8000f70:	e044      	b.n	8000ffc <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8000f72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da00      	bge.n	8000f80 <SSD1306_DrawPixel+0x94>
 8000f7e:	3307      	adds	r3, #7
 8000f80:	10db      	asrs	r3, r3, #3
 8000f82:	b218      	sxth	r0, r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <SSD1306_DrawPixel+0x11c>)
 8000f8c:	5cd3      	ldrb	r3, [r2, r3]
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	b259      	sxtb	r1, r3
 8000fa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000faa:	4603      	mov	r3, r0
 8000fac:	01db      	lsls	r3, r3, #7
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2c9      	uxtb	r1, r1
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <SSD1306_DrawPixel+0x11c>)
 8000fb4:	54d1      	strb	r1, [r2, r3]
      break;
 8000fb6:	e021      	b.n	8000ffc <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8000fb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da00      	bge.n	8000fc6 <SSD1306_DrawPixel+0xda>
 8000fc4:	3307      	adds	r3, #7
 8000fc6:	10db      	asrs	r3, r3, #3
 8000fc8:	b218      	sxth	r0, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	01db      	lsls	r3, r3, #7
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <SSD1306_DrawPixel+0x11c>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	4053      	eors	r3, r2
 8000fe6:	b259      	sxtb	r1, r3
 8000fe8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fec:	4603      	mov	r3, r0
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <SSD1306_DrawPixel+0x11c>)
 8000ff6:	54d1      	strb	r1, [r2, r3]
      break;
 8000ff8:	e000      	b.n	8000ffc <SSD1306_DrawPixel+0x110>
	  return;
 8000ffa:	bf00      	nop
    }
}
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000009c 	.word	0x2000009c

0800100c <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <SSD1306_Clear+0x22>
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10d      	bne.n	800103c <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	21ff      	movs	r1, #255	; 0xff
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <SSD1306_Clear+0x38>)
 8001028:	f00d fbc6 	bl	800e7b8 <memset>
		break;
 800102c:	e006      	b.n	800103c <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800102e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001032:	2100      	movs	r1, #0
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <SSD1306_Clear+0x38>)
 8001036:	f00d fbbf 	bl	800e7b8 <memset>
		break;
 800103a:	bf00      	nop
	}
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000009c 	.word	0x2000009c

08001048 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
#ifndef SSD1306_USE_FREERTOS
	SSD1306_Command(SSD1306_PAGEADDR);
 800104c:	2022      	movs	r0, #34	; 0x22
 800104e:	f7ff ff19 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff ff16 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001058:	20ff      	movs	r0, #255	; 0xff
 800105a:	f7ff ff13 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800105e:	2021      	movs	r0, #33	; 0x21
 8001060:	f7ff ff10 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ff0d 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800106a:	207f      	movs	r0, #127	; 0x7f
 800106c:	f7ff ff0a 	bl	8000e84 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <SSD1306_Display+0x38>)
 8001076:	f7ff ff1f 	bl	8000eb8 <SSD1306_Data>
		osMutexRelease(MutexI2C4Handle);

		osThreadYield();
	}
#endif
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000009c 	.word	0x2000009c

08001084 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <SSD1306_Init+0xac>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001092:	20ae      	movs	r0, #174	; 0xae
 8001094:	f7ff fef6 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001098:	20d5      	movs	r0, #213	; 0xd5
 800109a:	f7ff fef3 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0x80);
 800109e:	2080      	movs	r0, #128	; 0x80
 80010a0:	f7ff fef0 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80010a4:	203f      	movs	r0, #63	; 0x3f
 80010a6:	f7ff feed 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80010aa:	20d3      	movs	r0, #211	; 0xd3
 80010ac:	f7ff feea 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0x00);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fee7 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80010b6:	2040      	movs	r0, #64	; 0x40
 80010b8:	f7ff fee4 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80010bc:	208d      	movs	r0, #141	; 0x8d
 80010be:	f7ff fee1 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0x14);
 80010c2:	2014      	movs	r0, #20
 80010c4:	f7ff fede 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80010c8:	2020      	movs	r0, #32
 80010ca:	f7ff fedb 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fed8 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80010d4:	20a1      	movs	r0, #161	; 0xa1
 80010d6:	f7ff fed5 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80010da:	20c8      	movs	r0, #200	; 0xc8
 80010dc:	f7ff fed2 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80010e0:	20da      	movs	r0, #218	; 0xda
 80010e2:	f7ff fecf 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0x12);
 80010e6:	2012      	movs	r0, #18
 80010e8:	f7ff fecc 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80010ec:	2081      	movs	r0, #129	; 0x81
 80010ee:	f7ff fec9 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80010f2:	20ff      	movs	r0, #255	; 0xff
 80010f4:	f7ff fec6 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80010f8:	20d9      	movs	r0, #217	; 0xd9
 80010fa:	f7ff fec3 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80010fe:	20f1      	movs	r0, #241	; 0xf1
 8001100:	f7ff fec0 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001104:	20db      	movs	r0, #219	; 0xdb
 8001106:	f7ff febd 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(0x40);
 800110a:	2040      	movs	r0, #64	; 0x40
 800110c:	f7ff feba 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001110:	20a4      	movs	r0, #164	; 0xa4
 8001112:	f7ff feb7 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001116:	20a6      	movs	r0, #166	; 0xa6
 8001118:	f7ff feb4 	bl	8000e84 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800111c:	202e      	movs	r0, #46	; 0x2e
 800111e:	f7ff feb1 	bl	8000e84 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001122:	20af      	movs	r0, #175	; 0xaf
 8001124:	f7ff feae 	bl	8000e84 <SSD1306_Command>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000098 	.word	0x20000098

08001134 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	b29b      	uxth	r3, r3
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	b299      	uxth	r1, r3
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	1c7b      	adds	r3, r7, #1
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2302      	movs	r3, #2
 8001164:	f004 fc1e 	bl	80059a4 <HAL_I2C_Mem_Write>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	729a      	strb	r2, [r3, #10]
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af04      	add	r7, sp, #16
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8001188:	883b      	ldrh	r3, [r7, #0]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	b29b      	uxth	r3, r3
 800118e:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	733b      	strb	r3, [r7, #12]
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	b299      	uxth	r1, r3
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	f004 fbf1 	bl	80059a4 <HAL_I2C_Mem_Write>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	729a      	strb	r2, [r3, #10]
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b088      	sub	sp, #32
 80011d6:	af04      	add	r7, sp, #16
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	b299      	uxth	r1, r3
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2302      	movs	r3, #2
 8001200:	f004 fce4 	bl	8005bcc <HAL_I2C_Mem_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	729a      	strb	r2, [r3, #10]
	return value;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 8001216:	b580      	push	{r7, lr}
 8001218:	b088      	sub	sp, #32
 800121a:	af04      	add	r7, sp, #16
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 8001222:	2300      	movs	r3, #0
 8001224:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	791b      	ldrb	r3, [r3, #4]
 800122e:	b29b      	uxth	r3, r3
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	b299      	uxth	r1, r3
 8001234:	887a      	ldrh	r2, [r7, #2]
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2302      	movs	r3, #2
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2302      	movs	r3, #2
 8001248:	f004 fcc0 	bl	8005bcc <HAL_I2C_Mem_Read>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8001254:	7b7b      	ldrb	r3, [r7, #13]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	81fb      	strh	r3, [r7, #14]
	return value_;
 8001264:	89fb      	ldrh	r3, [r7, #14]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2229      	movs	r2, #41	; 0x29
 8001282:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001296:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 800129e:	2124      	movs	r1, #36	; 0x24
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff96 	bl	80011d2 <readReg>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 80012ae:	2116      	movs	r1, #22
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff8e 	bl	80011d2 <readReg>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 80a9 	bne.w	8001410 <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f240 2107 	movw	r1, #519	; 0x207
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff32 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff2c 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 80012dc:	2200      	movs	r2, #0
 80012de:	2196      	movs	r1, #150	; 0x96
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff27 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 80012e6:	22fd      	movs	r2, #253	; 0xfd
 80012e8:	2197      	movs	r1, #151	; 0x97
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff22 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 80012f0:	2201      	movs	r2, #1
 80012f2:	21e3      	movs	r1, #227	; 0xe3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff1d 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 80012fa:	2203      	movs	r2, #3
 80012fc:	21e4      	movs	r1, #228	; 0xe4
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff18 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8001304:	2202      	movs	r2, #2
 8001306:	21e5      	movs	r1, #229	; 0xe5
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff13 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 800130e:	2201      	movs	r2, #1
 8001310:	21e6      	movs	r1, #230	; 0xe6
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff0e 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8001318:	2203      	movs	r2, #3
 800131a:	21e7      	movs	r1, #231	; 0xe7
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff09 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 8001322:	2202      	movs	r2, #2
 8001324:	21f5      	movs	r1, #245	; 0xf5
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff04 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 800132c:	2205      	movs	r2, #5
 800132e:	21d9      	movs	r1, #217	; 0xd9
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff feff 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8001336:	22ce      	movs	r2, #206	; 0xce
 8001338:	21db      	movs	r1, #219	; 0xdb
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fefa 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 8001340:	2203      	movs	r2, #3
 8001342:	21dc      	movs	r1, #220	; 0xdc
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fef5 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 800134a:	22f8      	movs	r2, #248	; 0xf8
 800134c:	21dd      	movs	r1, #221	; 0xdd
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fef0 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8001354:	2200      	movs	r2, #0
 8001356:	219f      	movs	r1, #159	; 0x9f
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff feeb 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 800135e:	223c      	movs	r2, #60	; 0x3c
 8001360:	21a3      	movs	r1, #163	; 0xa3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fee6 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8001368:	2200      	movs	r2, #0
 800136a:	21b7      	movs	r1, #183	; 0xb7
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fee1 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 8001372:	223c      	movs	r2, #60	; 0x3c
 8001374:	21bb      	movs	r1, #187	; 0xbb
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fedc 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 800137c:	2209      	movs	r2, #9
 800137e:	21b2      	movs	r1, #178	; 0xb2
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fed7 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8001386:	2209      	movs	r2, #9
 8001388:	21ca      	movs	r1, #202	; 0xca
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fed2 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fecc 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 800139c:	2217      	movs	r2, #23
 800139e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fec6 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f240 11ad 	movw	r1, #429	; 0x1ad
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fec0 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 80013b4:	2205      	movs	r2, #5
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff febb 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 80013be:	2205      	movs	r2, #5
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff feb5 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 80013ca:	2205      	movs	r2, #5
 80013cc:	f240 1199 	movw	r1, #409	; 0x199
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff feaf 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 80013d6:	221b      	movs	r2, #27
 80013d8:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fea9 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 80013e2:	223e      	movs	r2, #62	; 0x3e
 80013e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fea3 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 80013ee:	221f      	movs	r2, #31
 80013f0:	f240 11a7 	movw	r1, #423	; 0x1a7
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fe9d 	bl	8001134 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2130      	movs	r1, #48	; 0x30
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fe98 	bl	8001134 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2116      	movs	r1, #22
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe93 	bl	8001134 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 800140e:	e021      	b.n	8001454 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 8001410:	2196      	movs	r1, #150	; 0x96
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff feff 	bl	8001216 <readReg16Bit>
 8001418:	4603      	mov	r3, r0
 800141a:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 800141c:	2254      	movs	r2, #84	; 0x54
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	4293      	cmp	r3, r2
 8001422:	d103      	bne.n	800142c <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	715a      	strb	r2, [r3, #5]
 800142a:	e00a      	b.n	8001442 <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 800142c:	227f      	movs	r2, #127	; 0x7f
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	4293      	cmp	r3, r2
 8001432:	d103      	bne.n	800143c <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	715a      	strb	r2, [r3, #5]
 800143a:	e002      	b.n	8001442 <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	799a      	ldrb	r2, [r3, #6]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	795b      	ldrb	r3, [r3, #5]
 800144a:	fb12 f303 	smulbb	r3, r2, r3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	719a      	strb	r2, [r3, #6]
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8001468:	2314      	movs	r3, #20
 800146a:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d043      	beq.n	80014fa <setScaling_VL6180X+0x9e>
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d840      	bhi.n	80014fa <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	795b      	ldrb	r3, [r3, #5]
 8001482:	461a      	mov	r2, r3
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <setScaling_VL6180X+0xa8>)
 8001486:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800148a:	461a      	mov	r2, r3
 800148c:	2196      	movs	r1, #150	; 0x96
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fe72 	bl	8001178 <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	799a      	ldrb	r2, [r3, #6]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	2124      	movs	r1, #36	; 0x24
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fe44 	bl	8001134 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	795b      	ldrb	r3, [r3, #5]
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	2121      	movs	r1, #33	; 0x21
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe39 	bl	8001134 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 80014c2:	212d      	movs	r1, #45	; 0x2d
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fe84 	bl	80011d2 <readReg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 80014ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	212d      	movs	r1, #45	; 0x2d
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe1e 	bl	8001134 <writeReg>
 80014f8:	e000      	b.n	80014fc <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 80014fa:	bf00      	nop
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	0800ef0c 	.word	0x0800ef0c

08001508 <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 8001510:	f003 fe40 	bl	8005194 <HAL_GetTick>
 8001514:	4603      	mov	r3, r0
 8001516:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8001518:	e010      	b.n	800153c <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	891b      	ldrh	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00c      	beq.n	800153c <readRangeContinuous_VL6180X+0x34>
 8001522:	f003 fe37 	bl	8005194 <HAL_GetTick>
 8001526:	4603      	mov	r3, r0
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	8912      	ldrh	r2, [r2, #8]
 8001534:	4293      	cmp	r3, r2
 8001536:	dd01      	ble.n	800153c <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	e014      	b.n	8001566 <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 800153c:	214f      	movs	r1, #79	; 0x4f
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe47 	bl	80011d2 <readReg>
 8001544:	4603      	mov	r3, r0
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0e5      	beq.n	800151a <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 800154e:	2162      	movs	r1, #98	; 0x62
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fe3e 	bl	80011d2 <readReg>
 8001556:	4603      	mov	r3, r0
 8001558:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 800155a:	2201      	movs	r2, #1
 800155c:	2115      	movs	r1, #21
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fde8 	bl	8001134 <writeReg>
  return range;
 8001564:	7b7b      	ldrb	r3, [r7, #13]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 8001576:	2201      	movs	r2, #1
 8001578:	2118      	movs	r1, #24
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fdda 	bl	8001134 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffc1 	bl	8001508 <readRangeContinuous_VL6180X>
 8001586:	4603      	mov	r3, r0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 8001598:	2230      	movs	r2, #48	; 0x30
 800159a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fdc8 	bl	8001134 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 80015a4:	2246      	movs	r2, #70	; 0x46
 80015a6:	213f      	movs	r1, #63	; 0x3f
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fdc3 	bl	8001134 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	2131      	movs	r1, #49	; 0x31
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fdbe 	bl	8001134 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 80015b8:	2263      	movs	r2, #99	; 0x63
 80015ba:	2140      	movs	r1, #64	; 0x40
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fddb 	bl	8001178 <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 80015c2:	2201      	movs	r2, #1
 80015c4:	212e      	movs	r1, #46	; 0x2e
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fdb4 	bl	8001134 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 80015cc:	2209      	movs	r2, #9
 80015ce:	211b      	movs	r1, #27
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fdaf 	bl	8001134 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 80015d6:	2231      	movs	r2, #49	; 0x31
 80015d8:	213e      	movs	r1, #62	; 0x3e
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fdaa 	bl	8001134 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 80015e0:	2224      	movs	r2, #36	; 0x24
 80015e2:	2114      	movs	r1, #20
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fda5 	bl	8001134 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 80015ea:	2231      	movs	r2, #49	; 0x31
 80015ec:	211c      	movs	r1, #28
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fda0 	bl	8001134 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f240 21a3 	movw	r1, #675	; 0x2a3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd9a 	bl	8001134 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 8001600:	2101      	movs	r1, #1
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff2a 	bl	800145c <setScaling_VL6180X>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	795b      	ldrb	r3, [r3, #5]
 800161c:	b29c      	uxth	r4, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa5 	bl	800156e <readRangeSingle_VL6180X>
 8001624:	4603      	mov	r3, r0
 8001626:	b29b      	uxth	r3, r3
 8001628:	fb14 f303 	smulbb	r3, r4, r3
 800162c:	b29b      	uxth	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}

08001636 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b088      	sub	sp, #32
 800163a:	af04      	add	r7, sp, #16
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	b29b      	uxth	r3, r3
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b299      	uxth	r1, r3
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	b29a      	uxth	r2, r3
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	2301      	movs	r3, #1
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f107 030f 	add.w	r3, r7, #15
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	f004 fab1 	bl	8005bcc <HAL_I2C_Mem_Read>

	return Value;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
 8001680:	4613      	mov	r3, r2
 8001682:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	b29b      	uxth	r3, r3
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	b299      	uxth	r1, r3
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1cbb      	adds	r3, r7, #2
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	f004 f97d 	bl	80059a4 <HAL_I2C_Mem_Write>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b088      	sub	sp, #32
 80016b6:	af04      	add	r7, sp, #16
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	b299      	uxth	r1, r3
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	2302      	movs	r3, #2
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	f004 fa73 	bl	8005bcc <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80016e6:	7b7b      	ldrb	r3, [r7, #13]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	b29b      	uxth	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b088      	sub	sp, #32
 8001702:	af04      	add	r7, sp, #16
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	791b      	ldrb	r3, [r3, #4]
 8001712:	b29b      	uxth	r3, r3
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	b299      	uxth	r1, r3
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	b29a      	uxth	r2, r3
 800171c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2303      	movs	r3, #3
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	f004 fa4d 	bl	8005bcc <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	4313      	orrs	r3, r2
 800173c:	7bba      	ldrb	r2, [r7, #14]
 800173e:	4313      	orrs	r3, r2
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d901      	bls.n	800175e <BMP280_SetMode+0x16>
 800175a:	2303      	movs	r3, #3
 800175c:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800175e:	21f4      	movs	r1, #244	; 0xf4
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff68 	bl	8001636 <Read8>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f023 0303 	bic.w	r3, r3, #3
 8001770:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8001772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	b25a      	sxtb	r2, r3
 800177c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001780:	4313      	orrs	r3, r2
 8001782:	b25b      	sxtb	r3, r3
 8001784:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	461a      	mov	r2, r3
 800178a:	21f4      	movs	r1, #244	; 0xf4
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff71 	bl	8001674 <Write8>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d901      	bls.n	80017b0 <BMP280_SetPressureOversampling+0x16>
 80017ac:	2305      	movs	r3, #5
 80017ae:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017b0:	21f4      	movs	r1, #244	; 0xf4
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ff3f 	bl	8001636 <Read8>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f023 031c 	bic.w	r3, r3, #28
 80017c2:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f003 031c 	and.w	r3, r3, #28
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	461a      	mov	r2, r3
 80017de:	21f4      	movs	r1, #244	; 0xf4
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff47 	bl	8001674 <Write8>
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d901      	bls.n	8001804 <BMP280_SetTemperatureOversampling+0x16>
 8001800:	2305      	movs	r3, #5
 8001802:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001804:	21f4      	movs	r1, #244	; 0xf4
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff15 	bl	8001636 <Read8>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	015b      	lsls	r3, r3, #5
 800181c:	b25a      	sxtb	r2, r3
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4313      	orrs	r3, r2
 8001824:	b25b      	sxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	461a      	mov	r2, r3
 800182c:	21f4      	movs	r1, #244	; 0xf4
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff20 	bl	8001674 <Write8>
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 8001844:	21fa      	movs	r1, #250	; 0xfa
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff59 	bl	80016fe <Read24>
 800184c:	4603      	mov	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	111b      	asrs	r3, r3, #4
 8001854:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <BMP280_ReadTemperatureRaw>
 800186e:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	10da      	asrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	8b5b      	ldrh	r3, [r3, #26]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	12db      	asrs	r3, r3, #11
 8001888:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	111b      	asrs	r3, r3, #4
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	8b52      	ldrh	r2, [r2, #26]
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	1112      	asrs	r2, r2, #4
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	8b49      	ldrh	r1, [r1, #26]
 800189c:	1a52      	subs	r2, r2, r1
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	139b      	asrs	r3, r3, #14
 80018b0:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	441a      	add	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3380      	adds	r3, #128	; 0x80
 80018c8:	121b      	asrs	r3, r3, #8
 80018ca:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018d6:	ed9f 5b06 	vldr	d5, [pc, #24]	; 80018f0 <BMP280_ReadTemperature+0x90>
 80018da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40590000 	.word	0x40590000

080018f8 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001912:	21d0      	movs	r1, #208	; 0xd0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fe8e 	bl	8001636 <Read8>
 800191a:	4603      	mov	r3, r0
 800191c:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b58      	cmp	r3, #88	; 0x58
 8001922:	d001      	beq.n	8001928 <BMP280_Init+0x30>
	{
		return 1;
 8001924:	2301      	movs	r3, #1
 8001926:	e06c      	b.n	8001a02 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001928:	2188      	movs	r1, #136	; 0x88
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff fec1 	bl	80016b2 <Read16>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001938:	218a      	movs	r1, #138	; 0x8a
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff feb9 	bl	80016b2 <Read16>
 8001940:	4603      	mov	r3, r0
 8001942:	b21a      	sxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001948:	218c      	movs	r1, #140	; 0x8c
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff feb1 	bl	80016b2 <Read16>
 8001950:	4603      	mov	r3, r0
 8001952:	b21a      	sxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001958:	218e      	movs	r1, #142	; 0x8e
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fea9 	bl	80016b2 <Read16>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001968:	2190      	movs	r1, #144	; 0x90
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fea1 	bl	80016b2 <Read16>
 8001970:	4603      	mov	r3, r0
 8001972:	b21a      	sxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001978:	2192      	movs	r1, #146	; 0x92
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe99 	bl	80016b2 <Read16>
 8001980:	4603      	mov	r3, r0
 8001982:	b21a      	sxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001988:	2194      	movs	r1, #148	; 0x94
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fe91 	bl	80016b2 <Read16>
 8001990:	4603      	mov	r3, r0
 8001992:	b21a      	sxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001998:	2196      	movs	r1, #150	; 0x96
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fe89 	bl	80016b2 <Read16>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 80019a8:	2198      	movs	r1, #152	; 0x98
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fe81 	bl	80016b2 <Read16>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 80019b8:	219a      	movs	r1, #154	; 0x9a
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fe79 	bl	80016b2 <Read16>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 80019c8:	219c      	movs	r1, #156	; 0x9c
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff fe71 	bl	80016b2 <Read16>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 80019d8:	219e      	movs	r1, #158	; 0x9e
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fe69 	bl	80016b2 <Read16>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 80019e8:	2105      	movs	r1, #5
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff feff 	bl	80017ee <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 80019f0:	2105      	movs	r1, #5
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff fed1 	bl	800179a <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 80019f8:	2103      	movs	r1, #3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fea4 	bl	8001748 <BMP280_SetMode>

	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
	static uint32_t LastTick;

	if (LastTick < osKernelGetTickCount()) {
 8001a10:	f008 fd3a 	bl	800a488 <osKernelGetTickCount>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <vApplicationIdleHook+0x2c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d909      	bls.n	8001a32 <vApplicationIdleHook+0x26>
		IdleTicks++;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <vApplicationIdleHook+0x30>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <vApplicationIdleHook+0x30>)
 8001a26:	6013      	str	r3, [r2, #0]
		LastTick = osKernelGetTickCount();
 8001a28:	f008 fd2e 	bl	800a488 <osKernelGetTickCount>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <vApplicationIdleHook+0x2c>)
 8001a30:	6013      	str	r3, [r2, #0]
	}
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000528 	.word	0x20000528
 8001a3c:	200004a0 	.word	0x200004a0

08001a40 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001a44:	4884      	ldr	r0, [pc, #528]	; (8001c58 <MX_FREERTOS_Init+0x218>)
 8001a46:	f008 ff3f 	bl	800a8c8 <osMutexNew>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a83      	ldr	r2, [pc, #524]	; (8001c5c <MX_FREERTOS_Init+0x21c>)
 8001a4e:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 8001a50:	4883      	ldr	r0, [pc, #524]	; (8001c60 <MX_FREERTOS_Init+0x220>)
 8001a52:	f008 ff39 	bl	800a8c8 <osMutexNew>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a82      	ldr	r2, [pc, #520]	; (8001c64 <MX_FREERTOS_Init+0x224>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C4 */
  MutexI2C4Handle = osMutexNew(&MutexI2C4_attributes);
 8001a5c:	4882      	ldr	r0, [pc, #520]	; (8001c68 <MX_FREERTOS_Init+0x228>)
 8001a5e:	f008 ff33 	bl	800a8c8 <osMutexNew>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <MX_FREERTOS_Init+0x22c>)
 8001a66:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SyringeInfoOLEDSemaphore */
  SyringeInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoOLEDSemaphore_attributes);
 8001a68:	4a81      	ldr	r2, [pc, #516]	; (8001c70 <MX_FREERTOS_Init+0x230>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f009 f873 	bl	800ab58 <osSemaphoreNew>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <MX_FREERTOS_Init+0x234>)
 8001a76:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoOLEDSemaphore */
  NeedleInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoOLEDSemaphore_attributes);
 8001a78:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <MX_FREERTOS_Init+0x238>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f009 f86b 	bl	800ab58 <osSemaphoreNew>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a7d      	ldr	r2, [pc, #500]	; (8001c7c <MX_FREERTOS_Init+0x23c>)
 8001a86:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationSemaphore */
  TemperatureInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &TemperatureInfoCommunicationSemaphore_attributes);
 8001a88:	4a7d      	ldr	r2, [pc, #500]	; (8001c80 <MX_FREERTOS_Init+0x240>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f009 f863 	bl	800ab58 <osSemaphoreNew>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a7b      	ldr	r2, [pc, #492]	; (8001c84 <MX_FREERTOS_Init+0x244>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoCommunicationSemaphore */
  SyringeInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoCommunicationSemaphore_attributes);
 8001a98:	4a7b      	ldr	r2, [pc, #492]	; (8001c88 <MX_FREERTOS_Init+0x248>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f009 f85b 	bl	800ab58 <osSemaphoreNew>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a79      	ldr	r2, [pc, #484]	; (8001c8c <MX_FREERTOS_Init+0x24c>)
 8001aa6:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoCommunicationSemaphore */
  NeedleInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoCommunicationSemaphore_attributes);
 8001aa8:	4a79      	ldr	r2, [pc, #484]	; (8001c90 <MX_FREERTOS_Init+0x250>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2001      	movs	r0, #1
 8001aae:	f009 f853 	bl	800ab58 <osSemaphoreNew>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <MX_FREERTOS_Init+0x254>)
 8001ab6:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SyringeInfoTimerOLED */
  SyringeInfoTimerOLEDHandle = osTimerNew(SyringeInfoTimerOLEDCallback, osTimerPeriodic, NULL, &SyringeInfoTimerOLED_attributes);
 8001ab8:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <MX_FREERTOS_Init+0x258>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	2101      	movs	r1, #1
 8001abe:	4877      	ldr	r0, [pc, #476]	; (8001c9c <MX_FREERTOS_Init+0x25c>)
 8001ac0:	f008 fe3e 	bl	800a740 <osTimerNew>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a76      	ldr	r2, [pc, #472]	; (8001ca0 <MX_FREERTOS_Init+0x260>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerOLED */
  NeedleInfoTimerOLEDHandle = osTimerNew(NeedleInfoTimerOLEDCallback, osTimerPeriodic, NULL, &NeedleInfoTimerOLED_attributes);
 8001aca:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <MX_FREERTOS_Init+0x264>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4875      	ldr	r0, [pc, #468]	; (8001ca8 <MX_FREERTOS_Init+0x268>)
 8001ad2:	f008 fe35 	bl	800a740 <osTimerNew>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a74      	ldr	r2, [pc, #464]	; (8001cac <MX_FREERTOS_Init+0x26c>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerCommunication */
  NeedleInfoTimerCommunicationHandle = osTimerNew(NeedleInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &NeedleInfoTimerCommunication_attributes);
 8001adc:	4b74      	ldr	r3, [pc, #464]	; (8001cb0 <MX_FREERTOS_Init+0x270>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4874      	ldr	r0, [pc, #464]	; (8001cb4 <MX_FREERTOS_Init+0x274>)
 8001ae4:	f008 fe2c 	bl	800a740 <osTimerNew>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a73      	ldr	r2, [pc, #460]	; (8001cb8 <MX_FREERTOS_Init+0x278>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoTimerCommunication */
  SyringeInfoTimerCommunicationHandle = osTimerNew(SyringeInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &SyringeInfoTimerCommunication_attributes);
 8001aee:	4b73      	ldr	r3, [pc, #460]	; (8001cbc <MX_FREERTOS_Init+0x27c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	2101      	movs	r1, #1
 8001af4:	4872      	ldr	r0, [pc, #456]	; (8001cc0 <MX_FREERTOS_Init+0x280>)
 8001af6:	f008 fe23 	bl	800a740 <osTimerNew>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <MX_FREERTOS_Init+0x284>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* creation of IDLETimeTimer */
  IDLETimeTimerHandle = osTimerNew(IDLETimeTimerCallback, osTimerPeriodic, NULL, &IDLETimeTimer_attributes);
 8001b00:	4b71      	ldr	r3, [pc, #452]	; (8001cc8 <MX_FREERTOS_Init+0x288>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	4871      	ldr	r0, [pc, #452]	; (8001ccc <MX_FREERTOS_Init+0x28c>)
 8001b08:	f008 fe1a 	bl	800a740 <osTimerNew>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a70      	ldr	r2, [pc, #448]	; (8001cd0 <MX_FREERTOS_Init+0x290>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationTimer */
  TemperatureInfoCommunicationTimerHandle = osTimerNew(TemperatureInfoCommunicationTimerCallback, osTimerPeriodic, NULL, &TemperatureInfoCommunicationTimer_attributes);
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <MX_FREERTOS_Init+0x294>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	2101      	movs	r1, #1
 8001b18:	486f      	ldr	r0, [pc, #444]	; (8001cd8 <MX_FREERTOS_Init+0x298>)
 8001b1a:	f008 fe11 	bl	800a740 <osTimerNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <MX_FREERTOS_Init+0x29c>)
 8001b22:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSyringeInfoOLED */
  QueueSyringeInfoOLEDHandle = osMessageQueueNew (4, sizeof(Syringe_info), &QueueSyringeInfoOLED_attributes);
 8001b24:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <MX_FREERTOS_Init+0x2a0>)
 8001b26:	2104      	movs	r1, #4
 8001b28:	2004      	movs	r0, #4
 8001b2a:	f009 f96f 	bl	800ae0c <osMessageQueueNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a6c      	ldr	r2, [pc, #432]	; (8001ce4 <MX_FREERTOS_Init+0x2a4>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeInfoCommunication */
  QueueSyringeInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Syringe_info), &QueueSyringeInfoCommunication_attributes);
 8001b34:	4a6c      	ldr	r2, [pc, #432]	; (8001ce8 <MX_FREERTOS_Init+0x2a8>)
 8001b36:	2104      	movs	r1, #4
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f009 f967 	bl	800ae0c <osMessageQueueNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <MX_FREERTOS_Init+0x2ac>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoOLED */
  QueueNeedleInfoOLEDHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoOLED_attributes);
 8001b44:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <MX_FREERTOS_Init+0x2b0>)
 8001b46:	2104      	movs	r1, #4
 8001b48:	2004      	movs	r0, #4
 8001b4a:	f009 f95f 	bl	800ae0c <osMessageQueueNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a68      	ldr	r2, [pc, #416]	; (8001cf4 <MX_FREERTOS_Init+0x2b4>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoCommunication */
  QueueNeedleInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Needle_info), &QueueNeedleInfoCommunication_attributes);
 8001b54:	4a68      	ldr	r2, [pc, #416]	; (8001cf8 <MX_FREERTOS_Init+0x2b8>)
 8001b56:	2104      	movs	r1, #4
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f009 f957 	bl	800ae0c <osMessageQueueNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <MX_FREERTOS_Init+0x2bc>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of QueueTemperatureCommunication */
  QueueTemperatureCommunicationHandle = osMessageQueueNew (4, sizeof(Temperature_info), &QueueTemperatureCommunication_attributes);
 8001b64:	4a66      	ldr	r2, [pc, #408]	; (8001d00 <MX_FREERTOS_Init+0x2c0>)
 8001b66:	2108      	movs	r1, #8
 8001b68:	2004      	movs	r0, #4
 8001b6a:	f009 f94f 	bl	800ae0c <osMessageQueueNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a64      	ldr	r2, [pc, #400]	; (8001d04 <MX_FREERTOS_Init+0x2c4>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleSetPointCommunication */
  QueueNeedleSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueNeedleSetPointCommunication_attributes);
 8001b74:	4a64      	ldr	r2, [pc, #400]	; (8001d08 <MX_FREERTOS_Init+0x2c8>)
 8001b76:	2102      	movs	r1, #2
 8001b78:	2004      	movs	r0, #4
 8001b7a:	f009 f947 	bl	800ae0c <osMessageQueueNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a62      	ldr	r2, [pc, #392]	; (8001d0c <MX_FREERTOS_Init+0x2cc>)
 8001b82:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeSetPointCommunication */
  QueueSyringeSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueSyringeSetPointCommunication_attributes);
 8001b84:	4a62      	ldr	r2, [pc, #392]	; (8001d10 <MX_FREERTOS_Init+0x2d0>)
 8001b86:	2102      	movs	r1, #2
 8001b88:	2004      	movs	r0, #4
 8001b8a:	f009 f93f 	bl	800ae0c <osMessageQueueNew>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a60      	ldr	r2, [pc, #384]	; (8001d14 <MX_FREERTOS_Init+0x2d4>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringePermission */
  QueueSyringePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueSyringePermission_attributes);
 8001b94:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <MX_FREERTOS_Init+0x2d8>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f009 f937 	bl	800ae0c <osMessageQueueNew>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a5e      	ldr	r2, [pc, #376]	; (8001d1c <MX_FREERTOS_Init+0x2dc>)
 8001ba2:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedlePermission */
  QueueNeedlePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueNeedlePermission_attributes);
 8001ba4:	4a5e      	ldr	r2, [pc, #376]	; (8001d20 <MX_FREERTOS_Init+0x2e0>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f009 f92f 	bl	800ae0c <osMessageQueueNew>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <MX_FREERTOS_Init+0x2e4>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* creation of QueueCommunicationPermission */
  QueueCommunicationPermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueCommunicationPermission_attributes);
 8001bb4:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <MX_FREERTOS_Init+0x2e8>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f009 f927 	bl	800ae0c <osMessageQueueNew>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a5a      	ldr	r2, [pc, #360]	; (8001d2c <MX_FREERTOS_Init+0x2ec>)
 8001bc2:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeSpeedRPM */
  QueueSyringeSpeedRPMHandle = osMessageQueueNew (2, sizeof(uint16_t), &QueueSyringeSpeedRPM_attributes);
 8001bc4:	4a5a      	ldr	r2, [pc, #360]	; (8001d30 <MX_FREERTOS_Init+0x2f0>)
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f009 f91f 	bl	800ae0c <osMessageQueueNew>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <MX_FREERTOS_Init+0x2f4>)
 8001bd2:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleSpeedRPM */
  QueueNeedleSpeedRPMHandle = osMessageQueueNew (2, sizeof(uint16_t), &QueueNeedleSpeedRPM_attributes);
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <MX_FREERTOS_Init+0x2f8>)
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f009 f917 	bl	800ae0c <osMessageQueueNew>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <MX_FREERTOS_Init+0x2fc>)
 8001be2:	6013      	str	r3, [r2, #0]

  /* creation of QueueMotorStatus */
  QueueMotorStatusHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueMotorStatus_attributes);
 8001be4:	4a56      	ldr	r2, [pc, #344]	; (8001d40 <MX_FREERTOS_Init+0x300>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f009 f90f 	bl	800ae0c <osMessageQueueNew>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a54      	ldr	r2, [pc, #336]	; (8001d44 <MX_FREERTOS_Init+0x304>)
 8001bf2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTask */
  HeartBeatTaskHandle = osThreadNew(StartHeartBeatTask, NULL, &HeartBeatTask_attributes);
 8001bf4:	4a54      	ldr	r2, [pc, #336]	; (8001d48 <MX_FREERTOS_Init+0x308>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4854      	ldr	r0, [pc, #336]	; (8001d4c <MX_FREERTOS_Init+0x30c>)
 8001bfa:	f008 fc77 	bl	800a4ec <osThreadNew>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a53      	ldr	r2, [pc, #332]	; (8001d50 <MX_FREERTOS_Init+0x310>)
 8001c02:	6013      	str	r3, [r2, #0]

  /* creation of SyringeControlT */
  SyringeControlTHandle = osThreadNew(StartSyringeControlTask, NULL, &SyringeControlT_attributes);
 8001c04:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <MX_FREERTOS_Init+0x314>)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4853      	ldr	r0, [pc, #332]	; (8001d58 <MX_FREERTOS_Init+0x318>)
 8001c0a:	f008 fc6f 	bl	800a4ec <osThreadNew>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <MX_FREERTOS_Init+0x31c>)
 8001c12:	6013      	str	r3, [r2, #0]

  /* creation of NeedleControlTa */
  NeedleControlTaHandle = osThreadNew(StartNeedleControlTask, NULL, &NeedleControlTa_attributes);
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <MX_FREERTOS_Init+0x320>)
 8001c16:	2100      	movs	r1, #0
 8001c18:	4852      	ldr	r0, [pc, #328]	; (8001d64 <MX_FREERTOS_Init+0x324>)
 8001c1a:	f008 fc67 	bl	800a4ec <osThreadNew>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <MX_FREERTOS_Init+0x328>)
 8001c22:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <MX_FREERTOS_Init+0x32c>)
 8001c26:	2100      	movs	r1, #0
 8001c28:	4851      	ldr	r0, [pc, #324]	; (8001d70 <MX_FREERTOS_Init+0x330>)
 8001c2a:	f008 fc5f 	bl	800a4ec <osThreadNew>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <MX_FREERTOS_Init+0x334>)
 8001c32:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);
 8001c34:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <MX_FREERTOS_Init+0x338>)
 8001c36:	2100      	movs	r1, #0
 8001c38:	4850      	ldr	r0, [pc, #320]	; (8001d7c <MX_FREERTOS_Init+0x33c>)
 8001c3a:	f008 fc57 	bl	800a4ec <osThreadNew>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <MX_FREERTOS_Init+0x340>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureTask */
  TemperatureTaskHandle = osThreadNew(StartTemperatureTask, NULL, &TemperatureTask_attributes);
 8001c44:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <MX_FREERTOS_Init+0x344>)
 8001c46:	2100      	movs	r1, #0
 8001c48:	484f      	ldr	r0, [pc, #316]	; (8001d88 <MX_FREERTOS_Init+0x348>)
 8001c4a:	f008 fc4f 	bl	800a4ec <osThreadNew>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <MX_FREERTOS_Init+0x34c>)
 8001c52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	0800f364 	.word	0x0800f364
 8001c5c:	20000508 	.word	0x20000508
 8001c60:	0800f374 	.word	0x0800f374
 8001c64:	2000050c 	.word	0x2000050c
 8001c68:	0800f384 	.word	0x0800f384
 8001c6c:	20000510 	.word	0x20000510
 8001c70:	0800f394 	.word	0x0800f394
 8001c74:	20000514 	.word	0x20000514
 8001c78:	0800f3a4 	.word	0x0800f3a4
 8001c7c:	20000518 	.word	0x20000518
 8001c80:	0800f3b4 	.word	0x0800f3b4
 8001c84:	2000051c 	.word	0x2000051c
 8001c88:	0800f3c4 	.word	0x0800f3c4
 8001c8c:	20000520 	.word	0x20000520
 8001c90:	0800f3d4 	.word	0x0800f3d4
 8001c94:	20000524 	.word	0x20000524
 8001c98:	0800f304 	.word	0x0800f304
 8001c9c:	080027c9 	.word	0x080027c9
 8001ca0:	200004f0 	.word	0x200004f0
 8001ca4:	0800f314 	.word	0x0800f314
 8001ca8:	080027e9 	.word	0x080027e9
 8001cac:	200004f4 	.word	0x200004f4
 8001cb0:	0800f324 	.word	0x0800f324
 8001cb4:	08002809 	.word	0x08002809
 8001cb8:	200004f8 	.word	0x200004f8
 8001cbc:	0800f334 	.word	0x0800f334
 8001cc0:	08002829 	.word	0x08002829
 8001cc4:	200004fc 	.word	0x200004fc
 8001cc8:	0800f344 	.word	0x0800f344
 8001ccc:	08002849 	.word	0x08002849
 8001cd0:	20000500 	.word	0x20000500
 8001cd4:	0800f354 	.word	0x0800f354
 8001cd8:	08002881 	.word	0x08002881
 8001cdc:	20000504 	.word	0x20000504
 8001ce0:	0800f1cc 	.word	0x0800f1cc
 8001ce4:	200004bc 	.word	0x200004bc
 8001ce8:	0800f1e4 	.word	0x0800f1e4
 8001cec:	200004c0 	.word	0x200004c0
 8001cf0:	0800f1fc 	.word	0x0800f1fc
 8001cf4:	200004c4 	.word	0x200004c4
 8001cf8:	0800f214 	.word	0x0800f214
 8001cfc:	200004c8 	.word	0x200004c8
 8001d00:	0800f22c 	.word	0x0800f22c
 8001d04:	200004cc 	.word	0x200004cc
 8001d08:	0800f244 	.word	0x0800f244
 8001d0c:	200004d0 	.word	0x200004d0
 8001d10:	0800f25c 	.word	0x0800f25c
 8001d14:	200004d4 	.word	0x200004d4
 8001d18:	0800f274 	.word	0x0800f274
 8001d1c:	200004d8 	.word	0x200004d8
 8001d20:	0800f28c 	.word	0x0800f28c
 8001d24:	200004dc 	.word	0x200004dc
 8001d28:	0800f2a4 	.word	0x0800f2a4
 8001d2c:	200004e0 	.word	0x200004e0
 8001d30:	0800f2bc 	.word	0x0800f2bc
 8001d34:	200004e4 	.word	0x200004e4
 8001d38:	0800f2d4 	.word	0x0800f2d4
 8001d3c:	200004e8 	.word	0x200004e8
 8001d40:	0800f2ec 	.word	0x0800f2ec
 8001d44:	200004ec 	.word	0x200004ec
 8001d48:	0800f0f4 	.word	0x0800f0f4
 8001d4c:	08001d91 	.word	0x08001d91
 8001d50:	200004a4 	.word	0x200004a4
 8001d54:	0800f118 	.word	0x0800f118
 8001d58:	08001dd9 	.word	0x08001dd9
 8001d5c:	200004a8 	.word	0x200004a8
 8001d60:	0800f13c 	.word	0x0800f13c
 8001d64:	080020b9 	.word	0x080020b9
 8001d68:	200004ac 	.word	0x200004ac
 8001d6c:	0800f160 	.word	0x0800f160
 8001d70:	08002365 	.word	0x08002365
 8001d74:	200004b0 	.word	0x200004b0
 8001d78:	0800f184 	.word	0x0800f184
 8001d7c:	08002535 	.word	0x08002535
 8001d80:	200004b4 	.word	0x200004b4
 8001d84:	0800f1a8 	.word	0x0800f1a8
 8001d88:	08002665 	.word	0x08002665
 8001d8c:	200004b8 	.word	0x200004b8

08001d90 <StartHeartBeatTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHeartBeatTask */
void StartHeartBeatTask(void *argument)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTask */
	osTimerStart(IDLETimeTimerHandle, 1000);
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <StartHeartBeatTask+0x3c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001da0:	4618      	mov	r0, r3
 8001da2:	f008 fd51 	bl	800a848 <osTimerStart>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001da6:	2101      	movs	r1, #1
 8001da8:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <StartHeartBeatTask+0x40>)
 8001daa:	f003 fd38 	bl	800581e <HAL_GPIO_TogglePin>
		osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8001dae:	f008 fb93 	bl	800a4d8 <osKernelGetTickFreq>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <StartHeartBeatTask+0x44>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f008 fc37 	bl	800a638 <osDelay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001dca:	e7ec      	b.n	8001da6 <StartHeartBeatTask+0x16>
 8001dcc:	20000500 	.word	0x20000500
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <StartSyringeControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSyringeControlTask */
void StartSyringeControlTask(void *argument)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b0a1      	sub	sp, #132	; 0x84
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSyringeControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Syringe = { .NAME = "SYRINGE", .STEPS = 200, .RESOLUTION =
 8001de0:	4aa7      	ldr	r2, [pc, #668]	; (8002080 <StartSyringeControlTask+0x2a8>)
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4611      	mov	r1, r2
 8001de8:	2258      	movs	r2, #88	; 0x58
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00c fcd6 	bl	800e79c <memcpy>
	// Queue info
	//
	Syringe_info _Syringe_info;
	uint16_t syringe_setpoint_change;
	uint8_t _Permission;
	_Permission = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	737b      	strb	r3, [r7, #13]
	//
	// Initialization
	//
	Init_A4988(&Syringe); // Drive initialization
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fdc1 	bl	8000980 <Init_A4988>
	Set_Speed(&Syringe, 100); // Base speed TODO check
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	2164      	movs	r1, #100	; 0x64
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fd13 	bl	8000830 <Set_Speed>
	HAL_TIM_Base_Stop_IT(Syringe.TIM_COUNTER_SLAVE);
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 fd43 	bl	8007898 <HAL_TIM_Base_Stop_IT>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8001e12:	4b9c      	ldr	r3, [pc, #624]	; (8002084 <StartSyringeControlTask+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f008 fdee 	bl	800a9fc <osMutexAcquire>
	VL6180X_Init(&Syringe_sensor, &hi2c4); // Sensor initialization
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4998      	ldr	r1, [pc, #608]	; (8002088 <StartSyringeControlTask+0x2b0>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fa21 	bl	800126e <VL6180X_Init>
	configureDefault_VL6180X(&Syringe_sensor); // Sensor initialization
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fbad 	bl	8001590 <configureDefault_VL6180X>
	osMutexRelease(MutexI2C4Handle);
 8001e36:	4b93      	ldr	r3, [pc, #588]	; (8002084 <StartSyringeControlTask+0x2ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f008 fe3c 	bl	800aab8 <osMutexRelease>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8001e40:	4b90      	ldr	r3, [pc, #576]	; (8002084 <StartSyringeControlTask+0x2ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f008 fdd7 	bl	800a9fc <osMutexAcquire>
	_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fbdc 	bl	8001610 <readRangeSingleMillimeters_VL6180X>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	823b      	strh	r3, [r7, #16]
			&Syringe_sensor); // Initial measurement
	_Syringe_info.Set_distance_syringe = _Syringe_info.MEASURE_Syringe;
 8001e5c:	8a3b      	ldrh	r3, [r7, #16]
 8001e5e:	827b      	strh	r3, [r7, #18]
	osMutexRelease(MutexI2C4Handle);
 8001e60:	4b88      	ldr	r3, [pc, #544]	; (8002084 <StartSyringeControlTask+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f008 fe27 	bl	800aab8 <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(SyringeInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000); // OLED Timer
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <StartSyringeControlTask+0x2b4>)
 8001e6c:	681c      	ldr	r4, [r3, #0]
 8001e6e:	f008 fb33 	bl	800a4d8 <osKernelGetTickFreq>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f240 2226 	movw	r2, #550	; 0x226
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	4a84      	ldr	r2, [pc, #528]	; (8002090 <StartSyringeControlTask+0x2b8>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	4619      	mov	r1, r3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f008 fcde 	bl	800a848 <osTimerStart>
	osTimerStart(SyringeInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000); // Communication Timer
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <StartSyringeControlTask+0x2bc>)
 8001e8e:	681c      	ldr	r4, [r3, #0]
 8001e90:	f008 fb22 	bl	800a4d8 <osKernelGetTickFreq>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f240 2226 	movw	r2, #550	; 0x226
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	4a7c      	ldr	r2, [pc, #496]	; (8002090 <StartSyringeControlTask+0x2b8>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f008 fccd 	bl	800a848 <osTimerStart>
	for (;;) {
		//
		// Get data
		//
		// Get SetPoint
		if (osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)) {
 8001eae:	4b7a      	ldr	r3, [pc, #488]	; (8002098 <StartSyringeControlTask+0x2c0>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	f107 010e 	add.w	r1, r7, #14
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f009 f8a1 	bl	800b000 <osMessageQueueGet>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <StartSyringeControlTask+0xf0>
			_Syringe_info.Set_distance_syringe = syringe_setpoint_change;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	827b      	strh	r3, [r7, #18]
		}
		// Get permission
		osMessageQueueGet(QueueSyringePermissionHandle, &_Permission, NULL, 0);
 8001ec8:	4b74      	ldr	r3, [pc, #464]	; (800209c <StartSyringeControlTask+0x2c4>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	f107 010d 	add.w	r1, r7, #13
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f009 f894 	bl	800b000 <osMessageQueueGet>
		// Get Speed in rpm
		if (osOK == osMessageQueueGet(QueueSyringeSpeedRPMHandle, &Syringe_speed_rmp, NULL, 0)) {
 8001ed8:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <StartSyringeControlTask+0x2c8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f009 f88c 	bl	800b000 <osMessageQueueGet>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <StartSyringeControlTask+0x126>
			Set_Speed(&Syringe, Syringe_speed_rmp);
 8001eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fc99 	bl	8000830 <Set_Speed>
		}

		//
		// Read measurement from sensor
		//
		osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8001efe:	4b61      	ldr	r3, [pc, #388]	; (8002084 <StartSyringeControlTask+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	4618      	mov	r0, r3
 8001f08:	f008 fd78 	bl	800a9fc <osMutexAcquire>
		_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb7d 	bl	8001610 <readRangeSingleMillimeters_VL6180X>
 8001f16:	4603      	mov	r3, r0
 8001f18:	823b      	strh	r3, [r7, #16]
		osMutexRelease(MutexI2C4Handle);
 8001f1a:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <StartSyringeControlTask+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f008 fdca 	bl	800aab8 <osMutexRelease>

		//
		// Send data to queue
		//
		if (osOK == osSemaphoreAcquire(SyringeInfoCommunicationSemaphoreHandle, 0)) { // Send to communication
 8001f24:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <StartSyringeControlTask+0x2cc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f008 feb0 	bl	800ac90 <osSemaphoreAcquire>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <StartSyringeControlTask+0x170>
			osMessageQueuePut(QueueSyringeInfoCommunicationHandle,&_Syringe_info, 0, osWaitForever);
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <StartSyringeControlTask+0x2d0>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f107 0110 	add.w	r1, r7, #16
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	2200      	movs	r2, #0
 8001f44:	f008 ffe8 	bl	800af18 <osMessageQueuePut>
		}
		if (osOK == osSemaphoreAcquire(SyringeInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 8001f48:	4b58      	ldr	r3, [pc, #352]	; (80020ac <StartSyringeControlTask+0x2d4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f008 fe9e 	bl	800ac90 <osSemaphoreAcquire>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <StartSyringeControlTask+0x194>
			osMessageQueuePut(QueueSyringeInfoOLEDHandle, &_Syringe_info, 0,
 8001f5a:	4b55      	ldr	r3, [pc, #340]	; (80020b0 <StartSyringeControlTask+0x2d8>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f107 0110 	add.w	r1, r7, #16
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	2200      	movs	r2, #0
 8001f68:	f008 ffd6 	bl	800af18 <osMessageQueuePut>
		}

		//
		// Control algorithm
		//
		if (_Permission == 1) {
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d16e      	bne.n	8002050 <StartSyringeControlTask+0x278>
			uint16_t tab[2];
			tab[0] = readRangeSingleMillimeters_VL6180X(&Syringe_sensor);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fb4a 	bl	8001610 <readRangeSingleMillimeters_VL6180X>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	813b      	strh	r3, [r7, #8]
			tab[1] = readRangeSingleMillimeters_VL6180X(&Syringe_sensor);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fb43 	bl	8001610 <readRangeSingleMillimeters_VL6180X>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	817b      	strh	r3, [r7, #10]
			uint16_t mes = (tab[0] + tab[1]) / 2;
 8001f8e:	893b      	ldrh	r3, [r7, #8]
 8001f90:	461a      	mov	r2, r3
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	4413      	add	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da00      	bge.n	8001f9c <StartSyringeControlTask+0x1c4>
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	105b      	asrs	r3, r3, #1
 8001f9e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			if (mes == _Syringe_info.Set_distance_syringe || ((mes > _Syringe_info.Set_distance_syringe * 0.99) && (mes > _Syringe_info.Set_distance_syringe * 1.01))) {
 8001fa2:	8a7b      	ldrh	r3, [r7, #18]
 8001fa4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d027      	beq.n	8001ffc <StartSyringeControlTask+0x224>
 8001fac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fb8:	8a7b      	ldrh	r3, [r7, #18]
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fc2:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8002070 <StartSyringeControlTask+0x298>
 8001fc6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001fca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	dd1a      	ble.n	800200a <StartSyringeControlTask+0x232>
 8001fd4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001fea:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002078 <StartSyringeControlTask+0x2a0>
 8001fee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ff2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	dd06      	ble.n	800200a <StartSyringeControlTask+0x232>
				HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL);
 8001ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f005 fdd2 	bl	8007bac <HAL_TIM_PWM_Stop>
 8002008:	e022      	b.n	8002050 <StartSyringeControlTask+0x278>
			} else if (mes > _Syringe_info.Set_distance_syringe) {
 800200a:	8a7b      	ldrh	r3, [r7, #18]
 800200c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002010:	429a      	cmp	r2, r3
 8002012:	d90c      	bls.n	800202e <StartSyringeControlTask+0x256>
				Set_Direction_A4988(&Syringe, LEFT_DIR); //TODO chceck
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	2102      	movs	r1, #2
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fb56 	bl	80006cc <Set_Direction_A4988>
				HAL_TIM_PWM_Start(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL);
 8002020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002022:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f005 fcc6 	bl	80079b8 <HAL_TIM_PWM_Start>
 800202c:	e010      	b.n	8002050 <StartSyringeControlTask+0x278>
			} else if (mes < _Syringe_info.Set_distance_syringe) {
 800202e:	8a7b      	ldrh	r3, [r7, #18]
 8002030:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002034:	429a      	cmp	r2, r3
 8002036:	d20b      	bcs.n	8002050 <StartSyringeControlTask+0x278>
				Set_Direction_A4988(&Syringe, RIGHT_DIR); //TODO chceck
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	2101      	movs	r1, #1
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fb44 	bl	80006cc <Set_Direction_A4988>
				HAL_TIM_PWM_Start(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL);
 8002044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002046:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f005 fcb4 	bl	80079b8 <HAL_TIM_PWM_Start>
			}
		}
		//
		// Time interval
		//
		osDelay((200 * osKernelGetTickFreq()) / 1000);
 8002050:	f008 fa42 	bl	800a4d8 <osKernelGetTickFreq>
 8002054:	4603      	mov	r3, r0
 8002056:	22c8      	movs	r2, #200	; 0xc8
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <StartSyringeControlTask+0x2b8>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	4618      	mov	r0, r3
 8002066:	f008 fae7 	bl	800a638 <osDelay>
		if (osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)) {
 800206a:	e720      	b.n	8001eae <StartSyringeControlTask+0xd6>
 800206c:	f3af 8000 	nop.w
 8002070:	7ae147ae 	.word	0x7ae147ae
 8002074:	3fefae14 	.word	0x3fefae14
 8002078:	c28f5c29 	.word	0xc28f5c29
 800207c:	3ff028f5 	.word	0x3ff028f5
 8002080:	0800eda8 	.word	0x0800eda8
 8002084:	20000510 	.word	0x20000510
 8002088:	20000578 	.word	0x20000578
 800208c:	200004f0 	.word	0x200004f0
 8002090:	10624dd3 	.word	0x10624dd3
 8002094:	200004fc 	.word	0x200004fc
 8002098:	200004d4 	.word	0x200004d4
 800209c:	200004d8 	.word	0x200004d8
 80020a0:	200004e4 	.word	0x200004e4
 80020a4:	20000520 	.word	0x20000520
 80020a8:	200004c0 	.word	0x200004c0
 80020ac:	20000514 	.word	0x20000514
 80020b0:	200004bc 	.word	0x200004bc
 80020b4:	00000000 	.word	0x00000000

080020b8 <StartNeedleControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNeedleControlTask */
void StartNeedleControlTask(void *argument)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b09f      	sub	sp, #124	; 0x7c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNeedleControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Needle = { .NAME = "NEEDLE", .STEPS = 200, .RESOLUTION =
 80020c0:	4a9b      	ldr	r2, [pc, #620]	; (8002330 <StartNeedleControlTask+0x278>)
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4611      	mov	r1, r2
 80020c8:	2258      	movs	r2, #88	; 0x58
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00c fb66 	bl	800e79c <memcpy>
	// Queue info
	//
	Needle_info _Needle_info;
	uint16_t needle_setpoint_change;
	uint8_t _Permission;
	_Needle_info.MEASURE_Needle = 10;
 80020d0:	230a      	movs	r3, #10
 80020d2:	81bb      	strh	r3, [r7, #12]
	_Needle_info.Set_distance_needle = 20;
 80020d4:	2314      	movs	r3, #20
 80020d6:	81fb      	strh	r3, [r7, #14]
	_Permission = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	727b      	strb	r3, [r7, #9]
	//
	// Initialization
	//
	Init_A4988(&Needle); // Drive initialization
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fc4d 	bl	8000980 <Init_A4988>
	Set_Speed(&Needle, 100);
 80020e6:	f107 0320 	add.w	r3, r7, #32
 80020ea:	2164      	movs	r1, #100	; 0x64
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fb9f 	bl	8000830 <Set_Speed>
	HAL_TIM_Base_Stop_IT(Needle.TIM_COUNTER_SLAVE);
 80020f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 fbcf 	bl	8007898 <HAL_TIM_Base_Stop_IT>

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80020fa:	4b8e      	ldr	r3, [pc, #568]	; (8002334 <StartNeedleControlTask+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002102:	4618      	mov	r0, r3
 8002104:	f008 fc7a 	bl	800a9fc <osMutexAcquire>
	VL6180X_Init(&Needle_sensor, &hi2c2); // Sensor initialization
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	498a      	ldr	r1, [pc, #552]	; (8002338 <StartNeedleControlTask+0x280>)
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f8ad 	bl	800126e <VL6180X_Init>
	configureDefault_VL6180X(&Needle_sensor); // Sensor initialization
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fa39 	bl	8001590 <configureDefault_VL6180X>
	osMutexRelease(MutexI2C2Handle);
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <StartNeedleControlTask+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f008 fcc8 	bl	800aab8 <osMutexRelease>

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002128:	4b82      	ldr	r3, [pc, #520]	; (8002334 <StartNeedleControlTask+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	4618      	mov	r0, r3
 8002132:	f008 fc63 	bl	800a9fc <osMutexAcquire>
	_Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Initial measurement
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fa68 	bl	8001610 <readRangeSingleMillimeters_VL6180X>
 8002140:	4603      	mov	r3, r0
 8002142:	81bb      	strh	r3, [r7, #12]
	_Needle_info.Set_distance_needle = _Needle_info.MEASURE_Needle;
 8002144:	89bb      	ldrh	r3, [r7, #12]
 8002146:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(MutexI2C2Handle);
 8002148:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <StartNeedleControlTask+0x27c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f008 fcb3 	bl	800aab8 <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(NeedleInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000); // OLED Timer
 8002152:	4b7a      	ldr	r3, [pc, #488]	; (800233c <StartNeedleControlTask+0x284>)
 8002154:	681c      	ldr	r4, [r3, #0]
 8002156:	f008 f9bf 	bl	800a4d8 <osKernelGetTickFreq>
 800215a:	4603      	mov	r3, r0
 800215c:	f240 2226 	movw	r2, #550	; 0x226
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	4a76      	ldr	r2, [pc, #472]	; (8002340 <StartNeedleControlTask+0x288>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	099b      	lsrs	r3, r3, #6
 800216c:	4619      	mov	r1, r3
 800216e:	4620      	mov	r0, r4
 8002170:	f008 fb6a 	bl	800a848 <osTimerStart>
	osTimerStart(NeedleInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000); // Communication Timer
 8002174:	4b73      	ldr	r3, [pc, #460]	; (8002344 <StartNeedleControlTask+0x28c>)
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	f008 f9ae 	bl	800a4d8 <osKernelGetTickFreq>
 800217c:	4603      	mov	r3, r0
 800217e:	f240 2226 	movw	r2, #550	; 0x226
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a6e      	ldr	r2, [pc, #440]	; (8002340 <StartNeedleControlTask+0x288>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4619      	mov	r1, r3
 8002190:	4620      	mov	r0, r4
 8002192:	f008 fb59 	bl	800a848 <osTimerStart>
	for (;;) {
		//
		// Get Data
		//
		// Get set point
		if (osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)) {
 8002196:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <StartNeedleControlTask+0x290>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f107 010a 	add.w	r1, r7, #10
 800219e:	2300      	movs	r3, #0
 80021a0:	2200      	movs	r2, #0
 80021a2:	f008 ff2d 	bl	800b000 <osMessageQueueGet>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <StartNeedleControlTask+0xf8>
			_Needle_info.Set_distance_needle = needle_setpoint_change;
 80021ac:	897b      	ldrh	r3, [r7, #10]
 80021ae:	81fb      	strh	r3, [r7, #14]
		}
		// Get permission
		osMessageQueueGet(QueueNeedlePermissionHandle, &_Permission, NULL, 0);
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <StartNeedleControlTask+0x294>)
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	f107 0109 	add.w	r1, r7, #9
 80021b8:	2300      	movs	r3, #0
 80021ba:	2200      	movs	r2, #0
 80021bc:	f008 ff20 	bl	800b000 <osMessageQueueGet>
		// Get Speed in rpm
		if (osOK == osMessageQueueGet(QueueNeedleSpeedRPMHandle, &Needle_speed_rmp, NULL, 0)) {
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <StartNeedleControlTask+0x298>)
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	f107 011e 	add.w	r1, r7, #30
 80021c8:	2300      	movs	r3, #0
 80021ca:	2200      	movs	r2, #0
 80021cc:	f008 ff18 	bl	800b000 <osMessageQueueGet>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d107      	bne.n	80021e6 <StartNeedleControlTask+0x12e>
			Set_Speed(&Needle, Needle_speed_rmp);
 80021d6:	8bfb      	ldrh	r3, [r7, #30]
 80021d8:	461a      	mov	r2, r3
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fb25 	bl	8000830 <Set_Speed>
		}

		//
		// Read measurement from sensor
		//
		osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <StartNeedleControlTask+0x27c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f04f 31ff 	mov.w	r1, #4294967295
 80021ee:	4618      	mov	r0, r3
 80021f0:	f008 fc04 	bl	800a9fc <osMutexAcquire>
		_Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Measurement
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fa09 	bl	8001610 <readRangeSingleMillimeters_VL6180X>
 80021fe:	4603      	mov	r3, r0
 8002200:	81bb      	strh	r3, [r7, #12]
		osMutexRelease(MutexI2C2Handle);
 8002202:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <StartNeedleControlTask+0x27c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f008 fc56 	bl	800aab8 <osMutexRelease>

		//
		// Send data to queue
		//
		if (osOK == osSemaphoreAcquire(NeedleInfoCommunicationSemaphoreHandle, 0)) { // Send to communication
 800220c:	4b51      	ldr	r3, [pc, #324]	; (8002354 <StartNeedleControlTask+0x29c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f008 fd3c 	bl	800ac90 <osSemaphoreAcquire>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <StartNeedleControlTask+0x178>
			osMessageQueuePut(QueueNeedleInfoCommunicationHandle, &_Needle_info, 0, osWaitForever);
 800221e:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <StartNeedleControlTask+0x2a0>)
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f107 010c 	add.w	r1, r7, #12
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	2200      	movs	r2, #0
 800222c:	f008 fe74 	bl	800af18 <osMessageQueuePut>
		}
		if (osOK == osSemaphoreAcquire(NeedleInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <StartNeedleControlTask+0x2a4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f008 fd2a 	bl	800ac90 <osSemaphoreAcquire>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <StartNeedleControlTask+0x19c>
			osMessageQueuePut(QueueNeedleInfoOLEDHandle, &_Needle_info, 0, osWaitForever);
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <StartNeedleControlTask+0x2a8>)
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	f107 010c 	add.w	r1, r7, #12
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	2200      	movs	r2, #0
 8002250:	f008 fe62 	bl	800af18 <osMessageQueuePut>
		}

		//
		// Control algorithm
		//
		if (_Permission == 1) {
 8002254:	7a7b      	ldrb	r3, [r7, #9]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d151      	bne.n	80022fe <StartNeedleControlTask+0x246>
			if (_Needle_info.MEASURE_Needle == _Needle_info.Set_distance_needle || ((_Needle_info.MEASURE_Needle > _Needle_info.Set_distance_needle * 0.99) && (_Needle_info.MEASURE_Needle > _Needle_info.Set_distance_needle * 1.01))) {
 800225a:	89ba      	ldrh	r2, [r7, #12]
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	429a      	cmp	r2, r3
 8002260:	d025      	beq.n	80022ae <StartNeedleControlTask+0x1f6>
 8002262:	89bb      	ldrh	r3, [r7, #12]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002276:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002320 <StartNeedleControlTask+0x268>
 800227a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800227e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	dd19      	ble.n	80022bc <StartNeedleControlTask+0x204>
 8002288:	89bb      	ldrh	r3, [r7, #12]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800229c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002328 <StartNeedleControlTask+0x270>
 80022a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80022a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd06      	ble.n	80022bc <StartNeedleControlTask+0x204>
				HAL_TIM_PWM_Stop(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL);
 80022ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f005 fc79 	bl	8007bac <HAL_TIM_PWM_Stop>
 80022ba:	e020      	b.n	80022fe <StartNeedleControlTask+0x246>
			} else if (_Needle_info.MEASURE_Needle > _Needle_info.Set_distance_needle) { //strzykawka jedzie do przodu
 80022bc:	89ba      	ldrh	r2, [r7, #12]
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d90c      	bls.n	80022de <StartNeedleControlTask+0x226>
				Set_Direction_A4988(&Needle, LEFT_DIR); //TODO chceck
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f9fe 	bl	80006cc <Set_Direction_A4988>
				HAL_TIM_PWM_Start(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL);
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 fb6e 	bl	80079b8 <HAL_TIM_PWM_Start>
 80022dc:	e00f      	b.n	80022fe <StartNeedleControlTask+0x246>
			} else if (_Needle_info.MEASURE_Needle < _Needle_info.Set_distance_needle) {
 80022de:	89ba      	ldrh	r2, [r7, #12]
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20b      	bcs.n	80022fe <StartNeedleControlTask+0x246>
				Set_Direction_A4988(&Needle, RIGHT_DIR); //TODO chceck
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f9ed 	bl	80006cc <Set_Direction_A4988>
				HAL_TIM_PWM_Start(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL);
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 fb5d 	bl	80079b8 <HAL_TIM_PWM_Start>
			}
		}
		//
		// Time interval
		//
		osDelay((200 * osKernelGetTickFreq()) / 1000);
 80022fe:	f008 f8eb 	bl	800a4d8 <osKernelGetTickFreq>
 8002302:	4603      	mov	r3, r0
 8002304:	22c8      	movs	r2, #200	; 0xc8
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <StartNeedleControlTask+0x288>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	4618      	mov	r0, r3
 8002314:	f008 f990 	bl	800a638 <osDelay>
		if (osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)) {
 8002318:	e73d      	b.n	8002196 <StartNeedleControlTask+0xde>
 800231a:	bf00      	nop
 800231c:	f3af 8000 	nop.w
 8002320:	7ae147ae 	.word	0x7ae147ae
 8002324:	3fefae14 	.word	0x3fefae14
 8002328:	c28f5c29 	.word	0xc28f5c29
 800232c:	3ff028f5 	.word	0x3ff028f5
 8002330:	0800ee00 	.word	0x0800ee00
 8002334:	2000050c 	.word	0x2000050c
 8002338:	2000052c 	.word	0x2000052c
 800233c:	200004f4 	.word	0x200004f4
 8002340:	10624dd3 	.word	0x10624dd3
 8002344:	200004f8 	.word	0x200004f8
 8002348:	200004d0 	.word	0x200004d0
 800234c:	200004dc 	.word	0x200004dc
 8002350:	200004e8 	.word	0x200004e8
 8002354:	20000524 	.word	0x20000524
 8002358:	200004c8 	.word	0x200004c8
 800235c:	20000518 	.word	0x20000518
 8002360:	200004c4 	.word	0x200004c4

08002364 <StartOLEDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af02      	add	r7, sp, #8
 800236a:	6078      	str	r0, [r7, #4]
		// Info data initialization
		//
		char Message_OLED[32]; // Message buffer
		Syringe_info _Syringe_info;
		Needle_info _Needle_info;
		_Needle_info.Set_distance_needle = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	817b      	strh	r3, [r7, #10]
		_Needle_info.MEASURE_Needle = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	813b      	strh	r3, [r7, #8]
		_Syringe_info.Set_distance_syringe = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	81fb      	strh	r3, [r7, #14]
		_Syringe_info.MEASURE_Syringe = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	81bb      	strh	r3, [r7, #12]

		//
		// Screen initialization
		//
		osMutexAcquire(MutexI2C4Handle, osWaitForever);
 800237c:	4b63      	ldr	r3, [pc, #396]	; (800250c <StartOLEDTask+0x1a8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	4618      	mov	r0, r3
 8002386:	f008 fb39 	bl	800a9fc <osMutexAcquire>
		SSD1306_Init(&hi2c4);
 800238a:	4861      	ldr	r0, [pc, #388]	; (8002510 <StartOLEDTask+0x1ac>)
 800238c:	f7fe fe7a 	bl	8001084 <SSD1306_Init>
		osMutexRelease(MutexI2C4Handle);
 8002390:	4b5e      	ldr	r3, [pc, #376]	; (800250c <StartOLEDTask+0x1a8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f008 fb8f 	bl	800aab8 <osMutexRelease>

		GFX_SetFont(font_8x5);
 800239a:	485e      	ldr	r0, [pc, #376]	; (8002514 <StartOLEDTask+0x1b0>)
 800239c:	f7fe fb12 	bl	80009c4 <GFX_SetFont>
		GFX_SetFontSize(1);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe fb1f 	bl	80009e4 <GFX_SetFontSize>

		SSD1306_Clear(BLACK);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe fe30 	bl	800100c <SSD1306_Clear>

		osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80023ac:	4b57      	ldr	r3, [pc, #348]	; (800250c <StartOLEDTask+0x1a8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	4618      	mov	r0, r3
 80023b6:	f008 fb21 	bl	800a9fc <osMutexAcquire>
		SSD1306_Display();
 80023ba:	f7fe fe45 	bl	8001048 <SSD1306_Display>
		osMutexRelease(MutexI2C4Handle);
 80023be:	4b53      	ldr	r3, [pc, #332]	; (800250c <StartOLEDTask+0x1a8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f008 fb78 	bl	800aab8 <osMutexRelease>
	for (;;) {
		//
			  // Get data from queues
			  //
			  // Get data from Syringe info queue
			  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <StartOLEDTask+0x1b4>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f107 010c 	add.w	r1, r7, #12
 80023d0:	2300      	movs	r3, #0
 80023d2:	2200      	movs	r2, #0
 80023d4:	f008 fe14 	bl	800b000 <osMessageQueueGet>
			  // Get data from Needle info queue
			  osMessageQueueGet(QueueNeedleInfoOLEDHandle, &_Needle_info, NULL, 0);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <StartOLEDTask+0x1b8>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	f107 0108 	add.w	r1, r7, #8
 80023e0:	2300      	movs	r3, #0
 80023e2:	2200      	movs	r2, #0
 80023e4:	f008 fe0c 	bl	800b000 <osMessageQueueGet>

			  //
			  // Make message
			  //
			  SSD1306_Clear(BLACK);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fe0f 	bl	800100c <SSD1306_Clear>
			  sprintf(Message_OLED, "Needle position");
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	494b      	ldr	r1, [pc, #300]	; (8002520 <StartOLEDTask+0x1bc>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 fa91 	bl	800491c <sprintf_>
			  GFX_DrawString(20, 0, Message_OLED, WHITE, 0);
 80023fa:	f107 0210 	add.w	r2, r7, #16
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	2100      	movs	r1, #0
 8002406:	2014      	movs	r0, #20
 8002408:	f7fe fbba 	bl	8000b80 <GFX_DrawString>
			  GFX_DrawLine(0, 9, 128, 9, WHITE);
 800240c:	2301      	movs	r3, #1
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2309      	movs	r3, #9
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	2109      	movs	r1, #9
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fccb 	bl	8000db2 <GFX_DrawLine>
			  sprintf(Message_OLED, "Set: %d mm", _Needle_info.Set_distance_needle); //Set_distance_needle
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	461a      	mov	r2, r3
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	493f      	ldr	r1, [pc, #252]	; (8002524 <StartOLEDTask+0x1c0>)
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fa78 	bl	800491c <sprintf_>
			  GFX_DrawString(0, 12, Message_OLED, WHITE, 0);
 800242c:	f107 0210 	add.w	r2, r7, #16
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2301      	movs	r3, #1
 8002436:	210c      	movs	r1, #12
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fba1 	bl	8000b80 <GFX_DrawString>
			  sprintf(Message_OLED, "Measure: %d mm", _Needle_info.MEASURE_Needle); //MEASURE_Needle
 800243e:	893b      	ldrh	r3, [r7, #8]
 8002440:	461a      	mov	r2, r3
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	4938      	ldr	r1, [pc, #224]	; (8002528 <StartOLEDTask+0x1c4>)
 8002448:	4618      	mov	r0, r3
 800244a:	f002 fa67 	bl	800491c <sprintf_>
			  GFX_DrawString(0, 22, Message_OLED, WHITE, 0);
 800244e:	f107 0210 	add.w	r2, r7, #16
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	2116      	movs	r1, #22
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe fb90 	bl	8000b80 <GFX_DrawString>
			  sprintf(Message_OLED, "Syringe position");
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4931      	ldr	r1, [pc, #196]	; (800252c <StartOLEDTask+0x1c8>)
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fa58 	bl	800491c <sprintf_>
			  GFX_DrawString(15, 32, Message_OLED, WHITE, 0);
 800246c:	f107 0210 	add.w	r2, r7, #16
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	2120      	movs	r1, #32
 8002478:	200f      	movs	r0, #15
 800247a:	f7fe fb81 	bl	8000b80 <GFX_DrawString>
			  GFX_DrawLine(0, 41, 128, 41, WHITE);
 800247e:	2301      	movs	r3, #1
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2329      	movs	r3, #41	; 0x29
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	2129      	movs	r1, #41	; 0x29
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fc92 	bl	8000db2 <GFX_DrawLine>
			  sprintf(Message_OLED, "Set: %d mm", _Syringe_info.Set_distance_syringe); //Set_distance_syringe
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	461a      	mov	r2, r3
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	4923      	ldr	r1, [pc, #140]	; (8002524 <StartOLEDTask+0x1c0>)
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fa3f 	bl	800491c <sprintf_>
			  GFX_DrawString(0, 44, Message_OLED, WHITE, 0);
 800249e:	f107 0210 	add.w	r2, r7, #16
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2301      	movs	r3, #1
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fb68 	bl	8000b80 <GFX_DrawString>
			  sprintf(Message_OLED, "Measure: %d mm", _Syringe_info.MEASURE_Syringe); //MEASURE_Syringe
 80024b0:	89bb      	ldrh	r3, [r7, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	491b      	ldr	r1, [pc, #108]	; (8002528 <StartOLEDTask+0x1c4>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 fa2e 	bl	800491c <sprintf_>
			  GFX_DrawString(0, 54, Message_OLED, WHITE, 0);
 80024c0:	f107 0210 	add.w	r2, r7, #16
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2136      	movs	r1, #54	; 0x36
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fb57 	bl	8000b80 <GFX_DrawString>

			  //
			  // Display
			  //
			  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <StartOLEDTask+0x1a8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f04f 31ff 	mov.w	r1, #4294967295
 80024da:	4618      	mov	r0, r3
 80024dc:	f008 fa8e 	bl	800a9fc <osMutexAcquire>
			  SSD1306_Display();
 80024e0:	f7fe fdb2 	bl	8001048 <SSD1306_Display>
			  osMutexRelease(MutexI2C4Handle);
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <StartOLEDTask+0x1a8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f008 fae5 	bl	800aab8 <osMutexRelease>

			  //
			  // Time interval
			  //
			  osDelay((450 * osKernelGetTickFreq()) / 1000);
 80024ee:	f007 fff3 	bl	800a4d8 <osKernelGetTickFreq>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <StartOLEDTask+0x1cc>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	4618      	mov	r0, r3
 8002506:	f008 f897 	bl	800a638 <osDelay>
			  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 800250a:	e75d      	b.n	80023c8 <StartOLEDTask+0x64>
 800250c:	20000510 	.word	0x20000510
 8002510:	20000578 	.word	0x20000578
 8002514:	0800ef14 	.word	0x0800ef14
 8002518:	200004bc 	.word	0x200004bc
 800251c:	200004c4 	.word	0x200004c4
 8002520:	0800ee58 	.word	0x0800ee58
 8002524:	0800ee68 	.word	0x0800ee68
 8002528:	0800ee74 	.word	0x0800ee74
 800252c:	0800ee84 	.word	0x0800ee84
 8002530:	10624dd3 	.word	0x10624dd3

08002534 <StartCommunicationTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af06      	add	r7, sp, #24
 800253a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicationTask */
	//
		// Time interval
		//
		uint32_t DelayTick = osKernelGetTickCount();
 800253c:	f007 ffa4 	bl	800a488 <osKernelGetTickCount>
 8002540:	61f8      	str	r0, [r7, #28]

		//
		//Receive data
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002542:	2204      	movs	r2, #4
 8002544:	493f      	ldr	r1, [pc, #252]	; (8002644 <StartCommunicationTask+0x110>)
 8002546:	4840      	ldr	r0, [pc, #256]	; (8002648 <StartCommunicationTask+0x114>)
 8002548:	f006 fcf7 	bl	8008f3a <HAL_UART_Receive_IT>
		Syringe_info _Syringe_info;
		Needle_info _Needle_info;
		Temperature_info _Temperature_info;
		uint8_t _Permission;
		uint8_t _Motor_status;
		_Needle_info.Set_distance_needle = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	82fb      	strh	r3, [r7, #22]
		_Needle_info.MEASURE_Needle = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	82bb      	strh	r3, [r7, #20]
		_Syringe_info.Set_distance_syringe = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	837b      	strh	r3, [r7, #26]
		_Syringe_info.MEASURE_Syringe = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	833b      	strh	r3, [r7, #24]
		_Temperature_info.Fan_info = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	743b      	strb	r3, [r7, #16]
		_Temperature_info.Temperature = 0;
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
		_Permission = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	72fb      	strb	r3, [r7, #11]
		_Motor_status = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	72bb      	strb	r3, [r7, #10]
	for (;;) {
		//
			  // Get data
			  //
			  // Get data from Syringe info queue
			  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <StartCommunicationTask+0x118>)
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	f107 0118 	add.w	r1, r7, #24
 8002576:	2300      	movs	r3, #0
 8002578:	2200      	movs	r2, #0
 800257a:	f008 fd41 	bl	800b000 <osMessageQueueGet>
			  // Get data from Needle info queue
			  osMessageQueueGet(QueueNeedleInfoCommunicationHandle, &_Needle_info, NULL, 0);
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <StartCommunicationTask+0x11c>)
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f107 0114 	add.w	r1, r7, #20
 8002586:	2300      	movs	r3, #0
 8002588:	2200      	movs	r2, #0
 800258a:	f008 fd39 	bl	800b000 <osMessageQueueGet>
			  // Get data from Temperature info queue
			  osMessageQueueGet(QueueTemperatureCommunicationHandle, &_Temperature_info, NULL, 0);
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <StartCommunicationTask+0x120>)
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	f107 010c 	add.w	r1, r7, #12
 8002596:	2300      	movs	r3, #0
 8002598:	2200      	movs	r2, #0
 800259a:	f008 fd31 	bl	800b000 <osMessageQueueGet>
			  // Get permission
			  osMessageQueueGet(QueueCommunicationPermissionHandle, &_Permission, NULL, 0);
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <StartCommunicationTask+0x124>)
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	f107 010b 	add.w	r1, r7, #11
 80025a6:	2300      	movs	r3, #0
 80025a8:	2200      	movs	r2, #0
 80025aa:	f008 fd29 	bl	800b000 <osMessageQueueGet>
			  // Get status on Motors
			  osMessageQueueGet(QueueMotorStatusHandle, &_Motor_status, NULL, 0);
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <StartCommunicationTask+0x128>)
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	f107 010a 	add.w	r1, r7, #10
 80025b6:	2300      	movs	r3, #0
 80025b8:	2200      	movs	r2, #0
 80025ba:	f008 fd21 	bl	800b000 <osMessageQueueGet>

			  //
			  // Send message
			  //
			  if(_Permission == 1){
 80025be:	7afb      	ldrb	r3, [r7, #11]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d137      	bne.n	8002634 <StartCommunicationTask+0x100>
				  if(_Motor_status == 0){
 80025c4:	7abb      	ldrb	r3, [r7, #10]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11a      	bne.n	8002600 <StartCommunicationTask+0xcc>
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 80025ca:	8abb      	ldrh	r3, [r7, #20]
 80025cc:	4618      	mov	r0, r3
							  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80025ce:	8b3b      	ldrh	r3, [r7, #24]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 80025d0:	461c      	mov	r4, r3
							  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80025d2:	8afb      	ldrh	r3, [r7, #22]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 80025d4:	461d      	mov	r5, r3
							  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80025d6:	8b7b      	ldrh	r3, [r7, #26]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 80025d8:	461a      	mov	r2, r3
							  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80025da:	edd7 7a03 	vldr	s15, [r7, #12]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 80025de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
							  _Temperature_info.Fan_info,1);
 80025e2:	7c3b      	ldrb	r3, [r7, #16]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 80025e4:	4619      	mov	r1, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	9305      	str	r3, [sp, #20]
 80025ea:	9104      	str	r1, [sp, #16]
 80025ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80025f0:	9200      	str	r2, [sp, #0]
 80025f2:	462b      	mov	r3, r5
 80025f4:	4622      	mov	r2, r4
 80025f6:	4601      	mov	r1, r0
 80025f8:	4819      	ldr	r0, [pc, #100]	; (8002660 <StartCommunicationTask+0x12c>)
 80025fa:	f002 f973 	bl	80048e4 <printf_>
 80025fe:	e019      	b.n	8002634 <StartCommunicationTask+0x100>
				  }else{
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002600:	8abb      	ldrh	r3, [r7, #20]
 8002602:	4618      	mov	r0, r3
					  					  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002604:	8b3b      	ldrh	r3, [r7, #24]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002606:	461c      	mov	r4, r3
					  					  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002608:	8afb      	ldrh	r3, [r7, #22]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 800260a:	461d      	mov	r5, r3
					  					  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 800260c:	8b7b      	ldrh	r3, [r7, #26]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 800260e:	461a      	mov	r2, r3
					  					  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002610:	edd7 7a03 	vldr	s15, [r7, #12]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  					  _Temperature_info.Fan_info,0);
 8002618:	7c3b      	ldrb	r3, [r7, #16]
					  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 800261a:	4619      	mov	r1, r3
 800261c:	2300      	movs	r3, #0
 800261e:	9305      	str	r3, [sp, #20]
 8002620:	9104      	str	r1, [sp, #16]
 8002622:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002626:	9200      	str	r2, [sp, #0]
 8002628:	462b      	mov	r3, r5
 800262a:	4622      	mov	r2, r4
 800262c:	4601      	mov	r1, r0
 800262e:	480c      	ldr	r0, [pc, #48]	; (8002660 <StartCommunicationTask+0x12c>)
 8002630:	f002 f958 	bl	80048e4 <printf_>
			  }

			  //
			  // Time interval
			  //
			  DelayTick += 500;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800263a:	61fb      	str	r3, [r7, #28]
			  osDelayUntil(DelayTick);
 800263c:	69f8      	ldr	r0, [r7, #28]
 800263e:	f008 f829 	bl	800a694 <osDelayUntil>
			  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 8002642:	e794      	b.n	800256e <StartCommunicationTask+0x3a>
 8002644:	2000049c 	.word	0x2000049c
 8002648:	20000740 	.word	0x20000740
 800264c:	200004c0 	.word	0x200004c0
 8002650:	200004c8 	.word	0x200004c8
 8002654:	200004cc 	.word	0x200004cc
 8002658:	200004e0 	.word	0x200004e0
 800265c:	200004ec 	.word	0x200004ec
 8002660:	0800ee98 	.word	0x0800ee98

08002664 <StartTemperatureTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTemperatureTask */
void StartTemperatureTask(void *argument)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b08f      	sub	sp, #60	; 0x3c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperatureTask */
	//
		// Info data initialization
		//
		Temperature_info _Temperature_info;
		_Temperature_info.Fan_info = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		_Temperature_info.Temperature = 10;
 8002672:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <StartTemperatureTask+0x144>)
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
		BMP280_t Bmp280;

		//
		// Initialize the sensor
		//
		osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002676:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <StartTemperatureTask+0x148>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f04f 31ff 	mov.w	r1, #4294967295
 800267e:	4618      	mov	r0, r3
 8002680:	f008 f9bc 	bl	800a9fc <osMutexAcquire>
		BMP280_Init(&Bmp280, &hi2c2, 0x76);
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2276      	movs	r2, #118	; 0x76
 800268a:	4949      	ldr	r1, [pc, #292]	; (80027b0 <StartTemperatureTask+0x14c>)
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff f933 	bl	80018f8 <BMP280_Init>
		osMutexRelease(MutexI2C2Handle);
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <StartTemperatureTask+0x148>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f008 fa0e 	bl	800aab8 <osMutexRelease>

		//
		// Initial measurement
		//
		osMutexAcquire(MutexI2C2Handle, osWaitForever);
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <StartTemperatureTask+0x148>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	4618      	mov	r0, r3
 80026a6:	f008 f9a9 	bl	800a9fc <osMutexAcquire>
		_Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f8d6 	bl	8001860 <BMP280_ReadTemperature>
 80026b4:	eef0 7a40 	vmov.f32	s15, s0
 80026b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		osMutexRelease(MutexI2C2Handle);
 80026bc:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <StartTemperatureTask+0x148>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f008 f9f9 	bl	800aab8 <osMutexRelease>

		//
		// Timer start
		//
		osTimerStart(TemperatureInfoCommunicationTimerHandle, (1000 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <StartTemperatureTask+0x150>)
 80026c8:	681c      	ldr	r4, [r3, #0]
 80026ca:	f007 ff05 	bl	800a4d8 <osKernelGetTickFreq>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <StartTemperatureTask+0x154>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	4619      	mov	r1, r3
 80026e2:	4620      	mov	r0, r4
 80026e4:	f008 f8b0 	bl	800a848 <osTimerStart>
	/* Infinite loop */
	for (;;) {
		 //
			  // Measurement
			  //
			  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <StartTemperatureTask+0x148>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	4618      	mov	r0, r3
 80026f2:	f008 f983 	bl	800a9fc <osMutexAcquire>
			  _Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f8b0 	bl	8001860 <BMP280_ReadTemperature>
 8002700:	eef0 7a40 	vmov.f32	s15, s0
 8002704:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			  if(_Temperature_info.Temperature < 0 ){
 8002708:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800270c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d508      	bpl.n	8002728 <StartTemperatureTask+0xc4>
				  _Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f8a0 	bl	8001860 <BMP280_ReadTemperature>
 8002720:	eef0 7a40 	vmov.f32	s15, s0
 8002724:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			  }
			  osMutexRelease(MutexI2C2Handle);
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <StartTemperatureTask+0x148>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f008 f9c3 	bl	800aab8 <osMutexRelease>
			  //
			  // Fan functioning
			  //
			  if (_Temperature_info.Temperature >= 31.0) {
 8002732:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002736:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800273a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	db08      	blt.n	8002756 <StartTemperatureTask+0xf2>
				  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	481c      	ldr	r0, [pc, #112]	; (80027bc <StartTemperatureTask+0x158>)
 800274a:	f003 f84f 	bl	80057ec <HAL_GPIO_WritePin>
				  _Temperature_info.Fan_info = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002754:	e007      	b.n	8002766 <StartTemperatureTask+0x102>
			  }else{
				  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	4818      	ldr	r0, [pc, #96]	; (80027bc <StartTemperatureTask+0x158>)
 800275c:	f003 f846 	bl	80057ec <HAL_GPIO_WritePin>
				  _Temperature_info.Fan_info = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			  }

			  //
			  // Send to queue
			  //
			  if(osOK == osSemaphoreAcquire(TemperatureInfoCommunicationSemaphoreHandle, 0)){
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <StartTemperatureTask+0x15c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f008 fa8f 	bl	800ac90 <osSemaphoreAcquire>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d108      	bne.n	800278a <StartTemperatureTask+0x126>
				  osMessageQueuePut(QueueTemperatureCommunicationHandle, &_Temperature_info, 0, osWaitForever);
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <StartTemperatureTask+0x160>)
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	2200      	movs	r2, #0
 8002786:	f008 fbc7 	bl	800af18 <osMessageQueuePut>
			  }

			  //
			  // Time interval
			  //
			  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 800278a:	f007 fea5 	bl	800a4d8 <osKernelGetTickFreq>
 800278e:	4603      	mov	r3, r0
 8002790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <StartTemperatureTask+0x154>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	4618      	mov	r0, r3
 80027a2:	f007 ff49 	bl	800a638 <osDelay>
			  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80027a6:	e79f      	b.n	80026e8 <StartTemperatureTask+0x84>
 80027a8:	41200000 	.word	0x41200000
 80027ac:	2000050c 	.word	0x2000050c
 80027b0:	2000052c 	.word	0x2000052c
 80027b4:	20000504 	.word	0x20000504
 80027b8:	10624dd3 	.word	0x10624dd3
 80027bc:	40020400 	.word	0x40020400
 80027c0:	2000051c 	.word	0x2000051c
 80027c4:	200004cc 	.word	0x200004cc

080027c8 <SyringeInfoTimerOLEDCallback>:
  /* USER CODE END StartTemperatureTask */
}

/* SyringeInfoTimerOLEDCallback function */
void SyringeInfoTimerOLEDCallback(void *argument)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerOLEDCallback */
	osSemaphoreRelease(SyringeInfoOLEDSemaphoreHandle);
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SyringeInfoTimerOLEDCallback+0x1c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f008 fac1 	bl	800ad5c <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerOLEDCallback */
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000514 	.word	0x20000514

080027e8 <NeedleInfoTimerOLEDCallback>:

/* NeedleInfoTimerOLEDCallback function */
void NeedleInfoTimerOLEDCallback(void *argument)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerOLEDCallback */
	osSemaphoreRelease(NeedleInfoOLEDSemaphoreHandle);
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <NeedleInfoTimerOLEDCallback+0x1c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f008 fab1 	bl	800ad5c <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerOLEDCallback */
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000518 	.word	0x20000518

08002808 <NeedleInfoTimerCommunicationCallback>:

/* NeedleInfoTimerCommunicationCallback function */
void NeedleInfoTimerCommunicationCallback(void *argument)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerCommunicationCallback */
	osSemaphoreRelease(NeedleInfoCommunicationSemaphoreHandle);
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <NeedleInfoTimerCommunicationCallback+0x1c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f008 faa1 	bl	800ad5c <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerCommunicationCallback */
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000524 	.word	0x20000524

08002828 <SyringeInfoTimerCommunicationCallback>:

/* SyringeInfoTimerCommunicationCallback function */
void SyringeInfoTimerCommunicationCallback(void *argument)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerCommunicationCallback */
	osSemaphoreRelease(SyringeInfoCommunicationSemaphoreHandle);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <SyringeInfoTimerCommunicationCallback+0x1c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f008 fa91 	bl	800ad5c <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerCommunicationCallback */
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000520 	.word	0x20000520

08002848 <IDLETimeTimerCallback>:

/* IDLETimeTimerCallback function */
void IDLETimeTimerCallback(void *argument)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IDLETimeTimerCallback */
	uint32_t IdleTime;
		IdleTime = (IdleTicks * 100) / 1000;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <IDLETimeTimerCallback+0x30>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2264      	movs	r2, #100	; 0x64
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <IDLETimeTimerCallback+0x34>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	60fb      	str	r3, [r7, #12]
		IdleTicks = 0;
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <IDLETimeTimerCallback+0x30>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
	//	printf("IdleTime: %d\n\r",IdleTime);
  /* USER CODE END IDLETimeTimerCallback */
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	200004a0 	.word	0x200004a0
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <TemperatureInfoCommunicationTimerCallback>:

/* TemperatureInfoCommunicationTimerCallback function */
void TemperatureInfoCommunicationTimerCallback(void *argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TemperatureInfoCommunicationTimerCallback */
	osSemaphoreRelease(TemperatureInfoCommunicationSemaphoreHandle);
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <TemperatureInfoCommunicationTimerCallback+0x1c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f008 fa65 	bl	800ad5c <osSemaphoreRelease>
  /* USER CODE END TemperatureInfoCommunicationTimerCallback */
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000051c 	.word	0x2000051c

080028a0 <_putchar>:
/* USER CODE BEGIN Application */
//
// Printf function implementation
//
void _putchar(char character)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <_putchar+0x38>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f04f 31ff 	mov.w	r1, #4294967295
 80028b2:	4618      	mov	r0, r3
 80028b4:	f008 f8a2 	bl	800a9fc <osMutexAcquire>
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 1000);
 80028b8:	1df9      	adds	r1, r7, #7
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	2201      	movs	r2, #1
 80028c0:	4806      	ldr	r0, [pc, #24]	; (80028dc <_putchar+0x3c>)
 80028c2:	f006 faa7 	bl	8008e14 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <_putchar+0x38>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f008 f8f4 	bl	800aab8 <osMutexRelease>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000508 	.word	0x20000508
 80028dc:	20000740 	.word	0x20000740

080028e0 <HAL_UART_RxCpltCallback>:
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a89      	ldr	r2, [pc, #548]	; (8002b14 <HAL_UART_RxCpltCallback+0x234>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f040 810b 	bne.w	8002b0a <HAL_UART_RxCpltCallback+0x22a>
	{
		//
		// Start of handling message
		//
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80028f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f8:	4887      	ldr	r0, [pc, #540]	; (8002b18 <HAL_UART_RxCpltCallback+0x238>)
 80028fa:	f002 ff90 	bl	800581e <HAL_GPIO_TogglePin>

		//
		// Handling the message
		//
		if(Buffor_Rx_USART[0] == 'N'){ // Needle set position
 80028fe:	4b87      	ldr	r3, [pc, #540]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b4e      	cmp	r3, #78	; 0x4e
 8002904:	d11c      	bne.n	8002940 <HAL_UART_RxCpltCallback+0x60>
			uint16_t needle_set_point_change;
			char needle_set_point_change_str[3];
			// Convert to uint16_t
			needle_set_point_change_str[0] = Buffor_Rx_USART[1];
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			needle_set_point_change_str[1] = Buffor_Rx_USART[2];
 800290e:	4b83      	ldr	r3, [pc, #524]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002910:	789b      	ldrb	r3, [r3, #2]
 8002912:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			needle_set_point_change_str[2] = Buffor_Rx_USART[3];
 8002916:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002918:	78db      	ldrb	r3, [r3, #3]
 800291a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			needle_set_point_change =  (uint16_t)atoi(needle_set_point_change_str);
 800291e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002922:	4618      	mov	r0, r3
 8002924:	f00b ff0a 	bl	800e73c <atoi>
 8002928:	4603      	mov	r3, r0
 800292a:	b29b      	uxth	r3, r3
 800292c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			// Send to queue
			osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 800292e:	4b7c      	ldr	r3, [pc, #496]	; (8002b20 <HAL_UART_RxCpltCallback+0x240>)
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8002936:	2300      	movs	r3, #0
 8002938:	2200      	movs	r2, #0
 800293a:	f008 faed 	bl	800af18 <osMessageQueuePut>
 800293e:	e0df      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'S') { // Syringe set position
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b53      	cmp	r3, #83	; 0x53
 8002946:	d11c      	bne.n	8002982 <HAL_UART_RxCpltCallback+0xa2>
			uint16_t syringe_set_point_change;
			char syringe_set_point_change_str[3];
			// Convert to uint16_t
			syringe_set_point_change_str[0] = Buffor_Rx_USART[1];
 8002948:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	f887 3020 	strb.w	r3, [r7, #32]
			syringe_set_point_change_str[1] = Buffor_Rx_USART[2];
 8002950:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002952:	789b      	ldrb	r3, [r3, #2]
 8002954:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			syringe_set_point_change_str[2] = Buffor_Rx_USART[3];
 8002958:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			syringe_set_point_change =  (uint16_t)atoi(syringe_set_point_change_str);
 8002960:	f107 0320 	add.w	r3, r7, #32
 8002964:	4618      	mov	r0, r3
 8002966:	f00b fee9 	bl	800e73c <atoi>
 800296a:	4603      	mov	r3, r0
 800296c:	b29b      	uxth	r3, r3
 800296e:	84fb      	strh	r3, [r7, #38]	; 0x26
			// Send to queue
			osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002970:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_UART_RxCpltCallback+0x244>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8002978:	2300      	movs	r3, #0
 800297a:	2200      	movs	r2, #0
 800297c:	f008 facc 	bl	800af18 <osMessageQueuePut>
 8002980:	e0be      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'T') { // Test connection
 8002982:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b54      	cmp	r3, #84	; 0x54
 8002988:	d103      	bne.n	8002992 <HAL_UART_RxCpltCallback+0xb2>
			printf("T");
 800298a:	4867      	ldr	r0, [pc, #412]	; (8002b28 <HAL_UART_RxCpltCallback+0x248>)
 800298c:	f001 ffaa 	bl	80048e4 <printf_>
 8002990:	e0b6      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'O') { // Start ALL
 8002992:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b4f      	cmp	r3, #79	; 0x4f
 8002998:	d122      	bne.n	80029e0 <HAL_UART_RxCpltCallback+0x100>
			uint8_t permission = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	77fb      	strb	r3, [r7, #31]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_UART_RxCpltCallback+0x24c>)
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f107 011f 	add.w	r1, r7, #31
 80029a6:	2300      	movs	r3, #0
 80029a8:	2200      	movs	r2, #0
 80029aa:	f008 fab5 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 80029ae:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <HAL_UART_RxCpltCallback+0x250>)
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	f107 011f 	add.w	r1, r7, #31
 80029b6:	2300      	movs	r3, #0
 80029b8:	2200      	movs	r2, #0
 80029ba:	f008 faad 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_UART_RxCpltCallback+0x254>)
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	f107 011f 	add.w	r1, r7, #31
 80029c6:	2300      	movs	r3, #0
 80029c8:	2200      	movs	r2, #0
 80029ca:	f008 faa5 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueMotorStatusHandle,&permission, 0, 0U);
 80029ce:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_UART_RxCpltCallback+0x258>)
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	f107 011f 	add.w	r1, r7, #31
 80029d6:	2300      	movs	r3, #0
 80029d8:	2200      	movs	r2, #0
 80029da:	f008 fa9d 	bl	800af18 <osMessageQueuePut>
 80029de:	e08f      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'E') { // STOP ALL
 80029e0:	4b4e      	ldr	r3, [pc, #312]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b45      	cmp	r3, #69	; 0x45
 80029e6:	d122      	bne.n	8002a2e <HAL_UART_RxCpltCallback+0x14e>
			uint8_t permission = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	77bb      	strb	r3, [r7, #30]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 80029ec:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_UART_RxCpltCallback+0x24c>)
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f107 011e 	add.w	r1, r7, #30
 80029f4:	2300      	movs	r3, #0
 80029f6:	2200      	movs	r2, #0
 80029f8:	f008 fa8e 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_UART_RxCpltCallback+0x250>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	f107 011e 	add.w	r1, r7, #30
 8002a04:	2300      	movs	r3, #0
 8002a06:	2200      	movs	r2, #0
 8002a08:	f008 fa86 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002a0c:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_UART_RxCpltCallback+0x254>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	f107 011e 	add.w	r1, r7, #30
 8002a14:	2300      	movs	r3, #0
 8002a16:	2200      	movs	r2, #0
 8002a18:	f008 fa7e 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueMotorStatusHandle,&permission, 0, 0U);
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_UART_RxCpltCallback+0x258>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	f107 011e 	add.w	r1, r7, #30
 8002a24:	2300      	movs	r3, #0
 8002a26:	2200      	movs	r2, #0
 8002a28:	f008 fa76 	bl	800af18 <osMessageQueuePut>
 8002a2c:	e068      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'R') { // STOP communication
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b52      	cmp	r3, #82	; 0x52
 8002a34:	d10a      	bne.n	8002a4c <HAL_UART_RxCpltCallback+0x16c>
			uint8_t permission = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	777b      	strb	r3, [r7, #29]
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <HAL_UART_RxCpltCallback+0x254>)
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	f107 011d 	add.w	r1, r7, #29
 8002a42:	2300      	movs	r3, #0
 8002a44:	2200      	movs	r2, #0
 8002a46:	f008 fa67 	bl	800af18 <osMessageQueuePut>
 8002a4a:	e059      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'M') { // STOP motors
 8002a4c:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b4d      	cmp	r3, #77	; 0x4d
 8002a52:	d11a      	bne.n	8002a8a <HAL_UART_RxCpltCallback+0x1aa>
			uint8_t permission = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	773b      	strb	r3, [r7, #28]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_UART_RxCpltCallback+0x24c>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	f107 011c 	add.w	r1, r7, #28
 8002a60:	2300      	movs	r3, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	f008 fa58 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_UART_RxCpltCallback+0x250>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	f107 011c 	add.w	r1, r7, #28
 8002a70:	2300      	movs	r3, #0
 8002a72:	2200      	movs	r2, #0
 8002a74:	f008 fa50 	bl	800af18 <osMessageQueuePut>
			osMessageQueuePut(QueueMotorStatusHandle,&permission, 0, 0U);
 8002a78:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_UART_RxCpltCallback+0x258>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f107 011c 	add.w	r1, r7, #28
 8002a80:	2300      	movs	r3, #0
 8002a82:	2200      	movs	r2, #0
 8002a84:	f008 fa48 	bl	800af18 <osMessageQueuePut>
 8002a88:	e03a      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'Q') { // Needle speed in rpm
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b51      	cmp	r3, #81	; 0x51
 8002a90:	d119      	bne.n	8002ac6 <HAL_UART_RxCpltCallback+0x1e6>
			uint16_t Needle_speed_changed;
			char Needle_speed_changed_str[3];
			// Convert to uint16_t
			Needle_speed_changed_str[0] = Buffor_Rx_USART[1];
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	753b      	strb	r3, [r7, #20]
			Needle_speed_changed_str[1] = Buffor_Rx_USART[2];
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002a9a:	789b      	ldrb	r3, [r3, #2]
 8002a9c:	757b      	strb	r3, [r7, #21]
			Needle_speed_changed_str[2] = Buffor_Rx_USART[3];
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	75bb      	strb	r3, [r7, #22]
			Needle_speed_changed =  (uint16_t)atoi(Needle_speed_changed_str);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00b fe47 	bl	800e73c <atoi>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	837b      	strh	r3, [r7, #26]
			// Send to queue
			osMessageQueuePut(QueueNeedleSpeedRPMHandle, &Needle_speed_changed, 0, 0U);
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_UART_RxCpltCallback+0x25c>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	f107 011a 	add.w	r1, r7, #26
 8002abc:	2300      	movs	r3, #0
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f008 fa2a 	bl	800af18 <osMessageQueuePut>
 8002ac4:	e01c      	b.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
		}else if (Buffor_Rx_USART[0] == 'W') { // Syringe speed in rpm
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b57      	cmp	r3, #87	; 0x57
 8002acc:	d118      	bne.n	8002b00 <HAL_UART_RxCpltCallback+0x220>
			uint16_t Syringe_speed_changed;
			char Syringe_speed_changed_str[3];
			// Convert to uint16_t
			Syringe_speed_changed_str[0] = Buffor_Rx_USART[1];
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	733b      	strb	r3, [r7, #12]
			Syringe_speed_changed_str[1] = Buffor_Rx_USART[2];
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002ad6:	789b      	ldrb	r3, [r3, #2]
 8002ad8:	737b      	strb	r3, [r7, #13]
			Syringe_speed_changed_str[2] = Buffor_Rx_USART[3];
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002adc:	78db      	ldrb	r3, [r3, #3]
 8002ade:	73bb      	strb	r3, [r7, #14]
			Syringe_speed_changed =  (uint16_t)atoi(Syringe_speed_changed_str);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00b fe29 	bl	800e73c <atoi>
 8002aea:	4603      	mov	r3, r0
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	827b      	strh	r3, [r7, #18]
			// Send to queue
			osMessageQueuePut(QueueSyringeSpeedRPMHandle, &Syringe_speed_changed, 0, 0U);
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_UART_RxCpltCallback+0x260>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	f107 0112 	add.w	r1, r7, #18
 8002af8:	2300      	movs	r3, #0
 8002afa:	2200      	movs	r2, #0
 8002afc:	f008 fa0c 	bl	800af18 <osMessageQueuePut>
		}
		//
		// Listening setup
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002b00:	2204      	movs	r2, #4
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <HAL_UART_RxCpltCallback+0x23c>)
 8002b04:	480f      	ldr	r0, [pc, #60]	; (8002b44 <HAL_UART_RxCpltCallback+0x264>)
 8002b06:	f006 fa18 	bl	8008f3a <HAL_UART_Receive_IT>
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	3730      	adds	r7, #48	; 0x30
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40004800 	.word	0x40004800
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	2000049c 	.word	0x2000049c
 8002b20:	200004d0 	.word	0x200004d0
 8002b24:	200004d4 	.word	0x200004d4
 8002b28:	0800eed8 	.word	0x0800eed8
 8002b2c:	200004dc 	.word	0x200004dc
 8002b30:	200004d8 	.word	0x200004d8
 8002b34:	200004e0 	.word	0x200004e0
 8002b38:	200004ec 	.word	0x200004ec
 8002b3c:	200004e8 	.word	0x200004e8
 8002b40:	200004e4 	.word	0x200004e4
 8002b44:	20000740 	.word	0x20000740

08002b48 <HAL_GPIO_EXTI_Callback>:
//
// Safety interlock (limit switch)
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_STOP_SYRINGE_1_Pin){ // END STOP Syringe Near Drive
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b58:	d10a      	bne.n	8002b70 <HAL_GPIO_EXTI_Callback+0x28>
		uint16_t syringe_set_point_change = 120; // TODO change the stop point
 8002b5a:	2378      	movs	r3, #120	; 0x78
 8002b5c:	81fb      	strh	r3, [r7, #14]
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	f107 010e 	add.w	r1, r7, #14
 8002b66:	2300      	movs	r3, #0
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f008 f9d5 	bl	800af18 <osMessageQueuePut>
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
		uint16_t needle_set_point_change = 20; // TODO change the stop point
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}
}
 8002b6e:	e02b      	b.n	8002bc8 <HAL_GPIO_EXTI_Callback+0x80>
	}else if (GPIO_Pin == END_STOP_SYRINGE_2_Pin){ // END STOP Syringe Near Syringe
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b76:	d10a      	bne.n	8002b8e <HAL_GPIO_EXTI_Callback+0x46>
		uint16_t syringe_set_point_change = 20; // TODO change the stop point
 8002b78:	2314      	movs	r3, #20
 8002b7a:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	f107 010c 	add.w	r1, r7, #12
 8002b84:	2300      	movs	r3, #0
 8002b86:	2200      	movs	r2, #0
 8002b88:	f008 f9c6 	bl	800af18 <osMessageQueuePut>
}
 8002b8c:	e01c      	b.n	8002bc8 <HAL_GPIO_EXTI_Callback+0x80>
	}else if(GPIO_Pin == END_STOP_NEEDLE_1_Pin){ // END STOP Needle Near Drive
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b94:	d10a      	bne.n	8002bac <HAL_GPIO_EXTI_Callback+0x64>
		uint16_t needle_set_point_change = 120; // TODO change the stop point
 8002b96:	2378      	movs	r3, #120	; 0x78
 8002b98:	817b      	strh	r3, [r7, #10]
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	f107 010a 	add.w	r1, r7, #10
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f008 f9b7 	bl	800af18 <osMessageQueuePut>
}
 8002baa:	e00d      	b.n	8002bc8 <HAL_GPIO_EXTI_Callback+0x80>
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb2:	d109      	bne.n	8002bc8 <HAL_GPIO_EXTI_Callback+0x80>
		uint16_t needle_set_point_change = 20; // TODO change the stop point
 8002bb4:	2314      	movs	r3, #20
 8002bb6:	813b      	strh	r3, [r7, #8]
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	f107 0108 	add.w	r1, r7, #8
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f008 f9a8 	bl	800af18 <osMessageQueuePut>
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200004d4 	.word	0x200004d4
 8002bd4:	200004d0 	.word	0x200004d0

08002bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	; 0x38
 8002bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	4b79      	ldr	r3, [pc, #484]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a78      	ldr	r2, [pc, #480]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c06:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a72      	ldr	r2, [pc, #456]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c0c:	f043 0320 	orr.w	r3, r3, #32
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a66      	ldr	r2, [pc, #408]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a60      	ldr	r2, [pc, #384]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b5e      	ldr	r3, [pc, #376]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b58      	ldr	r3, [pc, #352]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7e:	4b55      	ldr	r3, [pc, #340]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a54      	ldr	r2, [pc, #336]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <MX_GPIO_Init+0x1fc>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin, GPIO_PIN_RESET);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	21e0      	movs	r1, #224	; 0xe0
 8002cb2:	4849      	ldr	r0, [pc, #292]	; (8002dd8 <MX_GPIO_Init+0x200>)
 8002cb4:	f002 fd9a 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 8002cbe:	4847      	ldr	r0, [pc, #284]	; (8002ddc <MX_GPIO_Init+0x204>)
 8002cc0:	f002 fd94 	bl	80057ec <HAL_GPIO_WritePin>
                          |FAN_OUT_Pin|LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f24d 4180 	movw	r1, #54400	; 0xd480
 8002cca:	4845      	ldr	r0, [pc, #276]	; (8002de0 <MX_GPIO_Init+0x208>)
 8002ccc:	f002 fd8e 	bl	80057ec <HAL_GPIO_WritePin>
                          |MS2_NEEDLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002cd6:	4843      	ldr	r0, [pc, #268]	; (8002de4 <MX_GPIO_Init+0x20c>)
 8002cd8:	f002 fd88 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	4841      	ldr	r0, [pc, #260]	; (8002de8 <MX_GPIO_Init+0x210>)
 8002ce2:	f002 fd83 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin;
 8002ce6:	23e0      	movs	r3, #224	; 0xe0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cea:	2301      	movs	r3, #1
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4836      	ldr	r0, [pc, #216]	; (8002dd8 <MX_GPIO_Init+0x200>)
 8002cfe:	f002 fbc9 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 8002d02:	f644 73c1 	movw	r3, #20417	; 0x4fc1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
                          |FAN_OUT_Pin|LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d10:	2302      	movs	r3, #2
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4830      	ldr	r0, [pc, #192]	; (8002ddc <MX_GPIO_Init+0x204>)
 8002d1c:	f002 fbba 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002d20:	f24d 4380 	movw	r3, #54400	; 0xd480
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
                          |MS2_NEEDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d36:	4619      	mov	r1, r3
 8002d38:	4829      	ldr	r0, [pc, #164]	; (8002de0 <MX_GPIO_Init+0x208>)
 8002d3a:	f002 fbab 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = END_STOP_NEEDLE_1_Pin|END_STOP_SYRINGE_1_Pin|END_STOP_SYRINGE_2_Pin|END_STOP_NEEDLE_2_Pin;
 8002d3e:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d52:	4619      	mov	r1, r3
 8002d54:	4822      	ldr	r0, [pc, #136]	; (8002de0 <MX_GPIO_Init+0x208>)
 8002d56:	f002 fb9d 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin;
 8002d5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d60:	2301      	movs	r3, #1
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d70:	4619      	mov	r1, r3
 8002d72:	481c      	ldr	r0, [pc, #112]	; (8002de4 <MX_GPIO_Init+0x20c>)
 8002d74:	f002 fb8e 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d78:	2340      	movs	r3, #64	; 0x40
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d84:	2302      	movs	r3, #2
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4816      	ldr	r0, [pc, #88]	; (8002de8 <MX_GPIO_Init+0x210>)
 8002d90:	f002 fb80 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da4:	4619      	mov	r1, r3
 8002da6:	4810      	ldr	r0, [pc, #64]	; (8002de8 <MX_GPIO_Init+0x210>)
 8002da8:	f002 fb74 	bl	8005494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2105      	movs	r1, #5
 8002db0:	2017      	movs	r0, #23
 8002db2:	f002 fab3 	bl	800531c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002db6:	2017      	movs	r0, #23
 8002db8:	f002 facc 	bl	8005354 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2105      	movs	r1, #5
 8002dc0:	2028      	movs	r0, #40	; 0x28
 8002dc2:	f002 faab 	bl	800531c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc6:	2028      	movs	r0, #40	; 0x28
 8002dc8:	f002 fac4 	bl	8005354 <HAL_NVIC_EnableIRQ>

}
 8002dcc:	bf00      	nop
 8002dce:	3738      	adds	r7, #56	; 0x38
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021800 	.word	0x40021800

08002dec <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002df2:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <MX_I2C2_Init+0x78>)
 8002df4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002df8:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <MX_I2C2_Init+0x7c>)
 8002dfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e26:	480e      	ldr	r0, [pc, #56]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e28:	f002 fd2c 	bl	8005884 <HAL_I2C_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002e32:	f000 f99b 	bl	800316c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e36:	2100      	movs	r1, #0
 8002e38:	4809      	ldr	r0, [pc, #36]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e3a:	f003 fa87 	bl	800634c <HAL_I2CEx_ConfigAnalogFilter>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002e44:	f000 f992 	bl	800316c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <MX_I2C2_Init+0x74>)
 8002e4c:	f003 fac9 	bl	80063e2 <HAL_I2CEx_ConfigDigitalFilter>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002e56:	f000 f989 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000052c 	.word	0x2000052c
 8002e64:	40005800 	.word	0x40005800
 8002e68:	00301739 	.word	0x00301739

08002e6c <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <MX_I2C4_Init+0x78>)
 8002e74:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00301739;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e78:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <MX_I2C4_Init+0x7c>)
 8002e7a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002ea6:	480e      	ldr	r0, [pc, #56]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002ea8:	f002 fcec 	bl	8005884 <HAL_I2C_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002eb2:	f000 f95b 	bl	800316c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002eba:	f003 fa47 	bl	800634c <HAL_I2CEx_ConfigAnalogFilter>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002ec4:	f000 f952 	bl	800316c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <MX_I2C4_Init+0x74>)
 8002ecc:	f003 fa89 	bl	80063e2 <HAL_I2CEx_ConfigDigitalFilter>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002ed6:	f000 f949 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000578 	.word	0x20000578
 8002ee4:	40006000 	.word	0x40006000
 8002ee8:	00301739 	.word	0x00301739

08002eec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b0b0      	sub	sp, #192	; 0xc0
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	2290      	movs	r2, #144	; 0x90
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f00b fc53 	bl	800e7b8 <memset>
  if(i2cHandle->Instance==I2C2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a44      	ldr	r2, [pc, #272]	; (8003028 <HAL_I2C_MspInit+0x13c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d13d      	bne.n	8002f98 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f20:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 ffbb 	bl	8006ea8 <HAL_RCCEx_PeriphCLKConfig>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002f38:	f000 f918 	bl	800316c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4a3a      	ldr	r2, [pc, #232]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002f42:	f043 0320 	orr.w	r3, r3, #32
 8002f46:	6313      	str	r3, [r2, #48]	; 0x30
 8002f48:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f5a:	2312      	movs	r3, #18
 8002f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f76:	4619      	mov	r1, r3
 8002f78:	482d      	ldr	r0, [pc, #180]	; (8003030 <HAL_I2C_MspInit+0x144>)
 8002f7a:	f002 fa8b 	bl	8005494 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f7e:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002f84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8002f96:	e042      	b.n	800301e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_I2C_MspInit+0x148>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d13d      	bne.n	800301e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 ff78 	bl	8006ea8 <HAL_RCCEx_PeriphCLKConfig>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002fbe:	f000 f8d5 	bl	800316c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a19      	ldr	r2, [pc, #100]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_I2C_MspInit+0x140>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002fda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe2:	2312      	movs	r3, #18
 8002fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ffa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ffe:	4619      	mov	r1, r3
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <HAL_I2C_MspInit+0x144>)
 8003002:	f002 fa47 	bl	8005494 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_I2C_MspInit+0x140>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_I2C_MspInit+0x140>)
 800300c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_I2C_MspInit+0x140>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
}
 800301e:	bf00      	nop
 8003020:	37c0      	adds	r7, #192	; 0xc0
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40005800 	.word	0x40005800
 800302c:	40023800 	.word	0x40023800
 8003030:	40021400 	.word	0x40021400
 8003034:	40006000 	.word	0x40006000

08003038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800303c:	f002 f889 	bl	8005152 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003040:	f000 f818 	bl	8003074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003044:	f7ff fdc8 	bl	8002bd8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003048:	f001 ffc2 	bl	8004fd0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800304c:	f7ff fece 	bl	8002dec <MX_I2C2_Init>
  MX_I2C4_Init();
 8003050:	f7ff ff0c 	bl	8002e6c <MX_I2C4_Init>
  MX_TIM2_Init();
 8003054:	f001 fd66 	bl	8004b24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003058:	f001 fddc 	bl	8004c14 <MX_TIM3_Init>
  MX_TIM4_Init();
 800305c:	f001 fe2a 	bl	8004cb4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8003060:	f001 fea0 	bl	8004da4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003064:	f007 f9a6 	bl	800a3b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003068:	f7fe fcea 	bl	8001a40 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800306c:	f007 f9d6 	bl	800a41c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003070:	e7fe      	b.n	8003070 <main+0x38>
	...

08003074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b094      	sub	sp, #80	; 0x50
 8003078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307a:	f107 031c 	add.w	r3, r7, #28
 800307e:	2234      	movs	r2, #52	; 0x34
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f00b fb98 	bl	800e7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003098:	f003 f9f0 	bl	800647c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <SystemClock_Config+0xcc>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a27      	ldr	r2, [pc, #156]	; (8003140 <SystemClock_Config+0xcc>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <SystemClock_Config+0xcc>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <SystemClock_Config+0xd0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <SystemClock_Config+0xd0>)
 80030be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <SystemClock_Config+0xd0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80030d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80030d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030da:	2302      	movs	r3, #2
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030e4:	2304      	movs	r3, #4
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80030e8:	2390      	movs	r3, #144	; 0x90
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030ec:	2302      	movs	r3, #2
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030f0:	2304      	movs	r3, #4
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030f4:	2302      	movs	r3, #2
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 f9cd 	bl	800649c <HAL_RCC_OscConfig>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003108:	f000 f830 	bl	800316c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800310c:	230f      	movs	r3, #15
 800310e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003110:	2302      	movs	r3, #2
 8003112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fc65 	bl	80069f8 <HAL_RCC_ClockConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003134:	f000 f81a 	bl	800316c <Error_Handler>
  }
}
 8003138:	bf00      	nop
 800313a:	3750      	adds	r7, #80	; 0x50
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	40007000 	.word	0x40007000

08003148 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800315a:	f002 f807 	bl	800516c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40002000 	.word	0x40002000

0800316c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003170:	b672      	cpsid	i
}
 8003172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003174:	e7fe      	b.n	8003174 <Error_Handler+0x8>

08003176 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d204      	bcs.n	8003198 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	701a      	strb	r2, [r3, #0]
  }
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <_out_char+0x1e>
    _putchar(character);
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fb61 	bl	80028a0 <_putchar>
  }
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e002      	b.n	80031fc <_strnlen_s+0x16>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3301      	adds	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <_strnlen_s+0x28>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	603a      	str	r2, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f3      	bne.n	80031f6 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	2b2f      	cmp	r3, #47	; 0x2f
 800322e:	d904      	bls.n	800323a <_is_digit+0x1a>
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b39      	cmp	r3, #57	; 0x39
 8003234:	d801      	bhi.n	800323a <_is_digit+0x1a>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <_is_digit+0x1c>
 800323a:	2300      	movs	r3, #0
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800325a:	e00e      	b.n	800327a <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4618      	mov	r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	1c59      	adds	r1, r3, #1
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6011      	str	r1, [r2, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4403      	add	r3, r0
 8003276:	3b30      	subs	r3, #48	; 0x30
 8003278:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ffcd 	bl	8003220 <_is_digit>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e7      	bne.n	800325c <_atoi+0xe>
  }
  return i;
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003296:	b590      	push	{r4, r7, lr}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d125      	bne.n	80032fe <_out_rev+0x68>
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d120      	bne.n	80032fe <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e00a      	b.n	80032d8 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	1c53      	adds	r3, r2, #1
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	68fc      	ldr	r4, [r7, #12]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	2020      	movs	r0, #32
 80032d0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3f0      	bcc.n	80032c2 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80032e0:	e00d      	b.n	80032fe <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	3b01      	subs	r3, #1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	4413      	add	r3, r2
 80032ee:	7818      	ldrb	r0, [r3, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	1c53      	adds	r3, r2, #1
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	68fc      	ldr	r4, [r7, #12]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	47a0      	blx	r4
  while (len) {
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ee      	bne.n	80032e2 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00e      	beq.n	800332c <_out_rev+0x96>
    while (idx - start_idx < width) {
 800330e:	e007      	b.n	8003320 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	1c53      	adds	r3, r2, #1
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	68fc      	ldr	r4, [r7, #12]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	2020      	movs	r0, #32
 800331e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003328:	429a      	cmp	r2, r3
 800332a:	d8f1      	bhi.n	8003310 <_out_rev+0x7a>
    }
  }

  return idx;
 800332c:	687b      	ldr	r3, [r7, #4]
}
 800332e:	4618      	mov	r0, r3
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}

08003336 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b088      	sub	sp, #32
 800333a:	af04      	add	r7, sp, #16
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d136      	bne.n	80033bc <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d018      	beq.n	8003386 <_ntoa_format+0x50>
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <_ntoa_format+0x50>
 800335e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <_ntoa_format+0x3a>
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <_ntoa_format+0x50>
      width--;
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	3b01      	subs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003376:	e006      	b.n	8003386 <_ntoa_format+0x50>
      buf[len++] = '0';
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	61fa      	str	r2, [r7, #28]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	2230      	movs	r2, #48	; 0x30
 8003384:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	429a      	cmp	r2, r3
 800338c:	d20a      	bcs.n	80033a4 <_ntoa_format+0x6e>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b1f      	cmp	r3, #31
 8003392:	d9f1      	bls.n	8003378 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003394:	e006      	b.n	80033a4 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	61fa      	str	r2, [r7, #28]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	2230      	movs	r2, #48	; 0x30
 80033a2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <_ntoa_format+0x86>
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d202      	bcs.n	80033bc <_ntoa_format+0x86>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b1f      	cmp	r3, #31
 80033ba:	d9ec      	bls.n	8003396 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d058      	beq.n	8003478 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <_ntoa_format+0xc8>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d013      	beq.n	80033fe <_ntoa_format+0xc8>
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	429a      	cmp	r2, r3
 80033dc:	d003      	beq.n	80033e6 <_ntoa_format+0xb0>
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d10b      	bne.n	80033fe <_ntoa_format+0xc8>
      len--;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <_ntoa_format+0xc8>
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d102      	bne.n	80033fe <_ntoa_format+0xc8>
        len--;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	2b10      	cmp	r3, #16
 8003402:	d10f      	bne.n	8003424 <_ntoa_format+0xee>
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <_ntoa_format+0xee>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b1f      	cmp	r3, #31
 8003412:	d807      	bhi.n	8003424 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	2278      	movs	r2, #120	; 0x78
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e01f      	b.n	8003464 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b10      	cmp	r3, #16
 8003428:	d10f      	bne.n	800344a <_ntoa_format+0x114>
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <_ntoa_format+0x114>
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b1f      	cmp	r3, #31
 8003438:	d807      	bhi.n	800344a <_ntoa_format+0x114>
      buf[len++] = 'X';
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	61fa      	str	r2, [r7, #28]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	2258      	movs	r2, #88	; 0x58
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e00c      	b.n	8003464 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b02      	cmp	r3, #2
 800344e:	d109      	bne.n	8003464 <_ntoa_format+0x12e>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b1f      	cmp	r3, #31
 8003454:	d806      	bhi.n	8003464 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	61fa      	str	r2, [r7, #28]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4413      	add	r3, r2
 8003460:	2262      	movs	r2, #98	; 0x62
 8003462:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b1f      	cmp	r3, #31
 8003468:	d806      	bhi.n	8003478 <_ntoa_format+0x142>
      buf[len++] = '0';
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	61fa      	str	r2, [r7, #28]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4413      	add	r3, r2
 8003474:	2230      	movs	r2, #48	; 0x30
 8003476:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b1f      	cmp	r3, #31
 800347c:	d824      	bhi.n	80034c8 <_ntoa_format+0x192>
    if (negative) {
 800347e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <_ntoa_format+0x160>
      buf[len++] = '-';
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	61fa      	str	r2, [r7, #28]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	222d      	movs	r2, #45	; 0x2d
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e018      	b.n	80034c8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	61fa      	str	r2, [r7, #28]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4413      	add	r3, r2
 80034aa:	222b      	movs	r2, #43	; 0x2b
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e00b      	b.n	80034c8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	61fa      	str	r2, [r7, #28]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4413      	add	r3, r2
 80034c4:	2220      	movs	r2, #32
 80034c6:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	9303      	str	r3, [sp, #12]
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	9302      	str	r3, [sp, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fed9 	bl	8003296 <_out_rev>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b096      	sub	sp, #88	; 0x58
 80034f2:	af08      	add	r7, sp, #32
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003508:	f023 0310 	bic.w	r3, r3, #16
 800350c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <_ntoa_long+0x30>
 8003518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d032      	beq.n	8003584 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003522:	fbb3 f2f2 	udiv	r2, r3, r2
 8003526:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003528:	fb01 f202 	mul.w	r2, r1, r2
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003532:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003536:	2b09      	cmp	r3, #9
 8003538:	d804      	bhi.n	8003544 <_ntoa_long+0x56>
 800353a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800353e:	3330      	adds	r3, #48	; 0x30
 8003540:	b2da      	uxtb	r2, r3
 8003542:	e00d      	b.n	8003560 <_ntoa_long+0x72>
 8003544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <_ntoa_long+0x64>
 800354e:	2241      	movs	r2, #65	; 0x41
 8003550:	e000      	b.n	8003554 <_ntoa_long+0x66>
 8003552:	2261      	movs	r2, #97	; 0x61
 8003554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003558:	4413      	add	r3, r2
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3b0a      	subs	r3, #10
 800355e:	b2da      	uxtb	r2, r3
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	1c59      	adds	r1, r3, #1
 8003564:	6379      	str	r1, [r7, #52]	; 0x34
 8003566:	3338      	adds	r3, #56	; 0x38
 8003568:	443b      	add	r3, r7
 800356a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800356e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <_ntoa_long+0x96>
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	2b1f      	cmp	r3, #31
 8003582:	d9cc      	bls.n	800351e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003586:	9306      	str	r3, [sp, #24]
 8003588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358a:	9305      	str	r3, [sp, #20]
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	f107 0310 	add.w	r3, r7, #16
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff fec3 	bl	8003336 <_ntoa_format>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3738      	adds	r7, #56	; 0x38
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b096      	sub	sp, #88	; 0x58
 80035be:	af08      	add	r7, sp, #32
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80035cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035d0:	4313      	orrs	r3, r2
 80035d2:	d103      	bne.n	80035dc <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80035d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d6:	f023 0310 	bic.w	r3, r3, #16
 80035da:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80035dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <_ntoa_long_long+0x34>
 80035e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d037      	beq.n	800365e <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80035ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80035f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035f6:	f7fc fe23 	bl	8000240 <__aeabi_uldivmod>
 80035fa:	4613      	mov	r3, r2
 80035fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003600:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003604:	2b09      	cmp	r3, #9
 8003606:	d804      	bhi.n	8003612 <_ntoa_long_long+0x58>
 8003608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800360c:	3330      	adds	r3, #48	; 0x30
 800360e:	b2da      	uxtb	r2, r3
 8003610:	e00d      	b.n	800362e <_ntoa_long_long+0x74>
 8003612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <_ntoa_long_long+0x66>
 800361c:	2241      	movs	r2, #65	; 0x41
 800361e:	e000      	b.n	8003622 <_ntoa_long_long+0x68>
 8003620:	2261      	movs	r2, #97	; 0x61
 8003622:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003626:	4413      	add	r3, r2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3b0a      	subs	r3, #10
 800362c:	b2da      	uxtb	r2, r3
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	6379      	str	r1, [r7, #52]	; 0x34
 8003634:	3338      	adds	r3, #56	; 0x38
 8003636:	443b      	add	r3, r7
 8003638:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800363c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003640:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003644:	f7fc fdfc 	bl	8000240 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003650:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003654:	4313      	orrs	r3, r2
 8003656:	d002      	beq.n	800365e <_ntoa_long_long+0xa4>
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	2b1f      	cmp	r3, #31
 800365c:	d9c7      	bls.n	80035ee <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003662:	9206      	str	r2, [sp, #24]
 8003664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003666:	9205      	str	r2, [sp, #20]
 8003668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366a:	9204      	str	r2, [sp, #16]
 800366c:	9303      	str	r3, [sp, #12]
 800366e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fe56 	bl	8003336 <_ntoa_format>
 800368a:	4603      	mov	r3, r0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3738      	adds	r7, #56	; 0x38
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	0000      	movs	r0, r0
	...

08003698 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b09c      	sub	sp, #112	; 0x70
 800369c:	af04      	add	r7, sp, #16
 800369e:	6178      	str	r0, [r7, #20]
 80036a0:	6139      	str	r1, [r7, #16]
 80036a2:	60fa      	str	r2, [r7, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80036ba:	ed97 6b00 	vldr	d6, [r7]
 80036be:	ed97 7b00 	vldr	d7, [r7]
 80036c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	d00f      	beq.n	80036ec <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80036cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ce:	9303      	str	r3, [sp, #12]
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	9302      	str	r3, [sp, #8]
 80036d4:	2303      	movs	r3, #3
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	4bb5      	ldr	r3, [pc, #724]	; (80039b0 <_ftoa+0x318>)
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	6939      	ldr	r1, [r7, #16]
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff fdd7 	bl	8003296 <_out_rev>
 80036e8:	4603      	mov	r3, r0
 80036ea:	e215      	b.n	8003b18 <_ftoa+0x480>
  if (value < -DBL_MAX)
 80036ec:	ed97 7b00 	vldr	d7, [r7]
 80036f0:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8003988 <_ftoa+0x2f0>
 80036f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	d50f      	bpl.n	800371e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80036fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003700:	9303      	str	r3, [sp, #12]
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	2304      	movs	r3, #4
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4baa      	ldr	r3, [pc, #680]	; (80039b4 <_ftoa+0x31c>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	6978      	ldr	r0, [r7, #20]
 8003716:	f7ff fdbe 	bl	8003296 <_out_rev>
 800371a:	4603      	mov	r3, r0
 800371c:	e1fc      	b.n	8003b18 <_ftoa+0x480>
  if (value > DBL_MAX)
 800371e:	ed97 7b00 	vldr	d7, [r7]
 8003722:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8003990 <_ftoa+0x2f8>
 8003726:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	dd1d      	ble.n	800376c <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <_ftoa+0xa6>
 800373a:	4b9f      	ldr	r3, [pc, #636]	; (80039b8 <_ftoa+0x320>)
 800373c:	e000      	b.n	8003740 <_ftoa+0xa8>
 800373e:	4b9f      	ldr	r3, [pc, #636]	; (80039bc <_ftoa+0x324>)
 8003740:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003742:	f002 0204 	and.w	r2, r2, #4
 8003746:	2a00      	cmp	r2, #0
 8003748:	d001      	beq.n	800374e <_ftoa+0xb6>
 800374a:	2204      	movs	r2, #4
 800374c:	e000      	b.n	8003750 <_ftoa+0xb8>
 800374e:	2203      	movs	r2, #3
 8003750:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003752:	9103      	str	r1, [sp, #12]
 8003754:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003756:	9102      	str	r1, [sp, #8]
 8003758:	9201      	str	r2, [sp, #4]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6939      	ldr	r1, [r7, #16]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff fd97 	bl	8003296 <_out_rev>
 8003768:	4603      	mov	r3, r0
 800376a:	e1d5      	b.n	8003b18 <_ftoa+0x480>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800376c:	ed97 7b00 	vldr	d7, [r7]
 8003770:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8003998 <_ftoa+0x300>
 8003774:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	dc08      	bgt.n	8003790 <_ftoa+0xf8>
 800377e:	ed97 7b00 	vldr	d7, [r7]
 8003782:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80039a0 <_ftoa+0x308>
 8003786:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	d50f      	bpl.n	80037b0 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	ed97 0b00 	vldr	d0, [r7]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6939      	ldr	r1, [r7, #16]
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f000 f9be 	bl	8003b28 <_etoa>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e1b3      	b.n	8003b18 <_ftoa+0x480>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80037b6:	ed97 7b00 	vldr	d7, [r7]
 80037ba:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80037be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c2:	d50a      	bpl.n	80037da <_ftoa+0x142>
    negative = true;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80037ca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80039a8 <_ftoa+0x310>
 80037ce:	ed97 7b00 	vldr	d7, [r7]
 80037d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037d6:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80037da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <_ftoa+0x168>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80037e4:	2306      	movs	r3, #6
 80037e6:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80037e8:	e00a      	b.n	8003800 <_ftoa+0x168>
    buf[len++] = '0';
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80037f0:	3360      	adds	r3, #96	; 0x60
 80037f2:	443b      	add	r3, r7
 80037f4:	2230      	movs	r2, #48	; 0x30
 80037f6:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80037fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037fc:	3b01      	subs	r3, #1
 80037fe:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003802:	2b1f      	cmp	r3, #31
 8003804:	d802      	bhi.n	800380c <_ftoa+0x174>
 8003806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003808:	2b09      	cmp	r3, #9
 800380a:	d8ee      	bhi.n	80037ea <_ftoa+0x152>
  }

  int whole = (int)value;
 800380c:	ed97 7b00 	vldr	d7, [r7]
 8003810:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003814:	ee17 3a90 	vmov	r3, s15
 8003818:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003824:	ed97 6b00 	vldr	d6, [r7]
 8003828:	ee36 6b47 	vsub.f64	d6, d6, d7
 800382c:	4a64      	ldr	r2, [pc, #400]	; (80039c0 <_ftoa+0x328>)
 800382e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	ed93 7b00 	vldr	d7, [r3]
 8003838:	ee26 7b07 	vmul.f64	d7, d6, d7
 800383c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003840:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003848:	ee17 3a90 	vmov	r3, s15
 800384c:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800384e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003858:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800385c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003860:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003864:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003868:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800386c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003874:	dd18      	ble.n	80038a8 <_ftoa+0x210>
    ++frac;
 8003876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003878:	3301      	adds	r3, #1
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003886:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <_ftoa+0x328>)
 8003888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	ed93 7b00 	vldr	d7, [r3]
 8003892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	db19      	blt.n	80038d0 <_ftoa+0x238>
      frac = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80038a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a2:	3301      	adds	r3, #1
 80038a4:	657b      	str	r3, [r7, #84]	; 0x54
 80038a6:	e013      	b.n	80038d0 <_ftoa+0x238>
    }
  }
  else if (diff < 0.5) {
 80038a8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80038ac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80038b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b8:	d40a      	bmi.n	80038d0 <_ftoa+0x238>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80038ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <_ftoa+0x232>
 80038c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <_ftoa+0x238>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80038ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038cc:	3301      	adds	r3, #1
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80038d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d12e      	bne.n	8003934 <_ftoa+0x29c>
    diff = value - (double)whole;
 80038d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038e0:	ed97 6b00 	vldr	d6, [r7]
 80038e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80038e8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80038ec:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80038f0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80038f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fc:	bf4c      	ite	mi
 80038fe:	2301      	movmi	r3, #1
 8003900:	2300      	movpl	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f083 0301 	eor.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <_ftoa+0x288>
 800390e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003912:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003916:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391e:	dd70      	ble.n	8003a02 <_ftoa+0x36a>
 8003920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 808d 	beq.w	8003a46 <_ftoa+0x3ae>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800392c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392e:	3301      	adds	r3, #1
 8003930:	657b      	str	r3, [r7, #84]	; 0x54
 8003932:	e088      	b.n	8003a46 <_ftoa+0x3ae>
    }
  }
  else {
    unsigned int count = prec;
 8003934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003938:	e01f      	b.n	800397a <_ftoa+0x2e2>
      --count;
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	3b01      	subs	r3, #1
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003940:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <_ftoa+0x32c>)
 8003944:	fba3 2301 	umull	r2, r3, r3, r1
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	1aca      	subs	r2, r1, r3
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800395c:	3230      	adds	r2, #48	; 0x30
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	3360      	adds	r3, #96	; 0x60
 8003962:	443b      	add	r3, r7
 8003964:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396a:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <_ftoa+0x32c>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	2b00      	cmp	r3, #0
 8003978:	d026      	beq.n	80039c8 <_ftoa+0x330>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800397a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397c:	2b1f      	cmp	r3, #31
 800397e:	d9dc      	bls.n	800393a <_ftoa+0x2a2>
 8003980:	e02c      	b.n	80039dc <_ftoa+0x344>
 8003982:	bf00      	nop
 8003984:	f3af 8000 	nop.w
 8003988:	ffffffff 	.word	0xffffffff
 800398c:	ffefffff 	.word	0xffefffff
 8003990:	ffffffff 	.word	0xffffffff
 8003994:	7fefffff 	.word	0x7fefffff
 8003998:	00000000 	.word	0x00000000
 800399c:	41cdcd65 	.word	0x41cdcd65
 80039a0:	00000000 	.word	0x00000000
 80039a4:	c1cdcd65 	.word	0xc1cdcd65
	...
 80039b0:	0800eedc 	.word	0x0800eedc
 80039b4:	0800eee0 	.word	0x0800eee0
 80039b8:	0800eee8 	.word	0x0800eee8
 80039bc:	0800eef0 	.word	0x0800eef0
 80039c0:	0800f3e8 	.word	0x0800f3e8
 80039c4:	cccccccd 	.word	0xcccccccd
        break;
 80039c8:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80039ca:	e007      	b.n	80039dc <_ftoa+0x344>
      buf[len++] = '0';
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039d2:	3360      	adds	r3, #96	; 0x60
 80039d4:	443b      	add	r3, r7
 80039d6:	2230      	movs	r2, #48	; 0x30
 80039d8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80039dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039de:	2b1f      	cmp	r3, #31
 80039e0:	d804      	bhi.n	80039ec <_ftoa+0x354>
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <_ftoa+0x334>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80039ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ee:	2b1f      	cmp	r3, #31
 80039f0:	d829      	bhi.n	8003a46 <_ftoa+0x3ae>
      // add decimal
      buf[len++] = '.';
 80039f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039f8:	3360      	adds	r3, #96	; 0x60
 80039fa:	443b      	add	r3, r7
 80039fc:	222e      	movs	r2, #46	; 0x2e
 80039fe:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003a02:	e020      	b.n	8003a46 <_ftoa+0x3ae>
    buf[len++] = (char)(48 + (whole % 10));
 8003a04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a06:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <_ftoa+0x488>)
 8003a08:	fb83 1302 	smull	r1, r3, r3, r2
 8003a0c:	1099      	asrs	r1, r3, #2
 8003a0e:	17d3      	asrs	r3, r2, #31
 8003a10:	1ac9      	subs	r1, r1, r3
 8003a12:	460b      	mov	r3, r1
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	1ad1      	subs	r1, r2, r3
 8003a1c:	b2ca      	uxtb	r2, r1
 8003a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a20:	1c59      	adds	r1, r3, #1
 8003a22:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003a24:	3230      	adds	r2, #48	; 0x30
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	3360      	adds	r3, #96	; 0x60
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a32:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <_ftoa+0x488>)
 8003a34:	fb82 1203 	smull	r1, r2, r2, r3
 8003a38:	1092      	asrs	r2, r2, #2
 8003a3a:	17db      	asrs	r3, r3, #31
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <_ftoa+0x3b6>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	2b1f      	cmp	r3, #31
 8003a4a:	d9db      	bls.n	8003a04 <_ftoa+0x36c>
 8003a4c:	e000      	b.n	8003a50 <_ftoa+0x3b8>
      break;
 8003a4e:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d123      	bne.n	8003aa2 <_ftoa+0x40a>
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01e      	beq.n	8003aa2 <_ftoa+0x40a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d014      	beq.n	8003a94 <_ftoa+0x3fc>
 8003a6a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <_ftoa+0x3e4>
 8003a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <_ftoa+0x3fc>
      width--;
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003a82:	e007      	b.n	8003a94 <_ftoa+0x3fc>
      buf[len++] = '0';
 8003a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	443b      	add	r3, r7
 8003a8e:	2230      	movs	r2, #48	; 0x30
 8003a90:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d202      	bcs.n	8003aa2 <_ftoa+0x40a>
 8003a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9e:	2b1f      	cmp	r3, #31
 8003aa0:	d9f0      	bls.n	8003a84 <_ftoa+0x3ec>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa4:	2b1f      	cmp	r3, #31
 8003aa6:	d827      	bhi.n	8003af8 <_ftoa+0x460>
    if (negative) {
 8003aa8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <_ftoa+0x42a>
      buf[len++] = '-';
 8003ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ab6:	3360      	adds	r3, #96	; 0x60
 8003ab8:	443b      	add	r3, r7
 8003aba:	222d      	movs	r2, #45	; 0x2d
 8003abc:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003ac0:	e01a      	b.n	8003af8 <_ftoa+0x460>
    }
    else if (flags & FLAGS_PLUS) {
 8003ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <_ftoa+0x446>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ad2:	3360      	adds	r3, #96	; 0x60
 8003ad4:	443b      	add	r3, r7
 8003ad6:	222b      	movs	r2, #43	; 0x2b
 8003ad8:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003adc:	e00c      	b.n	8003af8 <_ftoa+0x460>
    }
    else if (flags & FLAGS_SPACE) {
 8003ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <_ftoa+0x460>
      buf[len++] = ' ';
 8003ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003aee:	3360      	adds	r3, #96	; 0x60
 8003af0:	443b      	add	r3, r7
 8003af2:	2220      	movs	r2, #32
 8003af4:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003afa:	9303      	str	r3, [sp, #12]
 8003afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	f107 0318 	add.w	r3, r7, #24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	6939      	ldr	r1, [r7, #16]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7ff fbc0 	bl	8003296 <_out_rev>
 8003b16:	4603      	mov	r3, r0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3760      	adds	r7, #96	; 0x60
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	66666667 	.word	0x66666667
 8003b24:	00000000 	.word	0x00000000

08003b28 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b09a      	sub	sp, #104	; 0x68
 8003b2e:	af06      	add	r7, sp, #24
 8003b30:	6178      	str	r0, [r7, #20]
 8003b32:	6139      	str	r1, [r7, #16]
 8003b34:	60fa      	str	r2, [r7, #12]
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003b3c:	ed97 6b00 	vldr	d6, [r7]
 8003b40:	ed97 7b00 	vldr	d7, [r7]
 8003b44:	eeb4 6b47 	vcmp.f64	d6, d7
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	d111      	bne.n	8003b72 <_etoa+0x4a>
 8003b4e:	ed97 7b00 	vldr	d7, [r7]
 8003b52:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8003e20 <_etoa+0x2f8>
 8003b56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	dc08      	bgt.n	8003b72 <_etoa+0x4a>
 8003b60:	ed97 7b00 	vldr	d7, [r7]
 8003b64:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8003e28 <_etoa+0x300>
 8003b68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50f      	bpl.n	8003b92 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b74:	9302      	str	r3, [sp, #8]
 8003b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	ed97 0b00 	vldr	d0, [r7]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	6978      	ldr	r0, [r7, #20]
 8003b8a:	f7ff fd85 	bl	8003698 <_ftoa>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	e1c2      	b.n	8003f18 <_etoa+0x3f0>
  }

  // determine the sign
  const bool negative = value < 0;
 8003b92:	ed97 7b00 	vldr	d7, [r7]
 8003b96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	bf4c      	ite	mi
 8003ba0:	2301      	movmi	r3, #1
 8003ba2:	2300      	movpl	r3, #0
 8003ba4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 8003ba8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <_etoa+0x94>
    value = -value;
 8003bb0:	ed97 7b00 	vldr	d7, [r7]
 8003bb4:	eeb1 7b47 	vneg.f64	d7, d7
 8003bb8:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	673b      	str	r3, [r7, #112]	; 0x70
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bce:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003bd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	0d0a      	lsrs	r2, r1, #20
 8003be0:	2300      	movs	r3, #0
 8003be2:	4613      	mov	r3, r2
 8003be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003be8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf2:	4690      	mov	r8, r2
 8003bf4:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003bf8:	4644      	mov	r4, r8
 8003bfa:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003bfe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003c02:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c10:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8003e30 <_etoa+0x308>
 8003c14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c18:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8003e38 <_etoa+0x310>
 8003c1c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8003c20:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c24:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8003c28:	ee37 7b45 	vsub.f64	d7, d7, d5
 8003c2c:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8003e40 <_etoa+0x318>
 8003c30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003c34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c3c:	ee17 3a90 	vmov	r3, s15
 8003c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c4c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8003e48 <_etoa+0x320>
 8003c50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c54:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003c58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c60:	ee17 3a90 	vmov	r3, s15
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c68:	ee07 3a90 	vmov	s15, r3
 8003c6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c70:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8003e50 <_etoa+0x328>
 8003c74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003c82:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8003e58 <_etoa+0x330>
 8003c86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003c8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c8e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 8003c92:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003c96:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003c9a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ca4:	17da      	asrs	r2, r3, #31
 8003ca6:	469a      	mov	sl, r3
 8003ca8:	4693      	mov	fp, r2
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003cbc:	ed97 6b06 	vldr	d6, [r7, #24]
 8003cc0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003cc4:	ee37 4b07 	vadd.f64	d4, d7, d7
 8003cc8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003ccc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003cd0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003cd4:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8003cd8:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 8003cdc:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8003ce0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003ce4:	ee37 3b03 	vadd.f64	d3, d7, d3
 8003ce8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003cec:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8003cf0:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8003cf4:	ee37 3b03 	vadd.f64	d3, d7, d3
 8003cf8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003cfc:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8003d00:	ee35 5b07 	vadd.f64	d5, d5, d7
 8003d04:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003d08:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003d0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8003d10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d14:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 8003d18:	ed97 7b06 	vldr	d7, [r7, #24]
 8003d1c:	ed97 6b00 	vldr	d6, [r7]
 8003d20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d28:	d50a      	bpl.n	8003d40 <_etoa+0x218>
    expval--;
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8003d30:	ed97 6b06 	vldr	d6, [r7, #24]
 8003d34:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003d38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d3c:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d42:	2b63      	cmp	r3, #99	; 0x63
 8003d44:	dc05      	bgt.n	8003d52 <_etoa+0x22a>
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003d4c:	db01      	blt.n	8003d52 <_etoa+0x22a>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	e000      	b.n	8003d54 <_etoa+0x22c>
 8003d52:	2305      	movs	r3, #5
 8003d54:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d031      	beq.n	8003dc4 <_etoa+0x29c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003d60:	ed97 7b00 	vldr	d7, [r7]
 8003d64:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003e60 <_etoa+0x338>
 8003d68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	db1d      	blt.n	8003dae <_etoa+0x286>
 8003d72:	ed97 7b00 	vldr	d7, [r7]
 8003d76:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8003e68 <_etoa+0x340>
 8003d7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d82:	d514      	bpl.n	8003dae <_etoa+0x286>
      if ((int)prec > expval) {
 8003d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	da05      	bge.n	8003d98 <_etoa+0x270>
        prec = (unsigned)((int)prec - expval - 1);
 8003d8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	673b      	str	r3, [r7, #112]	; 0x70
 8003d96:	e001      	b.n	8003d9c <_etoa+0x274>
      }
      else {
        prec = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da2:	67bb      	str	r3, [r7, #120]	; 0x78
      // no characters in exponent
      minwidth = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dac:	e00a      	b.n	8003dc4 <_etoa+0x29c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <_etoa+0x29c>
 8003db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <_etoa+0x29c>
        --prec;
 8003dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	673b      	str	r3, [r7, #112]	; 0x70
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 8003dc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d904      	bls.n	8003dda <_etoa+0x2b2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd8:	e001      	b.n	8003dde <_etoa+0x2b6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <_etoa+0x2ca>
 8003de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <_etoa+0x2ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8003df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <_etoa+0x2e0>
    value /= conv.F;
 8003df8:	ed97 6b06 	vldr	d6, [r7, #24]
 8003dfc:	ed97 5b00 	vldr	d5, [r7]
 8003e00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e04:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003e0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d02d      	beq.n	8003e70 <_etoa+0x348>
 8003e14:	ed97 7b00 	vldr	d7, [r7]
 8003e18:	eeb1 7b47 	vneg.f64	d7, d7
 8003e1c:	e02a      	b.n	8003e74 <_etoa+0x34c>
 8003e1e:	bf00      	nop
 8003e20:	ffffffff 	.word	0xffffffff
 8003e24:	7fefffff 	.word	0x7fefffff
 8003e28:	ffffffff 	.word	0xffffffff
 8003e2c:	ffefffff 	.word	0xffefffff
 8003e30:	509f79fb 	.word	0x509f79fb
 8003e34:	3fd34413 	.word	0x3fd34413
 8003e38:	8b60c8b3 	.word	0x8b60c8b3
 8003e3c:	3fc68a28 	.word	0x3fc68a28
 8003e40:	636f4361 	.word	0x636f4361
 8003e44:	3fd287a7 	.word	0x3fd287a7
 8003e48:	0979a371 	.word	0x0979a371
 8003e4c:	400a934f 	.word	0x400a934f
 8003e50:	bbb55516 	.word	0xbbb55516
 8003e54:	40026bb1 	.word	0x40026bb1
 8003e58:	fefa39ef 	.word	0xfefa39ef
 8003e5c:	3fe62e42 	.word	0x3fe62e42
 8003e60:	eb1c432d 	.word	0xeb1c432d
 8003e64:	3f1a36e2 	.word	0x3f1a36e2
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	412e8480 	.word	0x412e8480
 8003e70:	ed97 7b00 	vldr	d7, [r7]
 8003e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	eeb0 0b47 	vmov.f64	d0, d7
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6939      	ldr	r1, [r7, #16]
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f7ff fc02 	bl	8003698 <_ftoa>
 8003e94:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03c      	beq.n	8003f16 <_etoa+0x3ee>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <_etoa+0x382>
 8003ea6:	2045      	movs	r0, #69	; 0x45
 8003ea8:	e000      	b.n	8003eac <_etoa+0x384>
 8003eaa:	2065      	movs	r0, #101	; 0x65
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	1c53      	adds	r3, r2, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	697c      	ldr	r4, [r7, #20]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6939      	ldr	r1, [r7, #16]
 8003eb8:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bfb8      	it	lt
 8003ec0:	425b      	neglt	r3, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec6:	0fdb      	lsrs	r3, r3, #31
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	2105      	movs	r1, #5
 8003ed0:	9105      	str	r1, [sp, #20]
 8003ed2:	9204      	str	r2, [sp, #16]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	9203      	str	r2, [sp, #12]
 8003ed8:	220a      	movs	r2, #10
 8003eda:	9202      	str	r2, [sp, #8]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	9000      	str	r0, [sp, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	6939      	ldr	r1, [r7, #16]
 8003ee6:	6978      	ldr	r0, [r7, #20]
 8003ee8:	f7ff fb01 	bl	80034ee <_ntoa_long>
 8003eec:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <_etoa+0x3ee>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003ef8:	e007      	b.n	8003f0a <_etoa+0x3e2>
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	1c53      	adds	r3, r2, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	697c      	ldr	r4, [r7, #20]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6939      	ldr	r1, [r7, #16]
 8003f06:	2020      	movs	r0, #32
 8003f08:	47a0      	blx	r4
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d8f1      	bhi.n	8003efa <_etoa+0x3d2>
    }
  }
  return idx;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3750      	adds	r7, #80	; 0x50
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop

08003f24 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f28:	b0a3      	sub	sp, #140	; 0x8c
 8003f2a:	af0a      	add	r7, sp, #40	; 0x28
 8003f2c:	6178      	str	r0, [r7, #20]
 8003f2e:	6139      	str	r1, [r7, #16]
 8003f30:	60fa      	str	r2, [r7, #12]
 8003f32:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 84ba 	bne.w	80048b4 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8003f40:	4ba3      	ldr	r3, [pc, #652]	; (80041d0 <_vsnprintf+0x2ac>)
 8003f42:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003f44:	f000 bcb6 	b.w	80048b4 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b25      	cmp	r3, #37	; 0x25
 8003f4e:	d00d      	beq.n	8003f6c <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	7818      	ldrb	r0, [r3, #0]
 8003f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f56:	1c53      	adds	r3, r2, #1
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5a:	697c      	ldr	r4, [r7, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6939      	ldr	r1, [r7, #16]
 8003f60:	47a0      	blx	r4
      format++;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3301      	adds	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
      continue;
 8003f68:	f000 bca4 	b.w	80048b4 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	3b20      	subs	r3, #32
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d857      	bhi.n	8004030 <_vsnprintf+0x10c>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <_vsnprintf+0x64>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08004009 	.word	0x08004009
 8003f8c:	08004031 	.word	0x08004031
 8003f90:	08004031 	.word	0x08004031
 8003f94:	0800401d 	.word	0x0800401d
 8003f98:	08004031 	.word	0x08004031
 8003f9c:	08004031 	.word	0x08004031
 8003fa0:	08004031 	.word	0x08004031
 8003fa4:	08004031 	.word	0x08004031
 8003fa8:	08004031 	.word	0x08004031
 8003fac:	08004031 	.word	0x08004031
 8003fb0:	08004031 	.word	0x08004031
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08004031 	.word	0x08004031
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08004031 	.word	0x08004031
 8003fc4:	08004031 	.word	0x08004031
 8003fc8:	08003fcd 	.word	0x08003fcd
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	2301      	movs	r3, #1
 8003fdc:	653b      	str	r3, [r7, #80]	; 0x50
 8003fde:	e02a      	b.n	8004036 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff2:	e020      	b.n	8004036 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	2301      	movs	r3, #1
 8004004:	653b      	str	r3, [r7, #80]	; 0x50
 8004006:	e016      	b.n	8004036 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400a:	f043 0308 	orr.w	r3, r3, #8
 800400e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3301      	adds	r3, #1
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	2301      	movs	r3, #1
 8004018:	653b      	str	r3, [r7, #80]	; 0x50
 800401a:	e00c      	b.n	8004036 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800401c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401e:	f043 0310 	orr.w	r3, r3, #16
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	3301      	adds	r3, #1
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	2301      	movs	r3, #1
 800402c:	653b      	str	r3, [r7, #80]	; 0x50
 800402e:	e002      	b.n	8004036 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004030:	2300      	movs	r3, #0
 8004032:	653b      	str	r3, [r7, #80]	; 0x50
 8004034:	bf00      	nop
      }
    } while (n);
 8004036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004038:	2b00      	cmp	r3, #0
 800403a:	d19c      	bne.n	8003f76 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff f8eb 	bl	8003220 <_is_digit>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d006      	beq.n	800405e <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff f8fa 	bl	800324e <_atoi>
 800405a:	65b8      	str	r0, [r7, #88]	; 0x58
 800405c:	e01a      	b.n	8004094 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b2a      	cmp	r3, #42	; 0x2a
 8004064:	d116      	bne.n	8004094 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	da07      	bge.n	800408a <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800407a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	425b      	negs	r3, r3
 8004086:	65bb      	str	r3, [r7, #88]	; 0x58
 8004088:	e001      	b.n	800408e <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3301      	adds	r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b2e      	cmp	r3, #46	; 0x2e
 800409e:	d127      	bne.n	80040f0 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80040a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a6:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff f8b4 	bl	8003220 <_is_digit>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff f8c3 	bl	800324e <_atoi>
 80040c8:	6578      	str	r0, [r7, #84]	; 0x54
 80040ca:	e011      	b.n	80040f0 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b2a      	cmp	r3, #42	; 0x2a
 80040d2:	d10d      	bne.n	80040f0 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80040d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040e8:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	3b68      	subs	r3, #104	; 0x68
 80040f6:	2b12      	cmp	r3, #18
 80040f8:	d866      	bhi.n	80041c8 <_vsnprintf+0x2a4>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <_vsnprintf+0x1dc>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004173 	.word	0x08004173
 8004104:	080041c9 	.word	0x080041c9
 8004108:	080041a9 	.word	0x080041a9
 800410c:	080041c9 	.word	0x080041c9
 8004110:	0800414d 	.word	0x0800414d
 8004114:	080041c9 	.word	0x080041c9
 8004118:	080041c9 	.word	0x080041c9
 800411c:	080041c9 	.word	0x080041c9
 8004120:	080041c9 	.word	0x080041c9
 8004124:	080041c9 	.word	0x080041c9
 8004128:	080041c9 	.word	0x080041c9
 800412c:	080041c9 	.word	0x080041c9
 8004130:	08004199 	.word	0x08004199
 8004134:	080041c9 	.word	0x080041c9
 8004138:	080041c9 	.word	0x080041c9
 800413c:	080041c9 	.word	0x080041c9
 8004140:	080041c9 	.word	0x080041c9
 8004144:	080041c9 	.word	0x080041c9
 8004148:	080041b9 	.word	0x080041b9
      case 'l' :
        flags |= FLAGS_LONG;
 800414c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3301      	adds	r3, #1
 8004158:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b6c      	cmp	r3, #108	; 0x6c
 8004160:	d134      	bne.n	80041cc <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004168:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004170:	e02c      	b.n	80041cc <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3301      	adds	r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b68      	cmp	r3, #104	; 0x68
 8004186:	d125      	bne.n	80041d4 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418e:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	3301      	adds	r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004196:	e01d      	b.n	80041d4 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60bb      	str	r3, [r7, #8]
        break;
 80041a6:	e016      	b.n	80041d6 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80041a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60bb      	str	r3, [r7, #8]
        break;
 80041b6:	e00e      	b.n	80041d6 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80041b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
        break;
 80041c6:	e006      	b.n	80041d6 <_vsnprintf+0x2b2>
      default :
        break;
 80041c8:	bf00      	nop
 80041ca:	e004      	b.n	80041d6 <_vsnprintf+0x2b2>
        break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <_vsnprintf+0x2b2>
 80041d0:	080031a5 	.word	0x080031a5
        break;
 80041d4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	3b25      	subs	r3, #37	; 0x25
 80041dc:	2b53      	cmp	r3, #83	; 0x53
 80041de:	f200 835c 	bhi.w	800489a <_vsnprintf+0x976>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <_vsnprintf+0x2c4>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	08004883 	.word	0x08004883
 80041ec:	0800489b 	.word	0x0800489b
 80041f0:	0800489b 	.word	0x0800489b
 80041f4:	0800489b 	.word	0x0800489b
 80041f8:	0800489b 	.word	0x0800489b
 80041fc:	0800489b 	.word	0x0800489b
 8004200:	0800489b 	.word	0x0800489b
 8004204:	0800489b 	.word	0x0800489b
 8004208:	0800489b 	.word	0x0800489b
 800420c:	0800489b 	.word	0x0800489b
 8004210:	0800489b 	.word	0x0800489b
 8004214:	0800489b 	.word	0x0800489b
 8004218:	0800489b 	.word	0x0800489b
 800421c:	0800489b 	.word	0x0800489b
 8004220:	0800489b 	.word	0x0800489b
 8004224:	0800489b 	.word	0x0800489b
 8004228:	0800489b 	.word	0x0800489b
 800422c:	0800489b 	.word	0x0800489b
 8004230:	0800489b 	.word	0x0800489b
 8004234:	0800489b 	.word	0x0800489b
 8004238:	0800489b 	.word	0x0800489b
 800423c:	0800489b 	.word	0x0800489b
 8004240:	0800489b 	.word	0x0800489b
 8004244:	0800489b 	.word	0x0800489b
 8004248:	0800489b 	.word	0x0800489b
 800424c:	0800489b 	.word	0x0800489b
 8004250:	0800489b 	.word	0x0800489b
 8004254:	0800489b 	.word	0x0800489b
 8004258:	0800489b 	.word	0x0800489b
 800425c:	0800489b 	.word	0x0800489b
 8004260:	0800489b 	.word	0x0800489b
 8004264:	0800489b 	.word	0x0800489b
 8004268:	0800463b 	.word	0x0800463b
 800426c:	080045ef 	.word	0x080045ef
 8004270:	0800463b 	.word	0x0800463b
 8004274:	0800489b 	.word	0x0800489b
 8004278:	0800489b 	.word	0x0800489b
 800427c:	0800489b 	.word	0x0800489b
 8004280:	0800489b 	.word	0x0800489b
 8004284:	0800489b 	.word	0x0800489b
 8004288:	0800489b 	.word	0x0800489b
 800428c:	0800489b 	.word	0x0800489b
 8004290:	0800489b 	.word	0x0800489b
 8004294:	0800489b 	.word	0x0800489b
 8004298:	0800489b 	.word	0x0800489b
 800429c:	0800489b 	.word	0x0800489b
 80042a0:	0800489b 	.word	0x0800489b
 80042a4:	0800489b 	.word	0x0800489b
 80042a8:	0800489b 	.word	0x0800489b
 80042ac:	0800489b 	.word	0x0800489b
 80042b0:	0800489b 	.word	0x0800489b
 80042b4:	08004339 	.word	0x08004339
 80042b8:	0800489b 	.word	0x0800489b
 80042bc:	0800489b 	.word	0x0800489b
 80042c0:	0800489b 	.word	0x0800489b
 80042c4:	0800489b 	.word	0x0800489b
 80042c8:	0800489b 	.word	0x0800489b
 80042cc:	0800489b 	.word	0x0800489b
 80042d0:	0800489b 	.word	0x0800489b
 80042d4:	0800489b 	.word	0x0800489b
 80042d8:	0800489b 	.word	0x0800489b
 80042dc:	08004339 	.word	0x08004339
 80042e0:	080046a7 	.word	0x080046a7
 80042e4:	08004339 	.word	0x08004339
 80042e8:	0800463b 	.word	0x0800463b
 80042ec:	080045ef 	.word	0x080045ef
 80042f0:	0800463b 	.word	0x0800463b
 80042f4:	0800489b 	.word	0x0800489b
 80042f8:	08004339 	.word	0x08004339
 80042fc:	0800489b 	.word	0x0800489b
 8004300:	0800489b 	.word	0x0800489b
 8004304:	0800489b 	.word	0x0800489b
 8004308:	0800489b 	.word	0x0800489b
 800430c:	0800489b 	.word	0x0800489b
 8004310:	08004339 	.word	0x08004339
 8004314:	080047e7 	.word	0x080047e7
 8004318:	0800489b 	.word	0x0800489b
 800431c:	0800489b 	.word	0x0800489b
 8004320:	0800471f 	.word	0x0800471f
 8004324:	0800489b 	.word	0x0800489b
 8004328:	08004339 	.word	0x08004339
 800432c:	0800489b 	.word	0x0800489b
 8004330:	0800489b 	.word	0x0800489b
 8004334:	08004339 	.word	0x08004339
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b78      	cmp	r3, #120	; 0x78
 800433e:	d003      	beq.n	8004348 <_vsnprintf+0x424>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b58      	cmp	r3, #88	; 0x58
 8004346:	d102      	bne.n	800434e <_vsnprintf+0x42a>
          base = 16U;
 8004348:	2310      	movs	r3, #16
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
 800434c:	e013      	b.n	8004376 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b6f      	cmp	r3, #111	; 0x6f
 8004354:	d102      	bne.n	800435c <_vsnprintf+0x438>
          base =  8U;
 8004356:	2308      	movs	r3, #8
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
 800435a:	e00c      	b.n	8004376 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b62      	cmp	r3, #98	; 0x62
 8004362:	d102      	bne.n	800436a <_vsnprintf+0x446>
          base =  2U;
 8004364:	2302      	movs	r3, #2
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
 8004368:	e005      	b.n	8004376 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800436a:	230a      	movs	r3, #10
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800436e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b58      	cmp	r3, #88	; 0x58
 800437c:	d103      	bne.n	8004386 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800437e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b69      	cmp	r3, #105	; 0x69
 800438c:	d007      	beq.n	800439e <_vsnprintf+0x47a>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d003      	beq.n	800439e <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004398:	f023 030c 	bic.w	r3, r3, #12
 800439c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800439e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80043a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b69      	cmp	r3, #105	; 0x69
 80043b6:	d004      	beq.n	80043c2 <_vsnprintf+0x49e>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	f040 8098 	bne.w	80044f2 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80043c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d031      	beq.n	8004430 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80043cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d0:	3307      	adds	r3, #7
 80043d2:	f023 0307 	bic.w	r3, r3, #7
 80043d6:	f103 0208 	add.w	r2, r3, #8
 80043da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80043e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da06      	bge.n	80043fc <_vsnprintf+0x4d8>
 80043ee:	2100      	movs	r1, #0
 80043f0:	f1d2 0800 	rsbs	r8, r2, #0
 80043f4:	eb61 0903 	sbc.w	r9, r1, r3
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	0fc9      	lsrs	r1, r1, #31
 8004400:	b2c9      	uxtb	r1, r1
 8004402:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004404:	2400      	movs	r4, #0
 8004406:	4682      	mov	sl, r0
 8004408:	46a3      	mov	fp, r4
 800440a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800440c:	9008      	str	r0, [sp, #32]
 800440e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004410:	9007      	str	r0, [sp, #28]
 8004412:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004414:	9006      	str	r0, [sp, #24]
 8004416:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800441a:	9102      	str	r1, [sp, #8]
 800441c:	e9cd 2300 	strd	r2, r3, [sp]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004424:	6939      	ldr	r1, [r7, #16]
 8004426:	6978      	ldr	r0, [r7, #20]
 8004428:	f7ff f8c7 	bl	80035ba <_ntoa_long_long>
 800442c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800442e:	e0da      	b.n	80045e6 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d020      	beq.n	800447c <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800443a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	bfb8      	it	lt
 800444e:	425b      	neglt	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	0fdb      	lsrs	r3, r3, #31
 8004456:	b2db      	uxtb	r3, r3
 8004458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800445a:	9205      	str	r2, [sp, #20]
 800445c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445e:	9204      	str	r2, [sp, #16]
 8004460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004462:	9203      	str	r2, [sp, #12]
 8004464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	9100      	str	r1, [sp, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004470:	6939      	ldr	r1, [r7, #16]
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f7ff f83b 	bl	80034ee <_ntoa_long>
 8004478:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800447a:	e0b4      	b.n	80045e6 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800447c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <_vsnprintf+0x572>
 8004486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e012      	b.n	80044bc <_vsnprintf+0x598>
 8004496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <_vsnprintf+0x58c>
 80044a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a4:	1d1a      	adds	r2, r3, #4
 80044a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	e005      	b.n	80044bc <_vsnprintf+0x598>
 80044b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bfb8      	it	lt
 80044c4:	425b      	neglt	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	0fdb      	lsrs	r3, r3, #31
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044d0:	9205      	str	r2, [sp, #20]
 80044d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d4:	9204      	str	r2, [sp, #16]
 80044d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044d8:	9203      	str	r2, [sp, #12]
 80044da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044dc:	9202      	str	r2, [sp, #8]
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	9100      	str	r1, [sp, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e6:	6939      	ldr	r1, [r7, #16]
 80044e8:	6978      	ldr	r0, [r7, #20]
 80044ea:	f7ff f800 	bl	80034ee <_ntoa_long>
 80044ee:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80044f0:	e079      	b.n	80045e6 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80044f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80044fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004500:	3307      	adds	r3, #7
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	f103 0208 	add.w	r2, r3, #8
 800450a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004514:	2000      	movs	r0, #0
 8004516:	460d      	mov	r5, r1
 8004518:	4606      	mov	r6, r0
 800451a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800451c:	9108      	str	r1, [sp, #32]
 800451e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004520:	9107      	str	r1, [sp, #28]
 8004522:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004524:	9106      	str	r1, [sp, #24]
 8004526:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800452a:	2100      	movs	r1, #0
 800452c:	9102      	str	r1, [sp, #8]
 800452e:	e9cd 2300 	strd	r2, r3, [sp]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004536:	6939      	ldr	r1, [r7, #16]
 8004538:	6978      	ldr	r0, [r7, #20]
 800453a:	f7ff f83e 	bl	80035ba <_ntoa_long_long>
 800453e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004540:	e051      	b.n	80045e6 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d018      	beq.n	800457e <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800454c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004550:	1d1a      	adds	r2, r3, #4
 8004552:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800455a:	9205      	str	r2, [sp, #20]
 800455c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800455e:	9204      	str	r2, [sp, #16]
 8004560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004562:	9203      	str	r2, [sp, #12]
 8004564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004566:	9202      	str	r2, [sp, #8]
 8004568:	2200      	movs	r2, #0
 800456a:	9201      	str	r2, [sp, #4]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004572:	6939      	ldr	r1, [r7, #16]
 8004574:	6978      	ldr	r0, [r7, #20]
 8004576:	f7fe ffba 	bl	80034ee <_ntoa_long>
 800457a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800457c:	e033      	b.n	80045e6 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <_vsnprintf+0x674>
 8004588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e012      	b.n	80045be <_vsnprintf+0x69a>
 8004598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <_vsnprintf+0x68e>
 80045a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a6:	1d1a      	adds	r2, r3, #4
 80045a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	e005      	b.n	80045be <_vsnprintf+0x69a>
 80045b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80045c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ca:	9303      	str	r3, [sp, #12]
 80045cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ce:	9302      	str	r3, [sp, #8]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045dc:	6939      	ldr	r1, [r7, #16]
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f7fe ff85 	bl	80034ee <_ntoa_long>
 80045e4:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
        break;
 80045ec:	e162      	b.n	80048b4 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b46      	cmp	r3, #70	; 0x46
 80045f4:	d103      	bne.n	80045fe <_vsnprintf+0x6da>
 80045f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f8:	f043 0320 	orr.w	r3, r3, #32
 80045fc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80045fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004602:	3307      	adds	r3, #7
 8004604:	f023 0307 	bic.w	r3, r3, #7
 8004608:	f103 0208 	add.w	r2, r3, #8
 800460c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004610:	ed93 7b00 	vldr	d7, [r3]
 8004614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004616:	9302      	str	r3, [sp, #8]
 8004618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	eeb0 0b47 	vmov.f64	d0, d7
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004628:	6939      	ldr	r1, [r7, #16]
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f7ff f834 	bl	8003698 <_ftoa>
 8004630:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3301      	adds	r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
        break;
 8004638:	e13c      	b.n	80048b4 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b67      	cmp	r3, #103	; 0x67
 8004640:	d003      	beq.n	800464a <_vsnprintf+0x726>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b47      	cmp	r3, #71	; 0x47
 8004648:	d103      	bne.n	8004652 <_vsnprintf+0x72e>
 800464a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004650:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b45      	cmp	r3, #69	; 0x45
 8004658:	d003      	beq.n	8004662 <_vsnprintf+0x73e>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b47      	cmp	r3, #71	; 0x47
 8004660:	d103      	bne.n	800466a <_vsnprintf+0x746>
 8004662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004664:	f043 0320 	orr.w	r3, r3, #32
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800466a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800466e:	3307      	adds	r3, #7
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	f103 0208 	add.w	r2, r3, #8
 8004678:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800467c:	ed93 7b00 	vldr	d7, [r3]
 8004680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	eeb0 0b47 	vmov.f64	d0, d7
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004694:	6939      	ldr	r1, [r7, #16]
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f7ff fa46 	bl	8003b28 <_etoa>
 800469c:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
        break;
 80046a4:	e106      	b.n	80048b4 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80046a6:	2301      	movs	r3, #1
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80046aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10e      	bne.n	80046d2 <_vsnprintf+0x7ae>
          while (l++ < width) {
 80046b4:	e007      	b.n	80046c6 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 80046b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b8:	1c53      	adds	r3, r2, #1
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	697c      	ldr	r4, [r7, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6939      	ldr	r1, [r7, #16]
 80046c2:	2020      	movs	r0, #32
 80046c4:	47a0      	blx	r4
          while (l++ < width) {
 80046c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	647a      	str	r2, [r7, #68]	; 0x44
 80046cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d8f1      	bhi.n	80046b6 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80046d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b2d8      	uxtb	r0, r3
 80046e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046e2:	1c53      	adds	r3, r2, #1
 80046e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e6:	697c      	ldr	r4, [r7, #20]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6939      	ldr	r1, [r7, #16]
 80046ec:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80046ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00e      	beq.n	8004716 <_vsnprintf+0x7f2>
          while (l++ < width) {
 80046f8:	e007      	b.n	800470a <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 80046fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046fc:	1c53      	adds	r3, r2, #1
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004700:	697c      	ldr	r4, [r7, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6939      	ldr	r1, [r7, #16]
 8004706:	2020      	movs	r0, #32
 8004708:	47a0      	blx	r4
          while (l++ < width) {
 800470a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	647a      	str	r2, [r7, #68]	; 0x44
 8004710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004712:	429a      	cmp	r2, r3
 8004714:	d8f1      	bhi.n	80046fa <_vsnprintf+0x7d6>
          }
        }
        format++;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
        break;
 800471c:	e0ca      	b.n	80048b4 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800471e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800472c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <_vsnprintf+0x812>
 8004732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004734:	e001      	b.n	800473a <_vsnprintf+0x816>
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	4619      	mov	r1, r3
 800473c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800473e:	f7fe fd52 	bl	80031e6 <_strnlen_s>
 8004742:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 800474e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004752:	4293      	cmp	r3, r2
 8004754:	bf28      	it	cs
 8004756:	4613      	movcs	r3, r2
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11a      	bne.n	800479a <_vsnprintf+0x876>
          while (l++ < width) {
 8004764:	e007      	b.n	8004776 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8004766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004768:	1c53      	adds	r3, r2, #1
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476c:	697c      	ldr	r4, [r7, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6939      	ldr	r1, [r7, #16]
 8004772:	2020      	movs	r0, #32
 8004774:	47a0      	blx	r4
          while (l++ < width) {
 8004776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800477c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477e:	429a      	cmp	r2, r3
 8004780:	d8f1      	bhi.n	8004766 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004782:	e00a      	b.n	800479a <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8004784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	643a      	str	r2, [r7, #64]	; 0x40
 800478a:	7818      	ldrb	r0, [r3, #0]
 800478c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800478e:	1c53      	adds	r3, r2, #1
 8004790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004792:	697c      	ldr	r4, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6939      	ldr	r1, [r7, #16]
 8004798:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <_vsnprintf+0x892>
 80047a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0eb      	beq.n	8004784 <_vsnprintf+0x860>
 80047ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ae:	1e5a      	subs	r2, r3, #1
 80047b0:	657a      	str	r2, [r7, #84]	; 0x54
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e6      	bne.n	8004784 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80047b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <_vsnprintf+0x8ba>
          while (l++ < width) {
 80047c0:	e007      	b.n	80047d2 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 80047c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047c4:	1c53      	adds	r3, r2, #1
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c8:	697c      	ldr	r4, [r7, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6939      	ldr	r1, [r7, #16]
 80047ce:	2020      	movs	r0, #32
 80047d0:	47a0      	blx	r4
          while (l++ < width) {
 80047d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047da:	429a      	cmp	r2, r3
 80047dc:	d8f1      	bhi.n	80047c2 <_vsnprintf+0x89e>
          }
        }
        format++;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
        break;
 80047e4:	e066      	b.n	80048b4 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80047e6:	2308      	movs	r3, #8
 80047e8:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80047ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ec:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80047f0:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80047f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d023      	beq.n	8004848 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	603a      	str	r2, [r7, #0]
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004816:	9308      	str	r3, [sp, #32]
 8004818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800481a:	9307      	str	r3, [sp, #28]
 800481c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800481e:	9306      	str	r3, [sp, #24]
 8004820:	f04f 0210 	mov.w	r2, #16
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800482c:	2300      	movs	r3, #0
 800482e:	9302      	str	r3, [sp, #8]
 8004830:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004834:	e9cd 3400 	strd	r3, r4, [sp]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800483c:	6939      	ldr	r1, [r7, #16]
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f7fe febb 	bl	80035ba <_ntoa_long_long>
 8004844:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004846:	e018      	b.n	800487a <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484c:	1d1a      	adds	r2, r3, #4
 800484e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004858:	9305      	str	r3, [sp, #20]
 800485a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004860:	9303      	str	r3, [sp, #12]
 8004862:	2310      	movs	r3, #16
 8004864:	9302      	str	r3, [sp, #8]
 8004866:	2300      	movs	r3, #0
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	9200      	str	r2, [sp, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	6978      	ldr	r0, [r7, #20]
 8004874:	f7fe fe3b 	bl	80034ee <_ntoa_long>
 8004878:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3301      	adds	r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
        break;
 8004880:	e018      	b.n	80048b4 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004884:	1c53      	adds	r3, r2, #1
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	697c      	ldr	r4, [r7, #20]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6939      	ldr	r1, [r7, #16]
 800488e:	2025      	movs	r0, #37	; 0x25
 8004890:	47a0      	blx	r4
        format++;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3301      	adds	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
        break;
 8004898:	e00c      	b.n	80048b4 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	7818      	ldrb	r0, [r3, #0]
 800489e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a0:	1c53      	adds	r3, r2, #1
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a4:	697c      	ldr	r4, [r7, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6939      	ldr	r1, [r7, #16]
 80048aa:	47a0      	blx	r4
        format++;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60bb      	str	r3, [r7, #8]
        break;
 80048b2:	bf00      	nop
  while (*format)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f ab45 	bne.w	8003f48 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80048be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <_vsnprintf+0x9a8>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	e000      	b.n	80048ce <_vsnprintf+0x9aa>
 80048cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ce:	697c      	ldr	r4, [r7, #20]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	2000      	movs	r0, #0
 80048d6:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80048d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3764      	adds	r7, #100	; 0x64
 80048de:	46bd      	mov	sp, r7
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048e4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80048e4:	b40f      	push	{r0, r1, r2, r3}
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80048f2:	1d39      	adds	r1, r7, #4
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	4806      	ldr	r0, [pc, #24]	; (8004918 <printf_+0x34>)
 8004900:	f7ff fb10 	bl	8003f24 <_vsnprintf>
 8004904:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004906:	68fb      	ldr	r3, [r7, #12]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004912:	b004      	add	sp, #16
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	080031c1 	.word	0x080031c1

0800491c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 800491c:	b40e      	push	{r1, r2, r3}
 800491e:	b580      	push	{r7, lr}
 8004920:	b087      	sub	sp, #28
 8004922:	af02      	add	r7, sp, #8
 8004924:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004926:	f107 0320 	add.w	r3, r7, #32
 800492a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4805      	ldr	r0, [pc, #20]	; (8004950 <sprintf_+0x34>)
 800493a:	f7ff faf3 	bl	8003f24 <_vsnprintf>
 800493e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800494c:	b003      	add	sp, #12
 800494e:	4770      	bx	lr
 8004950:	08003177 	.word	0x08003177

08004954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_MspInit+0x4c>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <HAL_MspInit+0x4c>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_MspInit+0x4c>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_MspInit+0x4c>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <HAL_MspInit+0x4c>)
 8004978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800497c:	6453      	str	r3, [r2, #68]	; 0x44
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_MspInit+0x4c>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800498a:	2200      	movs	r2, #0
 800498c:	210f      	movs	r1, #15
 800498e:	f06f 0001 	mvn.w	r0, #1
 8004992:	f000 fcc3 	bl	800531c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	; 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	202d      	movs	r0, #45	; 0x2d
 80049ba:	f000 fcaf 	bl	800531c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80049be:	202d      	movs	r0, #45	; 0x2d
 80049c0:	f000 fcc8 	bl	8005354 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80049c4:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_InitTick+0xa0>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_InitTick+0xa0>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	6413      	str	r3, [r2, #64]	; 0x40
 80049d0:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <HAL_InitTick+0xa0>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049dc:	f107 0210 	add.w	r2, r7, #16
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f002 fa2c 	bl	8006e44 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80049ec:	f002 fa02 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 80049f0:	4603      	mov	r3, r0
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HAL_InitTick+0xa4>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9b      	lsrs	r3, r3, #18
 8004a00:	3b01      	subs	r3, #1
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004a04:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a06:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <HAL_InitTick+0xac>)
 8004a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a10:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004a12:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004a24:	4809      	ldr	r0, [pc, #36]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a26:	f002 fe67 	bl	80076f8 <HAL_TIM_Base_Init>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004a30:	4806      	ldr	r0, [pc, #24]	; (8004a4c <HAL_InitTick+0xa8>)
 8004a32:	f002 feb9 	bl	80077a8 <HAL_TIM_Base_Start_IT>
 8004a36:	4603      	mov	r3, r0
 8004a38:	e000      	b.n	8004a3c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	431bde83 	.word	0x431bde83
 8004a4c:	200005c4 	.word	0x200005c4
 8004a50:	40002000 	.word	0x40002000

08004a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a58:	e7fe      	b.n	8004a58 <NMI_Handler+0x4>

08004a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a5e:	e7fe      	b.n	8004a5e <HardFault_Handler+0x4>

08004a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a64:	e7fe      	b.n	8004a64 <MemManage_Handler+0x4>

08004a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a66:	b480      	push	{r7}
 8004a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a6a:	e7fe      	b.n	8004a6a <BusFault_Handler+0x4>

08004a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a70:	e7fe      	b.n	8004a70 <UsageFault_Handler+0x4>

08004a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_1_Pin);
 8004a84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a88:	f000 fee4 	bl	8005854 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_1_Pin);
 8004a8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a90:	f000 fee0 	bl	8005854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM3_IRQHandler+0x10>)
 8004a9e:	f003 f905 	bl	8007cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000065c 	.word	0x2000065c

08004aac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <USART3_IRQHandler+0x10>)
 8004ab2:	f004 fa91 	bl	8008fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000740 	.word	0x20000740

08004ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_2_Pin);
 8004ac4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ac8:	f000 fec4 	bl	8005854 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_2_Pin);
 8004acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ad0:	f000 fec0 	bl	8005854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004ade:	f003 f8e5 	bl	8007cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200005c4 	.word	0x200005c4

08004aec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <TIM5_IRQHandler+0x10>)
 8004af2:	f003 f8db 	bl	8007cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200006f4 	.word	0x200006f4

08004b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <SystemInit+0x20>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <SystemInit+0x20>)
 8004b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b38:	f107 031c 	add.w	r3, r7, #28
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b44:	463b      	mov	r3, r7
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	611a      	str	r2, [r3, #16]
 8004b52:	615a      	str	r2, [r3, #20]
 8004b54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b56:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b60:	2247      	movs	r2, #71	; 0x47
 8004b62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004b6a:	4b29      	ldr	r3, [pc, #164]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b72:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b7e:	4824      	ldr	r0, [pc, #144]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b80:	f002 fdba 	bl	80076f8 <HAL_TIM_Base_Init>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004b8a:	f7fe faef 	bl	800316c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b98:	4619      	mov	r1, r3
 8004b9a:	481d      	ldr	r0, [pc, #116]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004b9c:	f003 faba 	bl	8008114 <HAL_TIM_ConfigClockSource>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004ba6:	f7fe fae1 	bl	800316c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004baa:	4819      	ldr	r0, [pc, #100]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004bac:	f002 fea3 	bl	80078f6 <HAL_TIM_PWM_Init>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004bb6:	f7fe fad9 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bc2:	f107 031c 	add.w	r3, r7, #28
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4811      	ldr	r0, [pc, #68]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004bca:	f004 f829 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004bd4:	f7fe faca 	bl	800316c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bd8:	2360      	movs	r3, #96	; 0x60
 8004bda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8004bdc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004be0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bea:	463b      	mov	r3, r7
 8004bec:	2200      	movs	r2, #0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4807      	ldr	r0, [pc, #28]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004bf2:	f003 f97b 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004bfc:	f7fe fab6 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c00:	4803      	ldr	r0, [pc, #12]	; (8004c10 <MX_TIM2_Init+0xec>)
 8004c02:	f000 f987 	bl	8004f14 <HAL_TIM_MspPostInit>

}
 8004c06:	bf00      	nop
 8004c08:	3738      	adds	r7, #56	; 0x38
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000610 	.word	0x20000610

08004c14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004c1a:	f107 030c 	add.w	r3, r7, #12
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	609a      	str	r2, [r3, #8]
 8004c26:	60da      	str	r2, [r3, #12]
 8004c28:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <MX_TIM3_Init+0x9c>)
 8004c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c4c:	4b17      	ldr	r3, [pc, #92]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c58:	4814      	ldr	r0, [pc, #80]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c5a:	f002 fd4d 	bl	80076f8 <HAL_TIM_Base_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004c64:	f7fe fa82 	bl	800316c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004c68:	2307      	movs	r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	4619      	mov	r1, r3
 8004c76:	480d      	ldr	r0, [pc, #52]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c78:	f003 fb16 	bl	80082a8 <HAL_TIM_SlaveConfigSynchro>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8004c82:	f7fe fa73 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4619      	mov	r1, r3
 8004c92:	4806      	ldr	r0, [pc, #24]	; (8004cac <MX_TIM3_Init+0x98>)
 8004c94:	f003 ffc4 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8004c9e:	f7fe fa65 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ca2:	bf00      	nop
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	2000065c 	.word	0x2000065c
 8004cb0:	40000400 	.word	0x40000400

08004cb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	611a      	str	r2, [r3, #16]
 8004ce2:	615a      	str	r2, [r3, #20]
 8004ce4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ce6:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004ce8:	4a2d      	ldr	r2, [pc, #180]	; (8004da0 <MX_TIM4_Init+0xec>)
 8004cea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004cee:	2247      	movs	r2, #71	; 0x47
 8004cf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004cf8:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d0c:	4823      	ldr	r0, [pc, #140]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d0e:	f002 fcf3 	bl	80076f8 <HAL_TIM_Base_Init>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004d18:	f7fe fa28 	bl	800316c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d26:	4619      	mov	r1, r3
 8004d28:	481c      	ldr	r0, [pc, #112]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d2a:	f003 f9f3 	bl	8008114 <HAL_TIM_ConfigClockSource>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004d34:	f7fe fa1a 	bl	800316c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004d38:	4818      	ldr	r0, [pc, #96]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d3a:	f002 fddc 	bl	80078f6 <HAL_TIM_PWM_Init>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004d44:	f7fe fa12 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d48:	2320      	movs	r3, #32
 8004d4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d50:	f107 031c 	add.w	r3, r7, #28
 8004d54:	4619      	mov	r1, r3
 8004d56:	4811      	ldr	r0, [pc, #68]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d58:	f003 ff62 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004d62:	f7fe fa03 	bl	800316c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d66:	2360      	movs	r3, #96	; 0x60
 8004d68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8004d6a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d78:	463b      	mov	r3, r7
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4807      	ldr	r0, [pc, #28]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d80:	f003 f8b4 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8004d8a:	f7fe f9ef 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004d8e:	4803      	ldr	r0, [pc, #12]	; (8004d9c <MX_TIM4_Init+0xe8>)
 8004d90:	f000 f8c0 	bl	8004f14 <HAL_TIM_MspPostInit>

}
 8004d94:	bf00      	nop
 8004d96:	3738      	adds	r7, #56	; 0x38
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200006a8 	.word	0x200006a8
 8004da0:	40000800 	.word	0x40000800

08004da4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	609a      	str	r2, [r3, #8]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dba:	463b      	mov	r3, r7
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <MX_TIM5_Init+0x9c>)
 8004dc8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ddc:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de2:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004de8:	4814      	ldr	r0, [pc, #80]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004dea:	f002 fc85 	bl	80076f8 <HAL_TIM_Base_Init>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004df4:	f7fe f9ba 	bl	800316c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004df8:	2307      	movs	r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	4619      	mov	r1, r3
 8004e06:	480d      	ldr	r0, [pc, #52]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004e08:	f003 fa4e 	bl	80082a8 <HAL_TIM_SlaveConfigSynchro>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8004e12:	f7fe f9ab 	bl	800316c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e1e:	463b      	mov	r3, r7
 8004e20:	4619      	mov	r1, r3
 8004e22:	4806      	ldr	r0, [pc, #24]	; (8004e3c <MX_TIM5_Init+0x98>)
 8004e24:	f003 fefc 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8004e2e:	f7fe f99d 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e32:	bf00      	nop
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200006f4 	.word	0x200006f4
 8004e40:	40000c00 	.word	0x40000c00

08004e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e54:	d10c      	bne.n	8004e70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e56:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004e6e:	e044      	b.n	8004efa <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <HAL_TIM_Base_MspInit+0xc4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d114      	bne.n	8004ea4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e7a:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2105      	movs	r1, #5
 8004e96:	201d      	movs	r0, #29
 8004e98:	f000 fa40 	bl	800531c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e9c:	201d      	movs	r0, #29
 8004e9e:	f000 fa59 	bl	8005354 <HAL_NVIC_EnableIRQ>
}
 8004ea2:	e02a      	b.n	8004efa <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_TIM_Base_MspInit+0xc8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10c      	bne.n	8004ec8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004eae:	4b15      	ldr	r3, [pc, #84]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
}
 8004ec6:	e018      	b.n	8004efa <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_TIM_Base_MspInit+0xcc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d113      	bne.n	8004efa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_TIM_Base_MspInit+0xc0>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8004eea:	2200      	movs	r2, #0
 8004eec:	2105      	movs	r1, #5
 8004eee:	2032      	movs	r0, #50	; 0x32
 8004ef0:	f000 fa14 	bl	800531c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ef4:	2032      	movs	r0, #50	; 0x32
 8004ef6:	f000 fa2d 	bl	8005354 <HAL_NVIC_EnableIRQ>
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00

08004f14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d11d      	bne.n	8004f72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_TIM_MspPostInit+0xac>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <HAL_TIM_MspPostInit+0xac>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b1f      	ldr	r3, [pc, #124]	; (8004fc0 <HAL_TIM_MspPostInit+0xac>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_SYRINGE_Pin;
 8004f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f54:	2302      	movs	r3, #2
 8004f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SYRINGE_GPIO_Port, &GPIO_InitStruct);
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4816      	ldr	r0, [pc, #88]	; (8004fc4 <HAL_TIM_MspPostInit+0xb0>)
 8004f6c:	f000 fa92 	bl	8005494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f70:	e021      	b.n	8004fb6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <HAL_TIM_MspPostInit+0xb4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d11c      	bne.n	8004fb6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f7c:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <HAL_TIM_MspPostInit+0xac>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	4a0f      	ldr	r2, [pc, #60]	; (8004fc0 <HAL_TIM_MspPostInit+0xac>)
 8004f82:	f043 0308 	orr.w	r3, r3, #8
 8004f86:	6313      	str	r3, [r2, #48]	; 0x30
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <HAL_TIM_MspPostInit+0xac>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_NEEDLE_Pin;
 8004f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_NEEDLE_GPIO_Port, &GPIO_InitStruct);
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4806      	ldr	r0, [pc, #24]	; (8004fcc <HAL_TIM_MspPostInit+0xb8>)
 8004fb2:	f000 fa6f 	bl	8005494 <HAL_GPIO_Init>
}
 8004fb6:	bf00      	nop
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40020000 	.word	0x40020000
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40020c00 	.word	0x40020c00

08004fd0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004fd6:	4a15      	ldr	r2, [pc, #84]	; (800502c <MX_USART3_UART_Init+0x5c>)
 8004fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fee:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004ff6:	220c      	movs	r2, #12
 8004ff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8005002:	2200      	movs	r2, #0
 8005004:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8005008:	2200      	movs	r2, #0
 800500a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <MX_USART3_UART_Init+0x58>)
 800500e:	2200      	movs	r2, #0
 8005010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005012:	4805      	ldr	r0, [pc, #20]	; (8005028 <MX_USART3_UART_Init+0x58>)
 8005014:	f003 feb0 	bl	8008d78 <HAL_UART_Init>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800501e:	f7fe f8a5 	bl	800316c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000740 	.word	0x20000740
 800502c:	40004800 	.word	0x40004800

08005030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ae      	sub	sp, #184	; 0xb8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	2290      	movs	r2, #144	; 0x90
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f009 fbb1 	bl	800e7b8 <memset>
  if(uartHandle->Instance==USART3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <HAL_UART_MspInit+0xc4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d144      	bne.n	80050ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005064:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005066:	2300      	movs	r3, #0
 8005068:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	4618      	mov	r0, r3
 8005070:	f001 ff1a 	bl	8006ea8 <HAL_RCCEx_PeriphCLKConfig>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800507a:	f7fe f877 	bl	800316c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <HAL_UART_MspInit+0xc8>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_UART_MspInit+0xc8>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_UART_MspInit+0xc8>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <HAL_UART_MspInit+0xc8>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <HAL_UART_MspInit+0xc8>)
 800509c:	f043 0308 	orr.w	r3, r3, #8
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <HAL_UART_MspInit+0xc8>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80050ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b6:	2302      	movs	r3, #2
 80050b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c2:	2303      	movs	r3, #3
 80050c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80050c8:	2307      	movs	r3, #7
 80050ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4809      	ldr	r0, [pc, #36]	; (80050fc <HAL_UART_MspInit+0xcc>)
 80050d6:	f000 f9dd 	bl	8005494 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80050da:	2200      	movs	r2, #0
 80050dc:	2105      	movs	r1, #5
 80050de:	2027      	movs	r0, #39	; 0x27
 80050e0:	f000 f91c 	bl	800531c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80050e4:	2027      	movs	r0, #39	; 0x27
 80050e6:	f000 f935 	bl	8005354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80050ea:	bf00      	nop
 80050ec:	37b8      	adds	r7, #184	; 0xb8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40004800 	.word	0x40004800
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40020c00 	.word	0x40020c00

08005100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005104:	480d      	ldr	r0, [pc, #52]	; (800513c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005106:	490e      	ldr	r1, [pc, #56]	; (8005140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005108:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800510a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800510c:	e002      	b.n	8005114 <LoopCopyDataInit>

0800510e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800510e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005112:	3304      	adds	r3, #4

08005114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005118:	d3f9      	bcc.n	800510e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800511a:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800511c:	4c0b      	ldr	r4, [pc, #44]	; (800514c <LoopFillZerobss+0x26>)
  movs r3, #0
 800511e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005120:	e001      	b.n	8005126 <LoopFillZerobss>

08005122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005124:	3204      	adds	r2, #4

08005126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005128:	d3fb      	bcc.n	8005122 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800512a:	f7ff fce9 	bl	8004b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800512e:	f009 fb0f 	bl	800e750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005132:	f7fd ff81 	bl	8003038 <main>
  bx  lr    
 8005136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005138:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800513c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005140:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005144:	0800f5c4 	.word	0x0800f5c4
  ldr r2, =_sbss
 8005148:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800514c:	20009e90 	.word	0x20009e90

08005150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005150:	e7fe      	b.n	8005150 <ADC_IRQHandler>

08005152 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005156:	2003      	movs	r0, #3
 8005158:	f000 f8d5 	bl	8005306 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800515c:	200f      	movs	r0, #15
 800515e:	f7ff fc21 	bl	80049a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005162:	f7ff fbf7 	bl	8004954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <HAL_IncTick+0x20>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_IncTick+0x24>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4413      	add	r3, r2
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_IncTick+0x24>)
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	bf00      	nop
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2000000c 	.word	0x2000000c
 8005190:	200007c4 	.word	0x200007c4

08005194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return uwTick;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_GetTick+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	200007c4 	.word	0x200007c4

080051ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <__NVIC_SetPriorityGrouping+0x40>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051c8:	4013      	ands	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <__NVIC_SetPriorityGrouping+0x44>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <__NVIC_SetPriorityGrouping+0x40>)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	60d3      	str	r3, [r2, #12]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	e000ed00 	.word	0xe000ed00
 80051f0:	05fa0000 	.word	0x05fa0000

080051f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__NVIC_GetPriorityGrouping+0x18>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	f003 0307 	and.w	r3, r3, #7
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	2b00      	cmp	r3, #0
 8005220:	db0b      	blt.n	800523a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	f003 021f 	and.w	r2, r3, #31
 8005228:	4907      	ldr	r1, [pc, #28]	; (8005248 <__NVIC_EnableIRQ+0x38>)
 800522a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2001      	movs	r0, #1
 8005232:	fa00 f202 	lsl.w	r2, r0, r2
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000e100 	.word	0xe000e100

0800524c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	6039      	str	r1, [r7, #0]
 8005256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db0a      	blt.n	8005276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	490c      	ldr	r1, [pc, #48]	; (8005298 <__NVIC_SetPriority+0x4c>)
 8005266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526a:	0112      	lsls	r2, r2, #4
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	440b      	add	r3, r1
 8005270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005274:	e00a      	b.n	800528c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <__NVIC_SetPriority+0x50>)
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	3b04      	subs	r3, #4
 8005284:	0112      	lsls	r2, r2, #4
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	440b      	add	r3, r1
 800528a:	761a      	strb	r2, [r3, #24]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000e100 	.word	0xe000e100
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f1c3 0307 	rsb	r3, r3, #7
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	bf28      	it	cs
 80052be:	2304      	movcs	r3, #4
 80052c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d902      	bls.n	80052d0 <NVIC_EncodePriority+0x30>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3b03      	subs	r3, #3
 80052ce:	e000      	b.n	80052d2 <NVIC_EncodePriority+0x32>
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d4:	f04f 32ff 	mov.w	r2, #4294967295
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	401a      	ands	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e8:	f04f 31ff 	mov.w	r1, #4294967295
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	43d9      	mvns	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f8:	4313      	orrs	r3, r2
         );
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff4c 	bl	80051ac <__NVIC_SetPriorityGrouping>
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800532e:	f7ff ff61 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 8005332:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f7ff ffb1 	bl	80052a0 <NVIC_EncodePriority>
 800533e:	4602      	mov	r2, r0
 8005340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ff80 	bl	800524c <__NVIC_SetPriority>
}
 800534c:	bf00      	nop
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800535e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ff54 	bl	8005210 <__NVIC_EnableIRQ>
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800537e:	f7ff ff09 	bl	8005194 <HAL_GetTick>
 8005382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d008      	beq.n	80053a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e052      	b.n	8005448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0216 	bic.w	r2, r2, #22
 80053b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <HAL_DMA_Abort+0x62>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0208 	bic.w	r2, r2, #8
 80053e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f2:	e013      	b.n	800541c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053f4:	f7ff fece 	bl	8005194 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d90c      	bls.n	800541c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2203      	movs	r2, #3
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e015      	b.n	8005448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e4      	bne.n	80053f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	223f      	movs	r2, #63	; 0x3f
 8005430:	409a      	lsls	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d004      	beq.n	800546e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2280      	movs	r2, #128	; 0x80
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e00c      	b.n	8005488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2205      	movs	r2, #5
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	; 0x24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e175      	b.n	80057a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80054b4:	2201      	movs	r2, #1
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4013      	ands	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	f040 8164 	bne.w	800579a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d005      	beq.n	80054ea <HAL_GPIO_Init+0x56>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d130      	bne.n	800554c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005520:	2201      	movs	r2, #1
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 0201 	and.w	r2, r3, #1
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	2b03      	cmp	r3, #3
 8005556:	d017      	beq.n	8005588 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	2203      	movs	r2, #3
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d123      	bne.n	80055dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	08da      	lsrs	r2, r3, #3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3208      	adds	r2, #8
 800559c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	220f      	movs	r2, #15
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	08da      	lsrs	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3208      	adds	r2, #8
 80055d6:	69b9      	ldr	r1, [r7, #24]
 80055d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	2203      	movs	r2, #3
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	43db      	mvns	r3, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4013      	ands	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 0203 	and.w	r2, r3, #3
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80be 	beq.w	800579a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800561e:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_GPIO_Init+0x324>)
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	4a65      	ldr	r2, [pc, #404]	; (80057b8 <HAL_GPIO_Init+0x324>)
 8005624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005628:	6453      	str	r3, [r2, #68]	; 0x44
 800562a:	4b63      	ldr	r3, [pc, #396]	; (80057b8 <HAL_GPIO_Init+0x324>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005636:	4a61      	ldr	r2, [pc, #388]	; (80057bc <HAL_GPIO_Init+0x328>)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	3302      	adds	r3, #2
 800563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	220f      	movs	r2, #15
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a58      	ldr	r2, [pc, #352]	; (80057c0 <HAL_GPIO_Init+0x32c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d037      	beq.n	80056d2 <HAL_GPIO_Init+0x23e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a57      	ldr	r2, [pc, #348]	; (80057c4 <HAL_GPIO_Init+0x330>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_GPIO_Init+0x23a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a56      	ldr	r2, [pc, #344]	; (80057c8 <HAL_GPIO_Init+0x334>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d02b      	beq.n	80056ca <HAL_GPIO_Init+0x236>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a55      	ldr	r2, [pc, #340]	; (80057cc <HAL_GPIO_Init+0x338>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d025      	beq.n	80056c6 <HAL_GPIO_Init+0x232>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a54      	ldr	r2, [pc, #336]	; (80057d0 <HAL_GPIO_Init+0x33c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01f      	beq.n	80056c2 <HAL_GPIO_Init+0x22e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a53      	ldr	r2, [pc, #332]	; (80057d4 <HAL_GPIO_Init+0x340>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d019      	beq.n	80056be <HAL_GPIO_Init+0x22a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a52      	ldr	r2, [pc, #328]	; (80057d8 <HAL_GPIO_Init+0x344>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_GPIO_Init+0x226>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a51      	ldr	r2, [pc, #324]	; (80057dc <HAL_GPIO_Init+0x348>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00d      	beq.n	80056b6 <HAL_GPIO_Init+0x222>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a50      	ldr	r2, [pc, #320]	; (80057e0 <HAL_GPIO_Init+0x34c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <HAL_GPIO_Init+0x21e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a4f      	ldr	r2, [pc, #316]	; (80057e4 <HAL_GPIO_Init+0x350>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_GPIO_Init+0x21a>
 80056aa:	2309      	movs	r3, #9
 80056ac:	e012      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056ae:	230a      	movs	r3, #10
 80056b0:	e010      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056b2:	2308      	movs	r3, #8
 80056b4:	e00e      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056b6:	2307      	movs	r3, #7
 80056b8:	e00c      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056ba:	2306      	movs	r3, #6
 80056bc:	e00a      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056be:	2305      	movs	r3, #5
 80056c0:	e008      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056c2:	2304      	movs	r3, #4
 80056c4:	e006      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056c6:	2303      	movs	r3, #3
 80056c8:	e004      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e002      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_GPIO_Init+0x240>
 80056d2:	2300      	movs	r3, #0
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f002 0203 	and.w	r2, r2, #3
 80056da:	0092      	lsls	r2, r2, #2
 80056dc:	4093      	lsls	r3, r2
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80056e4:	4935      	ldr	r1, [pc, #212]	; (80057bc <HAL_GPIO_Init+0x328>)
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	3302      	adds	r3, #2
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056f2:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <HAL_GPIO_Init+0x354>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005716:	4a34      	ldr	r2, [pc, #208]	; (80057e8 <HAL_GPIO_Init+0x354>)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <HAL_GPIO_Init+0x354>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005740:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <HAL_GPIO_Init+0x354>)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005746:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <HAL_GPIO_Init+0x354>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800576a:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <HAL_GPIO_Init+0x354>)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <HAL_GPIO_Init+0x354>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <HAL_GPIO_Init+0x354>)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	f67f ae86 	bls.w	80054b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40013800 	.word	0x40013800
 80057c0:	40020000 	.word	0x40020000
 80057c4:	40020400 	.word	0x40020400
 80057c8:	40020800 	.word	0x40020800
 80057cc:	40020c00 	.word	0x40020c00
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40021400 	.word	0x40021400
 80057d8:	40021800 	.word	0x40021800
 80057dc:	40021c00 	.word	0x40021c00
 80057e0:	40022000 	.word	0x40022000
 80057e4:	40022400 	.word	0x40022400
 80057e8:	40013c00 	.word	0x40013c00

080057ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
 80057f8:	4613      	mov	r3, r2
 80057fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057fc:	787b      	ldrb	r3, [r7, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005808:	e003      	b.n	8005812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	041a      	lsls	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	619a      	str	r2, [r3, #24]
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005830:	887a      	ldrh	r2, [r7, #2]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	041a      	lsls	r2, r3, #16
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	43d9      	mvns	r1, r3
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	400b      	ands	r3, r1
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	619a      	str	r2, [r3, #24]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800585e:	4b08      	ldr	r3, [pc, #32]	; (8005880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	4013      	ands	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd f968 	bl	8002b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40013c00 	.word	0x40013c00

08005884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07f      	b.n	8005996 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fd fb1e 	bl	8002eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	; 0x24
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d107      	bne.n	80058fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	e006      	b.n	800590c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800590a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d104      	bne.n	800591e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800591c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6859      	ldr	r1, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <HAL_I2C_Init+0x11c>)
 800592a:	430b      	orrs	r3, r1
 800592c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800593c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69d9      	ldr	r1, [r3, #28]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	02008000 	.word	0x02008000

080059a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	460b      	mov	r3, r1
 80059b8:	813b      	strh	r3, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	f040 80f9 	bne.w	8005bbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_I2C_Mem_Write+0x34>
 80059d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0ed      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Mem_Write+0x4e>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e0e6      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059fa:	f7ff fbcb 	bl	8005194 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2319      	movs	r3, #25
 8005a06:	2201      	movs	r2, #1
 8005a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fac3 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0d1      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2221      	movs	r2, #33	; 0x21
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2240      	movs	r2, #64	; 0x40
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a3a      	ldr	r2, [r7, #32]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a44:	88f8      	ldrh	r0, [r7, #6]
 8005a46:	893a      	ldrh	r2, [r7, #8]
 8005a48:	8979      	ldrh	r1, [r7, #10]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	4603      	mov	r3, r0
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f9d3 	bl	8005e00 <I2C_RequestMemoryWrite>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0a9      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2bff      	cmp	r3, #255	; 0xff
 8005a74:	d90e      	bls.n	8005a94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	22ff      	movs	r2, #255	; 0xff
 8005a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	8979      	ldrh	r1, [r7, #10]
 8005a84:	2300      	movs	r3, #0
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fc2b 	bl	80062e8 <I2C_TransferConfig>
 8005a92:	e00f      	b.n	8005ab4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	8979      	ldrh	r1, [r7, #10]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fc1a 	bl	80062e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 faad 	bl	8006018 <I2C_WaitOnTXISFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e07b      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d034      	beq.n	8005b6c <HAL_I2C_Mem_Write+0x1c8>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d130      	bne.n	8005b6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	2200      	movs	r2, #0
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fa3f 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e04d      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2bff      	cmp	r3, #255	; 0xff
 8005b2c:	d90e      	bls.n	8005b4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	22ff      	movs	r2, #255	; 0xff
 8005b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	8979      	ldrh	r1, [r7, #10]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fbcf 	bl	80062e8 <I2C_TransferConfig>
 8005b4a:	e00f      	b.n	8005b6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	8979      	ldrh	r1, [r7, #10]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fbbe 	bl	80062e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d19e      	bne.n	8005ab4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa8c 	bl	8006098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e01a      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6859      	ldr	r1, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <HAL_I2C_Mem_Write+0x224>)
 8005b9e:	400b      	ands	r3, r1
 8005ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e000      	b.n	8005bc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	fe00e800 	.word	0xfe00e800

08005bcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	817b      	strh	r3, [r7, #10]
 8005bde:	460b      	mov	r3, r1
 8005be0:	813b      	strh	r3, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 80fd 	bne.w	8005dee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x34>
 8005bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0f1      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Mem_Read+0x4e>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e0ea      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c22:	f7ff fab7 	bl	8005194 <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2319      	movs	r3, #25
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f9af 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0d5      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	; 0x22
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6c:	88f8      	ldrh	r0, [r7, #6]
 8005c6e:	893a      	ldrh	r2, [r7, #8]
 8005c70:	8979      	ldrh	r1, [r7, #10]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f913 	bl	8005ea8 <I2C_RequestMemoryRead>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0ad      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2bff      	cmp	r3, #255	; 0xff
 8005c9c:	d90e      	bls.n	8005cbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	22ff      	movs	r2, #255	; 0xff
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	8979      	ldrh	r1, [r7, #10]
 8005cac:	4b52      	ldr	r3, [pc, #328]	; (8005df8 <HAL_I2C_Mem_Read+0x22c>)
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fb17 	bl	80062e8 <I2C_TransferConfig>
 8005cba:	e00f      	b.n	8005cdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	8979      	ldrh	r1, [r7, #10]
 8005cce:	4b4a      	ldr	r3, [pc, #296]	; (8005df8 <HAL_I2C_Mem_Read+0x22c>)
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fb06 	bl	80062e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f956 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e07c      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d034      	beq.n	8005d9c <HAL_I2C_Mem_Read+0x1d0>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d130      	bne.n	8005d9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2200      	movs	r2, #0
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f927 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e04d      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	d90e      	bls.n	8005d7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8979      	ldrh	r1, [r7, #10]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fab7 	bl	80062e8 <I2C_TransferConfig>
 8005d7a:	e00f      	b.n	8005d9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	8979      	ldrh	r1, [r7, #10]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 faa6 	bl	80062e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d19a      	bne.n	8005cdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f974 	bl	8006098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e01a      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_I2C_Mem_Read+0x230>)
 8005dce:	400b      	ands	r3, r1
 8005dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e000      	b.n	8005df0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	80002400 	.word	0x80002400
 8005dfc:	fe00e800 	.word	0xfe00e800

08005e00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	460b      	mov	r3, r1
 8005e14:	813b      	strh	r3, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	8979      	ldrh	r1, [r7, #10]
 8005e20:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <I2C_RequestMemoryWrite+0xa4>)
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fa5d 	bl	80062e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	69b9      	ldr	r1, [r7, #24]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f8f0 	bl	8006018 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e02c      	b.n	8005e9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28
 8005e52:	e015      	b.n	8005e80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	69b9      	ldr	r1, [r7, #24]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f8d6 	bl	8006018 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e012      	b.n	8005e9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e76:	893b      	ldrh	r3, [r7, #8]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2180      	movs	r1, #128	; 0x80
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f884 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	80002000 	.word	0x80002000

08005ea8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	817b      	strh	r3, [r7, #10]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	813b      	strh	r3, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	8979      	ldrh	r1, [r7, #10]
 8005ec8:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <I2C_RequestMemoryRead+0xa4>)
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fa0a 	bl	80062e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f89d 	bl	8006018 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e02c      	b.n	8005f42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d105      	bne.n	8005efa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eee:	893b      	ldrh	r3, [r7, #8]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ef8:	e015      	b.n	8005f26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	69b9      	ldr	r1, [r7, #24]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f883 	bl	8006018 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e012      	b.n	8005f42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1c:	893b      	ldrh	r3, [r7, #8]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2140      	movs	r1, #64	; 0x40
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f831 	bl	8005f98 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	80002000 	.word	0x80002000

08005f50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d103      	bne.n	8005f6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d007      	beq.n	8005f8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	619a      	str	r2, [r3, #24]
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fa8:	e022      	b.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d01e      	beq.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7ff f8ef 	bl	8005194 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d113      	bne.n	8005ff0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e00f      	b.n	8006010 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	429a      	cmp	r2, r3
 800600c:	d0cd      	beq.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006024:	e02c      	b.n	8006080 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f870 	bl	8006110 <I2C_IsErrorOccurred>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e02a      	b.n	8006090 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d01e      	beq.n	8006080 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7ff f8a7 	bl	8005194 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d113      	bne.n	8006080 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e007      	b.n	8006090 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d1cb      	bne.n	8006026 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060a4:	e028      	b.n	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f830 	bl	8006110 <I2C_IsErrorOccurred>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e026      	b.n	8006108 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ba:	f7ff f86b 	bl	8005194 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d113      	bne.n	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e007      	b.n	8006108 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d1cf      	bne.n	80060a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	d075      	beq.n	8006228 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2210      	movs	r2, #16
 8006142:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006144:	e056      	b.n	80061f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d052      	beq.n	80061f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7ff f821 	bl	8005194 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <I2C_IsErrorOccurred+0x54>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d147      	bne.n	80061f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006176:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006186:	d12e      	bne.n	80061e6 <I2C_IsErrorOccurred+0xd6>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800618e:	d02a      	beq.n	80061e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b20      	cmp	r3, #32
 8006194:	d027      	beq.n	80061e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061a6:	f7fe fff5 	bl	8005194 <HAL_GetTick>
 80061aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ac:	e01b      	b.n	80061e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061ae:	f7fe fff1 	bl	8005194 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b19      	cmp	r3, #25
 80061ba:	d914      	bls.n	80061e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d1dc      	bne.n	80061ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d003      	beq.n	800620a <I2C_IsErrorOccurred+0xfa>
 8006202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006206:	2b00      	cmp	r3, #0
 8006208:	d09d      	beq.n	8006146 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800620a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2220      	movs	r2, #32
 8006218:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f043 0304 	orr.w	r3, r3, #4
 8006220:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800624a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f043 0308 	orr.w	r3, r3, #8
 8006262:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800626c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01c      	beq.n	80062d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fe56 	bl	8005f50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <I2C_IsErrorOccurred+0x1d4>)
 80062b0:	400b      	ands	r3, r1
 80062b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80062d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	; 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	fe00e800 	.word	0xfe00e800

080062e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	817b      	strh	r3, [r7, #10]
 80062f6:	4613      	mov	r3, r2
 80062f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006300:	7a7b      	ldrb	r3, [r7, #9]
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006308:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	4313      	orrs	r3, r2
 8006312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006316:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	0d5b      	lsrs	r3, r3, #21
 8006322:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <I2C_TransferConfig+0x60>)
 8006328:	430b      	orrs	r3, r1
 800632a:	43db      	mvns	r3, r3
 800632c:	ea02 0103 	and.w	r1, r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	03ff63ff 	.word	0x03ff63ff

0800634c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b20      	cmp	r3, #32
 8006360:	d138      	bne.n	80063d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800636c:	2302      	movs	r3, #2
 800636e:	e032      	b.n	80063d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2224      	movs	r2, #36	; 0x24
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800639e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e000      	b.n	80063d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063d4:	2302      	movs	r3, #2
  }
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d139      	bne.n	800646c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006402:	2302      	movs	r3, #2
 8006404:	e033      	b.n	800646e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800646c:	2302      	movs	r3, #2
  }
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800648a:	6013      	str	r3, [r2, #0]
}
 800648c:	bf00      	nop
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40007000 	.word	0x40007000

0800649c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e29b      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8087 	beq.w	80065ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064c0:	4b96      	ldr	r3, [pc, #600]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 030c 	and.w	r3, r3, #12
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d00c      	beq.n	80064e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064cc:	4b93      	ldr	r3, [pc, #588]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 030c 	and.w	r3, r3, #12
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d112      	bne.n	80064fe <HAL_RCC_OscConfig+0x62>
 80064d8:	4b90      	ldr	r3, [pc, #576]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e4:	d10b      	bne.n	80064fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e6:	4b8d      	ldr	r3, [pc, #564]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d06c      	beq.n	80065cc <HAL_RCC_OscConfig+0x130>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d168      	bne.n	80065cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e275      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006506:	d106      	bne.n	8006516 <HAL_RCC_OscConfig+0x7a>
 8006508:	4b84      	ldr	r3, [pc, #528]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a83      	ldr	r2, [pc, #524]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800650e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e02e      	b.n	8006574 <HAL_RCC_OscConfig+0xd8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10c      	bne.n	8006538 <HAL_RCC_OscConfig+0x9c>
 800651e:	4b7f      	ldr	r3, [pc, #508]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7e      	ldr	r2, [pc, #504]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	4b7c      	ldr	r3, [pc, #496]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7b      	ldr	r2, [pc, #492]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e01d      	b.n	8006574 <HAL_RCC_OscConfig+0xd8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006540:	d10c      	bne.n	800655c <HAL_RCC_OscConfig+0xc0>
 8006542:	4b76      	ldr	r3, [pc, #472]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a75      	ldr	r2, [pc, #468]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	4b73      	ldr	r3, [pc, #460]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a72      	ldr	r2, [pc, #456]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e00b      	b.n	8006574 <HAL_RCC_OscConfig+0xd8>
 800655c:	4b6f      	ldr	r3, [pc, #444]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6e      	ldr	r2, [pc, #440]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4b6c      	ldr	r3, [pc, #432]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a6b      	ldr	r2, [pc, #428]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800656e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d013      	beq.n	80065a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fe fe0a 	bl	8005194 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006584:	f7fe fe06 	bl	8005194 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e229      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006596:	4b61      	ldr	r3, [pc, #388]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0xe8>
 80065a2:	e014      	b.n	80065ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a4:	f7fe fdf6 	bl	8005194 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ac:	f7fe fdf2 	bl	8005194 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e215      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065be:	4b57      	ldr	r3, [pc, #348]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x110>
 80065ca:	e000      	b.n	80065ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d069      	beq.n	80066ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065da:	4b50      	ldr	r3, [pc, #320]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065e6:	4b4d      	ldr	r3, [pc, #308]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d11c      	bne.n	800662c <HAL_RCC_OscConfig+0x190>
 80065f2:	4b4a      	ldr	r3, [pc, #296]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d116      	bne.n	800662c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fe:	4b47      	ldr	r3, [pc, #284]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_RCC_OscConfig+0x17a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d001      	beq.n	8006616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e1e9      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006616:	4b41      	ldr	r3, [pc, #260]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	493d      	ldr	r1, [pc, #244]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006626:	4313      	orrs	r3, r2
 8006628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800662a:	e040      	b.n	80066ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d023      	beq.n	800667c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a38      	ldr	r2, [pc, #224]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006640:	f7fe fda8 	bl	8005194 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006648:	f7fe fda4 	bl	8005194 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e1c7      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665a:	4b30      	ldr	r3, [pc, #192]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0f0      	beq.n	8006648 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006666:	4b2d      	ldr	r3, [pc, #180]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	4929      	ldr	r1, [pc, #164]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006676:	4313      	orrs	r3, r2
 8006678:	600b      	str	r3, [r1, #0]
 800667a:	e018      	b.n	80066ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667c:	4b27      	ldr	r3, [pc, #156]	; (800671c <HAL_RCC_OscConfig+0x280>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a26      	ldr	r2, [pc, #152]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fe fd84 	bl	8005194 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006690:	f7fe fd80 	bl	8005194 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e1a3      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d038      	beq.n	800672c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d019      	beq.n	80066f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c2:	4b16      	ldr	r3, [pc, #88]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	4a15      	ldr	r2, [pc, #84]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ce:	f7fe fd61 	bl	8005194 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d6:	f7fe fd5d 	bl	8005194 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e180      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80066ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCC_OscConfig+0x23a>
 80066f4:	e01a      	b.n	800672c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066f6:	4b09      	ldr	r3, [pc, #36]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80066f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <HAL_RCC_OscConfig+0x280>)
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006702:	f7fe fd47 	bl	8005194 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006708:	e00a      	b.n	8006720 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670a:	f7fe fd43 	bl	8005194 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d903      	bls.n	8006720 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e166      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
 800671c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006720:	4b92      	ldr	r3, [pc, #584]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1ee      	bne.n	800670a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80a4 	beq.w	8006882 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800673a:	4b8c      	ldr	r3, [pc, #560]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006746:	4b89      	ldr	r3, [pc, #548]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	4a88      	ldr	r2, [pc, #544]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800674c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006750:	6413      	str	r3, [r2, #64]	; 0x40
 8006752:	4b86      	ldr	r3, [pc, #536]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675a:	60bb      	str	r3, [r7, #8]
 800675c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800675e:	2301      	movs	r3, #1
 8006760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006762:	4b83      	ldr	r3, [pc, #524]	; (8006970 <HAL_RCC_OscConfig+0x4d4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d118      	bne.n	80067a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800676e:	4b80      	ldr	r3, [pc, #512]	; (8006970 <HAL_RCC_OscConfig+0x4d4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a7f      	ldr	r2, [pc, #508]	; (8006970 <HAL_RCC_OscConfig+0x4d4>)
 8006774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800677a:	f7fe fd0b 	bl	8005194 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006782:	f7fe fd07 	bl	8005194 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b64      	cmp	r3, #100	; 0x64
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e12a      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006794:	4b76      	ldr	r3, [pc, #472]	; (8006970 <HAL_RCC_OscConfig+0x4d4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d106      	bne.n	80067b6 <HAL_RCC_OscConfig+0x31a>
 80067a8:	4b70      	ldr	r3, [pc, #448]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	4a6f      	ldr	r2, [pc, #444]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	6713      	str	r3, [r2, #112]	; 0x70
 80067b4:	e02d      	b.n	8006812 <HAL_RCC_OscConfig+0x376>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCC_OscConfig+0x33c>
 80067be:	4b6b      	ldr	r3, [pc, #428]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c2:	4a6a      	ldr	r2, [pc, #424]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ca:	4b68      	ldr	r3, [pc, #416]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	4a67      	ldr	r2, [pc, #412]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067d0:	f023 0304 	bic.w	r3, r3, #4
 80067d4:	6713      	str	r3, [r2, #112]	; 0x70
 80067d6:	e01c      	b.n	8006812 <HAL_RCC_OscConfig+0x376>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b05      	cmp	r3, #5
 80067de:	d10c      	bne.n	80067fa <HAL_RCC_OscConfig+0x35e>
 80067e0:	4b62      	ldr	r3, [pc, #392]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a61      	ldr	r2, [pc, #388]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067e6:	f043 0304 	orr.w	r3, r3, #4
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
 80067ec:	4b5f      	ldr	r3, [pc, #380]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	4a5e      	ldr	r2, [pc, #376]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6713      	str	r3, [r2, #112]	; 0x70
 80067f8:	e00b      	b.n	8006812 <HAL_RCC_OscConfig+0x376>
 80067fa:	4b5c      	ldr	r3, [pc, #368]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a5b      	ldr	r2, [pc, #364]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	4b59      	ldr	r3, [pc, #356]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	4a58      	ldr	r2, [pc, #352]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800680c:	f023 0304 	bic.w	r3, r3, #4
 8006810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d015      	beq.n	8006846 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681a:	f7fe fcbb 	bl	8005194 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006820:	e00a      	b.n	8006838 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006822:	f7fe fcb7 	bl	8005194 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006830:	4293      	cmp	r3, r2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e0d8      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006838:	4b4c      	ldr	r3, [pc, #304]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ee      	beq.n	8006822 <HAL_RCC_OscConfig+0x386>
 8006844:	e014      	b.n	8006870 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006846:	f7fe fca5 	bl	8005194 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684c:	e00a      	b.n	8006864 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fe fca1 	bl	8005194 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f241 3288 	movw	r2, #5000	; 0x1388
 800685c:	4293      	cmp	r3, r2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e0c2      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006864:	4b41      	ldr	r3, [pc, #260]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ee      	bne.n	800684e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d105      	bne.n	8006882 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006876:	4b3d      	ldr	r3, [pc, #244]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4a3c      	ldr	r2, [pc, #240]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800687c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80ae 	beq.w	80069e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800688c:	4b37      	ldr	r3, [pc, #220]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b08      	cmp	r3, #8
 8006896:	d06d      	beq.n	8006974 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d14b      	bne.n	8006938 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a0:	4b32      	ldr	r3, [pc, #200]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a31      	ldr	r2, [pc, #196]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80068a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fe fc72 	bl	8005194 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fe fc6e 	bl	8005194 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e091      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	4b29      	ldr	r3, [pc, #164]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	019b      	lsls	r3, r3, #6
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	3b01      	subs	r3, #1
 80068ec:	041b      	lsls	r3, r3, #16
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	061b      	lsls	r3, r3, #24
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	071b      	lsls	r3, r3, #28
 80068fe:	491b      	ldr	r1, [pc, #108]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006900:	4313      	orrs	r3, r2
 8006902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006904:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a18      	ldr	r2, [pc, #96]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800690a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fe fc40 	bl	8005194 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006918:	f7fe fc3c 	bl	8005194 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e05f      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x47c>
 8006936:	e057      	b.n	80069e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0b      	ldr	r2, [pc, #44]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 800693e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fe fc26 	bl	8005194 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800694c:	f7fe fc22 	bl	8005194 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e045      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695e:	4b03      	ldr	r3, [pc, #12]	; (800696c <HAL_RCC_OscConfig+0x4d0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x4b0>
 800696a:	e03d      	b.n	80069e8 <HAL_RCC_OscConfig+0x54c>
 800696c:	40023800 	.word	0x40023800
 8006970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006974:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <HAL_RCC_OscConfig+0x558>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d030      	beq.n	80069e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800698c:	429a      	cmp	r2, r3
 800698e:	d129      	bne.n	80069e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699a:	429a      	cmp	r2, r3
 800699c:	d122      	bne.n	80069e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d119      	bne.n	80069e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	085b      	lsrs	r3, r3, #1
 80069bc:	3b01      	subs	r3, #1
 80069be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d10f      	bne.n	80069e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d001      	beq.n	80069e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40023800 	.word	0x40023800

080069f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0d0      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a10:	4b6a      	ldr	r3, [pc, #424]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d910      	bls.n	8006a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1e:	4b67      	ldr	r3, [pc, #412]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 020f 	bic.w	r2, r3, #15
 8006a26:	4965      	ldr	r1, [pc, #404]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2e:	4b63      	ldr	r3, [pc, #396]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d001      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0b8      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a58:	4b59      	ldr	r3, [pc, #356]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4a58      	ldr	r2, [pc, #352]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a70:	4b53      	ldr	r3, [pc, #332]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	4a52      	ldr	r2, [pc, #328]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a7c:	4b50      	ldr	r3, [pc, #320]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	494d      	ldr	r1, [pc, #308]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d040      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa2:	4b47      	ldr	r3, [pc, #284]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d115      	bne.n	8006ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e07f      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d107      	bne.n	8006aca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aba:	4b41      	ldr	r3, [pc, #260]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e073      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aca:	4b3d      	ldr	r3, [pc, #244]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e06b      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ada:	4b39      	ldr	r3, [pc, #228]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f023 0203 	bic.w	r2, r3, #3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4936      	ldr	r1, [pc, #216]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aec:	f7fe fb52 	bl	8005194 <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	e00a      	b.n	8006b0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af4:	f7fe fb4e 	bl	8005194 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e053      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0a:	4b2d      	ldr	r3, [pc, #180]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 020c 	and.w	r2, r3, #12
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d1eb      	bne.n	8006af4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b27      	ldr	r3, [pc, #156]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d210      	bcs.n	8006b4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 020f 	bic.w	r2, r3, #15
 8006b32:	4922      	ldr	r1, [pc, #136]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b20      	ldr	r3, [pc, #128]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e032      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b58:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4916      	ldr	r1, [pc, #88]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b76:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	490e      	ldr	r1, [pc, #56]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b8a:	f000 f821 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	490a      	ldr	r1, [pc, #40]	; (8006bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8006b9c:	5ccb      	ldrb	r3, [r1, r3]
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8006ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <HAL_RCC_ClockConfig+0x1d4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fd fefa 	bl	80049a4 <HAL_InitTick>

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40023c00 	.word	0x40023c00
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	0800f438 	.word	0x0800f438
 8006bc8:	20000004 	.word	0x20000004
 8006bcc:	20000008 	.word	0x20000008

08006bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b094      	sub	sp, #80	; 0x50
 8006bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	647b      	str	r3, [r7, #68]	; 0x44
 8006bdc:	2300      	movs	r3, #0
 8006bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be0:	2300      	movs	r3, #0
 8006be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be8:	4b79      	ldr	r3, [pc, #484]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d00d      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0x40>
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	f200 80e1 	bhi.w	8006dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x34>
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c02:	e0db      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c04:	4b73      	ldr	r3, [pc, #460]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c08:	e0db      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c0a:	4b73      	ldr	r3, [pc, #460]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c0e:	e0d8      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c10:	4b6f      	ldr	r3, [pc, #444]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c18:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c1a:	4b6d      	ldr	r3, [pc, #436]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d063      	beq.n	8006cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c26:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	099b      	lsrs	r3, r3, #6
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c42:	4622      	mov	r2, r4
 8006c44:	462b      	mov	r3, r5
 8006c46:	f04f 0000 	mov.w	r0, #0
 8006c4a:	f04f 0100 	mov.w	r1, #0
 8006c4e:	0159      	lsls	r1, r3, #5
 8006c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c54:	0150      	lsls	r0, r2, #5
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	1a51      	subs	r1, r2, r1
 8006c5e:	6139      	str	r1, [r7, #16]
 8006c60:	4629      	mov	r1, r5
 8006c62:	eb63 0301 	sbc.w	r3, r3, r1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c74:	4659      	mov	r1, fp
 8006c76:	018b      	lsls	r3, r1, #6
 8006c78:	4651      	mov	r1, sl
 8006c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c7e:	4651      	mov	r1, sl
 8006c80:	018a      	lsls	r2, r1, #6
 8006c82:	4651      	mov	r1, sl
 8006c84:	ebb2 0801 	subs.w	r8, r2, r1
 8006c88:	4659      	mov	r1, fp
 8006c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ca2:	4690      	mov	r8, r2
 8006ca4:	4699      	mov	r9, r3
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	eb18 0303 	adds.w	r3, r8, r3
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	462b      	mov	r3, r5
 8006cb0:	eb49 0303 	adc.w	r3, r9, r3
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	024b      	lsls	r3, r1, #9
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ccc:	4621      	mov	r1, r4
 8006cce:	024a      	lsls	r2, r1, #9
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ce0:	f7f9 faae 	bl	8000240 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4613      	mov	r3, r2
 8006cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cec:	e058      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cee:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	099b      	lsrs	r3, r3, #6
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cfe:	623b      	str	r3, [r7, #32]
 8006d00:	2300      	movs	r3, #0
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
 8006d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	f04f 0000 	mov.w	r0, #0
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	0159      	lsls	r1, r3, #5
 8006d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d1a:	0150      	lsls	r0, r2, #5
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4641      	mov	r1, r8
 8006d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d26:	4649      	mov	r1, r9
 8006d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d40:	ebb2 040a 	subs.w	r4, r2, sl
 8006d44:	eb63 050b 	sbc.w	r5, r3, fp
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	00eb      	lsls	r3, r5, #3
 8006d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d56:	00e2      	lsls	r2, r4, #3
 8006d58:	4614      	mov	r4, r2
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	4643      	mov	r3, r8
 8006d5e:	18e3      	adds	r3, r4, r3
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	464b      	mov	r3, r9
 8006d64:	eb45 0303 	adc.w	r3, r5, r3
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d76:	4629      	mov	r1, r5
 8006d78:	028b      	lsls	r3, r1, #10
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d80:	4621      	mov	r1, r4
 8006d82:	028a      	lsls	r2, r1, #10
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	61fa      	str	r2, [r7, #28]
 8006d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d94:	f7f9 fa54 	bl	8000240 <__aeabi_uldivmod>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	3301      	adds	r3, #1
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dba:	e002      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3750      	adds	r7, #80	; 0x50
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	007a1200 	.word	0x007a1200

08006ddc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000004 	.word	0x20000004

08006df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006df8:	f7ff fff0 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	0a9b      	lsrs	r3, r3, #10
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4903      	ldr	r1, [pc, #12]	; (8006e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40023800 	.word	0x40023800
 8006e18:	0800f448 	.word	0x0800f448

08006e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e20:	f7ff ffdc 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	0b5b      	lsrs	r3, r3, #13
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	4903      	ldr	r1, [pc, #12]	; (8006e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e32:	5ccb      	ldrb	r3, [r1, r3]
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	0800f448 	.word	0x0800f448

08006e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	220f      	movs	r2, #15
 8006e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e54:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0203 	and.w	r2, r3, #3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e60:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006e78:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <HAL_RCC_GetClockConfig+0x60>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40023c00 	.word	0x40023c00

08006ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d012      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ed0:	4b69      	ldr	r3, [pc, #420]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	4a68      	ldr	r2, [pc, #416]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006eda:	6093      	str	r3, [r2, #8]
 8006edc:	4b66      	ldr	r3, [pc, #408]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee4:	4964      	ldr	r1, [pc, #400]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f02:	4b5d      	ldr	r3, [pc, #372]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f10:	4959      	ldr	r1, [pc, #356]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f20:	d101      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d017      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f3e:	4b4e      	ldr	r3, [pc, #312]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	494a      	ldr	r1, [pc, #296]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f5c:	d101      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 808b 	beq.w	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	4a39      	ldr	r2, [pc, #228]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f96:	6413      	str	r3, [r2, #64]	; 0x40
 8006f98:	4b37      	ldr	r3, [pc, #220]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fa4:	4b35      	ldr	r3, [pc, #212]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a34      	ldr	r2, [pc, #208]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb0:	f7fe f8f0 	bl	8005194 <HAL_GetTick>
 8006fb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb8:	f7fe f8ec 	bl	8005194 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	; 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e38f      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fca:	4b2c      	ldr	r3, [pc, #176]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fd6:	4b28      	ldr	r3, [pc, #160]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d035      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d02e      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ff4:	4b20      	ldr	r3, [pc, #128]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ffe:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	4a1d      	ldr	r2, [pc, #116]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800700a:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007016:	4a18      	ldr	r2, [pc, #96]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800701c:	4b16      	ldr	r3, [pc, #88]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d114      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007028:	f7fe f8b4 	bl	8005194 <HAL_GetTick>
 800702c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702e:	e00a      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007030:	f7fe f8b0 	bl	8005194 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	f241 3288 	movw	r2, #5000	; 0x1388
 800703e:	4293      	cmp	r3, r2
 8007040:	d901      	bls.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e351      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0ee      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705e:	d111      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800706e:	400b      	ands	r3, r1
 8007070:	4901      	ldr	r1, [pc, #4]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007072:	4313      	orrs	r3, r2
 8007074:	608b      	str	r3, [r1, #8]
 8007076:	e00b      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007078:	40023800 	.word	0x40023800
 800707c:	40007000 	.word	0x40007000
 8007080:	0ffffcff 	.word	0x0ffffcff
 8007084:	4bac      	ldr	r3, [pc, #688]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4aab      	ldr	r2, [pc, #684]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800708a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800708e:	6093      	str	r3, [r2, #8]
 8007090:	4ba9      	ldr	r3, [pc, #676]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800709c:	49a6      	ldr	r1, [pc, #664]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d010      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ae:	4ba2      	ldr	r3, [pc, #648]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b4:	4aa0      	ldr	r2, [pc, #640]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070be:	4b9e      	ldr	r3, [pc, #632]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	499b      	ldr	r1, [pc, #620]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070dc:	4b96      	ldr	r3, [pc, #600]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ea:	4993      	ldr	r1, [pc, #588]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070fe:	4b8e      	ldr	r3, [pc, #568]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800710c:	498a      	ldr	r1, [pc, #552]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007120:	4b85      	ldr	r3, [pc, #532]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	4982      	ldr	r1, [pc, #520]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007142:	4b7d      	ldr	r3, [pc, #500]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	4979      	ldr	r1, [pc, #484]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007164:	4b74      	ldr	r3, [pc, #464]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f023 0203 	bic.w	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	4971      	ldr	r1, [pc, #452]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007186:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	f023 020c 	bic.w	r2, r3, #12
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007194:	4968      	ldr	r1, [pc, #416]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071a8:	4b63      	ldr	r3, [pc, #396]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b6:	4960      	ldr	r1, [pc, #384]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071ca:	4b5b      	ldr	r3, [pc, #364]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	4957      	ldr	r1, [pc, #348]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071ec:	4b52      	ldr	r3, [pc, #328]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	494f      	ldr	r1, [pc, #316]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800720e:	4b4a      	ldr	r3, [pc, #296]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	4946      	ldr	r1, [pc, #280]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007230:	4b41      	ldr	r3, [pc, #260]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723e:	493e      	ldr	r1, [pc, #248]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007252:	4b39      	ldr	r3, [pc, #228]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007260:	4935      	ldr	r1, [pc, #212]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007274:	4b30      	ldr	r3, [pc, #192]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007282:	492d      	ldr	r1, [pc, #180]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d011      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007296:	4b28      	ldr	r3, [pc, #160]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a4:	4924      	ldr	r1, [pc, #144]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b4:	d101      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072b6:	2301      	movs	r3, #1
 80072b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072d6:	4b18      	ldr	r3, [pc, #96]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e4:	4914      	ldr	r1, [pc, #80]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072f8:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007308:	490b      	ldr	r1, [pc, #44]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00f      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732c:	4902      	ldr	r1, [pc, #8]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007334:	e002      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007336:	bf00      	nop
 8007338:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00b      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007348:	4b8a      	ldr	r3, [pc, #552]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800734a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	4986      	ldr	r1, [pc, #536]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800736c:	4b81      	ldr	r3, [pc, #516]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800736e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737c:	497d      	ldr	r1, [pc, #500]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d006      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80d6 	beq.w	8007544 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007398:	4b76      	ldr	r3, [pc, #472]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a75      	ldr	r2, [pc, #468]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800739e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a4:	f7fd fef6 	bl	8005194 <HAL_GetTick>
 80073a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073ac:	f7fd fef2 	bl	8005194 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	; 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e195      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073be:	4b6d      	ldr	r3, [pc, #436]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d021      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d11d      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073de:	4b65      	ldr	r3, [pc, #404]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073ec:	4b61      	ldr	r3, [pc, #388]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f2:	0e1b      	lsrs	r3, r3, #24
 80073f4:	f003 030f 	and.w	r3, r3, #15
 80073f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	019a      	lsls	r2, r3, #6
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	431a      	orrs	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	071b      	lsls	r3, r3, #28
 8007412:	4958      	ldr	r1, [pc, #352]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007438:	2b00      	cmp	r3, #0
 800743a:	d02e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007444:	d129      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007446:	4b4b      	ldr	r3, [pc, #300]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800744c:	0c1b      	lsrs	r3, r3, #16
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007454:	4b47      	ldr	r3, [pc, #284]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800745a:	0f1b      	lsrs	r3, r3, #28
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	019a      	lsls	r2, r3, #6
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	041b      	lsls	r3, r3, #16
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	061b      	lsls	r3, r3, #24
 8007474:	431a      	orrs	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	071b      	lsls	r3, r3, #28
 800747a:	493e      	ldr	r1, [pc, #248]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800747c:	4313      	orrs	r3, r2
 800747e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007482:	4b3c      	ldr	r3, [pc, #240]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007488:	f023 021f 	bic.w	r2, r3, #31
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	3b01      	subs	r3, #1
 8007492:	4938      	ldr	r1, [pc, #224]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01d      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074a6:	4b33      	ldr	r3, [pc, #204]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ac:	0e1b      	lsrs	r3, r3, #24
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ba:	0f1b      	lsrs	r3, r3, #28
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	019a      	lsls	r2, r3, #6
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	431a      	orrs	r2, r3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	061b      	lsls	r3, r3, #24
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	071b      	lsls	r3, r3, #28
 80074da:	4926      	ldr	r1, [pc, #152]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d011      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	019a      	lsls	r2, r3, #6
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	041b      	lsls	r3, r3, #16
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	061b      	lsls	r3, r3, #24
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	071b      	lsls	r3, r3, #28
 800750a:	491a      	ldr	r1, [pc, #104]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007512:	4b18      	ldr	r3, [pc, #96]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a17      	ldr	r2, [pc, #92]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800751c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751e:	f7fd fe39 	bl	8005194 <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007524:	e008      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007526:	f7fd fe35 	bl	8005194 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b64      	cmp	r3, #100	; 0x64
 8007532:	d901      	bls.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e0d8      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007538:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0f0      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b01      	cmp	r3, #1
 8007548:	f040 80ce 	bne.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800754c:	4b09      	ldr	r3, [pc, #36]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a08      	ldr	r2, [pc, #32]	; (8007574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007558:	f7fd fe1c 	bl	8005194 <HAL_GetTick>
 800755c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800755e:	e00b      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007560:	f7fd fe18 	bl	8005194 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b64      	cmp	r3, #100	; 0x64
 800756c:	d904      	bls.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e0bb      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007578:	4b5e      	ldr	r3, [pc, #376]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007584:	d0ec      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02e      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d12a      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075ae:	4b51      	ldr	r3, [pc, #324]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075bc:	4b4d      	ldr	r3, [pc, #308]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	0f1b      	lsrs	r3, r3, #28
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	019a      	lsls	r2, r3, #6
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	041b      	lsls	r3, r3, #16
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	061b      	lsls	r3, r3, #24
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	071b      	lsls	r3, r3, #28
 80075e2:	4944      	ldr	r1, [pc, #272]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075ea:	4b42      	ldr	r3, [pc, #264]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	3b01      	subs	r3, #1
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	493d      	ldr	r1, [pc, #244]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d022      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007618:	d11d      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800761a:	4b36      	ldr	r3, [pc, #216]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800761c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007628:	4b32      	ldr	r3, [pc, #200]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	0f1b      	lsrs	r3, r3, #28
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	019a      	lsls	r2, r3, #6
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	431a      	orrs	r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	431a      	orrs	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	071b      	lsls	r3, r3, #28
 800764e:	4929      	ldr	r1, [pc, #164]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d028      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007662:	4b24      	ldr	r3, [pc, #144]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007670:	4b20      	ldr	r3, [pc, #128]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	0c1b      	lsrs	r3, r3, #16
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	019a      	lsls	r2, r3, #6
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	431a      	orrs	r2, r3
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	061b      	lsls	r3, r3, #24
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	071b      	lsls	r3, r3, #28
 8007696:	4917      	ldr	r1, [pc, #92]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800769e:	4b15      	ldr	r3, [pc, #84]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4911      	ldr	r1, [pc, #68]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a0e      	ldr	r2, [pc, #56]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c0:	f7fd fd68 	bl	8005194 <HAL_GetTick>
 80076c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076c8:	f7fd fd64 	bl	8005194 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b64      	cmp	r3, #100	; 0x64
 80076d4:	d901      	bls.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e007      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076e6:	d1ef      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3720      	adds	r7, #32
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40023800 	.word	0x40023800

080076f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e049      	b.n	800779e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fd fb90 	bl	8004e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f000 fe20 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d001      	beq.n	80077c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e054      	b.n	800786a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a26      	ldr	r2, [pc, #152]	; (8007878 <HAL_TIM_Base_Start_IT+0xd0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d022      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d01d      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a22      	ldr	r2, [pc, #136]	; (800787c <HAL_TIM_Base_Start_IT+0xd4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d018      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a21      	ldr	r2, [pc, #132]	; (8007880 <HAL_TIM_Base_Start_IT+0xd8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d013      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1f      	ldr	r2, [pc, #124]	; (8007884 <HAL_TIM_Base_Start_IT+0xdc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00e      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <HAL_TIM_Base_Start_IT+0xe0>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d009      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1c      	ldr	r2, [pc, #112]	; (800788c <HAL_TIM_Base_Start_IT+0xe4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d004      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x80>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <HAL_TIM_Base_Start_IT+0xe8>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d115      	bne.n	8007854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	4b19      	ldr	r3, [pc, #100]	; (8007894 <HAL_TIM_Base_Start_IT+0xec>)
 8007830:	4013      	ands	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b06      	cmp	r3, #6
 8007838:	d015      	beq.n	8007866 <HAL_TIM_Base_Start_IT+0xbe>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007840:	d011      	beq.n	8007866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	e008      	b.n	8007866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e000      	b.n	8007868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40010400 	.word	0x40010400
 800788c:	40014000 	.word	0x40014000
 8007890:	40001800 	.word	0x40001800
 8007894:	00010007 	.word	0x00010007

08007898 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a1a      	ldr	r2, [r3, #32]
 80078b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10f      	bne.n	80078e0 <HAL_TIM_Base_Stop_IT+0x48>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6a1a      	ldr	r2, [r3, #32]
 80078c6:	f240 4344 	movw	r3, #1092	; 0x444
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d107      	bne.n	80078e0 <HAL_TIM_Base_Stop_IT+0x48>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e049      	b.n	800799c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f841 	bl	80079a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2202      	movs	r2, #2
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f000 fd21 	bl	800837c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d109      	bne.n	80079dc <HAL_TIM_PWM_Start+0x24>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	bf14      	ite	ne
 80079d4:	2301      	movne	r3, #1
 80079d6:	2300      	moveq	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	e03c      	b.n	8007a56 <HAL_TIM_PWM_Start+0x9e>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d109      	bne.n	80079f6 <HAL_TIM_PWM_Start+0x3e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	e02f      	b.n	8007a56 <HAL_TIM_PWM_Start+0x9e>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d109      	bne.n	8007a10 <HAL_TIM_PWM_Start+0x58>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e022      	b.n	8007a56 <HAL_TIM_PWM_Start+0x9e>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b0c      	cmp	r3, #12
 8007a14:	d109      	bne.n	8007a2a <HAL_TIM_PWM_Start+0x72>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	e015      	b.n	8007a56 <HAL_TIM_PWM_Start+0x9e>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d109      	bne.n	8007a44 <HAL_TIM_PWM_Start+0x8c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e008      	b.n	8007a56 <HAL_TIM_PWM_Start+0x9e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	bf14      	ite	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	2300      	moveq	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e092      	b.n	8007b84 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_PWM_Start+0xb6>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6c:	e023      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xfe>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_PWM_Start+0xc6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a7c:	e01b      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xfe>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Start+0xd6>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a8c:	e013      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xfe>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b0c      	cmp	r3, #12
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_PWM_Start+0xe6>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a9c:	e00b      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xfe>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start+0xf6>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aac:	e003      	b.n	8007ab6 <HAL_TIM_PWM_Start+0xfe>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2201      	movs	r2, #1
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 f888 	bl	8008bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a30      	ldr	r2, [pc, #192]	; (8007b8c <HAL_TIM_PWM_Start+0x1d4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <HAL_TIM_PWM_Start+0x120>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2f      	ldr	r2, [pc, #188]	; (8007b90 <HAL_TIM_PWM_Start+0x1d8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d101      	bne.n	8007adc <HAL_TIM_PWM_Start+0x124>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <HAL_TIM_PWM_Start+0x126>
 8007adc:	2300      	movs	r3, #0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a25      	ldr	r2, [pc, #148]	; (8007b8c <HAL_TIM_PWM_Start+0x1d4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d022      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b04:	d01d      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <HAL_TIM_PWM_Start+0x1dc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d018      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a20      	ldr	r2, [pc, #128]	; (8007b98 <HAL_TIM_PWM_Start+0x1e0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	; (8007b9c <HAL_TIM_PWM_Start+0x1e4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a19      	ldr	r2, [pc, #100]	; (8007b90 <HAL_TIM_PWM_Start+0x1d8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d009      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIM_PWM_Start+0x1e8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x18a>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a19      	ldr	r2, [pc, #100]	; (8007ba4 <HAL_TIM_PWM_Start+0x1ec>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d115      	bne.n	8007b6e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <HAL_TIM_PWM_Start+0x1f0>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b06      	cmp	r3, #6
 8007b52:	d015      	beq.n	8007b80 <HAL_TIM_PWM_Start+0x1c8>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5a:	d011      	beq.n	8007b80 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6c:	e008      	b.n	8007b80 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0201 	orr.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e000      	b.n	8007b82 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40014000 	.word	0x40014000
 8007ba4:	40001800 	.word	0x40001800
 8007ba8:	00010007 	.word	0x00010007

08007bac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 f808 	bl	8008bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a36      	ldr	r2, [pc, #216]	; (8007ca4 <HAL_TIM_PWM_Stop+0xf8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_TIM_PWM_Stop+0x2c>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a35      	ldr	r2, [pc, #212]	; (8007ca8 <HAL_TIM_PWM_Stop+0xfc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d101      	bne.n	8007bdc <HAL_TIM_PWM_Stop+0x30>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <HAL_TIM_PWM_Stop+0x32>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d017      	beq.n	8007c12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a1a      	ldr	r2, [r3, #32]
 8007be8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10f      	bne.n	8007c12 <HAL_TIM_PWM_Stop+0x66>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6a1a      	ldr	r2, [r3, #32]
 8007bf8:	f240 4344 	movw	r3, #1092	; 0x444
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d107      	bne.n	8007c12 <HAL_TIM_PWM_Stop+0x66>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a1a      	ldr	r2, [r3, #32]
 8007c18:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10f      	bne.n	8007c42 <HAL_TIM_PWM_Stop+0x96>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	f240 4344 	movw	r3, #1092	; 0x444
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <HAL_TIM_PWM_Stop+0x96>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0201 	bic.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_PWM_Stop+0xa6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c50:	e023      	b.n	8007c9a <HAL_TIM_PWM_Stop+0xee>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d104      	bne.n	8007c62 <HAL_TIM_PWM_Stop+0xb6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c60:	e01b      	b.n	8007c9a <HAL_TIM_PWM_Stop+0xee>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d104      	bne.n	8007c72 <HAL_TIM_PWM_Stop+0xc6>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c70:	e013      	b.n	8007c9a <HAL_TIM_PWM_Stop+0xee>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b0c      	cmp	r3, #12
 8007c76:	d104      	bne.n	8007c82 <HAL_TIM_PWM_Stop+0xd6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c80:	e00b      	b.n	8007c9a <HAL_TIM_PWM_Stop+0xee>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_PWM_Stop+0xe6>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c90:	e003      	b.n	8007c9a <HAL_TIM_PWM_Stop+0xee>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40010000 	.word	0x40010000
 8007ca8:	40010400 	.word	0x40010400

08007cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d122      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d11b      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0202 	mvn.w	r2, #2
 8007cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fb26 	bl	8008340 <HAL_TIM_IC_CaptureCallback>
 8007cf4:	e005      	b.n	8007d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb18 	bl	800832c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb29 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d122      	bne.n	8007d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d11b      	bne.n	8007d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0204 	mvn.w	r2, #4
 8007d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fafc 	bl	8008340 <HAL_TIM_IC_CaptureCallback>
 8007d48:	e005      	b.n	8007d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 faee 	bl	800832c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 faff 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d122      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d11b      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0208 	mvn.w	r2, #8
 8007d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fad2 	bl	8008340 <HAL_TIM_IC_CaptureCallback>
 8007d9c:	e005      	b.n	8007daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fac4 	bl	800832c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fad5 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d122      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 0310 	and.w	r3, r3, #16
 8007dc8:	2b10      	cmp	r3, #16
 8007dca:	d11b      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0210 	mvn.w	r2, #16
 8007dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2208      	movs	r2, #8
 8007dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 faa8 	bl	8008340 <HAL_TIM_IC_CaptureCallback>
 8007df0:	e005      	b.n	8007dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa9a 	bl	800832c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 faab 	bl	8008354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0201 	mvn.w	r2, #1
 8007e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fb f98c 	bl	8003148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	2b80      	cmp	r3, #128	; 0x80
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e48:	2b80      	cmp	r3, #128	; 0x80
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 ff7a 	bl	8008d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6a:	d10e      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	d107      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 ff6d 	bl	8008d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d10e      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d107      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa59 	bl	8008368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d10e      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d107      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f06f 0220 	mvn.w	r2, #32
 8007eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 ff2d 	bl	8008d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e0ff      	b.n	800810a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b14      	cmp	r3, #20
 8007f16:	f200 80f0 	bhi.w	80080fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	080080fb 	.word	0x080080fb
 8007f28:	080080fb 	.word	0x080080fb
 8007f2c:	080080fb 	.word	0x080080fb
 8007f30:	08007fb5 	.word	0x08007fb5
 8007f34:	080080fb 	.word	0x080080fb
 8007f38:	080080fb 	.word	0x080080fb
 8007f3c:	080080fb 	.word	0x080080fb
 8007f40:	08007ff7 	.word	0x08007ff7
 8007f44:	080080fb 	.word	0x080080fb
 8007f48:	080080fb 	.word	0x080080fb
 8007f4c:	080080fb 	.word	0x080080fb
 8007f50:	08008037 	.word	0x08008037
 8007f54:	080080fb 	.word	0x080080fb
 8007f58:	080080fb 	.word	0x080080fb
 8007f5c:	080080fb 	.word	0x080080fb
 8007f60:	08008079 	.word	0x08008079
 8007f64:	080080fb 	.word	0x080080fb
 8007f68:	080080fb 	.word	0x080080fb
 8007f6c:	080080fb 	.word	0x080080fb
 8007f70:	080080b9 	.word	0x080080b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fa9e 	bl	80084bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0204 	bic.w	r2, r2, #4
 8007f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6999      	ldr	r1, [r3, #24]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	619a      	str	r2, [r3, #24]
      break;
 8007fb2:	e0a5      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 faf0 	bl	80085a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6999      	ldr	r1, [r3, #24]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	021a      	lsls	r2, r3, #8
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	619a      	str	r2, [r3, #24]
      break;
 8007ff4:	e084      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fb47 	bl	8008690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0208 	orr.w	r2, r2, #8
 8008010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0204 	bic.w	r2, r2, #4
 8008020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69d9      	ldr	r1, [r3, #28]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	61da      	str	r2, [r3, #28]
      break;
 8008034:	e064      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fb9d 	bl	800877c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69d9      	ldr	r1, [r3, #28]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	021a      	lsls	r2, r3, #8
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	61da      	str	r2, [r3, #28]
      break;
 8008076:	e043      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68b9      	ldr	r1, [r7, #8]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fbd4 	bl	800882c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0208 	orr.w	r2, r2, #8
 8008092:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0204 	bic.w	r2, r2, #4
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080b6:	e023      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fc06 	bl	80088d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	021a      	lsls	r2, r3, #8
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080f8:	e002      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
      break;
 80080fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop

08008114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_TIM_ConfigClockSource+0x1c>
 800812c:	2302      	movs	r3, #2
 800812e:	e0b4      	b.n	800829a <HAL_TIM_ConfigClockSource+0x186>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4b56      	ldr	r3, [pc, #344]	; (80082a4 <HAL_TIM_ConfigClockSource+0x190>)
 800814c:	4013      	ands	r3, r2
 800814e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008168:	d03e      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0xd4>
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816e:	f200 8087 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	f000 8086 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x172>
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817e:	d87f      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 8008180:	2b70      	cmp	r3, #112	; 0x70
 8008182:	d01a      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0xa6>
 8008184:	2b70      	cmp	r3, #112	; 0x70
 8008186:	d87b      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 8008188:	2b60      	cmp	r3, #96	; 0x60
 800818a:	d050      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x11a>
 800818c:	2b60      	cmp	r3, #96	; 0x60
 800818e:	d877      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 8008190:	2b50      	cmp	r3, #80	; 0x50
 8008192:	d03c      	beq.n	800820e <HAL_TIM_ConfigClockSource+0xfa>
 8008194:	2b50      	cmp	r3, #80	; 0x50
 8008196:	d873      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 8008198:	2b40      	cmp	r3, #64	; 0x40
 800819a:	d058      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x13a>
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	d86f      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 80081a0:	2b30      	cmp	r3, #48	; 0x30
 80081a2:	d064      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x15a>
 80081a4:	2b30      	cmp	r3, #48	; 0x30
 80081a6:	d86b      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d060      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x15a>
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d867      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d05c      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x15a>
 80081b4:	2b10      	cmp	r3, #16
 80081b6:	d05a      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x15a>
 80081b8:	e062      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6899      	ldr	r1, [r3, #8]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f000 fce3 	bl	8008b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	609a      	str	r2, [r3, #8]
      break;
 80081e6:	e04f      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	6899      	ldr	r1, [r3, #8]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f000 fccc 	bl	8008b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800820a:	609a      	str	r2, [r3, #8]
      break;
 800820c:	e03c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	f000 fc40 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2150      	movs	r1, #80	; 0x50
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fc99 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 800822c:	e02c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6859      	ldr	r1, [r3, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	461a      	mov	r2, r3
 800823c:	f000 fc5f 	bl	8008afe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2160      	movs	r1, #96	; 0x60
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fc89 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 800824c:	e01c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6859      	ldr	r1, [r3, #4]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	461a      	mov	r2, r3
 800825c:	f000 fc20 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2140      	movs	r1, #64	; 0x40
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fc79 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 800826c:	e00c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f000 fc70 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 800827e:	e003      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
      break;
 8008284:	e000      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	fffeff88 	.word	0xfffeff88

080082a8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80082bc:	2302      	movs	r3, #2
 80082be:	e031      	b.n	8008324 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fb50 	bl	8008978 <TIM_SlaveTimer_SetConfig>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e018      	b.n	8008324 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008300:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008310:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a40      	ldr	r2, [pc, #256]	; (8008490 <TIM_Base_SetConfig+0x114>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d013      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839a:	d00f      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a3d      	ldr	r2, [pc, #244]	; (8008494 <TIM_Base_SetConfig+0x118>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00b      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a3c      	ldr	r2, [pc, #240]	; (8008498 <TIM_Base_SetConfig+0x11c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d007      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a3b      	ldr	r2, [pc, #236]	; (800849c <TIM_Base_SetConfig+0x120>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d003      	beq.n	80083bc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a3a      	ldr	r2, [pc, #232]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d108      	bne.n	80083ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a2f      	ldr	r2, [pc, #188]	; (8008490 <TIM_Base_SetConfig+0x114>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d02b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d027      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <TIM_Base_SetConfig+0x118>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d023      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <TIM_Base_SetConfig+0x11c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d01f      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2a      	ldr	r2, [pc, #168]	; (800849c <TIM_Base_SetConfig+0x120>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a28      	ldr	r2, [pc, #160]	; (80084a4 <TIM_Base_SetConfig+0x128>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a27      	ldr	r2, [pc, #156]	; (80084a8 <TIM_Base_SetConfig+0x12c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a26      	ldr	r2, [pc, #152]	; (80084ac <TIM_Base_SetConfig+0x130>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <TIM_Base_SetConfig+0x134>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <TIM_Base_SetConfig+0x138>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a23      	ldr	r2, [pc, #140]	; (80084b8 <TIM_Base_SetConfig+0x13c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <TIM_Base_SetConfig+0x114>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d003      	beq.n	8008474 <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <TIM_Base_SetConfig+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d103      	bne.n	800847c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691a      	ldr	r2, [r3, #16]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	615a      	str	r2, [r3, #20]
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40010000 	.word	0x40010000
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40010400 	.word	0x40010400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800
 80084b0:	40001800 	.word	0x40001800
 80084b4:	40001c00 	.word	0x40001c00
 80084b8:	40002000 	.word	0x40002000

080084bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4b2b      	ldr	r3, [pc, #172]	; (8008594 <TIM_OC1_SetConfig+0xd8>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 0302 	bic.w	r3, r3, #2
 8008504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a21      	ldr	r2, [pc, #132]	; (8008598 <TIM_OC1_SetConfig+0xdc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_OC1_SetConfig+0x64>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a20      	ldr	r2, [pc, #128]	; (800859c <TIM_OC1_SetConfig+0xe0>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d10c      	bne.n	800853a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f023 0308 	bic.w	r3, r3, #8
 8008526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 0304 	bic.w	r3, r3, #4
 8008538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a16      	ldr	r2, [pc, #88]	; (8008598 <TIM_OC1_SetConfig+0xdc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d003      	beq.n	800854a <TIM_OC1_SetConfig+0x8e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a15      	ldr	r2, [pc, #84]	; (800859c <TIM_OC1_SetConfig+0xe0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d111      	bne.n	800856e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	fffeff8f 	.word	0xfffeff8f
 8008598:	40010000 	.word	0x40010000
 800859c:	40010400 	.word	0x40010400

080085a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0210 	bic.w	r2, r3, #16
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4b2e      	ldr	r3, [pc, #184]	; (8008684 <TIM_OC2_SetConfig+0xe4>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f023 0320 	bic.w	r3, r3, #32
 80085ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a23      	ldr	r2, [pc, #140]	; (8008688 <TIM_OC2_SetConfig+0xe8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <TIM_OC2_SetConfig+0x68>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a22      	ldr	r2, [pc, #136]	; (800868c <TIM_OC2_SetConfig+0xec>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d10d      	bne.n	8008624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800860e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <TIM_OC2_SetConfig+0xe8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d003      	beq.n	8008634 <TIM_OC2_SetConfig+0x94>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a17      	ldr	r2, [pc, #92]	; (800868c <TIM_OC2_SetConfig+0xec>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d113      	bne.n	800865c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800863a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	4313      	orrs	r3, r2
 800864e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	feff8fff 	.word	0xfeff8fff
 8008688:	40010000 	.word	0x40010000
 800868c:	40010400 	.word	0x40010400

08008690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <TIM_OC3_SetConfig+0xe0>)
 80086bc:	4013      	ands	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	021b      	lsls	r3, r3, #8
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a22      	ldr	r2, [pc, #136]	; (8008774 <TIM_OC3_SetConfig+0xe4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d003      	beq.n	80086f6 <TIM_OC3_SetConfig+0x66>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <TIM_OC3_SetConfig+0xe8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d10d      	bne.n	8008712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a17      	ldr	r2, [pc, #92]	; (8008774 <TIM_OC3_SetConfig+0xe4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_OC3_SetConfig+0x92>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a16      	ldr	r2, [pc, #88]	; (8008778 <TIM_OC3_SetConfig+0xe8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d113      	bne.n	800874a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	621a      	str	r2, [r3, #32]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	fffeff8f 	.word	0xfffeff8f
 8008774:	40010000 	.word	0x40010000
 8008778:	40010400 	.word	0x40010400

0800877c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <TIM_OC4_SetConfig+0xa4>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	031b      	lsls	r3, r3, #12
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a13      	ldr	r2, [pc, #76]	; (8008824 <TIM_OC4_SetConfig+0xa8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_OC4_SetConfig+0x68>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a12      	ldr	r2, [pc, #72]	; (8008828 <TIM_OC4_SetConfig+0xac>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d109      	bne.n	80087f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	019b      	lsls	r3, r3, #6
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	621a      	str	r2, [r3, #32]
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	feff8fff 	.word	0xfeff8fff
 8008824:	40010000 	.word	0x40010000
 8008828:	40010400 	.word	0x40010400

0800882c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4b1b      	ldr	r3, [pc, #108]	; (80088c4 <TIM_OC5_SetConfig+0x98>)
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800886c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <TIM_OC5_SetConfig+0x9c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_OC5_SetConfig+0x5e>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a11      	ldr	r2, [pc, #68]	; (80088cc <TIM_OC5_SetConfig+0xa0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d109      	bne.n	800889e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	621a      	str	r2, [r3, #32]
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	fffeff8f 	.word	0xfffeff8f
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40010400 	.word	0x40010400

080088d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4b1c      	ldr	r3, [pc, #112]	; (800896c <TIM_OC6_SetConfig+0x9c>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	051b      	lsls	r3, r3, #20
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a13      	ldr	r2, [pc, #76]	; (8008970 <TIM_OC6_SetConfig+0xa0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_OC6_SetConfig+0x60>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a12      	ldr	r2, [pc, #72]	; (8008974 <TIM_OC6_SetConfig+0xa4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d109      	bne.n	8008944 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008936:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	029b      	lsls	r3, r3, #10
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	621a      	str	r2, [r3, #32]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	feff8fff 	.word	0xfeff8fff
 8008970:	40010000 	.word	0x40010000
 8008974:	40010400 	.word	0x40010400

08008978 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008994:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	4313      	orrs	r3, r2
 800899e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4b3e      	ldr	r3, [pc, #248]	; (8008a9c <TIM_SlaveTimer_SetConfig+0x124>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b70      	cmp	r3, #112	; 0x70
 80089c0:	d01a      	beq.n	80089f8 <TIM_SlaveTimer_SetConfig+0x80>
 80089c2:	2b70      	cmp	r3, #112	; 0x70
 80089c4:	d860      	bhi.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
 80089c6:	2b60      	cmp	r3, #96	; 0x60
 80089c8:	d054      	beq.n	8008a74 <TIM_SlaveTimer_SetConfig+0xfc>
 80089ca:	2b60      	cmp	r3, #96	; 0x60
 80089cc:	d85c      	bhi.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
 80089ce:	2b50      	cmp	r3, #80	; 0x50
 80089d0:	d046      	beq.n	8008a60 <TIM_SlaveTimer_SetConfig+0xe8>
 80089d2:	2b50      	cmp	r3, #80	; 0x50
 80089d4:	d858      	bhi.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d019      	beq.n	8008a0e <TIM_SlaveTimer_SetConfig+0x96>
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d854      	bhi.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
 80089de:	2b30      	cmp	r3, #48	; 0x30
 80089e0:	d055      	beq.n	8008a8e <TIM_SlaveTimer_SetConfig+0x116>
 80089e2:	2b30      	cmp	r3, #48	; 0x30
 80089e4:	d850      	bhi.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d051      	beq.n	8008a8e <TIM_SlaveTimer_SetConfig+0x116>
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	d84c      	bhi.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d04d      	beq.n	8008a8e <TIM_SlaveTimer_SetConfig+0x116>
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	d04b      	beq.n	8008a8e <TIM_SlaveTimer_SetConfig+0x116>
 80089f6:	e047      	b.n	8008a88 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68d9      	ldr	r1, [r3, #12]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f000 f8c4 	bl	8008b94 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008a0c:	e040      	b.n	8008a90 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b05      	cmp	r3, #5
 8008a14:	d101      	bne.n	8008a1a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e03b      	b.n	8008a92 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0201 	bic.w	r2, r2, #1
 8008a30:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a40:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
      break;
 8008a5e:	e017      	b.n	8008a90 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	6899      	ldr	r1, [r3, #8]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f000 f817 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008a72:	e00d      	b.n	8008a90 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6899      	ldr	r1, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	461a      	mov	r2, r3
 8008a82:	f000 f83c 	bl	8008afe <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008a86:	e003      	b.n	8008a90 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a8c:	e000      	b.n	8008a90 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008a8e:	bf00      	nop
  }

  return status;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	fffefff8 	.word	0xfffefff8

08008aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f023 030a 	bic.w	r3, r3, #10
 8008adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	f023 0210 	bic.w	r2, r3, #16
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	031b      	lsls	r3, r3, #12
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	621a      	str	r2, [r3, #32]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f043 0307 	orr.w	r3, r3, #7
 8008b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	609a      	str	r2, [r3, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	021a      	lsls	r2, r3, #8
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	609a      	str	r2, [r3, #8]
}
 8008bc8:	bf00      	nop
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 031f 	and.w	r3, r3, #31
 8008be6:	2201      	movs	r2, #1
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	401a      	ands	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a1a      	ldr	r2, [r3, #32]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
}
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e06d      	b.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a30      	ldr	r2, [pc, #192]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d004      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2f      	ldr	r2, [pc, #188]	; (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d108      	bne.n	8008c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a20      	ldr	r2, [pc, #128]	; (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008caa:	d01d      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1d      	ldr	r2, [pc, #116]	; (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d018      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	; (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a15      	ldr	r2, [pc, #84]	; (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a16      	ldr	r2, [pc, #88]	; (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d10c      	bne.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40010400 	.word	0x40010400
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40001800 	.word	0x40001800

08008d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e040      	b.n	8008e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d106      	bne.n	8008da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fc f948 	bl	8005030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2224      	movs	r2, #36	; 0x24
 8008da4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0201 	bic.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fc18 	bl	80095ec <UART_SetConfig>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e022      	b.n	8008e0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fe70 	bl	8009ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fef7 	bl	8009bf8 <UART_CheckIdleState>
 8008e0a:	4603      	mov	r3, r0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	f040 8081 	bne.w	8008f30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_UART_Transmit+0x26>
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e079      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_UART_Transmit+0x38>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e072      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2221      	movs	r2, #33	; 0x21
 8008e60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e62:	f7fc f997 	bl	8005194 <HAL_GetTick>
 8008e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	88fa      	ldrh	r2, [r7, #6]
 8008e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e80:	d108      	bne.n	8008e94 <HAL_UART_Transmit+0x80>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d104      	bne.n	8008e94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	61bb      	str	r3, [r7, #24]
 8008e92:	e003      	b.n	8008e9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008ea4:	e02c      	b.n	8008f00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2180      	movs	r1, #128	; 0x80
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 feea 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e038      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	3302      	adds	r3, #2
 8008eda:	61bb      	str	r3, [r7, #24]
 8008edc:	e007      	b.n	8008eee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1cc      	bne.n	8008ea6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2200      	movs	r2, #0
 8008f14:	2140      	movs	r1, #64	; 0x40
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 feb7 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e005      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e000      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008f30:	2302      	movs	r3, #2
  }
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b08a      	sub	sp, #40	; 0x28
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	4613      	mov	r3, r2
 8008f46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d13d      	bne.n	8008fcc <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <HAL_UART_Receive_IT+0x22>
 8008f56:	88fb      	ldrh	r3, [r7, #6]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e036      	b.n	8008fce <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Receive_IT+0x34>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e02f      	b.n	8008fce <HAL_UART_Receive_IT+0x94>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d018      	beq.n	8008fbc <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	613b      	str	r3, [r7, #16]
   return(result);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	623b      	str	r3, [r7, #32]
 8008faa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	69f9      	ldr	r1, [r7, #28]
 8008fae:	6a3a      	ldr	r2, [r7, #32]
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e6      	bne.n	8008f8a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 ff26 	bl	8009e14 <UART_Start_Receive_IT>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	e000      	b.n	8008fce <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fcc:	2302      	movs	r3, #2
  }
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b0ba      	sub	sp, #232	; 0xe8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ffe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009002:	f640 030f 	movw	r3, #2063	; 0x80f
 8009006:	4013      	ands	r3, r2
 8009008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800900c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d115      	bne.n	8009040 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00f      	beq.n	8009040 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 82a4 	beq.w	800957e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
      }
      return;
 800903e:	e29e      	b.n	800957e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 8117 	beq.w	8009278 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800904a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009056:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800905a:	4b85      	ldr	r3, [pc, #532]	; (8009270 <HAL_UART_IRQHandler+0x298>)
 800905c:	4013      	ands	r3, r2
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 810a 	beq.w	8009278 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d011      	beq.n	8009094 <HAL_UART_IRQHandler+0xbc>
 8009070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2201      	movs	r2, #1
 8009082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800908a:	f043 0201 	orr.w	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d011      	beq.n	80090c4 <HAL_UART_IRQHandler+0xec>
 80090a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2202      	movs	r2, #2
 80090b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ba:	f043 0204 	orr.w	r2, r3, #4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d011      	beq.n	80090f4 <HAL_UART_IRQHandler+0x11c>
 80090d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2204      	movs	r2, #4
 80090e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ea:	f043 0202 	orr.w	r2, r3, #2
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f8:	f003 0308 	and.w	r3, r3, #8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d017      	beq.n	8009130 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800910c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009110:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00b      	beq.n	8009130 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2208      	movs	r2, #8
 800911e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009126:	f043 0208 	orr.w	r2, r3, #8
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009138:	2b00      	cmp	r3, #0
 800913a:	d012      	beq.n	8009162 <HAL_UART_IRQHandler+0x18a>
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00c      	beq.n	8009162 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009158:	f043 0220 	orr.w	r2, r3, #32
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 820a 	beq.w	8009582 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800916e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00d      	beq.n	8009196 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800917a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800919c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091aa:	2b40      	cmp	r3, #64	; 0x40
 80091ac:	d005      	beq.n	80091ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d04f      	beq.n	800925a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fef4 	bl	8009fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d141      	bne.n	8009252 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3308      	adds	r3, #8
 80091f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1d9      	bne.n	80091ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009226:	4a13      	ldr	r2, [pc, #76]	; (8009274 <HAL_UART_IRQHandler+0x29c>)
 8009228:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922e:	4618      	mov	r0, r3
 8009230:	f7fc f90e 	bl	8005450 <HAL_DMA_Abort_IT>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d017      	beq.n	800926a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009248:	e00f      	b.n	800926a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f9ae 	bl	80095ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009250:	e00b      	b.n	800926a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f9aa 	bl	80095ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009258:	e007      	b.n	800926a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f9a6 	bl	80095ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009268:	e18b      	b.n	8009582 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800926a:	bf00      	nop
    return;
 800926c:	e189      	b.n	8009582 <HAL_UART_IRQHandler+0x5aa>
 800926e:	bf00      	nop
 8009270:	04000120 	.word	0x04000120
 8009274:	0800a06f 	.word	0x0800a06f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927c:	2b01      	cmp	r3, #1
 800927e:	f040 8144 	bne.w	800950a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 813d 	beq.w	800950a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 8136 	beq.w	800950a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2210      	movs	r2, #16
 80092a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b40      	cmp	r3, #64	; 0x40
 80092b2:	f040 80b2 	bne.w	800941a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 815d 	beq.w	8009586 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80092d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092d6:	429a      	cmp	r2, r3
 80092d8:	f080 8155 	bcs.w	8009586 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f0:	f000 8085 	beq.w	80093fe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800930c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800931e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009322:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800932a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1da      	bne.n	80092f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800934e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3308      	adds	r3, #8
 800935e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800936a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e1      	bne.n	800933e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800938a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800938c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800939e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e3      	bne.n	800937a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ce:	f023 0310 	bic.w	r3, r3, #16
 80093d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80093e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e4      	bne.n	80093be <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fb ffb9 	bl	8005370 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800940a:	b29b      	uxth	r3, r3
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	b29b      	uxth	r3, r3
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f8d4 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009418:	e0b5      	b.n	8009586 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009426:	b29b      	uxth	r3, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 80a7 	beq.w	800958a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800943c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 80a2 	beq.w	800958a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800945a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009468:	647b      	str	r3, [r7, #68]	; 0x44
 800946a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800946e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e4      	bne.n	8009446 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3308      	adds	r3, #8
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	623b      	str	r3, [r7, #32]
   return(result);
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094a0:	633a      	str	r2, [r7, #48]	; 0x30
 80094a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e3      	bne.n	800947c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0310 	bic.w	r3, r3, #16
 80094da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094e8:	61fb      	str	r3, [r7, #28]
 80094ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	617b      	str	r3, [r7, #20]
   return(result);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e4      	bne.n	80094c6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f85c 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009508:	e03f      	b.n	800958a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00e      	beq.n	8009534 <HAL_UART_IRQHandler+0x55c>
 8009516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800951a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d008      	beq.n	8009534 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800952a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f853 	bl	80095d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009532:	e02d      	b.n	8009590 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00e      	beq.n	800955e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009548:	2b00      	cmp	r3, #0
 800954a:	d008      	beq.n	800955e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01c      	beq.n	800958e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	4798      	blx	r3
    }
    return;
 800955c:	e017      	b.n	800958e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800955e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009566:	2b00      	cmp	r3, #0
 8009568:	d012      	beq.n	8009590 <HAL_UART_IRQHandler+0x5b8>
 800956a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800956e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00c      	beq.n	8009590 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fd8f 	bl	800a09a <UART_EndTransmit_IT>
    return;
 800957c:	e008      	b.n	8009590 <HAL_UART_IRQHandler+0x5b8>
      return;
 800957e:	bf00      	nop
 8009580:	e006      	b.n	8009590 <HAL_UART_IRQHandler+0x5b8>
    return;
 8009582:	bf00      	nop
 8009584:	e004      	b.n	8009590 <HAL_UART_IRQHandler+0x5b8>
      return;
 8009586:	bf00      	nop
 8009588:	e002      	b.n	8009590 <HAL_UART_IRQHandler+0x5b8>
      return;
 800958a:	bf00      	nop
 800958c:	e000      	b.n	8009590 <HAL_UART_IRQHandler+0x5b8>
    return;
 800958e:	bf00      	nop
  }

}
 8009590:	37e8      	adds	r7, #232	; 0xe8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop

08009598 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b088      	sub	sp, #32
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	4ba6      	ldr	r3, [pc, #664]	; (80098b0 <UART_SetConfig+0x2c4>)
 8009618:	4013      	ands	r3, r2
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	6979      	ldr	r1, [r7, #20]
 8009620:	430b      	orrs	r3, r1
 8009622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	430a      	orrs	r2, r1
 800965c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a94      	ldr	r2, [pc, #592]	; (80098b4 <UART_SetConfig+0x2c8>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d120      	bne.n	80096aa <UART_SetConfig+0xbe>
 8009668:	4b93      	ldr	r3, [pc, #588]	; (80098b8 <UART_SetConfig+0x2cc>)
 800966a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d816      	bhi.n	80096a4 <UART_SetConfig+0xb8>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <UART_SetConfig+0x90>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800968d 	.word	0x0800968d
 8009680:	08009699 	.word	0x08009699
 8009684:	08009693 	.word	0x08009693
 8009688:	0800969f 	.word	0x0800969f
 800968c:	2301      	movs	r3, #1
 800968e:	77fb      	strb	r3, [r7, #31]
 8009690:	e150      	b.n	8009934 <UART_SetConfig+0x348>
 8009692:	2302      	movs	r3, #2
 8009694:	77fb      	strb	r3, [r7, #31]
 8009696:	e14d      	b.n	8009934 <UART_SetConfig+0x348>
 8009698:	2304      	movs	r3, #4
 800969a:	77fb      	strb	r3, [r7, #31]
 800969c:	e14a      	b.n	8009934 <UART_SetConfig+0x348>
 800969e:	2308      	movs	r3, #8
 80096a0:	77fb      	strb	r3, [r7, #31]
 80096a2:	e147      	b.n	8009934 <UART_SetConfig+0x348>
 80096a4:	2310      	movs	r3, #16
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e144      	b.n	8009934 <UART_SetConfig+0x348>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a83      	ldr	r2, [pc, #524]	; (80098bc <UART_SetConfig+0x2d0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d132      	bne.n	800971a <UART_SetConfig+0x12e>
 80096b4:	4b80      	ldr	r3, [pc, #512]	; (80098b8 <UART_SetConfig+0x2cc>)
 80096b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ba:	f003 030c 	and.w	r3, r3, #12
 80096be:	2b0c      	cmp	r3, #12
 80096c0:	d828      	bhi.n	8009714 <UART_SetConfig+0x128>
 80096c2:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0xdc>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096fd 	.word	0x080096fd
 80096cc:	08009715 	.word	0x08009715
 80096d0:	08009715 	.word	0x08009715
 80096d4:	08009715 	.word	0x08009715
 80096d8:	08009709 	.word	0x08009709
 80096dc:	08009715 	.word	0x08009715
 80096e0:	08009715 	.word	0x08009715
 80096e4:	08009715 	.word	0x08009715
 80096e8:	08009703 	.word	0x08009703
 80096ec:	08009715 	.word	0x08009715
 80096f0:	08009715 	.word	0x08009715
 80096f4:	08009715 	.word	0x08009715
 80096f8:	0800970f 	.word	0x0800970f
 80096fc:	2300      	movs	r3, #0
 80096fe:	77fb      	strb	r3, [r7, #31]
 8009700:	e118      	b.n	8009934 <UART_SetConfig+0x348>
 8009702:	2302      	movs	r3, #2
 8009704:	77fb      	strb	r3, [r7, #31]
 8009706:	e115      	b.n	8009934 <UART_SetConfig+0x348>
 8009708:	2304      	movs	r3, #4
 800970a:	77fb      	strb	r3, [r7, #31]
 800970c:	e112      	b.n	8009934 <UART_SetConfig+0x348>
 800970e:	2308      	movs	r3, #8
 8009710:	77fb      	strb	r3, [r7, #31]
 8009712:	e10f      	b.n	8009934 <UART_SetConfig+0x348>
 8009714:	2310      	movs	r3, #16
 8009716:	77fb      	strb	r3, [r7, #31]
 8009718:	e10c      	b.n	8009934 <UART_SetConfig+0x348>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a68      	ldr	r2, [pc, #416]	; (80098c0 <UART_SetConfig+0x2d4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d120      	bne.n	8009766 <UART_SetConfig+0x17a>
 8009724:	4b64      	ldr	r3, [pc, #400]	; (80098b8 <UART_SetConfig+0x2cc>)
 8009726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800972a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800972e:	2b30      	cmp	r3, #48	; 0x30
 8009730:	d013      	beq.n	800975a <UART_SetConfig+0x16e>
 8009732:	2b30      	cmp	r3, #48	; 0x30
 8009734:	d814      	bhi.n	8009760 <UART_SetConfig+0x174>
 8009736:	2b20      	cmp	r3, #32
 8009738:	d009      	beq.n	800974e <UART_SetConfig+0x162>
 800973a:	2b20      	cmp	r3, #32
 800973c:	d810      	bhi.n	8009760 <UART_SetConfig+0x174>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <UART_SetConfig+0x15c>
 8009742:	2b10      	cmp	r3, #16
 8009744:	d006      	beq.n	8009754 <UART_SetConfig+0x168>
 8009746:	e00b      	b.n	8009760 <UART_SetConfig+0x174>
 8009748:	2300      	movs	r3, #0
 800974a:	77fb      	strb	r3, [r7, #31]
 800974c:	e0f2      	b.n	8009934 <UART_SetConfig+0x348>
 800974e:	2302      	movs	r3, #2
 8009750:	77fb      	strb	r3, [r7, #31]
 8009752:	e0ef      	b.n	8009934 <UART_SetConfig+0x348>
 8009754:	2304      	movs	r3, #4
 8009756:	77fb      	strb	r3, [r7, #31]
 8009758:	e0ec      	b.n	8009934 <UART_SetConfig+0x348>
 800975a:	2308      	movs	r3, #8
 800975c:	77fb      	strb	r3, [r7, #31]
 800975e:	e0e9      	b.n	8009934 <UART_SetConfig+0x348>
 8009760:	2310      	movs	r3, #16
 8009762:	77fb      	strb	r3, [r7, #31]
 8009764:	e0e6      	b.n	8009934 <UART_SetConfig+0x348>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a56      	ldr	r2, [pc, #344]	; (80098c4 <UART_SetConfig+0x2d8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d120      	bne.n	80097b2 <UART_SetConfig+0x1c6>
 8009770:	4b51      	ldr	r3, [pc, #324]	; (80098b8 <UART_SetConfig+0x2cc>)
 8009772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800977a:	2bc0      	cmp	r3, #192	; 0xc0
 800977c:	d013      	beq.n	80097a6 <UART_SetConfig+0x1ba>
 800977e:	2bc0      	cmp	r3, #192	; 0xc0
 8009780:	d814      	bhi.n	80097ac <UART_SetConfig+0x1c0>
 8009782:	2b80      	cmp	r3, #128	; 0x80
 8009784:	d009      	beq.n	800979a <UART_SetConfig+0x1ae>
 8009786:	2b80      	cmp	r3, #128	; 0x80
 8009788:	d810      	bhi.n	80097ac <UART_SetConfig+0x1c0>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <UART_SetConfig+0x1a8>
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d006      	beq.n	80097a0 <UART_SetConfig+0x1b4>
 8009792:	e00b      	b.n	80097ac <UART_SetConfig+0x1c0>
 8009794:	2300      	movs	r3, #0
 8009796:	77fb      	strb	r3, [r7, #31]
 8009798:	e0cc      	b.n	8009934 <UART_SetConfig+0x348>
 800979a:	2302      	movs	r3, #2
 800979c:	77fb      	strb	r3, [r7, #31]
 800979e:	e0c9      	b.n	8009934 <UART_SetConfig+0x348>
 80097a0:	2304      	movs	r3, #4
 80097a2:	77fb      	strb	r3, [r7, #31]
 80097a4:	e0c6      	b.n	8009934 <UART_SetConfig+0x348>
 80097a6:	2308      	movs	r3, #8
 80097a8:	77fb      	strb	r3, [r7, #31]
 80097aa:	e0c3      	b.n	8009934 <UART_SetConfig+0x348>
 80097ac:	2310      	movs	r3, #16
 80097ae:	77fb      	strb	r3, [r7, #31]
 80097b0:	e0c0      	b.n	8009934 <UART_SetConfig+0x348>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a44      	ldr	r2, [pc, #272]	; (80098c8 <UART_SetConfig+0x2dc>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d125      	bne.n	8009808 <UART_SetConfig+0x21c>
 80097bc:	4b3e      	ldr	r3, [pc, #248]	; (80098b8 <UART_SetConfig+0x2cc>)
 80097be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ca:	d017      	beq.n	80097fc <UART_SetConfig+0x210>
 80097cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097d0:	d817      	bhi.n	8009802 <UART_SetConfig+0x216>
 80097d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d6:	d00b      	beq.n	80097f0 <UART_SetConfig+0x204>
 80097d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097dc:	d811      	bhi.n	8009802 <UART_SetConfig+0x216>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <UART_SetConfig+0x1fe>
 80097e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e6:	d006      	beq.n	80097f6 <UART_SetConfig+0x20a>
 80097e8:	e00b      	b.n	8009802 <UART_SetConfig+0x216>
 80097ea:	2300      	movs	r3, #0
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e0a1      	b.n	8009934 <UART_SetConfig+0x348>
 80097f0:	2302      	movs	r3, #2
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e09e      	b.n	8009934 <UART_SetConfig+0x348>
 80097f6:	2304      	movs	r3, #4
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e09b      	b.n	8009934 <UART_SetConfig+0x348>
 80097fc:	2308      	movs	r3, #8
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e098      	b.n	8009934 <UART_SetConfig+0x348>
 8009802:	2310      	movs	r3, #16
 8009804:	77fb      	strb	r3, [r7, #31]
 8009806:	e095      	b.n	8009934 <UART_SetConfig+0x348>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a2f      	ldr	r2, [pc, #188]	; (80098cc <UART_SetConfig+0x2e0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d125      	bne.n	800985e <UART_SetConfig+0x272>
 8009812:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <UART_SetConfig+0x2cc>)
 8009814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009818:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800981c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009820:	d017      	beq.n	8009852 <UART_SetConfig+0x266>
 8009822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009826:	d817      	bhi.n	8009858 <UART_SetConfig+0x26c>
 8009828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800982c:	d00b      	beq.n	8009846 <UART_SetConfig+0x25a>
 800982e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009832:	d811      	bhi.n	8009858 <UART_SetConfig+0x26c>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <UART_SetConfig+0x254>
 8009838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983c:	d006      	beq.n	800984c <UART_SetConfig+0x260>
 800983e:	e00b      	b.n	8009858 <UART_SetConfig+0x26c>
 8009840:	2301      	movs	r3, #1
 8009842:	77fb      	strb	r3, [r7, #31]
 8009844:	e076      	b.n	8009934 <UART_SetConfig+0x348>
 8009846:	2302      	movs	r3, #2
 8009848:	77fb      	strb	r3, [r7, #31]
 800984a:	e073      	b.n	8009934 <UART_SetConfig+0x348>
 800984c:	2304      	movs	r3, #4
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e070      	b.n	8009934 <UART_SetConfig+0x348>
 8009852:	2308      	movs	r3, #8
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e06d      	b.n	8009934 <UART_SetConfig+0x348>
 8009858:	2310      	movs	r3, #16
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e06a      	b.n	8009934 <UART_SetConfig+0x348>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <UART_SetConfig+0x2e4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d138      	bne.n	80098da <UART_SetConfig+0x2ee>
 8009868:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <UART_SetConfig+0x2cc>)
 800986a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009876:	d017      	beq.n	80098a8 <UART_SetConfig+0x2bc>
 8009878:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800987c:	d82a      	bhi.n	80098d4 <UART_SetConfig+0x2e8>
 800987e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009882:	d00b      	beq.n	800989c <UART_SetConfig+0x2b0>
 8009884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009888:	d824      	bhi.n	80098d4 <UART_SetConfig+0x2e8>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <UART_SetConfig+0x2aa>
 800988e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009892:	d006      	beq.n	80098a2 <UART_SetConfig+0x2b6>
 8009894:	e01e      	b.n	80098d4 <UART_SetConfig+0x2e8>
 8009896:	2300      	movs	r3, #0
 8009898:	77fb      	strb	r3, [r7, #31]
 800989a:	e04b      	b.n	8009934 <UART_SetConfig+0x348>
 800989c:	2302      	movs	r3, #2
 800989e:	77fb      	strb	r3, [r7, #31]
 80098a0:	e048      	b.n	8009934 <UART_SetConfig+0x348>
 80098a2:	2304      	movs	r3, #4
 80098a4:	77fb      	strb	r3, [r7, #31]
 80098a6:	e045      	b.n	8009934 <UART_SetConfig+0x348>
 80098a8:	2308      	movs	r3, #8
 80098aa:	77fb      	strb	r3, [r7, #31]
 80098ac:	e042      	b.n	8009934 <UART_SetConfig+0x348>
 80098ae:	bf00      	nop
 80098b0:	efff69f3 	.word	0xefff69f3
 80098b4:	40011000 	.word	0x40011000
 80098b8:	40023800 	.word	0x40023800
 80098bc:	40004400 	.word	0x40004400
 80098c0:	40004800 	.word	0x40004800
 80098c4:	40004c00 	.word	0x40004c00
 80098c8:	40005000 	.word	0x40005000
 80098cc:	40011400 	.word	0x40011400
 80098d0:	40007800 	.word	0x40007800
 80098d4:	2310      	movs	r3, #16
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e02c      	b.n	8009934 <UART_SetConfig+0x348>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a72      	ldr	r2, [pc, #456]	; (8009aa8 <UART_SetConfig+0x4bc>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d125      	bne.n	8009930 <UART_SetConfig+0x344>
 80098e4:	4b71      	ldr	r3, [pc, #452]	; (8009aac <UART_SetConfig+0x4c0>)
 80098e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098f2:	d017      	beq.n	8009924 <UART_SetConfig+0x338>
 80098f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098f8:	d817      	bhi.n	800992a <UART_SetConfig+0x33e>
 80098fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098fe:	d00b      	beq.n	8009918 <UART_SetConfig+0x32c>
 8009900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009904:	d811      	bhi.n	800992a <UART_SetConfig+0x33e>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <UART_SetConfig+0x326>
 800990a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800990e:	d006      	beq.n	800991e <UART_SetConfig+0x332>
 8009910:	e00b      	b.n	800992a <UART_SetConfig+0x33e>
 8009912:	2300      	movs	r3, #0
 8009914:	77fb      	strb	r3, [r7, #31]
 8009916:	e00d      	b.n	8009934 <UART_SetConfig+0x348>
 8009918:	2302      	movs	r3, #2
 800991a:	77fb      	strb	r3, [r7, #31]
 800991c:	e00a      	b.n	8009934 <UART_SetConfig+0x348>
 800991e:	2304      	movs	r3, #4
 8009920:	77fb      	strb	r3, [r7, #31]
 8009922:	e007      	b.n	8009934 <UART_SetConfig+0x348>
 8009924:	2308      	movs	r3, #8
 8009926:	77fb      	strb	r3, [r7, #31]
 8009928:	e004      	b.n	8009934 <UART_SetConfig+0x348>
 800992a:	2310      	movs	r3, #16
 800992c:	77fb      	strb	r3, [r7, #31]
 800992e:	e001      	b.n	8009934 <UART_SetConfig+0x348>
 8009930:	2310      	movs	r3, #16
 8009932:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800993c:	d15b      	bne.n	80099f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800993e:	7ffb      	ldrb	r3, [r7, #31]
 8009940:	2b08      	cmp	r3, #8
 8009942:	d828      	bhi.n	8009996 <UART_SetConfig+0x3aa>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0x360>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009971 	.word	0x08009971
 8009950:	08009979 	.word	0x08009979
 8009954:	08009981 	.word	0x08009981
 8009958:	08009997 	.word	0x08009997
 800995c:	08009987 	.word	0x08009987
 8009960:	08009997 	.word	0x08009997
 8009964:	08009997 	.word	0x08009997
 8009968:	08009997 	.word	0x08009997
 800996c:	0800998f 	.word	0x0800998f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009970:	f7fd fa40 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 8009974:	61b8      	str	r0, [r7, #24]
        break;
 8009976:	e013      	b.n	80099a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009978:	f7fd fa50 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 800997c:	61b8      	str	r0, [r7, #24]
        break;
 800997e:	e00f      	b.n	80099a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009980:	4b4b      	ldr	r3, [pc, #300]	; (8009ab0 <UART_SetConfig+0x4c4>)
 8009982:	61bb      	str	r3, [r7, #24]
        break;
 8009984:	e00c      	b.n	80099a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009986:	f7fd f923 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 800998a:	61b8      	str	r0, [r7, #24]
        break;
 800998c:	e008      	b.n	80099a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009992:	61bb      	str	r3, [r7, #24]
        break;
 8009994:	e004      	b.n	80099a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	77bb      	strb	r3, [r7, #30]
        break;
 800999e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d074      	beq.n	8009a90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	005a      	lsls	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	441a      	add	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2b0f      	cmp	r3, #15
 80099c0:	d916      	bls.n	80099f0 <UART_SetConfig+0x404>
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c8:	d212      	bcs.n	80099f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f023 030f 	bic.w	r3, r3, #15
 80099d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	b29a      	uxth	r2, r3
 80099e0:	89fb      	ldrh	r3, [r7, #14]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	89fa      	ldrh	r2, [r7, #14]
 80099ec:	60da      	str	r2, [r3, #12]
 80099ee:	e04f      	b.n	8009a90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	77bb      	strb	r3, [r7, #30]
 80099f4:	e04c      	b.n	8009a90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099f6:	7ffb      	ldrb	r3, [r7, #31]
 80099f8:	2b08      	cmp	r3, #8
 80099fa:	d828      	bhi.n	8009a4e <UART_SetConfig+0x462>
 80099fc:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <UART_SetConfig+0x418>)
 80099fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a02:	bf00      	nop
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a31 	.word	0x08009a31
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	08009a4f 	.word	0x08009a4f
 8009a14:	08009a3f 	.word	0x08009a3f
 8009a18:	08009a4f 	.word	0x08009a4f
 8009a1c:	08009a4f 	.word	0x08009a4f
 8009a20:	08009a4f 	.word	0x08009a4f
 8009a24:	08009a47 	.word	0x08009a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a28:	f7fd f9e4 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 8009a2c:	61b8      	str	r0, [r7, #24]
        break;
 8009a2e:	e013      	b.n	8009a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a30:	f7fd f9f4 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 8009a34:	61b8      	str	r0, [r7, #24]
        break;
 8009a36:	e00f      	b.n	8009a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a38:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <UART_SetConfig+0x4c4>)
 8009a3a:	61bb      	str	r3, [r7, #24]
        break;
 8009a3c:	e00c      	b.n	8009a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a3e:	f7fd f8c7 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 8009a42:	61b8      	str	r0, [r7, #24]
        break;
 8009a44:	e008      	b.n	8009a58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a4a:	61bb      	str	r3, [r7, #24]
        break;
 8009a4c:	e004      	b.n	8009a58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	77bb      	strb	r3, [r7, #30]
        break;
 8009a56:	bf00      	nop
    }

    if (pclk != 0U)
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d018      	beq.n	8009a90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	085a      	lsrs	r2, r3, #1
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	441a      	add	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b0f      	cmp	r3, #15
 8009a76:	d909      	bls.n	8009a8c <UART_SetConfig+0x4a0>
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a7e:	d205      	bcs.n	8009a8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	60da      	str	r2, [r3, #12]
 8009a8a:	e001      	b.n	8009a90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3720      	adds	r7, #32
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	40007c00 	.word	0x40007c00
 8009aac:	40023800 	.word	0x40023800
 8009ab0:	00f42400 	.word	0x00f42400

08009ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	f003 0302 	and.w	r3, r3, #2
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	f003 0308 	and.w	r3, r3, #8
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	f003 0310 	and.w	r3, r3, #16
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01a      	beq.n	8009bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bb2:	d10a      	bne.n	8009bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00a      	beq.n	8009bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	605a      	str	r2, [r3, #4]
  }
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c08:	f7fb fac4 	bl	8005194 <HAL_GetTick>
 8009c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d10e      	bne.n	8009c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f82d 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e023      	b.n	8009c82 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	d10e      	bne.n	8009c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f817 	bl	8009c8a <UART_WaitOnFlagUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e00d      	b.n	8009c82 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b09c      	sub	sp, #112	; 0x70
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4613      	mov	r3, r2
 8009c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c9a:	e0a5      	b.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	f000 80a1 	beq.w	8009de8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca6:	f7fb fa75 	bl	8005194 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d302      	bcc.n	8009cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8009cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d13e      	bne.n	8009d3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cdc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e6      	bne.n	8009cbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	f023 0301 	bic.w	r3, r3, #1
 8009d04:	663b      	str	r3, [r7, #96]	; 0x60
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e5      	bne.n	8009cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2220      	movs	r2, #32
 8009d26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e067      	b.n	8009e0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d04f      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d56:	d147      	bne.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
 8009d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e6      	bne.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3308      	adds	r3, #8
 8009d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	613b      	str	r3, [r7, #16]
   return(result);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f023 0301 	bic.w	r3, r3, #1
 8009daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009db4:	623a      	str	r2, [r7, #32]
 8009db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69f9      	ldr	r1, [r7, #28]
 8009dba:	6a3a      	ldr	r2, [r7, #32]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e5      	bne.n	8009d94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e010      	b.n	8009e0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69da      	ldr	r2, [r3, #28]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	4013      	ands	r3, r2
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	bf0c      	ite	eq
 8009df8:	2301      	moveq	r3, #1
 8009dfa:	2300      	movne	r3, #0
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	f43f af4a 	beq.w	8009c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3770      	adds	r7, #112	; 0x70
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b097      	sub	sp, #92	; 0x5c
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	88fa      	ldrh	r2, [r7, #6]
 8009e2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	88fa      	ldrh	r2, [r7, #6]
 8009e34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e46:	d10e      	bne.n	8009e66 <UART_Start_Receive_IT+0x52>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d105      	bne.n	8009e5c <UART_Start_Receive_IT+0x48>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e5a:	e02d      	b.n	8009eb8 <UART_Start_Receive_IT+0xa4>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	22ff      	movs	r2, #255	; 0xff
 8009e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e64:	e028      	b.n	8009eb8 <UART_Start_Receive_IT+0xa4>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10d      	bne.n	8009e8a <UART_Start_Receive_IT+0x76>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d104      	bne.n	8009e80 <UART_Start_Receive_IT+0x6c>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	22ff      	movs	r2, #255	; 0xff
 8009e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e7e:	e01b      	b.n	8009eb8 <UART_Start_Receive_IT+0xa4>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	227f      	movs	r2, #127	; 0x7f
 8009e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e88:	e016      	b.n	8009eb8 <UART_Start_Receive_IT+0xa4>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e92:	d10d      	bne.n	8009eb0 <UART_Start_Receive_IT+0x9c>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <UART_Start_Receive_IT+0x92>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	227f      	movs	r2, #127	; 0x7f
 8009ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ea4:	e008      	b.n	8009eb8 <UART_Start_Receive_IT+0xa4>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	223f      	movs	r2, #63	; 0x3f
 8009eaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eae:	e003      	b.n	8009eb8 <UART_Start_Receive_IT+0xa4>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2222      	movs	r2, #34	; 0x22
 8009ec4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	657b      	str	r3, [r7, #84]	; 0x54
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ee6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e5      	bne.n	8009ec6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f02:	d107      	bne.n	8009f14 <UART_Start_Receive_IT+0x100>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d103      	bne.n	8009f14 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4a24      	ldr	r2, [pc, #144]	; (8009fa0 <UART_Start_Receive_IT+0x18c>)
 8009f10:	665a      	str	r2, [r3, #100]	; 0x64
 8009f12:	e002      	b.n	8009f1a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4a23      	ldr	r2, [pc, #140]	; (8009fa4 <UART_Start_Receive_IT+0x190>)
 8009f18:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d019      	beq.n	8009f5e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	e853 3f00 	ldrex	r3, [r3]
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	461a      	mov	r2, r3
 8009f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
 8009f4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f50:	e841 2300 	strex	r3, r2, [r1]
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1e6      	bne.n	8009f2a <UART_Start_Receive_IT+0x116>
 8009f5c:	e018      	b.n	8009f90 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f043 0320 	orr.w	r3, r3, #32
 8009f72:	653b      	str	r3, [r7, #80]	; 0x50
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f7c:	623b      	str	r3, [r7, #32]
 8009f7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	69f9      	ldr	r1, [r7, #28]
 8009f82:	6a3a      	ldr	r2, [r7, #32]
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e6      	bne.n	8009f5e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	375c      	adds	r7, #92	; 0x5c
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	0800a24b 	.word	0x0800a24b
 8009fa4:	0800a0ef 	.word	0x0800a0ef

08009fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b095      	sub	sp, #84	; 0x54
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fce:	643b      	str	r3, [r7, #64]	; 0x40
 8009fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e6      	bne.n	8009fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a002:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e5      	bne.n	8009fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d118      	bne.n	800a050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f023 0310 	bic.w	r3, r3, #16
 800a032:	647b      	str	r3, [r7, #68]	; 0x44
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03c:	61bb      	str	r3, [r7, #24]
 800a03e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6979      	ldr	r1, [r7, #20]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	613b      	str	r3, [r7, #16]
   return(result);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e6      	bne.n	800a01e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2220      	movs	r2, #32
 800a054:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a062:	bf00      	nop
 800a064:	3754      	adds	r7, #84	; 0x54
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7ff fa8d 	bl	80095ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b088      	sub	sp, #32
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b6:	61fb      	str	r3, [r7, #28]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6979      	ldr	r1, [r7, #20]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e6      	bne.n	800a0a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff fa59 	bl	8009598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0e6:	bf00      	nop
 800a0e8:	3720      	adds	r7, #32
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b096      	sub	sp, #88	; 0x58
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a104:	2b22      	cmp	r3, #34	; 0x22
 800a106:	f040 8094 	bne.w	800a232 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a114:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a118:	b2d9      	uxtb	r1, r3
 800a11a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a124:	400a      	ands	r2, r1
 800a126:	b2d2      	uxtb	r2, r2
 800a128:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d177      	bne.n	800a242 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a166:	653b      	str	r3, [r7, #80]	; 0x50
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	461a      	mov	r2, r3
 800a16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a170:	647b      	str	r3, [r7, #68]	; 0x44
 800a172:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a178:	e841 2300 	strex	r3, r2, [r1]
 800a17c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e6      	bne.n	800a152 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3308      	adds	r3, #8
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	623b      	str	r3, [r7, #32]
   return(result);
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	f023 0301 	bic.w	r3, r3, #1
 800a19a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1a4:	633a      	str	r2, [r7, #48]	; 0x30
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e5      	bne.n	800a184 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d12e      	bne.n	800a22a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	e853 3f00 	ldrex	r3, [r3]
 800a1de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 0310 	bic.w	r3, r3, #16
 800a1e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f0:	61fb      	str	r3, [r7, #28]
 800a1f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	69b9      	ldr	r1, [r7, #24]
 800a1f6:	69fa      	ldr	r2, [r7, #28]
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e6      	bne.n	800a1d2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	f003 0310 	and.w	r3, r3, #16
 800a20e:	2b10      	cmp	r3, #16
 800a210:	d103      	bne.n	800a21a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2210      	movs	r2, #16
 800a218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff f9cc 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a228:	e00b      	b.n	800a242 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7f8 fb58 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 800a230:	e007      	b.n	800a242 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f042 0208 	orr.w	r2, r2, #8
 800a240:	619a      	str	r2, [r3, #24]
}
 800a242:	bf00      	nop
 800a244:	3758      	adds	r7, #88	; 0x58
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b096      	sub	sp, #88	; 0x58
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a260:	2b22      	cmp	r3, #34	; 0x22
 800a262:	f040 8094 	bne.w	800a38e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a274:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a276:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a27a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a27e:	4013      	ands	r3, r2
 800a280:	b29a      	uxth	r2, r3
 800a282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a284:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28a:	1c9a      	adds	r2, r3, #2
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a296:	b29b      	uxth	r3, r3
 800a298:	3b01      	subs	r3, #1
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d177      	bne.n	800a39e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e6      	bne.n	800a2ae <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	e853 3f00 	ldrex	r3, [r3]
 800a2ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	f023 0301 	bic.w	r3, r3, #1
 800a2f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a300:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e5      	bne.n	800a2e0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a324:	2b01      	cmp	r3, #1
 800a326:	d12e      	bne.n	800a386 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	e853 3f00 	ldrex	r3, [r3]
 800a33a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f023 0310 	bic.w	r3, r3, #16
 800a342:	647b      	str	r3, [r7, #68]	; 0x44
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a350:	6979      	ldr	r1, [r7, #20]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	e841 2300 	strex	r3, r2, [r1]
 800a358:	613b      	str	r3, [r7, #16]
   return(result);
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e6      	bne.n	800a32e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	f003 0310 	and.w	r3, r3, #16
 800a36a:	2b10      	cmp	r3, #16
 800a36c:	d103      	bne.n	800a376 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2210      	movs	r2, #16
 800a374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff f91e 	bl	80095c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a384:	e00b      	b.n	800a39e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7f8 faaa 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 800a38c:	e007      	b.n	800a39e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0208 	orr.w	r2, r2, #8
 800a39c:	619a      	str	r2, [r3, #24]
}
 800a39e:	bf00      	nop
 800a3a0:	3758      	adds	r7, #88	; 0x58
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a3a6:	b480      	push	{r7}
 800a3a8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a3aa:	bf00      	nop
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ba:	f3ef 8305 	mrs	r3, IPSR
 800a3be:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10f      	bne.n	800a3e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ca:	607b      	str	r3, [r7, #4]
  return(result);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d105      	bne.n	800a3de <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3d2:	f3ef 8311 	mrs	r3, BASEPRI
 800a3d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d007      	beq.n	800a3ee <osKernelInitialize+0x3a>
 800a3de:	4b0e      	ldr	r3, [pc, #56]	; (800a418 <osKernelInitialize+0x64>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d103      	bne.n	800a3ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a3e6:	f06f 0305 	mvn.w	r3, #5
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	e00c      	b.n	800a408 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <osKernelInitialize+0x64>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a3f6:	4b08      	ldr	r3, [pc, #32]	; (800a418 <osKernelInitialize+0x64>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	e002      	b.n	800a408 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a408:	68fb      	ldr	r3, [r7, #12]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	200007c8 	.word	0x200007c8

0800a41c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a422:	f3ef 8305 	mrs	r3, IPSR
 800a426:	60bb      	str	r3, [r7, #8]
  return(result);
 800a428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10f      	bne.n	800a44e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a42e:	f3ef 8310 	mrs	r3, PRIMASK
 800a432:	607b      	str	r3, [r7, #4]
  return(result);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d105      	bne.n	800a446 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a43a:	f3ef 8311 	mrs	r3, BASEPRI
 800a43e:	603b      	str	r3, [r7, #0]
  return(result);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <osKernelStart+0x3a>
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <osKernelStart+0x68>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d103      	bne.n	800a456 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a44e:	f06f 0305 	mvn.w	r3, #5
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e010      	b.n	800a478 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a456:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <osKernelStart+0x68>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d109      	bne.n	800a472 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a45e:	f7ff ffa2 	bl	800a3a6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a462:	4b08      	ldr	r3, [pc, #32]	; (800a484 <osKernelStart+0x68>)
 800a464:	2202      	movs	r2, #2
 800a466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a468:	f002 faae 	bl	800c9c8 <vTaskStartScheduler>
      stat = osOK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e002      	b.n	800a478 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a472:	f04f 33ff 	mov.w	r3, #4294967295
 800a476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a478:	68fb      	ldr	r3, [r7, #12]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	200007c8 	.word	0x200007c8

0800a488 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a48e:	f3ef 8305 	mrs	r3, IPSR
 800a492:	60bb      	str	r3, [r7, #8]
  return(result);
 800a494:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10f      	bne.n	800a4ba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a49a:	f3ef 8310 	mrs	r3, PRIMASK
 800a49e:	607b      	str	r3, [r7, #4]
  return(result);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a4aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d007      	beq.n	800a4c2 <osKernelGetTickCount+0x3a>
 800a4b2:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <osKernelGetTickCount+0x4c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d103      	bne.n	800a4c2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800a4ba:	f002 fbb7 	bl	800cc2c <xTaskGetTickCountFromISR>
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	e002      	b.n	800a4c8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800a4c2:	f002 fba3 	bl	800cc0c <xTaskGetTickCount>
 800a4c6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200007c8 	.word	0x200007c8

0800a4d8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800a4d8:	b480      	push	{r7}
 800a4da:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a4dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
	...

0800a4ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b090      	sub	sp, #64	; 0x40
 800a4f0:	af04      	add	r7, sp, #16
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4fc:	f3ef 8305 	mrs	r3, IPSR
 800a500:	61fb      	str	r3, [r7, #28]
  return(result);
 800a502:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a504:	2b00      	cmp	r3, #0
 800a506:	f040 808f 	bne.w	800a628 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a50a:	f3ef 8310 	mrs	r3, PRIMASK
 800a50e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a516:	f3ef 8311 	mrs	r3, BASEPRI
 800a51a:	617b      	str	r3, [r7, #20]
  return(result);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <osThreadNew+0x3e>
 800a522:	4b44      	ldr	r3, [pc, #272]	; (800a634 <osThreadNew+0x148>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d07e      	beq.n	800a628 <osThreadNew+0x13c>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d07b      	beq.n	800a628 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a530:	2380      	movs	r3, #128	; 0x80
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a534:	2318      	movs	r3, #24
 800a536:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a538:	2300      	movs	r3, #0
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d045      	beq.n	800a5d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <osThreadNew+0x6a>
        name = attr->name;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <osThreadNew+0x90>
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	2b38      	cmp	r3, #56	; 0x38
 800a56e:	d805      	bhi.n	800a57c <osThreadNew+0x90>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <osThreadNew+0x94>
        return (NULL);
 800a57c:	2300      	movs	r3, #0
 800a57e:	e054      	b.n	800a62a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	089b      	lsrs	r3, r3, #2
 800a58e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00e      	beq.n	800a5b6 <osThreadNew+0xca>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	2bbb      	cmp	r3, #187	; 0xbb
 800a59e:	d90a      	bls.n	800a5b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d006      	beq.n	800a5b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <osThreadNew+0xca>
        mem = 1;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	623b      	str	r3, [r7, #32]
 800a5b4:	e010      	b.n	800a5d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10c      	bne.n	800a5d8 <osThreadNew+0xec>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d108      	bne.n	800a5d8 <osThreadNew+0xec>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <osThreadNew+0xec>
          mem = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	623b      	str	r3, [r7, #32]
 800a5d2:	e001      	b.n	800a5d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d110      	bne.n	800a600 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5e6:	9202      	str	r2, [sp, #8]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f001 ff6d 	bl	800c4d4 <xTaskCreateStatic>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e013      	b.n	800a628 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d110      	bne.n	800a628 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	b29a      	uxth	r2, r3
 800a60a:	f107 0310 	add.w	r3, r7, #16
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f001 ffbe 	bl	800c59a <xTaskCreate>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b01      	cmp	r3, #1
 800a622:	d001      	beq.n	800a628 <osThreadNew+0x13c>
          hTask = NULL;
 800a624:	2300      	movs	r3, #0
 800a626:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a628:	693b      	ldr	r3, [r7, #16]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3730      	adds	r7, #48	; 0x30
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	200007c8 	.word	0x200007c8

0800a638 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a640:	f3ef 8305 	mrs	r3, IPSR
 800a644:	613b      	str	r3, [r7, #16]
  return(result);
 800a646:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10f      	bne.n	800a66c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64c:	f3ef 8310 	mrs	r3, PRIMASK
 800a650:	60fb      	str	r3, [r7, #12]
  return(result);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d105      	bne.n	800a664 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a658:	f3ef 8311 	mrs	r3, BASEPRI
 800a65c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <osDelay+0x3c>
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <osDelay+0x58>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d103      	bne.n	800a674 <osDelay+0x3c>
    stat = osErrorISR;
 800a66c:	f06f 0305 	mvn.w	r3, #5
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e007      	b.n	800a684 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f002 f96c 	bl	800c95c <vTaskDelay>
    }
  }

  return (stat);
 800a684:	697b      	ldr	r3, [r7, #20]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	200007c8 	.word	0x200007c8

0800a694 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a69c:	f3ef 8305 	mrs	r3, IPSR
 800a6a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a6a2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10f      	bne.n	800a6c8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ac:	613b      	str	r3, [r7, #16]
  return(result);
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d105      	bne.n	800a6c0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a6b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <osDelayUntil+0x3c>
 800a6c0:	4b13      	ldr	r3, [pc, #76]	; (800a710 <osDelayUntil+0x7c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d103      	bne.n	800a6d0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 800a6c8:	f06f 0305 	mvn.w	r3, #5
 800a6cc:	61fb      	str	r3, [r7, #28]
 800a6ce:	e019      	b.n	800a704 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800a6d4:	f002 fa9a 	bl	800cc0c <xTaskGetTickCount>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <osDelayUntil+0x6a>
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	db06      	blt.n	800a6fe <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 800a6f0:	f107 0308 	add.w	r3, r7, #8
 800a6f4:	69b9      	ldr	r1, [r7, #24]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 f8ac 	bl	800c854 <vTaskDelayUntil>
 800a6fc:	e002      	b.n	800a704 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a6fe:	f06f 0303 	mvn.w	r3, #3
 800a702:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800a704:	69fb      	ldr	r3, [r7, #28]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200007c8 	.word	0x200007c8

0800a714 <TimerCallback>:

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f003 fbcb 	bl	800deb8 <pvTimerGetTimerID>
 800a722:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d005      	beq.n	800a736 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	6852      	ldr	r2, [r2, #4]
 800a732:	4610      	mov	r0, r2
 800a734:	4798      	blx	r3
  }
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
	...

0800a740 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a740:	b580      	push	{r7, lr}
 800a742:	b08e      	sub	sp, #56	; 0x38
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	607a      	str	r2, [r7, #4]
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	460b      	mov	r3, r1
 800a74e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a750:	2300      	movs	r3, #0
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a754:	f3ef 8305 	mrs	r3, IPSR
 800a758:	61bb      	str	r3, [r7, #24]
  return(result);
 800a75a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d16a      	bne.n	800a836 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a760:	f3ef 8310 	mrs	r3, PRIMASK
 800a764:	617b      	str	r3, [r7, #20]
  return(result);
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d105      	bne.n	800a778 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a76c:	f3ef 8311 	mrs	r3, BASEPRI
 800a770:	613b      	str	r3, [r7, #16]
  return(result);
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <osTimerNew+0x40>
 800a778:	4b31      	ldr	r3, [pc, #196]	; (800a840 <osTimerNew+0x100>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d05a      	beq.n	800a836 <osTimerNew+0xf6>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d057      	beq.n	800a836 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a786:	2008      	movs	r0, #8
 800a788:	f003 fdf4 	bl	800e374 <pvPortMalloc>
 800a78c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d050      	beq.n	800a836 <osTimerNew+0xf6>
      callb->func = func;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a7a0:	7afb      	ldrb	r3, [r7, #11]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d102      	bne.n	800a7ac <osTimerNew+0x6c>
        reload = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7aa:	e001      	b.n	800a7b0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01c      	beq.n	800a7fa <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <osTimerNew+0x8e>
          name = attr->name;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d006      	beq.n	800a7e4 <osTimerNew+0xa4>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	2b2b      	cmp	r3, #43	; 0x2b
 800a7dc:	d902      	bls.n	800a7e4 <osTimerNew+0xa4>
          mem = 1;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	623b      	str	r3, [r7, #32]
 800a7e2:	e00c      	b.n	800a7fe <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d108      	bne.n	800a7fe <osTimerNew+0xbe>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d104      	bne.n	800a7fe <osTimerNew+0xbe>
            mem = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	e001      	b.n	800a7fe <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10c      	bne.n	800a81e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	4b0e      	ldr	r3, [pc, #56]	; (800a844 <osTimerNew+0x104>)
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a812:	2101      	movs	r1, #1
 800a814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a816:	f002 ffbe 	bl	800d796 <xTimerCreateStatic>
 800a81a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a81c:	e00b      	b.n	800a836 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d108      	bne.n	800a836 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <osTimerNew+0x104>)
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82c:	2101      	movs	r1, #1
 800a82e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a830:	f002 ff90 	bl	800d754 <xTimerCreate>
 800a834:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3730      	adds	r7, #48	; 0x30
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200007c8 	.word	0x200007c8
 800a844:	0800a715 	.word	0x0800a715

0800a848 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08a      	sub	sp, #40	; 0x28
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a856:	f3ef 8305 	mrs	r3, IPSR
 800a85a:	617b      	str	r3, [r7, #20]
  return(result);
 800a85c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10f      	bne.n	800a882 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a862:	f3ef 8310 	mrs	r3, PRIMASK
 800a866:	613b      	str	r3, [r7, #16]
  return(result);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d105      	bne.n	800a87a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a86e:	f3ef 8311 	mrs	r3, BASEPRI
 800a872:	60fb      	str	r3, [r7, #12]
  return(result);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d007      	beq.n	800a88a <osTimerStart+0x42>
 800a87a:	4b12      	ldr	r3, [pc, #72]	; (800a8c4 <osTimerStart+0x7c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d103      	bne.n	800a88a <osTimerStart+0x42>
    stat = osErrorISR;
 800a882:	f06f 0305 	mvn.w	r3, #5
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e017      	b.n	800a8ba <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <osTimerStart+0x50>
    stat = osErrorParameter;
 800a890:	f06f 0303 	mvn.w	r3, #3
 800a894:	61fb      	str	r3, [r7, #28]
 800a896:	e010      	b.n	800a8ba <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a898:	2300      	movs	r3, #0
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	2300      	movs	r3, #0
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	2104      	movs	r1, #4
 800a8a2:	69b8      	ldr	r0, [r7, #24]
 800a8a4:	f002 fff6 	bl	800d894 <xTimerGenericCommand>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d102      	bne.n	800a8b4 <osTimerStart+0x6c>
      stat = osOK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	e002      	b.n	800a8ba <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800a8b4:	f06f 0302 	mvn.w	r3, #2
 800a8b8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800a8ba:	69fb      	ldr	r3, [r7, #28]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200007c8 	.word	0x200007c8

0800a8c8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08a      	sub	sp, #40	; 0x28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8d4:	f3ef 8305 	mrs	r3, IPSR
 800a8d8:	613b      	str	r3, [r7, #16]
  return(result);
 800a8da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f040 8085 	bne.w	800a9ec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d105      	bne.n	800a8fa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8ee:	f3ef 8311 	mrs	r3, BASEPRI
 800a8f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <osMutexNew+0x3a>
 800a8fa:	4b3f      	ldr	r3, [pc, #252]	; (800a9f8 <osMutexNew+0x130>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d074      	beq.n	800a9ec <osMutexNew+0x124>
    if (attr != NULL) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <osMutexNew+0x48>
      type = attr->attr_bits;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	623b      	str	r3, [r7, #32]
 800a90e:	e001      	b.n	800a914 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <osMutexNew+0x5c>
      rmtx = 1U;
 800a91e:	2301      	movs	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
 800a922:	e001      	b.n	800a928 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d15c      	bne.n	800a9ec <osMutexNew+0x124>
      mem = -1;
 800a932:	f04f 33ff 	mov.w	r3, #4294967295
 800a936:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d015      	beq.n	800a96a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d006      	beq.n	800a954 <osMutexNew+0x8c>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	2b4f      	cmp	r3, #79	; 0x4f
 800a94c:	d902      	bls.n	800a954 <osMutexNew+0x8c>
          mem = 1;
 800a94e:	2301      	movs	r3, #1
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	e00c      	b.n	800a96e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d108      	bne.n	800a96e <osMutexNew+0xa6>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <osMutexNew+0xa6>
            mem = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	61bb      	str	r3, [r7, #24]
 800a968:	e001      	b.n	800a96e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d112      	bne.n	800a99a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d007      	beq.n	800a98a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	4619      	mov	r1, r3
 800a980:	2004      	movs	r0, #4
 800a982:	f000 fe1a 	bl	800b5ba <xQueueCreateMutexStatic>
 800a986:	6278      	str	r0, [r7, #36]	; 0x24
 800a988:	e016      	b.n	800a9b8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	4619      	mov	r1, r3
 800a990:	2001      	movs	r0, #1
 800a992:	f000 fe12 	bl	800b5ba <xQueueCreateMutexStatic>
 800a996:	6278      	str	r0, [r7, #36]	; 0x24
 800a998:	e00e      	b.n	800a9b8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10b      	bne.n	800a9b8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a9a6:	2004      	movs	r0, #4
 800a9a8:	f000 fdef 	bl	800b58a <xQueueCreateMutex>
 800a9ac:	6278      	str	r0, [r7, #36]	; 0x24
 800a9ae:	e003      	b.n	800a9b8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	f000 fdea 	bl	800b58a <xQueueCreateMutex>
 800a9b6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00c      	beq.n	800a9d8 <osMutexNew+0x110>
        if (attr != NULL) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d003      	beq.n	800a9cc <osMutexNew+0x104>
          name = attr->name;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	e001      	b.n	800a9d0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a9d0:	6979      	ldr	r1, [r7, #20]
 800a9d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d4:	f001 fcf6 	bl	800c3c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <osMutexNew+0x124>
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3728      	adds	r7, #40	; 0x28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	200007c8 	.word	0x200007c8

0800a9fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f023 0301 	bic.w	r3, r3, #1
 800aa0c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa1a:	f3ef 8305 	mrs	r3, IPSR
 800aa1e:	613b      	str	r3, [r7, #16]
  return(result);
 800aa20:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10f      	bne.n	800aa46 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa26:	f3ef 8310 	mrs	r3, PRIMASK
 800aa2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d105      	bne.n	800aa3e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa32:	f3ef 8311 	mrs	r3, BASEPRI
 800aa36:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d007      	beq.n	800aa4e <osMutexAcquire+0x52>
 800aa3e:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <osMutexAcquire+0xb8>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d103      	bne.n	800aa4e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800aa46:	f06f 0305 	mvn.w	r3, #5
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	e02c      	b.n	800aaa8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800aa54:	f06f 0303 	mvn.w	r3, #3
 800aa58:	61fb      	str	r3, [r7, #28]
 800aa5a:	e025      	b.n	800aaa8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d011      	beq.n	800aa86 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	69b8      	ldr	r0, [r7, #24]
 800aa66:	f000 fdf9 	bl	800b65c <xQueueTakeMutexRecursive>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d01b      	beq.n	800aaa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800aa76:	f06f 0301 	mvn.w	r3, #1
 800aa7a:	61fb      	str	r3, [r7, #28]
 800aa7c:	e014      	b.n	800aaa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800aa7e:	f06f 0302 	mvn.w	r3, #2
 800aa82:	61fb      	str	r3, [r7, #28]
 800aa84:	e010      	b.n	800aaa8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	69b8      	ldr	r0, [r7, #24]
 800aa8a:	f001 f9b3 	bl	800bdf4 <xQueueSemaphoreTake>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d009      	beq.n	800aaa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800aa9a:	f06f 0301 	mvn.w	r3, #1
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	e002      	b.n	800aaa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800aaa2:	f06f 0302 	mvn.w	r3, #2
 800aaa6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aaa8:	69fb      	ldr	r3, [r7, #28]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3720      	adds	r7, #32
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	200007c8 	.word	0x200007c8

0800aab8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f023 0301 	bic.w	r3, r3, #1
 800aac6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aad4:	f3ef 8305 	mrs	r3, IPSR
 800aad8:	613b      	str	r3, [r7, #16]
  return(result);
 800aada:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10f      	bne.n	800ab00 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae0:	f3ef 8310 	mrs	r3, PRIMASK
 800aae4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d105      	bne.n	800aaf8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aaec:	f3ef 8311 	mrs	r3, BASEPRI
 800aaf0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d007      	beq.n	800ab08 <osMutexRelease+0x50>
 800aaf8:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <osMutexRelease+0x9c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d103      	bne.n	800ab08 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ab00:	f06f 0305 	mvn.w	r3, #5
 800ab04:	61fb      	str	r3, [r7, #28]
 800ab06:	e01f      	b.n	800ab48 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d103      	bne.n	800ab16 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ab0e:	f06f 0303 	mvn.w	r3, #3
 800ab12:	61fb      	str	r3, [r7, #28]
 800ab14:	e018      	b.n	800ab48 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d009      	beq.n	800ab30 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ab1c:	69b8      	ldr	r0, [r7, #24]
 800ab1e:	f000 fd67 	bl	800b5f0 <xQueueGiveMutexRecursive>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d00f      	beq.n	800ab48 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ab28:	f06f 0302 	mvn.w	r3, #2
 800ab2c:	61fb      	str	r3, [r7, #28]
 800ab2e:	e00b      	b.n	800ab48 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ab30:	2300      	movs	r3, #0
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	69b8      	ldr	r0, [r7, #24]
 800ab38:	f000 fe3a 	bl	800b7b0 <xQueueGenericSend>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d002      	beq.n	800ab48 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ab42:	f06f 0302 	mvn.w	r3, #2
 800ab46:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ab48:	69fb      	ldr	r3, [r7, #28]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3720      	adds	r7, #32
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	200007c8 	.word	0x200007c8

0800ab58 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08c      	sub	sp, #48	; 0x30
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab68:	f3ef 8305 	mrs	r3, IPSR
 800ab6c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f040 8086 	bne.w	800ac82 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab76:	f3ef 8310 	mrs	r3, PRIMASK
 800ab7a:	617b      	str	r3, [r7, #20]
  return(result);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d105      	bne.n	800ab8e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab82:	f3ef 8311 	mrs	r3, BASEPRI
 800ab86:	613b      	str	r3, [r7, #16]
  return(result);
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <osSemaphoreNew+0x3e>
 800ab8e:	4b3f      	ldr	r3, [pc, #252]	; (800ac8c <osSemaphoreNew+0x134>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d075      	beq.n	800ac82 <osSemaphoreNew+0x12a>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d072      	beq.n	800ac82 <osSemaphoreNew+0x12a>
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d86e      	bhi.n	800ac82 <osSemaphoreNew+0x12a>
    mem = -1;
 800aba4:	f04f 33ff 	mov.w	r3, #4294967295
 800aba8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d015      	beq.n	800abdc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d006      	beq.n	800abc6 <osSemaphoreNew+0x6e>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	2b4f      	cmp	r3, #79	; 0x4f
 800abbe:	d902      	bls.n	800abc6 <osSemaphoreNew+0x6e>
        mem = 1;
 800abc0:	2301      	movs	r3, #1
 800abc2:	623b      	str	r3, [r7, #32]
 800abc4:	e00c      	b.n	800abe0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d108      	bne.n	800abe0 <osSemaphoreNew+0x88>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d104      	bne.n	800abe0 <osSemaphoreNew+0x88>
          mem = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	623b      	str	r3, [r7, #32]
 800abda:	e001      	b.n	800abe0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe6:	d04c      	beq.n	800ac82 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d128      	bne.n	800ac40 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d10a      	bne.n	800ac0a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	2203      	movs	r2, #3
 800abfa:	9200      	str	r2, [sp, #0]
 800abfc:	2200      	movs	r2, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	2001      	movs	r0, #1
 800ac02:	f000 fbc1 	bl	800b388 <xQueueGenericCreateStatic>
 800ac06:	6278      	str	r0, [r7, #36]	; 0x24
 800ac08:	e005      	b.n	800ac16 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ac0a:	2203      	movs	r2, #3
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	2001      	movs	r0, #1
 800ac10:	f000 fc3c 	bl	800b48c <xQueueGenericCreate>
 800ac14:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d022      	beq.n	800ac62 <osSemaphoreNew+0x10a>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01f      	beq.n	800ac62 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ac22:	2300      	movs	r3, #0
 800ac24:	2200      	movs	r2, #0
 800ac26:	2100      	movs	r1, #0
 800ac28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac2a:	f000 fdc1 	bl	800b7b0 <xQueueGenericSend>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d016      	beq.n	800ac62 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ac34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac36:	f001 fa77 	bl	800c128 <vQueueDelete>
            hSemaphore = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac3e:	e010      	b.n	800ac62 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d108      	bne.n	800ac58 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	68b9      	ldr	r1, [r7, #8]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 fd3c 	bl	800b6cc <xQueueCreateCountingSemaphoreStatic>
 800ac54:	6278      	str	r0, [r7, #36]	; 0x24
 800ac56:	e004      	b.n	800ac62 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fd71 	bl	800b742 <xQueueCreateCountingSemaphore>
 800ac60:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ac62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00c      	beq.n	800ac82 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <osSemaphoreNew+0x11e>
          name = attr->name;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	61fb      	str	r3, [r7, #28]
 800ac74:	e001      	b.n	800ac7a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ac7a:	69f9      	ldr	r1, [r7, #28]
 800ac7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac7e:	f001 fba1 	bl	800c3c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3728      	adds	r7, #40	; 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	200007c8 	.word	0x200007c8

0800ac90 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d103      	bne.n	800acb0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aca8:	f06f 0303 	mvn.w	r3, #3
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	e04b      	b.n	800ad48 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acb0:	f3ef 8305 	mrs	r3, IPSR
 800acb4:	617b      	str	r3, [r7, #20]
  return(result);
 800acb6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10f      	bne.n	800acdc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acbc:	f3ef 8310 	mrs	r3, PRIMASK
 800acc0:	613b      	str	r3, [r7, #16]
  return(result);
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d105      	bne.n	800acd4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acc8:	f3ef 8311 	mrs	r3, BASEPRI
 800accc:	60fb      	str	r3, [r7, #12]
  return(result);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d026      	beq.n	800ad22 <osSemaphoreAcquire+0x92>
 800acd4:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <osSemaphoreAcquire+0xc4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d122      	bne.n	800ad22 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ace2:	f06f 0303 	mvn.w	r3, #3
 800ace6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ace8:	e02d      	b.n	800ad46 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800acee:	f107 0308 	add.w	r3, r7, #8
 800acf2:	461a      	mov	r2, r3
 800acf4:	2100      	movs	r1, #0
 800acf6:	69b8      	ldr	r0, [r7, #24]
 800acf8:	f001 f990 	bl	800c01c <xQueueReceiveFromISR>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d003      	beq.n	800ad0a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ad02:	f06f 0302 	mvn.w	r3, #2
 800ad06:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ad08:	e01d      	b.n	800ad46 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01a      	beq.n	800ad46 <osSemaphoreAcquire+0xb6>
 800ad10:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <osSemaphoreAcquire+0xc8>)
 800ad12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ad20:	e011      	b.n	800ad46 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	69b8      	ldr	r0, [r7, #24]
 800ad26:	f001 f865 	bl	800bdf4 <xQueueSemaphoreTake>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d00b      	beq.n	800ad48 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ad36:	f06f 0301 	mvn.w	r3, #1
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	e004      	b.n	800ad48 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ad3e:	f06f 0302 	mvn.w	r3, #2
 800ad42:	61fb      	str	r3, [r7, #28]
 800ad44:	e000      	b.n	800ad48 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ad46:	bf00      	nop
      }
    }
  }

  return (stat);
 800ad48:	69fb      	ldr	r3, [r7, #28]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3720      	adds	r7, #32
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	200007c8 	.word	0x200007c8
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d103      	bne.n	800ad7a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ad72:	f06f 0303 	mvn.w	r3, #3
 800ad76:	61fb      	str	r3, [r7, #28]
 800ad78:	e03e      	b.n	800adf8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad7a:	f3ef 8305 	mrs	r3, IPSR
 800ad7e:	617b      	str	r3, [r7, #20]
  return(result);
 800ad80:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10f      	bne.n	800ada6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad86:	f3ef 8310 	mrs	r3, PRIMASK
 800ad8a:	613b      	str	r3, [r7, #16]
  return(result);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d105      	bne.n	800ad9e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad92:	f3ef 8311 	mrs	r3, BASEPRI
 800ad96:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d01e      	beq.n	800addc <osSemaphoreRelease+0x80>
 800ad9e:	4b19      	ldr	r3, [pc, #100]	; (800ae04 <osSemaphoreRelease+0xa8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d11a      	bne.n	800addc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800adaa:	f107 0308 	add.w	r3, r7, #8
 800adae:	4619      	mov	r1, r3
 800adb0:	69b8      	ldr	r0, [r7, #24]
 800adb2:	f000 fea3 	bl	800bafc <xQueueGiveFromISR>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d003      	beq.n	800adc4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800adbc:	f06f 0302 	mvn.w	r3, #2
 800adc0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800adc2:	e018      	b.n	800adf6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d015      	beq.n	800adf6 <osSemaphoreRelease+0x9a>
 800adca:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <osSemaphoreRelease+0xac>)
 800adcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800adda:	e00c      	b.n	800adf6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800addc:	2300      	movs	r3, #0
 800adde:	2200      	movs	r2, #0
 800ade0:	2100      	movs	r1, #0
 800ade2:	69b8      	ldr	r0, [r7, #24]
 800ade4:	f000 fce4 	bl	800b7b0 <xQueueGenericSend>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b01      	cmp	r3, #1
 800adec:	d004      	beq.n	800adf8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800adee:	f06f 0302 	mvn.w	r3, #2
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	e000      	b.n	800adf8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800adf6:	bf00      	nop
    }
  }

  return (stat);
 800adf8:	69fb      	ldr	r3, [r7, #28]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	200007c8 	.word	0x200007c8
 800ae08:	e000ed04 	.word	0xe000ed04

0800ae0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08c      	sub	sp, #48	; 0x30
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae1c:	f3ef 8305 	mrs	r3, IPSR
 800ae20:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae22:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d16f      	bne.n	800af08 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae28:	f3ef 8310 	mrs	r3, PRIMASK
 800ae2c:	617b      	str	r3, [r7, #20]
  return(result);
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d105      	bne.n	800ae40 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae34:	f3ef 8311 	mrs	r3, BASEPRI
 800ae38:	613b      	str	r3, [r7, #16]
  return(result);
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <osMessageQueueNew+0x3c>
 800ae40:	4b34      	ldr	r3, [pc, #208]	; (800af14 <osMessageQueueNew+0x108>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d05f      	beq.n	800af08 <osMessageQueueNew+0xfc>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d05c      	beq.n	800af08 <osMessageQueueNew+0xfc>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d059      	beq.n	800af08 <osMessageQueueNew+0xfc>
    mem = -1;
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d029      	beq.n	800aeb4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <osMessageQueueNew+0x82>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	2b4f      	cmp	r3, #79	; 0x4f
 800ae6e:	d90e      	bls.n	800ae8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00a      	beq.n	800ae8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	695a      	ldr	r2, [r3, #20]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	fb01 f303 	mul.w	r3, r1, r3
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d302      	bcc.n	800ae8e <osMessageQueueNew+0x82>
        mem = 1;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	623b      	str	r3, [r7, #32]
 800ae8c:	e014      	b.n	800aeb8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d110      	bne.n	800aeb8 <osMessageQueueNew+0xac>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10c      	bne.n	800aeb8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d108      	bne.n	800aeb8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <osMessageQueueNew+0xac>
          mem = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	623b      	str	r3, [r7, #32]
 800aeb2:	e001      	b.n	800aeb8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d10b      	bne.n	800aed6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691a      	ldr	r2, [r3, #16]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	2100      	movs	r1, #0
 800aec8:	9100      	str	r1, [sp, #0]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fa5b 	bl	800b388 <xQueueGenericCreateStatic>
 800aed2:	6278      	str	r0, [r7, #36]	; 0x24
 800aed4:	e008      	b.n	800aee8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d105      	bne.n	800aee8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800aedc:	2200      	movs	r2, #0
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 fad3 	bl	800b48c <xQueueGenericCreate>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00c      	beq.n	800af08 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d003      	beq.n	800aefc <osMessageQueueNew+0xf0>
        name = attr->name;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	61fb      	str	r3, [r7, #28]
 800aefa:	e001      	b.n	800af00 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800aefc:	2300      	movs	r3, #0
 800aefe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800af00:	69f9      	ldr	r1, [r7, #28]
 800af02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af04:	f001 fa5e 	bl	800c3c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3728      	adds	r7, #40	; 0x28
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200007c8 	.word	0x200007c8

0800af18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	4613      	mov	r3, r2
 800af26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af30:	f3ef 8305 	mrs	r3, IPSR
 800af34:	61fb      	str	r3, [r7, #28]
  return(result);
 800af36:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10f      	bne.n	800af5c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af3c:	f3ef 8310 	mrs	r3, PRIMASK
 800af40:	61bb      	str	r3, [r7, #24]
  return(result);
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d105      	bne.n	800af54 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af48:	f3ef 8311 	mrs	r3, BASEPRI
 800af4c:	617b      	str	r3, [r7, #20]
  return(result);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d02c      	beq.n	800afae <osMessageQueuePut+0x96>
 800af54:	4b28      	ldr	r3, [pc, #160]	; (800aff8 <osMessageQueuePut+0xe0>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d128      	bne.n	800afae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d005      	beq.n	800af6e <osMessageQueuePut+0x56>
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <osMessageQueuePut+0x56>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800af6e:	f06f 0303 	mvn.w	r3, #3
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af74:	e039      	b.n	800afea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800af7a:	f107 0210 	add.w	r2, r7, #16
 800af7e:	2300      	movs	r3, #0
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	6a38      	ldr	r0, [r7, #32]
 800af84:	f000 fd1a 	bl	800b9bc <xQueueGenericSendFromISR>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d003      	beq.n	800af96 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800af8e:	f06f 0302 	mvn.w	r3, #2
 800af92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af94:	e029      	b.n	800afea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d026      	beq.n	800afea <osMessageQueuePut+0xd2>
 800af9c:	4b17      	ldr	r3, [pc, #92]	; (800affc <osMessageQueuePut+0xe4>)
 800af9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afac:	e01d      	b.n	800afea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <osMessageQueuePut+0xa2>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d103      	bne.n	800afc2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800afba:	f06f 0303 	mvn.w	r3, #3
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
 800afc0:	e014      	b.n	800afec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800afc2:	2300      	movs	r3, #0
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	6a38      	ldr	r0, [r7, #32]
 800afca:	f000 fbf1 	bl	800b7b0 <xQueueGenericSend>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d00b      	beq.n	800afec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800afda:	f06f 0301 	mvn.w	r3, #1
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
 800afe0:	e004      	b.n	800afec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800afe2:	f06f 0302 	mvn.w	r3, #2
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24
 800afe8:	e000      	b.n	800afec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3728      	adds	r7, #40	; 0x28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	200007c8 	.word	0x200007c8
 800affc:	e000ed04 	.word	0xe000ed04

0800b000 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b000:	b580      	push	{r7, lr}
 800b002:	b08a      	sub	sp, #40	; 0x28
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b012:	2300      	movs	r3, #0
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b016:	f3ef 8305 	mrs	r3, IPSR
 800b01a:	61fb      	str	r3, [r7, #28]
  return(result);
 800b01c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10f      	bne.n	800b042 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b022:	f3ef 8310 	mrs	r3, PRIMASK
 800b026:	61bb      	str	r3, [r7, #24]
  return(result);
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d105      	bne.n	800b03a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b02e:	f3ef 8311 	mrs	r3, BASEPRI
 800b032:	617b      	str	r3, [r7, #20]
  return(result);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d02c      	beq.n	800b094 <osMessageQueueGet+0x94>
 800b03a:	4b28      	ldr	r3, [pc, #160]	; (800b0dc <osMessageQueueGet+0xdc>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d128      	bne.n	800b094 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d005      	beq.n	800b054 <osMessageQueueGet+0x54>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <osMessageQueueGet+0x54>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b054:	f06f 0303 	mvn.w	r3, #3
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b05a:	e038      	b.n	800b0ce <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b05c:	2300      	movs	r3, #0
 800b05e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b060:	f107 0310 	add.w	r3, r7, #16
 800b064:	461a      	mov	r2, r3
 800b066:	68b9      	ldr	r1, [r7, #8]
 800b068:	6a38      	ldr	r0, [r7, #32]
 800b06a:	f000 ffd7 	bl	800c01c <xQueueReceiveFromISR>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b01      	cmp	r3, #1
 800b072:	d003      	beq.n	800b07c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b074:	f06f 0302 	mvn.w	r3, #2
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b07a:	e028      	b.n	800b0ce <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d025      	beq.n	800b0ce <osMessageQueueGet+0xce>
 800b082:	4b17      	ldr	r3, [pc, #92]	; (800b0e0 <osMessageQueueGet+0xe0>)
 800b084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b092:	e01c      	b.n	800b0ce <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <osMessageQueueGet+0xa0>
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d103      	bne.n	800b0a8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b0a0:	f06f 0303 	mvn.w	r3, #3
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a6:	e013      	b.n	800b0d0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	68b9      	ldr	r1, [r7, #8]
 800b0ac:	6a38      	ldr	r0, [r7, #32]
 800b0ae:	f000 fdbb 	bl	800bc28 <xQueueReceive>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d00b      	beq.n	800b0d0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b0be:	f06f 0301 	mvn.w	r3, #1
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c4:	e004      	b.n	800b0d0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b0c6:	f06f 0302 	mvn.w	r3, #2
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b0cc:	e000      	b.n	800b0d0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3728      	adds	r7, #40	; 0x28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	200007c8 	.word	0x200007c8
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4a07      	ldr	r2, [pc, #28]	; (800b110 <vApplicationGetIdleTaskMemory+0x2c>)
 800b0f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	4a06      	ldr	r2, [pc, #24]	; (800b114 <vApplicationGetIdleTaskMemory+0x30>)
 800b0fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2280      	movs	r2, #128	; 0x80
 800b100:	601a      	str	r2, [r3, #0]
}
 800b102:	bf00      	nop
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	200007cc 	.word	0x200007cc
 800b114:	20000888 	.word	0x20000888

0800b118 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4a07      	ldr	r2, [pc, #28]	; (800b144 <vApplicationGetTimerTaskMemory+0x2c>)
 800b128:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	4a06      	ldr	r2, [pc, #24]	; (800b148 <vApplicationGetTimerTaskMemory+0x30>)
 800b12e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b136:	601a      	str	r2, [r3, #0]
}
 800b138:	bf00      	nop
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	20000a88 	.word	0x20000a88
 800b148:	20000b44 	.word	0x20000b44

0800b14c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f103 0208 	add.w	r2, r3, #8
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f04f 32ff 	mov.w	r2, #4294967295
 800b164:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f103 0208 	add.w	r2, r3, #8
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f103 0208 	add.w	r2, r3, #8
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b19a:	bf00      	nop
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b085      	sub	sp, #20
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	601a      	str	r2, [r3, #0]
}
 800b1e2:	bf00      	nop
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b085      	sub	sp, #20
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b204:	d103      	bne.n	800b20e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	e00c      	b.n	800b228 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3308      	adds	r3, #8
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	e002      	b.n	800b21c <vListInsert+0x2e>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	429a      	cmp	r2, r3
 800b226:	d2f6      	bcs.n	800b216 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]
}
 800b254:	bf00      	nop
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	6892      	ldr	r2, [r2, #8]
 800b276:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	6852      	ldr	r2, [r2, #4]
 800b280:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d103      	bne.n	800b294 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	1e5a      	subs	r2, r3, #1
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10c      	bne.n	800b2e2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	b672      	cpsid	i
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	b662      	cpsie	i
 800b2dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b2e2:	f002 ff1b 	bl	800e11c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ee:	68f9      	ldr	r1, [r7, #12]
 800b2f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2f2:	fb01 f303 	mul.w	r3, r1, r3
 800b2f6:	441a      	add	r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b312:	3b01      	subs	r3, #1
 800b314:	68f9      	ldr	r1, [r7, #12]
 800b316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b318:	fb01 f303 	mul.w	r3, r1, r3
 800b31c:	441a      	add	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	22ff      	movs	r2, #255	; 0xff
 800b326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	22ff      	movs	r2, #255	; 0xff
 800b32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d114      	bne.n	800b362 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01a      	beq.n	800b376 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3310      	adds	r3, #16
 800b344:	4618      	mov	r0, r3
 800b346:	f001 fdf9 	bl	800cf3c <xTaskRemoveFromEventList>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d012      	beq.n	800b376 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b350:	4b0c      	ldr	r3, [pc, #48]	; (800b384 <xQueueGenericReset+0xd0>)
 800b352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	e009      	b.n	800b376 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3310      	adds	r3, #16
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fef0 	bl	800b14c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3324      	adds	r3, #36	; 0x24
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff feeb 	bl	800b14c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b376:	f002 ff05 	bl	800e184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b37a:	2301      	movs	r3, #1
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08e      	sub	sp, #56	; 0x38
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10c      	bne.n	800b3b6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	b672      	cpsid	i
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	b662      	cpsie	i
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10c      	bne.n	800b3d6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	b672      	cpsid	i
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	b662      	cpsie	i
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <xQueueGenericCreateStatic+0x5a>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <xQueueGenericCreateStatic+0x5e>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <xQueueGenericCreateStatic+0x60>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10c      	bne.n	800b406 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	b672      	cpsid	i
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	b662      	cpsie	i
 800b400:	623b      	str	r3, [r7, #32]
}
 800b402:	bf00      	nop
 800b404:	e7fe      	b.n	800b404 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d102      	bne.n	800b412 <xQueueGenericCreateStatic+0x8a>
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <xQueueGenericCreateStatic+0x8e>
 800b412:	2301      	movs	r3, #1
 800b414:	e000      	b.n	800b418 <xQueueGenericCreateStatic+0x90>
 800b416:	2300      	movs	r3, #0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10c      	bne.n	800b436 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b420:	b672      	cpsid	i
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	b662      	cpsie	i
 800b430:	61fb      	str	r3, [r7, #28]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b436:	2350      	movs	r3, #80	; 0x50
 800b438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b50      	cmp	r3, #80	; 0x50
 800b43e:	d00c      	beq.n	800b45a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	b672      	cpsid	i
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	b662      	cpsie	i
 800b454:	61bb      	str	r3, [r7, #24]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b45a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00d      	beq.n	800b482 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b46e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	4613      	mov	r3, r2
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 f847 	bl	800b510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b484:	4618      	mov	r0, r3
 800b486:	3730      	adds	r7, #48	; 0x30
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af02      	add	r7, sp, #8
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	4613      	mov	r3, r2
 800b498:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10c      	bne.n	800b4ba <xQueueGenericCreate+0x2e>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	b672      	cpsid	i
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	b662      	cpsie	i
 800b4b4:	613b      	str	r3, [r7, #16]
}
 800b4b6:	bf00      	nop
 800b4b8:	e7fe      	b.n	800b4b8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d102      	bne.n	800b4c6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	61fb      	str	r3, [r7, #28]
 800b4c4:	e004      	b.n	800b4d0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
 800b4ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	3350      	adds	r3, #80	; 0x50
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f002 ff4d 	bl	800e374 <pvPortMalloc>
 800b4da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d011      	beq.n	800b506 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	3350      	adds	r3, #80	; 0x50
 800b4ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4f4:	79fa      	ldrb	r2, [r7, #7]
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f805 	bl	800b510 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b506:	69bb      	ldr	r3, [r7, #24]
	}
 800b508:	4618      	mov	r0, r3
 800b50a:	3720      	adds	r7, #32
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d103      	bne.n	800b52c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	69ba      	ldr	r2, [r7, #24]
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	e002      	b.n	800b532 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b53e:	2101      	movs	r1, #1
 800b540:	69b8      	ldr	r0, [r7, #24]
 800b542:	f7ff feb7 	bl	800b2b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	78fa      	ldrb	r2, [r7, #3]
 800b54a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b556:	b580      	push	{r7, lr}
 800b558:	b082      	sub	sp, #8
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00e      	beq.n	800b582 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b576:	2300      	movs	r3, #0
 800b578:	2200      	movs	r2, #0
 800b57a:	2100      	movs	r1, #0
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f917 	bl	800b7b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b086      	sub	sp, #24
 800b58e:	af00      	add	r7, sp, #0
 800b590:	4603      	mov	r3, r0
 800b592:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b594:	2301      	movs	r3, #1
 800b596:	617b      	str	r3, [r7, #20]
 800b598:	2300      	movs	r3, #0
 800b59a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6939      	ldr	r1, [r7, #16]
 800b5a2:	6978      	ldr	r0, [r7, #20]
 800b5a4:	f7ff ff72 	bl	800b48c <xQueueGenericCreate>
 800b5a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7ff ffd3 	bl	800b556 <prvInitialiseMutex>

		return xNewQueue;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b088      	sub	sp, #32
 800b5be:	af02      	add	r7, sp, #8
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	6039      	str	r1, [r7, #0]
 800b5c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b5ce:	79fb      	ldrb	r3, [r7, #7]
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	6939      	ldr	r1, [r7, #16]
 800b5d8:	6978      	ldr	r0, [r7, #20]
 800b5da:	f7ff fed5 	bl	800b388 <xQueueGenericCreateStatic>
 800b5de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff ffb8 	bl	800b556 <prvInitialiseMutex>

		return xNewQueue;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
	}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b5f0:	b590      	push	{r4, r7, lr}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10c      	bne.n	800b61c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b606:	b672      	cpsid	i
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	b662      	cpsie	i
 800b616:	60fb      	str	r3, [r7, #12]
}
 800b618:	bf00      	nop
 800b61a:	e7fe      	b.n	800b61a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	689c      	ldr	r4, [r3, #8]
 800b620:	f001 fe58 	bl	800d2d4 <xTaskGetCurrentTaskHandle>
 800b624:	4603      	mov	r3, r0
 800b626:	429c      	cmp	r4, r3
 800b628:	d111      	bne.n	800b64e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	1e5a      	subs	r2, r3, #1
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d105      	bne.n	800b648 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b63c:	2300      	movs	r3, #0
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	6938      	ldr	r0, [r7, #16]
 800b644:	f000 f8b4 	bl	800b7b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b648:	2301      	movs	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	e001      	b.n	800b652 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b652:	697b      	ldr	r3, [r7, #20]
	}
 800b654:	4618      	mov	r0, r3
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd90      	pop	{r4, r7, pc}

0800b65c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b65c:	b590      	push	{r4, r7, lr}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10c      	bne.n	800b68a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	b672      	cpsid	i
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	b662      	cpsie	i
 800b684:	60fb      	str	r3, [r7, #12]
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	689c      	ldr	r4, [r3, #8]
 800b68e:	f001 fe21 	bl	800d2d4 <xTaskGetCurrentTaskHandle>
 800b692:	4603      	mov	r3, r0
 800b694:	429c      	cmp	r4, r3
 800b696:	d107      	bne.n	800b6a8 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	617b      	str	r3, [r7, #20]
 800b6a6:	e00c      	b.n	800b6c2 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6938      	ldr	r0, [r7, #16]
 800b6ac:	f000 fba2 	bl	800bdf4 <xQueueSemaphoreTake>
 800b6b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b6c2:	697b      	ldr	r3, [r7, #20]
	}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	371c      	adds	r7, #28
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd90      	pop	{r4, r7, pc}

0800b6cc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08a      	sub	sp, #40	; 0x28
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10c      	bne.n	800b6f8 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	b672      	cpsid	i
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	b662      	cpsie	i
 800b6f2:	61bb      	str	r3, [r7, #24]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d90c      	bls.n	800b71a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	b672      	cpsid	i
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	b662      	cpsie	i
 800b714:	617b      	str	r3, [r7, #20]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b71a:	2302      	movs	r3, #2
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	2100      	movs	r1, #0
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f7ff fe2f 	bl	800b388 <xQueueGenericCreateStatic>
 800b72a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b738:	69fb      	ldr	r3, [r7, #28]
	}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3720      	adds	r7, #32
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b742:	b580      	push	{r7, lr}
 800b744:	b086      	sub	sp, #24
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10c      	bne.n	800b76c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	b672      	cpsid	i
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	b662      	cpsie	i
 800b766:	613b      	str	r3, [r7, #16]
}
 800b768:	bf00      	nop
 800b76a:	e7fe      	b.n	800b76a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d90c      	bls.n	800b78e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	b672      	cpsid	i
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	b662      	cpsie	i
 800b788:	60fb      	str	r3, [r7, #12]
}
 800b78a:	bf00      	nop
 800b78c:	e7fe      	b.n	800b78c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b78e:	2202      	movs	r2, #2
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff fe7a 	bl	800b48c <xQueueGenericCreate>
 800b798:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b7a6:	697b      	ldr	r3, [r7, #20]
	}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08e      	sub	sp, #56	; 0x38
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10c      	bne.n	800b7e6 <xQueueGenericSend+0x36>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	b672      	cpsid	i
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	b662      	cpsie	i
 800b7e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d103      	bne.n	800b7f4 <xQueueGenericSend+0x44>
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <xQueueGenericSend+0x48>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e000      	b.n	800b7fa <xQueueGenericSend+0x4a>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10c      	bne.n	800b818 <xQueueGenericSend+0x68>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	b672      	cpsid	i
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	b662      	cpsie	i
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d103      	bne.n	800b826 <xQueueGenericSend+0x76>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b822:	2b01      	cmp	r3, #1
 800b824:	d101      	bne.n	800b82a <xQueueGenericSend+0x7a>
 800b826:	2301      	movs	r3, #1
 800b828:	e000      	b.n	800b82c <xQueueGenericSend+0x7c>
 800b82a:	2300      	movs	r3, #0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10c      	bne.n	800b84a <xQueueGenericSend+0x9a>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	b672      	cpsid	i
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	b662      	cpsie	i
 800b844:	623b      	str	r3, [r7, #32]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b84a:	f001 fd53 	bl	800d2f4 <xTaskGetSchedulerState>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <xQueueGenericSend+0xaa>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <xQueueGenericSend+0xae>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e000      	b.n	800b860 <xQueueGenericSend+0xb0>
 800b85e:	2300      	movs	r3, #0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10c      	bne.n	800b87e <xQueueGenericSend+0xce>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	b672      	cpsid	i
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	b662      	cpsie	i
 800b878:	61fb      	str	r3, [r7, #28]
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b87e:	f002 fc4d 	bl	800e11c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d302      	bcc.n	800b894 <xQueueGenericSend+0xe4>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b02      	cmp	r3, #2
 800b892:	d129      	bne.n	800b8e8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b89a:	f000 fc82 	bl	800c1a2 <prvCopyDataToQueue>
 800b89e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d010      	beq.n	800b8ca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	3324      	adds	r3, #36	; 0x24
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f001 fb45 	bl	800cf3c <xTaskRemoveFromEventList>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d013      	beq.n	800b8e0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8b8:	4b3f      	ldr	r3, [pc, #252]	; (800b9b8 <xQueueGenericSend+0x208>)
 800b8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	e00a      	b.n	800b8e0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8d0:	4b39      	ldr	r3, [pc, #228]	; (800b9b8 <xQueueGenericSend+0x208>)
 800b8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8e0:	f002 fc50 	bl	800e184 <vPortExitCritical>
				return pdPASS;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e063      	b.n	800b9b0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d103      	bne.n	800b8f6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8ee:	f002 fc49 	bl	800e184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e05c      	b.n	800b9b0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d106      	bne.n	800b90a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8fc:	f107 0314 	add.w	r3, r7, #20
 800b900:	4618      	mov	r0, r3
 800b902:	f001 fb81 	bl	800d008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b906:	2301      	movs	r3, #1
 800b908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b90a:	f002 fc3b 	bl	800e184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b90e:	f001 f8cf 	bl	800cab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b912:	f002 fc03 	bl	800e11c <vPortEnterCritical>
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b91c:	b25b      	sxtb	r3, r3
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b922:	d103      	bne.n	800b92c <xQueueGenericSend+0x17c>
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b932:	b25b      	sxtb	r3, r3
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d103      	bne.n	800b942 <xQueueGenericSend+0x192>
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b942:	f002 fc1f 	bl	800e184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b946:	1d3a      	adds	r2, r7, #4
 800b948:	f107 0314 	add.w	r3, r7, #20
 800b94c:	4611      	mov	r1, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f001 fb70 	bl	800d034 <xTaskCheckForTimeOut>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d124      	bne.n	800b9a4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b95a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b95c:	f000 fd19 	bl	800c392 <prvIsQueueFull>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d018      	beq.n	800b998 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	3310      	adds	r3, #16
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4611      	mov	r1, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 fa90 	bl	800ce94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b976:	f000 fca4 	bl	800c2c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b97a:	f001 f8a7 	bl	800cacc <xTaskResumeAll>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	f47f af7c 	bne.w	800b87e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b986:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <xQueueGenericSend+0x208>)
 800b988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	e772      	b.n	800b87e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b99a:	f000 fc92 	bl	800c2c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b99e:	f001 f895 	bl	800cacc <xTaskResumeAll>
 800b9a2:	e76c      	b.n	800b87e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9a6:	f000 fc8c 	bl	800c2c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9aa:	f001 f88f 	bl	800cacc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3738      	adds	r7, #56	; 0x38
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08e      	sub	sp, #56	; 0x38
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10c      	bne.n	800b9ee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	b672      	cpsid	i
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	b662      	cpsie	i
 800b9e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9ea:	bf00      	nop
 800b9ec:	e7fe      	b.n	800b9ec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <xQueueGenericSendFromISR+0x40>
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <xQueueGenericSendFromISR+0x44>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e000      	b.n	800ba02 <xQueueGenericSendFromISR+0x46>
 800ba00:	2300      	movs	r3, #0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	b672      	cpsid	i
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	b662      	cpsie	i
 800ba1a:	623b      	str	r3, [r7, #32]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d103      	bne.n	800ba2e <xQueueGenericSendFromISR+0x72>
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d101      	bne.n	800ba32 <xQueueGenericSendFromISR+0x76>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e000      	b.n	800ba34 <xQueueGenericSendFromISR+0x78>
 800ba32:	2300      	movs	r3, #0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10c      	bne.n	800ba52 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	b672      	cpsid	i
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	b662      	cpsie	i
 800ba4c:	61fb      	str	r3, [r7, #28]
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba52:	f002 fc4b 	bl	800e2ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba56:	f3ef 8211 	mrs	r2, BASEPRI
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	b672      	cpsid	i
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	b662      	cpsie	i
 800ba6e:	61ba      	str	r2, [r7, #24]
 800ba70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d302      	bcc.n	800ba88 <xQueueGenericSendFromISR+0xcc>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d12c      	bne.n	800bae2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba98:	f000 fb83 	bl	800c1a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d112      	bne.n	800bacc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d016      	beq.n	800badc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	3324      	adds	r3, #36	; 0x24
 800bab2:	4618      	mov	r0, r3
 800bab4:	f001 fa42 	bl	800cf3c <xTaskRemoveFromEventList>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00e      	beq.n	800badc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00b      	beq.n	800badc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e007      	b.n	800badc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bacc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bad0:	3301      	adds	r3, #1
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	b25a      	sxtb	r2, r3
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800badc:	2301      	movs	r3, #1
 800bade:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bae0:	e001      	b.n	800bae6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	637b      	str	r3, [r7, #52]	; 0x34
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800baf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3738      	adds	r7, #56	; 0x38
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08e      	sub	sp, #56	; 0x38
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10c      	bne.n	800bb2a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	b672      	cpsid	i
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	b662      	cpsie	i
 800bb24:	623b      	str	r3, [r7, #32]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00c      	beq.n	800bb4c <xQueueGiveFromISR+0x50>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	b672      	cpsid	i
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	b662      	cpsie	i
 800bb46:	61fb      	str	r3, [r7, #28]
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <xQueueGiveFromISR+0x60>
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <xQueueGiveFromISR+0x64>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e000      	b.n	800bb62 <xQueueGiveFromISR+0x66>
 800bb60:	2300      	movs	r3, #0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10c      	bne.n	800bb80 <xQueueGiveFromISR+0x84>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6a:	b672      	cpsid	i
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	b662      	cpsie	i
 800bb7a:	61bb      	str	r3, [r7, #24]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb80:	f002 fbb4 	bl	800e2ec <vPortValidateInterruptPriority>
	__asm volatile
 800bb84:	f3ef 8211 	mrs	r2, BASEPRI
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	b672      	cpsid	i
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	b662      	cpsie	i
 800bb9c:	617a      	str	r2, [r7, #20]
 800bb9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bba0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d22b      	bcs.n	800bc0c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbce:	d112      	bne.n	800bbf6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d016      	beq.n	800bc06 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	3324      	adds	r3, #36	; 0x24
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 f9ad 	bl	800cf3c <xTaskRemoveFromEventList>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00e      	beq.n	800bc06 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	e007      	b.n	800bc06 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	b25a      	sxtb	r2, r3
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc06:	2301      	movs	r3, #1
 800bc08:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0a:	e001      	b.n	800bc10 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc12:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f383 8811 	msr	BASEPRI, r3
}
 800bc1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3738      	adds	r7, #56	; 0x38
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08c      	sub	sp, #48	; 0x30
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc34:	2300      	movs	r3, #0
 800bc36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10c      	bne.n	800bc5c <xQueueReceive+0x34>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	b672      	cpsid	i
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	b662      	cpsie	i
 800bc56:	623b      	str	r3, [r7, #32]
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d103      	bne.n	800bc6a <xQueueReceive+0x42>
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <xQueueReceive+0x46>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <xQueueReceive+0x48>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10c      	bne.n	800bc8e <xQueueReceive+0x66>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	b672      	cpsid	i
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	b662      	cpsie	i
 800bc88:	61fb      	str	r3, [r7, #28]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc8e:	f001 fb31 	bl	800d2f4 <xTaskGetSchedulerState>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <xQueueReceive+0x76>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <xQueueReceive+0x7a>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <xQueueReceive+0x7c>
 800bca2:	2300      	movs	r3, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10c      	bne.n	800bcc2 <xQueueReceive+0x9a>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	b672      	cpsid	i
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	b662      	cpsie	i
 800bcbc:	61bb      	str	r3, [r7, #24]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcc2:	f002 fa2b 	bl	800e11c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d01f      	beq.n	800bd12 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcd2:	68b9      	ldr	r1, [r7, #8]
 800bcd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd6:	f000 face 	bl	800c276 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00f      	beq.n	800bd0a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcec:	3310      	adds	r3, #16
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 f924 	bl	800cf3c <xTaskRemoveFromEventList>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d007      	beq.n	800bd0a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcfa:	4b3d      	ldr	r3, [pc, #244]	; (800bdf0 <xQueueReceive+0x1c8>)
 800bcfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd00:	601a      	str	r2, [r3, #0]
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd0a:	f002 fa3b 	bl	800e184 <vPortExitCritical>
				return pdPASS;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e069      	b.n	800bde6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d103      	bne.n	800bd20 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd18:	f002 fa34 	bl	800e184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	e062      	b.n	800bde6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd26:	f107 0310 	add.w	r3, r7, #16
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f001 f96c 	bl	800d008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd30:	2301      	movs	r3, #1
 800bd32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd34:	f002 fa26 	bl	800e184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd38:	f000 feba 	bl	800cab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd3c:	f002 f9ee 	bl	800e11c <vPortEnterCritical>
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd46:	b25b      	sxtb	r3, r3
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d103      	bne.n	800bd56 <xQueueReceive+0x12e>
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd5c:	b25b      	sxtb	r3, r3
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd62:	d103      	bne.n	800bd6c <xQueueReceive+0x144>
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd6c:	f002 fa0a 	bl	800e184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd70:	1d3a      	adds	r2, r7, #4
 800bd72:	f107 0310 	add.w	r3, r7, #16
 800bd76:	4611      	mov	r1, r2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f001 f95b 	bl	800d034 <xTaskCheckForTimeOut>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d123      	bne.n	800bdcc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd86:	f000 faee 	bl	800c366 <prvIsQueueEmpty>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d017      	beq.n	800bdc0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	3324      	adds	r3, #36	; 0x24
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	4611      	mov	r1, r2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 f87b 	bl	800ce94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bda0:	f000 fa8f 	bl	800c2c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bda4:	f000 fe92 	bl	800cacc <xTaskResumeAll>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d189      	bne.n	800bcc2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bdae:	4b10      	ldr	r3, [pc, #64]	; (800bdf0 <xQueueReceive+0x1c8>)
 800bdb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	e780      	b.n	800bcc2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc2:	f000 fa7e 	bl	800c2c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdc6:	f000 fe81 	bl	800cacc <xTaskResumeAll>
 800bdca:	e77a      	b.n	800bcc2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdce:	f000 fa78 	bl	800c2c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdd2:	f000 fe7b 	bl	800cacc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd8:	f000 fac5 	bl	800c366 <prvIsQueueEmpty>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f43f af6f 	beq.w	800bcc2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bde4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3730      	adds	r7, #48	; 0x30
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08e      	sub	sp, #56	; 0x38
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be06:	2300      	movs	r3, #0
 800be08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10c      	bne.n	800be2a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	b672      	cpsid	i
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	b662      	cpsie	i
 800be24:	623b      	str	r3, [r7, #32]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00c      	beq.n	800be4c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	b672      	cpsid	i
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	b662      	cpsie	i
 800be46:	61fb      	str	r3, [r7, #28]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be4c:	f001 fa52 	bl	800d2f4 <xTaskGetSchedulerState>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <xQueueSemaphoreTake+0x68>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <xQueueSemaphoreTake+0x6c>
 800be5c:	2301      	movs	r3, #1
 800be5e:	e000      	b.n	800be62 <xQueueSemaphoreTake+0x6e>
 800be60:	2300      	movs	r3, #0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10c      	bne.n	800be80 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	b672      	cpsid	i
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	b662      	cpsie	i
 800be7a:	61bb      	str	r3, [r7, #24]
}
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be80:	f002 f94c 	bl	800e11c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d024      	beq.n	800beda <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	1e5a      	subs	r2, r3, #1
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d104      	bne.n	800beaa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bea0:	f001 fba6 	bl	800d5f0 <pvTaskIncrementMutexHeldCount>
 800bea4:	4602      	mov	r2, r0
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00f      	beq.n	800bed2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	3310      	adds	r3, #16
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 f840 	bl	800cf3c <xTaskRemoveFromEventList>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d007      	beq.n	800bed2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bec2:	4b55      	ldr	r3, [pc, #340]	; (800c018 <xQueueSemaphoreTake+0x224>)
 800bec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bed2:	f002 f957 	bl	800e184 <vPortExitCritical>
				return pdPASS;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e099      	b.n	800c00e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d113      	bne.n	800bf08 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00c      	beq.n	800bf00 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beea:	b672      	cpsid	i
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	b662      	cpsie	i
 800befa:	617b      	str	r3, [r7, #20]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf00:	f002 f940 	bl	800e184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf04:	2300      	movs	r3, #0
 800bf06:	e082      	b.n	800c00e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf0e:	f107 030c 	add.w	r3, r7, #12
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 f878 	bl	800d008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf1c:	f002 f932 	bl	800e184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf20:	f000 fdc6 	bl	800cab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf24:	f002 f8fa 	bl	800e11c <vPortEnterCritical>
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf2e:	b25b      	sxtb	r3, r3
 800bf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf34:	d103      	bne.n	800bf3e <xQueueSemaphoreTake+0x14a>
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf44:	b25b      	sxtb	r3, r3
 800bf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4a:	d103      	bne.n	800bf54 <xQueueSemaphoreTake+0x160>
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf54:	f002 f916 	bl	800e184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf58:	463a      	mov	r2, r7
 800bf5a:	f107 030c 	add.w	r3, r7, #12
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 f867 	bl	800d034 <xTaskCheckForTimeOut>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d132      	bne.n	800bfd2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf6e:	f000 f9fa 	bl	800c366 <prvIsQueueEmpty>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d026      	beq.n	800bfc6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d109      	bne.n	800bf94 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bf80:	f002 f8cc 	bl	800e11c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 f9d1 	bl	800d330 <xTaskPriorityInherit>
 800bf8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf90:	f002 f8f8 	bl	800e184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf96:	3324      	adds	r3, #36	; 0x24
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 ff79 	bl	800ce94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa4:	f000 f98d 	bl	800c2c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfa8:	f000 fd90 	bl	800cacc <xTaskResumeAll>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f47f af66 	bne.w	800be80 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bfb4:	4b18      	ldr	r3, [pc, #96]	; (800c018 <xQueueSemaphoreTake+0x224>)
 800bfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	e75c      	b.n	800be80 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc8:	f000 f97b 	bl	800c2c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfcc:	f000 fd7e 	bl	800cacc <xTaskResumeAll>
 800bfd0:	e756      	b.n	800be80 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd4:	f000 f975 	bl	800c2c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfd8:	f000 fd78 	bl	800cacc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfde:	f000 f9c2 	bl	800c366 <prvIsQueueEmpty>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f43f af4b 	beq.w	800be80 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00d      	beq.n	800c00c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bff0:	f002 f894 	bl	800e11c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bff6:	f000 f8bc 	bl	800c172 <prvGetDisinheritPriorityAfterTimeout>
 800bffa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c002:	4618      	mov	r0, r3
 800c004:	f001 fa6e 	bl	800d4e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c008:	f002 f8bc 	bl	800e184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c00c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3738      	adds	r7, #56	; 0x38
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08e      	sub	sp, #56	; 0x38
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10c      	bne.n	800c04c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	b672      	cpsid	i
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	b662      	cpsie	i
 800c046:	623b      	str	r3, [r7, #32]
}
 800c048:	bf00      	nop
 800c04a:	e7fe      	b.n	800c04a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d103      	bne.n	800c05a <xQueueReceiveFromISR+0x3e>
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <xQueueReceiveFromISR+0x42>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <xQueueReceiveFromISR+0x44>
 800c05e:	2300      	movs	r3, #0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10c      	bne.n	800c07e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	b672      	cpsid	i
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	b662      	cpsie	i
 800c078:	61fb      	str	r3, [r7, #28]
}
 800c07a:	bf00      	nop
 800c07c:	e7fe      	b.n	800c07c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c07e:	f002 f935 	bl	800e2ec <vPortValidateInterruptPriority>
	__asm volatile
 800c082:	f3ef 8211 	mrs	r2, BASEPRI
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	b672      	cpsid	i
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	b662      	cpsie	i
 800c09a:	61ba      	str	r2, [r7, #24]
 800c09c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c09e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d02f      	beq.n	800c10e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0b8:	68b9      	ldr	r1, [r7, #8]
 800c0ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0bc:	f000 f8db 	bl	800c276 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	1e5a      	subs	r2, r3, #1
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c0c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d0:	d112      	bne.n	800c0f8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d016      	beq.n	800c108 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	3310      	adds	r3, #16
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 ff2c 	bl	800cf3c <xTaskRemoveFromEventList>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00e      	beq.n	800c108 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00b      	beq.n	800c108 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	e007      	b.n	800c108 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	b25a      	sxtb	r2, r3
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c108:	2301      	movs	r3, #1
 800c10a:	637b      	str	r3, [r7, #52]	; 0x34
 800c10c:	e001      	b.n	800c112 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800c10e:	2300      	movs	r3, #0
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
 800c112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c114:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f383 8811 	msr	BASEPRI, r3
}
 800c11c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c120:	4618      	mov	r0, r3
 800c122:	3738      	adds	r7, #56	; 0x38
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10c      	bne.n	800c154 <vQueueDelete+0x2c>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	b672      	cpsid	i
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	b662      	cpsie	i
 800c14e:	60bb      	str	r3, [r7, #8]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f000 f95f 	bl	800c418 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f002 f9cf 	bl	800e508 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d006      	beq.n	800c190 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c18c:	60fb      	str	r3, [r7, #12]
 800c18e:	e001      	b.n	800c194 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c194:	68fb      	ldr	r3, [r7, #12]
	}
 800c196:	4618      	mov	r0, r3
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b086      	sub	sp, #24
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d14d      	bne.n	800c264 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f001 f917 	bl	800d400 <xTaskPriorityDisinherit>
 800c1d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	609a      	str	r2, [r3, #8]
 800c1da:	e043      	b.n	800c264 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d119      	bne.n	800c216 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6858      	ldr	r0, [r3, #4]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	f002 fad5 	bl	800e79c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fa:	441a      	add	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d32b      	bcc.n	800c264 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	605a      	str	r2, [r3, #4]
 800c214:	e026      	b.n	800c264 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	68d8      	ldr	r0, [r3, #12]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21e:	461a      	mov	r2, r3
 800c220:	68b9      	ldr	r1, [r7, #8]
 800c222:	f002 fabb 	bl	800e79c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	425b      	negs	r3, r3
 800c230:	441a      	add	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	68da      	ldr	r2, [r3, #12]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d207      	bcs.n	800c252 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24a:	425b      	negs	r3, r3
 800c24c:	441a      	add	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b02      	cmp	r3, #2
 800c256:	d105      	bne.n	800c264 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3b01      	subs	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c26c:	697b      	ldr	r3, [r7, #20]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d018      	beq.n	800c2ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c290:	441a      	add	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d303      	bcc.n	800c2aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68d9      	ldr	r1, [r3, #12]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	6838      	ldr	r0, [r7, #0]
 800c2b6:	f002 fa71 	bl	800e79c <memcpy>
	}
}
 800c2ba:	bf00      	nop
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2ca:	f001 ff27 	bl	800e11c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2d6:	e011      	b.n	800c2fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d012      	beq.n	800c306 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3324      	adds	r3, #36	; 0x24
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fe29 	bl	800cf3c <xTaskRemoveFromEventList>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2f0:	f000 ff06 	bl	800d100 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c300:	2b00      	cmp	r3, #0
 800c302:	dce9      	bgt.n	800c2d8 <prvUnlockQueue+0x16>
 800c304:	e000      	b.n	800c308 <prvUnlockQueue+0x46>
					break;
 800c306:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	22ff      	movs	r2, #255	; 0xff
 800c30c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c310:	f001 ff38 	bl	800e184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c314:	f001 ff02 	bl	800e11c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c31e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c320:	e011      	b.n	800c346 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d012      	beq.n	800c350 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3310      	adds	r3, #16
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fe04 	bl	800cf3c <xTaskRemoveFromEventList>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c33a:	f000 fee1 	bl	800d100 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	3b01      	subs	r3, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	dce9      	bgt.n	800c322 <prvUnlockQueue+0x60>
 800c34e:	e000      	b.n	800c352 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c350:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c35a:	f001 ff13 	bl	800e184 <vPortExitCritical>
}
 800c35e:	bf00      	nop
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c36e:	f001 fed5 	bl	800e11c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c376:	2b00      	cmp	r3, #0
 800c378:	d102      	bne.n	800c380 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c37a:	2301      	movs	r3, #1
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	e001      	b.n	800c384 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c380:	2300      	movs	r3, #0
 800c382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c384:	f001 fefe 	bl	800e184 <vPortExitCritical>

	return xReturn;
 800c388:	68fb      	ldr	r3, [r7, #12]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c39a:	f001 febf 	bl	800e11c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d102      	bne.n	800c3b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	60fb      	str	r3, [r7, #12]
 800c3ae:	e001      	b.n	800c3b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3b4:	f001 fee6 	bl	800e184 <vPortExitCritical>

	return xReturn;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	e014      	b.n	800c3fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3d4:	4a0f      	ldr	r2, [pc, #60]	; (800c414 <vQueueAddToRegistry+0x50>)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10b      	bne.n	800c3f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3e0:	490c      	ldr	r1, [pc, #48]	; (800c414 <vQueueAddToRegistry+0x50>)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3ea:	4a0a      	ldr	r2, [pc, #40]	; (800c414 <vQueueAddToRegistry+0x50>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	4413      	add	r3, r2
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3f6:	e006      	b.n	800c406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b07      	cmp	r3, #7
 800c402:	d9e7      	bls.n	800c3d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20000f44 	.word	0x20000f44

0800c418 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c420:	2300      	movs	r3, #0
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e016      	b.n	800c454 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c426:	4a10      	ldr	r2, [pc, #64]	; (800c468 <vQueueUnregisterQueue+0x50>)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	4413      	add	r3, r2
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d10b      	bne.n	800c44e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c436:	4a0c      	ldr	r2, [pc, #48]	; (800c468 <vQueueUnregisterQueue+0x50>)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2100      	movs	r1, #0
 800c43c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c440:	4a09      	ldr	r2, [pc, #36]	; (800c468 <vQueueUnregisterQueue+0x50>)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	00db      	lsls	r3, r3, #3
 800c446:	4413      	add	r3, r2
 800c448:	2200      	movs	r2, #0
 800c44a:	605a      	str	r2, [r3, #4]
				break;
 800c44c:	e006      	b.n	800c45c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b07      	cmp	r3, #7
 800c458:	d9e5      	bls.n	800c426 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	20000f44 	.word	0x20000f44

0800c46c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c47c:	f001 fe4e 	bl	800e11c <vPortEnterCritical>
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c486:	b25b      	sxtb	r3, r3
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48c:	d103      	bne.n	800c496 <vQueueWaitForMessageRestricted+0x2a>
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c49c:	b25b      	sxtb	r3, r3
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a2:	d103      	bne.n	800c4ac <vQueueWaitForMessageRestricted+0x40>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ac:	f001 fe6a 	bl	800e184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	3324      	adds	r3, #36	; 0x24
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fd0d 	bl	800cee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	f7ff fefb 	bl	800c2c2 <prvUnlockQueue>
	}
 800c4cc:	bf00      	nop
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08e      	sub	sp, #56	; 0x38
 800c4d8:	af04      	add	r7, sp, #16
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10c      	bne.n	800c502 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	b672      	cpsid	i
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	b662      	cpsie	i
 800c4fc:	623b      	str	r3, [r7, #32]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10c      	bne.n	800c522 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50c:	b672      	cpsid	i
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	b662      	cpsie	i
 800c51c:	61fb      	str	r3, [r7, #28]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c522:	23bc      	movs	r3, #188	; 0xbc
 800c524:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2bbc      	cmp	r3, #188	; 0xbc
 800c52a:	d00c      	beq.n	800c546 <xTaskCreateStatic+0x72>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	b672      	cpsid	i
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	b662      	cpsie	i
 800c540:	61bb      	str	r3, [r7, #24]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c546:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d01e      	beq.n	800c58c <xTaskCreateStatic+0xb8>
 800c54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01b      	beq.n	800c58c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c55c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	2202      	movs	r2, #2
 800c562:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c566:	2300      	movs	r3, #0
 800c568:	9303      	str	r3, [sp, #12]
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	f107 0314 	add.w	r3, r7, #20
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 f850 	bl	800c624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c586:	f000 f8f5 	bl	800c774 <prvAddNewTaskToReadyList>
 800c58a:	e001      	b.n	800c590 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c58c:	2300      	movs	r3, #0
 800c58e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c590:	697b      	ldr	r3, [r7, #20]
	}
 800c592:	4618      	mov	r0, r3
 800c594:	3728      	adds	r7, #40	; 0x28
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b08c      	sub	sp, #48	; 0x30
 800c59e:	af04      	add	r7, sp, #16
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	603b      	str	r3, [r7, #0]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f001 fee0 	bl	800e374 <pvPortMalloc>
 800c5b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00e      	beq.n	800c5da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5bc:	20bc      	movs	r0, #188	; 0xbc
 800c5be:	f001 fed9 	bl	800e374 <pvPortMalloc>
 800c5c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c5d0:	e005      	b.n	800c5de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5d2:	6978      	ldr	r0, [r7, #20]
 800c5d4:	f001 ff98 	bl	800e508 <vPortFree>
 800c5d8:	e001      	b.n	800c5de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d017      	beq.n	800c614 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5ec:	88fa      	ldrh	r2, [r7, #6]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9303      	str	r3, [sp, #12]
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	9302      	str	r3, [sp, #8]
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	9301      	str	r3, [sp, #4]
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f000 f80e 	bl	800c624 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c608:	69f8      	ldr	r0, [r7, #28]
 800c60a:	f000 f8b3 	bl	800c774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c60e:	2301      	movs	r3, #1
 800c610:	61bb      	str	r3, [r7, #24]
 800c612:	e002      	b.n	800c61a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c614:	f04f 33ff 	mov.w	r3, #4294967295
 800c618:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c61a:	69bb      	ldr	r3, [r7, #24]
	}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3720      	adds	r7, #32
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	461a      	mov	r2, r3
 800c63c:	21a5      	movs	r1, #165	; 0xa5
 800c63e:	f002 f8bb 	bl	800e7b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c64c:	440b      	add	r3, r1
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	f023 0307 	bic.w	r3, r3, #7
 800c65a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00c      	beq.n	800c680 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	617b      	str	r3, [r7, #20]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01f      	beq.n	800c6c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c686:	2300      	movs	r3, #0
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	e012      	b.n	800c6b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	7819      	ldrb	r1, [r3, #0]
 800c694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4413      	add	r3, r2
 800c69a:	3334      	adds	r3, #52	; 0x34
 800c69c:	460a      	mov	r2, r1
 800c69e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	61fb      	str	r3, [r7, #28]
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	2b0f      	cmp	r3, #15
 800c6b6:	d9e9      	bls.n	800c68c <prvInitialiseNewTask+0x68>
 800c6b8:	e000      	b.n	800c6bc <prvInitialiseNewTask+0x98>
			{
				break;
 800c6ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6c4:	e003      	b.n	800c6ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2b37      	cmp	r3, #55	; 0x37
 800c6d2:	d901      	bls.n	800c6d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6d4:	2337      	movs	r3, #55	; 0x37
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe fd4c 	bl	800b18c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	3318      	adds	r3, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe fd47 	bl	800b18c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	2200      	movs	r2, #0
 800c718:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	3354      	adds	r3, #84	; 0x54
 800c728:	2260      	movs	r2, #96	; 0x60
 800c72a:	2100      	movs	r1, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f002 f843 	bl	800e7b8 <memset>
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	4a0c      	ldr	r2, [pc, #48]	; (800c768 <prvInitialiseNewTask+0x144>)
 800c736:	659a      	str	r2, [r3, #88]	; 0x58
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <prvInitialiseNewTask+0x148>)
 800c73c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	4a0b      	ldr	r2, [pc, #44]	; (800c770 <prvInitialiseNewTask+0x14c>)
 800c742:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	68f9      	ldr	r1, [r7, #12]
 800c748:	69b8      	ldr	r0, [r7, #24]
 800c74a:	f001 fbd7 	bl	800defc <pxPortInitialiseStack>
 800c74e:	4602      	mov	r2, r0
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c760:	bf00      	nop
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	0800f470 	.word	0x0800f470
 800c76c:	0800f490 	.word	0x0800f490
 800c770:	0800f450 	.word	0x0800f450

0800c774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c77c:	f001 fcce 	bl	800e11c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c780:	4b2d      	ldr	r3, [pc, #180]	; (800c838 <prvAddNewTaskToReadyList+0xc4>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3301      	adds	r3, #1
 800c786:	4a2c      	ldr	r2, [pc, #176]	; (800c838 <prvAddNewTaskToReadyList+0xc4>)
 800c788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c78a:	4b2c      	ldr	r3, [pc, #176]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d109      	bne.n	800c7a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c792:	4a2a      	ldr	r2, [pc, #168]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c798:	4b27      	ldr	r3, [pc, #156]	; (800c838 <prvAddNewTaskToReadyList+0xc4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d110      	bne.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7a0:	f000 fcd4 	bl	800d14c <prvInitialiseTaskLists>
 800c7a4:	e00d      	b.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7a6:	4b26      	ldr	r3, [pc, #152]	; (800c840 <prvAddNewTaskToReadyList+0xcc>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d109      	bne.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7ae:	4b23      	ldr	r3, [pc, #140]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d802      	bhi.n	800c7c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7bc:	4a1f      	ldr	r2, [pc, #124]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c7c2:	4b20      	ldr	r3, [pc, #128]	; (800c844 <prvAddNewTaskToReadyList+0xd0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	4a1e      	ldr	r2, [pc, #120]	; (800c844 <prvAddNewTaskToReadyList+0xd0>)
 800c7ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7cc:	4b1d      	ldr	r3, [pc, #116]	; (800c844 <prvAddNewTaskToReadyList+0xd0>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d8:	4b1b      	ldr	r3, [pc, #108]	; (800c848 <prvAddNewTaskToReadyList+0xd4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d903      	bls.n	800c7e8 <prvAddNewTaskToReadyList+0x74>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	4a18      	ldr	r2, [pc, #96]	; (800c848 <prvAddNewTaskToReadyList+0xd4>)
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4a15      	ldr	r2, [pc, #84]	; (800c84c <prvAddNewTaskToReadyList+0xd8>)
 800c7f6:	441a      	add	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4610      	mov	r0, r2
 800c800:	f7fe fcd1 	bl	800b1a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c804:	f001 fcbe 	bl	800e184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c808:	4b0d      	ldr	r3, [pc, #52]	; (800c840 <prvAddNewTaskToReadyList+0xcc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00e      	beq.n	800c82e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <prvAddNewTaskToReadyList+0xc8>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d207      	bcs.n	800c82e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c81e:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <prvAddNewTaskToReadyList+0xdc>)
 800c820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20001458 	.word	0x20001458
 800c83c:	20000f84 	.word	0x20000f84
 800c840:	20001464 	.word	0x20001464
 800c844:	20001474 	.word	0x20001474
 800c848:	20001460 	.word	0x20001460
 800c84c:	20000f88 	.word	0x20000f88
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08a      	sub	sp, #40	; 0x28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c85e:	2300      	movs	r3, #0
 800c860:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10c      	bne.n	800c882 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	b672      	cpsid	i
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	b662      	cpsie	i
 800c87c:	617b      	str	r3, [r7, #20]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10c      	bne.n	800c8a2 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	b672      	cpsid	i
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	b662      	cpsie	i
 800c89c:	613b      	str	r3, [r7, #16]
}
 800c89e:	bf00      	nop
 800c8a0:	e7fe      	b.n	800c8a0 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c8a2:	4b2b      	ldr	r3, [pc, #172]	; (800c950 <vTaskDelayUntil+0xfc>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <vTaskDelayUntil+0x70>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	b672      	cpsid	i
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	b662      	cpsie	i
 800c8be:	60fb      	str	r3, [r7, #12]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c8c4:	f000 f8f4 	bl	800cab0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c8c8:	4b22      	ldr	r3, [pc, #136]	; (800c954 <vTaskDelayUntil+0x100>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6a3a      	ldr	r2, [r7, #32]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d20b      	bcs.n	800c8fa <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	69fa      	ldr	r2, [r7, #28]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d211      	bcs.n	800c910 <vTaskDelayUntil+0xbc>
 800c8ec:	69fa      	ldr	r2, [r7, #28]
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d90d      	bls.n	800c910 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c8f8:	e00a      	b.n	800c910 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	69fa      	ldr	r2, [r7, #28]
 800c900:	429a      	cmp	r2, r3
 800c902:	d303      	bcc.n	800c90c <vTaskDelayUntil+0xb8>
 800c904:	69fa      	ldr	r2, [r7, #28]
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d901      	bls.n	800c910 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c90c:	2301      	movs	r3, #1
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	69fa      	ldr	r2, [r7, #28]
 800c914:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d006      	beq.n	800c92a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c91c:	69fa      	ldr	r2, [r7, #28]
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	2100      	movs	r1, #0
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fe77 	bl	800d618 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c92a:	f000 f8cf 	bl	800cacc <xTaskResumeAll>
 800c92e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d107      	bne.n	800c946 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c936:	4b08      	ldr	r3, [pc, #32]	; (800c958 <vTaskDelayUntil+0x104>)
 800c938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c93c:	601a      	str	r2, [r3, #0]
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c946:	bf00      	nop
 800c948:	3728      	adds	r7, #40	; 0x28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20001480 	.word	0x20001480
 800c954:	2000145c 	.word	0x2000145c
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c964:	2300      	movs	r3, #0
 800c966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d019      	beq.n	800c9a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c96e:	4b14      	ldr	r3, [pc, #80]	; (800c9c0 <vTaskDelay+0x64>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00c      	beq.n	800c990 <vTaskDelay+0x34>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	b672      	cpsid	i
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	b662      	cpsie	i
 800c98a:	60bb      	str	r3, [r7, #8]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c990:	f000 f88e 	bl	800cab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fe3e 	bl	800d618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c99c:	f000 f896 	bl	800cacc <xTaskResumeAll>
 800c9a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d107      	bne.n	800c9b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <vTaskDelay+0x68>)
 800c9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	20001480 	.word	0x20001480
 800c9c4:	e000ed04 	.word	0xe000ed04

0800c9c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08a      	sub	sp, #40	; 0x28
 800c9cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9d6:	463a      	mov	r2, r7
 800c9d8:	1d39      	adds	r1, r7, #4
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fb80 	bl	800b0e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	9202      	str	r2, [sp, #8]
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	4926      	ldr	r1, [pc, #152]	; (800ca90 <vTaskStartScheduler+0xc8>)
 800c9f8:	4826      	ldr	r0, [pc, #152]	; (800ca94 <vTaskStartScheduler+0xcc>)
 800c9fa:	f7ff fd6b 	bl	800c4d4 <xTaskCreateStatic>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	4a25      	ldr	r2, [pc, #148]	; (800ca98 <vTaskStartScheduler+0xd0>)
 800ca02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca04:	4b24      	ldr	r3, [pc, #144]	; (800ca98 <vTaskStartScheduler+0xd0>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	617b      	str	r3, [r7, #20]
 800ca10:	e001      	b.n	800ca16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d102      	bne.n	800ca22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca1c:	f000 fe50 	bl	800d6c0 <xTimerCreateTimerTask>
 800ca20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d11d      	bne.n	800ca64 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	b672      	cpsid	i
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	b662      	cpsie	i
 800ca3c:	613b      	str	r3, [r7, #16]
}
 800ca3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca40:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <vTaskStartScheduler+0xd4>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3354      	adds	r3, #84	; 0x54
 800ca46:	4a16      	ldr	r2, [pc, #88]	; (800caa0 <vTaskStartScheduler+0xd8>)
 800ca48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca4a:	4b16      	ldr	r3, [pc, #88]	; (800caa4 <vTaskStartScheduler+0xdc>)
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca52:	4b15      	ldr	r3, [pc, #84]	; (800caa8 <vTaskStartScheduler+0xe0>)
 800ca54:	2201      	movs	r2, #1
 800ca56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca58:	4b14      	ldr	r3, [pc, #80]	; (800caac <vTaskStartScheduler+0xe4>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca5e:	f001 fadf 	bl	800e020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca62:	e010      	b.n	800ca86 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d10c      	bne.n	800ca86 <vTaskStartScheduler+0xbe>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	b672      	cpsid	i
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	b662      	cpsie	i
 800ca80:	60fb      	str	r3, [r7, #12]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <vTaskStartScheduler+0xbc>
}
 800ca86:	bf00      	nop
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	0800eef4 	.word	0x0800eef4
 800ca94:	0800d119 	.word	0x0800d119
 800ca98:	2000147c 	.word	0x2000147c
 800ca9c:	20000f84 	.word	0x20000f84
 800caa0:	20000014 	.word	0x20000014
 800caa4:	20001478 	.word	0x20001478
 800caa8:	20001464 	.word	0x20001464
 800caac:	2000145c 	.word	0x2000145c

0800cab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cab4:	4b04      	ldr	r3, [pc, #16]	; (800cac8 <vTaskSuspendAll+0x18>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3301      	adds	r3, #1
 800caba:	4a03      	ldr	r2, [pc, #12]	; (800cac8 <vTaskSuspendAll+0x18>)
 800cabc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cabe:	bf00      	nop
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	20001480 	.word	0x20001480

0800cacc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cada:	4b43      	ldr	r3, [pc, #268]	; (800cbe8 <xTaskResumeAll+0x11c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10c      	bne.n	800cafc <xTaskResumeAll+0x30>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	b672      	cpsid	i
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	b662      	cpsie	i
 800caf6:	603b      	str	r3, [r7, #0]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cafc:	f001 fb0e 	bl	800e11c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb00:	4b39      	ldr	r3, [pc, #228]	; (800cbe8 <xTaskResumeAll+0x11c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	4a38      	ldr	r2, [pc, #224]	; (800cbe8 <xTaskResumeAll+0x11c>)
 800cb08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb0a:	4b37      	ldr	r3, [pc, #220]	; (800cbe8 <xTaskResumeAll+0x11c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d162      	bne.n	800cbd8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb12:	4b36      	ldr	r3, [pc, #216]	; (800cbec <xTaskResumeAll+0x120>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d05e      	beq.n	800cbd8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb1a:	e02f      	b.n	800cb7c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb1c:	4b34      	ldr	r3, [pc, #208]	; (800cbf0 <xTaskResumeAll+0x124>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	3318      	adds	r3, #24
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fb99 	bl	800b260 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3304      	adds	r3, #4
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe fb94 	bl	800b260 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3c:	4b2d      	ldr	r3, [pc, #180]	; (800cbf4 <xTaskResumeAll+0x128>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d903      	bls.n	800cb4c <xTaskResumeAll+0x80>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	4a2a      	ldr	r2, [pc, #168]	; (800cbf4 <xTaskResumeAll+0x128>)
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4a27      	ldr	r2, [pc, #156]	; (800cbf8 <xTaskResumeAll+0x12c>)
 800cb5a:	441a      	add	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f7fe fb1f 	bl	800b1a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6c:	4b23      	ldr	r3, [pc, #140]	; (800cbfc <xTaskResumeAll+0x130>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d302      	bcc.n	800cb7c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cb76:	4b22      	ldr	r3, [pc, #136]	; (800cc00 <xTaskResumeAll+0x134>)
 800cb78:	2201      	movs	r2, #1
 800cb7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb7c:	4b1c      	ldr	r3, [pc, #112]	; (800cbf0 <xTaskResumeAll+0x124>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1cb      	bne.n	800cb1c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb8a:	f000 fb83 	bl	800d294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb8e:	4b1d      	ldr	r3, [pc, #116]	; (800cc04 <xTaskResumeAll+0x138>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d010      	beq.n	800cbbc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb9a:	f000 f859 	bl	800cc50 <xTaskIncrementTick>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cba4:	4b16      	ldr	r3, [pc, #88]	; (800cc00 <xTaskResumeAll+0x134>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1f1      	bne.n	800cb9a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cbb6:	4b13      	ldr	r3, [pc, #76]	; (800cc04 <xTaskResumeAll+0x138>)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbbc:	4b10      	ldr	r3, [pc, #64]	; (800cc00 <xTaskResumeAll+0x134>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d009      	beq.n	800cbd8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbc8:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <xTaskResumeAll+0x13c>)
 800cbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbd8:	f001 fad4 	bl	800e184 <vPortExitCritical>

	return xAlreadyYielded;
 800cbdc:	68bb      	ldr	r3, [r7, #8]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20001480 	.word	0x20001480
 800cbec:	20001458 	.word	0x20001458
 800cbf0:	20001418 	.word	0x20001418
 800cbf4:	20001460 	.word	0x20001460
 800cbf8:	20000f88 	.word	0x20000f88
 800cbfc:	20000f84 	.word	0x20000f84
 800cc00:	2000146c 	.word	0x2000146c
 800cc04:	20001468 	.word	0x20001468
 800cc08:	e000ed04 	.word	0xe000ed04

0800cc0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc12:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <xTaskGetTickCount+0x1c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc18:	687b      	ldr	r3, [r7, #4]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	370c      	adds	r7, #12
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	2000145c 	.word	0x2000145c

0800cc2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc32:	f001 fb5b 	bl	800e2ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cc36:	2300      	movs	r3, #0
 800cc38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cc3a:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <xTaskGetTickCountFromISR+0x20>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc40:	683b      	ldr	r3, [r7, #0]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	2000145c 	.word	0x2000145c

0800cc50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc5a:	4b50      	ldr	r3, [pc, #320]	; (800cd9c <xTaskIncrementTick+0x14c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f040 808b 	bne.w	800cd7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc64:	4b4e      	ldr	r3, [pc, #312]	; (800cda0 <xTaskIncrementTick+0x150>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc6c:	4a4c      	ldr	r2, [pc, #304]	; (800cda0 <xTaskIncrementTick+0x150>)
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d122      	bne.n	800ccbe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc78:	4b4a      	ldr	r3, [pc, #296]	; (800cda4 <xTaskIncrementTick+0x154>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00c      	beq.n	800cc9c <xTaskIncrementTick+0x4c>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	b672      	cpsid	i
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	b662      	cpsie	i
 800cc96:	603b      	str	r3, [r7, #0]
}
 800cc98:	bf00      	nop
 800cc9a:	e7fe      	b.n	800cc9a <xTaskIncrementTick+0x4a>
 800cc9c:	4b41      	ldr	r3, [pc, #260]	; (800cda4 <xTaskIncrementTick+0x154>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	4b41      	ldr	r3, [pc, #260]	; (800cda8 <xTaskIncrementTick+0x158>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a3f      	ldr	r2, [pc, #252]	; (800cda4 <xTaskIncrementTick+0x154>)
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	4a3f      	ldr	r2, [pc, #252]	; (800cda8 <xTaskIncrementTick+0x158>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	4b3e      	ldr	r3, [pc, #248]	; (800cdac <xTaskIncrementTick+0x15c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	4a3d      	ldr	r2, [pc, #244]	; (800cdac <xTaskIncrementTick+0x15c>)
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	f000 faeb 	bl	800d294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccbe:	4b3c      	ldr	r3, [pc, #240]	; (800cdb0 <xTaskIncrementTick+0x160>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d349      	bcc.n	800cd5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccc8:	4b36      	ldr	r3, [pc, #216]	; (800cda4 <xTaskIncrementTick+0x154>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d104      	bne.n	800ccdc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd2:	4b37      	ldr	r3, [pc, #220]	; (800cdb0 <xTaskIncrementTick+0x160>)
 800ccd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd8:	601a      	str	r2, [r3, #0]
					break;
 800ccda:	e03f      	b.n	800cd5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccdc:	4b31      	ldr	r3, [pc, #196]	; (800cda4 <xTaskIncrementTick+0x154>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d203      	bcs.n	800ccfc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccf4:	4a2e      	ldr	r2, [pc, #184]	; (800cdb0 <xTaskIncrementTick+0x160>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccfa:	e02f      	b.n	800cd5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	3304      	adds	r3, #4
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fe faad 	bl	800b260 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	3318      	adds	r3, #24
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe faa4 	bl	800b260 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1c:	4b25      	ldr	r3, [pc, #148]	; (800cdb4 <xTaskIncrementTick+0x164>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d903      	bls.n	800cd2c <xTaskIncrementTick+0xdc>
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	4a22      	ldr	r2, [pc, #136]	; (800cdb4 <xTaskIncrementTick+0x164>)
 800cd2a:	6013      	str	r3, [r2, #0]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd30:	4613      	mov	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4a1f      	ldr	r2, [pc, #124]	; (800cdb8 <xTaskIncrementTick+0x168>)
 800cd3a:	441a      	add	r2, r3
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4619      	mov	r1, r3
 800cd42:	4610      	mov	r0, r2
 800cd44:	f7fe fa2f 	bl	800b1a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4c:	4b1b      	ldr	r3, [pc, #108]	; (800cdbc <xTaskIncrementTick+0x16c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d3b8      	bcc.n	800ccc8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cd56:	2301      	movs	r3, #1
 800cd58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd5a:	e7b5      	b.n	800ccc8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd5c:	4b17      	ldr	r3, [pc, #92]	; (800cdbc <xTaskIncrementTick+0x16c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd62:	4915      	ldr	r1, [pc, #84]	; (800cdb8 <xTaskIncrementTick+0x168>)
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	440b      	add	r3, r1
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d907      	bls.n	800cd84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cd74:	2301      	movs	r3, #1
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e004      	b.n	800cd84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd7a:	4b11      	ldr	r3, [pc, #68]	; (800cdc0 <xTaskIncrementTick+0x170>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	4a0f      	ldr	r2, [pc, #60]	; (800cdc0 <xTaskIncrementTick+0x170>)
 800cd82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd84:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <xTaskIncrementTick+0x174>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd90:	697b      	ldr	r3, [r7, #20]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3718      	adds	r7, #24
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20001480 	.word	0x20001480
 800cda0:	2000145c 	.word	0x2000145c
 800cda4:	20001410 	.word	0x20001410
 800cda8:	20001414 	.word	0x20001414
 800cdac:	20001470 	.word	0x20001470
 800cdb0:	20001478 	.word	0x20001478
 800cdb4:	20001460 	.word	0x20001460
 800cdb8:	20000f88 	.word	0x20000f88
 800cdbc:	20000f84 	.word	0x20000f84
 800cdc0:	20001468 	.word	0x20001468
 800cdc4:	2000146c 	.word	0x2000146c

0800cdc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdce:	4b2b      	ldr	r3, [pc, #172]	; (800ce7c <vTaskSwitchContext+0xb4>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d003      	beq.n	800cdde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdd6:	4b2a      	ldr	r3, [pc, #168]	; (800ce80 <vTaskSwitchContext+0xb8>)
 800cdd8:	2201      	movs	r2, #1
 800cdda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cddc:	e048      	b.n	800ce70 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800cdde:	4b28      	ldr	r3, [pc, #160]	; (800ce80 <vTaskSwitchContext+0xb8>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde4:	4b27      	ldr	r3, [pc, #156]	; (800ce84 <vTaskSwitchContext+0xbc>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	60fb      	str	r3, [r7, #12]
 800cdea:	e012      	b.n	800ce12 <vTaskSwitchContext+0x4a>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10c      	bne.n	800ce0c <vTaskSwitchContext+0x44>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	b672      	cpsid	i
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	b662      	cpsie	i
 800ce06:	607b      	str	r3, [r7, #4]
}
 800ce08:	bf00      	nop
 800ce0a:	e7fe      	b.n	800ce0a <vTaskSwitchContext+0x42>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	60fb      	str	r3, [r7, #12]
 800ce12:	491d      	ldr	r1, [pc, #116]	; (800ce88 <vTaskSwitchContext+0xc0>)
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	4613      	mov	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	440b      	add	r3, r1
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0e2      	beq.n	800cdec <vTaskSwitchContext+0x24>
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <vTaskSwitchContext+0xc0>)
 800ce32:	4413      	add	r3, r2
 800ce34:	60bb      	str	r3, [r7, #8]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	605a      	str	r2, [r3, #4]
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	3308      	adds	r3, #8
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d104      	bne.n	800ce56 <vTaskSwitchContext+0x8e>
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	605a      	str	r2, [r3, #4]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	4a0b      	ldr	r2, [pc, #44]	; (800ce8c <vTaskSwitchContext+0xc4>)
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	4a08      	ldr	r2, [pc, #32]	; (800ce84 <vTaskSwitchContext+0xbc>)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <vTaskSwitchContext+0xc4>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3354      	adds	r3, #84	; 0x54
 800ce6c:	4a08      	ldr	r2, [pc, #32]	; (800ce90 <vTaskSwitchContext+0xc8>)
 800ce6e:	6013      	str	r3, [r2, #0]
}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	20001480 	.word	0x20001480
 800ce80:	2000146c 	.word	0x2000146c
 800ce84:	20001460 	.word	0x20001460
 800ce88:	20000f88 	.word	0x20000f88
 800ce8c:	20000f84 	.word	0x20000f84
 800ce90:	20000014 	.word	0x20000014

0800ce94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10c      	bne.n	800cebe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	b672      	cpsid	i
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	b662      	cpsie	i
 800ceb8:	60fb      	str	r3, [r7, #12]
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cebe:	4b07      	ldr	r3, [pc, #28]	; (800cedc <vTaskPlaceOnEventList+0x48>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3318      	adds	r3, #24
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7fe f991 	bl	800b1ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cecc:	2101      	movs	r1, #1
 800cece:	6838      	ldr	r0, [r7, #0]
 800ced0:	f000 fba2 	bl	800d618 <prvAddCurrentTaskToDelayedList>
}
 800ced4:	bf00      	nop
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	20000f84 	.word	0x20000f84

0800cee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10c      	bne.n	800cf0c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef6:	b672      	cpsid	i
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	b662      	cpsie	i
 800cf06:	617b      	str	r3, [r7, #20]
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <vTaskPlaceOnEventListRestricted+0x58>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3318      	adds	r3, #24
 800cf12:	4619      	mov	r1, r3
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7fe f946 	bl	800b1a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800cf20:	f04f 33ff 	mov.w	r3, #4294967295
 800cf24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	68b8      	ldr	r0, [r7, #8]
 800cf2a:	f000 fb75 	bl	800d618 <prvAddCurrentTaskToDelayedList>
	}
 800cf2e:	bf00      	nop
 800cf30:	3718      	adds	r7, #24
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000f84 	.word	0x20000f84

0800cf3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10c      	bne.n	800cf6c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	b672      	cpsid	i
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	b662      	cpsie	i
 800cf66:	60fb      	str	r3, [r7, #12]
}
 800cf68:	bf00      	nop
 800cf6a:	e7fe      	b.n	800cf6a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	3318      	adds	r3, #24
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe f975 	bl	800b260 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf76:	4b1e      	ldr	r3, [pc, #120]	; (800cff0 <xTaskRemoveFromEventList+0xb4>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d11d      	bne.n	800cfba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe f96c 	bl	800b260 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8c:	4b19      	ldr	r3, [pc, #100]	; (800cff4 <xTaskRemoveFromEventList+0xb8>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d903      	bls.n	800cf9c <xTaskRemoveFromEventList+0x60>
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	4a16      	ldr	r2, [pc, #88]	; (800cff4 <xTaskRemoveFromEventList+0xb8>)
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4a13      	ldr	r2, [pc, #76]	; (800cff8 <xTaskRemoveFromEventList+0xbc>)
 800cfaa:	441a      	add	r2, r3
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	f7fe f8f7 	bl	800b1a6 <vListInsertEnd>
 800cfb8:	e005      	b.n	800cfc6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	3318      	adds	r3, #24
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	480e      	ldr	r0, [pc, #56]	; (800cffc <xTaskRemoveFromEventList+0xc0>)
 800cfc2:	f7fe f8f0 	bl	800b1a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfca:	4b0d      	ldr	r3, [pc, #52]	; (800d000 <xTaskRemoveFromEventList+0xc4>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d905      	bls.n	800cfe0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <xTaskRemoveFromEventList+0xc8>)
 800cfda:	2201      	movs	r2, #1
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	e001      	b.n	800cfe4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfe4:	697b      	ldr	r3, [r7, #20]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20001480 	.word	0x20001480
 800cff4:	20001460 	.word	0x20001460
 800cff8:	20000f88 	.word	0x20000f88
 800cffc:	20001418 	.word	0x20001418
 800d000:	20000f84 	.word	0x20000f84
 800d004:	2000146c 	.word	0x2000146c

0800d008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d010:	4b06      	ldr	r3, [pc, #24]	; (800d02c <vTaskInternalSetTimeOutState+0x24>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d018:	4b05      	ldr	r3, [pc, #20]	; (800d030 <vTaskInternalSetTimeOutState+0x28>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	605a      	str	r2, [r3, #4]
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	20001470 	.word	0x20001470
 800d030:	2000145c 	.word	0x2000145c

0800d034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10c      	bne.n	800d05e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	b672      	cpsid	i
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	b662      	cpsie	i
 800d058:	613b      	str	r3, [r7, #16]
}
 800d05a:	bf00      	nop
 800d05c:	e7fe      	b.n	800d05c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10c      	bne.n	800d07e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	b672      	cpsid	i
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	b662      	cpsie	i
 800d078:	60fb      	str	r3, [r7, #12]
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d07e:	f001 f84d 	bl	800e11c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d082:	4b1d      	ldr	r3, [pc, #116]	; (800d0f8 <xTaskCheckForTimeOut+0xc4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	69ba      	ldr	r2, [r7, #24]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09a:	d102      	bne.n	800d0a2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d09c:	2300      	movs	r3, #0
 800d09e:	61fb      	str	r3, [r7, #28]
 800d0a0:	e023      	b.n	800d0ea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	4b15      	ldr	r3, [pc, #84]	; (800d0fc <xTaskCheckForTimeOut+0xc8>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d007      	beq.n	800d0be <xTaskCheckForTimeOut+0x8a>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d302      	bcc.n	800d0be <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	e015      	b.n	800d0ea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d20b      	bcs.n	800d0e0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	1ad2      	subs	r2, r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff ff97 	bl	800d008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	61fb      	str	r3, [r7, #28]
 800d0de:	e004      	b.n	800d0ea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0ea:	f001 f84b 	bl	800e184 <vPortExitCritical>

	return xReturn;
 800d0ee:	69fb      	ldr	r3, [r7, #28]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3720      	adds	r7, #32
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	2000145c 	.word	0x2000145c
 800d0fc:	20001470 	.word	0x20001470

0800d100 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d100:	b480      	push	{r7}
 800d102:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d104:	4b03      	ldr	r3, [pc, #12]	; (800d114 <vTaskMissedYield+0x14>)
 800d106:	2201      	movs	r2, #1
 800d108:	601a      	str	r2, [r3, #0]
}
 800d10a:	bf00      	nop
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	2000146c 	.word	0x2000146c

0800d118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d120:	f000 f854 	bl	800d1cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d124:	4b07      	ldr	r3, [pc, #28]	; (800d144 <prvIdleTask+0x2c>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d907      	bls.n	800d13c <prvIdleTask+0x24>
			{
				taskYIELD();
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <prvIdleTask+0x30>)
 800d12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d13c:	f7f4 fc66 	bl	8001a0c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d140:	e7ee      	b.n	800d120 <prvIdleTask+0x8>
 800d142:	bf00      	nop
 800d144:	20000f88 	.word	0x20000f88
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
 800d156:	e00c      	b.n	800d172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	4613      	mov	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4a12      	ldr	r2, [pc, #72]	; (800d1ac <prvInitialiseTaskLists+0x60>)
 800d164:	4413      	add	r3, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd fff0 	bl	800b14c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	3301      	adds	r3, #1
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b37      	cmp	r3, #55	; 0x37
 800d176:	d9ef      	bls.n	800d158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d178:	480d      	ldr	r0, [pc, #52]	; (800d1b0 <prvInitialiseTaskLists+0x64>)
 800d17a:	f7fd ffe7 	bl	800b14c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d17e:	480d      	ldr	r0, [pc, #52]	; (800d1b4 <prvInitialiseTaskLists+0x68>)
 800d180:	f7fd ffe4 	bl	800b14c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d184:	480c      	ldr	r0, [pc, #48]	; (800d1b8 <prvInitialiseTaskLists+0x6c>)
 800d186:	f7fd ffe1 	bl	800b14c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d18a:	480c      	ldr	r0, [pc, #48]	; (800d1bc <prvInitialiseTaskLists+0x70>)
 800d18c:	f7fd ffde 	bl	800b14c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d190:	480b      	ldr	r0, [pc, #44]	; (800d1c0 <prvInitialiseTaskLists+0x74>)
 800d192:	f7fd ffdb 	bl	800b14c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d196:	4b0b      	ldr	r3, [pc, #44]	; (800d1c4 <prvInitialiseTaskLists+0x78>)
 800d198:	4a05      	ldr	r2, [pc, #20]	; (800d1b0 <prvInitialiseTaskLists+0x64>)
 800d19a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <prvInitialiseTaskLists+0x7c>)
 800d19e:	4a05      	ldr	r2, [pc, #20]	; (800d1b4 <prvInitialiseTaskLists+0x68>)
 800d1a0:	601a      	str	r2, [r3, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20000f88 	.word	0x20000f88
 800d1b0:	200013e8 	.word	0x200013e8
 800d1b4:	200013fc 	.word	0x200013fc
 800d1b8:	20001418 	.word	0x20001418
 800d1bc:	2000142c 	.word	0x2000142c
 800d1c0:	20001444 	.word	0x20001444
 800d1c4:	20001410 	.word	0x20001410
 800d1c8:	20001414 	.word	0x20001414

0800d1cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1d2:	e019      	b.n	800d208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1d4:	f000 ffa2 	bl	800e11c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d8:	4b10      	ldr	r3, [pc, #64]	; (800d21c <prvCheckTasksWaitingTermination+0x50>)
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe f83b 	bl	800b260 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1ea:	4b0d      	ldr	r3, [pc, #52]	; (800d220 <prvCheckTasksWaitingTermination+0x54>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	4a0b      	ldr	r2, [pc, #44]	; (800d220 <prvCheckTasksWaitingTermination+0x54>)
 800d1f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1f4:	4b0b      	ldr	r3, [pc, #44]	; (800d224 <prvCheckTasksWaitingTermination+0x58>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4a0a      	ldr	r2, [pc, #40]	; (800d224 <prvCheckTasksWaitingTermination+0x58>)
 800d1fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1fe:	f000 ffc1 	bl	800e184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f810 	bl	800d228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d208:	4b06      	ldr	r3, [pc, #24]	; (800d224 <prvCheckTasksWaitingTermination+0x58>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e1      	bne.n	800d1d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d210:	bf00      	nop
 800d212:	bf00      	nop
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	2000142c 	.word	0x2000142c
 800d220:	20001458 	.word	0x20001458
 800d224:	20001440 	.word	0x20001440

0800d228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3354      	adds	r3, #84	; 0x54
 800d234:	4618      	mov	r0, r3
 800d236:	f001 fad5 	bl	800e7e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d240:	2b00      	cmp	r3, #0
 800d242:	d108      	bne.n	800d256 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d248:	4618      	mov	r0, r3
 800d24a:	f001 f95d 	bl	800e508 <vPortFree>
				vPortFree( pxTCB );
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f001 f95a 	bl	800e508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d254:	e01a      	b.n	800d28c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d103      	bne.n	800d268 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 f951 	bl	800e508 <vPortFree>
	}
 800d266:	e011      	b.n	800d28c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d00c      	beq.n	800d28c <prvDeleteTCB+0x64>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	b672      	cpsid	i
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	b662      	cpsie	i
 800d286:	60fb      	str	r3, [r7, #12]
}
 800d288:	bf00      	nop
 800d28a:	e7fe      	b.n	800d28a <prvDeleteTCB+0x62>
	}
 800d28c:	bf00      	nop
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d29a:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <prvResetNextTaskUnblockTime+0x38>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d104      	bne.n	800d2ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2a4:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <prvResetNextTaskUnblockTime+0x3c>)
 800d2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2ac:	e008      	b.n	800d2c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ae:	4b07      	ldr	r3, [pc, #28]	; (800d2cc <prvResetNextTaskUnblockTime+0x38>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4a04      	ldr	r2, [pc, #16]	; (800d2d0 <prvResetNextTaskUnblockTime+0x3c>)
 800d2be:	6013      	str	r3, [r2, #0]
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	20001410 	.word	0x20001410
 800d2d0:	20001478 	.word	0x20001478

0800d2d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d2da:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <xTaskGetCurrentTaskHandle+0x1c>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d2e0:	687b      	ldr	r3, [r7, #4]
	}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	20000f84 	.word	0x20000f84

0800d2f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2fa:	4b0b      	ldr	r3, [pc, #44]	; (800d328 <xTaskGetSchedulerState+0x34>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d102      	bne.n	800d308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d302:	2301      	movs	r3, #1
 800d304:	607b      	str	r3, [r7, #4]
 800d306:	e008      	b.n	800d31a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d308:	4b08      	ldr	r3, [pc, #32]	; (800d32c <xTaskGetSchedulerState+0x38>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d102      	bne.n	800d316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d310:	2302      	movs	r3, #2
 800d312:	607b      	str	r3, [r7, #4]
 800d314:	e001      	b.n	800d31a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d316:	2300      	movs	r3, #0
 800d318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d31a:	687b      	ldr	r3, [r7, #4]
	}
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	20001464 	.word	0x20001464
 800d32c:	20001480 	.word	0x20001480

0800d330 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d051      	beq.n	800d3ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34a:	4b2a      	ldr	r3, [pc, #168]	; (800d3f4 <xTaskPriorityInherit+0xc4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	429a      	cmp	r2, r3
 800d352:	d241      	bcs.n	800d3d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	db06      	blt.n	800d36a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d35c:	4b25      	ldr	r3, [pc, #148]	; (800d3f4 <xTaskPriorityInherit+0xc4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6959      	ldr	r1, [r3, #20]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d372:	4613      	mov	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4a1f      	ldr	r2, [pc, #124]	; (800d3f8 <xTaskPriorityInherit+0xc8>)
 800d37c:	4413      	add	r3, r2
 800d37e:	4299      	cmp	r1, r3
 800d380:	d122      	bne.n	800d3c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	3304      	adds	r3, #4
 800d386:	4618      	mov	r0, r3
 800d388:	f7fd ff6a 	bl	800b260 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d38c:	4b19      	ldr	r3, [pc, #100]	; (800d3f4 <xTaskPriorityInherit+0xc4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39a:	4b18      	ldr	r3, [pc, #96]	; (800d3fc <xTaskPriorityInherit+0xcc>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d903      	bls.n	800d3aa <xTaskPriorityInherit+0x7a>
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a6:	4a15      	ldr	r2, [pc, #84]	; (800d3fc <xTaskPriorityInherit+0xcc>)
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4413      	add	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4a10      	ldr	r2, [pc, #64]	; (800d3f8 <xTaskPriorityInherit+0xc8>)
 800d3b8:	441a      	add	r2, r3
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	f7fd fef0 	bl	800b1a6 <vListInsertEnd>
 800d3c6:	e004      	b.n	800d3d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3c8:	4b0a      	ldr	r3, [pc, #40]	; (800d3f4 <xTaskPriorityInherit+0xc4>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	e008      	b.n	800d3ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3dc:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <xTaskPriorityInherit+0xc4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d201      	bcs.n	800d3ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
	}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	20000f84 	.word	0x20000f84
 800d3f8:	20000f88 	.word	0x20000f88
 800d3fc:	20001460 	.word	0x20001460

0800d400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d40c:	2300      	movs	r3, #0
 800d40e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d05a      	beq.n	800d4cc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d416:	4b30      	ldr	r3, [pc, #192]	; (800d4d8 <xTaskPriorityDisinherit+0xd8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d00c      	beq.n	800d43a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d424:	b672      	cpsid	i
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	b662      	cpsie	i
 800d434:	60fb      	str	r3, [r7, #12]
}
 800d436:	bf00      	nop
 800d438:	e7fe      	b.n	800d438 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10c      	bne.n	800d45c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	b672      	cpsid	i
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	b662      	cpsie	i
 800d456:	60bb      	str	r3, [r7, #8]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d460:	1e5a      	subs	r2, r3, #1
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d46e:	429a      	cmp	r2, r3
 800d470:	d02c      	beq.n	800d4cc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d476:	2b00      	cmp	r3, #0
 800d478:	d128      	bne.n	800d4cc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	3304      	adds	r3, #4
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fd feee 	bl	800b260 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49c:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <xTaskPriorityDisinherit+0xdc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d903      	bls.n	800d4ac <xTaskPriorityDisinherit+0xac>
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a8:	4a0c      	ldr	r2, [pc, #48]	; (800d4dc <xTaskPriorityDisinherit+0xdc>)
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4413      	add	r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4a09      	ldr	r2, [pc, #36]	; (800d4e0 <xTaskPriorityDisinherit+0xe0>)
 800d4ba:	441a      	add	r2, r3
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	3304      	adds	r3, #4
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	4610      	mov	r0, r2
 800d4c4:	f7fd fe6f 	bl	800b1a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4cc:	697b      	ldr	r3, [r7, #20]
	}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20000f84 	.word	0x20000f84
 800d4dc:	20001460 	.word	0x20001460
 800d4e0:	20000f88 	.word	0x20000f88

0800d4e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b088      	sub	sp, #32
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d06e      	beq.n	800d5da <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10c      	bne.n	800d51e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d508:	b672      	cpsid	i
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	b662      	cpsie	i
 800d518:	60fb      	str	r3, [r7, #12]
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d522:	683a      	ldr	r2, [r7, #0]
 800d524:	429a      	cmp	r2, r3
 800d526:	d902      	bls.n	800d52e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	61fb      	str	r3, [r7, #28]
 800d52c:	e002      	b.n	800d534 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d532:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d538:	69fa      	ldr	r2, [r7, #28]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d04d      	beq.n	800d5da <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	429a      	cmp	r2, r3
 800d546:	d148      	bne.n	800d5da <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d548:	4b26      	ldr	r3, [pc, #152]	; (800d5e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d10c      	bne.n	800d56c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	b672      	cpsid	i
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	b662      	cpsie	i
 800d566:	60bb      	str	r3, [r7, #8]
}
 800d568:	bf00      	nop
 800d56a:	e7fe      	b.n	800d56a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d570:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	69fa      	ldr	r2, [r7, #28]
 800d576:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	db04      	blt.n	800d58a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	6959      	ldr	r1, [r3, #20]
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	4613      	mov	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4a13      	ldr	r2, [pc, #76]	; (800d5e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d59a:	4413      	add	r3, r2
 800d59c:	4299      	cmp	r1, r3
 800d59e:	d11c      	bne.n	800d5da <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fd fe5b 	bl	800b260 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ae:	4b0f      	ldr	r3, [pc, #60]	; (800d5ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d903      	bls.n	800d5be <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ba:	4a0c      	ldr	r2, [pc, #48]	; (800d5ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d5bc:	6013      	str	r3, [r2, #0]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4413      	add	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4a07      	ldr	r2, [pc, #28]	; (800d5e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d5cc:	441a      	add	r2, r3
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	f7fd fde6 	bl	800b1a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5da:	bf00      	nop
 800d5dc:	3720      	adds	r7, #32
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20000f84 	.word	0x20000f84
 800d5e8:	20000f88 	.word	0x20000f88
 800d5ec:	20001460 	.word	0x20001460

0800d5f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5f0:	b480      	push	{r7}
 800d5f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5f4:	4b07      	ldr	r3, [pc, #28]	; (800d614 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5fc:	4b05      	ldr	r3, [pc, #20]	; (800d614 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d602:	3201      	adds	r2, #1
 800d604:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d606:	4b03      	ldr	r3, [pc, #12]	; (800d614 <pvTaskIncrementMutexHeldCount+0x24>)
 800d608:	681b      	ldr	r3, [r3, #0]
	}
 800d60a:	4618      	mov	r0, r3
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20000f84 	.word	0x20000f84

0800d618 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d622:	4b21      	ldr	r3, [pc, #132]	; (800d6a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d628:	4b20      	ldr	r3, [pc, #128]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	3304      	adds	r3, #4
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd fe16 	bl	800b260 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63a:	d10a      	bne.n	800d652 <prvAddCurrentTaskToDelayedList+0x3a>
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d007      	beq.n	800d652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d642:	4b1a      	ldr	r3, [pc, #104]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3304      	adds	r3, #4
 800d648:	4619      	mov	r1, r3
 800d64a:	4819      	ldr	r0, [pc, #100]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d64c:	f7fd fdab 	bl	800b1a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d650:	e026      	b.n	800d6a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4413      	add	r3, r2
 800d658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d65a:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	429a      	cmp	r2, r3
 800d668:	d209      	bcs.n	800d67e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d66a:	4b12      	ldr	r3, [pc, #72]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3304      	adds	r3, #4
 800d674:	4619      	mov	r1, r3
 800d676:	4610      	mov	r0, r2
 800d678:	f7fd fdb9 	bl	800b1ee <vListInsert>
}
 800d67c:	e010      	b.n	800d6a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d67e:	4b0e      	ldr	r3, [pc, #56]	; (800d6b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3304      	adds	r3, #4
 800d688:	4619      	mov	r1, r3
 800d68a:	4610      	mov	r0, r2
 800d68c:	f7fd fdaf 	bl	800b1ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d690:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68ba      	ldr	r2, [r7, #8]
 800d696:	429a      	cmp	r2, r3
 800d698:	d202      	bcs.n	800d6a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d69a:	4a08      	ldr	r2, [pc, #32]	; (800d6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	6013      	str	r3, [r2, #0]
}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	2000145c 	.word	0x2000145c
 800d6ac:	20000f84 	.word	0x20000f84
 800d6b0:	20001444 	.word	0x20001444
 800d6b4:	20001414 	.word	0x20001414
 800d6b8:	20001410 	.word	0x20001410
 800d6bc:	20001478 	.word	0x20001478

0800d6c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08a      	sub	sp, #40	; 0x28
 800d6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6ca:	f000 fbb5 	bl	800de38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6ce:	4b1d      	ldr	r3, [pc, #116]	; (800d744 <xTimerCreateTimerTask+0x84>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d021      	beq.n	800d71a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6de:	1d3a      	adds	r2, r7, #4
 800d6e0:	f107 0108 	add.w	r1, r7, #8
 800d6e4:	f107 030c 	add.w	r3, r7, #12
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fd fd15 	bl	800b118 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6ee:	6879      	ldr	r1, [r7, #4]
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	9202      	str	r2, [sp, #8]
 800d6f6:	9301      	str	r3, [sp, #4]
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	460a      	mov	r2, r1
 800d700:	4911      	ldr	r1, [pc, #68]	; (800d748 <xTimerCreateTimerTask+0x88>)
 800d702:	4812      	ldr	r0, [pc, #72]	; (800d74c <xTimerCreateTimerTask+0x8c>)
 800d704:	f7fe fee6 	bl	800c4d4 <xTaskCreateStatic>
 800d708:	4603      	mov	r3, r0
 800d70a:	4a11      	ldr	r2, [pc, #68]	; (800d750 <xTimerCreateTimerTask+0x90>)
 800d70c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d70e:	4b10      	ldr	r3, [pc, #64]	; (800d750 <xTimerCreateTimerTask+0x90>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d716:	2301      	movs	r3, #1
 800d718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10c      	bne.n	800d73a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	b672      	cpsid	i
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	b662      	cpsie	i
 800d734:	613b      	str	r3, [r7, #16]
}
 800d736:	bf00      	nop
 800d738:	e7fe      	b.n	800d738 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d73a:	697b      	ldr	r3, [r7, #20]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	200014b4 	.word	0x200014b4
 800d748:	0800eefc 	.word	0x0800eefc
 800d74c:	0800d9d1 	.word	0x0800d9d1
 800d750:	200014b8 	.word	0x200014b8

0800d754 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b088      	sub	sp, #32
 800d758:	af02      	add	r7, sp, #8
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d762:	202c      	movs	r0, #44	; 0x2c
 800d764:	f000 fe06 	bl	800e374 <pvPortMalloc>
 800d768:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00d      	beq.n	800d78c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	9301      	str	r3, [sp, #4]
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	68b9      	ldr	r1, [r7, #8]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f847 	bl	800d81a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d78c:	697b      	ldr	r3, [r7, #20]
	}
 800d78e:	4618      	mov	r0, r3
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d796:	b580      	push	{r7, lr}
 800d798:	b08a      	sub	sp, #40	; 0x28
 800d79a:	af02      	add	r7, sp, #8
 800d79c:	60f8      	str	r0, [r7, #12]
 800d79e:	60b9      	str	r1, [r7, #8]
 800d7a0:	607a      	str	r2, [r7, #4]
 800d7a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d7a4:	232c      	movs	r3, #44	; 0x2c
 800d7a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2b2c      	cmp	r3, #44	; 0x2c
 800d7ac:	d00c      	beq.n	800d7c8 <xTimerCreateStatic+0x32>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	b672      	cpsid	i
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	b662      	cpsie	i
 800d7c2:	61bb      	str	r3, [r7, #24]
}
 800d7c4:	bf00      	nop
 800d7c6:	e7fe      	b.n	800d7c6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10c      	bne.n	800d7ea <xTimerCreateStatic+0x54>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	b672      	cpsid	i
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	b662      	cpsie	i
 800d7e4:	617b      	str	r3, [r7, #20]
}
 800d7e6:	bf00      	nop
 800d7e8:	e7fe      	b.n	800d7e8 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00d      	beq.n	800d810 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 f805 	bl	800d81a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d810:	69fb      	ldr	r3, [r7, #28]
	}
 800d812:	4618      	mov	r0, r3
 800d814:	3720      	adds	r7, #32
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b086      	sub	sp, #24
 800d81e:	af00      	add	r7, sp, #0
 800d820:	60f8      	str	r0, [r7, #12]
 800d822:	60b9      	str	r1, [r7, #8]
 800d824:	607a      	str	r2, [r7, #4]
 800d826:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10c      	bne.n	800d848 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	b672      	cpsid	i
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	b662      	cpsie	i
 800d842:	617b      	str	r3, [r7, #20]
}
 800d844:	bf00      	nop
 800d846:	e7fe      	b.n	800d846 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d01e      	beq.n	800d88c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d84e:	f000 faf3 	bl	800de38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	6a3a      	ldr	r2, [r7, #32]
 800d868:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	3304      	adds	r3, #4
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fd fc8c 	bl	800b18c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d008      	beq.n	800d88c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d880:	f043 0304 	orr.w	r3, r3, #4
 800d884:	b2da      	uxtb	r2, r3
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d88c:	bf00      	nop
 800d88e:	3718      	adds	r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b08a      	sub	sp, #40	; 0x28
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
 800d8a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10c      	bne.n	800d8c6 <xTimerGenericCommand+0x32>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	b672      	cpsid	i
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	b662      	cpsie	i
 800d8c0:	623b      	str	r3, [r7, #32]
}
 800d8c2:	bf00      	nop
 800d8c4:	e7fe      	b.n	800d8c4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d8c6:	4b1a      	ldr	r3, [pc, #104]	; (800d930 <xTimerGenericCommand+0x9c>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d02a      	beq.n	800d924 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2b05      	cmp	r3, #5
 800d8de:	dc18      	bgt.n	800d912 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d8e0:	f7ff fd08 	bl	800d2f4 <xTaskGetSchedulerState>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d109      	bne.n	800d8fe <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d8ea:	4b11      	ldr	r3, [pc, #68]	; (800d930 <xTimerGenericCommand+0x9c>)
 800d8ec:	6818      	ldr	r0, [r3, #0]
 800d8ee:	f107 0110 	add.w	r1, r7, #16
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f6:	f7fd ff5b 	bl	800b7b0 <xQueueGenericSend>
 800d8fa:	6278      	str	r0, [r7, #36]	; 0x24
 800d8fc:	e012      	b.n	800d924 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d8fe:	4b0c      	ldr	r3, [pc, #48]	; (800d930 <xTimerGenericCommand+0x9c>)
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	f107 0110 	add.w	r1, r7, #16
 800d906:	2300      	movs	r3, #0
 800d908:	2200      	movs	r2, #0
 800d90a:	f7fd ff51 	bl	800b7b0 <xQueueGenericSend>
 800d90e:	6278      	str	r0, [r7, #36]	; 0x24
 800d910:	e008      	b.n	800d924 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d912:	4b07      	ldr	r3, [pc, #28]	; (800d930 <xTimerGenericCommand+0x9c>)
 800d914:	6818      	ldr	r0, [r3, #0]
 800d916:	f107 0110 	add.w	r1, r7, #16
 800d91a:	2300      	movs	r3, #0
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	f7fe f84d 	bl	800b9bc <xQueueGenericSendFromISR>
 800d922:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d926:	4618      	mov	r0, r3
 800d928:	3728      	adds	r7, #40	; 0x28
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	200014b4 	.word	0x200014b4

0800d934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af02      	add	r7, sp, #8
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d93e:	4b23      	ldr	r3, [pc, #140]	; (800d9cc <prvProcessExpiredTimer+0x98>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fd fc87 	bl	800b260 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d958:	f003 0304 	and.w	r3, r3, #4
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d024      	beq.n	800d9aa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	699a      	ldr	r2, [r3, #24]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	18d1      	adds	r1, r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	6978      	ldr	r0, [r7, #20]
 800d96e:	f000 f8d3 	bl	800db18 <prvInsertTimerInActiveList>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d021      	beq.n	800d9bc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d978:	2300      	movs	r3, #0
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2300      	movs	r3, #0
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	2100      	movs	r1, #0
 800d982:	6978      	ldr	r0, [r7, #20]
 800d984:	f7ff ff86 	bl	800d894 <xTimerGenericCommand>
 800d988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d115      	bne.n	800d9bc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	b672      	cpsid	i
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	b662      	cpsie	i
 800d9a4:	60fb      	str	r3, [r7, #12]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9b0:	f023 0301 	bic.w	r3, r3, #1
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	6978      	ldr	r0, [r7, #20]
 800d9c2:	4798      	blx	r3
}
 800d9c4:	bf00      	nop
 800d9c6:	3718      	adds	r7, #24
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	200014ac 	.word	0x200014ac

0800d9d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9d8:	f107 0308 	add.w	r3, r7, #8
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 f857 	bl	800da90 <prvGetNextExpireTime>
 800d9e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 f803 	bl	800d9f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d9ee:	f000 f8d5 	bl	800db9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9f2:	e7f1      	b.n	800d9d8 <prvTimerTask+0x8>

0800d9f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d9fe:	f7ff f857 	bl	800cab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da02:	f107 0308 	add.w	r3, r7, #8
 800da06:	4618      	mov	r0, r3
 800da08:	f000 f866 	bl	800dad8 <prvSampleTimeNow>
 800da0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d130      	bne.n	800da76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <prvProcessTimerOrBlockTask+0x3c>
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d806      	bhi.n	800da30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da22:	f7ff f853 	bl	800cacc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da26:	68f9      	ldr	r1, [r7, #12]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff ff83 	bl	800d934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da2e:	e024      	b.n	800da7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d008      	beq.n	800da48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da36:	4b13      	ldr	r3, [pc, #76]	; (800da84 <prvProcessTimerOrBlockTask+0x90>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <prvProcessTimerOrBlockTask+0x50>
 800da40:	2301      	movs	r3, #1
 800da42:	e000      	b.n	800da46 <prvProcessTimerOrBlockTask+0x52>
 800da44:	2300      	movs	r3, #0
 800da46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <prvProcessTimerOrBlockTask+0x94>)
 800da4a:	6818      	ldr	r0, [r3, #0]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	683a      	ldr	r2, [r7, #0]
 800da54:	4619      	mov	r1, r3
 800da56:	f7fe fd09 	bl	800c46c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da5a:	f7ff f837 	bl	800cacc <xTaskResumeAll>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10a      	bne.n	800da7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da64:	4b09      	ldr	r3, [pc, #36]	; (800da8c <prvProcessTimerOrBlockTask+0x98>)
 800da66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da6a:	601a      	str	r2, [r3, #0]
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	f3bf 8f6f 	isb	sy
}
 800da74:	e001      	b.n	800da7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da76:	f7ff f829 	bl	800cacc <xTaskResumeAll>
}
 800da7a:	bf00      	nop
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	200014b0 	.word	0x200014b0
 800da88:	200014b4 	.word	0x200014b4
 800da8c:	e000ed04 	.word	0xe000ed04

0800da90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da98:	4b0e      	ldr	r3, [pc, #56]	; (800dad4 <prvGetNextExpireTime+0x44>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <prvGetNextExpireTime+0x16>
 800daa2:	2201      	movs	r2, #1
 800daa4:	e000      	b.n	800daa8 <prvGetNextExpireTime+0x18>
 800daa6:	2200      	movs	r2, #0
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d105      	bne.n	800dac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dab4:	4b07      	ldr	r3, [pc, #28]	; (800dad4 <prvGetNextExpireTime+0x44>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	60fb      	str	r3, [r7, #12]
 800dabe:	e001      	b.n	800dac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dac4:	68fb      	ldr	r3, [r7, #12]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	200014ac 	.word	0x200014ac

0800dad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dae0:	f7ff f894 	bl	800cc0c <xTaskGetTickCount>
 800dae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dae6:	4b0b      	ldr	r3, [pc, #44]	; (800db14 <prvSampleTimeNow+0x3c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	429a      	cmp	r2, r3
 800daee:	d205      	bcs.n	800dafc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800daf0:	f000 f93c 	bl	800dd6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2201      	movs	r2, #1
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	e002      	b.n	800db02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db02:	4a04      	ldr	r2, [pc, #16]	; (800db14 <prvSampleTimeNow+0x3c>)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db08:	68fb      	ldr	r3, [r7, #12]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	200014bc 	.word	0x200014bc

0800db18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db26:	2300      	movs	r3, #0
 800db28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d812      	bhi.n	800db64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	1ad2      	subs	r2, r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d302      	bcc.n	800db52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db4c:	2301      	movs	r3, #1
 800db4e:	617b      	str	r3, [r7, #20]
 800db50:	e01b      	b.n	800db8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db52:	4b10      	ldr	r3, [pc, #64]	; (800db94 <prvInsertTimerInActiveList+0x7c>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3304      	adds	r3, #4
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f7fd fb46 	bl	800b1ee <vListInsert>
 800db62:	e012      	b.n	800db8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d206      	bcs.n	800db7a <prvInsertTimerInActiveList+0x62>
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d302      	bcc.n	800db7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db74:	2301      	movs	r3, #1
 800db76:	617b      	str	r3, [r7, #20]
 800db78:	e007      	b.n	800db8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db7a:	4b07      	ldr	r3, [pc, #28]	; (800db98 <prvInsertTimerInActiveList+0x80>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3304      	adds	r3, #4
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f7fd fb32 	bl	800b1ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db8a:	697b      	ldr	r3, [r7, #20]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3718      	adds	r7, #24
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	200014b0 	.word	0x200014b0
 800db98:	200014ac 	.word	0x200014ac

0800db9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08e      	sub	sp, #56	; 0x38
 800dba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dba2:	e0d0      	b.n	800dd46 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	da1a      	bge.n	800dbe0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dbaa:	1d3b      	adds	r3, r7, #4
 800dbac:	3304      	adds	r3, #4
 800dbae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10c      	bne.n	800dbd0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800dbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbba:	b672      	cpsid	i
 800dbbc:	f383 8811 	msr	BASEPRI, r3
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	f3bf 8f4f 	dsb	sy
 800dbc8:	b662      	cpsie	i
 800dbca:	61fb      	str	r3, [r7, #28]
}
 800dbcc:	bf00      	nop
 800dbce:	e7fe      	b.n	800dbce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd6:	6850      	ldr	r0, [r2, #4]
 800dbd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbda:	6892      	ldr	r2, [r2, #8]
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f2c0 80ae 	blt.w	800dd44 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d004      	beq.n	800dbfe <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fd fb31 	bl	800b260 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbfe:	463b      	mov	r3, r7
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff ff69 	bl	800dad8 <prvSampleTimeNow>
 800dc06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b09      	cmp	r3, #9
 800dc0c:	f200 809b 	bhi.w	800dd46 <prvProcessReceivedCommands+0x1aa>
 800dc10:	a201      	add	r2, pc, #4	; (adr r2, 800dc18 <prvProcessReceivedCommands+0x7c>)
 800dc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc16:	bf00      	nop
 800dc18:	0800dc41 	.word	0x0800dc41
 800dc1c:	0800dc41 	.word	0x0800dc41
 800dc20:	0800dc41 	.word	0x0800dc41
 800dc24:	0800dcb9 	.word	0x0800dcb9
 800dc28:	0800dccd 	.word	0x0800dccd
 800dc2c:	0800dd1b 	.word	0x0800dd1b
 800dc30:	0800dc41 	.word	0x0800dc41
 800dc34:	0800dc41 	.word	0x0800dc41
 800dc38:	0800dcb9 	.word	0x0800dcb9
 800dc3c:	0800dccd 	.word	0x0800dccd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc46:	f043 0301 	orr.w	r3, r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	18d1      	adds	r1, r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc60:	f7ff ff5a 	bl	800db18 <prvInsertTimerInActiveList>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d06d      	beq.n	800dd46 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d062      	beq.n	800dd46 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	441a      	add	r2, r3
 800dc88:	2300      	movs	r3, #0
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	2100      	movs	r1, #0
 800dc90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc92:	f7ff fdff 	bl	800d894 <xTimerGenericCommand>
 800dc96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d153      	bne.n	800dd46 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	b672      	cpsid	i
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	b662      	cpsie	i
 800dcb2:	61bb      	str	r3, [r7, #24]
}
 800dcb4:	bf00      	nop
 800dcb6:	e7fe      	b.n	800dcb6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcbe:	f023 0301 	bic.w	r3, r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dcca:	e03c      	b.n	800dd46 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcd2:	f043 0301 	orr.w	r3, r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	699b      	ldr	r3, [r3, #24]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10c      	bne.n	800dd06 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf0:	b672      	cpsid	i
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	b662      	cpsie	i
 800dd00:	617b      	str	r3, [r7, #20]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd08:	699a      	ldr	r2, [r3, #24]
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	18d1      	adds	r1, r2, r3
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd14:	f7ff ff00 	bl	800db18 <prvInsertTimerInActiveList>
					break;
 800dd18:	e015      	b.n	800dd46 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd20:	f003 0302 	and.w	r3, r3, #2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d103      	bne.n	800dd30 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800dd28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd2a:	f000 fbed 	bl	800e508 <vPortFree>
 800dd2e:	e00a      	b.n	800dd46 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd36:	f023 0301 	bic.w	r3, r3, #1
 800dd3a:	b2da      	uxtb	r2, r3
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd42:	e000      	b.n	800dd46 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dd44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd46:	4b08      	ldr	r3, [pc, #32]	; (800dd68 <prvProcessReceivedCommands+0x1cc>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	1d39      	adds	r1, r7, #4
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd ff6a 	bl	800bc28 <xQueueReceive>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f47f af24 	bne.w	800dba4 <prvProcessReceivedCommands+0x8>
	}
}
 800dd5c:	bf00      	nop
 800dd5e:	bf00      	nop
 800dd60:	3730      	adds	r7, #48	; 0x30
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200014b4 	.word	0x200014b4

0800dd6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b088      	sub	sp, #32
 800dd70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd72:	e04a      	b.n	800de0a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd74:	4b2e      	ldr	r3, [pc, #184]	; (800de30 <prvSwitchTimerLists+0xc4>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd7e:	4b2c      	ldr	r3, [pc, #176]	; (800de30 <prvSwitchTimerLists+0xc4>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fd fa67 	bl	800b260 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6a1b      	ldr	r3, [r3, #32]
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d030      	beq.n	800de0a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	4413      	add	r3, r2
 800ddb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d90e      	bls.n	800ddd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddc6:	4b1a      	ldr	r3, [pc, #104]	; (800de30 <prvSwitchTimerLists+0xc4>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3304      	adds	r3, #4
 800ddce:	4619      	mov	r1, r3
 800ddd0:	4610      	mov	r0, r2
 800ddd2:	f7fd fa0c 	bl	800b1ee <vListInsert>
 800ddd6:	e018      	b.n	800de0a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddd8:	2300      	movs	r3, #0
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	2300      	movs	r3, #0
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	2100      	movs	r1, #0
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f7ff fd56 	bl	800d894 <xTimerGenericCommand>
 800dde8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10c      	bne.n	800de0a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	b672      	cpsid	i
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	b662      	cpsie	i
 800de04:	603b      	str	r3, [r7, #0]
}
 800de06:	bf00      	nop
 800de08:	e7fe      	b.n	800de08 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de0a:	4b09      	ldr	r3, [pc, #36]	; (800de30 <prvSwitchTimerLists+0xc4>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d1af      	bne.n	800dd74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de14:	4b06      	ldr	r3, [pc, #24]	; (800de30 <prvSwitchTimerLists+0xc4>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de1a:	4b06      	ldr	r3, [pc, #24]	; (800de34 <prvSwitchTimerLists+0xc8>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4a04      	ldr	r2, [pc, #16]	; (800de30 <prvSwitchTimerLists+0xc4>)
 800de20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de22:	4a04      	ldr	r2, [pc, #16]	; (800de34 <prvSwitchTimerLists+0xc8>)
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	6013      	str	r3, [r2, #0]
}
 800de28:	bf00      	nop
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	200014ac 	.word	0x200014ac
 800de34:	200014b0 	.word	0x200014b0

0800de38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de3e:	f000 f96d 	bl	800e11c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de42:	4b15      	ldr	r3, [pc, #84]	; (800de98 <prvCheckForValidListAndQueue+0x60>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d120      	bne.n	800de8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de4a:	4814      	ldr	r0, [pc, #80]	; (800de9c <prvCheckForValidListAndQueue+0x64>)
 800de4c:	f7fd f97e 	bl	800b14c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de50:	4813      	ldr	r0, [pc, #76]	; (800dea0 <prvCheckForValidListAndQueue+0x68>)
 800de52:	f7fd f97b 	bl	800b14c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de56:	4b13      	ldr	r3, [pc, #76]	; (800dea4 <prvCheckForValidListAndQueue+0x6c>)
 800de58:	4a10      	ldr	r2, [pc, #64]	; (800de9c <prvCheckForValidListAndQueue+0x64>)
 800de5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de5c:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <prvCheckForValidListAndQueue+0x70>)
 800de5e:	4a10      	ldr	r2, [pc, #64]	; (800dea0 <prvCheckForValidListAndQueue+0x68>)
 800de60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de62:	2300      	movs	r3, #0
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	4b11      	ldr	r3, [pc, #68]	; (800deac <prvCheckForValidListAndQueue+0x74>)
 800de68:	4a11      	ldr	r2, [pc, #68]	; (800deb0 <prvCheckForValidListAndQueue+0x78>)
 800de6a:	2110      	movs	r1, #16
 800de6c:	200a      	movs	r0, #10
 800de6e:	f7fd fa8b 	bl	800b388 <xQueueGenericCreateStatic>
 800de72:	4603      	mov	r3, r0
 800de74:	4a08      	ldr	r2, [pc, #32]	; (800de98 <prvCheckForValidListAndQueue+0x60>)
 800de76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de78:	4b07      	ldr	r3, [pc, #28]	; (800de98 <prvCheckForValidListAndQueue+0x60>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d005      	beq.n	800de8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de80:	4b05      	ldr	r3, [pc, #20]	; (800de98 <prvCheckForValidListAndQueue+0x60>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	490b      	ldr	r1, [pc, #44]	; (800deb4 <prvCheckForValidListAndQueue+0x7c>)
 800de86:	4618      	mov	r0, r3
 800de88:	f7fe fa9c 	bl	800c3c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de8c:	f000 f97a 	bl	800e184 <vPortExitCritical>
}
 800de90:	bf00      	nop
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	200014b4 	.word	0x200014b4
 800de9c:	20001484 	.word	0x20001484
 800dea0:	20001498 	.word	0x20001498
 800dea4:	200014ac 	.word	0x200014ac
 800dea8:	200014b0 	.word	0x200014b0
 800deac:	20001560 	.word	0x20001560
 800deb0:	200014c0 	.word	0x200014c0
 800deb4:	0800ef04 	.word	0x0800ef04

0800deb8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d10c      	bne.n	800dee4 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dece:	b672      	cpsid	i
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	b662      	cpsie	i
 800dede:	60fb      	str	r3, [r7, #12]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800dee4:	f000 f91a 	bl	800e11c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	69db      	ldr	r3, [r3, #28]
 800deec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800deee:	f000 f949 	bl	800e184 <vPortExitCritical>

	return pvReturn;
 800def2:	693b      	ldr	r3, [r7, #16]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3b04      	subs	r3, #4
 800df0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	3b04      	subs	r3, #4
 800df1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	f023 0201 	bic.w	r2, r3, #1
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	3b04      	subs	r3, #4
 800df2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df2c:	4a0c      	ldr	r2, [pc, #48]	; (800df60 <pxPortInitialiseStack+0x64>)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	3b14      	subs	r3, #20
 800df36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3b04      	subs	r3, #4
 800df42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f06f 0202 	mvn.w	r2, #2
 800df4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	3b20      	subs	r3, #32
 800df50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df52:	68fb      	ldr	r3, [r7, #12]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	0800df65 	.word	0x0800df65

0800df64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df64:	b480      	push	{r7}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df6e:	4b14      	ldr	r3, [pc, #80]	; (800dfc0 <prvTaskExitError+0x5c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df76:	d00c      	beq.n	800df92 <prvTaskExitError+0x2e>
	__asm volatile
 800df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7c:	b672      	cpsid	i
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	b662      	cpsie	i
 800df8c:	60fb      	str	r3, [r7, #12]
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <prvTaskExitError+0x2c>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df96:	b672      	cpsid	i
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	b662      	cpsie	i
 800dfa6:	60bb      	str	r3, [r7, #8]
}
 800dfa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfaa:	bf00      	nop
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0fc      	beq.n	800dfac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20000010 	.word	0x20000010
	...

0800dfd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfd0:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <pxCurrentTCBConst2>)
 800dfd2:	6819      	ldr	r1, [r3, #0]
 800dfd4:	6808      	ldr	r0, [r1, #0]
 800dfd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfda:	f380 8809 	msr	PSP, r0
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f04f 0000 	mov.w	r0, #0
 800dfe6:	f380 8811 	msr	BASEPRI, r0
 800dfea:	4770      	bx	lr
 800dfec:	f3af 8000 	nop.w

0800dff0 <pxCurrentTCBConst2>:
 800dff0:	20000f84 	.word	0x20000f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop

0800dff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dff8:	4808      	ldr	r0, [pc, #32]	; (800e01c <prvPortStartFirstTask+0x24>)
 800dffa:	6800      	ldr	r0, [r0, #0]
 800dffc:	6800      	ldr	r0, [r0, #0]
 800dffe:	f380 8808 	msr	MSP, r0
 800e002:	f04f 0000 	mov.w	r0, #0
 800e006:	f380 8814 	msr	CONTROL, r0
 800e00a:	b662      	cpsie	i
 800e00c:	b661      	cpsie	f
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	df00      	svc	0
 800e018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e01a:	bf00      	nop
 800e01c:	e000ed08 	.word	0xe000ed08

0800e020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e026:	4b37      	ldr	r3, [pc, #220]	; (800e104 <xPortStartScheduler+0xe4>)
 800e028:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	22ff      	movs	r2, #255	; 0xff
 800e036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	4b2f      	ldr	r3, [pc, #188]	; (800e108 <xPortStartScheduler+0xe8>)
 800e04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e04e:	4b2f      	ldr	r3, [pc, #188]	; (800e10c <xPortStartScheduler+0xec>)
 800e050:	2207      	movs	r2, #7
 800e052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e054:	e009      	b.n	800e06a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e056:	4b2d      	ldr	r3, [pc, #180]	; (800e10c <xPortStartScheduler+0xec>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	4a2b      	ldr	r2, [pc, #172]	; (800e10c <xPortStartScheduler+0xec>)
 800e05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	b2db      	uxtb	r3, r3
 800e068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e06a:	78fb      	ldrb	r3, [r7, #3]
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e072:	2b80      	cmp	r3, #128	; 0x80
 800e074:	d0ef      	beq.n	800e056 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e076:	4b25      	ldr	r3, [pc, #148]	; (800e10c <xPortStartScheduler+0xec>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f1c3 0307 	rsb	r3, r3, #7
 800e07e:	2b04      	cmp	r3, #4
 800e080:	d00c      	beq.n	800e09c <xPortStartScheduler+0x7c>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	b672      	cpsid	i
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	b662      	cpsie	i
 800e096:	60bb      	str	r3, [r7, #8]
}
 800e098:	bf00      	nop
 800e09a:	e7fe      	b.n	800e09a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e09c:	4b1b      	ldr	r3, [pc, #108]	; (800e10c <xPortStartScheduler+0xec>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	021b      	lsls	r3, r3, #8
 800e0a2:	4a1a      	ldr	r2, [pc, #104]	; (800e10c <xPortStartScheduler+0xec>)
 800e0a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0a6:	4b19      	ldr	r3, [pc, #100]	; (800e10c <xPortStartScheduler+0xec>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0ae:	4a17      	ldr	r2, [pc, #92]	; (800e10c <xPortStartScheduler+0xec>)
 800e0b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	b2da      	uxtb	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0ba:	4b15      	ldr	r3, [pc, #84]	; (800e110 <xPortStartScheduler+0xf0>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a14      	ldr	r2, [pc, #80]	; (800e110 <xPortStartScheduler+0xf0>)
 800e0c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0c6:	4b12      	ldr	r3, [pc, #72]	; (800e110 <xPortStartScheduler+0xf0>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a11      	ldr	r2, [pc, #68]	; (800e110 <xPortStartScheduler+0xf0>)
 800e0cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e0d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0d2:	f000 f8dd 	bl	800e290 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0d6:	4b0f      	ldr	r3, [pc, #60]	; (800e114 <xPortStartScheduler+0xf4>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0dc:	f000 f8fc 	bl	800e2d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0e0:	4b0d      	ldr	r3, [pc, #52]	; (800e118 <xPortStartScheduler+0xf8>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a0c      	ldr	r2, [pc, #48]	; (800e118 <xPortStartScheduler+0xf8>)
 800e0e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e0ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0ec:	f7ff ff84 	bl	800dff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0f0:	f7fe fe6a 	bl	800cdc8 <vTaskSwitchContext>
	prvTaskExitError();
 800e0f4:	f7ff ff36 	bl	800df64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	e000e400 	.word	0xe000e400
 800e108:	200015b0 	.word	0x200015b0
 800e10c:	200015b4 	.word	0x200015b4
 800e110:	e000ed20 	.word	0xe000ed20
 800e114:	20000010 	.word	0x20000010
 800e118:	e000ef34 	.word	0xe000ef34

0800e11c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	b672      	cpsid	i
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	b662      	cpsie	i
 800e136:	607b      	str	r3, [r7, #4]
}
 800e138:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e13a:	4b10      	ldr	r3, [pc, #64]	; (800e17c <vPortEnterCritical+0x60>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3301      	adds	r3, #1
 800e140:	4a0e      	ldr	r2, [pc, #56]	; (800e17c <vPortEnterCritical+0x60>)
 800e142:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e144:	4b0d      	ldr	r3, [pc, #52]	; (800e17c <vPortEnterCritical+0x60>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d111      	bne.n	800e170 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e14c:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <vPortEnterCritical+0x64>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00c      	beq.n	800e170 <vPortEnterCritical+0x54>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	b672      	cpsid	i
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	b662      	cpsie	i
 800e16a:	603b      	str	r3, [r7, #0]
}
 800e16c:	bf00      	nop
 800e16e:	e7fe      	b.n	800e16e <vPortEnterCritical+0x52>
	}
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	20000010 	.word	0x20000010
 800e180:	e000ed04 	.word	0xe000ed04

0800e184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e18a:	4b13      	ldr	r3, [pc, #76]	; (800e1d8 <vPortExitCritical+0x54>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10c      	bne.n	800e1ac <vPortExitCritical+0x28>
	__asm volatile
 800e192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e196:	b672      	cpsid	i
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	b662      	cpsie	i
 800e1a6:	607b      	str	r3, [r7, #4]
}
 800e1a8:	bf00      	nop
 800e1aa:	e7fe      	b.n	800e1aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e1ac:	4b0a      	ldr	r3, [pc, #40]	; (800e1d8 <vPortExitCritical+0x54>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	4a09      	ldr	r2, [pc, #36]	; (800e1d8 <vPortExitCritical+0x54>)
 800e1b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1b6:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <vPortExitCritical+0x54>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d105      	bne.n	800e1ca <vPortExitCritical+0x46>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	f383 8811 	msr	BASEPRI, r3
}
 800e1c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1ca:	bf00      	nop
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	20000010 	.word	0x20000010
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1e0:	f3ef 8009 	mrs	r0, PSP
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	4b15      	ldr	r3, [pc, #84]	; (800e240 <pxCurrentTCBConst>)
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	f01e 0f10 	tst.w	lr, #16
 800e1f0:	bf08      	it	eq
 800e1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fa:	6010      	str	r0, [r2, #0]
 800e1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e204:	b672      	cpsid	i
 800e206:	f380 8811 	msr	BASEPRI, r0
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	b662      	cpsie	i
 800e214:	f7fe fdd8 	bl	800cdc8 <vTaskSwitchContext>
 800e218:	f04f 0000 	mov.w	r0, #0
 800e21c:	f380 8811 	msr	BASEPRI, r0
 800e220:	bc09      	pop	{r0, r3}
 800e222:	6819      	ldr	r1, [r3, #0]
 800e224:	6808      	ldr	r0, [r1, #0]
 800e226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22a:	f01e 0f10 	tst.w	lr, #16
 800e22e:	bf08      	it	eq
 800e230:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e234:	f380 8809 	msr	PSP, r0
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop

0800e240 <pxCurrentTCBConst>:
 800e240:	20000f84 	.word	0x20000f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop

0800e248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
	__asm volatile
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	b672      	cpsid	i
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	b662      	cpsie	i
 800e262:	607b      	str	r3, [r7, #4]
}
 800e264:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e266:	f7fe fcf3 	bl	800cc50 <xTaskIncrementTick>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e270:	4b06      	ldr	r3, [pc, #24]	; (800e28c <SysTick_Handler+0x44>)
 800e272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	2300      	movs	r3, #0
 800e27a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	f383 8811 	msr	BASEPRI, r3
}
 800e282:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e284:	bf00      	nop
 800e286:	3708      	adds	r7, #8
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	e000ed04 	.word	0xe000ed04

0800e290 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e290:	b480      	push	{r7}
 800e292:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e294:	4b0b      	ldr	r3, [pc, #44]	; (800e2c4 <vPortSetupTimerInterrupt+0x34>)
 800e296:	2200      	movs	r2, #0
 800e298:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e29a:	4b0b      	ldr	r3, [pc, #44]	; (800e2c8 <vPortSetupTimerInterrupt+0x38>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2a0:	4b0a      	ldr	r3, [pc, #40]	; (800e2cc <vPortSetupTimerInterrupt+0x3c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a0a      	ldr	r2, [pc, #40]	; (800e2d0 <vPortSetupTimerInterrupt+0x40>)
 800e2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2aa:	099b      	lsrs	r3, r3, #6
 800e2ac:	4a09      	ldr	r2, [pc, #36]	; (800e2d4 <vPortSetupTimerInterrupt+0x44>)
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2b2:	4b04      	ldr	r3, [pc, #16]	; (800e2c4 <vPortSetupTimerInterrupt+0x34>)
 800e2b4:	2207      	movs	r2, #7
 800e2b6:	601a      	str	r2, [r3, #0]
}
 800e2b8:	bf00      	nop
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	e000e010 	.word	0xe000e010
 800e2c8:	e000e018 	.word	0xe000e018
 800e2cc:	20000004 	.word	0x20000004
 800e2d0:	10624dd3 	.word	0x10624dd3
 800e2d4:	e000e014 	.word	0xe000e014

0800e2d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2e8 <vPortEnableVFP+0x10>
 800e2dc:	6801      	ldr	r1, [r0, #0]
 800e2de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e2e2:	6001      	str	r1, [r0, #0]
 800e2e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2e6:	bf00      	nop
 800e2e8:	e000ed88 	.word	0xe000ed88

0800e2ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2f2:	f3ef 8305 	mrs	r3, IPSR
 800e2f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b0f      	cmp	r3, #15
 800e2fc:	d916      	bls.n	800e32c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2fe:	4a19      	ldr	r2, [pc, #100]	; (800e364 <vPortValidateInterruptPriority+0x78>)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	4413      	add	r3, r2
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e308:	4b17      	ldr	r3, [pc, #92]	; (800e368 <vPortValidateInterruptPriority+0x7c>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	7afa      	ldrb	r2, [r7, #11]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d20c      	bcs.n	800e32c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	607b      	str	r3, [r7, #4]
}
 800e328:	bf00      	nop
 800e32a:	e7fe      	b.n	800e32a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e32c:	4b0f      	ldr	r3, [pc, #60]	; (800e36c <vPortValidateInterruptPriority+0x80>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e334:	4b0e      	ldr	r3, [pc, #56]	; (800e370 <vPortValidateInterruptPriority+0x84>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d90c      	bls.n	800e356 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	b672      	cpsid	i
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	b662      	cpsie	i
 800e350:	603b      	str	r3, [r7, #0]
}
 800e352:	bf00      	nop
 800e354:	e7fe      	b.n	800e354 <vPortValidateInterruptPriority+0x68>
	}
 800e356:	bf00      	nop
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	e000e3f0 	.word	0xe000e3f0
 800e368:	200015b0 	.word	0x200015b0
 800e36c:	e000ed0c 	.word	0xe000ed0c
 800e370:	200015b4 	.word	0x200015b4

0800e374 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08a      	sub	sp, #40	; 0x28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e37c:	2300      	movs	r3, #0
 800e37e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e380:	f7fe fb96 	bl	800cab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e384:	4b5b      	ldr	r3, [pc, #364]	; (800e4f4 <pvPortMalloc+0x180>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e38c:	f000 f91a 	bl	800e5c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e390:	4b59      	ldr	r3, [pc, #356]	; (800e4f8 <pvPortMalloc+0x184>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4013      	ands	r3, r2
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f040 8092 	bne.w	800e4c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d01f      	beq.n	800e3e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e3a4:	2208      	movs	r2, #8
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f003 0307 	and.w	r3, r3, #7
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d016      	beq.n	800e3e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f023 0307 	bic.w	r3, r3, #7
 800e3bc:	3308      	adds	r3, #8
 800e3be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f003 0307 	and.w	r3, r3, #7
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00c      	beq.n	800e3e4 <pvPortMalloc+0x70>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	b672      	cpsid	i
 800e3d0:	f383 8811 	msr	BASEPRI, r3
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	b662      	cpsie	i
 800e3de:	617b      	str	r3, [r7, #20]
}
 800e3e0:	bf00      	nop
 800e3e2:	e7fe      	b.n	800e3e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d06b      	beq.n	800e4c2 <pvPortMalloc+0x14e>
 800e3ea:	4b44      	ldr	r3, [pc, #272]	; (800e4fc <pvPortMalloc+0x188>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d866      	bhi.n	800e4c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3f4:	4b42      	ldr	r3, [pc, #264]	; (800e500 <pvPortMalloc+0x18c>)
 800e3f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3f8:	4b41      	ldr	r3, [pc, #260]	; (800e500 <pvPortMalloc+0x18c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3fe:	e004      	b.n	800e40a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	429a      	cmp	r2, r3
 800e412:	d903      	bls.n	800e41c <pvPortMalloc+0xa8>
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1f1      	bne.n	800e400 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e41c:	4b35      	ldr	r3, [pc, #212]	; (800e4f4 <pvPortMalloc+0x180>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e422:	429a      	cmp	r2, r3
 800e424:	d04d      	beq.n	800e4c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e426:	6a3b      	ldr	r3, [r7, #32]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2208      	movs	r2, #8
 800e42c:	4413      	add	r3, r2
 800e42e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	1ad2      	subs	r2, r2, r3
 800e440:	2308      	movs	r3, #8
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	429a      	cmp	r2, r3
 800e446:	d921      	bls.n	800e48c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4413      	add	r3, r2
 800e44e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	f003 0307 	and.w	r3, r3, #7
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00c      	beq.n	800e474 <pvPortMalloc+0x100>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45e:	b672      	cpsid	i
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	b662      	cpsie	i
 800e46e:	613b      	str	r3, [r7, #16]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	1ad2      	subs	r2, r2, r3
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e486:	69b8      	ldr	r0, [r7, #24]
 800e488:	f000 f8fe 	bl	800e688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e48c:	4b1b      	ldr	r3, [pc, #108]	; (800e4fc <pvPortMalloc+0x188>)
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	1ad3      	subs	r3, r2, r3
 800e496:	4a19      	ldr	r2, [pc, #100]	; (800e4fc <pvPortMalloc+0x188>)
 800e498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e49a:	4b18      	ldr	r3, [pc, #96]	; (800e4fc <pvPortMalloc+0x188>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4b19      	ldr	r3, [pc, #100]	; (800e504 <pvPortMalloc+0x190>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d203      	bcs.n	800e4ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4a6:	4b15      	ldr	r3, [pc, #84]	; (800e4fc <pvPortMalloc+0x188>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a16      	ldr	r2, [pc, #88]	; (800e504 <pvPortMalloc+0x190>)
 800e4ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	4b11      	ldr	r3, [pc, #68]	; (800e4f8 <pvPortMalloc+0x184>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	431a      	orrs	r2, r3
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	2200      	movs	r2, #0
 800e4c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4c2:	f7fe fb03 	bl	800cacc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	f003 0307 	and.w	r3, r3, #7
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00c      	beq.n	800e4ea <pvPortMalloc+0x176>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	b672      	cpsid	i
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	b662      	cpsie	i
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <pvPortMalloc+0x174>
	return pvReturn;
 800e4ea:	69fb      	ldr	r3, [r7, #28]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3728      	adds	r7, #40	; 0x28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20009e78 	.word	0x20009e78
 800e4f8:	20009e84 	.word	0x20009e84
 800e4fc:	20009e7c 	.word	0x20009e7c
 800e500:	20009e70 	.word	0x20009e70
 800e504:	20009e80 	.word	0x20009e80

0800e508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d04c      	beq.n	800e5b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e51a:	2308      	movs	r3, #8
 800e51c:	425b      	negs	r3, r3
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	4413      	add	r3, r2
 800e522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	4b23      	ldr	r3, [pc, #140]	; (800e5bc <vPortFree+0xb4>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4013      	ands	r3, r2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10c      	bne.n	800e550 <vPortFree+0x48>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	b672      	cpsid	i
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	b662      	cpsie	i
 800e54a:	60fb      	str	r3, [r7, #12]
}
 800e54c:	bf00      	nop
 800e54e:	e7fe      	b.n	800e54e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00c      	beq.n	800e572 <vPortFree+0x6a>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	b672      	cpsid	i
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	b662      	cpsie	i
 800e56c:	60bb      	str	r3, [r7, #8]
}
 800e56e:	bf00      	nop
 800e570:	e7fe      	b.n	800e570 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	685a      	ldr	r2, [r3, #4]
 800e576:	4b11      	ldr	r3, [pc, #68]	; (800e5bc <vPortFree+0xb4>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4013      	ands	r3, r2
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d019      	beq.n	800e5b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d115      	bne.n	800e5b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <vPortFree+0xb4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	43db      	mvns	r3, r3
 800e592:	401a      	ands	r2, r3
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e598:	f7fe fa8a 	bl	800cab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	4b07      	ldr	r3, [pc, #28]	; (800e5c0 <vPortFree+0xb8>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	4a06      	ldr	r2, [pc, #24]	; (800e5c0 <vPortFree+0xb8>)
 800e5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5aa:	6938      	ldr	r0, [r7, #16]
 800e5ac:	f000 f86c 	bl	800e688 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e5b0:	f7fe fa8c 	bl	800cacc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5b4:	bf00      	nop
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	20009e84 	.word	0x20009e84
 800e5c0:	20009e7c 	.word	0x20009e7c

0800e5c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5ca:	f648 03b8 	movw	r3, #35000	; 0x88b8
 800e5ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5d0:	4b27      	ldr	r3, [pc, #156]	; (800e670 <prvHeapInit+0xac>)
 800e5d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f003 0307 	and.w	r3, r3, #7
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00c      	beq.n	800e5f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	3307      	adds	r3, #7
 800e5e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f023 0307 	bic.w	r3, r3, #7
 800e5ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	4a1f      	ldr	r2, [pc, #124]	; (800e670 <prvHeapInit+0xac>)
 800e5f4:	4413      	add	r3, r2
 800e5f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5fc:	4a1d      	ldr	r2, [pc, #116]	; (800e674 <prvHeapInit+0xb0>)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e602:	4b1c      	ldr	r3, [pc, #112]	; (800e674 <prvHeapInit+0xb0>)
 800e604:	2200      	movs	r2, #0
 800e606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	4413      	add	r3, r2
 800e60e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e610:	2208      	movs	r2, #8
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	1a9b      	subs	r3, r3, r2
 800e616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f023 0307 	bic.w	r3, r3, #7
 800e61e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4a15      	ldr	r2, [pc, #84]	; (800e678 <prvHeapInit+0xb4>)
 800e624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e626:	4b14      	ldr	r3, [pc, #80]	; (800e678 <prvHeapInit+0xb4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2200      	movs	r2, #0
 800e62c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e62e:	4b12      	ldr	r3, [pc, #72]	; (800e678 <prvHeapInit+0xb4>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e644:	4b0c      	ldr	r3, [pc, #48]	; (800e678 <prvHeapInit+0xb4>)
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	4a0a      	ldr	r2, [pc, #40]	; (800e67c <prvHeapInit+0xb8>)
 800e652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	4a09      	ldr	r2, [pc, #36]	; (800e680 <prvHeapInit+0xbc>)
 800e65a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e65c:	4b09      	ldr	r3, [pc, #36]	; (800e684 <prvHeapInit+0xc0>)
 800e65e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e662:	601a      	str	r2, [r3, #0]
}
 800e664:	bf00      	nop
 800e666:	3714      	adds	r7, #20
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr
 800e670:	200015b8 	.word	0x200015b8
 800e674:	20009e70 	.word	0x20009e70
 800e678:	20009e78 	.word	0x20009e78
 800e67c:	20009e80 	.word	0x20009e80
 800e680:	20009e7c 	.word	0x20009e7c
 800e684:	20009e84 	.word	0x20009e84

0800e688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e690:	4b28      	ldr	r3, [pc, #160]	; (800e734 <prvInsertBlockIntoFreeList+0xac>)
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	e002      	b.n	800e69c <prvInsertBlockIntoFreeList+0x14>
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d8f7      	bhi.n	800e696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d108      	bne.n	800e6ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	685a      	ldr	r2, [r3, #4]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	441a      	add	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d118      	bne.n	800e710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	4b15      	ldr	r3, [pc, #84]	; (800e738 <prvInsertBlockIntoFreeList+0xb0>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d00d      	beq.n	800e706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	685a      	ldr	r2, [r3, #4]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	441a      	add	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e008      	b.n	800e718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e706:	4b0c      	ldr	r3, [pc, #48]	; (800e738 <prvInsertBlockIntoFreeList+0xb0>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	e003      	b.n	800e718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d002      	beq.n	800e726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e726:	bf00      	nop
 800e728:	3714      	adds	r7, #20
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	20009e70 	.word	0x20009e70
 800e738:	20009e78 	.word	0x20009e78

0800e73c <atoi>:
 800e73c:	220a      	movs	r2, #10
 800e73e:	2100      	movs	r1, #0
 800e740:	f000 b92e 	b.w	800e9a0 <strtol>

0800e744 <__errno>:
 800e744:	4b01      	ldr	r3, [pc, #4]	; (800e74c <__errno+0x8>)
 800e746:	6818      	ldr	r0, [r3, #0]
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20000014 	.word	0x20000014

0800e750 <__libc_init_array>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	4d0d      	ldr	r5, [pc, #52]	; (800e788 <__libc_init_array+0x38>)
 800e754:	4c0d      	ldr	r4, [pc, #52]	; (800e78c <__libc_init_array+0x3c>)
 800e756:	1b64      	subs	r4, r4, r5
 800e758:	10a4      	asrs	r4, r4, #2
 800e75a:	2600      	movs	r6, #0
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	d109      	bne.n	800e774 <__libc_init_array+0x24>
 800e760:	4d0b      	ldr	r5, [pc, #44]	; (800e790 <__libc_init_array+0x40>)
 800e762:	4c0c      	ldr	r4, [pc, #48]	; (800e794 <__libc_init_array+0x44>)
 800e764:	f000 f97e 	bl	800ea64 <_init>
 800e768:	1b64      	subs	r4, r4, r5
 800e76a:	10a4      	asrs	r4, r4, #2
 800e76c:	2600      	movs	r6, #0
 800e76e:	42a6      	cmp	r6, r4
 800e770:	d105      	bne.n	800e77e <__libc_init_array+0x2e>
 800e772:	bd70      	pop	{r4, r5, r6, pc}
 800e774:	f855 3b04 	ldr.w	r3, [r5], #4
 800e778:	4798      	blx	r3
 800e77a:	3601      	adds	r6, #1
 800e77c:	e7ee      	b.n	800e75c <__libc_init_array+0xc>
 800e77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e782:	4798      	blx	r3
 800e784:	3601      	adds	r6, #1
 800e786:	e7f2      	b.n	800e76e <__libc_init_array+0x1e>
 800e788:	0800f5bc 	.word	0x0800f5bc
 800e78c:	0800f5bc 	.word	0x0800f5bc
 800e790:	0800f5bc 	.word	0x0800f5bc
 800e794:	0800f5c0 	.word	0x0800f5c0

0800e798 <__retarget_lock_acquire_recursive>:
 800e798:	4770      	bx	lr

0800e79a <__retarget_lock_release_recursive>:
 800e79a:	4770      	bx	lr

0800e79c <memcpy>:
 800e79c:	440a      	add	r2, r1
 800e79e:	4291      	cmp	r1, r2
 800e7a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7a4:	d100      	bne.n	800e7a8 <memcpy+0xc>
 800e7a6:	4770      	bx	lr
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7b2:	4291      	cmp	r1, r2
 800e7b4:	d1f9      	bne.n	800e7aa <memcpy+0xe>
 800e7b6:	bd10      	pop	{r4, pc}

0800e7b8 <memset>:
 800e7b8:	4402      	add	r2, r0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d100      	bne.n	800e7c2 <memset+0xa>
 800e7c0:	4770      	bx	lr
 800e7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c6:	e7f9      	b.n	800e7bc <memset+0x4>

0800e7c8 <cleanup_glue>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	6809      	ldr	r1, [r1, #0]
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	b109      	cbz	r1, 800e7d6 <cleanup_glue+0xe>
 800e7d2:	f7ff fff9 	bl	800e7c8 <cleanup_glue>
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4628      	mov	r0, r5
 800e7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7de:	f000 b8f5 	b.w	800e9cc <_free_r>
	...

0800e7e4 <_reclaim_reent>:
 800e7e4:	4b2c      	ldr	r3, [pc, #176]	; (800e898 <_reclaim_reent+0xb4>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4283      	cmp	r3, r0
 800e7ea:	b570      	push	{r4, r5, r6, lr}
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	d051      	beq.n	800e894 <_reclaim_reent+0xb0>
 800e7f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e7f2:	b143      	cbz	r3, 800e806 <_reclaim_reent+0x22>
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d14a      	bne.n	800e890 <_reclaim_reent+0xac>
 800e7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7fc:	6819      	ldr	r1, [r3, #0]
 800e7fe:	b111      	cbz	r1, 800e806 <_reclaim_reent+0x22>
 800e800:	4620      	mov	r0, r4
 800e802:	f000 f8e3 	bl	800e9cc <_free_r>
 800e806:	6961      	ldr	r1, [r4, #20]
 800e808:	b111      	cbz	r1, 800e810 <_reclaim_reent+0x2c>
 800e80a:	4620      	mov	r0, r4
 800e80c:	f000 f8de 	bl	800e9cc <_free_r>
 800e810:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e812:	b111      	cbz	r1, 800e81a <_reclaim_reent+0x36>
 800e814:	4620      	mov	r0, r4
 800e816:	f000 f8d9 	bl	800e9cc <_free_r>
 800e81a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e81c:	b111      	cbz	r1, 800e824 <_reclaim_reent+0x40>
 800e81e:	4620      	mov	r0, r4
 800e820:	f000 f8d4 	bl	800e9cc <_free_r>
 800e824:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e826:	b111      	cbz	r1, 800e82e <_reclaim_reent+0x4a>
 800e828:	4620      	mov	r0, r4
 800e82a:	f000 f8cf 	bl	800e9cc <_free_r>
 800e82e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e830:	b111      	cbz	r1, 800e838 <_reclaim_reent+0x54>
 800e832:	4620      	mov	r0, r4
 800e834:	f000 f8ca 	bl	800e9cc <_free_r>
 800e838:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e83a:	b111      	cbz	r1, 800e842 <_reclaim_reent+0x5e>
 800e83c:	4620      	mov	r0, r4
 800e83e:	f000 f8c5 	bl	800e9cc <_free_r>
 800e842:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e844:	b111      	cbz	r1, 800e84c <_reclaim_reent+0x68>
 800e846:	4620      	mov	r0, r4
 800e848:	f000 f8c0 	bl	800e9cc <_free_r>
 800e84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e84e:	b111      	cbz	r1, 800e856 <_reclaim_reent+0x72>
 800e850:	4620      	mov	r0, r4
 800e852:	f000 f8bb 	bl	800e9cc <_free_r>
 800e856:	69a3      	ldr	r3, [r4, #24]
 800e858:	b1e3      	cbz	r3, 800e894 <_reclaim_reent+0xb0>
 800e85a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e85c:	4620      	mov	r0, r4
 800e85e:	4798      	blx	r3
 800e860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e862:	b1b9      	cbz	r1, 800e894 <_reclaim_reent+0xb0>
 800e864:	4620      	mov	r0, r4
 800e866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e86a:	f7ff bfad 	b.w	800e7c8 <cleanup_glue>
 800e86e:	5949      	ldr	r1, [r1, r5]
 800e870:	b941      	cbnz	r1, 800e884 <_reclaim_reent+0xa0>
 800e872:	3504      	adds	r5, #4
 800e874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e876:	2d80      	cmp	r5, #128	; 0x80
 800e878:	68d9      	ldr	r1, [r3, #12]
 800e87a:	d1f8      	bne.n	800e86e <_reclaim_reent+0x8a>
 800e87c:	4620      	mov	r0, r4
 800e87e:	f000 f8a5 	bl	800e9cc <_free_r>
 800e882:	e7ba      	b.n	800e7fa <_reclaim_reent+0x16>
 800e884:	680e      	ldr	r6, [r1, #0]
 800e886:	4620      	mov	r0, r4
 800e888:	f000 f8a0 	bl	800e9cc <_free_r>
 800e88c:	4631      	mov	r1, r6
 800e88e:	e7ef      	b.n	800e870 <_reclaim_reent+0x8c>
 800e890:	2500      	movs	r5, #0
 800e892:	e7ef      	b.n	800e874 <_reclaim_reent+0x90>
 800e894:	bd70      	pop	{r4, r5, r6, pc}
 800e896:	bf00      	nop
 800e898:	20000014 	.word	0x20000014

0800e89c <_strtol_l.constprop.0>:
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a2:	d001      	beq.n	800e8a8 <_strtol_l.constprop.0+0xc>
 800e8a4:	2b24      	cmp	r3, #36	; 0x24
 800e8a6:	d906      	bls.n	800e8b6 <_strtol_l.constprop.0+0x1a>
 800e8a8:	f7ff ff4c 	bl	800e744 <__errno>
 800e8ac:	2316      	movs	r3, #22
 800e8ae:	6003      	str	r3, [r0, #0]
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e99c <_strtol_l.constprop.0+0x100>
 800e8ba:	460d      	mov	r5, r1
 800e8bc:	462e      	mov	r6, r5
 800e8be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e8c6:	f017 0708 	ands.w	r7, r7, #8
 800e8ca:	d1f7      	bne.n	800e8bc <_strtol_l.constprop.0+0x20>
 800e8cc:	2c2d      	cmp	r4, #45	; 0x2d
 800e8ce:	d132      	bne.n	800e936 <_strtol_l.constprop.0+0x9a>
 800e8d0:	782c      	ldrb	r4, [r5, #0]
 800e8d2:	2701      	movs	r7, #1
 800e8d4:	1cb5      	adds	r5, r6, #2
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d05b      	beq.n	800e992 <_strtol_l.constprop.0+0xf6>
 800e8da:	2b10      	cmp	r3, #16
 800e8dc:	d109      	bne.n	800e8f2 <_strtol_l.constprop.0+0x56>
 800e8de:	2c30      	cmp	r4, #48	; 0x30
 800e8e0:	d107      	bne.n	800e8f2 <_strtol_l.constprop.0+0x56>
 800e8e2:	782c      	ldrb	r4, [r5, #0]
 800e8e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e8e8:	2c58      	cmp	r4, #88	; 0x58
 800e8ea:	d14d      	bne.n	800e988 <_strtol_l.constprop.0+0xec>
 800e8ec:	786c      	ldrb	r4, [r5, #1]
 800e8ee:	2310      	movs	r3, #16
 800e8f0:	3502      	adds	r5, #2
 800e8f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e8f6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8fa:	f04f 0c00 	mov.w	ip, #0
 800e8fe:	fbb8 f9f3 	udiv	r9, r8, r3
 800e902:	4666      	mov	r6, ip
 800e904:	fb03 8a19 	mls	sl, r3, r9, r8
 800e908:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e90c:	f1be 0f09 	cmp.w	lr, #9
 800e910:	d816      	bhi.n	800e940 <_strtol_l.constprop.0+0xa4>
 800e912:	4674      	mov	r4, lr
 800e914:	42a3      	cmp	r3, r4
 800e916:	dd24      	ble.n	800e962 <_strtol_l.constprop.0+0xc6>
 800e918:	f1bc 0f00 	cmp.w	ip, #0
 800e91c:	db1e      	blt.n	800e95c <_strtol_l.constprop.0+0xc0>
 800e91e:	45b1      	cmp	r9, r6
 800e920:	d31c      	bcc.n	800e95c <_strtol_l.constprop.0+0xc0>
 800e922:	d101      	bne.n	800e928 <_strtol_l.constprop.0+0x8c>
 800e924:	45a2      	cmp	sl, r4
 800e926:	db19      	blt.n	800e95c <_strtol_l.constprop.0+0xc0>
 800e928:	fb06 4603 	mla	r6, r6, r3, r4
 800e92c:	f04f 0c01 	mov.w	ip, #1
 800e930:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e934:	e7e8      	b.n	800e908 <_strtol_l.constprop.0+0x6c>
 800e936:	2c2b      	cmp	r4, #43	; 0x2b
 800e938:	bf04      	itt	eq
 800e93a:	782c      	ldrbeq	r4, [r5, #0]
 800e93c:	1cb5      	addeq	r5, r6, #2
 800e93e:	e7ca      	b.n	800e8d6 <_strtol_l.constprop.0+0x3a>
 800e940:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e944:	f1be 0f19 	cmp.w	lr, #25
 800e948:	d801      	bhi.n	800e94e <_strtol_l.constprop.0+0xb2>
 800e94a:	3c37      	subs	r4, #55	; 0x37
 800e94c:	e7e2      	b.n	800e914 <_strtol_l.constprop.0+0x78>
 800e94e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e952:	f1be 0f19 	cmp.w	lr, #25
 800e956:	d804      	bhi.n	800e962 <_strtol_l.constprop.0+0xc6>
 800e958:	3c57      	subs	r4, #87	; 0x57
 800e95a:	e7db      	b.n	800e914 <_strtol_l.constprop.0+0x78>
 800e95c:	f04f 3cff 	mov.w	ip, #4294967295
 800e960:	e7e6      	b.n	800e930 <_strtol_l.constprop.0+0x94>
 800e962:	f1bc 0f00 	cmp.w	ip, #0
 800e966:	da05      	bge.n	800e974 <_strtol_l.constprop.0+0xd8>
 800e968:	2322      	movs	r3, #34	; 0x22
 800e96a:	6003      	str	r3, [r0, #0]
 800e96c:	4646      	mov	r6, r8
 800e96e:	b942      	cbnz	r2, 800e982 <_strtol_l.constprop.0+0xe6>
 800e970:	4630      	mov	r0, r6
 800e972:	e79e      	b.n	800e8b2 <_strtol_l.constprop.0+0x16>
 800e974:	b107      	cbz	r7, 800e978 <_strtol_l.constprop.0+0xdc>
 800e976:	4276      	negs	r6, r6
 800e978:	2a00      	cmp	r2, #0
 800e97a:	d0f9      	beq.n	800e970 <_strtol_l.constprop.0+0xd4>
 800e97c:	f1bc 0f00 	cmp.w	ip, #0
 800e980:	d000      	beq.n	800e984 <_strtol_l.constprop.0+0xe8>
 800e982:	1e69      	subs	r1, r5, #1
 800e984:	6011      	str	r1, [r2, #0]
 800e986:	e7f3      	b.n	800e970 <_strtol_l.constprop.0+0xd4>
 800e988:	2430      	movs	r4, #48	; 0x30
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1b1      	bne.n	800e8f2 <_strtol_l.constprop.0+0x56>
 800e98e:	2308      	movs	r3, #8
 800e990:	e7af      	b.n	800e8f2 <_strtol_l.constprop.0+0x56>
 800e992:	2c30      	cmp	r4, #48	; 0x30
 800e994:	d0a5      	beq.n	800e8e2 <_strtol_l.constprop.0+0x46>
 800e996:	230a      	movs	r3, #10
 800e998:	e7ab      	b.n	800e8f2 <_strtol_l.constprop.0+0x56>
 800e99a:	bf00      	nop
 800e99c:	0800f4b1 	.word	0x0800f4b1

0800e9a0 <strtol>:
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	460a      	mov	r2, r1
 800e9a4:	4601      	mov	r1, r0
 800e9a6:	4802      	ldr	r0, [pc, #8]	; (800e9b0 <strtol+0x10>)
 800e9a8:	6800      	ldr	r0, [r0, #0]
 800e9aa:	f7ff bf77 	b.w	800e89c <_strtol_l.constprop.0>
 800e9ae:	bf00      	nop
 800e9b0:	20000014 	.word	0x20000014

0800e9b4 <__malloc_lock>:
 800e9b4:	4801      	ldr	r0, [pc, #4]	; (800e9bc <__malloc_lock+0x8>)
 800e9b6:	f7ff beef 	b.w	800e798 <__retarget_lock_acquire_recursive>
 800e9ba:	bf00      	nop
 800e9bc:	20009e88 	.word	0x20009e88

0800e9c0 <__malloc_unlock>:
 800e9c0:	4801      	ldr	r0, [pc, #4]	; (800e9c8 <__malloc_unlock+0x8>)
 800e9c2:	f7ff beea 	b.w	800e79a <__retarget_lock_release_recursive>
 800e9c6:	bf00      	nop
 800e9c8:	20009e88 	.word	0x20009e88

0800e9cc <_free_r>:
 800e9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9ce:	2900      	cmp	r1, #0
 800e9d0:	d044      	beq.n	800ea5c <_free_r+0x90>
 800e9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9d6:	9001      	str	r0, [sp, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f1a1 0404 	sub.w	r4, r1, #4
 800e9de:	bfb8      	it	lt
 800e9e0:	18e4      	addlt	r4, r4, r3
 800e9e2:	f7ff ffe7 	bl	800e9b4 <__malloc_lock>
 800e9e6:	4a1e      	ldr	r2, [pc, #120]	; (800ea60 <_free_r+0x94>)
 800e9e8:	9801      	ldr	r0, [sp, #4]
 800e9ea:	6813      	ldr	r3, [r2, #0]
 800e9ec:	b933      	cbnz	r3, 800e9fc <_free_r+0x30>
 800e9ee:	6063      	str	r3, [r4, #4]
 800e9f0:	6014      	str	r4, [r2, #0]
 800e9f2:	b003      	add	sp, #12
 800e9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9f8:	f7ff bfe2 	b.w	800e9c0 <__malloc_unlock>
 800e9fc:	42a3      	cmp	r3, r4
 800e9fe:	d908      	bls.n	800ea12 <_free_r+0x46>
 800ea00:	6825      	ldr	r5, [r4, #0]
 800ea02:	1961      	adds	r1, r4, r5
 800ea04:	428b      	cmp	r3, r1
 800ea06:	bf01      	itttt	eq
 800ea08:	6819      	ldreq	r1, [r3, #0]
 800ea0a:	685b      	ldreq	r3, [r3, #4]
 800ea0c:	1949      	addeq	r1, r1, r5
 800ea0e:	6021      	streq	r1, [r4, #0]
 800ea10:	e7ed      	b.n	800e9ee <_free_r+0x22>
 800ea12:	461a      	mov	r2, r3
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	b10b      	cbz	r3, 800ea1c <_free_r+0x50>
 800ea18:	42a3      	cmp	r3, r4
 800ea1a:	d9fa      	bls.n	800ea12 <_free_r+0x46>
 800ea1c:	6811      	ldr	r1, [r2, #0]
 800ea1e:	1855      	adds	r5, r2, r1
 800ea20:	42a5      	cmp	r5, r4
 800ea22:	d10b      	bne.n	800ea3c <_free_r+0x70>
 800ea24:	6824      	ldr	r4, [r4, #0]
 800ea26:	4421      	add	r1, r4
 800ea28:	1854      	adds	r4, r2, r1
 800ea2a:	42a3      	cmp	r3, r4
 800ea2c:	6011      	str	r1, [r2, #0]
 800ea2e:	d1e0      	bne.n	800e9f2 <_free_r+0x26>
 800ea30:	681c      	ldr	r4, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	6053      	str	r3, [r2, #4]
 800ea36:	4421      	add	r1, r4
 800ea38:	6011      	str	r1, [r2, #0]
 800ea3a:	e7da      	b.n	800e9f2 <_free_r+0x26>
 800ea3c:	d902      	bls.n	800ea44 <_free_r+0x78>
 800ea3e:	230c      	movs	r3, #12
 800ea40:	6003      	str	r3, [r0, #0]
 800ea42:	e7d6      	b.n	800e9f2 <_free_r+0x26>
 800ea44:	6825      	ldr	r5, [r4, #0]
 800ea46:	1961      	adds	r1, r4, r5
 800ea48:	428b      	cmp	r3, r1
 800ea4a:	bf04      	itt	eq
 800ea4c:	6819      	ldreq	r1, [r3, #0]
 800ea4e:	685b      	ldreq	r3, [r3, #4]
 800ea50:	6063      	str	r3, [r4, #4]
 800ea52:	bf04      	itt	eq
 800ea54:	1949      	addeq	r1, r1, r5
 800ea56:	6021      	streq	r1, [r4, #0]
 800ea58:	6054      	str	r4, [r2, #4]
 800ea5a:	e7ca      	b.n	800e9f2 <_free_r+0x26>
 800ea5c:	b003      	add	sp, #12
 800ea5e:	bd30      	pop	{r4, r5, pc}
 800ea60:	20009e8c 	.word	0x20009e8c

0800ea64 <_init>:
 800ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea66:	bf00      	nop
 800ea68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea6a:	bc08      	pop	{r3}
 800ea6c:	469e      	mov	lr, r3
 800ea6e:	4770      	bx	lr

0800ea70 <_fini>:
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	bf00      	nop
 800ea74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea76:	bc08      	pop	{r3}
 800ea78:	469e      	mov	lr, r3
 800ea7a:	4770      	bx	lr
