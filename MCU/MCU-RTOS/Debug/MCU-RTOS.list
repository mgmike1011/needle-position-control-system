
MCU-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  0800e6c0  0800e6c0  0001e6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f114  0800f114  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f114  0800f114  0001f114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f11c  0800f11c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f11c  0800f11c  0001f11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f120  0800f120  0001f120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009268  20000078  0800f19c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200092e0  0800f19c  000292e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002774e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f6a  00000000  00000000  000477f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  0004c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ab8  00000000  00000000  0004e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a738  00000000  00000000  0004fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024184  00000000  00000000  0007a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe55b  00000000  00000000  0009e78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019cce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d64  00000000  00000000  0019cd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e6a4 	.word	0x0800e6a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800e6a4 	.word	0x0800e6a4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b974 	b.w	8000e4c <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468e      	mov	lr, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14d      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	d969      	bls.n	8000c64 <__udivmoddi4+0xe8>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b152      	cbz	r2, 8000bac <__udivmoddi4+0x30>
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	f1c2 0120 	rsb	r1, r2, #32
 8000b9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba6:	ea41 0e03 	orr.w	lr, r1, r3
 8000baa:	4094      	lsls	r4, r2
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	0c21      	lsrs	r1, r4, #16
 8000bb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb6:	fa1f f78c 	uxth.w	r7, ip
 8000bba:	fb08 e316 	mls	r3, r8, r6, lr
 8000bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc2:	fb06 f107 	mul.w	r1, r6, r7
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 811f 	bcs.w	8000e14 <__udivmoddi4+0x298>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 811c 	bls.w	8000e14 <__udivmoddi4+0x298>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 f707 	mul.w	r7, r0, r7
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x92>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	f080 810a 	bcs.w	8000e18 <__udivmoddi4+0x29c>
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	f240 8107 	bls.w	8000e18 <__udivmoddi4+0x29c>
 8000c0a:	4464      	add	r4, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	1be4      	subs	r4, r4, r7
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa4>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xc2>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80ef 	beq.w	8000e0e <__udivmoddi4+0x292>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x160>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd4>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80f9 	bhi.w	8000e42 <__udivmoddi4+0x2c6>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	469e      	mov	lr, r3
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa4>
 8000c5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xec>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 8092 	bne.w	8000d96 <__udivmoddi4+0x21a>
 8000c72:	eba1 010c 	sub.w	r1, r1, ip
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2601      	movs	r6, #1
 8000c80:	0c20      	lsrs	r0, r4, #16
 8000c82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c86:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8e:	fb0e f003 	mul.w	r0, lr, r3
 8000c92:	4288      	cmp	r0, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x12c>
 8000c96:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x12a>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2c0>
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x156>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x154>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2ca>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x9a>
 8000cdc:	f1c6 0720 	rsb	r7, r6, #32
 8000ce0:	40b3      	lsls	r3, r6
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa20 f407 	lsr.w	r4, r0, r7
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	40f9      	lsrs	r1, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fb09 1118 	mls	r1, r9, r8, r1
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	4288      	cmp	r0, r1
 8000d16:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b8>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2bc>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2bc>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	458e      	cmp	lr, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1e2>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2b4>
 8000d56:	458e      	cmp	lr, r1
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2b4>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d62:	fba0 9402 	umull	r9, r4, r0, r2
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	42a1      	cmp	r1, r4
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46a6      	mov	lr, r4
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x2a4>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x2a0>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x212>
 8000d76:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d82:	fa22 f306 	lsr.w	r3, r2, r6
 8000d86:	40f1      	lsrs	r1, r6
 8000d88:	431f      	orrs	r7, r3
 8000d8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	f1c2 0320 	rsb	r3, r2, #32
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
 8000da4:	4091      	lsls	r1, r2
 8000da6:	4301      	orrs	r1, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db4:	fb07 3610 	mls	r6, r7, r0, r3
 8000db8:	0c0b      	lsrs	r3, r1, #16
 8000dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x260>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	b289      	uxth	r1, r1
 8000de0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de4:	fb07 3316 	mls	r3, r7, r6, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb06 f30e 	mul.w	r3, r6, lr
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x28a>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000e02:	3e02      	subs	r6, #2
 8000e04:	4461      	add	r1, ip
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0x104>
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e705      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e3      	b.n	8000be0 <__udivmoddi4+0x64>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6f8      	b.n	8000c0e <__udivmoddi4+0x92>
 8000e1c:	454b      	cmp	r3, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f8>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f8>
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x28a>
 8000e30:	4620      	mov	r0, r4
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1e2>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b8>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x12c>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e709      	b.n	8000c5a <__udivmoddi4+0xde>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x156>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	f200 809a 	bhi.w	8000f98 <Set_Resolution_A4988+0x148>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <Set_Resolution_A4988+0x1c>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e81 	.word	0x08000e81
 8000e70:	08000eb9 	.word	0x08000eb9
 8000e74:	08000ef1 	.word	0x08000ef1
 8000e78:	08000f29 	.word	0x08000f29
 8000e7c:	08000f61 	.word	0x08000f61
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69d8      	ldr	r0, [r3, #28]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f004 fdde 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a18      	ldr	r0, [r3, #32]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f004 fdd6 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f004 fdce 	bl	8005a4c <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000eb6:	e08b      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69d8      	ldr	r0, [r3, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f004 fdc2 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a18      	ldr	r0, [r3, #32]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f004 fdba 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f004 fdb2 	bl	8005a4c <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000eee:	e06f      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69d8      	ldr	r0, [r3, #28]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	f004 fda6 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a18      	ldr	r0, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f004 fd9e 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f004 fd96 	bl	8005a4c <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f26:	e053      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69d8      	ldr	r0, [r3, #28]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f004 fd8a 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a18      	ldr	r0, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	f004 fd82 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	f004 fd7a 	bl	8005a4c <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f5e:	e037      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69d8      	ldr	r0, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f004 fd6e 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a18      	ldr	r0, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f004 fd66 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f004 fd5e 	bl	8005a4c <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2210      	movs	r2, #16
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f96:	e01b      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69d8      	ldr	r0, [r3, #28]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 fd52 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a18      	ldr	r0, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f004 fd4a 	bl	8005a4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 fd42 	bl	8005a4c <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2210      	movs	r2, #16
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <Set_Direction_A4988+0x18>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d009      	beq.n	8001002 <Set_Direction_A4988+0x2a>
 8000fee:	e011      	b.n	8001014 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6958      	ldr	r0, [r3, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	8b1b      	ldrh	r3, [r3, #24]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f004 fd26 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 8001000:	e011      	b.n	8001026 <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6958      	ldr	r0, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	8b1b      	ldrh	r3, [r3, #24]
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	f004 fd1d 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 8001012:	e008      	b.n	8001026 <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6958      	ldr	r0, [r3, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8b1b      	ldrh	r3, [r3, #24]
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	f004 fd14 	bl	8005a4c <HAL_GPIO_WritePin>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d003      	beq.n	8001046 <Enable_A4988+0x18>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d009      	beq.n	8001058 <Enable_A4988+0x2a>
 8001044:	e011      	b.n	800106a <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	f004 fcfb 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 8001056:	e011      	b.n	800107c <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f004 fcf2 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 8001068:	e008      	b.n	800107c <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f004 fce9 	bl	8005a4c <HAL_GPIO_WritePin>
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d003      	beq.n	800109c <Reset_A4988+0x18>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d00a      	beq.n	80010b0 <Reset_A4988+0x2c>
 800109a:	e013      	b.n	80010c4 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f004 fccf 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 80010ae:	e013      	b.n	80010d8 <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	f004 fcc5 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 80010c2:	e009      	b.n	80010d8 <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f004 fcbb 	bl	8005a4c <HAL_GPIO_WritePin>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d003      	beq.n	80010f8 <Sleep_A4988+0x18>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d00a      	beq.n	800110c <Sleep_A4988+0x2c>
 80010f6:	e013      	b.n	8001120 <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f004 fca1 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 800110a:	e013      	b.n	8001134 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f004 fc97 	bl	8005a4c <HAL_GPIO_WritePin>
			break;
 800111e:	e009      	b.n	8001134 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f004 fc8d 	bl	8005a4c <HAL_GPIO_WritePin>
	}
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Init_A4988>:
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
void Init_A4988(A4988_Drive* drive){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fc53 	bl	80079f4 <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 800114e:	2102      	movs	r1, #2
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fe7d 	bl	8000e50 <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff3d 	bl	8000fd8 <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 800115e:	2101      	movs	r1, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff64 	bl	800102e <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 8001166:	2101      	movs	r1, #1
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff8b 	bl	8001084 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 800116e:	2102      	movs	r1, #2
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffb5 	bl	80010e0 <Sleep_A4988>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af04      	add	r7, sp, #16
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <BMP280_Read8+0x38>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	b29a      	uxth	r2, r3
 8001196:	230a      	movs	r3, #10
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	21ec      	movs	r1, #236	; 0xec
 80011a8:	f004 fe28 	bl	8005dfc <HAL_I2C_Mem_Read>
  return tmp;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000094 	.word	0x20000094

080011bc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <BMP280_Read16+0x40>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	230a      	movs	r3, #10
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	21ec      	movs	r1, #236	; 0xec
 80011e0:	f004 fe0c 	bl	8005dfc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80011e4:	7b3b      	ldrb	r3, [r7, #12]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000094 	.word	0x20000094

08001200 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffd5 	bl	80011bc <BMP280_Read16>
 8001212:	4603      	mov	r3, r0
 8001214:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29b      	uxth	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	4603      	mov	r3, r0
 800123c:	460a      	mov	r2, r1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	4613      	mov	r3, r2
 8001242:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <BMP280_Write8+0x34>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	b29a      	uxth	r2, r3
 800124c:	230a      	movs	r3, #10
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2301      	movs	r3, #1
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	1dbb      	adds	r3, r7, #6
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	21ec      	movs	r1, #236	; 0xec
 800125c:	f004 fcba 	bl	8005bd4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000094 	.word	0x20000094

0800126c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af04      	add	r7, sp, #16
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <BMP280_Read24+0x40>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	b29a      	uxth	r2, r3
 800127e:	230a      	movs	r3, #10
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2303      	movs	r3, #3
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	21ec      	movs	r1, #236	; 0xec
 8001290:	f004 fdb4 	bl	8005dfc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	4313      	orrs	r3, r2
 800129e:	7bba      	ldrb	r2, [r7, #14]
 80012a0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000094 	.word	0x20000094

080012b0 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	70fb      	strb	r3, [r7, #3]
 80012c2:	460b      	mov	r3, r1
 80012c4:	70bb      	strb	r3, [r7, #2]
 80012c6:	4613      	mov	r3, r2
 80012c8:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <BMP280_Init+0x13c>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d901      	bls.n	80012da <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80012d6:	2303      	movs	r3, #3
 80012d8:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012da:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <BMP280_Init+0x140>)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d901      	bls.n	80012f4 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012f0:	2305      	movs	r3, #5
 80012f2:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <BMP280_Init+0x144>)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012fa:	78bb      	ldrb	r3, [r7, #2]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d901      	bls.n	8001304 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001300:	2305      	movs	r3, #5
 8001302:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001304:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <BMP280_Init+0x148>)
 8001306:	78bb      	ldrb	r3, [r7, #2]
 8001308:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800130a:	bf00      	nop
 800130c:	20d0      	movs	r0, #208	; 0xd0
 800130e:	f7ff ff37 	bl	8001180 <BMP280_Read8>
 8001312:	4603      	mov	r3, r0
 8001314:	2b58      	cmp	r3, #88	; 0x58
 8001316:	d1f9      	bne.n	800130c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001318:	2088      	movs	r0, #136	; 0x88
 800131a:	f7ff ff71 	bl	8001200 <BMP280_Read16LE>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <BMP280_Init+0x14c>)
 8001324:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001326:	208a      	movs	r0, #138	; 0x8a
 8001328:	f7ff ff6a 	bl	8001200 <BMP280_Read16LE>
 800132c:	4603      	mov	r3, r0
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <BMP280_Init+0x150>)
 8001332:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001334:	208c      	movs	r0, #140	; 0x8c
 8001336:	f7ff ff63 	bl	8001200 <BMP280_Read16LE>
 800133a:	4603      	mov	r3, r0
 800133c:	b21a      	sxth	r2, r3
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <BMP280_Init+0x154>)
 8001340:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001342:	208e      	movs	r0, #142	; 0x8e
 8001344:	f7ff ff5c 	bl	8001200 <BMP280_Read16LE>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <BMP280_Init+0x158>)
 800134e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001350:	2090      	movs	r0, #144	; 0x90
 8001352:	f7ff ff55 	bl	8001200 <BMP280_Read16LE>
 8001356:	4603      	mov	r3, r0
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <BMP280_Init+0x15c>)
 800135c:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800135e:	2092      	movs	r0, #146	; 0x92
 8001360:	f7ff ff4e 	bl	8001200 <BMP280_Read16LE>
 8001364:	4603      	mov	r3, r0
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <BMP280_Init+0x160>)
 800136a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800136c:	2094      	movs	r0, #148	; 0x94
 800136e:	f7ff ff47 	bl	8001200 <BMP280_Read16LE>
 8001372:	4603      	mov	r3, r0
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <BMP280_Init+0x164>)
 8001378:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800137a:	2096      	movs	r0, #150	; 0x96
 800137c:	f7ff ff40 	bl	8001200 <BMP280_Read16LE>
 8001380:	4603      	mov	r3, r0
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <BMP280_Init+0x168>)
 8001386:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001388:	2098      	movs	r0, #152	; 0x98
 800138a:	f7ff ff39 	bl	8001200 <BMP280_Read16LE>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <BMP280_Init+0x16c>)
 8001394:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001396:	209a      	movs	r0, #154	; 0x9a
 8001398:	f7ff ff32 	bl	8001200 <BMP280_Read16LE>
 800139c:	4603      	mov	r3, r0
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <BMP280_Init+0x170>)
 80013a2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80013a4:	209c      	movs	r0, #156	; 0x9c
 80013a6:	f7ff ff2b 	bl	8001200 <BMP280_Read16LE>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <BMP280_Init+0x174>)
 80013b0:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80013b2:	209e      	movs	r0, #158	; 0x9e
 80013b4:	f7ff ff24 	bl	8001200 <BMP280_Read16LE>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <BMP280_Init+0x178>)
 80013be:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	78bb      	ldrb	r3, [r7, #2]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	20f4      	movs	r0, #244	; 0xf4
 80013de:	f7ff ff29 	bl	8001234 <BMP280_Write8>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000094 	.word	0x20000094
 80013f0:	2000009a 	.word	0x2000009a
 80013f4:	20000098 	.word	0x20000098
 80013f8:	20000099 	.word	0x20000099
 80013fc:	200000b0 	.word	0x200000b0
 8001400:	2000009c 	.word	0x2000009c
 8001404:	2000009e 	.word	0x2000009e
 8001408:	200000b2 	.word	0x200000b2
 800140c:	200000a0 	.word	0x200000a0
 8001410:	200000a2 	.word	0x200000a2
 8001414:	200000a4 	.word	0x200000a4
 8001418:	200000a6 	.word	0x200000a6
 800141c:	200000a8 	.word	0x200000a8
 8001420:	200000aa 	.word	0x200000aa
 8001424:	200000ac 	.word	0x200000ac
 8001428:	200000ae 	.word	0x200000ae

0800142c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <BMP280_ReadTemperature+0xfc>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d16d      	bne.n	8001516 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800143a:	20f4      	movs	r0, #244	; 0xf4
 800143c:	f7ff fea0 	bl	8001180 <BMP280_Read8>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	4619      	mov	r1, r3
 8001458:	20f4      	movs	r0, #244	; 0xf4
 800145a:	f7ff feeb 	bl	8001234 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800145e:	20f4      	movs	r0, #244	; 0xf4
 8001460:	f7ff fe8e 	bl	8001180 <BMP280_Read8>
 8001464:	4603      	mov	r3, r0
 8001466:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001468:	7dbb      	ldrb	r3, [r7, #22]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d14f      	bne.n	8001516 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001476:	20f4      	movs	r0, #244	; 0xf4
 8001478:	f7ff fe82 	bl	8001180 <BMP280_Read8>
 800147c:	4603      	mov	r3, r0
 800147e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001488:	7dbb      	ldrb	r3, [r7, #22]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d000      	beq.n	8001490 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800148e:	e7f2      	b.n	8001476 <BMP280_ReadTemperature+0x4a>
				  break;
 8001490:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001492:	20fa      	movs	r0, #250	; 0xfa
 8001494:	f7ff feea 	bl	800126c <BMP280_Read24>
 8001498:	4603      	mov	r3, r0
 800149a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	111b      	asrs	r3, r3, #4
 80014a0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	10da      	asrs	r2, r3, #3
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <BMP280_ReadTemperature+0x100>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <BMP280_ReadTemperature+0x104>)
 80014b0:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	12db      	asrs	r3, r3, #11
 80014ba:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	111b      	asrs	r3, r3, #4
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <BMP280_ReadTemperature+0x100>)
 80014c2:	8812      	ldrh	r2, [r2, #0]
 80014c4:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	1112      	asrs	r2, r2, #4
 80014ca:	4918      	ldr	r1, [pc, #96]	; (800152c <BMP280_ReadTemperature+0x100>)
 80014cc:	8809      	ldrh	r1, [r1, #0]
 80014ce:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014d4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <BMP280_ReadTemperature+0x108>)
 80014d8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014e0:	139b      	asrs	r3, r3, #14
 80014e2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <BMP280_ReadTemperature+0x10c>)
 80014ec:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <BMP280_ReadTemperature+0x10c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3380      	adds	r3, #128	; 0x80
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800153c <BMP280_ReadTemperature+0x110>
 8001510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001514:	e001      	b.n	800151a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001516:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001540 <BMP280_ReadTemperature+0x114>
}
 800151a:	eef0 7a47 	vmov.f32	s15, s14
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000009a 	.word	0x2000009a
 800152c:	200000b0 	.word	0x200000b0
 8001530:	2000009c 	.word	0x2000009c
 8001534:	2000009e 	.word	0x2000009e
 8001538:	200000b4 	.word	0x200000b4
 800153c:	42c80000 	.word	0x42c80000
 8001540:	c2c60000 	.word	0xc2c60000

08001544 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	font = font_t;
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <GFX_SetFont+0x1c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200000b8 	.word	0x200000b8

08001564 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <GFX_SetFontSize+0x16>
		size = size_t;
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <GFX_SetFontSize+0x24>)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	7013      	strb	r3, [r2, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	460b      	mov	r3, r1
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	4613      	mov	r3, r2
 80015a0:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b7e      	cmp	r3, #126	; 0x7e
 80015a6:	f200 80a3 	bhi.w	80016f0 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	e096      	b.n	80016de <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80015b0:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <GFX_DrawChar+0x16c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	3b20      	subs	r3, #32
 80015b8:	494f      	ldr	r1, [pc, #316]	; (80016f8 <GFX_DrawChar+0x16c>)
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	3101      	adds	r1, #1
 80015be:	7809      	ldrb	r1, [r1, #0]
 80015c0:	fb03 f101 	mul.w	r1, r3, r1
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	440b      	add	r3, r1
 80015c8:	3302      	adds	r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80015d0:	2300      	movs	r3, #0
 80015d2:	757b      	strb	r3, [r7, #21]
 80015d4:	e078      	b.n	80016c8 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80015d6:	7dbb      	ldrb	r3, [r7, #22]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d032      	beq.n	8001646 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <GFX_DrawChar+0x170>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d113      	bne.n	8001610 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b218      	sxth	r0, r3
 80015f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	79ba      	ldrb	r2, [r7, #6]
 8001608:	4619      	mov	r1, r3
 800160a:	f000 fa2f 	bl	8001a6c <SSD1306_DrawPixel>
 800160e:	e052      	b.n	80016b6 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	4a3a      	ldr	r2, [pc, #232]	; (80016fc <GFX_DrawChar+0x170>)
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	18d0      	adds	r0, r2, r3
 800161e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001622:	4a36      	ldr	r2, [pc, #216]	; (80016fc <GFX_DrawChar+0x170>)
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	fb03 f202 	mul.w	r2, r3, r2
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	18d1      	adds	r1, r2, r3
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <GFX_DrawChar+0x170>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <GFX_DrawChar+0x170>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b29c      	uxth	r4, r3
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4623      	mov	r3, r4
 8001640:	f000 f9bd 	bl	80019be <GFX_DrawFillRectangle>
 8001644:	e037      	b.n	80016b6 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800164a:	2b00      	cmp	r3, #0
 800164c:	d133      	bne.n	80016b6 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <GFX_DrawChar+0x170>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d114      	bne.n	8001680 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	b218      	sxth	r0, r3
 8001664:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001668:	b29a      	uxth	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b21b      	sxth	r3, r3
 8001674:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 f9f7 	bl	8001a6c <SSD1306_DrawPixel>
 800167e:	e01a      	b.n	80016b6 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <GFX_DrawChar+0x170>)
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	fb03 f202 	mul.w	r2, r3, r2
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	18d0      	adds	r0, r2, r3
 800168e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <GFX_DrawChar+0x170>)
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	18d1      	adds	r1, r2, r3
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <GFX_DrawChar+0x170>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <GFX_DrawChar+0x170>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b29c      	uxth	r4, r3
 80016aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4623      	mov	r3, r4
 80016b2:	f000 f984 	bl	80019be <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80016b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	757b      	strb	r3, [r7, #21]
 80016c2:	7dbb      	ldrb	r3, [r7, #22]
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	75bb      	strb	r3, [r7, #22]
 80016c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <GFX_DrawChar+0x16c>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f6ff af7f 	blt.w	80015d6 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	3301      	adds	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <GFX_DrawChar+0x16c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f4ff af61 	bcc.w	80015b0 <GFX_DrawChar+0x24>
 80016ee:	e000      	b.n	80016f2 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80016f0:	bf00      	nop
            }
        }
    }
}
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	200000b8 	.word	0x200000b8
 80016fc:	20000000 	.word	0x20000000

08001700 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001718:	e03e      	b.n	8001798 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800171a:	78f9      	ldrb	r1, [r7, #3]
 800171c:	7cfa      	ldrb	r2, [r7, #19]
 800171e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	460b      	mov	r3, r1
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	6978      	ldr	r0, [r7, #20]
 800172a:	f7ff ff2f 	bl	800158c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <GFX_DrawString+0xb0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <GFX_DrawString+0xb4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	3301      	adds	r3, #1
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d120      	bne.n	8001792 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001750:	2300      	movs	r3, #0
 8001752:	74bb      	strb	r3, [r7, #18]
 8001754:	e012      	b.n	800177c <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29b      	uxth	r3, r3
 800175e:	b218      	sxth	r0, r3
 8001760:	7cbb      	ldrb	r3, [r7, #18]
 8001762:	b29a      	uxth	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21b      	sxth	r3, r3
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	f000 f97b 	bl	8001a6c <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001776:	7cbb      	ldrb	r3, [r7, #18]
 8001778:	3301      	adds	r3, #1
 800177a:	74bb      	strb	r3, [r7, #18]
 800177c:	7cba      	ldrb	r2, [r7, #18]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <GFX_DrawString+0xb0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <GFX_DrawString+0xb4>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	429a      	cmp	r2, r3
 8001790:	dbe1      	blt.n	8001756 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ba      	bne.n	800171a <GFX_DrawString+0x1a>
	}
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000b8 	.word	0x200000b8
 80017b4:	20000000 	.word	0x20000000

080017b8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1acb      	subs	r3, r1, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bfb8      	it	lt
 80017de:	425b      	neglt	r3, r3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bfcc      	ite	gt
 80017e4:	2301      	movgt	r3, #1
 80017e6:	2300      	movle	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80017ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dd0b      	ble.n	800182c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	b29b      	uxth	r3, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	bfb8      	it	lt
 8001844:	425b      	neglt	r3, r3
 8001846:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da00      	bge.n	8001852 <GFX_WriteLine+0x9a>
 8001850:	3301      	adds	r3, #1
 8001852:	105b      	asrs	r3, r3, #1
 8001854:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	da02      	bge.n	8001864 <GFX_WriteLine+0xac>
	        ystep = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001862:	e030      	b.n	80018c6 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001868:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800186a:	e02c      	b.n	80018c6 <GFX_WriteLine+0x10e>
	        if (steep) {
 800186c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	b21b      	sxth	r3, r3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	b211      	sxth	r1, r2
 800187c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f8f3 	bl	8001a6c <SSD1306_DrawPixel>
 8001886:	e008      	b.n	800189a <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b21b      	sxth	r3, r3
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	b211      	sxth	r1, r2
 8001890:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f8e9 	bl	8001a6c <SSD1306_DrawPixel>
	        }
	        err -= dy;
 800189a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800189c:	8abb      	ldrh	r3, [r7, #20]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80018a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da09      	bge.n	80018c0 <GFX_WriteLine+0x108>
	            y_start += ystep;
 80018ac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80018b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80018b8:	8afb      	ldrh	r3, [r7, #22]
 80018ba:	4413      	add	r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	ddce      	ble.n	800186c <GFX_WriteLine+0xb4>
	        }
	    }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	; 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ff5d 	bl	80017b8 <GFX_WriteLine>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af02      	add	r7, sp, #8
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff47 	bl	80017b8 <GFX_WriteLine>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b088      	sub	sp, #32
 8001936:	af02      	add	r7, sp, #8
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d114      	bne.n	8001972 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	dd05      	ble.n	800195c <GFX_DrawLine+0x2a>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff ffb4 	bl	80018d8 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001970:	e021      	b.n	80019b6 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d114      	bne.n	80019a4 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dd05      	ble.n	800198e <GFX_DrawLine+0x5c>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff ffb2 	bl	8001906 <GFX_DrawFastHLine>
}
 80019a2:	e008      	b.n	80019b6 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80019a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff01 	bl	80017b8 <GFX_WriteLine>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	4611      	mov	r1, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	80fb      	strh	r3, [r7, #6]
 80019d0:	4613      	mov	r3, r2
 80019d2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e009      	b.n	80019ee <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80019da:	88ba      	ldrh	r2, [r7, #4]
 80019dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff78 	bl	80018d8 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbef      	blt.n	80019da <GFX_DrawFillRectangle+0x1c>
    }

}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af04      	add	r7, sp, #16
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <SSD1306_Command+0x30>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	2200      	movs	r2, #0
 8001a24:	2178      	movs	r1, #120	; 0x78
 8001a26:	f004 f8d5 	bl	8005bd4 <HAL_I2C_Mem_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000bc 	.word	0x200000bc

08001a38 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af04      	add	r7, sp, #16
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SSD1306_Data+0x30>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	2178      	movs	r1, #120	; 0x78
 8001a5c:	f004 f8ba 	bl	8005bd4 <HAL_I2C_Mem_Write>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200000bc 	.word	0x200000bc

08001a6c <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db79      	blt.n	8001b7a <SSD1306_DrawPixel+0x10e>
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8c:	dc75      	bgt.n	8001b7a <SSD1306_DrawPixel+0x10e>
 8001a8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db71      	blt.n	8001b7a <SSD1306_DrawPixel+0x10e>
 8001a96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a9a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a9c:	dc6d      	bgt.n	8001b7a <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d049      	beq.n	8001b38 <SSD1306_DrawPixel+0xcc>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	dc69      	bgt.n	8001b7c <SSD1306_DrawPixel+0x110>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d022      	beq.n	8001af2 <SSD1306_DrawPixel+0x86>
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d165      	bne.n	8001b7c <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001ab0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da00      	bge.n	8001abe <SSD1306_DrawPixel+0x52>
 8001abc:	3307      	adds	r3, #7
 8001abe:	10db      	asrs	r3, r3, #3
 8001ac0:	b218      	sxth	r0, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	01db      	lsls	r3, r3, #7
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b259      	sxtb	r1, r3
 8001ae0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	01db      	lsls	r3, r3, #7
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2c9      	uxtb	r1, r1
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001aee:	54d1      	strb	r1, [r2, r3]
      break;
 8001af0:	e044      	b.n	8001b7c <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001af6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da00      	bge.n	8001b00 <SSD1306_DrawPixel+0x94>
 8001afe:	3307      	adds	r3, #7
 8001b00:	10db      	asrs	r3, r3, #3
 8001b02:	b218      	sxth	r0, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4013      	ands	r3, r2
 8001b24:	b259      	sxtb	r1, r3
 8001b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	01db      	lsls	r3, r3, #7
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b34:	54d1      	strb	r1, [r2, r3]
      break;
 8001b36:	e021      	b.n	8001b7c <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001b38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da00      	bge.n	8001b46 <SSD1306_DrawPixel+0xda>
 8001b44:	3307      	adds	r3, #7
 8001b46:	10db      	asrs	r3, r3, #3
 8001b48:	b218      	sxth	r0, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	01db      	lsls	r3, r3, #7
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	4053      	eors	r3, r2
 8001b66:	b259      	sxtb	r1, r3
 8001b68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b76:	54d1      	strb	r1, [r2, r3]
      break;
 8001b78:	e000      	b.n	8001b7c <SSD1306_DrawPixel+0x110>
	  return;
 8001b7a:	bf00      	nop
    }
}
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200000c0 	.word	0x200000c0

08001b8c <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <SSD1306_Clear+0x22>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10d      	bne.n	8001bbc <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba4:	21ff      	movs	r1, #255	; 0xff
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <SSD1306_Clear+0x38>)
 8001ba8:	f00c fc26 	bl	800e3f8 <memset>
		break;
 8001bac:	e006      	b.n	8001bbc <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <SSD1306_Clear+0x38>)
 8001bb6:	f00c fc1f 	bl	800e3f8 <memset>
		break;
 8001bba:	bf00      	nop
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200000c0 	.word	0x200000c0

08001bc8 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001bcc:	2022      	movs	r0, #34	; 0x22
 8001bce:	f7ff ff19 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff ff16 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001bd8:	20ff      	movs	r0, #255	; 0xff
 8001bda:	f7ff ff13 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001bde:	2021      	movs	r0, #33	; 0x21
 8001be0:	f7ff ff10 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff ff0d 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001bea:	207f      	movs	r0, #127	; 0x7f
 8001bec:	f7ff ff0a 	bl	8001a04 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <SSD1306_Display+0x38>)
 8001bf6:	f7ff ff1f 	bl	8001a38 <SSD1306_Data>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200000c0 	.word	0x200000c0

08001c04 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <SSD1306_Init+0xac>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001c12:	20ae      	movs	r0, #174	; 0xae
 8001c14:	f7ff fef6 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001c18:	20d5      	movs	r0, #213	; 0xd5
 8001c1a:	f7ff fef3 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001c1e:	2080      	movs	r0, #128	; 0x80
 8001c20:	f7ff fef0 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001c24:	203f      	movs	r0, #63	; 0x3f
 8001c26:	f7ff feed 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001c2a:	20d3      	movs	r0, #211	; 0xd3
 8001c2c:	f7ff feea 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fee7 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001c36:	2040      	movs	r0, #64	; 0x40
 8001c38:	f7ff fee4 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001c3c:	208d      	movs	r0, #141	; 0x8d
 8001c3e:	f7ff fee1 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001c42:	2014      	movs	r0, #20
 8001c44:	f7ff fede 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001c48:	2020      	movs	r0, #32
 8001c4a:	f7ff fedb 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fed8 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001c54:	20a1      	movs	r0, #161	; 0xa1
 8001c56:	f7ff fed5 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001c5a:	20c8      	movs	r0, #200	; 0xc8
 8001c5c:	f7ff fed2 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001c60:	20da      	movs	r0, #218	; 0xda
 8001c62:	f7ff fecf 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001c66:	2012      	movs	r0, #18
 8001c68:	f7ff fecc 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001c6c:	2081      	movs	r0, #129	; 0x81
 8001c6e:	f7ff fec9 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001c72:	20ff      	movs	r0, #255	; 0xff
 8001c74:	f7ff fec6 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001c78:	20d9      	movs	r0, #217	; 0xd9
 8001c7a:	f7ff fec3 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8001c7e:	20f1      	movs	r0, #241	; 0xf1
 8001c80:	f7ff fec0 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001c84:	20db      	movs	r0, #219	; 0xdb
 8001c86:	f7ff febd 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001c8a:	2040      	movs	r0, #64	; 0x40
 8001c8c:	f7ff feba 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001c90:	20a4      	movs	r0, #164	; 0xa4
 8001c92:	f7ff feb7 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001c96:	20a6      	movs	r0, #166	; 0xa6
 8001c98:	f7ff feb4 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001c9c:	202e      	movs	r0, #46	; 0x2e
 8001c9e:	f7ff feb1 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001ca2:	20af      	movs	r0, #175	; 0xaf
 8001ca4:	f7ff feae 	bl	8001a04 <SSD1306_Command>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000bc 	.word	0x200000bc

08001cb4 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	1c7b      	adds	r3, r7, #1
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f003 ff76 	bl	8005bd4 <HAL_I2C_Mem_Write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	729a      	strb	r2, [r3, #10]
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8001d08:	883b      	ldrh	r3, [r7, #0]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 8001d10:	883b      	ldrh	r3, [r7, #0]
 8001d12:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	733b      	strb	r3, [r7, #12]
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f003 ff49 	bl	8005bd4 <HAL_I2C_Mem_Write>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	729a      	strb	r2, [r3, #10]
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	af04      	add	r7, sp, #16
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	f107 030f 	add.w	r3, r7, #15
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f004 f83c 	bl	8005dfc <HAL_I2C_Mem_Read>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	729a      	strb	r2, [r3, #10]
	return value;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af04      	add	r7, sp, #16
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 8001da2:	2300      	movs	r3, #0
 8001da4:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	b299      	uxth	r1, r3
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f004 f818 	bl	8005dfc <HAL_I2C_Mem_Read>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	7b3b      	ldrb	r3, [r7, #12]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	81fb      	strh	r3, [r7, #14]
	return value_;
 8001de4:	89fb      	ldrh	r3, [r7, #14]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2229      	movs	r2, #41	; 0x29
 8001e02:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e16:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 8001e1e:	2124      	movs	r1, #36	; 0x24
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff96 	bl	8001d52 <readReg>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 8001e2e:	2116      	movs	r1, #22
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff8e 	bl	8001d52 <readReg>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 80a9 	bne.w	8001f90 <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f240 2107 	movw	r1, #519	; 0x207
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff32 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff2c 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2196      	movs	r1, #150	; 0x96
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff27 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 8001e66:	22fd      	movs	r2, #253	; 0xfd
 8001e68:	2197      	movs	r1, #151	; 0x97
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff22 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 8001e70:	2201      	movs	r2, #1
 8001e72:	21e3      	movs	r1, #227	; 0xe3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff1d 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	21e4      	movs	r1, #228	; 0xe4
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff18 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8001e84:	2202      	movs	r2, #2
 8001e86:	21e5      	movs	r1, #229	; 0xe5
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff13 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	21e6      	movs	r1, #230	; 0xe6
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff0e 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8001e98:	2203      	movs	r2, #3
 8001e9a:	21e7      	movs	r1, #231	; 0xe7
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff09 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	21f5      	movs	r1, #245	; 0xf5
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff04 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 8001eac:	2205      	movs	r2, #5
 8001eae:	21d9      	movs	r1, #217	; 0xd9
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff feff 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8001eb6:	22ce      	movs	r2, #206	; 0xce
 8001eb8:	21db      	movs	r1, #219	; 0xdb
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fefa 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	21dc      	movs	r1, #220	; 0xdc
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fef5 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 8001eca:	22f8      	movs	r2, #248	; 0xf8
 8001ecc:	21dd      	movs	r1, #221	; 0xdd
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fef0 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	219f      	movs	r1, #159	; 0x9f
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff feeb 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 8001ede:	223c      	movs	r2, #60	; 0x3c
 8001ee0:	21a3      	movs	r1, #163	; 0xa3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fee6 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	21b7      	movs	r1, #183	; 0xb7
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fee1 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 8001ef2:	223c      	movs	r2, #60	; 0x3c
 8001ef4:	21bb      	movs	r1, #187	; 0xbb
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fedc 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 8001efc:	2209      	movs	r2, #9
 8001efe:	21b2      	movs	r1, #178	; 0xb2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fed7 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8001f06:	2209      	movs	r2, #9
 8001f08:	21ca      	movs	r1, #202	; 0xca
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fed2 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fecc 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 8001f1c:	2217      	movs	r2, #23
 8001f1e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fec6 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fec0 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 8001f34:	2205      	movs	r2, #5
 8001f36:	21ff      	movs	r1, #255	; 0xff
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff febb 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 8001f3e:	2205      	movs	r2, #5
 8001f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff feb5 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 8001f4a:	2205      	movs	r2, #5
 8001f4c:	f240 1199 	movw	r1, #409	; 0x199
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff feaf 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 8001f56:	221b      	movs	r2, #27
 8001f58:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fea9 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 8001f62:	223e      	movs	r2, #62	; 0x3e
 8001f64:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fea3 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 8001f6e:	221f      	movs	r2, #31
 8001f70:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fe9d 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2130      	movs	r1, #48	; 0x30
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe98 	bl	8001cb4 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2116      	movs	r1, #22
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fe93 	bl	8001cb4 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 8001f8e:	e021      	b.n	8001fd4 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 8001f90:	2196      	movs	r1, #150	; 0x96
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff feff 	bl	8001d96 <readReg16Bit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 8001f9c:	2254      	movs	r2, #84	; 0x54
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	715a      	strb	r2, [r3, #5]
 8001faa:	e00a      	b.n	8001fc2 <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 8001fac:	227f      	movs	r2, #127	; 0x7f
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	715a      	strb	r2, [r3, #5]
 8001fba:	e002      	b.n	8001fc2 <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	799a      	ldrb	r2, [r3, #6]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	795b      	ldrb	r3, [r3, #5]
 8001fca:	fb12 f303 	smulbb	r3, r2, r3
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	719a      	strb	r2, [r3, #6]
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8001fe8:	2314      	movs	r3, #20
 8001fea:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d043      	beq.n	800207a <setScaling_VL6180X+0x9e>
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d840      	bhi.n	800207a <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	795b      	ldrb	r3, [r3, #5]
 8002002:	461a      	mov	r2, r3
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <setScaling_VL6180X+0xa8>)
 8002006:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800200a:	461a      	mov	r2, r3
 800200c:	2196      	movs	r1, #150	; 0x96
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fe72 	bl	8001cf8 <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	799a      	ldrb	r2, [r3, #6]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	2124      	movs	r1, #36	; 0x24
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fe44 	bl	8001cb4 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	2121      	movs	r1, #33	; 0x21
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fe39 	bl	8001cb4 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 8002042:	212d      	movs	r1, #45	; 0x2d
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fe84 	bl	8001d52 <readReg>
 800204a:	4603      	mov	r3, r0
 800204c:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 800204e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	b25a      	sxtb	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	795b      	ldrb	r3, [r3, #5]
 800205c:	2b01      	cmp	r3, #1
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	b25b      	sxtb	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b25b      	sxtb	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	212d      	movs	r1, #45	; 0x2d
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe1e 	bl	8001cb4 <writeReg>
 8002078:	e000      	b.n	800207c <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 800207a:	bf00      	nop
}
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	0800ead8 	.word	0x0800ead8

08002088 <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 8002090:	f003 f9b0 	bl	80053f4 <HAL_GetTick>
 8002094:	4603      	mov	r3, r0
 8002096:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8002098:	e010      	b.n	80020bc <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	891b      	ldrh	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <readRangeContinuous_VL6180X+0x34>
 80020a2:	f003 f9a7 	bl	80053f4 <HAL_GetTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	8912      	ldrh	r2, [r2, #8]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	dd01      	ble.n	80020bc <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 80020b8:	23ff      	movs	r3, #255	; 0xff
 80020ba:	e014      	b.n	80020e6 <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 80020bc:	214f      	movs	r1, #79	; 0x4f
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fe47 	bl	8001d52 <readReg>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0e5      	beq.n	800209a <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 80020ce:	2162      	movs	r1, #98	; 0x62
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fe3e 	bl	8001d52 <readReg>
 80020d6:	4603      	mov	r3, r0
 80020d8:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 80020da:	2201      	movs	r2, #1
 80020dc:	2115      	movs	r1, #21
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fde8 	bl	8001cb4 <writeReg>
  return range;
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2118      	movs	r1, #24
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fdda 	bl	8001cb4 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffc1 	bl	8002088 <readRangeContinuous_VL6180X>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 8002118:	2230      	movs	r2, #48	; 0x30
 800211a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fdc8 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 8002124:	2246      	movs	r2, #70	; 0x46
 8002126:	213f      	movs	r1, #63	; 0x3f
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fdc3 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	2131      	movs	r1, #49	; 0x31
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fdbe 	bl	8001cb4 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 8002138:	2263      	movs	r2, #99	; 0x63
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fddb 	bl	8001cf8 <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 8002142:	2201      	movs	r2, #1
 8002144:	212e      	movs	r1, #46	; 0x2e
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fdb4 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 800214c:	2209      	movs	r2, #9
 800214e:	211b      	movs	r1, #27
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fdaf 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 8002156:	2231      	movs	r2, #49	; 0x31
 8002158:	213e      	movs	r1, #62	; 0x3e
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fdaa 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 8002160:	2224      	movs	r2, #36	; 0x24
 8002162:	2114      	movs	r1, #20
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fda5 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 800216a:	2231      	movs	r2, #49	; 0x31
 800216c:	211c      	movs	r1, #28
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fda0 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	f240 21a3 	movw	r1, #675	; 0x2a3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fd9a 	bl	8001cb4 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 8002180:	2101      	movs	r1, #1
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff2a 	bl	8001fdc <setScaling_VL6180X>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	795b      	ldrb	r3, [r3, #5]
 800219c:	b29c      	uxth	r4, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa5 	bl	80020ee <readRangeSingle_VL6180X>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	fb14 f303 	smulbb	r3, r4, r3
 80021ac:	b29b      	uxth	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
	...

080021b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 80021bc:	486f      	ldr	r0, [pc, #444]	; (800237c <MX_FREERTOS_Init+0x1c4>)
 80021be:	f008 fa3b 	bl	800a638 <osMutexNew>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <MX_FREERTOS_Init+0x1c8>)
 80021c6:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 80021c8:	486e      	ldr	r0, [pc, #440]	; (8002384 <MX_FREERTOS_Init+0x1cc>)
 80021ca:	f008 fa35 	bl	800a638 <osMutexNew>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4a6d      	ldr	r2, [pc, #436]	; (8002388 <MX_FREERTOS_Init+0x1d0>)
 80021d2:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C4 */
  MutexI2C4Handle = osMutexNew(&MutexI2C4_attributes);
 80021d4:	486d      	ldr	r0, [pc, #436]	; (800238c <MX_FREERTOS_Init+0x1d4>)
 80021d6:	f008 fa2f 	bl	800a638 <osMutexNew>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a6c      	ldr	r2, [pc, #432]	; (8002390 <MX_FREERTOS_Init+0x1d8>)
 80021de:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SyringeInfoOLEDSemaphore */
  SyringeInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoOLEDSemaphore_attributes);
 80021e0:	4a6c      	ldr	r2, [pc, #432]	; (8002394 <MX_FREERTOS_Init+0x1dc>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	2001      	movs	r0, #1
 80021e6:	f008 fb6f 	bl	800a8c8 <osSemaphoreNew>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a6a      	ldr	r2, [pc, #424]	; (8002398 <MX_FREERTOS_Init+0x1e0>)
 80021ee:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoOLEDSemaphore */
  NeedleInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoOLEDSemaphore_attributes);
 80021f0:	4a6a      	ldr	r2, [pc, #424]	; (800239c <MX_FREERTOS_Init+0x1e4>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	2001      	movs	r0, #1
 80021f6:	f008 fb67 	bl	800a8c8 <osSemaphoreNew>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a68      	ldr	r2, [pc, #416]	; (80023a0 <MX_FREERTOS_Init+0x1e8>)
 80021fe:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationSemaphore */
  TemperatureInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &TemperatureInfoCommunicationSemaphore_attributes);
 8002200:	4a68      	ldr	r2, [pc, #416]	; (80023a4 <MX_FREERTOS_Init+0x1ec>)
 8002202:	2101      	movs	r1, #1
 8002204:	2001      	movs	r0, #1
 8002206:	f008 fb5f 	bl	800a8c8 <osSemaphoreNew>
 800220a:	4603      	mov	r3, r0
 800220c:	4a66      	ldr	r2, [pc, #408]	; (80023a8 <MX_FREERTOS_Init+0x1f0>)
 800220e:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoCommunicationSemaphore */
  SyringeInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoCommunicationSemaphore_attributes);
 8002210:	4a66      	ldr	r2, [pc, #408]	; (80023ac <MX_FREERTOS_Init+0x1f4>)
 8002212:	2101      	movs	r1, #1
 8002214:	2001      	movs	r0, #1
 8002216:	f008 fb57 	bl	800a8c8 <osSemaphoreNew>
 800221a:	4603      	mov	r3, r0
 800221c:	4a64      	ldr	r2, [pc, #400]	; (80023b0 <MX_FREERTOS_Init+0x1f8>)
 800221e:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoCommunicationSemaphore */
  NeedleInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoCommunicationSemaphore_attributes);
 8002220:	4a64      	ldr	r2, [pc, #400]	; (80023b4 <MX_FREERTOS_Init+0x1fc>)
 8002222:	2101      	movs	r1, #1
 8002224:	2001      	movs	r0, #1
 8002226:	f008 fb4f 	bl	800a8c8 <osSemaphoreNew>
 800222a:	4603      	mov	r3, r0
 800222c:	4a62      	ldr	r2, [pc, #392]	; (80023b8 <MX_FREERTOS_Init+0x200>)
 800222e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SyringeInfoTimerOLED */
  SyringeInfoTimerOLEDHandle = osTimerNew(SyringeInfoTimerOLEDCallback, osTimerPeriodic, NULL, &SyringeInfoTimerOLED_attributes);
 8002230:	4b62      	ldr	r3, [pc, #392]	; (80023bc <MX_FREERTOS_Init+0x204>)
 8002232:	2200      	movs	r2, #0
 8002234:	2101      	movs	r1, #1
 8002236:	4862      	ldr	r0, [pc, #392]	; (80023c0 <MX_FREERTOS_Init+0x208>)
 8002238:	f008 f93a 	bl	800a4b0 <osTimerNew>
 800223c:	4603      	mov	r3, r0
 800223e:	4a61      	ldr	r2, [pc, #388]	; (80023c4 <MX_FREERTOS_Init+0x20c>)
 8002240:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerOLED */
  NeedleInfoTimerOLEDHandle = osTimerNew(NeedleInfoTimerOLEDCallback, osTimerPeriodic, NULL, &NeedleInfoTimerOLED_attributes);
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <MX_FREERTOS_Init+0x210>)
 8002244:	2200      	movs	r2, #0
 8002246:	2101      	movs	r1, #1
 8002248:	4860      	ldr	r0, [pc, #384]	; (80023cc <MX_FREERTOS_Init+0x214>)
 800224a:	f008 f931 	bl	800a4b0 <osTimerNew>
 800224e:	4603      	mov	r3, r0
 8002250:	4a5f      	ldr	r2, [pc, #380]	; (80023d0 <MX_FREERTOS_Init+0x218>)
 8002252:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoTimerCommunication */
  SyringeInfoTimerCommunicationHandle = osTimerNew(SyringeInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &SyringeInfoTimerCommunication_attributes);
 8002254:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <MX_FREERTOS_Init+0x21c>)
 8002256:	2200      	movs	r2, #0
 8002258:	2101      	movs	r1, #1
 800225a:	485f      	ldr	r0, [pc, #380]	; (80023d8 <MX_FREERTOS_Init+0x220>)
 800225c:	f008 f928 	bl	800a4b0 <osTimerNew>
 8002260:	4603      	mov	r3, r0
 8002262:	4a5e      	ldr	r2, [pc, #376]	; (80023dc <MX_FREERTOS_Init+0x224>)
 8002264:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerCommunication */
  NeedleInfoTimerCommunicationHandle = osTimerNew(NeedleInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &NeedleInfoTimerCommunication_attributes);
 8002266:	4b5e      	ldr	r3, [pc, #376]	; (80023e0 <MX_FREERTOS_Init+0x228>)
 8002268:	2200      	movs	r2, #0
 800226a:	2101      	movs	r1, #1
 800226c:	485d      	ldr	r0, [pc, #372]	; (80023e4 <MX_FREERTOS_Init+0x22c>)
 800226e:	f008 f91f 	bl	800a4b0 <osTimerNew>
 8002272:	4603      	mov	r3, r0
 8002274:	4a5c      	ldr	r2, [pc, #368]	; (80023e8 <MX_FREERTOS_Init+0x230>)
 8002276:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSyringeInfoOLED */
  QueueSyringeInfoOLEDHandle = osMessageQueueNew (8, sizeof(Syringe_info), &QueueSyringeInfoOLED_attributes);
 8002278:	4a5c      	ldr	r2, [pc, #368]	; (80023ec <MX_FREERTOS_Init+0x234>)
 800227a:	2104      	movs	r1, #4
 800227c:	2008      	movs	r0, #8
 800227e:	f008 fc7d 	bl	800ab7c <osMessageQueueNew>
 8002282:	4603      	mov	r3, r0
 8002284:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <MX_FREERTOS_Init+0x238>)
 8002286:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeInfoCommunication */
  QueueSyringeInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Syringe_info), &QueueSyringeInfoCommunication_attributes);
 8002288:	4a5a      	ldr	r2, [pc, #360]	; (80023f4 <MX_FREERTOS_Init+0x23c>)
 800228a:	2104      	movs	r1, #4
 800228c:	2002      	movs	r0, #2
 800228e:	f008 fc75 	bl	800ab7c <osMessageQueueNew>
 8002292:	4603      	mov	r3, r0
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <MX_FREERTOS_Init+0x240>)
 8002296:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoOLED */
  QueueNeedleInfoOLEDHandle = osMessageQueueNew (8, sizeof(Needle_info), &QueueNeedleInfoOLED_attributes);
 8002298:	4a58      	ldr	r2, [pc, #352]	; (80023fc <MX_FREERTOS_Init+0x244>)
 800229a:	2104      	movs	r1, #4
 800229c:	2008      	movs	r0, #8
 800229e:	f008 fc6d 	bl	800ab7c <osMessageQueueNew>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a56      	ldr	r2, [pc, #344]	; (8002400 <MX_FREERTOS_Init+0x248>)
 80022a6:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoCommunication */
  QueueNeedleInfoCommunicationHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoCommunication_attributes);
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <MX_FREERTOS_Init+0x24c>)
 80022aa:	2104      	movs	r1, #4
 80022ac:	2004      	movs	r0, #4
 80022ae:	f008 fc65 	bl	800ab7c <osMessageQueueNew>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <MX_FREERTOS_Init+0x250>)
 80022b6:	6013      	str	r3, [r2, #0]

  /* creation of QueueTemperatureCommunication */
  QueueTemperatureCommunicationHandle = osMessageQueueNew (4, sizeof(Temperature_info), &QueueTemperatureCommunication_attributes);
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <MX_FREERTOS_Init+0x254>)
 80022ba:	2108      	movs	r1, #8
 80022bc:	2004      	movs	r0, #4
 80022be:	f008 fc5d 	bl	800ab7c <osMessageQueueNew>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <MX_FREERTOS_Init+0x258>)
 80022c6:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleSetPointCommunication */
  QueueNeedleSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueNeedleSetPointCommunication_attributes);
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <MX_FREERTOS_Init+0x25c>)
 80022ca:	2102      	movs	r1, #2
 80022cc:	2004      	movs	r0, #4
 80022ce:	f008 fc55 	bl	800ab7c <osMessageQueueNew>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4a50      	ldr	r2, [pc, #320]	; (8002418 <MX_FREERTOS_Init+0x260>)
 80022d6:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeSetPointCommunication */
  QueueSyringeSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueSyringeSetPointCommunication_attributes);
 80022d8:	4a50      	ldr	r2, [pc, #320]	; (800241c <MX_FREERTOS_Init+0x264>)
 80022da:	2102      	movs	r1, #2
 80022dc:	2004      	movs	r0, #4
 80022de:	f008 fc4d 	bl	800ab7c <osMessageQueueNew>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <MX_FREERTOS_Init+0x268>)
 80022e6:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringePermission */
  QueueSyringePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueSyringePermission_attributes);
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <MX_FREERTOS_Init+0x26c>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	2002      	movs	r0, #2
 80022ee:	f008 fc45 	bl	800ab7c <osMessageQueueNew>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <MX_FREERTOS_Init+0x270>)
 80022f6:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedlePermission */
  QueueNeedlePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueNeedlePermission_attributes);
 80022f8:	4a4c      	ldr	r2, [pc, #304]	; (800242c <MX_FREERTOS_Init+0x274>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	2002      	movs	r0, #2
 80022fe:	f008 fc3d 	bl	800ab7c <osMessageQueueNew>
 8002302:	4603      	mov	r3, r0
 8002304:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <MX_FREERTOS_Init+0x278>)
 8002306:	6013      	str	r3, [r2, #0]

  /* creation of QueueCommunicationPermission */
  QueueCommunicationPermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueCommunicationPermission_attributes);
 8002308:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <MX_FREERTOS_Init+0x27c>)
 800230a:	2101      	movs	r1, #1
 800230c:	2002      	movs	r0, #2
 800230e:	f008 fc35 	bl	800ab7c <osMessageQueueNew>
 8002312:	4603      	mov	r3, r0
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <MX_FREERTOS_Init+0x280>)
 8002316:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTast */
  HeartBeatTastHandle = osThreadNew(StartHeartBeatTast, NULL, &HeartBeatTast_attributes);
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <MX_FREERTOS_Init+0x284>)
 800231a:	2100      	movs	r1, #0
 800231c:	4848      	ldr	r0, [pc, #288]	; (8002440 <MX_FREERTOS_Init+0x288>)
 800231e:	f007 ffdd 	bl	800a2dc <osThreadNew>
 8002322:	4603      	mov	r3, r0
 8002324:	4a47      	ldr	r2, [pc, #284]	; (8002444 <MX_FREERTOS_Init+0x28c>)
 8002326:	6013      	str	r3, [r2, #0]

  /* creation of SyringeControlT */
  SyringeControlTHandle = osThreadNew(StartSyringeControlTask, NULL, &SyringeControlT_attributes);
 8002328:	4a47      	ldr	r2, [pc, #284]	; (8002448 <MX_FREERTOS_Init+0x290>)
 800232a:	2100      	movs	r1, #0
 800232c:	4847      	ldr	r0, [pc, #284]	; (800244c <MX_FREERTOS_Init+0x294>)
 800232e:	f007 ffd5 	bl	800a2dc <osThreadNew>
 8002332:	4603      	mov	r3, r0
 8002334:	4a46      	ldr	r2, [pc, #280]	; (8002450 <MX_FREERTOS_Init+0x298>)
 8002336:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8002338:	4a46      	ldr	r2, [pc, #280]	; (8002454 <MX_FREERTOS_Init+0x29c>)
 800233a:	2100      	movs	r1, #0
 800233c:	4846      	ldr	r0, [pc, #280]	; (8002458 <MX_FREERTOS_Init+0x2a0>)
 800233e:	f007 ffcd 	bl	800a2dc <osThreadNew>
 8002342:	4603      	mov	r3, r0
 8002344:	4a45      	ldr	r2, [pc, #276]	; (800245c <MX_FREERTOS_Init+0x2a4>)
 8002346:	6013      	str	r3, [r2, #0]

  /* creation of NeedleControlTa */
  NeedleControlTaHandle = osThreadNew(StartNeedleControlTask, NULL, &NeedleControlTa_attributes);
 8002348:	4a45      	ldr	r2, [pc, #276]	; (8002460 <MX_FREERTOS_Init+0x2a8>)
 800234a:	2100      	movs	r1, #0
 800234c:	4845      	ldr	r0, [pc, #276]	; (8002464 <MX_FREERTOS_Init+0x2ac>)
 800234e:	f007 ffc5 	bl	800a2dc <osThreadNew>
 8002352:	4603      	mov	r3, r0
 8002354:	4a44      	ldr	r2, [pc, #272]	; (8002468 <MX_FREERTOS_Init+0x2b0>)
 8002356:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);
 8002358:	4a44      	ldr	r2, [pc, #272]	; (800246c <MX_FREERTOS_Init+0x2b4>)
 800235a:	2100      	movs	r1, #0
 800235c:	4844      	ldr	r0, [pc, #272]	; (8002470 <MX_FREERTOS_Init+0x2b8>)
 800235e:	f007 ffbd 	bl	800a2dc <osThreadNew>
 8002362:	4603      	mov	r3, r0
 8002364:	4a43      	ldr	r2, [pc, #268]	; (8002474 <MX_FREERTOS_Init+0x2bc>)
 8002366:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureTask */
  TemperatureTaskHandle = osThreadNew(StartTemperatureTask, NULL, &TemperatureTask_attributes);
 8002368:	4a43      	ldr	r2, [pc, #268]	; (8002478 <MX_FREERTOS_Init+0x2c0>)
 800236a:	2100      	movs	r1, #0
 800236c:	4843      	ldr	r0, [pc, #268]	; (800247c <MX_FREERTOS_Init+0x2c4>)
 800236e:	f007 ffb5 	bl	800a2dc <osThreadNew>
 8002372:	4603      	mov	r3, r0
 8002374:	4a42      	ldr	r2, [pc, #264]	; (8002480 <MX_FREERTOS_Init+0x2c8>)
 8002376:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	0800eec8 	.word	0x0800eec8
 8002380:	20000514 	.word	0x20000514
 8002384:	0800eed8 	.word	0x0800eed8
 8002388:	20000518 	.word	0x20000518
 800238c:	0800eee8 	.word	0x0800eee8
 8002390:	2000051c 	.word	0x2000051c
 8002394:	0800eef8 	.word	0x0800eef8
 8002398:	20000520 	.word	0x20000520
 800239c:	0800ef08 	.word	0x0800ef08
 80023a0:	20000524 	.word	0x20000524
 80023a4:	0800ef18 	.word	0x0800ef18
 80023a8:	20000528 	.word	0x20000528
 80023ac:	0800ef28 	.word	0x0800ef28
 80023b0:	2000052c 	.word	0x2000052c
 80023b4:	0800ef38 	.word	0x0800ef38
 80023b8:	20000530 	.word	0x20000530
 80023bc:	0800ee88 	.word	0x0800ee88
 80023c0:	08002b29 	.word	0x08002b29
 80023c4:	20000504 	.word	0x20000504
 80023c8:	0800ee98 	.word	0x0800ee98
 80023cc:	08002b49 	.word	0x08002b49
 80023d0:	20000508 	.word	0x20000508
 80023d4:	0800eea8 	.word	0x0800eea8
 80023d8:	08002b69 	.word	0x08002b69
 80023dc:	2000050c 	.word	0x2000050c
 80023e0:	0800eeb8 	.word	0x0800eeb8
 80023e4:	08002b89 	.word	0x08002b89
 80023e8:	20000510 	.word	0x20000510
 80023ec:	0800ed98 	.word	0x0800ed98
 80023f0:	200004dc 	.word	0x200004dc
 80023f4:	0800edb0 	.word	0x0800edb0
 80023f8:	200004e0 	.word	0x200004e0
 80023fc:	0800edc8 	.word	0x0800edc8
 8002400:	200004e4 	.word	0x200004e4
 8002404:	0800ede0 	.word	0x0800ede0
 8002408:	200004e8 	.word	0x200004e8
 800240c:	0800edf8 	.word	0x0800edf8
 8002410:	200004ec 	.word	0x200004ec
 8002414:	0800ee10 	.word	0x0800ee10
 8002418:	200004f0 	.word	0x200004f0
 800241c:	0800ee28 	.word	0x0800ee28
 8002420:	200004f4 	.word	0x200004f4
 8002424:	0800ee40 	.word	0x0800ee40
 8002428:	200004f8 	.word	0x200004f8
 800242c:	0800ee58 	.word	0x0800ee58
 8002430:	200004fc 	.word	0x200004fc
 8002434:	0800ee70 	.word	0x0800ee70
 8002438:	20000500 	.word	0x20000500
 800243c:	0800ecc0 	.word	0x0800ecc0
 8002440:	08002485 	.word	0x08002485
 8002444:	200004c4 	.word	0x200004c4
 8002448:	0800ece4 	.word	0x0800ece4
 800244c:	080024bd 	.word	0x080024bd
 8002450:	200004c8 	.word	0x200004c8
 8002454:	0800ed08 	.word	0x0800ed08
 8002458:	08002665 	.word	0x08002665
 800245c:	200004cc 	.word	0x200004cc
 8002460:	0800ed2c 	.word	0x0800ed2c
 8002464:	08002835 	.word	0x08002835
 8002468:	200004d0 	.word	0x200004d0
 800246c:	0800ed50 	.word	0x0800ed50
 8002470:	0800295d 	.word	0x0800295d
 8002474:	200004d4 	.word	0x200004d4
 8002478:	0800ed74 	.word	0x0800ed74
 800247c:	08002a4d 	.word	0x08002a4d
 8002480:	200004d8 	.word	0x200004d8

08002484 <StartHeartBeatTast>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTast */
void StartHeartBeatTast(void *argument)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTast */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800248c:	2101      	movs	r1, #1
 800248e:	4809      	ldr	r0, [pc, #36]	; (80024b4 <StartHeartBeatTast+0x30>)
 8002490:	f003 faf5 	bl	8005a7e <HAL_GPIO_TogglePin>
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8002494:	f007 ff18 	bl	800a2c8 <osKernelGetTickFreq>
 8002498:	4603      	mov	r3, r0
 800249a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <StartHeartBeatTast+0x34>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	4618      	mov	r0, r3
 80024ac:	f007 ffbc 	bl	800a428 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80024b0:	e7ec      	b.n	800248c <StartHeartBeatTast+0x8>
 80024b2:	bf00      	nop
 80024b4:	40020400 	.word	0x40020400
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <StartSyringeControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSyringeControlTask */
void StartSyringeControlTask(void *argument)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b09f      	sub	sp, #124	; 0x7c
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSyringeControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Syringe = {	.NAME = "SYRINGE",
 80024c4:	4a5b      	ldr	r2, [pc, #364]	; (8002634 <StartSyringeControlTask+0x178>)
 80024c6:	f107 0320 	add.w	r3, r7, #32
 80024ca:	4611      	mov	r1, r2
 80024cc:	2258      	movs	r2, #88	; 0x58
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00b ff84 	bl	800e3dc <memcpy>
	// Queue info
	//
	Syringe_info _Syringe_info;
	uint16_t syringe_setpoint_change;
	uint8_t _Permission;
	_Permission = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	737b      	strb	r3, [r7, #13]
	//
	// Initialization
	//
	Init_A4988(&Syringe); // Drive initialization
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fe2d 	bl	800113c <Init_A4988>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80024e2:	4b55      	ldr	r3, [pc, #340]	; (8002638 <StartSyringeControlTask+0x17c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ea:	4618      	mov	r0, r3
 80024ec:	f008 f93e 	bl	800a76c <osMutexAcquire>
	VL6180X_Init(&Syringe_sensor, &hi2c4); // Sensor initialization
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4951      	ldr	r1, [pc, #324]	; (800263c <StartSyringeControlTask+0x180>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fc79 	bl	8001dee <VL6180X_Init>
	configureDefault_VL6180X(&Syringe_sensor); // Sensor initialization
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe05 	bl	8002110 <configureDefault_VL6180X>
	osMutexRelease(MutexI2C4Handle);
 8002506:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <StartSyringeControlTask+0x17c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f008 f98c 	bl	800a828 <osMutexRelease>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <StartSyringeControlTask+0x17c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	4618      	mov	r0, r3
 800251a:	f008 f927 	bl	800a76c <osMutexAcquire>
	_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Initial measurement
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fe34 	bl	8002190 <readRangeSingleMillimeters_VL6180X>
 8002528:	4603      	mov	r3, r0
 800252a:	823b      	strh	r3, [r7, #16]
	_Syringe_info.Set_distance_syringe = _Syringe_info.MEASURE_Syringe;
 800252c:	8a3b      	ldrh	r3, [r7, #16]
 800252e:	827b      	strh	r3, [r7, #18]
	osMutexRelease(MutexI2C4Handle);
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <StartSyringeControlTask+0x17c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f008 f977 	bl	800a828 <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(SyringeInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <StartSyringeControlTask+0x184>)
 800253c:	681c      	ldr	r4, [r3, #0]
 800253e:	f007 fec3 	bl	800a2c8 <osKernelGetTickFreq>
 8002542:	4603      	mov	r3, r0
 8002544:	f240 2226 	movw	r2, #550	; 0x226
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <StartSyringeControlTask+0x188>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	4619      	mov	r1, r3
 8002556:	4620      	mov	r0, r4
 8002558:	f008 f82e 	bl	800a5b8 <osTimerStart>
	osTimerStart(SyringeInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 800255c:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <StartSyringeControlTask+0x18c>)
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	f007 feb2 	bl	800a2c8 <osKernelGetTickFreq>
 8002564:	4603      	mov	r3, r0
 8002566:	f240 2226 	movw	r2, #550	; 0x226
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	4a35      	ldr	r2, [pc, #212]	; (8002644 <StartSyringeControlTask+0x188>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	4619      	mov	r1, r3
 8002578:	4620      	mov	r0, r4
 800257a:	f008 f81d 	bl	800a5b8 <osTimerStart>
  {
	  //
	  // Get data
	  //
	  // Get SetPoint
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
 800257e:	4b33      	ldr	r3, [pc, #204]	; (800264c <StartSyringeControlTask+0x190>)
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f107 010e 	add.w	r1, r7, #14
 8002586:	2300      	movs	r3, #0
 8002588:	2200      	movs	r2, #0
 800258a:	f008 fbf1 	bl	800ad70 <osMessageQueueGet>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <StartSyringeControlTask+0xdc>
		  _Syringe_info.Set_distance_syringe = syringe_setpoint_change;
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	827b      	strh	r3, [r7, #18]
	  }
	  // Get permission
	  osMessageQueueGet(QueueSyringePermissionHandle, &_Permission, NULL, 0);
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <StartSyringeControlTask+0x194>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f107 010d 	add.w	r1, r7, #13
 80025a0:	2300      	movs	r3, #0
 80025a2:	2200      	movs	r2, #0
 80025a4:	f008 fbe4 	bl	800ad70 <osMessageQueueGet>

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <StartSyringeControlTask+0x17c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f008 f8db 	bl	800a76c <osMutexAcquire>
	  _Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fde8 	bl	8002190 <readRangeSingleMillimeters_VL6180X>
 80025c0:	4603      	mov	r3, r0
 80025c2:	823b      	strh	r3, [r7, #16]
	  osMutexRelease(MutexI2C4Handle);
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <StartSyringeControlTask+0x17c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f008 f92d 	bl	800a828 <osMutexRelease>

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(SyringeInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <StartSyringeControlTask+0x198>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f008 fa13 	bl	800aa00 <osSemaphoreAcquire>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d108      	bne.n	80025f2 <StartSyringeControlTask+0x136>
		  osMessageQueuePut(QueueSyringeInfoCommunicationHandle, &_Syringe_info, 0, osWaitForever);
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <StartSyringeControlTask+0x19c>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	f107 0110 	add.w	r1, r7, #16
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	2200      	movs	r2, #0
 80025ee:	f008 fb4b 	bl	800ac88 <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(SyringeInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <StartSyringeControlTask+0x1a0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f008 fa01 	bl	800aa00 <osSemaphoreAcquire>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <StartSyringeControlTask+0x15a>
	  		osMessageQueuePut(QueueSyringeInfoOLEDHandle, &_Syringe_info, 0, osWaitForever);
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <StartSyringeControlTask+0x1a4>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	f107 0110 	add.w	r1, r7, #16
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	2200      	movs	r2, #0
 8002612:	f008 fb39 	bl	800ac88 <osMessageQueuePut>
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 8002616:	f007 fe57 	bl	800a2c8 <osKernelGetTickFreq>
 800261a:	4603      	mov	r3, r0
 800261c:	22c8      	movs	r2, #200	; 0xc8
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <StartSyringeControlTask+0x188>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	4618      	mov	r0, r3
 800262c:	f007 fefc 	bl	800a428 <osDelay>
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
 8002630:	e7a5      	b.n	800257e <StartSyringeControlTask+0xc2>
 8002632:	bf00      	nop
 8002634:	0800e974 	.word	0x0800e974
 8002638:	2000051c 	.word	0x2000051c
 800263c:	20000580 	.word	0x20000580
 8002640:	20000504 	.word	0x20000504
 8002644:	10624dd3 	.word	0x10624dd3
 8002648:	2000050c 	.word	0x2000050c
 800264c:	200004f4 	.word	0x200004f4
 8002650:	200004f8 	.word	0x200004f8
 8002654:	2000052c 	.word	0x2000052c
 8002658:	200004e0 	.word	0x200004e0
 800265c:	20000520 	.word	0x20000520
 8002660:	200004dc 	.word	0x200004dc

08002664 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08e      	sub	sp, #56	; 0x38
 8002668:	af02      	add	r7, sp, #8
 800266a:	6078      	str	r0, [r7, #4]
	// Info data initialization
	//
	char Message_OLED[32]; // Message buffer
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	_Needle_info.Set_distance_needle = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	817b      	strh	r3, [r7, #10]
	_Needle_info.MEASURE_Needle = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	813b      	strh	r3, [r7, #8]
	_Syringe_info.Set_distance_syringe = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	81fb      	strh	r3, [r7, #14]
	_Syringe_info.MEASURE_Syringe = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	81bb      	strh	r3, [r7, #12]

	//
	// Screen initialization
	//
	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 800267c:	4b63      	ldr	r3, [pc, #396]	; (800280c <StartOLEDTask+0x1a8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	4618      	mov	r0, r3
 8002686:	f008 f871 	bl	800a76c <osMutexAcquire>
	SSD1306_Init(&hi2c4);
 800268a:	4861      	ldr	r0, [pc, #388]	; (8002810 <StartOLEDTask+0x1ac>)
 800268c:	f7ff faba 	bl	8001c04 <SSD1306_Init>
	osMutexRelease(MutexI2C4Handle);
 8002690:	4b5e      	ldr	r3, [pc, #376]	; (800280c <StartOLEDTask+0x1a8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f008 f8c7 	bl	800a828 <osMutexRelease>

	GFX_SetFont(font_8x5);
 800269a:	485e      	ldr	r0, [pc, #376]	; (8002814 <StartOLEDTask+0x1b0>)
 800269c:	f7fe ff52 	bl	8001544 <GFX_SetFont>
	GFX_SetFontSize(1);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7fe ff5f 	bl	8001564 <GFX_SetFontSize>

	SSD1306_Clear(BLACK);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff fa70 	bl	8001b8c <SSD1306_Clear>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80026ac:	4b57      	ldr	r3, [pc, #348]	; (800280c <StartOLEDTask+0x1a8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	4618      	mov	r0, r3
 80026b6:	f008 f859 	bl	800a76c <osMutexAcquire>
	SSD1306_Display();
 80026ba:	f7ff fa85 	bl	8001bc8 <SSD1306_Display>
	osMutexRelease(MutexI2C4Handle);
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <StartOLEDTask+0x1a8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f008 f8b0 	bl	800a828 <osMutexRelease>
  {
	  //
	  // Get data from queues
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <StartOLEDTask+0x1b4>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f107 010c 	add.w	r1, r7, #12
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	f008 fb4c 	bl	800ad70 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoOLEDHandle, &_Needle_info, NULL, 0);
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <StartOLEDTask+0x1b8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	f107 0108 	add.w	r1, r7, #8
 80026e0:	2300      	movs	r3, #0
 80026e2:	2200      	movs	r2, #0
 80026e4:	f008 fb44 	bl	800ad70 <osMessageQueueGet>

	  //
	  // Make message
	  //
	  SSD1306_Clear(BLACK);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff fa4f 	bl	8001b8c <SSD1306_Clear>
	  sprintf(Message_OLED, "Needle position");
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	494b      	ldr	r1, [pc, #300]	; (8002820 <StartOLEDTask+0x1bc>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fa7b 	bl	8004bf0 <sprintf_>
	  GFX_DrawString(20, 0, Message_OLED, WHITE, 0);
 80026fa:	f107 0210 	add.w	r2, r7, #16
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2301      	movs	r3, #1
 8002704:	2100      	movs	r1, #0
 8002706:	2014      	movs	r0, #20
 8002708:	f7fe fffa 	bl	8001700 <GFX_DrawString>
	  GFX_DrawLine(0, 9, 128, 9, WHITE);
 800270c:	2301      	movs	r3, #1
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2309      	movs	r3, #9
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	2109      	movs	r1, #9
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff f90b 	bl	8001932 <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Needle_info.Set_distance_needle); //Set_distance_needle
 800271c:	897b      	ldrh	r3, [r7, #10]
 800271e:	461a      	mov	r2, r3
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	493f      	ldr	r1, [pc, #252]	; (8002824 <StartOLEDTask+0x1c0>)
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fa62 	bl	8004bf0 <sprintf_>
	  GFX_DrawString(0, 12, Message_OLED, WHITE, 0);
 800272c:	f107 0210 	add.w	r2, r7, #16
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	210c      	movs	r1, #12
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe ffe1 	bl	8001700 <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Needle_info.MEASURE_Needle); //MEASURE_Needle
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	461a      	mov	r2, r3
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	4938      	ldr	r1, [pc, #224]	; (8002828 <StartOLEDTask+0x1c4>)
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fa51 	bl	8004bf0 <sprintf_>
	  GFX_DrawString(0, 22, Message_OLED, WHITE, 0);
 800274e:	f107 0210 	add.w	r2, r7, #16
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2301      	movs	r3, #1
 8002758:	2116      	movs	r1, #22
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe ffd0 	bl	8001700 <GFX_DrawString>
	  sprintf(Message_OLED, "Syringe position");
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4931      	ldr	r1, [pc, #196]	; (800282c <StartOLEDTask+0x1c8>)
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fa42 	bl	8004bf0 <sprintf_>
	  GFX_DrawString(15, 32, Message_OLED, WHITE, 0);
 800276c:	f107 0210 	add.w	r2, r7, #16
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2301      	movs	r3, #1
 8002776:	2120      	movs	r1, #32
 8002778:	200f      	movs	r0, #15
 800277a:	f7fe ffc1 	bl	8001700 <GFX_DrawString>
	  GFX_DrawLine(0, 41, 128, 41, WHITE);
 800277e:	2301      	movs	r3, #1
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2329      	movs	r3, #41	; 0x29
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	2129      	movs	r1, #41	; 0x29
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff f8d2 	bl	8001932 <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Syringe_info.Set_distance_syringe); //Set_distance_syringe
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	461a      	mov	r2, r3
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4923      	ldr	r1, [pc, #140]	; (8002824 <StartOLEDTask+0x1c0>)
 8002798:	4618      	mov	r0, r3
 800279a:	f002 fa29 	bl	8004bf0 <sprintf_>
	  GFX_DrawString(0, 44, Message_OLED, WHITE, 0);
 800279e:	f107 0210 	add.w	r2, r7, #16
 80027a2:	2300      	movs	r3, #0
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2301      	movs	r3, #1
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe ffa8 	bl	8001700 <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Syringe_info.MEASURE_Syringe); //MEASURE_Syringe
 80027b0:	89bb      	ldrh	r3, [r7, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	491b      	ldr	r1, [pc, #108]	; (8002828 <StartOLEDTask+0x1c4>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 fa18 	bl	8004bf0 <sprintf_>
	  GFX_DrawString(0, 54, Message_OLED, WHITE, 0);
 80027c0:	f107 0210 	add.w	r2, r7, #16
 80027c4:	2300      	movs	r3, #0
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2301      	movs	r3, #1
 80027ca:	2136      	movs	r1, #54	; 0x36
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7fe ff97 	bl	8001700 <GFX_DrawString>

	  //
	  // Display
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <StartOLEDTask+0x1a8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295
 80027da:	4618      	mov	r0, r3
 80027dc:	f007 ffc6 	bl	800a76c <osMutexAcquire>
	  SSD1306_Display();
 80027e0:	f7ff f9f2 	bl	8001bc8 <SSD1306_Display>
	  osMutexRelease(MutexI2C4Handle);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <StartOLEDTask+0x1a8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f008 f81d 	bl	800a828 <osMutexRelease>

	  //
	  // Time interval
	  //
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
 80027ee:	f007 fd6b 	bl	800a2c8 <osKernelGetTickFreq>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <StartOLEDTask+0x1cc>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	4618      	mov	r0, r3
 8002806:	f007 fe0f 	bl	800a428 <osDelay>
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 800280a:	e75d      	b.n	80026c8 <StartOLEDTask+0x64>
 800280c:	2000051c 	.word	0x2000051c
 8002810:	20000580 	.word	0x20000580
 8002814:	0800eae0 	.word	0x0800eae0
 8002818:	200004dc 	.word	0x200004dc
 800281c:	200004e4 	.word	0x200004e4
 8002820:	0800e9cc 	.word	0x0800e9cc
 8002824:	0800e9dc 	.word	0x0800e9dc
 8002828:	0800e9e8 	.word	0x0800e9e8
 800282c:	0800e9f8 	.word	0x0800e9f8
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <StartNeedleControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNeedleControlTask */
void StartNeedleControlTask(void *argument)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b09b      	sub	sp, #108	; 0x6c
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNeedleControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Needle = {	.NAME = "NEEDLE",
 800283c:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <StartNeedleControlTask+0x100>)
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4611      	mov	r1, r2
 8002844:	2258      	movs	r2, #88	; 0x58
 8002846:	4618      	mov	r0, r3
 8002848:	f00b fdc8 	bl	800e3dc <memcpy>
	// Queue info
	//
	Needle_info _Needle_info;
	uint16_t needle_setpoint_change;
	uint8_t _Permission;
	_Needle_info.MEASURE_Needle = 10;
 800284c:	230a      	movs	r3, #10
 800284e:	81bb      	strh	r3, [r7, #12]
	_Needle_info.Set_distance_needle = 20;
 8002850:	2314      	movs	r3, #20
 8002852:	81fb      	strh	r3, [r7, #14]
	_Permission = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	727b      	strb	r3, [r7, #9]
	//
	// Initialization
	//
	Init_A4988(&Needle); // Drive initialization
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fc6d 	bl	800113c <Init_A4988>
//	osMutexRelease(MutexI2C2Handle);

	//
	// Timers
	//
	osTimerStart(NeedleInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 8002862:	4b35      	ldr	r3, [pc, #212]	; (8002938 <StartNeedleControlTask+0x104>)
 8002864:	681c      	ldr	r4, [r3, #0]
 8002866:	f007 fd2f 	bl	800a2c8 <osKernelGetTickFreq>
 800286a:	4603      	mov	r3, r0
 800286c:	f240 2226 	movw	r2, #550	; 0x226
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <StartNeedleControlTask+0x108>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	4619      	mov	r1, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f007 fe9a 	bl	800a5b8 <osTimerStart>
	osTimerStart(NeedleInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <StartNeedleControlTask+0x10c>)
 8002886:	681c      	ldr	r4, [r3, #0]
 8002888:	f007 fd1e 	bl	800a2c8 <osKernelGetTickFreq>
 800288c:	4603      	mov	r3, r0
 800288e:	f240 2226 	movw	r2, #550	; 0x226
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <StartNeedleControlTask+0x108>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	4619      	mov	r1, r3
 80028a0:	4620      	mov	r0, r4
 80028a2:	f007 fe89 	bl	800a5b8 <osTimerStart>
  {
	  //
	  // Get Data
	  //
	  // Get set point
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <StartNeedleControlTask+0x110>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f107 010a 	add.w	r1, r7, #10
 80028ae:	2300      	movs	r3, #0
 80028b0:	2200      	movs	r2, #0
 80028b2:	f008 fa5d 	bl	800ad70 <osMessageQueueGet>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <StartNeedleControlTask+0x8c>
		  _Needle_info.Set_distance_needle = needle_setpoint_change;
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	81fb      	strh	r3, [r7, #14]
	  }
	  // Get permission
	  osMessageQueueGet(QueueNeedlePermissionHandle, &_Permission, NULL, 0);
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <StartNeedleControlTask+0x114>)
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	f107 0109 	add.w	r1, r7, #9
 80028c8:	2300      	movs	r3, #0
 80028ca:	2200      	movs	r2, #0
 80028cc:	f008 fa50 	bl	800ad70 <osMessageQueueGet>
//	  osMutexRelease(MutexI2C2Handle);

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(NeedleInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <StartNeedleControlTask+0x118>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f008 f892 	bl	800aa00 <osSemaphoreAcquire>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <StartNeedleControlTask+0xc0>
		  osMessageQueuePut(QueueNeedleInfoCommunicationHandle, &_Needle_info, 0, osWaitForever);
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <StartNeedleControlTask+0x11c>)
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	f107 010c 	add.w	r1, r7, #12
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	2200      	movs	r2, #0
 80028f0:	f008 f9ca 	bl	800ac88 <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(NeedleInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <StartNeedleControlTask+0x120>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f008 f880 	bl	800aa00 <osSemaphoreAcquire>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d108      	bne.n	8002918 <StartNeedleControlTask+0xe4>
		  osMessageQueuePut(QueueNeedleInfoOLEDHandle, &_Needle_info, 0, osWaitForever);
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <StartNeedleControlTask+0x124>)
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	2200      	movs	r2, #0
 8002914:	f008 f9b8 	bl	800ac88 <osMessageQueuePut>
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 8002918:	f007 fcd6 	bl	800a2c8 <osKernelGetTickFreq>
 800291c:	4603      	mov	r3, r0
 800291e:	22c8      	movs	r2, #200	; 0xc8
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <StartNeedleControlTask+0x108>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	4618      	mov	r0, r3
 800292e:	f007 fd7b 	bl	800a428 <osDelay>
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
 8002932:	e7b8      	b.n	80028a6 <StartNeedleControlTask+0x72>
 8002934:	0800ea0c 	.word	0x0800ea0c
 8002938:	20000508 	.word	0x20000508
 800293c:	10624dd3 	.word	0x10624dd3
 8002940:	20000510 	.word	0x20000510
 8002944:	200004f0 	.word	0x200004f0
 8002948:	200004fc 	.word	0x200004fc
 800294c:	20000530 	.word	0x20000530
 8002950:	200004e8 	.word	0x200004e8
 8002954:	20000524 	.word	0x20000524
 8002958:	200004e4 	.word	0x200004e4

0800295c <StartCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
 800295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002960:	b08e      	sub	sp, #56	; 0x38
 8002962:	af06      	add	r7, sp, #24
 8002964:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicationTask */
	//
	//Receive data
	//
	HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002966:	2204      	movs	r2, #4
 8002968:	4930      	ldr	r1, [pc, #192]	; (8002a2c <StartCommunicationTask+0xd0>)
 800296a:	4831      	ldr	r0, [pc, #196]	; (8002a30 <StartCommunicationTask+0xd4>)
 800296c:	f006 fa3b 	bl	8008de6 <HAL_UART_Receive_IT>
	//
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	Temperature_info _Temperature_info;
	uint8_t _Permission;
	_Needle_info.Set_distance_needle = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	837b      	strh	r3, [r7, #26]
	_Needle_info.MEASURE_Needle = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	833b      	strh	r3, [r7, #24]
	_Syringe_info.Set_distance_syringe = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	83fb      	strh	r3, [r7, #30]
	_Syringe_info.MEASURE_Syringe = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	83bb      	strh	r3, [r7, #28]
	_Temperature_info.Fan_info = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	753b      	strb	r3, [r7, #20]
	_Temperature_info.Temperature = 0;
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
	_Permission = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  {
	  //
	  // Get data
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <StartCommunicationTask+0xd8>)
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	f107 011c 	add.w	r1, r7, #28
 8002996:	2300      	movs	r3, #0
 8002998:	2200      	movs	r2, #0
 800299a:	f008 f9e9 	bl	800ad70 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoCommunicationHandle, &_Needle_info, NULL, 0);
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <StartCommunicationTask+0xdc>)
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f107 0118 	add.w	r1, r7, #24
 80029a6:	2300      	movs	r3, #0
 80029a8:	2200      	movs	r2, #0
 80029aa:	f008 f9e1 	bl	800ad70 <osMessageQueueGet>
	  // Get data from Temperature info queue
	  osMessageQueueGet(QueueTemperatureCommunicationHandle, &_Temperature_info, NULL, 0);
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <StartCommunicationTask+0xe0>)
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	f107 0110 	add.w	r1, r7, #16
 80029b6:	2300      	movs	r3, #0
 80029b8:	2200      	movs	r2, #0
 80029ba:	f008 f9d9 	bl	800ad70 <osMessageQueueGet>
	  // Get permission
	  osMessageQueueGet(QueueCommunicationPermissionHandle, &_Permission, NULL, 0);
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <StartCommunicationTask+0xe4>)
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	f107 010f 	add.w	r1, r7, #15
 80029c6:	2300      	movs	r3, #0
 80029c8:	2200      	movs	r2, #0
 80029ca:	f008 f9d1 	bl	800ad70 <osMessageQueueGet>

	  //
	  // Send message
	  //
	  if(_Permission == 1){
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d11b      	bne.n	8002a0c <StartCommunicationTask+0xb0>
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80029d4:	8b3b      	ldrh	r3, [r7, #24]
 80029d6:	461d      	mov	r5, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80029d8:	8bbb      	ldrh	r3, [r7, #28]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80029da:	461e      	mov	r6, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80029dc:	8b7b      	ldrh	r3, [r7, #26]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80029de:	4698      	mov	r8, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80029e0:	8bfb      	ldrh	r3, [r7, #30]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80029e2:	461c      	mov	r4, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 80029e4:	693b      	ldr	r3, [r7, #16]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fd76 	bl	80004d8 <__aeabi_f2d>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
				  _Temperature_info.Fan_info,0);
 80029f0:	7d39      	ldrb	r1, [r7, #20]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80029f2:	4608      	mov	r0, r1
 80029f4:	2100      	movs	r1, #0
 80029f6:	9105      	str	r1, [sp, #20]
 80029f8:	9004      	str	r0, [sp, #16]
 80029fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029fe:	9400      	str	r4, [sp, #0]
 8002a00:	4643      	mov	r3, r8
 8002a02:	4632      	mov	r2, r6
 8002a04:	4629      	mov	r1, r5
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <StartCommunicationTask+0xe8>)
 8002a08:	f002 f8d6 	bl	8004bb8 <printf_>
	  }

	  //
	  // Time interval
	  //
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
 8002a0c:	f007 fc5c 	bl	800a2c8 <osKernelGetTickFreq>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <StartCommunicationTask+0xec>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	4618      	mov	r0, r3
 8002a24:	f007 fd00 	bl	800a428 <osDelay>
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 8002a28:	e7b1      	b.n	800298e <StartCommunicationTask+0x32>
 8002a2a:	bf00      	nop
 8002a2c:	200004c0 	.word	0x200004c0
 8002a30:	20000748 	.word	0x20000748
 8002a34:	200004e0 	.word	0x200004e0
 8002a38:	200004e8 	.word	0x200004e8
 8002a3c:	200004ec 	.word	0x200004ec
 8002a40:	20000500 	.word	0x20000500
 8002a44:	0800ea64 	.word	0x0800ea64
 8002a48:	10624dd3 	.word	0x10624dd3

08002a4c <StartTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperatureTask */
void StartTemperatureTask(void *argument)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperatureTask */
	//
	// Info data initialization
	//
	Temperature_info _Temperature_info;
	_Temperature_info.Fan_info = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	733b      	strb	r3, [r7, #12]
	_Temperature_info.Temperature = 10;
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <StartTemperatureTask+0xc8>)
 8002a5a:	60bb      	str	r3, [r7, #8]

	//
	// Initialize the sensor
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <StartTemperatureTask+0xcc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f04f 31ff 	mov.w	r1, #4294967295
 8002a64:	4618      	mov	r0, r3
 8002a66:	f007 fe81 	bl	800a76c <osMutexAcquire>
	BMP280_Init(&hi2c2, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	2101      	movs	r1, #1
 8002a70:	482a      	ldr	r0, [pc, #168]	; (8002b1c <StartTemperatureTask+0xd0>)
 8002a72:	f7fe fc1d 	bl	80012b0 <BMP280_Init>
	osMutexRelease(MutexI2C2Handle);
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <StartTemperatureTask+0xcc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 fed4 	bl	800a828 <osMutexRelease>

	//
	// Initial measurement
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <StartTemperatureTask+0xcc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f007 fe6f 	bl	800a76c <osMutexAcquire>
	_Temperature_info.Temperature = BMP280_ReadTemperature();
 8002a8e:	f7fe fccd 	bl	800142c <BMP280_ReadTemperature>
 8002a92:	eef0 7a40 	vmov.f32	s15, s0
 8002a96:	edc7 7a02 	vstr	s15, [r7, #8]
	osMutexRelease(MutexI2C2Handle);
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <StartTemperatureTask+0xcc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f007 fec2 	bl	800a828 <osMutexRelease>
  for(;;)
  {
	  //
	  // Measurement
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <StartTemperatureTask+0xcc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	4618      	mov	r0, r3
 8002aae:	f007 fe5d 	bl	800a76c <osMutexAcquire>
	  _Temperature_info.Temperature = BMP280_ReadTemperature();
 8002ab2:	f7fe fcbb 	bl	800142c <BMP280_ReadTemperature>
 8002ab6:	eef0 7a40 	vmov.f32	s15, s0
 8002aba:	edc7 7a02 	vstr	s15, [r7, #8]
	  osMutexRelease(MutexI2C2Handle);
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <StartTemperatureTask+0xcc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f007 feb0 	bl	800a828 <osMutexRelease>

	  //
	  // Fan functioning
	  //
	  if (_Temperature_info.Temperature >= 31.0) {
 8002ac8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002acc:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	db02      	blt.n	8002ae0 <StartTemperatureTask+0x94>
		//TODO Turn on fan
		  _Temperature_info.Fan_info = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	733b      	strb	r3, [r7, #12]
 8002ade:	e001      	b.n	8002ae4 <StartTemperatureTask+0x98>
	  }else{
		  // TODO turn OFF fan
		  _Temperature_info.Fan_info = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	733b      	strb	r3, [r7, #12]
	  }

	  //
	  // Send to queue
	  //
	  osMessageQueuePut(QueueTemperatureCommunicationHandle, &_Temperature_info, 0, osWaitForever);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <StartTemperatureTask+0xd4>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f107 0108 	add.w	r1, r7, #8
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	2200      	movs	r2, #0
 8002af2:	f008 f8c9 	bl	800ac88 <osMessageQueuePut>

	  //
	  // Time interval
	  //
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8002af6:	f007 fbe7 	bl	800a2c8 <osKernelGetTickFreq>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <StartTemperatureTask+0xd8>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f007 fc8b 	bl	800a428 <osDelay>
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002b12:	e7c7      	b.n	8002aa4 <StartTemperatureTask+0x58>
 8002b14:	41200000 	.word	0x41200000
 8002b18:	20000518 	.word	0x20000518
 8002b1c:	20000534 	.word	0x20000534
 8002b20:	200004ec 	.word	0x200004ec
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <SyringeInfoTimerOLEDCallback>:
  /* USER CODE END StartTemperatureTask */
}

/* SyringeInfoTimerOLEDCallback function */
void SyringeInfoTimerOLEDCallback(void *argument)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerOLEDCallback */
	osSemaphoreRelease(SyringeInfoOLEDSemaphoreHandle);
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <SyringeInfoTimerOLEDCallback+0x1c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f007 ffc9 	bl	800aacc <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerOLEDCallback */
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000520 	.word	0x20000520

08002b48 <NeedleInfoTimerOLEDCallback>:

/* NeedleInfoTimerOLEDCallback function */
void NeedleInfoTimerOLEDCallback(void *argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerOLEDCallback */
	osSemaphoreRelease(NeedleInfoOLEDSemaphoreHandle);
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <NeedleInfoTimerOLEDCallback+0x1c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f007 ffb9 	bl	800aacc <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerOLEDCallback */
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000524 	.word	0x20000524

08002b68 <SyringeInfoTimerCommunicationCallback>:

/* SyringeInfoTimerCommunicationCallback function */
void SyringeInfoTimerCommunicationCallback(void *argument)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerCommunicationCallback */
	osSemaphoreRelease(SyringeInfoCommunicationSemaphoreHandle);
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SyringeInfoTimerCommunicationCallback+0x1c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f007 ffa9 	bl	800aacc <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerCommunicationCallback */
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000052c 	.word	0x2000052c

08002b88 <NeedleInfoTimerCommunicationCallback>:

/* NeedleInfoTimerCommunicationCallback function */
void NeedleInfoTimerCommunicationCallback(void *argument)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerCommunicationCallback */
	osSemaphoreRelease(NeedleInfoCommunicationSemaphoreHandle);
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <NeedleInfoTimerCommunicationCallback+0x1c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f007 ff99 	bl	800aacc <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerCommunicationCallback */
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000530 	.word	0x20000530

08002ba8 <_putchar>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <_putchar+0x38>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f007 fdd6 	bl	800a76c <osMutexAcquire>
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 1000);
 8002bc0:	1df9      	adds	r1, r7, #7
 8002bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4806      	ldr	r0, [pc, #24]	; (8002be4 <_putchar+0x3c>)
 8002bca:	f006 f879 	bl	8008cc0 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <_putchar+0x38>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 fe28 	bl	800a828 <osMutexRelease>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000514 	.word	0x20000514
 8002be4:	20000748 	.word	0x20000748

08002be8 <HAL_UART_RxCpltCallback>:
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a50      	ldr	r2, [pc, #320]	; (8002d38 <HAL_UART_RxCpltCallback+0x150>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	f040 809a 	bne.w	8002d30 <HAL_UART_RxCpltCallback+0x148>
	{
		//
		// Start of handling message
		//
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c00:	484e      	ldr	r0, [pc, #312]	; (8002d3c <HAL_UART_RxCpltCallback+0x154>)
 8002c02:	f002 ff3c 	bl	8005a7e <HAL_GPIO_TogglePin>

		//
		// Handling the message
		//
		if(Buffor_Rx_USART[0] == 'N'){ // Needle set position
 8002c06:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8002c0c:	d119      	bne.n	8002c42 <HAL_UART_RxCpltCallback+0x5a>
			uint16_t needle_set_point_change;
			char needle_set_point_change_str[3];
			// Convert to uint16_t
			needle_set_point_change_str[0] = Buffor_Rx_USART[1];
 8002c0e:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	763b      	strb	r3, [r7, #24]
			needle_set_point_change_str[1] = Buffor_Rx_USART[2];
 8002c14:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c16:	789b      	ldrb	r3, [r3, #2]
 8002c18:	767b      	strb	r3, [r7, #25]
			needle_set_point_change_str[2] = Buffor_Rx_USART[3];
 8002c1a:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c1c:	78db      	ldrb	r3, [r3, #3]
 8002c1e:	76bb      	strb	r3, [r7, #26]
			needle_set_point_change =  (uint16_t)atoi(needle_set_point_change_str);
 8002c20:	f107 0318 	add.w	r3, r7, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f00b fba9 	bl	800e37c <atoi>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	83fb      	strh	r3, [r7, #30]
			// Send to queue
			osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 8002c30:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_UART_RxCpltCallback+0x15c>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f107 011e 	add.w	r1, r7, #30
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f008 f824 	bl	800ac88 <osMessageQueuePut>
 8002c40:	e071      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'S') { // Syringe set position
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b53      	cmp	r3, #83	; 0x53
 8002c48:	d119      	bne.n	8002c7e <HAL_UART_RxCpltCallback+0x96>
			uint16_t syringe_set_point_change;
			char syringe_set_point_change_str[3];
			syringe_set_point_change_str[0] = Buffor_Rx_USART[1];
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	743b      	strb	r3, [r7, #16]
			syringe_set_point_change_str[1] = Buffor_Rx_USART[2];
 8002c50:	4b3b      	ldr	r3, [pc, #236]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c52:	789b      	ldrb	r3, [r3, #2]
 8002c54:	747b      	strb	r3, [r7, #17]
			syringe_set_point_change_str[2] = Buffor_Rx_USART[3];
 8002c56:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	74bb      	strb	r3, [r7, #18]
			syringe_set_point_change =  (uint16_t)atoi(syringe_set_point_change_str);
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00b fb8b 	bl	800e37c <atoi>
 8002c66:	4603      	mov	r3, r0
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	82fb      	strh	r3, [r7, #22]
			// Send to queue
			osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002c6c:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_UART_RxCpltCallback+0x160>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	f107 0116 	add.w	r1, r7, #22
 8002c74:	2300      	movs	r3, #0
 8002c76:	2200      	movs	r2, #0
 8002c78:	f008 f806 	bl	800ac88 <osMessageQueuePut>
 8002c7c:	e053      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'T') { // Test connection
 8002c7e:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b54      	cmp	r3, #84	; 0x54
 8002c84:	d103      	bne.n	8002c8e <HAL_UART_RxCpltCallback+0xa6>
			printf("T");
 8002c86:	4831      	ldr	r0, [pc, #196]	; (8002d4c <HAL_UART_RxCpltCallback+0x164>)
 8002c88:	f001 ff96 	bl	8004bb8 <printf_>
 8002c8c:	e04b      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'O') { // Start
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b4f      	cmp	r3, #79	; 0x4f
 8002c94:	d11a      	bne.n	8002ccc <HAL_UART_RxCpltCallback+0xe4>
			uint8_t permission = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_UART_RxCpltCallback+0x168>)
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	f107 010f 	add.w	r1, r7, #15
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f007 ffef 	bl	800ac88 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_UART_RxCpltCallback+0x16c>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	f107 010f 	add.w	r1, r7, #15
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f007 ffe7 	bl	800ac88 <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002cba:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_UART_RxCpltCallback+0x170>)
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	f107 010f 	add.w	r1, r7, #15
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f007 ffdf 	bl	800ac88 <osMessageQueuePut>
 8002cca:	e02c      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'E') { // STOP
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b45      	cmp	r3, #69	; 0x45
 8002cd2:	d11a      	bne.n	8002d0a <HAL_UART_RxCpltCallback+0x122>
			uint8_t permission = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73bb      	strb	r3, [r7, #14]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_UART_RxCpltCallback+0x168>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f107 010e 	add.w	r1, r7, #14
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f007 ffd0 	bl	800ac88 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_UART_RxCpltCallback+0x16c>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f107 010e 	add.w	r1, r7, #14
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f007 ffc8 	bl	800ac88 <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <HAL_UART_RxCpltCallback+0x170>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	f107 010e 	add.w	r1, r7, #14
 8002d00:	2300      	movs	r3, #0
 8002d02:	2200      	movs	r2, #0
 8002d04:	f007 ffc0 	bl	800ac88 <osMessageQueuePut>
 8002d08:	e00d      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'R') {
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b52      	cmp	r3, #82	; 0x52
 8002d10:	d109      	bne.n	8002d26 <HAL_UART_RxCpltCallback+0x13e>
			uint8_t permission = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	737b      	strb	r3, [r7, #13]
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_UART_RxCpltCallback+0x170>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f107 010d 	add.w	r1, r7, #13
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2200      	movs	r2, #0
 8002d22:	f007 ffb1 	bl	800ac88 <osMessageQueuePut>
		}

		//
		// Listening setup
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002d26:	2204      	movs	r2, #4
 8002d28:	4905      	ldr	r1, [pc, #20]	; (8002d40 <HAL_UART_RxCpltCallback+0x158>)
 8002d2a:	480c      	ldr	r0, [pc, #48]	; (8002d5c <HAL_UART_RxCpltCallback+0x174>)
 8002d2c:	f006 f85b 	bl	8008de6 <HAL_UART_Receive_IT>
	}
}
 8002d30:	bf00      	nop
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40004800 	.word	0x40004800
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	200004c0 	.word	0x200004c0
 8002d44:	200004f0 	.word	0x200004f0
 8002d48:	200004f4 	.word	0x200004f4
 8002d4c:	0800eaa4 	.word	0x0800eaa4
 8002d50:	200004fc 	.word	0x200004fc
 8002d54:	200004f8 	.word	0x200004f8
 8002d58:	20000500 	.word	0x20000500
 8002d5c:	20000748 	.word	0x20000748

08002d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d76:	4b79      	ldr	r3, [pc, #484]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8e:	4b73      	ldr	r3, [pc, #460]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a72      	ldr	r2, [pc, #456]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002d94:	f043 0320 	orr.w	r3, r3, #32
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002da6:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a6c      	ldr	r2, [pc, #432]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a66      	ldr	r2, [pc, #408]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a60      	ldr	r2, [pc, #384]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a5a      	ldr	r2, [pc, #360]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002df4:	f043 0310 	orr.w	r3, r3, #16
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e06:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b52      	ldr	r3, [pc, #328]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e1e:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <MX_GPIO_Init+0x1fc>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin, GPIO_PIN_RESET);
 8002e36:	2200      	movs	r2, #0
 8002e38:	21e0      	movs	r1, #224	; 0xe0
 8002e3a:	4849      	ldr	r0, [pc, #292]	; (8002f60 <MX_GPIO_Init+0x200>)
 8002e3c:	f002 fe06 	bl	8005a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 8002e40:	2200      	movs	r2, #0
 8002e42:	f644 7181 	movw	r1, #20353	; 0x4f81
 8002e46:	4847      	ldr	r0, [pc, #284]	; (8002f64 <MX_GPIO_Init+0x204>)
 8002e48:	f002 fe00 	bl	8005a4c <HAL_GPIO_WritePin>
                          |LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f24d 4180 	movw	r1, #54400	; 0xd480
 8002e52:	4845      	ldr	r0, [pc, #276]	; (8002f68 <MX_GPIO_Init+0x208>)
 8002e54:	f002 fdfa 	bl	8005a4c <HAL_GPIO_WritePin>
                          |MS2_NEEDLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002e5e:	4843      	ldr	r0, [pc, #268]	; (8002f6c <MX_GPIO_Init+0x20c>)
 8002e60:	f002 fdf4 	bl	8005a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	4841      	ldr	r0, [pc, #260]	; (8002f70 <MX_GPIO_Init+0x210>)
 8002e6a:	f002 fdef 	bl	8005a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	4619      	mov	r1, r3
 8002e84:	483b      	ldr	r0, [pc, #236]	; (8002f74 <MX_GPIO_Init+0x214>)
 8002e86:	f002 fc35 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin;
 8002e8a:	23e0      	movs	r3, #224	; 0xe0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e96:	2302      	movs	r3, #2
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	482f      	ldr	r0, [pc, #188]	; (8002f60 <MX_GPIO_Init+0x200>)
 8002ea2:	f002 fc27 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002ea6:	f244 0381 	movw	r3, #16513	; 0x4081
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4829      	ldr	r0, [pc, #164]	; (8002f64 <MX_GPIO_Init+0x204>)
 8002ec0:	f002 fc18 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002ec4:	f24d 4380 	movw	r3, #54400	; 0xd480
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
                          |MS2_NEEDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	4822      	ldr	r0, [pc, #136]	; (8002f68 <MX_GPIO_Init+0x208>)
 8002ede:	f002 fc09 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin;
 8002ee2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	481a      	ldr	r0, [pc, #104]	; (8002f64 <MX_GPIO_Init+0x204>)
 8002efc:	f002 fbfa 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin;
 8002f00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f16:	4619      	mov	r1, r3
 8002f18:	4814      	ldr	r0, [pc, #80]	; (8002f6c <MX_GPIO_Init+0x20c>)
 8002f1a:	f002 fbeb 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002f1e:	2340      	movs	r3, #64	; 0x40
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f22:	2301      	movs	r3, #1
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	4619      	mov	r1, r3
 8002f34:	480e      	ldr	r0, [pc, #56]	; (8002f70 <MX_GPIO_Init+0x210>)
 8002f36:	f002 fbdd 	bl	80056f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4808      	ldr	r0, [pc, #32]	; (8002f70 <MX_GPIO_Init+0x210>)
 8002f4e:	f002 fbd1 	bl	80056f4 <HAL_GPIO_Init>

}
 8002f52:	bf00      	nop
 8002f54:	3738      	adds	r7, #56	; 0x38
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40020800 	.word	0x40020800

08002f78 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <MX_I2C2_Init+0x74>)
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <MX_I2C2_Init+0x78>)
 8002f80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <MX_I2C2_Init+0x74>)
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <MX_I2C2_Init+0x7c>)
 8002f86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <MX_I2C2_Init+0x74>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <MX_I2C2_Init+0x74>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f94:	4b15      	ldr	r3, [pc, #84]	; (8002fec <MX_I2C2_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <MX_I2C2_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <MX_I2C2_Init+0x74>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <MX_I2C2_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <MX_I2C2_Init+0x74>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002fb2:	480e      	ldr	r0, [pc, #56]	; (8002fec <MX_I2C2_Init+0x74>)
 8002fb4:	f002 fd7e 	bl	8005ab4 <HAL_I2C_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002fbe:	f000 f9a1 	bl	8003304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4809      	ldr	r0, [pc, #36]	; (8002fec <MX_I2C2_Init+0x74>)
 8002fc6:	f003 fad9 	bl	800657c <HAL_I2CEx_ConfigAnalogFilter>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002fd0:	f000 f998 	bl	8003304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <MX_I2C2_Init+0x74>)
 8002fd8:	f003 fb1b 	bl	8006612 <HAL_I2CEx_ConfigDigitalFilter>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002fe2:	f000 f98f 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000534 	.word	0x20000534
 8002ff0:	40005800 	.word	0x40005800
 8002ff4:	00401959 	.word	0x00401959

08002ff8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <MX_I2C4_Init+0x74>)
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <MX_I2C4_Init+0x78>)
 8003000:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00401959;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MX_I2C4_Init+0x74>)
 8003004:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <MX_I2C4_Init+0x7c>)
 8003006:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <MX_I2C4_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <MX_I2C4_Init+0x74>)
 8003010:	2201      	movs	r2, #1
 8003012:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <MX_I2C4_Init+0x74>)
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <MX_I2C4_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <MX_I2C4_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <MX_I2C4_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <MX_I2C4_Init+0x74>)
 800302e:	2200      	movs	r2, #0
 8003030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003032:	480e      	ldr	r0, [pc, #56]	; (800306c <MX_I2C4_Init+0x74>)
 8003034:	f002 fd3e 	bl	8005ab4 <HAL_I2C_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800303e:	f000 f961 	bl	8003304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003042:	2100      	movs	r1, #0
 8003044:	4809      	ldr	r0, [pc, #36]	; (800306c <MX_I2C4_Init+0x74>)
 8003046:	f003 fa99 	bl	800657c <HAL_I2CEx_ConfigAnalogFilter>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003050:	f000 f958 	bl	8003304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003054:	2100      	movs	r1, #0
 8003056:	4805      	ldr	r0, [pc, #20]	; (800306c <MX_I2C4_Init+0x74>)
 8003058:	f003 fadb 	bl	8006612 <HAL_I2CEx_ConfigDigitalFilter>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003062:	f000 f94f 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000580 	.word	0x20000580
 8003070:	40006000 	.word	0x40006000
 8003074:	00401959 	.word	0x00401959

08003078 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b0ac      	sub	sp, #176	; 0xb0
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003090:	f107 0318 	add.w	r3, r7, #24
 8003094:	2284      	movs	r2, #132	; 0x84
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f00b f9ad 	bl	800e3f8 <memset>
  if(i2cHandle->Instance==I2C2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a44      	ldr	r2, [pc, #272]	; (80031b4 <HAL_I2C_MspInit+0x13c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d13d      	bne.n	8003124 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b4:	f107 0318 	add.w	r3, r7, #24
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 f853 	bl	8007164 <HAL_RCCEx_PeriphCLKConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80030c4:	f000 f91e 	bl	8003304 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6313      	str	r3, [r2, #48]	; 0x30
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030e0:	2303      	movs	r3, #3
 80030e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e6:	2312      	movs	r3, #18
 80030e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030f8:	2304      	movs	r3, #4
 80030fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003102:	4619      	mov	r1, r3
 8003104:	482d      	ldr	r0, [pc, #180]	; (80031bc <HAL_I2C_MspInit+0x144>)
 8003106:	f002 faf5 	bl	80056f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 8003110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8003122:	e042      	b.n	80031aa <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_I2C_MspInit+0x148>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d13d      	bne.n	80031aa <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800312e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003132:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	4618      	mov	r0, r3
 8003140:	f004 f810 	bl	8007164 <HAL_RCCEx_PeriphCLKConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800314a:	f000 f8db 	bl	8003304 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 8003154:	f043 0320 	orr.w	r3, r3, #32
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003166:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800316a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800316e:	2312      	movs	r3, #18
 8003170:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003180:	2304      	movs	r3, #4
 8003182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003186:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800318a:	4619      	mov	r1, r3
 800318c:	480b      	ldr	r0, [pc, #44]	; (80031bc <HAL_I2C_MspInit+0x144>)
 800318e:	f002 fab1 	bl	80056f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 8003198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_I2C_MspInit+0x140>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
}
 80031aa:	bf00      	nop
 80031ac:	37b0      	adds	r7, #176	; 0xb0
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40005800 	.word	0x40005800
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40021400 	.word	0x40021400
 80031c0:	40006000 	.word	0x40006000

080031c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031c8:	f002 f8f3 	bl	80053b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031cc:	f000 f818 	bl	8003200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031d0:	f7ff fdc6 	bl	8002d60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80031d4:	f002 f82c 	bl	8005230 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80031d8:	f7ff fece 	bl	8002f78 <MX_I2C2_Init>
  MX_I2C4_Init();
 80031dc:	f7ff ff0c 	bl	8002ff8 <MX_I2C4_Init>
  MX_TIM2_Init();
 80031e0:	f001 fdde 	bl	8004da0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031e4:	f001 fe54 	bl	8004e90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80031e8:	f001 fea2 	bl	8004f30 <MX_TIM4_Init>
  MX_TIM5_Init();
 80031ec:	f001 ff18 	bl	8005020 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80031f0:	f007 f800 	bl	800a1f4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80031f4:	f7fe ffe0 	bl	80021b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80031f8:	f007 f830 	bl	800a25c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <main+0x38>
	...

08003200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b094      	sub	sp, #80	; 0x50
 8003204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003206:	f107 0320 	add.w	r3, r7, #32
 800320a:	2230      	movs	r2, #48	; 0x30
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f00b f8f2 	bl	800e3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003224:	f003 fa42 	bl	80066ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <SystemClock_Config+0xd8>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <SystemClock_Config+0xd8>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003232:	6413      	str	r3, [r2, #64]	; 0x40
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <SystemClock_Config+0xd8>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <SystemClock_Config+0xdc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <SystemClock_Config+0xdc>)
 800324a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <SystemClock_Config+0xdc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800325c:	2301      	movs	r3, #1
 800325e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003260:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003266:	2302      	movs	r3, #2
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800326a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003270:	2304      	movs	r3, #4
 8003272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003274:	2364      	movs	r3, #100	; 0x64
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003278:	2302      	movs	r3, #2
 800327a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800327c:	2303      	movs	r3, #3
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003280:	f107 0320 	add.w	r3, r7, #32
 8003284:	4618      	mov	r0, r3
 8003286:	f003 fa71 	bl	800676c <HAL_RCC_OscConfig>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003290:	f000 f838 	bl	8003304 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003294:	f003 fa1a 	bl	80066cc <HAL_PWREx_EnableOverDrive>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800329e:	f000 f831 	bl	8003304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a2:	230f      	movs	r3, #15
 80032a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a6:	2302      	movs	r3, #2
 80032a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	2103      	movs	r1, #3
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fcf8 	bl	8006cb4 <HAL_RCC_ClockConfig>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80032ca:	f000 f81b 	bl	8003304 <Error_Handler>
  }
}
 80032ce:	bf00      	nop
 80032d0:	3750      	adds	r7, #80	; 0x50
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032f2:	f002 f86b 	bl	80053cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40002000 	.word	0x40002000

08003304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003308:	b672      	cpsid	i
}
 800330a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800330c:	e7fe      	b.n	800330c <Error_Handler+0x8>

0800330e <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4603      	mov	r3, r0
 800331c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d204      	bcs.n	8003330 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	701a      	strb	r2, [r3, #0]
  }
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <_out_char+0x1e>
    _putchar(character);
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fc19 	bl	8002ba8 <_putchar>
  }
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e002      	b.n	8003394 <_strnlen_s+0x16>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3301      	adds	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <_strnlen_s+0x28>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	603a      	str	r2, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f3      	bne.n	800338e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2b2f      	cmp	r3, #47	; 0x2f
 80033c6:	d904      	bls.n	80033d2 <_is_digit+0x1a>
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b39      	cmp	r3, #57	; 0x39
 80033cc:	d801      	bhi.n	80033d2 <_is_digit+0x1a>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <_is_digit+0x1c>
 80033d2:	2300      	movs	r3, #0
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80033f2:	e00e      	b.n	8003412 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1c59      	adds	r1, r3, #1
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4403      	add	r3, r0
 800340e:	3b30      	subs	r3, #48	; 0x30
 8003410:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ffcd 	bl	80033b8 <_is_digit>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e7      	bne.n	80033f4 <_atoi+0xe>
  }
  return i;
 8003424:	68fb      	ldr	r3, [r7, #12]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800342e:	b590      	push	{r4, r7, lr}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d125      	bne.n	8003496 <_out_rev+0x68>
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d120      	bne.n	8003496 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e00a      	b.n	8003470 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	1c53      	adds	r3, r2, #1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	68fc      	ldr	r4, [r7, #12]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	2020      	movs	r0, #32
 8003468:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	429a      	cmp	r2, r3
 8003476:	d3f0      	bcc.n	800345a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003478:	e00d      	b.n	8003496 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	3b01      	subs	r3, #1
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	4413      	add	r3, r2
 8003486:	7818      	ldrb	r0, [r3, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	1c53      	adds	r3, r2, #1
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	68fc      	ldr	r4, [r7, #12]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	47a0      	blx	r4
  while (len) {
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ee      	bne.n	800347a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80034a6:	e007      	b.n	80034b8 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	1c53      	adds	r3, r2, #1
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	68fc      	ldr	r4, [r7, #12]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	2020      	movs	r0, #32
 80034b6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d8f1      	bhi.n	80034a8 <_out_rev+0x7a>
    }
  }

  return idx;
 80034c4:	687b      	ldr	r3, [r7, #4]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}

080034ce <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af04      	add	r7, sp, #16
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d136      	bne.n	8003554 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d018      	beq.n	800351e <_ntoa_format+0x50>
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d013      	beq.n	800351e <_ntoa_format+0x50>
 80034f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <_ntoa_format+0x3a>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <_ntoa_format+0x50>
      width--;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	3b01      	subs	r3, #1
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800350e:	e006      	b.n	800351e <_ntoa_format+0x50>
      buf[len++] = '0';
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	61fa      	str	r2, [r7, #28]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	2230      	movs	r2, #48	; 0x30
 800351c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	429a      	cmp	r2, r3
 8003524:	d20a      	bcs.n	800353c <_ntoa_format+0x6e>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b1f      	cmp	r3, #31
 800352a:	d9f1      	bls.n	8003510 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800352c:	e006      	b.n	800353c <_ntoa_format+0x6e>
      buf[len++] = '0';
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	61fa      	str	r2, [r7, #28]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	2230      	movs	r2, #48	; 0x30
 800353a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <_ntoa_format+0x86>
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	429a      	cmp	r2, r3
 800354c:	d202      	bcs.n	8003554 <_ntoa_format+0x86>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b1f      	cmp	r3, #31
 8003552:	d9ec      	bls.n	800352e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d058      	beq.n	8003610 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d116      	bne.n	8003596 <_ntoa_format+0xc8>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <_ntoa_format+0xc8>
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	429a      	cmp	r2, r3
 8003574:	d003      	beq.n	800357e <_ntoa_format+0xb0>
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	429a      	cmp	r2, r3
 800357c:	d10b      	bne.n	8003596 <_ntoa_format+0xc8>
      len--;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b01      	subs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <_ntoa_format+0xc8>
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b10      	cmp	r3, #16
 800358e:	d102      	bne.n	8003596 <_ntoa_format+0xc8>
        len--;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3b01      	subs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	2b10      	cmp	r3, #16
 800359a:	d10f      	bne.n	80035bc <_ntoa_format+0xee>
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <_ntoa_format+0xee>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b1f      	cmp	r3, #31
 80035aa:	d807      	bhi.n	80035bc <_ntoa_format+0xee>
      buf[len++] = 'x';
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	61fa      	str	r2, [r7, #28]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	2278      	movs	r2, #120	; 0x78
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e01f      	b.n	80035fc <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d10f      	bne.n	80035e2 <_ntoa_format+0x114>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <_ntoa_format+0x114>
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b1f      	cmp	r3, #31
 80035d0:	d807      	bhi.n	80035e2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	61fa      	str	r2, [r7, #28]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4413      	add	r3, r2
 80035dc:	2258      	movs	r2, #88	; 0x58
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e00c      	b.n	80035fc <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d109      	bne.n	80035fc <_ntoa_format+0x12e>
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b1f      	cmp	r3, #31
 80035ec:	d806      	bhi.n	80035fc <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	61fa      	str	r2, [r7, #28]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4413      	add	r3, r2
 80035f8:	2262      	movs	r2, #98	; 0x62
 80035fa:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b1f      	cmp	r3, #31
 8003600:	d806      	bhi.n	8003610 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	61fa      	str	r2, [r7, #28]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	2230      	movs	r2, #48	; 0x30
 800360e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b1f      	cmp	r3, #31
 8003614:	d824      	bhi.n	8003660 <_ntoa_format+0x192>
    if (negative) {
 8003616:	f897 3020 	ldrb.w	r3, [r7, #32]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <_ntoa_format+0x160>
      buf[len++] = '-';
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	61fa      	str	r2, [r7, #28]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4413      	add	r3, r2
 8003628:	222d      	movs	r2, #45	; 0x2d
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	e018      	b.n	8003660 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	61fa      	str	r2, [r7, #28]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	222b      	movs	r2, #43	; 0x2b
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e00b      	b.n	8003660 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	61fa      	str	r2, [r7, #28]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4413      	add	r3, r2
 800365c:	2220      	movs	r2, #32
 800365e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	9303      	str	r3, [sp, #12]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fed9 	bl	800342e <_out_rev>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b096      	sub	sp, #88	; 0x58
 800368a:	af08      	add	r7, sp, #32
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	f023 0310 	bic.w	r3, r3, #16
 80036a4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <_ntoa_long+0x30>
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d032      	beq.n	800371c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80036b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80036be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036c0:	fb01 f202 	mul.w	r2, r1, r2
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80036ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036ce:	2b09      	cmp	r3, #9
 80036d0:	d804      	bhi.n	80036dc <_ntoa_long+0x56>
 80036d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036d6:	3330      	adds	r3, #48	; 0x30
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	e00d      	b.n	80036f8 <_ntoa_long+0x72>
 80036dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <_ntoa_long+0x64>
 80036e6:	2241      	movs	r2, #65	; 0x41
 80036e8:	e000      	b.n	80036ec <_ntoa_long+0x66>
 80036ea:	2261      	movs	r2, #97	; 0x61
 80036ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036f0:	4413      	add	r3, r2
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3b0a      	subs	r3, #10
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fa:	1c59      	adds	r1, r3, #1
 80036fc:	6379      	str	r1, [r7, #52]	; 0x34
 80036fe:	3338      	adds	r3, #56	; 0x38
 8003700:	443b      	add	r3, r7
 8003702:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <_ntoa_long+0x96>
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	2b1f      	cmp	r3, #31
 800371a:	d9cc      	bls.n	80036b6 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800371c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371e:	9306      	str	r3, [sp, #24]
 8003720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003722:	9305      	str	r3, [sp, #20]
 8003724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003726:	9304      	str	r3, [sp, #16]
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fec3 	bl	80034ce <_ntoa_format>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3738      	adds	r7, #56	; 0x38
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b096      	sub	sp, #88	; 0x58
 8003756:	af08      	add	r7, sp, #32
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003764:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003768:	4313      	orrs	r3, r2
 800376a:	d103      	bne.n	8003774 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800376c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800376e:	f023 0310 	bic.w	r3, r3, #16
 8003772:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <_ntoa_long_long+0x34>
 800377e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003782:	4313      	orrs	r3, r2
 8003784:	d037      	beq.n	80037f6 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003786:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800378a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800378e:	f7fd f9dd 	bl	8000b4c <__aeabi_uldivmod>
 8003792:	4613      	mov	r3, r2
 8003794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003798:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800379c:	2b09      	cmp	r3, #9
 800379e:	d804      	bhi.n	80037aa <_ntoa_long_long+0x58>
 80037a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037a4:	3330      	adds	r3, #48	; 0x30
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	e00d      	b.n	80037c6 <_ntoa_long_long+0x74>
 80037aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <_ntoa_long_long+0x66>
 80037b4:	2241      	movs	r2, #65	; 0x41
 80037b6:	e000      	b.n	80037ba <_ntoa_long_long+0x68>
 80037b8:	2261      	movs	r2, #97	; 0x61
 80037ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037be:	4413      	add	r3, r2
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	3b0a      	subs	r3, #10
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	1c59      	adds	r1, r3, #1
 80037ca:	6379      	str	r1, [r7, #52]	; 0x34
 80037cc:	3338      	adds	r3, #56	; 0x38
 80037ce:	443b      	add	r3, r7
 80037d0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80037d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037dc:	f7fd f9b6 	bl	8000b4c <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80037e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d002      	beq.n	80037f6 <_ntoa_long_long+0xa4>
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	2b1f      	cmp	r3, #31
 80037f4:	d9c7      	bls.n	8003786 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037fa:	9206      	str	r2, [sp, #24]
 80037fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037fe:	9205      	str	r2, [sp, #20]
 8003800:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003802:	9204      	str	r2, [sp, #16]
 8003804:	9303      	str	r3, [sp, #12]
 8003806:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fe56 	bl	80034ce <_ntoa_format>
 8003822:	4603      	mov	r3, r0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3738      	adds	r7, #56	; 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	0000      	movs	r0, r0
	...

08003830 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b09d      	sub	sp, #116	; 0x74
 8003834:	af04      	add	r7, sp, #16
 8003836:	6178      	str	r0, [r7, #20]
 8003838:	6139      	str	r1, [r7, #16]
 800383a:	60fa      	str	r2, [r7, #12]
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800385a:	f7fd f8fd 	bl	8000a58 <__aeabi_dcmpeq>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003866:	9303      	str	r3, [sp, #12]
 8003868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386a:	9302      	str	r3, [sp, #8]
 800386c:	2303      	movs	r3, #3
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	4ba7      	ldr	r3, [pc, #668]	; (8003b10 <_ftoa+0x2e0>)
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6939      	ldr	r1, [r7, #16]
 800387a:	6978      	ldr	r0, [r7, #20]
 800387c:	f7ff fdd7 	bl	800342e <_out_rev>
 8003880:	4603      	mov	r3, r0
 8003882:	e222      	b.n	8003cca <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800388c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003890:	f7fd f8ec 	bl	8000a6c <__aeabi_dcmplt>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00f      	beq.n	80038ba <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800389a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800389c:	9303      	str	r3, [sp, #12]
 800389e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a0:	9302      	str	r3, [sp, #8]
 80038a2:	2304      	movs	r3, #4
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	4b9b      	ldr	r3, [pc, #620]	; (8003b14 <_ftoa+0x2e4>)
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6939      	ldr	r1, [r7, #16]
 80038b0:	6978      	ldr	r0, [r7, #20]
 80038b2:	f7ff fdbc 	bl	800342e <_out_rev>
 80038b6:	4603      	mov	r3, r0
 80038b8:	e207      	b.n	8003cca <_ftoa+0x49a>
  if (value > DBL_MAX)
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <_ftoa+0x2e8>)
 80038c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038c4:	f7fd f8f0 	bl	8000aa8 <__aeabi_dcmpgt>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01d      	beq.n	800390a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80038ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <_ftoa+0xac>
 80038d8:	4b90      	ldr	r3, [pc, #576]	; (8003b1c <_ftoa+0x2ec>)
 80038da:	e000      	b.n	80038de <_ftoa+0xae>
 80038dc:	4b90      	ldr	r3, [pc, #576]	; (8003b20 <_ftoa+0x2f0>)
 80038de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038e0:	f002 0204 	and.w	r2, r2, #4
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d001      	beq.n	80038ec <_ftoa+0xbc>
 80038e8:	2204      	movs	r2, #4
 80038ea:	e000      	b.n	80038ee <_ftoa+0xbe>
 80038ec:	2203      	movs	r2, #3
 80038ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038f0:	9103      	str	r1, [sp, #12]
 80038f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80038f4:	9102      	str	r1, [sp, #8]
 80038f6:	9201      	str	r2, [sp, #4]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6939      	ldr	r1, [r7, #16]
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f7ff fd94 	bl	800342e <_out_rev>
 8003906:	4603      	mov	r3, r0
 8003908:	e1df      	b.n	8003cca <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800390a:	a37d      	add	r3, pc, #500	; (adr r3, 8003b00 <_ftoa+0x2d0>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003914:	f7fd f8c8 	bl	8000aa8 <__aeabi_dcmpgt>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <_ftoa+0x102>
 800391e:	a37a      	add	r3, pc, #488	; (adr r3, 8003b08 <_ftoa+0x2d8>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003928:	f7fd f8a0 	bl	8000a6c <__aeabi_dcmplt>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00f      	beq.n	8003952 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	ed97 0b00 	vldr	d0, [r7]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6939      	ldr	r1, [r7, #16]
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f000 f9c9 	bl	8003ce0 <_etoa>
 800394e:	4603      	mov	r3, r0
 8003950:	e1bb      	b.n	8003cca <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003964:	f7fd f882 	bl	8000a6c <__aeabi_dcmplt>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <_ftoa+0x15c>
    negative = true;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003978:	f04f 0000 	mov.w	r0, #0
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	f7fc fc4a 	bl	8000218 <__aeabi_dsub>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800398c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003996:	2306      	movs	r3, #6
 8003998:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800399a:	e00a      	b.n	80039b2 <_ftoa+0x182>
    buf[len++] = '0';
 800399c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80039a2:	3360      	adds	r3, #96	; 0x60
 80039a4:	443b      	add	r3, r7
 80039a6:	2230      	movs	r2, #48	; 0x30
 80039a8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80039ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ae:	3b01      	subs	r3, #1
 80039b0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80039b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b4:	2b1f      	cmp	r3, #31
 80039b6:	d802      	bhi.n	80039be <_ftoa+0x18e>
 80039b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d8ee      	bhi.n	800399c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80039be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039c2:	f7fd f87b 	bl	8000abc <__aeabi_d2iz>
 80039c6:	4603      	mov	r3, r0
 80039c8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80039ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80039cc:	f7fc fd72 	bl	80004b4 <__aeabi_i2d>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039d8:	f7fc fc1e 	bl	8000218 <__aeabi_dsub>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	4a4f      	ldr	r2, [pc, #316]	; (8003b24 <_ftoa+0x2f4>)
 80039e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f7fc fdca 	bl	8000588 <__aeabi_dmul>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80039fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003a00:	f7fd f884 	bl	8000b0c <__aeabi_d2uiz>
 8003a04:	4603      	mov	r3, r0
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003a08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003a0a:	f7fc fd43 	bl	8000494 <__aeabi_ui2d>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003a16:	f7fc fbff 	bl	8000218 <__aeabi_dsub>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <_ftoa+0x2f8>)
 8003a28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a2c:	f7fd f83c 	bl	8000aa8 <__aeabi_dcmpgt>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <_ftoa+0x234>
    ++frac;
 8003a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a38:	3301      	adds	r3, #1
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003a3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003a3e:	f7fc fd29 	bl	8000494 <__aeabi_ui2d>
 8003a42:	4a38      	ldr	r2, [pc, #224]	; (8003b24 <_ftoa+0x2f4>)
 8003a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fd f821 	bl	8000a94 <__aeabi_dcmpge>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01a      	beq.n	8003a8e <_ftoa+0x25e>
      frac = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5e:	3301      	adds	r3, #1
 8003a60:	657b      	str	r3, [r7, #84]	; 0x54
 8003a62:	e014      	b.n	8003a8e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <_ftoa+0x2f8>)
 8003a6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a6e:	f7fc fffd 	bl	8000a6c <__aeabi_dcmplt>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <_ftoa+0x258>
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d14b      	bne.n	8003b2c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003a94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003a96:	f7fc fd0d 	bl	80004b4 <__aeabi_i2d>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aa2:	f7fc fbb9 	bl	8000218 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003aae:	2301      	movs	r3, #1
 8003ab0:	461c      	mov	r4, r3
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <_ftoa+0x2f8>)
 8003ab8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003abc:	f7fc ffd6 	bl	8000a6c <__aeabi_dcmplt>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <_ftoa+0x29a>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	461c      	mov	r4, r3
 8003aca:	b2e3      	uxtb	r3, r4
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <_ftoa+0x2ba>
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <_ftoa+0x2f8>)
 8003adc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003ae0:	f7fc ffe2 	bl	8000aa8 <__aeabi_dcmpgt>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d064      	beq.n	8003bb4 <_ftoa+0x384>
 8003aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8081 	beq.w	8003bf8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af8:	3301      	adds	r3, #1
 8003afa:	657b      	str	r3, [r7, #84]	; 0x54
 8003afc:	e07c      	b.n	8003bf8 <_ftoa+0x3c8>
 8003afe:	bf00      	nop
 8003b00:	00000000 	.word	0x00000000
 8003b04:	41cdcd65 	.word	0x41cdcd65
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	c1cdcd65 	.word	0xc1cdcd65
 8003b10:	0800eaa8 	.word	0x0800eaa8
 8003b14:	0800eaac 	.word	0x0800eaac
 8003b18:	7fefffff 	.word	0x7fefffff
 8003b1c:	0800eab4 	.word	0x0800eab4
 8003b20:	0800eabc 	.word	0x0800eabc
 8003b24:	0800ef48 	.word	0x0800ef48
 8003b28:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b30:	e01f      	b.n	8003b72 <_ftoa+0x342>
      --count;
 8003b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b34:	3b01      	subs	r3, #1
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003b38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b3a:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <_ftoa+0x4a4>)
 8003b3c:	fba3 2301 	umull	r2, r3, r3, r1
 8003b40:	08da      	lsrs	r2, r3, #3
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	1aca      	subs	r2, r1, r3
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b54:	3230      	adds	r2, #48	; 0x30
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	3360      	adds	r3, #96	; 0x60
 8003b5a:	443b      	add	r3, r7
 8003b5c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	4a5c      	ldr	r2, [pc, #368]	; (8003cd4 <_ftoa+0x4a4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b74:	2b1f      	cmp	r3, #31
 8003b76:	d9dc      	bls.n	8003b32 <_ftoa+0x302>
 8003b78:	e009      	b.n	8003b8e <_ftoa+0x35e>
        break;
 8003b7a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003b7c:	e007      	b.n	8003b8e <_ftoa+0x35e>
      buf[len++] = '0';
 8003b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b84:	3360      	adds	r3, #96	; 0x60
 8003b86:	443b      	add	r3, r7
 8003b88:	2230      	movs	r2, #48	; 0x30
 8003b8a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b90:	2b1f      	cmp	r3, #31
 8003b92:	d804      	bhi.n	8003b9e <_ftoa+0x36e>
 8003b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b96:	1e5a      	subs	r2, r3, #1
 8003b98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ef      	bne.n	8003b7e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba0:	2b1f      	cmp	r3, #31
 8003ba2:	d829      	bhi.n	8003bf8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003baa:	3360      	adds	r3, #96	; 0x60
 8003bac:	443b      	add	r3, r7
 8003bae:	222e      	movs	r2, #46	; 0x2e
 8003bb0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003bb4:	e020      	b.n	8003bf8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003bb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bb8:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <_ftoa+0x4a8>)
 8003bba:	fb83 1302 	smull	r1, r3, r3, r2
 8003bbe:	1099      	asrs	r1, r3, #2
 8003bc0:	17d3      	asrs	r3, r2, #31
 8003bc2:	1ac9      	subs	r1, r1, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	1ad1      	subs	r1, r2, r3
 8003bce:	b2ca      	uxtb	r2, r1
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003bd6:	3230      	adds	r2, #48	; 0x30
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	3360      	adds	r3, #96	; 0x60
 8003bdc:	443b      	add	r3, r7
 8003bde:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <_ftoa+0x4a8>)
 8003be6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bea:	1092      	asrs	r2, r2, #2
 8003bec:	17db      	asrs	r3, r3, #31
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfa:	2b1f      	cmp	r3, #31
 8003bfc:	d9db      	bls.n	8003bb6 <_ftoa+0x386>
 8003bfe:	e000      	b.n	8003c02 <_ftoa+0x3d2>
      break;
 8003c00:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d123      	bne.n	8003c54 <_ftoa+0x424>
 8003c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01e      	beq.n	8003c54 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d014      	beq.n	8003c46 <_ftoa+0x416>
 8003c1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <_ftoa+0x3fe>
 8003c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <_ftoa+0x416>
      width--;
 8003c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c30:	3b01      	subs	r3, #1
 8003c32:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003c34:	e007      	b.n	8003c46 <_ftoa+0x416>
      buf[len++] = '0';
 8003c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c3c:	3360      	adds	r3, #96	; 0x60
 8003c3e:	443b      	add	r3, r7
 8003c40:	2230      	movs	r2, #48	; 0x30
 8003c42:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003c46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d202      	bcs.n	8003c54 <_ftoa+0x424>
 8003c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c50:	2b1f      	cmp	r3, #31
 8003c52:	d9f0      	bls.n	8003c36 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c56:	2b1f      	cmp	r3, #31
 8003c58:	d827      	bhi.n	8003caa <_ftoa+0x47a>
    if (negative) {
 8003c5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <_ftoa+0x444>
      buf[len++] = '-';
 8003c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c68:	3360      	adds	r3, #96	; 0x60
 8003c6a:	443b      	add	r3, r7
 8003c6c:	222d      	movs	r2, #45	; 0x2d
 8003c6e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003c72:	e01a      	b.n	8003caa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	443b      	add	r3, r7
 8003c88:	222b      	movs	r2, #43	; 0x2b
 8003c8a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003c8e:	e00c      	b.n	8003caa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <_ftoa+0x47a>
      buf[len++] = ' ';
 8003c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ca0:	3360      	adds	r3, #96	; 0x60
 8003ca2:	443b      	add	r3, r7
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	f107 0318 	add.w	r3, r7, #24
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff fbb3 	bl	800342e <_out_rev>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3764      	adds	r7, #100	; 0x64
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	cccccccd 	.word	0xcccccccd
 8003cd8:	66666667 	.word	0x66666667
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce4:	b09f      	sub	sp, #124	; 0x7c
 8003ce6:	af06      	add	r7, sp, #24
 8003ce8:	6278      	str	r0, [r7, #36]	; 0x24
 8003cea:	6239      	str	r1, [r7, #32]
 8003cec:	61fa      	str	r2, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cfc:	f7fc feac 	bl	8000a58 <__aeabi_dcmpeq>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d014      	beq.n	8003d30 <_etoa+0x50>
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	4bc1      	ldr	r3, [pc, #772]	; (8004010 <_etoa+0x330>)
 8003d0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d10:	f7fc feca 	bl	8000aa8 <__aeabi_dcmpgt>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <_etoa+0x50>
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d26:	f7fc fea1 	bl	8000a6c <__aeabi_dcmplt>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d34:	9302      	str	r3, [sp, #8]
 8003d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	6a39      	ldr	r1, [r7, #32]
 8003d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4e:	f7ff fd6f 	bl	8003830 <_ftoa>
 8003d52:	4603      	mov	r3, r0
 8003d54:	e23f      	b.n	80041d6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003d56:	2301      	movs	r3, #1
 8003d58:	461e      	mov	r6, r3
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d66:	f7fc fe81 	bl	8000a6c <__aeabi_dcmplt>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <_etoa+0x94>
 8003d70:	2300      	movs	r3, #0
 8003d72:	461e      	mov	r6, r3
 8003d74:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003d78:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <_etoa+0xb4>
    value = -value;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	ed97 7b00 	vldr	d7, [r7]
 8003d90:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003da0:	2306      	movs	r3, #6
 8003da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003da6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003daa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	0d0a      	lsrs	r2, r1, #20
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dce:	4690      	mov	r8, r2
 8003dd0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003dd4:	4644      	mov	r4, r8
 8003dd6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003dda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003dde:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003de2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003de4:	f7fc fb66 	bl	80004b4 <__aeabi_i2d>
 8003de8:	a37d      	add	r3, pc, #500	; (adr r3, 8003fe0 <_etoa+0x300>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fbcb 	bl	8000588 <__aeabi_dmul>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	a37b      	add	r3, pc, #492	; (adr r3, 8003fe8 <_etoa+0x308>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f7fc fa0c 	bl	800021c <__adddf3>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	4b7f      	ldr	r3, [pc, #508]	; (8004014 <_etoa+0x334>)
 8003e16:	f7fc f9ff 	bl	8000218 <__aeabi_dsub>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	a373      	add	r3, pc, #460	; (adr r3, 8003ff0 <_etoa+0x310>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fbae 	bl	8000588 <__aeabi_dmul>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4620      	mov	r0, r4
 8003e32:	4629      	mov	r1, r5
 8003e34:	f7fc f9f2 	bl	800021c <__adddf3>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f7fc fe3c 	bl	8000abc <__aeabi_d2iz>
 8003e44:	4603      	mov	r3, r0
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003e48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003e4a:	f7fc fb33 	bl	80004b4 <__aeabi_i2d>
 8003e4e:	a36a      	add	r3, pc, #424	; (adr r3, 8003ff8 <_etoa+0x318>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc fb98 	bl	8000588 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	4b6c      	ldr	r3, [pc, #432]	; (8004018 <_etoa+0x338>)
 8003e66:	f7fc f9d9 	bl	800021c <__adddf3>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7fc fe23 	bl	8000abc <__aeabi_d2iz>
 8003e76:	4603      	mov	r3, r0
 8003e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003e7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003e7c:	f7fc fb1a 	bl	80004b4 <__aeabi_i2d>
 8003e80:	a35f      	add	r3, pc, #380	; (adr r3, 8004000 <_etoa+0x320>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fb7f 	bl	8000588 <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4614      	mov	r4, r2
 8003e90:	461d      	mov	r5, r3
 8003e92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e94:	f7fc fb0e 	bl	80004b4 <__aeabi_i2d>
 8003e98:	a35b      	add	r3, pc, #364	; (adr r3, 8004008 <_etoa+0x328>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc fb73 	bl	8000588 <__aeabi_dmul>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7fc f9b5 	bl	8000218 <__aeabi_dsub>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8003eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003ebe:	f7fc fb63 	bl	8000588 <__aeabi_dmul>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ed0:	17da      	asrs	r2, r3, #31
 8003ed2:	469a      	mov	sl, r3
 8003ed4:	4693      	mov	fp, r2
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003ee8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003eec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	f7fc f992 	bl	800021c <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4690      	mov	r8, r2
 8003efe:	4699      	mov	r9, r3
 8003f00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f0c:	f7fc f984 	bl	8000218 <__aeabi_dsub>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4692      	mov	sl, r2
 8003f16:	469b      	mov	fp, r3
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	4b3f      	ldr	r3, [pc, #252]	; (800401c <_etoa+0x33c>)
 8003f1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f22:	f7fc fc5b 	bl	80007dc <__aeabi_ddiv>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <_etoa+0x340>)
 8003f34:	f7fc f972 	bl	800021c <__adddf3>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f40:	f7fc fc4c 	bl	80007dc <__aeabi_ddiv>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	4b34      	ldr	r3, [pc, #208]	; (8004024 <_etoa+0x344>)
 8003f52:	f7fc f963 	bl	800021c <__adddf3>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f5e:	f7fc fc3d 	bl	80007dc <__aeabi_ddiv>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4650      	mov	r0, sl
 8003f68:	4659      	mov	r1, fp
 8003f6a:	f7fc f957 	bl	800021c <__adddf3>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4640      	mov	r0, r8
 8003f74:	4649      	mov	r1, r9
 8003f76:	f7fc fc31 	bl	80007dc <__aeabi_ddiv>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <_etoa+0x348>)
 8003f88:	f7fc f948 	bl	800021c <__adddf3>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f7fc faf8 	bl	8000588 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fa8:	f7fc fd60 	bl	8000a6c <__aeabi_dcmplt>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <_etoa+0x2ee>
    expval--;
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8003fb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <_etoa+0x340>)
 8003fc2:	f7fc fc0b 	bl	80007dc <__aeabi_ddiv>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	2b63      	cmp	r3, #99	; 0x63
 8003fd2:	dc2b      	bgt.n	800402c <_etoa+0x34c>
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003fda:	db27      	blt.n	800402c <_etoa+0x34c>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	e026      	b.n	800402e <_etoa+0x34e>
 8003fe0:	509f79fb 	.word	0x509f79fb
 8003fe4:	3fd34413 	.word	0x3fd34413
 8003fe8:	8b60c8b3 	.word	0x8b60c8b3
 8003fec:	3fc68a28 	.word	0x3fc68a28
 8003ff0:	636f4361 	.word	0x636f4361
 8003ff4:	3fd287a7 	.word	0x3fd287a7
 8003ff8:	0979a371 	.word	0x0979a371
 8003ffc:	400a934f 	.word	0x400a934f
 8004000:	bbb55516 	.word	0xbbb55516
 8004004:	40026bb1 	.word	0x40026bb1
 8004008:	fefa39ef 	.word	0xfefa39ef
 800400c:	3fe62e42 	.word	0x3fe62e42
 8004010:	7fefffff 	.word	0x7fefffff
 8004014:	3ff80000 	.word	0x3ff80000
 8004018:	3fe00000 	.word	0x3fe00000
 800401c:	402c0000 	.word	0x402c0000
 8004020:	40240000 	.word	0x40240000
 8004024:	40180000 	.word	0x40180000
 8004028:	3ff00000 	.word	0x3ff00000
 800402c:	2305      	movs	r3, #5
 800402e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d03d      	beq.n	80040b8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800403c:	a368      	add	r3, pc, #416	; (adr r3, 80041e0 <_etoa+0x500>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004046:	f7fc fd25 	bl	8000a94 <__aeabi_dcmpge>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d024      	beq.n	800409a <_etoa+0x3ba>
 8004050:	a365      	add	r3, pc, #404	; (adr r3, 80041e8 <_etoa+0x508>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800405a:	f7fc fd07 	bl	8000a6c <__aeabi_dcmplt>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01a      	beq.n	800409a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800406a:	429a      	cmp	r2, r3
 800406c:	da07      	bge.n	800407e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800406e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800407c:	e002      	b.n	8004084 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004098:	e00e      	b.n	80040b8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800409a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <_etoa+0x3d8>
 80040a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <_etoa+0x3d8>
        --prec;
 80040ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80040b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80040be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80040c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d904      	bls.n	80040d2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80040c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	657b      	str	r3, [r7, #84]	; 0x54
 80040d0:	e001      	b.n	80040d6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80040d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <_etoa+0x40c>
 80040e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80040ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <_etoa+0x426>
    value /= conv.F;
 80040f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040fa:	f7fc fb6f 	bl	80007dc <__aeabi_ddiv>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800410a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <_etoa+0x440>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e003      	b.n	8004128 <_etoa+0x448>
 8004120:	ed97 7b04 	vldr	d7, [r7, #16]
 8004124:	ed87 7b02 	vstr	d7, [r7, #8]
 8004128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800412c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	6a39      	ldr	r1, [r7, #32]
 8004146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004148:	f7ff fb72 	bl	8003830 <_ftoa>
 800414c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	2b00      	cmp	r3, #0
 8004152:	d03f      	beq.n	80041d4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <_etoa+0x484>
 8004160:	2045      	movs	r0, #69	; 0x45
 8004162:	e000      	b.n	8004166 <_etoa+0x486>
 8004164:	2065      	movs	r0, #101	; 0x65
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	1c53      	adds	r3, r2, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6a39      	ldr	r1, [r7, #32]
 8004172:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfb8      	it	lt
 800417a:	425b      	neglt	r3, r3
 800417c:	4618      	mov	r0, r3
 800417e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004180:	0fdb      	lsrs	r3, r3, #31
 8004182:	b2db      	uxtb	r3, r3
 8004184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004186:	3a01      	subs	r2, #1
 8004188:	2105      	movs	r1, #5
 800418a:	9105      	str	r1, [sp, #20]
 800418c:	9204      	str	r2, [sp, #16]
 800418e:	2200      	movs	r2, #0
 8004190:	9203      	str	r2, [sp, #12]
 8004192:	220a      	movs	r2, #10
 8004194:	9202      	str	r2, [sp, #8]
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	9000      	str	r0, [sp, #0]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	6a39      	ldr	r1, [r7, #32]
 80041a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041a2:	f7ff fa70 	bl	8003686 <_ntoa_long>
 80041a6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80041a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00f      	beq.n	80041d4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80041b4:	e007      	b.n	80041c6 <_etoa+0x4e6>
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	1c53      	adds	r3, r2, #1
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	2020      	movs	r0, #32
 80041c4:	47a0      	blx	r4
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d8f0      	bhi.n	80041b6 <_etoa+0x4d6>
    }
  }
  return idx;
 80041d4:	69fb      	ldr	r3, [r7, #28]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3764      	adds	r7, #100	; 0x64
 80041da:	46bd      	mov	sp, r7
 80041dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e0:	eb1c432d 	.word	0xeb1c432d
 80041e4:	3f1a36e2 	.word	0x3f1a36e2
 80041e8:	00000000 	.word	0x00000000
 80041ec:	412e8480 	.word	0x412e8480

080041f0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	b0a3      	sub	sp, #140	; 0x8c
 80041f6:	af0a      	add	r7, sp, #40	; 0x28
 80041f8:	6178      	str	r0, [r7, #20]
 80041fa:	6139      	str	r1, [r7, #16]
 80041fc:	60fa      	str	r2, [r7, #12]
 80041fe:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 84be 	bne.w	8004b88 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800420c:	4ba3      	ldr	r3, [pc, #652]	; (800449c <_vsnprintf+0x2ac>)
 800420e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004210:	f000 bcba 	b.w	8004b88 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b25      	cmp	r3, #37	; 0x25
 800421a:	d00d      	beq.n	8004238 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	7818      	ldrb	r0, [r3, #0]
 8004220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004222:	1c53      	adds	r3, r2, #1
 8004224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004226:	697c      	ldr	r4, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6939      	ldr	r1, [r7, #16]
 800422c:	47a0      	blx	r4
      format++;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3301      	adds	r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
      continue;
 8004234:	f000 bca8 	b.w	8004b88 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	3b20      	subs	r3, #32
 8004248:	2b10      	cmp	r3, #16
 800424a:	d857      	bhi.n	80042fc <_vsnprintf+0x10c>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <_vsnprintf+0x64>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	080042d5 	.word	0x080042d5
 8004258:	080042fd 	.word	0x080042fd
 800425c:	080042fd 	.word	0x080042fd
 8004260:	080042e9 	.word	0x080042e9
 8004264:	080042fd 	.word	0x080042fd
 8004268:	080042fd 	.word	0x080042fd
 800426c:	080042fd 	.word	0x080042fd
 8004270:	080042fd 	.word	0x080042fd
 8004274:	080042fd 	.word	0x080042fd
 8004278:	080042fd 	.word	0x080042fd
 800427c:	080042fd 	.word	0x080042fd
 8004280:	080042c1 	.word	0x080042c1
 8004284:	080042fd 	.word	0x080042fd
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042fd 	.word	0x080042fd
 8004290:	080042fd 	.word	0x080042fd
 8004294:	08004299 	.word	0x08004299
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	2301      	movs	r3, #1
 80042a8:	653b      	str	r3, [r7, #80]	; 0x50
 80042aa:	e02a      	b.n	8004302 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80042ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	2301      	movs	r3, #1
 80042bc:	653b      	str	r3, [r7, #80]	; 0x50
 80042be:	e020      	b.n	8004302 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80042c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	2301      	movs	r3, #1
 80042d0:	653b      	str	r3, [r7, #80]	; 0x50
 80042d2:	e016      	b.n	8004302 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80042d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d6:	f043 0308 	orr.w	r3, r3, #8
 80042da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3301      	adds	r3, #1
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	2301      	movs	r3, #1
 80042e4:	653b      	str	r3, [r7, #80]	; 0x50
 80042e6:	e00c      	b.n	8004302 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80042e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ea:	f043 0310 	orr.w	r3, r3, #16
 80042ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	2301      	movs	r3, #1
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
 80042fa:	e002      	b.n	8004302 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80042fc:	2300      	movs	r3, #0
 80042fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004300:	bf00      	nop
      }
    } while (n);
 8004302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004304:	2b00      	cmp	r3, #0
 8004306:	d19c      	bne.n	8004242 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff f851 	bl	80033b8 <_is_digit>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d006      	beq.n	800432a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800431c:	f107 0308 	add.w	r3, r7, #8
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f860 	bl	80033e6 <_atoi>
 8004326:	65b8      	str	r0, [r7, #88]	; 0x58
 8004328:	e01a      	b.n	8004360 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b2a      	cmp	r3, #42	; 0x2a
 8004330:	d116      	bne.n	8004360 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	2b00      	cmp	r3, #0
 8004344:	da07      	bge.n	8004356 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	425b      	negs	r3, r3
 8004352:	65bb      	str	r3, [r7, #88]	; 0x58
 8004354:	e001      	b.n	800435a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3301      	adds	r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b2e      	cmp	r3, #46	; 0x2e
 800436a:	d127      	bne.n	80043bc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800436c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004372:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3301      	adds	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f81a 	bl	80033b8 <_is_digit>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff f829 	bl	80033e6 <_atoi>
 8004394:	6578      	str	r0, [r7, #84]	; 0x54
 8004396:	e011      	b.n	80043bc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b2a      	cmp	r3, #42	; 0x2a
 800439e:	d10d      	bne.n	80043bc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80043a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80043b4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	3301      	adds	r3, #1
 80043ba:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	3b68      	subs	r3, #104	; 0x68
 80043c2:	2b12      	cmp	r3, #18
 80043c4:	d866      	bhi.n	8004494 <_vsnprintf+0x2a4>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <_vsnprintf+0x1dc>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	0800443f 	.word	0x0800443f
 80043d0:	08004495 	.word	0x08004495
 80043d4:	08004475 	.word	0x08004475
 80043d8:	08004495 	.word	0x08004495
 80043dc:	08004419 	.word	0x08004419
 80043e0:	08004495 	.word	0x08004495
 80043e4:	08004495 	.word	0x08004495
 80043e8:	08004495 	.word	0x08004495
 80043ec:	08004495 	.word	0x08004495
 80043f0:	08004495 	.word	0x08004495
 80043f4:	08004495 	.word	0x08004495
 80043f8:	08004495 	.word	0x08004495
 80043fc:	08004465 	.word	0x08004465
 8004400:	08004495 	.word	0x08004495
 8004404:	08004495 	.word	0x08004495
 8004408:	08004495 	.word	0x08004495
 800440c:	08004495 	.word	0x08004495
 8004410:	08004495 	.word	0x08004495
 8004414:	08004485 	.word	0x08004485
      case 'l' :
        flags |= FLAGS_LONG;
 8004418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	3301      	adds	r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b6c      	cmp	r3, #108	; 0x6c
 800442c:	d134      	bne.n	8004498 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004434:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800443c:	e02c      	b.n	8004498 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800443e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3301      	adds	r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b68      	cmp	r3, #104	; 0x68
 8004452:	d125      	bne.n	80044a0 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	3301      	adds	r3, #1
 8004460:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004462:	e01d      	b.n	80044a0 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
        break;
 8004472:	e016      	b.n	80044a2 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800447a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3301      	adds	r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
        break;
 8004482:	e00e      	b.n	80044a2 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3301      	adds	r3, #1
 8004490:	60bb      	str	r3, [r7, #8]
        break;
 8004492:	e006      	b.n	80044a2 <_vsnprintf+0x2b2>
      default :
        break;
 8004494:	bf00      	nop
 8004496:	e004      	b.n	80044a2 <_vsnprintf+0x2b2>
        break;
 8004498:	bf00      	nop
 800449a:	e002      	b.n	80044a2 <_vsnprintf+0x2b2>
 800449c:	0800333d 	.word	0x0800333d
        break;
 80044a0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	3b25      	subs	r3, #37	; 0x25
 80044a8:	2b53      	cmp	r3, #83	; 0x53
 80044aa:	f200 8360 	bhi.w	8004b6e <_vsnprintf+0x97e>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <_vsnprintf+0x2c4>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	08004b57 	.word	0x08004b57
 80044b8:	08004b6f 	.word	0x08004b6f
 80044bc:	08004b6f 	.word	0x08004b6f
 80044c0:	08004b6f 	.word	0x08004b6f
 80044c4:	08004b6f 	.word	0x08004b6f
 80044c8:	08004b6f 	.word	0x08004b6f
 80044cc:	08004b6f 	.word	0x08004b6f
 80044d0:	08004b6f 	.word	0x08004b6f
 80044d4:	08004b6f 	.word	0x08004b6f
 80044d8:	08004b6f 	.word	0x08004b6f
 80044dc:	08004b6f 	.word	0x08004b6f
 80044e0:	08004b6f 	.word	0x08004b6f
 80044e4:	08004b6f 	.word	0x08004b6f
 80044e8:	08004b6f 	.word	0x08004b6f
 80044ec:	08004b6f 	.word	0x08004b6f
 80044f0:	08004b6f 	.word	0x08004b6f
 80044f4:	08004b6f 	.word	0x08004b6f
 80044f8:	08004b6f 	.word	0x08004b6f
 80044fc:	08004b6f 	.word	0x08004b6f
 8004500:	08004b6f 	.word	0x08004b6f
 8004504:	08004b6f 	.word	0x08004b6f
 8004508:	08004b6f 	.word	0x08004b6f
 800450c:	08004b6f 	.word	0x08004b6f
 8004510:	08004b6f 	.word	0x08004b6f
 8004514:	08004b6f 	.word	0x08004b6f
 8004518:	08004b6f 	.word	0x08004b6f
 800451c:	08004b6f 	.word	0x08004b6f
 8004520:	08004b6f 	.word	0x08004b6f
 8004524:	08004b6f 	.word	0x08004b6f
 8004528:	08004b6f 	.word	0x08004b6f
 800452c:	08004b6f 	.word	0x08004b6f
 8004530:	08004b6f 	.word	0x08004b6f
 8004534:	0800490b 	.word	0x0800490b
 8004538:	080048bb 	.word	0x080048bb
 800453c:	0800490b 	.word	0x0800490b
 8004540:	08004b6f 	.word	0x08004b6f
 8004544:	08004b6f 	.word	0x08004b6f
 8004548:	08004b6f 	.word	0x08004b6f
 800454c:	08004b6f 	.word	0x08004b6f
 8004550:	08004b6f 	.word	0x08004b6f
 8004554:	08004b6f 	.word	0x08004b6f
 8004558:	08004b6f 	.word	0x08004b6f
 800455c:	08004b6f 	.word	0x08004b6f
 8004560:	08004b6f 	.word	0x08004b6f
 8004564:	08004b6f 	.word	0x08004b6f
 8004568:	08004b6f 	.word	0x08004b6f
 800456c:	08004b6f 	.word	0x08004b6f
 8004570:	08004b6f 	.word	0x08004b6f
 8004574:	08004b6f 	.word	0x08004b6f
 8004578:	08004b6f 	.word	0x08004b6f
 800457c:	08004b6f 	.word	0x08004b6f
 8004580:	08004605 	.word	0x08004605
 8004584:	08004b6f 	.word	0x08004b6f
 8004588:	08004b6f 	.word	0x08004b6f
 800458c:	08004b6f 	.word	0x08004b6f
 8004590:	08004b6f 	.word	0x08004b6f
 8004594:	08004b6f 	.word	0x08004b6f
 8004598:	08004b6f 	.word	0x08004b6f
 800459c:	08004b6f 	.word	0x08004b6f
 80045a0:	08004b6f 	.word	0x08004b6f
 80045a4:	08004b6f 	.word	0x08004b6f
 80045a8:	08004605 	.word	0x08004605
 80045ac:	0800497b 	.word	0x0800497b
 80045b0:	08004605 	.word	0x08004605
 80045b4:	0800490b 	.word	0x0800490b
 80045b8:	080048bb 	.word	0x080048bb
 80045bc:	0800490b 	.word	0x0800490b
 80045c0:	08004b6f 	.word	0x08004b6f
 80045c4:	08004605 	.word	0x08004605
 80045c8:	08004b6f 	.word	0x08004b6f
 80045cc:	08004b6f 	.word	0x08004b6f
 80045d0:	08004b6f 	.word	0x08004b6f
 80045d4:	08004b6f 	.word	0x08004b6f
 80045d8:	08004b6f 	.word	0x08004b6f
 80045dc:	08004605 	.word	0x08004605
 80045e0:	08004abb 	.word	0x08004abb
 80045e4:	08004b6f 	.word	0x08004b6f
 80045e8:	08004b6f 	.word	0x08004b6f
 80045ec:	080049f3 	.word	0x080049f3
 80045f0:	08004b6f 	.word	0x08004b6f
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004b6f 	.word	0x08004b6f
 80045fc:	08004b6f 	.word	0x08004b6f
 8004600:	08004605 	.word	0x08004605
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b78      	cmp	r3, #120	; 0x78
 800460a:	d003      	beq.n	8004614 <_vsnprintf+0x424>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b58      	cmp	r3, #88	; 0x58
 8004612:	d102      	bne.n	800461a <_vsnprintf+0x42a>
          base = 16U;
 8004614:	2310      	movs	r3, #16
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48
 8004618:	e013      	b.n	8004642 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b6f      	cmp	r3, #111	; 0x6f
 8004620:	d102      	bne.n	8004628 <_vsnprintf+0x438>
          base =  8U;
 8004622:	2308      	movs	r3, #8
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
 8004626:	e00c      	b.n	8004642 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b62      	cmp	r3, #98	; 0x62
 800462e:	d102      	bne.n	8004636 <_vsnprintf+0x446>
          base =  2U;
 8004630:	2302      	movs	r3, #2
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48
 8004634:	e005      	b.n	8004642 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8004636:	230a      	movs	r3, #10
 8004638:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	f023 0310 	bic.w	r3, r3, #16
 8004640:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b58      	cmp	r3, #88	; 0x58
 8004648:	d103      	bne.n	8004652 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800464a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464c:	f043 0320 	orr.w	r3, r3, #32
 8004650:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b69      	cmp	r3, #105	; 0x69
 8004658:	d007      	beq.n	800466a <_vsnprintf+0x47a>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d003      	beq.n	800466a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004664:	f023 030c 	bic.w	r3, r3, #12
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800466a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8004674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b69      	cmp	r3, #105	; 0x69
 8004682:	d004      	beq.n	800468e <_vsnprintf+0x49e>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	f040 8098 	bne.w	80047be <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800468e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004694:	2b00      	cmp	r3, #0
 8004696:	d031      	beq.n	80046fc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469c:	3307      	adds	r3, #7
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	f103 0208 	add.w	r2, r3, #8
 80046a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80046b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da06      	bge.n	80046c8 <_vsnprintf+0x4d8>
 80046ba:	2100      	movs	r1, #0
 80046bc:	f1d2 0800 	rsbs	r8, r2, #0
 80046c0:	eb61 0903 	sbc.w	r9, r1, r3
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	0fc9      	lsrs	r1, r1, #31
 80046cc:	b2c9      	uxtb	r1, r1
 80046ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046d0:	2400      	movs	r4, #0
 80046d2:	4682      	mov	sl, r0
 80046d4:	46a3      	mov	fp, r4
 80046d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80046d8:	9008      	str	r0, [sp, #32]
 80046da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046dc:	9007      	str	r0, [sp, #28]
 80046de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80046e0:	9006      	str	r0, [sp, #24]
 80046e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80046e6:	9102      	str	r1, [sp, #8]
 80046e8:	e9cd 2300 	strd	r2, r3, [sp]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046f0:	6939      	ldr	r1, [r7, #16]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff f82d 	bl	8003752 <_ntoa_long_long>
 80046f8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80046fa:	e0da      	b.n	80048b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80046fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8004706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	bfb8      	it	lt
 800471a:	425b      	neglt	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	0fdb      	lsrs	r3, r3, #31
 8004722:	b2db      	uxtb	r3, r3
 8004724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004726:	9205      	str	r2, [sp, #20]
 8004728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800472a:	9204      	str	r2, [sp, #16]
 800472c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800472e:	9203      	str	r2, [sp, #12]
 8004730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004732:	9202      	str	r2, [sp, #8]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	9100      	str	r1, [sp, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f7fe ffa1 	bl	8003686 <_ntoa_long>
 8004744:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004746:	e0b4      	b.n	80048b2 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <_vsnprintf+0x572>
 8004752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004756:	1d1a      	adds	r2, r3, #4
 8004758:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e012      	b.n	8004788 <_vsnprintf+0x598>
 8004762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <_vsnprintf+0x58c>
 800476c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b21b      	sxth	r3, r3
 800477a:	e005      	b.n	8004788 <_vsnprintf+0x598>
 800477c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004780:	1d1a      	adds	r2, r3, #4
 8004782:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	bfb8      	it	lt
 8004790:	425b      	neglt	r3, r3
 8004792:	4619      	mov	r1, r3
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	0fdb      	lsrs	r3, r3, #31
 8004798:	b2db      	uxtb	r3, r3
 800479a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800479c:	9205      	str	r2, [sp, #20]
 800479e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047a0:	9204      	str	r2, [sp, #16]
 80047a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047a4:	9203      	str	r2, [sp, #12]
 80047a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a8:	9202      	str	r2, [sp, #8]
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	9100      	str	r1, [sp, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b2:	6939      	ldr	r1, [r7, #16]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f7fe ff66 	bl	8003686 <_ntoa_long>
 80047ba:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80047bc:	e079      	b.n	80048b2 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80047be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d022      	beq.n	800480e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80047c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047cc:	3307      	adds	r3, #7
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	f103 0208 	add.w	r2, r3, #8
 80047d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047e0:	2000      	movs	r0, #0
 80047e2:	460d      	mov	r5, r1
 80047e4:	4606      	mov	r6, r0
 80047e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80047e8:	9108      	str	r1, [sp, #32]
 80047ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047ec:	9107      	str	r1, [sp, #28]
 80047ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047f0:	9106      	str	r1, [sp, #24]
 80047f2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80047f6:	2100      	movs	r1, #0
 80047f8:	9102      	str	r1, [sp, #8]
 80047fa:	e9cd 2300 	strd	r2, r3, [sp]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	f7fe ffa4 	bl	8003752 <_ntoa_long_long>
 800480a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800480c:	e051      	b.n	80048b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800480e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d018      	beq.n	800484a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800481c:	1d1a      	adds	r2, r3, #4
 800481e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004826:	9205      	str	r2, [sp, #20]
 8004828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800482a:	9204      	str	r2, [sp, #16]
 800482c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800482e:	9203      	str	r2, [sp, #12]
 8004830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004832:	9202      	str	r2, [sp, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	9201      	str	r2, [sp, #4]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800483e:	6939      	ldr	r1, [r7, #16]
 8004840:	6978      	ldr	r0, [r7, #20]
 8004842:	f7fe ff20 	bl	8003686 <_ntoa_long>
 8004846:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004848:	e033      	b.n	80048b2 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800484a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <_vsnprintf+0x674>
 8004854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004858:	1d1a      	adds	r2, r3, #4
 800485a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e012      	b.n	800488a <_vsnprintf+0x69a>
 8004864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <_vsnprintf+0x68e>
 800486e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004872:	1d1a      	adds	r2, r3, #4
 8004874:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	e005      	b.n	800488a <_vsnprintf+0x69a>
 800487e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800488c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800488e:	9305      	str	r3, [sp, #20]
 8004890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004896:	9303      	str	r3, [sp, #12]
 8004898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	2300      	movs	r3, #0
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a8:	6939      	ldr	r1, [r7, #16]
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7fe feeb 	bl	8003686 <_ntoa_long>
 80048b0:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
        break;
 80048b8:	e166      	b.n	8004b88 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b46      	cmp	r3, #70	; 0x46
 80048c0:	d103      	bne.n	80048ca <_vsnprintf+0x6da>
 80048c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c4:	f043 0320 	orr.w	r3, r3, #32
 80048c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80048ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ce:	3307      	adds	r3, #7
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	f103 0208 	add.w	r2, r3, #8
 80048d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048dc:	ed93 7b00 	vldr	d7, [r3]
 80048e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e2:	9302      	str	r3, [sp, #8]
 80048e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	eeb0 0a47 	vmov.f32	s0, s14
 80048f0:	eef0 0a67 	vmov.f32	s1, s15
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048f8:	6939      	ldr	r1, [r7, #16]
 80048fa:	6978      	ldr	r0, [r7, #20]
 80048fc:	f7fe ff98 	bl	8003830 <_ftoa>
 8004900:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3301      	adds	r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
        break;
 8004908:	e13e      	b.n	8004b88 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b67      	cmp	r3, #103	; 0x67
 8004910:	d003      	beq.n	800491a <_vsnprintf+0x72a>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b47      	cmp	r3, #71	; 0x47
 8004918:	d103      	bne.n	8004922 <_vsnprintf+0x732>
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004920:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b45      	cmp	r3, #69	; 0x45
 8004928:	d003      	beq.n	8004932 <_vsnprintf+0x742>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b47      	cmp	r3, #71	; 0x47
 8004930:	d103      	bne.n	800493a <_vsnprintf+0x74a>
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	f043 0320 	orr.w	r3, r3, #32
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800493a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800493e:	3307      	adds	r3, #7
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	f103 0208 	add.w	r2, r3, #8
 8004948:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800494c:	ed93 7b00 	vldr	d7, [r3]
 8004950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004952:	9302      	str	r3, [sp, #8]
 8004954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	eeb0 0a47 	vmov.f32	s0, s14
 8004960:	eef0 0a67 	vmov.f32	s1, s15
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004968:	6939      	ldr	r1, [r7, #16]
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	f7ff f9b8 	bl	8003ce0 <_etoa>
 8004970:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3301      	adds	r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
        break;
 8004978:	e106      	b.n	8004b88 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800497a:	2301      	movs	r3, #1
 800497c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800497e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10e      	bne.n	80049a6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8004988:	e007      	b.n	800499a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800498a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498c:	1c53      	adds	r3, r2, #1
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	697c      	ldr	r4, [r7, #20]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6939      	ldr	r1, [r7, #16]
 8004996:	2020      	movs	r0, #32
 8004998:	47a0      	blx	r4
          while (l++ < width) {
 800499a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	647a      	str	r2, [r7, #68]	; 0x44
 80049a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d8f1      	bhi.n	800498a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80049a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b2d8      	uxtb	r0, r3
 80049b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b6:	1c53      	adds	r3, r2, #1
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ba:	697c      	ldr	r4, [r7, #20]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6939      	ldr	r1, [r7, #16]
 80049c0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80049c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00e      	beq.n	80049ea <_vsnprintf+0x7fa>
          while (l++ < width) {
 80049cc:	e007      	b.n	80049de <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 80049ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d0:	1c53      	adds	r3, r2, #1
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	697c      	ldr	r4, [r7, #20]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6939      	ldr	r1, [r7, #16]
 80049da:	2020      	movs	r0, #32
 80049dc:	47a0      	blx	r4
          while (l++ < width) {
 80049de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	647a      	str	r2, [r7, #68]	; 0x44
 80049e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d8f1      	bhi.n	80049ce <_vsnprintf+0x7de>
          }
        }
        format++;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
        break;
 80049f0:	e0ca      	b.n	8004b88 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80049f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <_vsnprintf+0x81a>
 8004a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a08:	e001      	b.n	8004a0e <_vsnprintf+0x81e>
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a12:	f7fe fcb4 	bl	800337e <_strnlen_s>
 8004a16:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8004a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bf28      	it	cs
 8004a2a:	4613      	movcs	r3, r2
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11a      	bne.n	8004a6e <_vsnprintf+0x87e>
          while (l++ < width) {
 8004a38:	e007      	b.n	8004a4a <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8004a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3c:	1c53      	adds	r3, r2, #1
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	697c      	ldr	r4, [r7, #20]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6939      	ldr	r1, [r7, #16]
 8004a46:	2020      	movs	r0, #32
 8004a48:	47a0      	blx	r4
          while (l++ < width) {
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d8f1      	bhi.n	8004a3a <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004a56:	e00a      	b.n	8004a6e <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a5e:	7818      	ldrb	r0, [r3, #0]
 8004a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a62:	1c53      	adds	r3, r2, #1
 8004a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a66:	697c      	ldr	r4, [r7, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6939      	ldr	r1, [r7, #16]
 8004a6c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <_vsnprintf+0x89a>
 8004a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0eb      	beq.n	8004a58 <_vsnprintf+0x868>
 8004a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a82:	1e5a      	subs	r2, r3, #1
 8004a84:	657a      	str	r2, [r7, #84]	; 0x54
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e6      	bne.n	8004a58 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8004a94:	e007      	b.n	8004aa6 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8004a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a98:	1c53      	adds	r3, r2, #1
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	697c      	ldr	r4, [r7, #20]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6939      	ldr	r1, [r7, #16]
 8004aa2:	2020      	movs	r0, #32
 8004aa4:	47a0      	blx	r4
          while (l++ < width) {
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d8f1      	bhi.n	8004a96 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
        break;
 8004ab8:	e066      	b.n	8004b88 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004aba:	2308      	movs	r3, #8
 8004abc:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d023      	beq.n	8004b1c <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603a      	str	r2, [r7, #0]
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	9308      	str	r3, [sp, #32]
 8004aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af2:	9306      	str	r3, [sp, #24]
 8004af4:	f04f 0210 	mov.w	r2, #16
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b08:	e9cd 3400 	strd	r3, r4, [sp]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b10:	6939      	ldr	r1, [r7, #16]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7fe fe1d 	bl	8003752 <_ntoa_long_long>
 8004b18:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004b1a:	e018      	b.n	8004b4e <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b20:	1d1a      	adds	r2, r3, #4
 8004b22:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b34:	9303      	str	r3, [sp, #12]
 8004b36:	2310      	movs	r3, #16
 8004b38:	9302      	str	r3, [sp, #8]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	9200      	str	r2, [sp, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b44:	6939      	ldr	r1, [r7, #16]
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7fe fd9d 	bl	8003686 <_ntoa_long>
 8004b4c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60bb      	str	r3, [r7, #8]
        break;
 8004b54:	e018      	b.n	8004b88 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b58:	1c53      	adds	r3, r2, #1
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b5c:	697c      	ldr	r4, [r7, #20]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6939      	ldr	r1, [r7, #16]
 8004b62:	2025      	movs	r0, #37	; 0x25
 8004b64:	47a0      	blx	r4
        format++;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
        break;
 8004b6c:	e00c      	b.n	8004b88 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	7818      	ldrb	r0, [r3, #0]
 8004b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b74:	1c53      	adds	r3, r2, #1
 8004b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b78:	697c      	ldr	r4, [r7, #20]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6939      	ldr	r1, [r7, #16]
 8004b7e:	47a0      	blx	r4
        format++;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60bb      	str	r3, [r7, #8]
        break;
 8004b86:	bf00      	nop
  while (*format)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f47f ab41 	bne.w	8004214 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <_vsnprintf+0x9b0>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	e000      	b.n	8004ba2 <_vsnprintf+0x9b2>
 8004ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba2:	697c      	ldr	r4, [r7, #20]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6939      	ldr	r1, [r7, #16]
 8004ba8:	2000      	movs	r0, #0
 8004baa:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3764      	adds	r7, #100	; 0x64
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004bb8 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004bb8:	b40f      	push	{r0, r1, r2, r3}
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004bc0:	f107 031c 	add.w	r3, r7, #28
 8004bc4:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004bc6:	1d39      	adds	r1, r7, #4
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd2:	4806      	ldr	r0, [pc, #24]	; (8004bec <printf_+0x34>)
 8004bd4:	f7ff fb0c 	bl	80041f0 <_vsnprintf>
 8004bd8:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004be6:	b004      	add	sp, #16
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	08003359 	.word	0x08003359

08004bf0 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004bf0:	b40e      	push	{r1, r2, r3}
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004bfa:	f107 0320 	add.w	r3, r7, #32
 8004bfe:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4805      	ldr	r0, [pc, #20]	; (8004c24 <sprintf_+0x34>)
 8004c0e:	f7ff faef 	bl	80041f0 <_vsnprintf>
 8004c12:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004c14:	68fb      	ldr	r3, [r7, #12]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c20:	b003      	add	sp, #12
 8004c22:	4770      	bx	lr
 8004c24:	0800330f 	.word	0x0800330f

08004c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_MspInit+0x4c>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <HAL_MspInit+0x4c>)
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <HAL_MspInit+0x4c>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_MspInit+0x4c>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_MspInit+0x4c>)
 8004c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c50:	6453      	str	r3, [r2, #68]	; 0x44
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_MspInit+0x4c>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	210f      	movs	r1, #15
 8004c62:	f06f 0001 	mvn.w	r0, #1
 8004c66:	f000 fc89 	bl	800557c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800

08004c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	202d      	movs	r0, #45	; 0x2d
 8004c8e:	f000 fc75 	bl	800557c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004c92:	202d      	movs	r0, #45	; 0x2d
 8004c94:	f000 fc8e 	bl	80055b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004c98:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <HAL_InitTick+0xa0>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_InitTick+0xa0>)
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_InitTick+0xa0>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004cb0:	f107 0210 	add.w	r2, r7, #16
 8004cb4:	f107 0314 	add.w	r3, r7, #20
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f002 fa20 	bl	8007100 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004cc0:	f002 f9f6 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <HAL_InitTick+0xa4>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0c9b      	lsrs	r3, r3, #18
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <HAL_InitTick+0xa8>)
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <HAL_InitTick+0xac>)
 8004cdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_InitTick+0xa8>)
 8004ce0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ce4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004ce6:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_InitTick+0xa8>)
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_InitTick+0xa8>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_InitTick+0xa8>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004cf8:	4809      	ldr	r0, [pc, #36]	; (8004d20 <HAL_InitTick+0xa8>)
 8004cfa:	f002 fe23 	bl	8007944 <HAL_TIM_Base_Init>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004d04:	4806      	ldr	r0, [pc, #24]	; (8004d20 <HAL_InitTick+0xa8>)
 8004d06:	f002 fe75 	bl	80079f4 <HAL_TIM_Base_Start_IT>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	e000      	b.n	8004d10 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3730      	adds	r7, #48	; 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	431bde83 	.word	0x431bde83
 8004d20:	200005cc 	.word	0x200005cc
 8004d24:	40002000 	.word	0x40002000

08004d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d2c:	e7fe      	b.n	8004d2c <NMI_Handler+0x4>

08004d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d32:	e7fe      	b.n	8004d32 <HardFault_Handler+0x4>

08004d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d38:	e7fe      	b.n	8004d38 <MemManage_Handler+0x4>

08004d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d3e:	e7fe      	b.n	8004d3e <BusFault_Handler+0x4>

08004d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d44:	e7fe      	b.n	8004d44 <UsageFault_Handler+0x4>

08004d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <USART3_IRQHandler+0x10>)
 8004d5a:	f004 f893 	bl	8008e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20000748 	.word	0x20000748

08004d68 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004d6c:	4802      	ldr	r0, [pc, #8]	; (8004d78 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004d6e:	f002 ff1a 	bl	8007ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	200005cc 	.word	0x200005cc

08004d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <SystemInit+0x20>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <SystemInit+0x20>)
 8004d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	609a      	str	r2, [r3, #8]
 8004db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004db4:	f107 031c 	add.w	r3, r7, #28
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	609a      	str	r2, [r3, #8]
 8004dca:	60da      	str	r2, [r3, #12]
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	615a      	str	r2, [r3, #20]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dd2:	4b2e      	ldr	r3, [pc, #184]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8004dda:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004ddc:	2247      	movs	r2, #71	; 0x47
 8004dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004de8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004dfa:	4824      	ldr	r0, [pc, #144]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004dfc:	f002 fda2 	bl	8007944 <HAL_TIM_Base_Init>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004e06:	f7fe fa7d 	bl	8003304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e14:	4619      	mov	r1, r3
 8004e16:	481d      	ldr	r0, [pc, #116]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004e18:	f003 f8f8 	bl	800800c <HAL_TIM_ConfigClockSource>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004e22:	f7fe fa6f 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e26:	4819      	ldr	r0, [pc, #100]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004e28:	f002 fe5c 	bl	8007ae4 <HAL_TIM_PWM_Init>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004e32:	f7fe fa67 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e36:	2320      	movs	r3, #32
 8004e38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e3e:	f107 031c 	add.w	r3, r7, #28
 8004e42:	4619      	mov	r1, r3
 8004e44:	4811      	ldr	r0, [pc, #68]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004e46:	f003 fe41 	bl	8008acc <HAL_TIMEx_MasterConfigSynchronization>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004e50:	f7fe fa58 	bl	8003304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e54:	2360      	movs	r3, #96	; 0x60
 8004e56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8004e58:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e66:	463b      	mov	r3, r7
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4807      	ldr	r0, [pc, #28]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004e6e:	f002 ffb9 	bl	8007de4 <HAL_TIM_PWM_ConfigChannel>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004e78:	f7fe fa44 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <MX_TIM2_Init+0xec>)
 8004e7e:	f000 f979 	bl	8005174 <HAL_TIM_MspPostInit>

}
 8004e82:	bf00      	nop
 8004e84:	3738      	adds	r7, #56	; 0x38
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000618 	.word	0x20000618

08004e90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <MX_TIM3_Init+0x9c>)
 8004eb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004ed4:	4814      	ldr	r0, [pc, #80]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004ed6:	f002 fd35 	bl	8007944 <HAL_TIM_Base_Init>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004ee0:	f7fe fa10 	bl	8003304 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004ee4:	2307      	movs	r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8004ee8:	2310      	movs	r3, #16
 8004eea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	480d      	ldr	r0, [pc, #52]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004ef4:	f003 f954 	bl	80081a0 <HAL_TIM_SlaveConfigSynchro>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8004efe:	f7fe fa01 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f02:	2300      	movs	r3, #0
 8004f04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4806      	ldr	r0, [pc, #24]	; (8004f28 <MX_TIM3_Init+0x98>)
 8004f10:	f003 fddc 	bl	8008acc <HAL_TIMEx_MasterConfigSynchronization>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8004f1a:	f7fe f9f3 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f1e:	bf00      	nop
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000664 	.word	0x20000664
 8004f2c:	40000400 	.word	0x40000400

08004f30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08e      	sub	sp, #56	; 0x38
 8004f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f50:	463b      	mov	r3, r7
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
 8004f5e:	615a      	str	r2, [r3, #20]
 8004f60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f64:	4a2d      	ldr	r2, [pc, #180]	; (800501c <MX_TIM4_Init+0xec>)
 8004f66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f6a:	2247      	movs	r2, #71	; 0x47
 8004f6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f6e:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f7c:	4b26      	ldr	r3, [pc, #152]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f82:	4b25      	ldr	r3, [pc, #148]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004f88:	4823      	ldr	r0, [pc, #140]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004f8a:	f002 fcdb 	bl	8007944 <HAL_TIM_Base_Init>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004f94:	f7fe f9b6 	bl	8003304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	481c      	ldr	r0, [pc, #112]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004fa6:	f003 f831 	bl	800800c <HAL_TIM_ConfigClockSource>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004fb0:	f7fe f9a8 	bl	8003304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004fb4:	4818      	ldr	r0, [pc, #96]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004fb6:	f002 fd95 	bl	8007ae4 <HAL_TIM_PWM_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004fc0:	f7fe f9a0 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004fcc:	f107 031c 	add.w	r3, r7, #28
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4811      	ldr	r0, [pc, #68]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004fd4:	f003 fd7a 	bl	8008acc <HAL_TIMEx_MasterConfigSynchronization>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004fde:	f7fe f991 	bl	8003304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fe2:	2360      	movs	r3, #96	; 0x60
 8004fe4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8004fe6:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004fea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4807      	ldr	r0, [pc, #28]	; (8005018 <MX_TIM4_Init+0xe8>)
 8004ffc:	f002 fef2 	bl	8007de4 <HAL_TIM_PWM_ConfigChannel>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8005006:	f7fe f97d 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800500a:	4803      	ldr	r0, [pc, #12]	; (8005018 <MX_TIM4_Init+0xe8>)
 800500c:	f000 f8b2 	bl	8005174 <HAL_TIM_MspPostInit>

}
 8005010:	bf00      	nop
 8005012:	3738      	adds	r7, #56	; 0x38
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	200006b0 	.word	0x200006b0
 800501c:	40000800 	.word	0x40000800

08005020 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	609a      	str	r2, [r3, #8]
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005036:	463b      	mov	r3, r7
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005040:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <MX_TIM5_Init+0x98>)
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <MX_TIM5_Init+0x9c>)
 8005044:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <MX_TIM5_Init+0x98>)
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800504c:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <MX_TIM5_Init+0x98>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <MX_TIM5_Init+0x98>)
 8005054:	2200      	movs	r2, #0
 8005056:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005058:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <MX_TIM5_Init+0x98>)
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <MX_TIM5_Init+0x98>)
 8005060:	2200      	movs	r2, #0
 8005062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005064:	4814      	ldr	r0, [pc, #80]	; (80050b8 <MX_TIM5_Init+0x98>)
 8005066:	f002 fc6d 	bl	8007944 <HAL_TIM_Base_Init>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005070:	f7fe f948 	bl	8003304 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8005074:	2307      	movs	r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8005078:	2320      	movs	r3, #32
 800507a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	4619      	mov	r1, r3
 8005082:	480d      	ldr	r0, [pc, #52]	; (80050b8 <MX_TIM5_Init+0x98>)
 8005084:	f003 f88c 	bl	80081a0 <HAL_TIM_SlaveConfigSynchro>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800508e:	f7fe f939 	bl	8003304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800509a:	463b      	mov	r3, r7
 800509c:	4619      	mov	r1, r3
 800509e:	4806      	ldr	r0, [pc, #24]	; (80050b8 <MX_TIM5_Init+0x98>)
 80050a0:	f003 fd14 	bl	8008acc <HAL_TIMEx_MasterConfigSynchronization>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80050aa:	f7fe f92b 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80050ae:	bf00      	nop
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200006fc 	.word	0x200006fc
 80050bc:	40000c00 	.word	0x40000c00

080050c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d10c      	bne.n	80050ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	4a23      	ldr	r2, [pc, #140]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6413      	str	r3, [r2, #64]	; 0x40
 80050de:	4b21      	ldr	r3, [pc, #132]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80050ea:	e034      	b.n	8005156 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_TIM_Base_MspInit+0xa8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050f6:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	693b      	ldr	r3, [r7, #16]
}
 800510e:	e022      	b.n	8005156 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a15      	ldr	r2, [pc, #84]	; (800516c <HAL_TIM_Base_MspInit+0xac>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10c      	bne.n	8005134 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	4a11      	ldr	r2, [pc, #68]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 8005120:	f043 0304 	orr.w	r3, r3, #4
 8005124:	6413      	str	r3, [r2, #64]	; 0x40
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
}
 8005132:	e010      	b.n	8005156 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a0d      	ldr	r2, [pc, #52]	; (8005170 <HAL_TIM_Base_MspInit+0xb0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10b      	bne.n	8005156 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 8005144:	f043 0308 	orr.w	r3, r3, #8
 8005148:	6413      	str	r3, [r2, #64]	; 0x40
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_TIM_Base_MspInit+0xa4>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00

08005174 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d11d      	bne.n	80051d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <HAL_TIM_MspPostInit+0xac>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	4a21      	ldr	r2, [pc, #132]	; (8005220 <HAL_TIM_MspPostInit+0xac>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	6313      	str	r3, [r2, #48]	; 0x30
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <HAL_TIM_MspPostInit+0xac>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_SYRINGE_Pin;
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051bc:	2300      	movs	r3, #0
 80051be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051c0:	2301      	movs	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SYRINGE_GPIO_Port, &GPIO_InitStruct);
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	4619      	mov	r1, r3
 80051ca:	4816      	ldr	r0, [pc, #88]	; (8005224 <HAL_TIM_MspPostInit+0xb0>)
 80051cc:	f000 fa92 	bl	80056f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80051d0:	e021      	b.n	8005216 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a14      	ldr	r2, [pc, #80]	; (8005228 <HAL_TIM_MspPostInit+0xb4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d11c      	bne.n	8005216 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051dc:	4b10      	ldr	r3, [pc, #64]	; (8005220 <HAL_TIM_MspPostInit+0xac>)
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <HAL_TIM_MspPostInit+0xac>)
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	6313      	str	r3, [r2, #48]	; 0x30
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <HAL_TIM_MspPostInit+0xac>)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_NEEDLE_Pin;
 80051f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fa:	2302      	movs	r3, #2
 80051fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005206:	2302      	movs	r3, #2
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_NEEDLE_GPIO_Port, &GPIO_InitStruct);
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	4619      	mov	r1, r3
 8005210:	4806      	ldr	r0, [pc, #24]	; (800522c <HAL_TIM_MspPostInit+0xb8>)
 8005212:	f000 fa6f 	bl	80056f4 <HAL_GPIO_Init>
}
 8005216:	bf00      	nop
 8005218:	3728      	adds	r7, #40	; 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800
 8005224:	40020000 	.word	0x40020000
 8005228:	40000800 	.word	0x40000800
 800522c:	40020c00 	.word	0x40020c00

08005230 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <MX_USART3_UART_Init+0x5c>)
 8005238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800523a:	4b13      	ldr	r3, [pc, #76]	; (8005288 <MX_USART3_UART_Init+0x58>)
 800523c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <MX_USART3_UART_Init+0x58>)
 800524a:	2200      	movs	r2, #0
 800524c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800524e:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005256:	220c      	movs	r2, #12
 8005258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <MX_USART3_UART_Init+0x58>)
 800525c:	2200      	movs	r2, #0
 800525e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005262:	2200      	movs	r2, #0
 8005264:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005268:	2200      	movs	r2, #0
 800526a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <MX_USART3_UART_Init+0x58>)
 800526e:	2200      	movs	r2, #0
 8005270:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005272:	4805      	ldr	r0, [pc, #20]	; (8005288 <MX_USART3_UART_Init+0x58>)
 8005274:	f003 fcd6 	bl	8008c24 <HAL_UART_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800527e:	f7fe f841 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000748 	.word	0x20000748
 800528c:	40004800 	.word	0x40004800

08005290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0aa      	sub	sp, #168	; 0xa8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005298:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052a8:	f107 0310 	add.w	r3, r7, #16
 80052ac:	2284      	movs	r2, #132	; 0x84
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f009 f8a1 	bl	800e3f8 <memset>
  if(uartHandle->Instance==USART3)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a26      	ldr	r2, [pc, #152]	; (8005354 <HAL_UART_MspInit+0xc4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d144      	bne.n	800534a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80052c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80052c6:	2300      	movs	r3, #0
 80052c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052ca:	f107 0310 	add.w	r3, r7, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 ff48 	bl	8007164 <HAL_RCCEx_PeriphCLKConfig>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80052da:	f7fe f813 	bl	8003304 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80052de:	4b1e      	ldr	r3, [pc, #120]	; (8005358 <HAL_UART_MspInit+0xc8>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <HAL_UART_MspInit+0xc8>)
 80052e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <HAL_UART_MspInit+0xc8>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052f6:	4b18      	ldr	r3, [pc, #96]	; (8005358 <HAL_UART_MspInit+0xc8>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_UART_MspInit+0xc8>)
 80052fc:	f043 0308 	orr.w	r3, r3, #8
 8005300:	6313      	str	r3, [r2, #48]	; 0x30
 8005302:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_UART_MspInit+0xc8>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800530e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005316:	2302      	movs	r3, #2
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005322:	2303      	movs	r3, #3
 8005324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005328:	2307      	movs	r3, #7
 800532a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800532e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005332:	4619      	mov	r1, r3
 8005334:	4809      	ldr	r0, [pc, #36]	; (800535c <HAL_UART_MspInit+0xcc>)
 8005336:	f000 f9dd 	bl	80056f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800533a:	2200      	movs	r2, #0
 800533c:	2105      	movs	r1, #5
 800533e:	2027      	movs	r0, #39	; 0x27
 8005340:	f000 f91c 	bl	800557c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005344:	2027      	movs	r0, #39	; 0x27
 8005346:	f000 f935 	bl	80055b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800534a:	bf00      	nop
 800534c:	37a8      	adds	r7, #168	; 0xa8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40004800 	.word	0x40004800
 8005358:	40023800 	.word	0x40023800
 800535c:	40020c00 	.word	0x40020c00

08005360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005364:	480d      	ldr	r0, [pc, #52]	; (800539c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005366:	490e      	ldr	r1, [pc, #56]	; (80053a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005368:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800536a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800536c:	e002      	b.n	8005374 <LoopCopyDataInit>

0800536e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800536e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005372:	3304      	adds	r3, #4

08005374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005378:	d3f9      	bcc.n	800536e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800537a:	4a0b      	ldr	r2, [pc, #44]	; (80053a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800537c:	4c0b      	ldr	r4, [pc, #44]	; (80053ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800537e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005380:	e001      	b.n	8005386 <LoopFillZerobss>

08005382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005384:	3204      	adds	r2, #4

08005386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005388:	d3fb      	bcc.n	8005382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800538a:	f7ff fcf7 	bl	8004d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800538e:	f008 ffff 	bl	800e390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005392:	f7fd ff17 	bl	80031c4 <main>
  bx  lr    
 8005396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005398:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800539c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053a0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80053a4:	0800f124 	.word	0x0800f124
  ldr r2, =_sbss
 80053a8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80053ac:	200092e0 	.word	0x200092e0

080053b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053b0:	e7fe      	b.n	80053b0 <ADC_IRQHandler>

080053b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053b6:	2003      	movs	r0, #3
 80053b8:	f000 f8d5 	bl	8005566 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053bc:	200f      	movs	r0, #15
 80053be:	f7ff fc5b 	bl	8004c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053c2:	f7ff fc31 	bl	8004c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <HAL_IncTick+0x20>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_IncTick+0x24>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4413      	add	r3, r2
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <HAL_IncTick+0x24>)
 80053de:	6013      	str	r3, [r2, #0]
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	200007cc 	.word	0x200007cc

080053f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  return uwTick;
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <HAL_GetTick+0x14>)
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	200007cc 	.word	0x200007cc

0800540c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <__NVIC_SetPriorityGrouping+0x40>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005428:	4013      	ands	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <__NVIC_SetPriorityGrouping+0x44>)
 8005436:	4313      	orrs	r3, r2
 8005438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <__NVIC_SetPriorityGrouping+0x40>)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	60d3      	str	r3, [r2, #12]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	e000ed00 	.word	0xe000ed00
 8005450:	05fa0000 	.word	0x05fa0000

08005454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <__NVIC_GetPriorityGrouping+0x18>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 0307 	and.w	r3, r3, #7
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db0b      	blt.n	800549a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	f003 021f 	and.w	r2, r3, #31
 8005488:	4907      	ldr	r1, [pc, #28]	; (80054a8 <__NVIC_EnableIRQ+0x38>)
 800548a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2001      	movs	r0, #1
 8005492:	fa00 f202 	lsl.w	r2, r0, r2
 8005496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	e000e100 	.word	0xe000e100

080054ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	6039      	str	r1, [r7, #0]
 80054b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	db0a      	blt.n	80054d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	490c      	ldr	r1, [pc, #48]	; (80054f8 <__NVIC_SetPriority+0x4c>)
 80054c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ca:	0112      	lsls	r2, r2, #4
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	440b      	add	r3, r1
 80054d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054d4:	e00a      	b.n	80054ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4908      	ldr	r1, [pc, #32]	; (80054fc <__NVIC_SetPriority+0x50>)
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	3b04      	subs	r3, #4
 80054e4:	0112      	lsls	r2, r2, #4
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	440b      	add	r3, r1
 80054ea:	761a      	strb	r2, [r3, #24]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	e000e100 	.word	0xe000e100
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	; 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f1c3 0307 	rsb	r3, r3, #7
 800551a:	2b04      	cmp	r3, #4
 800551c:	bf28      	it	cs
 800551e:	2304      	movcs	r3, #4
 8005520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3304      	adds	r3, #4
 8005526:	2b06      	cmp	r3, #6
 8005528:	d902      	bls.n	8005530 <NVIC_EncodePriority+0x30>
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3b03      	subs	r3, #3
 800552e:	e000      	b.n	8005532 <NVIC_EncodePriority+0x32>
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	401a      	ands	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005548:	f04f 31ff 	mov.w	r1, #4294967295
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	43d9      	mvns	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005558:	4313      	orrs	r3, r2
         );
}
 800555a:	4618      	mov	r0, r3
 800555c:	3724      	adds	r7, #36	; 0x24
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff ff4c 	bl	800540c <__NVIC_SetPriorityGrouping>
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800558e:	f7ff ff61 	bl	8005454 <__NVIC_GetPriorityGrouping>
 8005592:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f7ff ffb1 	bl	8005500 <NVIC_EncodePriority>
 800559e:	4602      	mov	r2, r0
 80055a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ff80 	bl	80054ac <__NVIC_SetPriority>
}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ff54 	bl	8005470 <__NVIC_EnableIRQ>
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055de:	f7ff ff09 	bl	80053f4 <HAL_GetTick>
 80055e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d008      	beq.n	8005602 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e052      	b.n	80056a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0216 	bic.w	r2, r2, #22
 8005610:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005620:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <HAL_DMA_Abort+0x62>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0208 	bic.w	r2, r2, #8
 8005640:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005652:	e013      	b.n	800567c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005654:	f7ff fece 	bl	80053f4 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b05      	cmp	r3, #5
 8005660:	d90c      	bls.n	800567c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2203      	movs	r2, #3
 800566c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e015      	b.n	80056a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e4      	bne.n	8005654 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	223f      	movs	r2, #63	; 0x3f
 8005690:	409a      	lsls	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2280      	movs	r2, #128	; 0x80
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00c      	b.n	80056e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2205      	movs	r2, #5
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b089      	sub	sp, #36	; 0x24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	e175      	b.n	8005a00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005714:	2201      	movs	r2, #1
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	429a      	cmp	r2, r3
 800572e:	f040 8164 	bne.w	80059fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d005      	beq.n	800574a <HAL_GPIO_Init+0x56>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d130      	bne.n	80057ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	2203      	movs	r2, #3
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005780:	2201      	movs	r2, #1
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 0201 	and.w	r2, r3, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d017      	beq.n	80057e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	2203      	movs	r2, #3
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d123      	bne.n	800583c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	08da      	lsrs	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3208      	adds	r2, #8
 80057fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	220f      	movs	r2, #15
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4313      	orrs	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	08da      	lsrs	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3208      	adds	r2, #8
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	2203      	movs	r2, #3
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0203 	and.w	r2, r3, #3
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80be 	beq.w	80059fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800587e:	4b66      	ldr	r3, [pc, #408]	; (8005a18 <HAL_GPIO_Init+0x324>)
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	4a65      	ldr	r2, [pc, #404]	; (8005a18 <HAL_GPIO_Init+0x324>)
 8005884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005888:	6453      	str	r3, [r2, #68]	; 0x44
 800588a:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_GPIO_Init+0x324>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005896:	4a61      	ldr	r2, [pc, #388]	; (8005a1c <HAL_GPIO_Init+0x328>)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	089b      	lsrs	r3, r3, #2
 800589c:	3302      	adds	r3, #2
 800589e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	220f      	movs	r2, #15
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_GPIO_Init+0x32c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d037      	beq.n	8005932 <HAL_GPIO_Init+0x23e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a57      	ldr	r2, [pc, #348]	; (8005a24 <HAL_GPIO_Init+0x330>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d031      	beq.n	800592e <HAL_GPIO_Init+0x23a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a56      	ldr	r2, [pc, #344]	; (8005a28 <HAL_GPIO_Init+0x334>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02b      	beq.n	800592a <HAL_GPIO_Init+0x236>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a55      	ldr	r2, [pc, #340]	; (8005a2c <HAL_GPIO_Init+0x338>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d025      	beq.n	8005926 <HAL_GPIO_Init+0x232>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a54      	ldr	r2, [pc, #336]	; (8005a30 <HAL_GPIO_Init+0x33c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01f      	beq.n	8005922 <HAL_GPIO_Init+0x22e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a53      	ldr	r2, [pc, #332]	; (8005a34 <HAL_GPIO_Init+0x340>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d019      	beq.n	800591e <HAL_GPIO_Init+0x22a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <HAL_GPIO_Init+0x344>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_GPIO_Init+0x226>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a51      	ldr	r2, [pc, #324]	; (8005a3c <HAL_GPIO_Init+0x348>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00d      	beq.n	8005916 <HAL_GPIO_Init+0x222>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a50      	ldr	r2, [pc, #320]	; (8005a40 <HAL_GPIO_Init+0x34c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <HAL_GPIO_Init+0x21e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a4f      	ldr	r2, [pc, #316]	; (8005a44 <HAL_GPIO_Init+0x350>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d101      	bne.n	800590e <HAL_GPIO_Init+0x21a>
 800590a:	2309      	movs	r3, #9
 800590c:	e012      	b.n	8005934 <HAL_GPIO_Init+0x240>
 800590e:	230a      	movs	r3, #10
 8005910:	e010      	b.n	8005934 <HAL_GPIO_Init+0x240>
 8005912:	2308      	movs	r3, #8
 8005914:	e00e      	b.n	8005934 <HAL_GPIO_Init+0x240>
 8005916:	2307      	movs	r3, #7
 8005918:	e00c      	b.n	8005934 <HAL_GPIO_Init+0x240>
 800591a:	2306      	movs	r3, #6
 800591c:	e00a      	b.n	8005934 <HAL_GPIO_Init+0x240>
 800591e:	2305      	movs	r3, #5
 8005920:	e008      	b.n	8005934 <HAL_GPIO_Init+0x240>
 8005922:	2304      	movs	r3, #4
 8005924:	e006      	b.n	8005934 <HAL_GPIO_Init+0x240>
 8005926:	2303      	movs	r3, #3
 8005928:	e004      	b.n	8005934 <HAL_GPIO_Init+0x240>
 800592a:	2302      	movs	r3, #2
 800592c:	e002      	b.n	8005934 <HAL_GPIO_Init+0x240>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <HAL_GPIO_Init+0x240>
 8005932:	2300      	movs	r3, #0
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	f002 0203 	and.w	r2, r2, #3
 800593a:	0092      	lsls	r2, r2, #2
 800593c:	4093      	lsls	r3, r2
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005944:	4935      	ldr	r1, [pc, #212]	; (8005a1c <HAL_GPIO_Init+0x328>)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	3302      	adds	r3, #2
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005952:	4b3d      	ldr	r3, [pc, #244]	; (8005a48 <HAL_GPIO_Init+0x354>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005976:	4a34      	ldr	r2, [pc, #208]	; (8005a48 <HAL_GPIO_Init+0x354>)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800597c:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <HAL_GPIO_Init+0x354>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059a0:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <HAL_GPIO_Init+0x354>)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059a6:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <HAL_GPIO_Init+0x354>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059ca:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <HAL_GPIO_Init+0x354>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059d0:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <HAL_GPIO_Init+0x354>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059f4:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <HAL_GPIO_Init+0x354>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3301      	adds	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b0f      	cmp	r3, #15
 8005a04:	f67f ae86 	bls.w	8005714 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	3724      	adds	r7, #36	; 0x24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	40020000 	.word	0x40020000
 8005a24:	40020400 	.word	0x40020400
 8005a28:	40020800 	.word	0x40020800
 8005a2c:	40020c00 	.word	0x40020c00
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40021400 	.word	0x40021400
 8005a38:	40021800 	.word	0x40021800
 8005a3c:	40021c00 	.word	0x40021c00
 8005a40:	40022000 	.word	0x40022000
 8005a44:	40022400 	.word	0x40022400
 8005a48:	40013c00 	.word	0x40013c00

08005a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	807b      	strh	r3, [r7, #2]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a5c:	787b      	ldrb	r3, [r7, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a62:	887a      	ldrh	r2, [r7, #2]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a68:	e003      	b.n	8005a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	041a      	lsls	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	619a      	str	r2, [r3, #24]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4013      	ands	r3, r2
 8005a96:	041a      	lsls	r2, r3, #16
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	43d9      	mvns	r1, r3
 8005a9c:	887b      	ldrh	r3, [r7, #2]
 8005a9e:	400b      	ands	r3, r1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e07f      	b.n	8005bc6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fd facc 	bl	8003078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d107      	bne.n	8005b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	e006      	b.n	8005b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d104      	bne.n	8005b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_I2C_Init+0x11c>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	02008000 	.word	0x02008000

08005bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	817b      	strh	r3, [r7, #10]
 8005be6:	460b      	mov	r3, r1
 8005be8:	813b      	strh	r3, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	f040 80f9 	bne.w	8005dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_I2C_Mem_Write+0x34>
 8005c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0ed      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_I2C_Mem_Write+0x4e>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e0e6      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c2a:	f7ff fbe3 	bl	80053f4 <HAL_GetTick>
 8005c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2319      	movs	r3, #25
 8005c36:	2201      	movs	r2, #1
 8005c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fac3 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0d1      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2221      	movs	r2, #33	; 0x21
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2240      	movs	r2, #64	; 0x40
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c74:	88f8      	ldrh	r0, [r7, #6]
 8005c76:	893a      	ldrh	r2, [r7, #8]
 8005c78:	8979      	ldrh	r1, [r7, #10]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	4603      	mov	r3, r0
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f9d3 	bl	8006030 <I2C_RequestMemoryWrite>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0a9      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2bff      	cmp	r3, #255	; 0xff
 8005ca4:	d90e      	bls.n	8005cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	8979      	ldrh	r1, [r7, #10]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fc2b 	bl	8006518 <I2C_TransferConfig>
 8005cc2:	e00f      	b.n	8005ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	8979      	ldrh	r1, [r7, #10]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fc1a 	bl	8006518 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 faad 	bl	8006248 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e07b      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d034      	beq.n	8005d9c <HAL_I2C_Mem_Write+0x1c8>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d130      	bne.n	8005d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2200      	movs	r2, #0
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fa3f 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e04d      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	d90e      	bls.n	8005d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8979      	ldrh	r1, [r7, #10]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fbcf 	bl	8006518 <I2C_TransferConfig>
 8005d7a:	e00f      	b.n	8005d9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	8979      	ldrh	r1, [r7, #10]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fbbe 	bl	8006518 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d19e      	bne.n	8005ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fa8c 	bl	80062c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e01a      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6859      	ldr	r1, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_I2C_Mem_Write+0x224>)
 8005dce:	400b      	ands	r3, r1
 8005dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e000      	b.n	8005df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	fe00e800 	.word	0xfe00e800

08005dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	817b      	strh	r3, [r7, #10]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	813b      	strh	r3, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	f040 80fd 	bne.w	800601e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_I2C_Mem_Read+0x34>
 8005e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0f1      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_I2C_Mem_Read+0x4e>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0ea      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e52:	f7ff facf 	bl	80053f4 <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2319      	movs	r3, #25
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f9af 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0d5      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2222      	movs	r2, #34	; 0x22
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e9c:	88f8      	ldrh	r0, [r7, #6]
 8005e9e:	893a      	ldrh	r2, [r7, #8]
 8005ea0:	8979      	ldrh	r1, [r7, #10]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f913 	bl	80060d8 <I2C_RequestMemoryRead>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0ad      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2bff      	cmp	r3, #255	; 0xff
 8005ecc:	d90e      	bls.n	8005eec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	22ff      	movs	r2, #255	; 0xff
 8005ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	8979      	ldrh	r1, [r7, #10]
 8005edc:	4b52      	ldr	r3, [pc, #328]	; (8006028 <HAL_I2C_Mem_Read+0x22c>)
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fb17 	bl	8006518 <I2C_TransferConfig>
 8005eea:	e00f      	b.n	8005f0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	8979      	ldrh	r1, [r7, #10]
 8005efe:	4b4a      	ldr	r3, [pc, #296]	; (8006028 <HAL_I2C_Mem_Read+0x22c>)
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fb06 	bl	8006518 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	2200      	movs	r2, #0
 8005f14:	2104      	movs	r1, #4
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f956 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e07c      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d034      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x1d0>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d130      	bne.n	8005fcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	2200      	movs	r2, #0
 8005f72:	2180      	movs	r1, #128	; 0x80
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f927 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e04d      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2bff      	cmp	r3, #255	; 0xff
 8005f8c:	d90e      	bls.n	8005fac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	22ff      	movs	r2, #255	; 0xff
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	8979      	ldrh	r1, [r7, #10]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fab7 	bl	8006518 <I2C_TransferConfig>
 8005faa:	e00f      	b.n	8005fcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8979      	ldrh	r1, [r7, #10]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 faa6 	bl	8006518 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d19a      	bne.n	8005f0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f974 	bl	80062c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e01a      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6859      	ldr	r1, [r3, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_I2C_Mem_Read+0x230>)
 8005ffe:	400b      	ands	r3, r1
 8006000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	80002400 	.word	0x80002400
 800602c:	fe00e800 	.word	0xfe00e800

08006030 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	461a      	mov	r2, r3
 800603e:	4603      	mov	r3, r0
 8006040:	817b      	strh	r3, [r7, #10]
 8006042:	460b      	mov	r3, r1
 8006044:	813b      	strh	r3, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	8979      	ldrh	r1, [r7, #10]
 8006050:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <I2C_RequestMemoryWrite+0xa4>)
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fa5d 	bl	8006518 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f8f0 	bl	8006248 <I2C_WaitOnTXISFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e02c      	b.n	80060cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006078:	893b      	ldrh	r3, [r7, #8]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
 8006082:	e015      	b.n	80060b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006084:	893b      	ldrh	r3, [r7, #8]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	b29b      	uxth	r3, r3
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f8d6 	bl	8006248 <I2C_WaitOnTXISFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e012      	b.n	80060cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060a6:	893b      	ldrh	r3, [r7, #8]
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f884 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	80002000 	.word	0x80002000

080060d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	817b      	strh	r3, [r7, #10]
 80060ea:	460b      	mov	r3, r1
 80060ec:	813b      	strh	r3, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	8979      	ldrh	r1, [r7, #10]
 80060f8:	4b20      	ldr	r3, [pc, #128]	; (800617c <I2C_RequestMemoryRead+0xa4>)
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2300      	movs	r3, #0
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fa0a 	bl	8006518 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	69b9      	ldr	r1, [r7, #24]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f89d 	bl	8006248 <I2C_WaitOnTXISFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e02c      	b.n	8006172 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28
 8006128:	e015      	b.n	8006156 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800612a:	893b      	ldrh	r3, [r7, #8]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b29b      	uxth	r3, r3
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	69b9      	ldr	r1, [r7, #24]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f883 	bl	8006248 <I2C_WaitOnTXISFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e012      	b.n	8006172 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800614c:	893b      	ldrh	r3, [r7, #8]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2200      	movs	r2, #0
 800615e:	2140      	movs	r1, #64	; 0x40
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f831 	bl	80061c8 <I2C_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	80002000 	.word	0x80002000

08006180 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d103      	bne.n	800619e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d007      	beq.n	80061bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	619a      	str	r2, [r3, #24]
  }
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d8:	e022      	b.n	8006220 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d01e      	beq.n	8006220 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e2:	f7ff f907 	bl	80053f4 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d302      	bcc.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d113      	bne.n	8006220 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e00f      	b.n	8006240 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	bf0c      	ite	eq
 8006230:	2301      	moveq	r3, #1
 8006232:	2300      	movne	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	429a      	cmp	r2, r3
 800623c:	d0cd      	beq.n	80061da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006254:	e02c      	b.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f870 	bl	8006340 <I2C_IsErrorOccurred>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e02a      	b.n	80062c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d01e      	beq.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006272:	f7ff f8bf 	bl	80053f4 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d113      	bne.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e007      	b.n	80062c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d1cb      	bne.n	8006256 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d4:	e028      	b.n	8006328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f830 	bl	8006340 <I2C_IsErrorOccurred>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e026      	b.n	8006338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ea:	f7ff f883 	bl	80053f4 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d113      	bne.n	8006328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e007      	b.n	8006338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b20      	cmp	r3, #32
 8006334:	d1cf      	bne.n	80062d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d075      	beq.n	8006458 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2210      	movs	r2, #16
 8006372:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006374:	e056      	b.n	8006424 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d052      	beq.n	8006424 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800637e:	f7ff f839 	bl	80053f4 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <I2C_IsErrorOccurred+0x54>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d147      	bne.n	8006424 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b6:	d12e      	bne.n	8006416 <I2C_IsErrorOccurred+0xd6>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063be:	d02a      	beq.n	8006416 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d027      	beq.n	8006416 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063d6:	f7ff f80d 	bl	80053f4 <HAL_GetTick>
 80063da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063dc:	e01b      	b.n	8006416 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063de:	f7ff f809 	bl	80053f4 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b19      	cmp	r3, #25
 80063ea:	d914      	bls.n	8006416 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b20      	cmp	r3, #32
 8006422:	d1dc      	bne.n	80063de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b20      	cmp	r3, #32
 8006430:	d003      	beq.n	800643a <I2C_IsErrorOccurred+0xfa>
 8006432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006436:	2b00      	cmp	r3, #0
 8006438:	d09d      	beq.n	8006376 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800643a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2220      	movs	r2, #32
 8006448:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	f043 0304 	orr.w	r3, r3, #4
 8006450:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800647a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	f043 0308 	orr.w	r3, r3, #8
 8006492:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800649c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80064c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01c      	beq.n	8006508 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fe56 	bl	8006180 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <I2C_IsErrorOccurred+0x1d4>)
 80064e0:	400b      	ands	r3, r1
 80064e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800650c:	4618      	mov	r0, r3
 800650e:	3728      	adds	r7, #40	; 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	fe00e800 	.word	0xfe00e800

08006518 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	4613      	mov	r3, r2
 8006528:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800652a:	897b      	ldrh	r3, [r7, #10]
 800652c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006530:	7a7b      	ldrb	r3, [r7, #9]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006538:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	4313      	orrs	r3, r2
 8006542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006546:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	0d5b      	lsrs	r3, r3, #21
 8006552:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <I2C_TransferConfig+0x60>)
 8006558:	430b      	orrs	r3, r1
 800655a:	43db      	mvns	r3, r3
 800655c:	ea02 0103 	and.w	r1, r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	03ff63ff 	.word	0x03ff63ff

0800657c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b20      	cmp	r3, #32
 8006590:	d138      	bne.n	8006604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800659c:	2302      	movs	r3, #2
 800659e:	e032      	b.n	8006606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b20      	cmp	r3, #32
 8006626:	d139      	bne.n	800669c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006632:	2302      	movs	r3, #2
 8006634:	e033      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	; 0x24
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ba:	6013      	str	r3, [r2, #0]
}
 80066bc:	bf00      	nop
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40007000 	.word	0x40007000

080066cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80066d6:	4b23      	ldr	r3, [pc, #140]	; (8006764 <HAL_PWREx_EnableOverDrive+0x98>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	4a22      	ldr	r2, [pc, #136]	; (8006764 <HAL_PWREx_EnableOverDrive+0x98>)
 80066dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e0:	6413      	str	r3, [r2, #64]	; 0x40
 80066e2:	4b20      	ldr	r3, [pc, #128]	; (8006764 <HAL_PWREx_EnableOverDrive+0x98>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80066ee:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066fa:	f7fe fe7b 	bl	80053f4 <HAL_GetTick>
 80066fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006700:	e009      	b.n	8006716 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006702:	f7fe fe77 	bl	80053f4 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006710:	d901      	bls.n	8006716 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e022      	b.n	800675c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006716:	4b14      	ldr	r3, [pc, #80]	; (8006768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800671e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006722:	d1ee      	bne.n	8006702 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006724:	4b10      	ldr	r3, [pc, #64]	; (8006768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0f      	ldr	r2, [pc, #60]	; (8006768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006730:	f7fe fe60 	bl	80053f4 <HAL_GetTick>
 8006734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006736:	e009      	b.n	800674c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006738:	f7fe fe5c 	bl	80053f4 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006746:	d901      	bls.n	800674c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e007      	b.n	800675c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006758:	d1ee      	bne.n	8006738 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40023800 	.word	0x40023800
 8006768:	40007000 	.word	0x40007000

0800676c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e291      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8087 	beq.w	800689e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006790:	4b96      	ldr	r3, [pc, #600]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b04      	cmp	r3, #4
 800679a:	d00c      	beq.n	80067b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800679c:	4b93      	ldr	r3, [pc, #588]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 030c 	and.w	r3, r3, #12
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d112      	bne.n	80067ce <HAL_RCC_OscConfig+0x62>
 80067a8:	4b90      	ldr	r3, [pc, #576]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067b4:	d10b      	bne.n	80067ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b6:	4b8d      	ldr	r3, [pc, #564]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d06c      	beq.n	800689c <HAL_RCC_OscConfig+0x130>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d168      	bne.n	800689c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e26b      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d6:	d106      	bne.n	80067e6 <HAL_RCC_OscConfig+0x7a>
 80067d8:	4b84      	ldr	r3, [pc, #528]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a83      	ldr	r2, [pc, #524]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e02e      	b.n	8006844 <HAL_RCC_OscConfig+0xd8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <HAL_RCC_OscConfig+0x9c>
 80067ee:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a7e      	ldr	r2, [pc, #504]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	4b7c      	ldr	r3, [pc, #496]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a7b      	ldr	r2, [pc, #492]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e01d      	b.n	8006844 <HAL_RCC_OscConfig+0xd8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006810:	d10c      	bne.n	800682c <HAL_RCC_OscConfig+0xc0>
 8006812:	4b76      	ldr	r3, [pc, #472]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a75      	ldr	r2, [pc, #468]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	4b73      	ldr	r3, [pc, #460]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a72      	ldr	r2, [pc, #456]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e00b      	b.n	8006844 <HAL_RCC_OscConfig+0xd8>
 800682c:	4b6f      	ldr	r3, [pc, #444]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a6e      	ldr	r2, [pc, #440]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	4b6c      	ldr	r3, [pc, #432]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6b      	ldr	r2, [pc, #428]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800683e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d013      	beq.n	8006874 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fe fdd2 	bl	80053f4 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006854:	f7fe fdce 	bl	80053f4 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b64      	cmp	r3, #100	; 0x64
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e21f      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006866:	4b61      	ldr	r3, [pc, #388]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <HAL_RCC_OscConfig+0xe8>
 8006872:	e014      	b.n	800689e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fe fdbe 	bl	80053f4 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800687c:	f7fe fdba 	bl	80053f4 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b64      	cmp	r3, #100	; 0x64
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e20b      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800688e:	4b57      	ldr	r3, [pc, #348]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x110>
 800689a:	e000      	b.n	800689e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800689c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d069      	beq.n	800697e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068aa:	4b50      	ldr	r3, [pc, #320]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068b6:	4b4d      	ldr	r3, [pc, #308]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d11c      	bne.n	80068fc <HAL_RCC_OscConfig+0x190>
 80068c2:	4b4a      	ldr	r3, [pc, #296]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d116      	bne.n	80068fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ce:	4b47      	ldr	r3, [pc, #284]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_RCC_OscConfig+0x17a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d001      	beq.n	80068e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e1df      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e6:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	493d      	ldr	r1, [pc, #244]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068fa:	e040      	b.n	800697e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d023      	beq.n	800694c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006904:	4b39      	ldr	r3, [pc, #228]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a38      	ldr	r2, [pc, #224]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fe fd70 	bl	80053f4 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006918:	f7fe fd6c 	bl	80053f4 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e1bd      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692a:	4b30      	ldr	r3, [pc, #192]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006936:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4929      	ldr	r1, [pc, #164]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
 800694a:	e018      	b.n	800697e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fe fd4c 	bl	80053f4 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006960:	f7fe fd48 	bl	80053f4 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e199      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d038      	beq.n	80069fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d019      	beq.n	80069c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006992:	4b16      	ldr	r3, [pc, #88]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006996:	4a15      	ldr	r2, [pc, #84]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fe fd29 	bl	80053f4 <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a6:	f7fe fd25 	bl	80053f4 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e176      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80069ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <HAL_RCC_OscConfig+0x23a>
 80069c4:	e01a      	b.n	80069fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80069c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <HAL_RCC_OscConfig+0x280>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d2:	f7fe fd0f 	bl	80053f4 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069da:	f7fe fd0b 	bl	80053f4 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d903      	bls.n	80069f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e15c      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
 80069ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069f0:	4b91      	ldr	r3, [pc, #580]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1ee      	bne.n	80069da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a4 	beq.w	8006b52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0a:	4b8b      	ldr	r3, [pc, #556]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10d      	bne.n	8006a32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a16:	4b88      	ldr	r3, [pc, #544]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	4a87      	ldr	r2, [pc, #540]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a20:	6413      	str	r3, [r2, #64]	; 0x40
 8006a22:	4b85      	ldr	r3, [pc, #532]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a32:	4b82      	ldr	r3, [pc, #520]	; (8006c3c <HAL_RCC_OscConfig+0x4d0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d118      	bne.n	8006a70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006a3e:	4b7f      	ldr	r3, [pc, #508]	; (8006c3c <HAL_RCC_OscConfig+0x4d0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a7e      	ldr	r2, [pc, #504]	; (8006c3c <HAL_RCC_OscConfig+0x4d0>)
 8006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4a:	f7fe fcd3 	bl	80053f4 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a52:	f7fe fccf 	bl	80053f4 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b64      	cmp	r3, #100	; 0x64
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e120      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a64:	4b75      	ldr	r3, [pc, #468]	; (8006c3c <HAL_RCC_OscConfig+0x4d0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0f0      	beq.n	8006a52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d106      	bne.n	8006a86 <HAL_RCC_OscConfig+0x31a>
 8006a78:	4b6f      	ldr	r3, [pc, #444]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7c:	4a6e      	ldr	r2, [pc, #440]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	6713      	str	r3, [r2, #112]	; 0x70
 8006a84:	e02d      	b.n	8006ae2 <HAL_RCC_OscConfig+0x376>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x33c>
 8006a8e:	4b6a      	ldr	r3, [pc, #424]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	4a69      	ldr	r2, [pc, #420]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9a:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	4a66      	ldr	r2, [pc, #408]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa6:	e01c      	b.n	8006ae2 <HAL_RCC_OscConfig+0x376>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	2b05      	cmp	r3, #5
 8006aae:	d10c      	bne.n	8006aca <HAL_RCC_OscConfig+0x35e>
 8006ab0:	4b61      	ldr	r3, [pc, #388]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab4:	4a60      	ldr	r2, [pc, #384]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006ab6:	f043 0304 	orr.w	r3, r3, #4
 8006aba:	6713      	str	r3, [r2, #112]	; 0x70
 8006abc:	4b5e      	ldr	r3, [pc, #376]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	4a5d      	ldr	r2, [pc, #372]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac8:	e00b      	b.n	8006ae2 <HAL_RCC_OscConfig+0x376>
 8006aca:	4b5b      	ldr	r3, [pc, #364]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a5a      	ldr	r2, [pc, #360]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad6:	4b58      	ldr	r3, [pc, #352]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a57      	ldr	r2, [pc, #348]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006adc:	f023 0304 	bic.w	r3, r3, #4
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d015      	beq.n	8006b16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fe fc83 	bl	80053f4 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fe fc7f 	bl	80053f4 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0ce      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b08:	4b4b      	ldr	r3, [pc, #300]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0ee      	beq.n	8006af2 <HAL_RCC_OscConfig+0x386>
 8006b14:	e014      	b.n	8006b40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b16:	f7fe fc6d 	bl	80053f4 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b1c:	e00a      	b.n	8006b34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1e:	f7fe fc69 	bl	80053f4 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0b8      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b34:	4b40      	ldr	r3, [pc, #256]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1ee      	bne.n	8006b1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d105      	bne.n	8006b52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b46:	4b3c      	ldr	r3, [pc, #240]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80a4 	beq.w	8006ca4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b5c:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 030c 	and.w	r3, r3, #12
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d06b      	beq.n	8006c40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d149      	bne.n	8006c04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b70:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a30      	ldr	r2, [pc, #192]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7c:	f7fe fc3a 	bl	80053f4 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b84:	f7fe fc36 	bl	80053f4 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e087      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b96:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69da      	ldr	r2, [r3, #28]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	019b      	lsls	r3, r3, #6
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	061b      	lsls	r3, r3, #24
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd0:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fe fc0a 	bl	80053f4 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be4:	f7fe fc06 	bl	80053f4 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e057      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCC_OscConfig+0x478>
 8006c02:	e04f      	b.n	8006ca4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c04:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a0b      	ldr	r2, [pc, #44]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fe fbf0 	bl	80053f4 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c18:	f7fe fbec 	bl	80053f4 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e03d      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x4ac>
 8006c36:	e035      	b.n	8006ca4 <HAL_RCC_OscConfig+0x538>
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006c40:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <HAL_RCC_OscConfig+0x544>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d028      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d121      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d11a      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c70:	4013      	ands	r3, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d111      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d107      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800

08006cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0d0      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b6a      	ldr	r3, [pc, #424]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d910      	bls.n	8006cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b67      	ldr	r3, [pc, #412]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f023 020f 	bic.w	r2, r3, #15
 8006ce2:	4965      	ldr	r1, [pc, #404]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cea:	4b63      	ldr	r3, [pc, #396]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d001      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0b8      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d020      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d14:	4b59      	ldr	r3, [pc, #356]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4a58      	ldr	r2, [pc, #352]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d2c:	4b53      	ldr	r3, [pc, #332]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a52      	ldr	r2, [pc, #328]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d38:	4b50      	ldr	r3, [pc, #320]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	494d      	ldr	r1, [pc, #308]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d040      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d107      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5e:	4b47      	ldr	r3, [pc, #284]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d115      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e07f      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d107      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d76:	4b41      	ldr	r3, [pc, #260]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e073      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d86:	4b3d      	ldr	r3, [pc, #244]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e06b      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d96:	4b39      	ldr	r3, [pc, #228]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f023 0203 	bic.w	r2, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4936      	ldr	r1, [pc, #216]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da8:	f7fe fb24 	bl	80053f4 <HAL_GetTick>
 8006dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db0:	f7fe fb20 	bl	80053f4 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e053      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc6:	4b2d      	ldr	r3, [pc, #180]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 020c 	and.w	r2, r3, #12
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d1eb      	bne.n	8006db0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd8:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d210      	bcs.n	8006e08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f023 020f 	bic.w	r2, r3, #15
 8006dee:	4922      	ldr	r1, [pc, #136]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df6:	4b20      	ldr	r3, [pc, #128]	; (8006e78 <HAL_RCC_ClockConfig+0x1c4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e032      	b.n	8006e6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d008      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e14:	4b19      	ldr	r3, [pc, #100]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	4916      	ldr	r1, [pc, #88]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	490e      	ldr	r1, [pc, #56]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e46:	f000 f821 	bl	8006e8c <HAL_RCC_GetSysClockFreq>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <HAL_RCC_ClockConfig+0x1c8>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	091b      	lsrs	r3, r3, #4
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	490a      	ldr	r1, [pc, #40]	; (8006e80 <HAL_RCC_ClockConfig+0x1cc>)
 8006e58:	5ccb      	ldrb	r3, [r1, r3]
 8006e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5e:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <HAL_RCC_ClockConfig+0x1d0>)
 8006e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <HAL_RCC_ClockConfig+0x1d4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fd ff06 	bl	8004c78 <HAL_InitTick>

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40023c00 	.word	0x40023c00
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	0800ef98 	.word	0x0800ef98
 8006e84:	20000004 	.word	0x20000004
 8006e88:	20000008 	.word	0x20000008

08006e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e90:	b094      	sub	sp, #80	; 0x50
 8006e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	647b      	str	r3, [r7, #68]	; 0x44
 8006e98:	2300      	movs	r3, #0
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ea4:	4b79      	ldr	r3, [pc, #484]	; (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d00d      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x40>
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	f200 80e1 	bhi.w	8007078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006ebe:	e0db      	b.n	8007078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec0:	4b73      	ldr	r3, [pc, #460]	; (8007090 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ec2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ec4:	e0db      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ec6:	4b73      	ldr	r3, [pc, #460]	; (8007094 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eca:	e0d8      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ecc:	4b6f      	ldr	r3, [pc, #444]	; (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006ed6:	4b6d      	ldr	r3, [pc, #436]	; (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d063      	beq.n	8006faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee2:	4b6a      	ldr	r3, [pc, #424]	; (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	2200      	movs	r2, #0
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8006efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f04f 0100 	mov.w	r1, #0
 8006f0a:	0159      	lsls	r1, r3, #5
 8006f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f10:	0150      	lsls	r0, r2, #5
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4621      	mov	r1, r4
 8006f18:	1a51      	subs	r1, r2, r1
 8006f1a:	6139      	str	r1, [r7, #16]
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f30:	4659      	mov	r1, fp
 8006f32:	018b      	lsls	r3, r1, #6
 8006f34:	4651      	mov	r1, sl
 8006f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f3a:	4651      	mov	r1, sl
 8006f3c:	018a      	lsls	r2, r1, #6
 8006f3e:	4651      	mov	r1, sl
 8006f40:	ebb2 0801 	subs.w	r8, r2, r1
 8006f44:	4659      	mov	r1, fp
 8006f46:	eb63 0901 	sbc.w	r9, r3, r1
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f5e:	4690      	mov	r8, r2
 8006f60:	4699      	mov	r9, r3
 8006f62:	4623      	mov	r3, r4
 8006f64:	eb18 0303 	adds.w	r3, r8, r3
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	eb49 0303 	adc.w	r3, r9, r3
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f7e:	4629      	mov	r1, r5
 8006f80:	024b      	lsls	r3, r1, #9
 8006f82:	4621      	mov	r1, r4
 8006f84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f88:	4621      	mov	r1, r4
 8006f8a:	024a      	lsls	r2, r1, #9
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f92:	2200      	movs	r2, #0
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f9c:	f7f9 fdd6 	bl	8000b4c <__aeabi_uldivmod>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa8:	e058      	b.n	800705c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006faa:	4b38      	ldr	r3, [pc, #224]	; (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	099b      	lsrs	r3, r3, #6
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fba:	623b      	str	r3, [r7, #32]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f04f 0000 	mov.w	r0, #0
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	0159      	lsls	r1, r3, #5
 8006fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fd6:	0150      	lsls	r0, r2, #5
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4641      	mov	r1, r8
 8006fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8007000:	eb63 050b 	sbc.w	r5, r3, fp
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	00eb      	lsls	r3, r5, #3
 800700e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007012:	00e2      	lsls	r2, r4, #3
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	4643      	mov	r3, r8
 800701a:	18e3      	adds	r3, r4, r3
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	464b      	mov	r3, r9
 8007020:	eb45 0303 	adc.w	r3, r5, r3
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007032:	4629      	mov	r1, r5
 8007034:	028b      	lsls	r3, r1, #10
 8007036:	4621      	mov	r1, r4
 8007038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800703c:	4621      	mov	r1, r4
 800703e:	028a      	lsls	r2, r1, #10
 8007040:	4610      	mov	r0, r2
 8007042:	4619      	mov	r1, r3
 8007044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007046:	2200      	movs	r2, #0
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	61fa      	str	r2, [r7, #28]
 800704c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007050:	f7f9 fd7c 	bl	8000b4c <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4613      	mov	r3, r2
 800705a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <HAL_RCC_GetSysClockFreq+0x200>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	3301      	adds	r3, #1
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800706c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800706e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007076:	e002      	b.n	800707e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <HAL_RCC_GetSysClockFreq+0x204>)
 800707a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800707c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800707e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007080:	4618      	mov	r0, r3
 8007082:	3750      	adds	r7, #80	; 0x50
 8007084:	46bd      	mov	sp, r7
 8007086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800
 8007090:	00f42400 	.word	0x00f42400
 8007094:	007a1200 	.word	0x007a1200

08007098 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800709c:	4b03      	ldr	r3, [pc, #12]	; (80070ac <HAL_RCC_GetHCLKFreq+0x14>)
 800709e:	681b      	ldr	r3, [r3, #0]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000004 	.word	0x20000004

080070b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070b4:	f7ff fff0 	bl	8007098 <HAL_RCC_GetHCLKFreq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	0a9b      	lsrs	r3, r3, #10
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	4903      	ldr	r1, [pc, #12]	; (80070d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c6:	5ccb      	ldrb	r3, [r1, r3]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40023800 	.word	0x40023800
 80070d4:	0800efa8 	.word	0x0800efa8

080070d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070dc:	f7ff ffdc 	bl	8007098 <HAL_RCC_GetHCLKFreq>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	0b5b      	lsrs	r3, r3, #13
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	4903      	ldr	r1, [pc, #12]	; (80070fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ee:	5ccb      	ldrb	r3, [r1, r3]
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40023800 	.word	0x40023800
 80070fc:	0800efa8 	.word	0x0800efa8

08007100 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	220f      	movs	r2, #15
 800710e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007110:	4b12      	ldr	r3, [pc, #72]	; (800715c <HAL_RCC_GetClockConfig+0x5c>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 0203 	and.w	r2, r3, #3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <HAL_RCC_GetClockConfig+0x5c>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <HAL_RCC_GetClockConfig+0x5c>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <HAL_RCC_GetClockConfig+0x5c>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <HAL_RCC_GetClockConfig+0x60>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40023800 	.word	0x40023800
 8007160:	40023c00 	.word	0x40023c00

08007164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d012      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800718c:	4b69      	ldr	r3, [pc, #420]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	4a68      	ldr	r2, [pc, #416]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007192:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007196:	6093      	str	r3, [r2, #8]
 8007198:	4b66      	ldr	r3, [pc, #408]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	4964      	ldr	r1, [pc, #400]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d017      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071be:	4b5d      	ldr	r3, [pc, #372]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071cc:	4959      	ldr	r1, [pc, #356]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071dc:	d101      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071ea:	2301      	movs	r3, #1
 80071ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d017      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071fa:	4b4e      	ldr	r3, [pc, #312]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	494a      	ldr	r1, [pc, #296]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007218:	d101      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 808b 	beq.w	800735e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007248:	4b3a      	ldr	r3, [pc, #232]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	4a39      	ldr	r2, [pc, #228]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007252:	6413      	str	r3, [r2, #64]	; 0x40
 8007254:	4b37      	ldr	r3, [pc, #220]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007260:	4b35      	ldr	r3, [pc, #212]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a34      	ldr	r2, [pc, #208]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800726a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800726c:	f7fe f8c2 	bl	80053f4 <HAL_GetTick>
 8007270:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007272:	e008      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007274:	f7fe f8be 	bl	80053f4 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b64      	cmp	r3, #100	; 0x64
 8007280:	d901      	bls.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e357      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007286:	4b2c      	ldr	r3, [pc, #176]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007292:	4b28      	ldr	r3, [pc, #160]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d035      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d02e      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072b0:	4b20      	ldr	r3, [pc, #128]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ba:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a1d      	ldr	r2, [pc, #116]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072c6:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4a1a      	ldr	r2, [pc, #104]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072d2:	4a18      	ldr	r2, [pc, #96]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072d8:	4b16      	ldr	r3, [pc, #88]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d114      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e4:	f7fe f886 	bl	80053f4 <HAL_GetTick>
 80072e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ea:	e00a      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ec:	f7fe f882 	bl	80053f4 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e319      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0ee      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731a:	d111      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800732a:	400b      	ands	r3, r1
 800732c:	4901      	ldr	r1, [pc, #4]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732e:	4313      	orrs	r3, r2
 8007330:	608b      	str	r3, [r1, #8]
 8007332:	e00b      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007334:	40023800 	.word	0x40023800
 8007338:	40007000 	.word	0x40007000
 800733c:	0ffffcff 	.word	0x0ffffcff
 8007340:	4baa      	ldr	r3, [pc, #680]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	4aa9      	ldr	r2, [pc, #676]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007346:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800734a:	6093      	str	r3, [r2, #8]
 800734c:	4ba7      	ldr	r3, [pc, #668]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007358:	49a4      	ldr	r1, [pc, #656]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735a:	4313      	orrs	r3, r2
 800735c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d010      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800736a:	4ba0      	ldr	r3, [pc, #640]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007370:	4a9e      	ldr	r2, [pc, #632]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007376:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800737a:	4b9c      	ldr	r3, [pc, #624]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	4999      	ldr	r1, [pc, #612]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007398:	4b94      	ldr	r3, [pc, #592]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a6:	4991      	ldr	r1, [pc, #580]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ba:	4b8c      	ldr	r3, [pc, #560]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c8:	4988      	ldr	r1, [pc, #544]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073dc:	4b83      	ldr	r3, [pc, #524]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ea:	4980      	ldr	r1, [pc, #512]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073fe:	4b7b      	ldr	r3, [pc, #492]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740c:	4977      	ldr	r1, [pc, #476]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007420:	4b72      	ldr	r3, [pc, #456]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007426:	f023 0203 	bic.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	496f      	ldr	r1, [pc, #444]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007430:	4313      	orrs	r3, r2
 8007432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007442:	4b6a      	ldr	r3, [pc, #424]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007448:	f023 020c 	bic.w	r2, r3, #12
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	4966      	ldr	r1, [pc, #408]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007464:	4b61      	ldr	r3, [pc, #388]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007472:	495e      	ldr	r1, [pc, #376]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007486:	4b59      	ldr	r3, [pc, #356]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	4955      	ldr	r1, [pc, #340]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074a8:	4b50      	ldr	r3, [pc, #320]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	494d      	ldr	r1, [pc, #308]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074ca:	4b48      	ldr	r3, [pc, #288]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	4944      	ldr	r1, [pc, #272]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074ec:	4b3f      	ldr	r3, [pc, #252]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	493c      	ldr	r1, [pc, #240]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800750e:	4b37      	ldr	r3, [pc, #220]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751c:	4933      	ldr	r1, [pc, #204]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007530:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753e:	492b      	ldr	r1, [pc, #172]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d011      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007552:	4b26      	ldr	r3, [pc, #152]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007558:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007560:	4922      	ldr	r1, [pc, #136]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007570:	d101      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007572:	2301      	movs	r3, #1
 8007574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007582:	2301      	movs	r3, #1
 8007584:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007592:	4b16      	ldr	r3, [pc, #88]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a0:	4912      	ldr	r1, [pc, #72]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c4:	4909      	ldr	r1, [pc, #36]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d006      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80d9 	beq.w	8007792 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a01      	ldr	r2, [pc, #4]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075ea:	e001      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075ec:	40023800 	.word	0x40023800
 80075f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f2:	f7fd feff 	bl	80053f4 <HAL_GetTick>
 80075f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075f8:	e008      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075fa:	f7fd fefb 	bl	80053f4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b64      	cmp	r3, #100	; 0x64
 8007606:	d901      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e194      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800760c:	4b6c      	ldr	r3, [pc, #432]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f0      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d021      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11d      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800762c:	4b64      	ldr	r3, [pc, #400]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800762e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800763a:	4b61      	ldr	r3, [pc, #388]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800763c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007640:	0e1b      	lsrs	r3, r3, #24
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	019a      	lsls	r2, r3, #6
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	071b      	lsls	r3, r3, #28
 8007660:	4957      	ldr	r1, [pc, #348]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800767c:	d00a      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007686:	2b00      	cmp	r3, #0
 8007688:	d02e      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007692:	d129      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007694:	4b4a      	ldr	r3, [pc, #296]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076a2:	4b47      	ldr	r3, [pc, #284]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a8:	0f1b      	lsrs	r3, r3, #28
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	019a      	lsls	r2, r3, #6
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	061b      	lsls	r3, r3, #24
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	071b      	lsls	r3, r3, #28
 80076c8:	493d      	ldr	r1, [pc, #244]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076d0:	4b3b      	ldr	r3, [pc, #236]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076d6:	f023 021f 	bic.w	r2, r3, #31
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	3b01      	subs	r3, #1
 80076e0:	4937      	ldr	r1, [pc, #220]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01d      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076f4:	4b32      	ldr	r3, [pc, #200]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fa:	0e1b      	lsrs	r3, r3, #24
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007702:	4b2f      	ldr	r3, [pc, #188]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007708:	0f1b      	lsrs	r3, r3, #28
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	019a      	lsls	r2, r3, #6
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	431a      	orrs	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	431a      	orrs	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	071b      	lsls	r3, r3, #28
 8007728:	4925      	ldr	r1, [pc, #148]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	019a      	lsls	r2, r3, #6
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	041b      	lsls	r3, r3, #16
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	061b      	lsls	r3, r3, #24
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	071b      	lsls	r3, r3, #28
 8007758:	4919      	ldr	r1, [pc, #100]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a16      	ldr	r2, [pc, #88]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007766:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800776a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776c:	f7fd fe42 	bl	80053f4 <HAL_GetTick>
 8007770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007772:	e008      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007774:	f7fd fe3e 	bl	80053f4 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b64      	cmp	r3, #100	; 0x64
 8007780:	d901      	bls.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e0d7      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b01      	cmp	r3, #1
 8007796:	f040 80cd 	bne.w	8007934 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a08      	ldr	r2, [pc, #32]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a6:	f7fd fe25 	bl	80053f4 <HAL_GetTick>
 80077aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077ac:	e00a      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077ae:	f7fd fe21 	bl	80053f4 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b64      	cmp	r3, #100	; 0x64
 80077ba:	d903      	bls.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e0ba      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077c4:	4b5e      	ldr	r3, [pc, #376]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d0:	d0ed      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d02e      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d12a      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077fa:	4b51      	ldr	r3, [pc, #324]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007800:	0c1b      	lsrs	r3, r3, #16
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007808:	4b4d      	ldr	r3, [pc, #308]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780e:	0f1b      	lsrs	r3, r3, #28
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	019a      	lsls	r2, r3, #6
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	041b      	lsls	r3, r3, #16
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	061b      	lsls	r3, r3, #24
 8007828:	431a      	orrs	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	071b      	lsls	r3, r3, #28
 800782e:	4944      	ldr	r1, [pc, #272]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007830:	4313      	orrs	r3, r2
 8007832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007836:	4b42      	ldr	r3, [pc, #264]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	3b01      	subs	r3, #1
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	493d      	ldr	r1, [pc, #244]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d022      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007864:	d11d      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007866:	4b36      	ldr	r3, [pc, #216]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786c:	0e1b      	lsrs	r3, r3, #24
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007874:	4b32      	ldr	r3, [pc, #200]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787a:	0f1b      	lsrs	r3, r3, #28
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	019a      	lsls	r2, r3, #6
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	431a      	orrs	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	431a      	orrs	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	071b      	lsls	r3, r3, #28
 800789a:	4929      	ldr	r1, [pc, #164]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800789c:	4313      	orrs	r3, r2
 800789e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d028      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b4:	0e1b      	lsrs	r3, r3, #24
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078bc:	4b20      	ldr	r3, [pc, #128]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	019a      	lsls	r2, r3, #6
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	041b      	lsls	r3, r3, #16
 80078d4:	431a      	orrs	r2, r3
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	061b      	lsls	r3, r3, #24
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	071b      	lsls	r3, r3, #28
 80078e2:	4917      	ldr	r1, [pc, #92]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078ea:	4b15      	ldr	r3, [pc, #84]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	4911      	ldr	r1, [pc, #68]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007900:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790c:	f7fd fd72 	bl	80053f4 <HAL_GetTick>
 8007910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007914:	f7fd fd6e 	bl	80053f4 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	; 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e007      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800792e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007932:	d1ef      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40023800 	.word	0x40023800

08007944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e049      	b.n	80079ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fd fba8 	bl	80050c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f000 fc76 	bl	8008274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d001      	beq.n	8007a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e054      	b.n	8007ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a36:	d01d      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	; (8007ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a21      	ldr	r2, [pc, #132]	; (8007acc <HAL_TIM_Base_Start_IT+0xd8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1c      	ldr	r2, [pc, #112]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <HAL_TIM_Base_Start_IT+0xe8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d115      	bne.n	8007aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b06      	cmp	r3, #6
 8007a84:	d015      	beq.n	8007ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8c:	d011      	beq.n	8007ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9e:	e008      	b.n	8007ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e000      	b.n	8007ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40001800 	.word	0x40001800
 8007ae0:	00010007 	.word	0x00010007

08007ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e049      	b.n	8007b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f841 	bl	8007b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f000 fba6 	bl	8008274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d122      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d11b      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f06f 0202 	mvn.w	r2, #2
 8007bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fb25 	bl	8008238 <HAL_TIM_IC_CaptureCallback>
 8007bee:	e005      	b.n	8007bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb17 	bl	8008224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fb28 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d122      	bne.n	8007c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d11b      	bne.n	8007c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f06f 0204 	mvn.w	r2, #4
 8007c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fafb 	bl	8008238 <HAL_TIM_IC_CaptureCallback>
 8007c42:	e005      	b.n	8007c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 faed 	bl	8008224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fafe 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d122      	bne.n	8007caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d11b      	bne.n	8007caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f06f 0208 	mvn.w	r2, #8
 8007c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2204      	movs	r2, #4
 8007c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fad1 	bl	8008238 <HAL_TIM_IC_CaptureCallback>
 8007c96:	e005      	b.n	8007ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fac3 	bl	8008224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fad4 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d122      	bne.n	8007cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	2b10      	cmp	r3, #16
 8007cc4:	d11b      	bne.n	8007cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f06f 0210 	mvn.w	r2, #16
 8007cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 faa7 	bl	8008238 <HAL_TIM_IC_CaptureCallback>
 8007cea:	e005      	b.n	8007cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fa99 	bl	8008224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 faaa 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10e      	bne.n	8007d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d107      	bne.n	8007d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f06f 0201 	mvn.w	r2, #1
 8007d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7fb fadb 	bl	80032e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b80      	cmp	r3, #128	; 0x80
 8007d36:	d10e      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d107      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 ff53 	bl	8008bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d64:	d10e      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d70:	2b80      	cmp	r3, #128	; 0x80
 8007d72:	d107      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 ff46 	bl	8008c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d10e      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d107      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa58 	bl	8008260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d10e      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d107      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0220 	mvn.w	r2, #32
 8007dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 ff06 	bl	8008be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e0ff      	b.n	8008002 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b14      	cmp	r3, #20
 8007e0e:	f200 80f0 	bhi.w	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e6d 	.word	0x08007e6d
 8007e1c:	08007ff3 	.word	0x08007ff3
 8007e20:	08007ff3 	.word	0x08007ff3
 8007e24:	08007ff3 	.word	0x08007ff3
 8007e28:	08007ead 	.word	0x08007ead
 8007e2c:	08007ff3 	.word	0x08007ff3
 8007e30:	08007ff3 	.word	0x08007ff3
 8007e34:	08007ff3 	.word	0x08007ff3
 8007e38:	08007eef 	.word	0x08007eef
 8007e3c:	08007ff3 	.word	0x08007ff3
 8007e40:	08007ff3 	.word	0x08007ff3
 8007e44:	08007ff3 	.word	0x08007ff3
 8007e48:	08007f2f 	.word	0x08007f2f
 8007e4c:	08007ff3 	.word	0x08007ff3
 8007e50:	08007ff3 	.word	0x08007ff3
 8007e54:	08007ff3 	.word	0x08007ff3
 8007e58:	08007f71 	.word	0x08007f71
 8007e5c:	08007ff3 	.word	0x08007ff3
 8007e60:	08007ff3 	.word	0x08007ff3
 8007e64:	08007ff3 	.word	0x08007ff3
 8007e68:	08007fb1 	.word	0x08007fb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fa9e 	bl	80083b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0204 	bic.w	r2, r2, #4
 8007e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6999      	ldr	r1, [r3, #24]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	619a      	str	r2, [r3, #24]
      break;
 8007eaa:	e0a5      	b.n	8007ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 faf0 	bl	8008498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6999      	ldr	r1, [r3, #24]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	021a      	lsls	r2, r3, #8
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	619a      	str	r2, [r3, #24]
      break;
 8007eec:	e084      	b.n	8007ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fb47 	bl	8008588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0208 	orr.w	r2, r2, #8
 8007f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0204 	bic.w	r2, r2, #4
 8007f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69d9      	ldr	r1, [r3, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	61da      	str	r2, [r3, #28]
      break;
 8007f2c:	e064      	b.n	8007ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fb9d 	bl	8008674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	021a      	lsls	r2, r3, #8
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	61da      	str	r2, [r3, #28]
      break;
 8007f6e:	e043      	b.n	8007ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fbd4 	bl	8008724 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0208 	orr.w	r2, r2, #8
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0204 	bic.w	r2, r2, #4
 8007f9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fae:	e023      	b.n	8007ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fc06 	bl	80087c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	021a      	lsls	r2, r3, #8
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ff0:	e002      	b.n	8007ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop

0800800c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_TIM_ConfigClockSource+0x1c>
 8008024:	2302      	movs	r3, #2
 8008026:	e0b4      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x186>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	4b56      	ldr	r3, [pc, #344]	; (800819c <HAL_TIM_ConfigClockSource+0x190>)
 8008044:	4013      	ands	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800804e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008060:	d03e      	beq.n	80080e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008066:	f200 8087 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806e:	f000 8086 	beq.w	800817e <HAL_TIM_ConfigClockSource+0x172>
 8008072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008076:	d87f      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 8008078:	2b70      	cmp	r3, #112	; 0x70
 800807a:	d01a      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0xa6>
 800807c:	2b70      	cmp	r3, #112	; 0x70
 800807e:	d87b      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 8008080:	2b60      	cmp	r3, #96	; 0x60
 8008082:	d050      	beq.n	8008126 <HAL_TIM_ConfigClockSource+0x11a>
 8008084:	2b60      	cmp	r3, #96	; 0x60
 8008086:	d877      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b50      	cmp	r3, #80	; 0x50
 800808a:	d03c      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0xfa>
 800808c:	2b50      	cmp	r3, #80	; 0x50
 800808e:	d873      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d058      	beq.n	8008146 <HAL_TIM_ConfigClockSource+0x13a>
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d86f      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 8008098:	2b30      	cmp	r3, #48	; 0x30
 800809a:	d064      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x15a>
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	d86b      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d060      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x15a>
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d867      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d05c      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x15a>
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d05a      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x15a>
 80080b0:	e062      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6899      	ldr	r1, [r3, #8]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f000 fce3 	bl	8008a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	609a      	str	r2, [r3, #8]
      break;
 80080de:	e04f      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	6899      	ldr	r1, [r3, #8]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f000 fccc 	bl	8008a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008102:	609a      	str	r2, [r3, #8]
      break;
 8008104:	e03c      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	6859      	ldr	r1, [r3, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	461a      	mov	r2, r3
 8008114:	f000 fc40 	bl	8008998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2150      	movs	r1, #80	; 0x50
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fc99 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 8008124:	e02c      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	6859      	ldr	r1, [r3, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	461a      	mov	r2, r3
 8008134:	f000 fc5f 	bl	80089f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2160      	movs	r1, #96	; 0x60
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fc89 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 8008144:	e01c      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	6859      	ldr	r1, [r3, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	461a      	mov	r2, r3
 8008154:	f000 fc20 	bl	8008998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2140      	movs	r1, #64	; 0x40
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fc79 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 8008164:	e00c      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f000 fc70 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 8008176:	e003      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
      break;
 800817c:	e000      	b.n	8008180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800817e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	fffeff88 	.word	0xfffeff88

080081a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e031      	b.n	800821c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb50 	bl	8008870 <TIM_SlaveTimer_SetConfig>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e018      	b.n	800821c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008208:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a40      	ldr	r2, [pc, #256]	; (8008388 <TIM_Base_SetConfig+0x114>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <TIM_Base_SetConfig+0x40>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008292:	d00f      	beq.n	80082b4 <TIM_Base_SetConfig+0x40>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a3d      	ldr	r2, [pc, #244]	; (800838c <TIM_Base_SetConfig+0x118>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d00b      	beq.n	80082b4 <TIM_Base_SetConfig+0x40>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a3c      	ldr	r2, [pc, #240]	; (8008390 <TIM_Base_SetConfig+0x11c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d007      	beq.n	80082b4 <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a3b      	ldr	r2, [pc, #236]	; (8008394 <TIM_Base_SetConfig+0x120>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d003      	beq.n	80082b4 <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a3a      	ldr	r2, [pc, #232]	; (8008398 <TIM_Base_SetConfig+0x124>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d108      	bne.n	80082c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a2f      	ldr	r2, [pc, #188]	; (8008388 <TIM_Base_SetConfig+0x114>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d02b      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d4:	d027      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a2c      	ldr	r2, [pc, #176]	; (800838c <TIM_Base_SetConfig+0x118>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d023      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a2b      	ldr	r2, [pc, #172]	; (8008390 <TIM_Base_SetConfig+0x11c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01f      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <TIM_Base_SetConfig+0x120>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01b      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a29      	ldr	r2, [pc, #164]	; (8008398 <TIM_Base_SetConfig+0x124>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d017      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a28      	ldr	r2, [pc, #160]	; (800839c <TIM_Base_SetConfig+0x128>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a27      	ldr	r2, [pc, #156]	; (80083a0 <TIM_Base_SetConfig+0x12c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a26      	ldr	r2, [pc, #152]	; (80083a4 <TIM_Base_SetConfig+0x130>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00b      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a25      	ldr	r2, [pc, #148]	; (80083a8 <TIM_Base_SetConfig+0x134>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d007      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a24      	ldr	r2, [pc, #144]	; (80083ac <TIM_Base_SetConfig+0x138>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d003      	beq.n	8008326 <TIM_Base_SetConfig+0xb2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a23      	ldr	r2, [pc, #140]	; (80083b0 <TIM_Base_SetConfig+0x13c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d108      	bne.n	8008338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800832c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <TIM_Base_SetConfig+0x114>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d003      	beq.n	800836c <TIM_Base_SetConfig+0xf8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a0c      	ldr	r2, [pc, #48]	; (8008398 <TIM_Base_SetConfig+0x124>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d103      	bne.n	8008374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	615a      	str	r2, [r3, #20]
}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40010000 	.word	0x40010000
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	40010400 	.word	0x40010400
 800839c:	40014000 	.word	0x40014000
 80083a0:	40014400 	.word	0x40014400
 80083a4:	40014800 	.word	0x40014800
 80083a8:	40001800 	.word	0x40001800
 80083ac:	40001c00 	.word	0x40001c00
 80083b0:	40002000 	.word	0x40002000

080083b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f023 0201 	bic.w	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4b2b      	ldr	r3, [pc, #172]	; (800848c <TIM_OC1_SetConfig+0xd8>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f023 0302 	bic.w	r3, r3, #2
 80083fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a21      	ldr	r2, [pc, #132]	; (8008490 <TIM_OC1_SetConfig+0xdc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d003      	beq.n	8008418 <TIM_OC1_SetConfig+0x64>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a20      	ldr	r2, [pc, #128]	; (8008494 <TIM_OC1_SetConfig+0xe0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d10c      	bne.n	8008432 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f023 0308 	bic.w	r3, r3, #8
 800841e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f023 0304 	bic.w	r3, r3, #4
 8008430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a16      	ldr	r2, [pc, #88]	; (8008490 <TIM_OC1_SetConfig+0xdc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_OC1_SetConfig+0x8e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a15      	ldr	r2, [pc, #84]	; (8008494 <TIM_OC1_SetConfig+0xe0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d111      	bne.n	8008466 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	621a      	str	r2, [r3, #32]
}
 8008480:	bf00      	nop
 8008482:	371c      	adds	r7, #28
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	fffeff8f 	.word	0xfffeff8f
 8008490:	40010000 	.word	0x40010000
 8008494:	40010400 	.word	0x40010400

08008498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f023 0210 	bic.w	r2, r3, #16
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4b2e      	ldr	r3, [pc, #184]	; (800857c <TIM_OC2_SetConfig+0xe4>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f023 0320 	bic.w	r3, r3, #32
 80084e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a23      	ldr	r2, [pc, #140]	; (8008580 <TIM_OC2_SetConfig+0xe8>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_OC2_SetConfig+0x68>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a22      	ldr	r2, [pc, #136]	; (8008584 <TIM_OC2_SetConfig+0xec>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d10d      	bne.n	800851c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	011b      	lsls	r3, r3, #4
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a18      	ldr	r2, [pc, #96]	; (8008580 <TIM_OC2_SetConfig+0xe8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_OC2_SetConfig+0x94>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a17      	ldr	r2, [pc, #92]	; (8008584 <TIM_OC2_SetConfig+0xec>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d113      	bne.n	8008554 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800853a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	4313      	orrs	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	feff8fff 	.word	0xfeff8fff
 8008580:	40010000 	.word	0x40010000
 8008584:	40010400 	.word	0x40010400

08008588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <TIM_OC3_SetConfig+0xe0>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a22      	ldr	r2, [pc, #136]	; (800866c <TIM_OC3_SetConfig+0xe4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d003      	beq.n	80085ee <TIM_OC3_SetConfig+0x66>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a21      	ldr	r2, [pc, #132]	; (8008670 <TIM_OC3_SetConfig+0xe8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d10d      	bne.n	800860a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a17      	ldr	r2, [pc, #92]	; (800866c <TIM_OC3_SetConfig+0xe4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_OC3_SetConfig+0x92>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a16      	ldr	r2, [pc, #88]	; (8008670 <TIM_OC3_SetConfig+0xe8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d113      	bne.n	8008642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	621a      	str	r2, [r3, #32]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	fffeff8f 	.word	0xfffeff8f
 800866c:	40010000 	.word	0x40010000
 8008670:	40010400 	.word	0x40010400

08008674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <TIM_OC4_SetConfig+0xa4>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	031b      	lsls	r3, r3, #12
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a13      	ldr	r2, [pc, #76]	; (800871c <TIM_OC4_SetConfig+0xa8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_OC4_SetConfig+0x68>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a12      	ldr	r2, [pc, #72]	; (8008720 <TIM_OC4_SetConfig+0xac>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d109      	bne.n	80086f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	019b      	lsls	r3, r3, #6
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	621a      	str	r2, [r3, #32]
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	feff8fff 	.word	0xfeff8fff
 800871c:	40010000 	.word	0x40010000
 8008720:	40010400 	.word	0x40010400

08008724 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <TIM_OC5_SetConfig+0x98>)
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	041b      	lsls	r3, r3, #16
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <TIM_OC5_SetConfig+0x9c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d003      	beq.n	8008782 <TIM_OC5_SetConfig+0x5e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a11      	ldr	r2, [pc, #68]	; (80087c4 <TIM_OC5_SetConfig+0xa0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d109      	bne.n	8008796 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008788:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	621a      	str	r2, [r3, #32]
}
 80087b0:	bf00      	nop
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	fffeff8f 	.word	0xfffeff8f
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400

080087c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <TIM_OC6_SetConfig+0x9c>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800880a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	051b      	lsls	r3, r3, #20
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a13      	ldr	r2, [pc, #76]	; (8008868 <TIM_OC6_SetConfig+0xa0>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d003      	beq.n	8008828 <TIM_OC6_SetConfig+0x60>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a12      	ldr	r2, [pc, #72]	; (800886c <TIM_OC6_SetConfig+0xa4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d109      	bne.n	800883c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800882e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	029b      	lsls	r3, r3, #10
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	feff8fff 	.word	0xfeff8fff
 8008868:	40010000 	.word	0x40010000
 800886c:	40010400 	.word	0x40010400

08008870 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <TIM_SlaveTimer_SetConfig+0x124>)
 800889c:	4013      	ands	r3, r2
 800889e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2b70      	cmp	r3, #112	; 0x70
 80088b8:	d01a      	beq.n	80088f0 <TIM_SlaveTimer_SetConfig+0x80>
 80088ba:	2b70      	cmp	r3, #112	; 0x70
 80088bc:	d860      	bhi.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
 80088be:	2b60      	cmp	r3, #96	; 0x60
 80088c0:	d054      	beq.n	800896c <TIM_SlaveTimer_SetConfig+0xfc>
 80088c2:	2b60      	cmp	r3, #96	; 0x60
 80088c4:	d85c      	bhi.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
 80088c6:	2b50      	cmp	r3, #80	; 0x50
 80088c8:	d046      	beq.n	8008958 <TIM_SlaveTimer_SetConfig+0xe8>
 80088ca:	2b50      	cmp	r3, #80	; 0x50
 80088cc:	d858      	bhi.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d019      	beq.n	8008906 <TIM_SlaveTimer_SetConfig+0x96>
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d854      	bhi.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
 80088d6:	2b30      	cmp	r3, #48	; 0x30
 80088d8:	d055      	beq.n	8008986 <TIM_SlaveTimer_SetConfig+0x116>
 80088da:	2b30      	cmp	r3, #48	; 0x30
 80088dc:	d850      	bhi.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d051      	beq.n	8008986 <TIM_SlaveTimer_SetConfig+0x116>
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d84c      	bhi.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d04d      	beq.n	8008986 <TIM_SlaveTimer_SetConfig+0x116>
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d04b      	beq.n	8008986 <TIM_SlaveTimer_SetConfig+0x116>
 80088ee:	e047      	b.n	8008980 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	68d9      	ldr	r1, [r3, #12]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f000 f8c4 	bl	8008a8c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008904:	e040      	b.n	8008988 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b05      	cmp	r3, #5
 800890c:	d101      	bne.n	8008912 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e03b      	b.n	800898a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6a1a      	ldr	r2, [r3, #32]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0201 	bic.w	r2, r2, #1
 8008928:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008938:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	4313      	orrs	r3, r2
 8008944:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	621a      	str	r2, [r3, #32]
      break;
 8008956:	e017      	b.n	8008988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	6899      	ldr	r1, [r3, #8]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	461a      	mov	r2, r3
 8008966:	f000 f817 	bl	8008998 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800896a:	e00d      	b.n	8008988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	6899      	ldr	r1, [r3, #8]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	461a      	mov	r2, r3
 800897a:	f000 f83c 	bl	80089f6 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800897e:	e003      	b.n	8008988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
      break;
 8008984:	e000      	b.n	8008988 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008986:	bf00      	nop
  }

  return status;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	fffefff8 	.word	0xfffefff8

08008998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f023 030a 	bic.w	r3, r3, #10
 80089d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f023 0210 	bic.w	r2, r3, #16
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	f043 0307 	orr.w	r3, r3, #7
 8008a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	609a      	str	r2, [r3, #8]
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	021a      	lsls	r2, r3, #8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	609a      	str	r2, [r3, #8]
}
 8008ac0:	bf00      	nop
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d101      	bne.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e06d      	b.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a30      	ldr	r2, [pc, #192]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a2f      	ldr	r2, [pc, #188]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d108      	bne.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a20      	ldr	r2, [pc, #128]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d022      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b56:	d01d      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d018      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1c      	ldr	r2, [pc, #112]	; (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d013      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1a      	ldr	r2, [pc, #104]	; (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00e      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a15      	ldr	r2, [pc, #84]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d009      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d004      	beq.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d10c      	bne.n	8008bae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40010400 	.word	0x40010400
 8008bd4:	40000400 	.word	0x40000400
 8008bd8:	40000800 	.word	0x40000800
 8008bdc:	40000c00 	.word	0x40000c00
 8008be0:	40014000 	.word	0x40014000
 8008be4:	40001800 	.word	0x40001800

08008be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e040      	b.n	8008cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fc fb22 	bl	8005290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2224      	movs	r2, #36	; 0x24
 8008c50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fbf8 	bl	8009458 <UART_SetConfig>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e022      	b.n	8008cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fe50 	bl	8009920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fed7 	bl	8009a64 <UART_CheckIdleState>
 8008cb6:	4603      	mov	r3, r0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	f040 8081 	bne.w	8008ddc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_UART_Transmit+0x26>
 8008ce0:	88fb      	ldrh	r3, [r7, #6]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e079      	b.n	8008dde <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_UART_Transmit+0x38>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e072      	b.n	8008dde <HAL_UART_Transmit+0x11e>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2221      	movs	r2, #33	; 0x21
 8008d0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d0e:	f7fc fb71 	bl	80053f4 <HAL_GetTick>
 8008d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	88fa      	ldrh	r2, [r7, #6]
 8008d18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2c:	d108      	bne.n	8008d40 <HAL_UART_Transmit+0x80>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	e003      	b.n	8008d48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008d50:	e02c      	b.n	8008dac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	2180      	movs	r1, #128	; 0x80
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 feb4 	bl	8009aca <UART_WaitOnFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e038      	b.n	8008dde <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	3302      	adds	r3, #2
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	e007      	b.n	8008d9a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1cc      	bne.n	8008d52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2140      	movs	r1, #64	; 0x40
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 fe81 	bl	8009aca <UART_WaitOnFlagUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e005      	b.n	8008dde <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e000      	b.n	8008dde <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008ddc:	2302      	movs	r3, #2
  }
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3720      	adds	r7, #32
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b08a      	sub	sp, #40	; 0x28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d13d      	bne.n	8008e78 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <HAL_UART_Receive_IT+0x22>
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e036      	b.n	8008e7a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_UART_Receive_IT+0x34>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e02f      	b.n	8008e7a <HAL_UART_Receive_IT+0x94>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d018      	beq.n	8008e68 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	613b      	str	r3, [r7, #16]
   return(result);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	623b      	str	r3, [r7, #32]
 8008e56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	69f9      	ldr	r1, [r7, #28]
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e6      	bne.n	8008e36 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 fef0 	bl	8009c54 <UART_Start_Receive_IT>
 8008e74:	4603      	mov	r3, r0
 8008e76:	e000      	b.n	8008e7a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e78:	2302      	movs	r3, #2
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3728      	adds	r7, #40	; 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b0ba      	sub	sp, #232	; 0xe8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008eaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008eae:	f640 030f 	movw	r3, #2063	; 0x80f
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d115      	bne.n	8008eec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00f      	beq.n	8008eec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 828f 	beq.w	8009400 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	4798      	blx	r3
      }
      return;
 8008eea:	e289      	b.n	8009400 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 8117 	beq.w	8009124 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f06:	4b85      	ldr	r3, [pc, #532]	; (800911c <HAL_UART_IRQHandler+0x298>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 810a 	beq.w	8009124 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d011      	beq.n	8008f40 <HAL_UART_IRQHandler+0xbc>
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f36:	f043 0201 	orr.w	r2, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f44:	f003 0302 	and.w	r3, r3, #2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d011      	beq.n	8008f70 <HAL_UART_IRQHandler+0xec>
 8008f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f66:	f043 0204 	orr.w	r2, r3, #4
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d011      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x11c>
 8008f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00b      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2204      	movs	r2, #4
 8008f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f96:	f043 0202 	orr.w	r2, r3, #2
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d017      	beq.n	8008fdc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d105      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd2:	f043 0208 	orr.w	r2, r3, #8
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d012      	beq.n	800900e <HAL_UART_IRQHandler+0x18a>
 8008fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00c      	beq.n	800900e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009004:	f043 0220 	orr.w	r2, r3, #32
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 81f5 	beq.w	8009404 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800901a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00d      	beq.n	8009042 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d005      	beq.n	8009066 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800905a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800905e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009062:	2b00      	cmp	r3, #0
 8009064:	d04f      	beq.n	8009106 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 febe 	bl	8009de8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	d141      	bne.n	80090fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1d9      	bne.n	800907a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d013      	beq.n	80090f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d2:	4a13      	ldr	r2, [pc, #76]	; (8009120 <HAL_UART_IRQHandler+0x29c>)
 80090d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fc fae8 	bl	80056b0 <HAL_DMA_Abort_IT>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d017      	beq.n	8009116 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f4:	e00f      	b.n	8009116 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f998 	bl	800942c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090fc:	e00b      	b.n	8009116 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f994 	bl	800942c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009104:	e007      	b.n	8009116 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f990 	bl	800942c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009114:	e176      	b.n	8009404 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009116:	bf00      	nop
    return;
 8009118:	e174      	b.n	8009404 <HAL_UART_IRQHandler+0x580>
 800911a:	bf00      	nop
 800911c:	04000120 	.word	0x04000120
 8009120:	08009eaf 	.word	0x08009eaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009128:	2b01      	cmp	r3, #1
 800912a:	f040 8144 	bne.w	80093b6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800912e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009132:	f003 0310 	and.w	r3, r3, #16
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 813d 	beq.w	80093b6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8136 	beq.w	80093b6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2210      	movs	r2, #16
 8009150:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	f040 80b2 	bne.w	80092c6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800916e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8148 	beq.w	8009408 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800917e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009182:	429a      	cmp	r2, r3
 8009184:	f080 8140 	bcs.w	8009408 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800918e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919c:	f000 8085 	beq.w	80092aa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1da      	bne.n	80091a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3308      	adds	r3, #8
 800920a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800920e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e1      	bne.n	80091ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800923c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3308      	adds	r3, #8
 8009246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800924a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800924c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e3      	bne.n	8009226 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800928c:	65bb      	str	r3, [r7, #88]	; 0x58
 800928e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800929a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e4      	bne.n	800926a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fc f993 	bl	80055d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f8be 	bl	8009440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092c4:	e0a0      	b.n	8009408 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8092 	beq.w	800940c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80092e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 808d 	beq.w	800940c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009314:	647b      	str	r3, [r7, #68]	; 0x44
 8009316:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800931a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e4      	bne.n	80092f2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3308      	adds	r3, #8
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	623b      	str	r3, [r7, #32]
   return(result);
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800934c:	633a      	str	r2, [r7, #48]	; 0x30
 800934e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e3      	bne.n	8009328 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009394:	61fb      	str	r3, [r7, #28]
 8009396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	69b9      	ldr	r1, [r7, #24]
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	617b      	str	r3, [r7, #20]
   return(result);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e4      	bne.n	8009372 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f846 	bl	8009440 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093b4:	e02a      	b.n	800940c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80093c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d008      	beq.n	80093e0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01c      	beq.n	8009410 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
    }
    return;
 80093de:	e017      	b.n	8009410 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d012      	beq.n	8009412 <HAL_UART_IRQHandler+0x58e>
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fd6e 	bl	8009eda <UART_EndTransmit_IT>
    return;
 80093fe:	e008      	b.n	8009412 <HAL_UART_IRQHandler+0x58e>
      return;
 8009400:	bf00      	nop
 8009402:	e006      	b.n	8009412 <HAL_UART_IRQHandler+0x58e>
    return;
 8009404:	bf00      	nop
 8009406:	e004      	b.n	8009412 <HAL_UART_IRQHandler+0x58e>
      return;
 8009408:	bf00      	nop
 800940a:	e002      	b.n	8009412 <HAL_UART_IRQHandler+0x58e>
      return;
 800940c:	bf00      	nop
 800940e:	e000      	b.n	8009412 <HAL_UART_IRQHandler+0x58e>
    return;
 8009410:	bf00      	nop
  }

}
 8009412:	37e8      	adds	r7, #232	; 0xe8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4ba6      	ldr	r3, [pc, #664]	; (800971c <UART_SetConfig+0x2c4>)
 8009484:	4013      	ands	r3, r2
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	6812      	ldr	r2, [r2, #0]
 800948a:	6979      	ldr	r1, [r7, #20]
 800948c:	430b      	orrs	r3, r1
 800948e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a94      	ldr	r2, [pc, #592]	; (8009720 <UART_SetConfig+0x2c8>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d120      	bne.n	8009516 <UART_SetConfig+0xbe>
 80094d4:	4b93      	ldr	r3, [pc, #588]	; (8009724 <UART_SetConfig+0x2cc>)
 80094d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d816      	bhi.n	8009510 <UART_SetConfig+0xb8>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <UART_SetConfig+0x90>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	08009505 	.word	0x08009505
 80094f0:	080094ff 	.word	0x080094ff
 80094f4:	0800950b 	.word	0x0800950b
 80094f8:	2301      	movs	r3, #1
 80094fa:	77fb      	strb	r3, [r7, #31]
 80094fc:	e150      	b.n	80097a0 <UART_SetConfig+0x348>
 80094fe:	2302      	movs	r3, #2
 8009500:	77fb      	strb	r3, [r7, #31]
 8009502:	e14d      	b.n	80097a0 <UART_SetConfig+0x348>
 8009504:	2304      	movs	r3, #4
 8009506:	77fb      	strb	r3, [r7, #31]
 8009508:	e14a      	b.n	80097a0 <UART_SetConfig+0x348>
 800950a:	2308      	movs	r3, #8
 800950c:	77fb      	strb	r3, [r7, #31]
 800950e:	e147      	b.n	80097a0 <UART_SetConfig+0x348>
 8009510:	2310      	movs	r3, #16
 8009512:	77fb      	strb	r3, [r7, #31]
 8009514:	e144      	b.n	80097a0 <UART_SetConfig+0x348>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a83      	ldr	r2, [pc, #524]	; (8009728 <UART_SetConfig+0x2d0>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d132      	bne.n	8009586 <UART_SetConfig+0x12e>
 8009520:	4b80      	ldr	r3, [pc, #512]	; (8009724 <UART_SetConfig+0x2cc>)
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009526:	f003 030c 	and.w	r3, r3, #12
 800952a:	2b0c      	cmp	r3, #12
 800952c:	d828      	bhi.n	8009580 <UART_SetConfig+0x128>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <UART_SetConfig+0xdc>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009569 	.word	0x08009569
 8009538:	08009581 	.word	0x08009581
 800953c:	08009581 	.word	0x08009581
 8009540:	08009581 	.word	0x08009581
 8009544:	08009575 	.word	0x08009575
 8009548:	08009581 	.word	0x08009581
 800954c:	08009581 	.word	0x08009581
 8009550:	08009581 	.word	0x08009581
 8009554:	0800956f 	.word	0x0800956f
 8009558:	08009581 	.word	0x08009581
 800955c:	08009581 	.word	0x08009581
 8009560:	08009581 	.word	0x08009581
 8009564:	0800957b 	.word	0x0800957b
 8009568:	2300      	movs	r3, #0
 800956a:	77fb      	strb	r3, [r7, #31]
 800956c:	e118      	b.n	80097a0 <UART_SetConfig+0x348>
 800956e:	2302      	movs	r3, #2
 8009570:	77fb      	strb	r3, [r7, #31]
 8009572:	e115      	b.n	80097a0 <UART_SetConfig+0x348>
 8009574:	2304      	movs	r3, #4
 8009576:	77fb      	strb	r3, [r7, #31]
 8009578:	e112      	b.n	80097a0 <UART_SetConfig+0x348>
 800957a:	2308      	movs	r3, #8
 800957c:	77fb      	strb	r3, [r7, #31]
 800957e:	e10f      	b.n	80097a0 <UART_SetConfig+0x348>
 8009580:	2310      	movs	r3, #16
 8009582:	77fb      	strb	r3, [r7, #31]
 8009584:	e10c      	b.n	80097a0 <UART_SetConfig+0x348>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a68      	ldr	r2, [pc, #416]	; (800972c <UART_SetConfig+0x2d4>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d120      	bne.n	80095d2 <UART_SetConfig+0x17a>
 8009590:	4b64      	ldr	r3, [pc, #400]	; (8009724 <UART_SetConfig+0x2cc>)
 8009592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800959a:	2b30      	cmp	r3, #48	; 0x30
 800959c:	d013      	beq.n	80095c6 <UART_SetConfig+0x16e>
 800959e:	2b30      	cmp	r3, #48	; 0x30
 80095a0:	d814      	bhi.n	80095cc <UART_SetConfig+0x174>
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d009      	beq.n	80095ba <UART_SetConfig+0x162>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d810      	bhi.n	80095cc <UART_SetConfig+0x174>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <UART_SetConfig+0x15c>
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d006      	beq.n	80095c0 <UART_SetConfig+0x168>
 80095b2:	e00b      	b.n	80095cc <UART_SetConfig+0x174>
 80095b4:	2300      	movs	r3, #0
 80095b6:	77fb      	strb	r3, [r7, #31]
 80095b8:	e0f2      	b.n	80097a0 <UART_SetConfig+0x348>
 80095ba:	2302      	movs	r3, #2
 80095bc:	77fb      	strb	r3, [r7, #31]
 80095be:	e0ef      	b.n	80097a0 <UART_SetConfig+0x348>
 80095c0:	2304      	movs	r3, #4
 80095c2:	77fb      	strb	r3, [r7, #31]
 80095c4:	e0ec      	b.n	80097a0 <UART_SetConfig+0x348>
 80095c6:	2308      	movs	r3, #8
 80095c8:	77fb      	strb	r3, [r7, #31]
 80095ca:	e0e9      	b.n	80097a0 <UART_SetConfig+0x348>
 80095cc:	2310      	movs	r3, #16
 80095ce:	77fb      	strb	r3, [r7, #31]
 80095d0:	e0e6      	b.n	80097a0 <UART_SetConfig+0x348>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a56      	ldr	r2, [pc, #344]	; (8009730 <UART_SetConfig+0x2d8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d120      	bne.n	800961e <UART_SetConfig+0x1c6>
 80095dc:	4b51      	ldr	r3, [pc, #324]	; (8009724 <UART_SetConfig+0x2cc>)
 80095de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095e6:	2bc0      	cmp	r3, #192	; 0xc0
 80095e8:	d013      	beq.n	8009612 <UART_SetConfig+0x1ba>
 80095ea:	2bc0      	cmp	r3, #192	; 0xc0
 80095ec:	d814      	bhi.n	8009618 <UART_SetConfig+0x1c0>
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d009      	beq.n	8009606 <UART_SetConfig+0x1ae>
 80095f2:	2b80      	cmp	r3, #128	; 0x80
 80095f4:	d810      	bhi.n	8009618 <UART_SetConfig+0x1c0>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <UART_SetConfig+0x1a8>
 80095fa:	2b40      	cmp	r3, #64	; 0x40
 80095fc:	d006      	beq.n	800960c <UART_SetConfig+0x1b4>
 80095fe:	e00b      	b.n	8009618 <UART_SetConfig+0x1c0>
 8009600:	2300      	movs	r3, #0
 8009602:	77fb      	strb	r3, [r7, #31]
 8009604:	e0cc      	b.n	80097a0 <UART_SetConfig+0x348>
 8009606:	2302      	movs	r3, #2
 8009608:	77fb      	strb	r3, [r7, #31]
 800960a:	e0c9      	b.n	80097a0 <UART_SetConfig+0x348>
 800960c:	2304      	movs	r3, #4
 800960e:	77fb      	strb	r3, [r7, #31]
 8009610:	e0c6      	b.n	80097a0 <UART_SetConfig+0x348>
 8009612:	2308      	movs	r3, #8
 8009614:	77fb      	strb	r3, [r7, #31]
 8009616:	e0c3      	b.n	80097a0 <UART_SetConfig+0x348>
 8009618:	2310      	movs	r3, #16
 800961a:	77fb      	strb	r3, [r7, #31]
 800961c:	e0c0      	b.n	80097a0 <UART_SetConfig+0x348>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a44      	ldr	r2, [pc, #272]	; (8009734 <UART_SetConfig+0x2dc>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d125      	bne.n	8009674 <UART_SetConfig+0x21c>
 8009628:	4b3e      	ldr	r3, [pc, #248]	; (8009724 <UART_SetConfig+0x2cc>)
 800962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009636:	d017      	beq.n	8009668 <UART_SetConfig+0x210>
 8009638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800963c:	d817      	bhi.n	800966e <UART_SetConfig+0x216>
 800963e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009642:	d00b      	beq.n	800965c <UART_SetConfig+0x204>
 8009644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009648:	d811      	bhi.n	800966e <UART_SetConfig+0x216>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <UART_SetConfig+0x1fe>
 800964e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009652:	d006      	beq.n	8009662 <UART_SetConfig+0x20a>
 8009654:	e00b      	b.n	800966e <UART_SetConfig+0x216>
 8009656:	2300      	movs	r3, #0
 8009658:	77fb      	strb	r3, [r7, #31]
 800965a:	e0a1      	b.n	80097a0 <UART_SetConfig+0x348>
 800965c:	2302      	movs	r3, #2
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e09e      	b.n	80097a0 <UART_SetConfig+0x348>
 8009662:	2304      	movs	r3, #4
 8009664:	77fb      	strb	r3, [r7, #31]
 8009666:	e09b      	b.n	80097a0 <UART_SetConfig+0x348>
 8009668:	2308      	movs	r3, #8
 800966a:	77fb      	strb	r3, [r7, #31]
 800966c:	e098      	b.n	80097a0 <UART_SetConfig+0x348>
 800966e:	2310      	movs	r3, #16
 8009670:	77fb      	strb	r3, [r7, #31]
 8009672:	e095      	b.n	80097a0 <UART_SetConfig+0x348>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a2f      	ldr	r2, [pc, #188]	; (8009738 <UART_SetConfig+0x2e0>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d125      	bne.n	80096ca <UART_SetConfig+0x272>
 800967e:	4b29      	ldr	r3, [pc, #164]	; (8009724 <UART_SetConfig+0x2cc>)
 8009680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800968c:	d017      	beq.n	80096be <UART_SetConfig+0x266>
 800968e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009692:	d817      	bhi.n	80096c4 <UART_SetConfig+0x26c>
 8009694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009698:	d00b      	beq.n	80096b2 <UART_SetConfig+0x25a>
 800969a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800969e:	d811      	bhi.n	80096c4 <UART_SetConfig+0x26c>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <UART_SetConfig+0x254>
 80096a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096a8:	d006      	beq.n	80096b8 <UART_SetConfig+0x260>
 80096aa:	e00b      	b.n	80096c4 <UART_SetConfig+0x26c>
 80096ac:	2301      	movs	r3, #1
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e076      	b.n	80097a0 <UART_SetConfig+0x348>
 80096b2:	2302      	movs	r3, #2
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e073      	b.n	80097a0 <UART_SetConfig+0x348>
 80096b8:	2304      	movs	r3, #4
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e070      	b.n	80097a0 <UART_SetConfig+0x348>
 80096be:	2308      	movs	r3, #8
 80096c0:	77fb      	strb	r3, [r7, #31]
 80096c2:	e06d      	b.n	80097a0 <UART_SetConfig+0x348>
 80096c4:	2310      	movs	r3, #16
 80096c6:	77fb      	strb	r3, [r7, #31]
 80096c8:	e06a      	b.n	80097a0 <UART_SetConfig+0x348>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a1b      	ldr	r2, [pc, #108]	; (800973c <UART_SetConfig+0x2e4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d138      	bne.n	8009746 <UART_SetConfig+0x2ee>
 80096d4:	4b13      	ldr	r3, [pc, #76]	; (8009724 <UART_SetConfig+0x2cc>)
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80096de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096e2:	d017      	beq.n	8009714 <UART_SetConfig+0x2bc>
 80096e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096e8:	d82a      	bhi.n	8009740 <UART_SetConfig+0x2e8>
 80096ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ee:	d00b      	beq.n	8009708 <UART_SetConfig+0x2b0>
 80096f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096f4:	d824      	bhi.n	8009740 <UART_SetConfig+0x2e8>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <UART_SetConfig+0x2aa>
 80096fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fe:	d006      	beq.n	800970e <UART_SetConfig+0x2b6>
 8009700:	e01e      	b.n	8009740 <UART_SetConfig+0x2e8>
 8009702:	2300      	movs	r3, #0
 8009704:	77fb      	strb	r3, [r7, #31]
 8009706:	e04b      	b.n	80097a0 <UART_SetConfig+0x348>
 8009708:	2302      	movs	r3, #2
 800970a:	77fb      	strb	r3, [r7, #31]
 800970c:	e048      	b.n	80097a0 <UART_SetConfig+0x348>
 800970e:	2304      	movs	r3, #4
 8009710:	77fb      	strb	r3, [r7, #31]
 8009712:	e045      	b.n	80097a0 <UART_SetConfig+0x348>
 8009714:	2308      	movs	r3, #8
 8009716:	77fb      	strb	r3, [r7, #31]
 8009718:	e042      	b.n	80097a0 <UART_SetConfig+0x348>
 800971a:	bf00      	nop
 800971c:	efff69f3 	.word	0xefff69f3
 8009720:	40011000 	.word	0x40011000
 8009724:	40023800 	.word	0x40023800
 8009728:	40004400 	.word	0x40004400
 800972c:	40004800 	.word	0x40004800
 8009730:	40004c00 	.word	0x40004c00
 8009734:	40005000 	.word	0x40005000
 8009738:	40011400 	.word	0x40011400
 800973c:	40007800 	.word	0x40007800
 8009740:	2310      	movs	r3, #16
 8009742:	77fb      	strb	r3, [r7, #31]
 8009744:	e02c      	b.n	80097a0 <UART_SetConfig+0x348>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a72      	ldr	r2, [pc, #456]	; (8009914 <UART_SetConfig+0x4bc>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d125      	bne.n	800979c <UART_SetConfig+0x344>
 8009750:	4b71      	ldr	r3, [pc, #452]	; (8009918 <UART_SetConfig+0x4c0>)
 8009752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800975a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800975e:	d017      	beq.n	8009790 <UART_SetConfig+0x338>
 8009760:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009764:	d817      	bhi.n	8009796 <UART_SetConfig+0x33e>
 8009766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800976a:	d00b      	beq.n	8009784 <UART_SetConfig+0x32c>
 800976c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009770:	d811      	bhi.n	8009796 <UART_SetConfig+0x33e>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <UART_SetConfig+0x326>
 8009776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800977a:	d006      	beq.n	800978a <UART_SetConfig+0x332>
 800977c:	e00b      	b.n	8009796 <UART_SetConfig+0x33e>
 800977e:	2300      	movs	r3, #0
 8009780:	77fb      	strb	r3, [r7, #31]
 8009782:	e00d      	b.n	80097a0 <UART_SetConfig+0x348>
 8009784:	2302      	movs	r3, #2
 8009786:	77fb      	strb	r3, [r7, #31]
 8009788:	e00a      	b.n	80097a0 <UART_SetConfig+0x348>
 800978a:	2304      	movs	r3, #4
 800978c:	77fb      	strb	r3, [r7, #31]
 800978e:	e007      	b.n	80097a0 <UART_SetConfig+0x348>
 8009790:	2308      	movs	r3, #8
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e004      	b.n	80097a0 <UART_SetConfig+0x348>
 8009796:	2310      	movs	r3, #16
 8009798:	77fb      	strb	r3, [r7, #31]
 800979a:	e001      	b.n	80097a0 <UART_SetConfig+0x348>
 800979c:	2310      	movs	r3, #16
 800979e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097a8:	d15b      	bne.n	8009862 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80097aa:	7ffb      	ldrb	r3, [r7, #31]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d828      	bhi.n	8009802 <UART_SetConfig+0x3aa>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <UART_SetConfig+0x360>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097dd 	.word	0x080097dd
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	08009803 	.word	0x08009803
 80097c8:	080097f3 	.word	0x080097f3
 80097cc:	08009803 	.word	0x08009803
 80097d0:	08009803 	.word	0x08009803
 80097d4:	08009803 	.word	0x08009803
 80097d8:	080097fb 	.word	0x080097fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097dc:	f7fd fc68 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 80097e0:	61b8      	str	r0, [r7, #24]
        break;
 80097e2:	e013      	b.n	800980c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097e4:	f7fd fc78 	bl	80070d8 <HAL_RCC_GetPCLK2Freq>
 80097e8:	61b8      	str	r0, [r7, #24]
        break;
 80097ea:	e00f      	b.n	800980c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097ec:	4b4b      	ldr	r3, [pc, #300]	; (800991c <UART_SetConfig+0x4c4>)
 80097ee:	61bb      	str	r3, [r7, #24]
        break;
 80097f0:	e00c      	b.n	800980c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097f2:	f7fd fb4b 	bl	8006e8c <HAL_RCC_GetSysClockFreq>
 80097f6:	61b8      	str	r0, [r7, #24]
        break;
 80097f8:	e008      	b.n	800980c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097fe:	61bb      	str	r3, [r7, #24]
        break;
 8009800:	e004      	b.n	800980c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	77bb      	strb	r3, [r7, #30]
        break;
 800980a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d074      	beq.n	80098fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	005a      	lsls	r2, r3, #1
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	085b      	lsrs	r3, r3, #1
 800981c:	441a      	add	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	fbb2 f3f3 	udiv	r3, r2, r3
 8009826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b0f      	cmp	r3, #15
 800982c:	d916      	bls.n	800985c <UART_SetConfig+0x404>
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009834:	d212      	bcs.n	800985c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	b29b      	uxth	r3, r3
 800983a:	f023 030f 	bic.w	r3, r3, #15
 800983e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	085b      	lsrs	r3, r3, #1
 8009844:	b29b      	uxth	r3, r3
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	b29a      	uxth	r2, r3
 800984c:	89fb      	ldrh	r3, [r7, #14]
 800984e:	4313      	orrs	r3, r2
 8009850:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	89fa      	ldrh	r2, [r7, #14]
 8009858:	60da      	str	r2, [r3, #12]
 800985a:	e04f      	b.n	80098fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	77bb      	strb	r3, [r7, #30]
 8009860:	e04c      	b.n	80098fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009862:	7ffb      	ldrb	r3, [r7, #31]
 8009864:	2b08      	cmp	r3, #8
 8009866:	d828      	bhi.n	80098ba <UART_SetConfig+0x462>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <UART_SetConfig+0x418>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	080098bb 	.word	0x080098bb
 8009880:	080098ab 	.word	0x080098ab
 8009884:	080098bb 	.word	0x080098bb
 8009888:	080098bb 	.word	0x080098bb
 800988c:	080098bb 	.word	0x080098bb
 8009890:	080098b3 	.word	0x080098b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009894:	f7fd fc0c 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8009898:	61b8      	str	r0, [r7, #24]
        break;
 800989a:	e013      	b.n	80098c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800989c:	f7fd fc1c 	bl	80070d8 <HAL_RCC_GetPCLK2Freq>
 80098a0:	61b8      	str	r0, [r7, #24]
        break;
 80098a2:	e00f      	b.n	80098c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098a4:	4b1d      	ldr	r3, [pc, #116]	; (800991c <UART_SetConfig+0x4c4>)
 80098a6:	61bb      	str	r3, [r7, #24]
        break;
 80098a8:	e00c      	b.n	80098c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098aa:	f7fd faef 	bl	8006e8c <HAL_RCC_GetSysClockFreq>
 80098ae:	61b8      	str	r0, [r7, #24]
        break;
 80098b0:	e008      	b.n	80098c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098b6:	61bb      	str	r3, [r7, #24]
        break;
 80098b8:	e004      	b.n	80098c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	77bb      	strb	r3, [r7, #30]
        break;
 80098c2:	bf00      	nop
    }

    if (pclk != 0U)
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d018      	beq.n	80098fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	085a      	lsrs	r2, r3, #1
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	441a      	add	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b0f      	cmp	r3, #15
 80098e2:	d909      	bls.n	80098f8 <UART_SetConfig+0x4a0>
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ea:	d205      	bcs.n	80098f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	e001      	b.n	80098fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009908:	7fbb      	ldrb	r3, [r7, #30]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	40007c00 	.word	0x40007c00
 8009918:	40023800 	.word	0x40023800
 800991c:	00f42400 	.word	0x00f42400

08009920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	f003 0308 	and.w	r3, r3, #8
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01a      	beq.n	8009a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a1e:	d10a      	bne.n	8009a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	605a      	str	r2, [r3, #4]
  }
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a74:	f7fb fcbe 	bl	80053f4 <HAL_GetTick>
 8009a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0308 	and.w	r3, r3, #8
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d10e      	bne.n	8009aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f817 	bl	8009aca <UART_WaitOnFlagUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e00d      	b.n	8009ac2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b09c      	sub	sp, #112	; 0x70
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ada:	e0a5      	b.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	f000 80a1 	beq.w	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7fb fc85 	bl	80053f4 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <UART_WaitOnFlagUntilTimeout+0x32>
 8009af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d13e      	bne.n	8009b7a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b10:	667b      	str	r3, [r7, #100]	; 0x64
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e6      	bne.n	8009afc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	663b      	str	r3, [r7, #96]	; 0x60
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e5      	bne.n	8009b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e067      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d04f      	beq.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b96:	d147      	bne.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	613b      	str	r3, [r7, #16]
   return(result);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f023 0301 	bic.w	r3, r3, #1
 8009bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bf4:	623a      	str	r2, [r7, #32]
 8009bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	69f9      	ldr	r1, [r7, #28]
 8009bfa:	6a3a      	ldr	r2, [r7, #32]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e5      	bne.n	8009bd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2220      	movs	r2, #32
 8009c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e010      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	69da      	ldr	r2, [r3, #28]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	4013      	ands	r3, r2
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	f43f af4a 	beq.w	8009adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3770      	adds	r7, #112	; 0x70
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b097      	sub	sp, #92	; 0x5c
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c86:	d10e      	bne.n	8009ca6 <UART_Start_Receive_IT+0x52>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d105      	bne.n	8009c9c <UART_Start_Receive_IT+0x48>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c9a:	e02d      	b.n	8009cf8 <UART_Start_Receive_IT+0xa4>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	22ff      	movs	r2, #255	; 0xff
 8009ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ca4:	e028      	b.n	8009cf8 <UART_Start_Receive_IT+0xa4>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10d      	bne.n	8009cca <UART_Start_Receive_IT+0x76>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <UART_Start_Receive_IT+0x6c>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	22ff      	movs	r2, #255	; 0xff
 8009cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cbe:	e01b      	b.n	8009cf8 <UART_Start_Receive_IT+0xa4>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	227f      	movs	r2, #127	; 0x7f
 8009cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cc8:	e016      	b.n	8009cf8 <UART_Start_Receive_IT+0xa4>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cd2:	d10d      	bne.n	8009cf0 <UART_Start_Receive_IT+0x9c>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <UART_Start_Receive_IT+0x92>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	227f      	movs	r2, #127	; 0x7f
 8009ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ce4:	e008      	b.n	8009cf8 <UART_Start_Receive_IT+0xa4>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	223f      	movs	r2, #63	; 0x3f
 8009cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cee:	e003      	b.n	8009cf8 <UART_Start_Receive_IT+0xa4>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2222      	movs	r2, #34	; 0x22
 8009d04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	f043 0301 	orr.w	r3, r3, #1
 8009d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d26:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d42:	d107      	bne.n	8009d54 <UART_Start_Receive_IT+0x100>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4a24      	ldr	r2, [pc, #144]	; (8009de0 <UART_Start_Receive_IT+0x18c>)
 8009d50:	665a      	str	r2, [r3, #100]	; 0x64
 8009d52:	e002      	b.n	8009d5a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a23      	ldr	r2, [pc, #140]	; (8009de4 <UART_Start_Receive_IT+0x190>)
 8009d58:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d019      	beq.n	8009d9e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e6      	bne.n	8009d6a <UART_Start_Receive_IT+0x116>
 8009d9c:	e018      	b.n	8009dd0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	613b      	str	r3, [r7, #16]
   return(result);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f043 0320 	orr.w	r3, r3, #32
 8009db2:	653b      	str	r3, [r7, #80]	; 0x50
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dbc:	623b      	str	r3, [r7, #32]
 8009dbe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	69f9      	ldr	r1, [r7, #28]
 8009dc2:	6a3a      	ldr	r2, [r7, #32]
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e6      	bne.n	8009d9e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	375c      	adds	r7, #92	; 0x5c
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	0800a08b 	.word	0x0800a08b
 8009de4:	08009f2f 	.word	0x08009f2f

08009de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b095      	sub	sp, #84	; 0x54
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e6      	bne.n	8009df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	f023 0301 	bic.w	r3, r3, #1
 8009e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e5      	bne.n	8009e22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d118      	bne.n	8009e90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f023 0310 	bic.w	r3, r3, #16
 8009e72:	647b      	str	r3, [r7, #68]	; 0x44
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6979      	ldr	r1, [r7, #20]
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	613b      	str	r3, [r7, #16]
   return(result);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009ea2:	bf00      	nop
 8009ea4:	3754      	adds	r7, #84	; 0x54
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7ff faad 	bl	800942c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b088      	sub	sp, #32
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6979      	ldr	r1, [r7, #20]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e6      	bne.n	8009ee2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff fa79 	bl	8009418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f26:	bf00      	nop
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b096      	sub	sp, #88	; 0x58
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f44:	2b22      	cmp	r3, #34	; 0x22
 8009f46:	f040 8094 	bne.w	800a072 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f54:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009f58:	b2d9      	uxtb	r1, r3
 8009f5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f64:	400a      	ands	r2, r1
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d177      	bne.n	800a082 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	e853 3f00 	ldrex	r3, [r3]
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	461a      	mov	r2, r3
 8009fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8009fb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fb8:	e841 2300 	strex	r3, r2, [r1]
 8009fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e6      	bne.n	8009f92 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	f023 0301 	bic.w	r3, r3, #1
 8009fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fe4:	633a      	str	r2, [r7, #48]	; 0x30
 8009fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e5      	bne.n	8009fc4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d12e      	bne.n	800a06a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0310 	bic.w	r3, r3, #16
 800a026:	64bb      	str	r3, [r7, #72]	; 0x48
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	69b9      	ldr	r1, [r7, #24]
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	617b      	str	r3, [r7, #20]
   return(result);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e6      	bne.n	800a012 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d103      	bne.n	800a05a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2210      	movs	r2, #16
 800a058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff f9ec 	bl	8009440 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a068:	e00b      	b.n	800a082 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f8 fdbc 	bl	8002be8 <HAL_UART_RxCpltCallback>
}
 800a070:	e007      	b.n	800a082 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	699a      	ldr	r2, [r3, #24]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0208 	orr.w	r2, r2, #8
 800a080:	619a      	str	r2, [r3, #24]
}
 800a082:	bf00      	nop
 800a084:	3758      	adds	r7, #88	; 0x58
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b096      	sub	sp, #88	; 0x58
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a098:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0a0:	2b22      	cmp	r3, #34	; 0x22
 800a0a2:	f040 8094 	bne.w	800a1ce <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a0b6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a0ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a0be:	4013      	ands	r3, r2
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ca:	1c9a      	adds	r2, r3, #2
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d177      	bne.n	800a1de <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10c:	643b      	str	r3, [r7, #64]	; 0x40
 800a10e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e6      	bne.n	800a0ee <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3308      	adds	r3, #8
 800a126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	e853 3f00 	ldrex	r3, [r3]
 800a12e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f023 0301 	bic.w	r3, r3, #1
 800a136:	64bb      	str	r3, [r7, #72]	; 0x48
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3308      	adds	r3, #8
 800a13e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a140:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a148:	e841 2300 	strex	r3, r2, [r1]
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e5      	bne.n	800a120 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2220      	movs	r2, #32
 800a158:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a164:	2b01      	cmp	r3, #1
 800a166:	d12e      	bne.n	800a1c6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f023 0310 	bic.w	r3, r3, #16
 800a182:	647b      	str	r3, [r7, #68]	; 0x44
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	6979      	ldr	r1, [r7, #20]
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	613b      	str	r3, [r7, #16]
   return(result);
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e6      	bne.n	800a16e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f003 0310 	and.w	r3, r3, #16
 800a1aa:	2b10      	cmp	r3, #16
 800a1ac:	d103      	bne.n	800a1b6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2210      	movs	r2, #16
 800a1b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff f93e 	bl	8009440 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1c4:	e00b      	b.n	800a1de <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7f8 fd0e 	bl	8002be8 <HAL_UART_RxCpltCallback>
}
 800a1cc:	e007      	b.n	800a1de <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	699a      	ldr	r2, [r3, #24]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f042 0208 	orr.w	r2, r2, #8
 800a1dc:	619a      	str	r2, [r3, #24]
}
 800a1de:	bf00      	nop
 800a1e0:	3758      	adds	r7, #88	; 0x58
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1e6:	b480      	push	{r7}
 800a1e8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a1ea:	bf00      	nop
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1fa:	f3ef 8305 	mrs	r3, IPSR
 800a1fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800a200:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10f      	bne.n	800a226 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a206:	f3ef 8310 	mrs	r3, PRIMASK
 800a20a:	607b      	str	r3, [r7, #4]
  return(result);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d105      	bne.n	800a21e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a212:	f3ef 8311 	mrs	r3, BASEPRI
 800a216:	603b      	str	r3, [r7, #0]
  return(result);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d007      	beq.n	800a22e <osKernelInitialize+0x3a>
 800a21e:	4b0e      	ldr	r3, [pc, #56]	; (800a258 <osKernelInitialize+0x64>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d103      	bne.n	800a22e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a226:	f06f 0305 	mvn.w	r3, #5
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e00c      	b.n	800a248 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a22e:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <osKernelInitialize+0x64>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d105      	bne.n	800a242 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a236:	4b08      	ldr	r3, [pc, #32]	; (800a258 <osKernelInitialize+0x64>)
 800a238:	2201      	movs	r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	e002      	b.n	800a248 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a248:	68fb      	ldr	r3, [r7, #12]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	200007d0 	.word	0x200007d0

0800a25c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a262:	f3ef 8305 	mrs	r3, IPSR
 800a266:	60bb      	str	r3, [r7, #8]
  return(result);
 800a268:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10f      	bne.n	800a28e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a26e:	f3ef 8310 	mrs	r3, PRIMASK
 800a272:	607b      	str	r3, [r7, #4]
  return(result);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a27a:	f3ef 8311 	mrs	r3, BASEPRI
 800a27e:	603b      	str	r3, [r7, #0]
  return(result);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d007      	beq.n	800a296 <osKernelStart+0x3a>
 800a286:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <osKernelStart+0x68>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d103      	bne.n	800a296 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a28e:	f06f 0305 	mvn.w	r3, #5
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e010      	b.n	800a2b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <osKernelStart+0x68>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d109      	bne.n	800a2b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a29e:	f7ff ffa2 	bl	800a1e6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <osKernelStart+0x68>)
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2a8:	f002 f9c2 	bl	800c630 <vTaskStartScheduler>
      stat = osOK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e002      	b.n	800a2b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200007d0 	.word	0x200007d0

0800a2c8 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a2cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
	...

0800a2dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b090      	sub	sp, #64	; 0x40
 800a2e0:	af04      	add	r7, sp, #16
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ec:	f3ef 8305 	mrs	r3, IPSR
 800a2f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a2f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f040 808f 	bne.w	800a418 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a306:	f3ef 8311 	mrs	r3, BASEPRI
 800a30a:	617b      	str	r3, [r7, #20]
  return(result);
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <osThreadNew+0x3e>
 800a312:	4b44      	ldr	r3, [pc, #272]	; (800a424 <osThreadNew+0x148>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d07e      	beq.n	800a418 <osThreadNew+0x13c>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d07b      	beq.n	800a418 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a320:	2380      	movs	r3, #128	; 0x80
 800a322:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a324:	2318      	movs	r3, #24
 800a326:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a32c:	f04f 33ff 	mov.w	r3, #4294967295
 800a330:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d045      	beq.n	800a3c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <osThreadNew+0x6a>
        name = attr->name;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	2b00      	cmp	r3, #0
 800a358:	d008      	beq.n	800a36c <osThreadNew+0x90>
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	2b38      	cmp	r3, #56	; 0x38
 800a35e:	d805      	bhi.n	800a36c <osThreadNew+0x90>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <osThreadNew+0x94>
        return (NULL);
 800a36c:	2300      	movs	r3, #0
 800a36e:	e054      	b.n	800a41a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	695b      	ldr	r3, [r3, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d003      	beq.n	800a380 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	089b      	lsrs	r3, r3, #2
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00e      	beq.n	800a3a6 <osThreadNew+0xca>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	2bbb      	cmp	r3, #187	; 0xbb
 800a38e:	d90a      	bls.n	800a3a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a394:	2b00      	cmp	r3, #0
 800a396:	d006      	beq.n	800a3a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <osThreadNew+0xca>
        mem = 1;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	623b      	str	r3, [r7, #32]
 800a3a4:	e010      	b.n	800a3c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10c      	bne.n	800a3c8 <osThreadNew+0xec>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d108      	bne.n	800a3c8 <osThreadNew+0xec>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <osThreadNew+0xec>
          mem = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	e001      	b.n	800a3c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d110      	bne.n	800a3f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3d6:	9202      	str	r2, [sp, #8]
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f001 ff2d 	bl	800c244 <xTaskCreateStatic>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	613b      	str	r3, [r7, #16]
 800a3ee:	e013      	b.n	800a418 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d110      	bne.n	800a418 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	f107 0310 	add.w	r3, r7, #16
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f001 ff7e 	bl	800c30a <xTaskCreate>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b01      	cmp	r3, #1
 800a412:	d001      	beq.n	800a418 <osThreadNew+0x13c>
          hTask = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a418:	693b      	ldr	r3, [r7, #16]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3730      	adds	r7, #48	; 0x30
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	200007d0 	.word	0x200007d0

0800a428 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a430:	f3ef 8305 	mrs	r3, IPSR
 800a434:	613b      	str	r3, [r7, #16]
  return(result);
 800a436:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10f      	bne.n	800a45c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a43c:	f3ef 8310 	mrs	r3, PRIMASK
 800a440:	60fb      	str	r3, [r7, #12]
  return(result);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a448:	f3ef 8311 	mrs	r3, BASEPRI
 800a44c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <osDelay+0x3c>
 800a454:	4b0a      	ldr	r3, [pc, #40]	; (800a480 <osDelay+0x58>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d103      	bne.n	800a464 <osDelay+0x3c>
    stat = osErrorISR;
 800a45c:	f06f 0305 	mvn.w	r3, #5
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e007      	b.n	800a474 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f002 f8a8 	bl	800c5c4 <vTaskDelay>
    }
  }

  return (stat);
 800a474:	697b      	ldr	r3, [r7, #20]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	200007d0 	.word	0x200007d0

0800a484 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f003 fb33 	bl	800daf8 <pvTimerGetTimerID>
 800a492:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d005      	beq.n	800a4a6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	6852      	ldr	r2, [r2, #4]
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	4798      	blx	r3
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08e      	sub	sp, #56	; 0x38
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	607a      	str	r2, [r7, #4]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4c4:	f3ef 8305 	mrs	r3, IPSR
 800a4c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a4ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d16a      	bne.n	800a5a6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d4:	617b      	str	r3, [r7, #20]
  return(result);
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d105      	bne.n	800a4e8 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4dc:	f3ef 8311 	mrs	r3, BASEPRI
 800a4e0:	613b      	str	r3, [r7, #16]
  return(result);
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <osTimerNew+0x40>
 800a4e8:	4b31      	ldr	r3, [pc, #196]	; (800a5b0 <osTimerNew+0x100>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d05a      	beq.n	800a5a6 <osTimerNew+0xf6>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d057      	beq.n	800a5a6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a4f6:	2008      	movs	r0, #8
 800a4f8:	f003 fd5c 	bl	800dfb4 <pvPortMalloc>
 800a4fc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d050      	beq.n	800a5a6 <osTimerNew+0xf6>
      callb->func = func;
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a510:	7afb      	ldrb	r3, [r7, #11]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <osTimerNew+0x6c>
        reload = pdFALSE;
 800a516:	2300      	movs	r3, #0
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
 800a51a:	e001      	b.n	800a520 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a51c:	2301      	movs	r3, #1
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a520:	f04f 33ff 	mov.w	r3, #4294967295
 800a524:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a526:	2300      	movs	r3, #0
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d01c      	beq.n	800a56a <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <osTimerNew+0x8e>
          name = attr->name;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <osTimerNew+0xa4>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	2b2b      	cmp	r3, #43	; 0x2b
 800a54c:	d902      	bls.n	800a554 <osTimerNew+0xa4>
          mem = 1;
 800a54e:	2301      	movs	r3, #1
 800a550:	623b      	str	r3, [r7, #32]
 800a552:	e00c      	b.n	800a56e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d108      	bne.n	800a56e <osTimerNew+0xbe>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d104      	bne.n	800a56e <osTimerNew+0xbe>
            mem = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	623b      	str	r3, [r7, #32]
 800a568:	e001      	b.n	800a56e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d10c      	bne.n	800a58e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	4b0e      	ldr	r3, [pc, #56]	; (800a5b4 <osTimerNew+0x104>)
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a582:	2101      	movs	r1, #1
 800a584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a586:	f002 ff26 	bl	800d3d6 <xTimerCreateStatic>
 800a58a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a58c:	e00b      	b.n	800a5a6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d108      	bne.n	800a5a6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a594:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <osTimerNew+0x104>)
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59c:	2101      	movs	r1, #1
 800a59e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a0:	f002 fef8 	bl	800d394 <xTimerCreate>
 800a5a4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3730      	adds	r7, #48	; 0x30
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	200007d0 	.word	0x200007d0
 800a5b4:	0800a485 	.word	0x0800a485

0800a5b8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c6:	f3ef 8305 	mrs	r3, IPSR
 800a5ca:	617b      	str	r3, [r7, #20]
  return(result);
 800a5cc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10f      	bne.n	800a5f2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d6:	613b      	str	r3, [r7, #16]
  return(result);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5de:	f3ef 8311 	mrs	r3, BASEPRI
 800a5e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <osTimerStart+0x42>
 800a5ea:	4b12      	ldr	r3, [pc, #72]	; (800a634 <osTimerStart+0x7c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d103      	bne.n	800a5fa <osTimerStart+0x42>
    stat = osErrorISR;
 800a5f2:	f06f 0305 	mvn.w	r3, #5
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e017      	b.n	800a62a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d103      	bne.n	800a608 <osTimerStart+0x50>
    stat = osErrorParameter;
 800a600:	f06f 0303 	mvn.w	r3, #3
 800a604:	61fb      	str	r3, [r7, #28]
 800a606:	e010      	b.n	800a62a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a608:	2300      	movs	r3, #0
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	2300      	movs	r3, #0
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	2104      	movs	r1, #4
 800a612:	69b8      	ldr	r0, [r7, #24]
 800a614:	f002 ff5e 	bl	800d4d4 <xTimerGenericCommand>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d102      	bne.n	800a624 <osTimerStart+0x6c>
      stat = osOK;
 800a61e:	2300      	movs	r3, #0
 800a620:	61fb      	str	r3, [r7, #28]
 800a622:	e002      	b.n	800a62a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800a624:	f06f 0302 	mvn.w	r3, #2
 800a628:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800a62a:	69fb      	ldr	r3, [r7, #28]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3720      	adds	r7, #32
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	200007d0 	.word	0x200007d0

0800a638 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a640:	2300      	movs	r3, #0
 800a642:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a644:	f3ef 8305 	mrs	r3, IPSR
 800a648:	613b      	str	r3, [r7, #16]
  return(result);
 800a64a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 8085 	bne.w	800a75c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a652:	f3ef 8310 	mrs	r3, PRIMASK
 800a656:	60fb      	str	r3, [r7, #12]
  return(result);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d105      	bne.n	800a66a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a65e:	f3ef 8311 	mrs	r3, BASEPRI
 800a662:	60bb      	str	r3, [r7, #8]
  return(result);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <osMutexNew+0x3a>
 800a66a:	4b3f      	ldr	r3, [pc, #252]	; (800a768 <osMutexNew+0x130>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d074      	beq.n	800a75c <osMutexNew+0x124>
    if (attr != NULL) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <osMutexNew+0x48>
      type = attr->attr_bits;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	623b      	str	r3, [r7, #32]
 800a67e:	e001      	b.n	800a684 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <osMutexNew+0x5c>
      rmtx = 1U;
 800a68e:	2301      	movs	r3, #1
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	e001      	b.n	800a698 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d15c      	bne.n	800a75c <osMutexNew+0x124>
      mem = -1;
 800a6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d015      	beq.n	800a6da <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d006      	beq.n	800a6c4 <osMutexNew+0x8c>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	2b4f      	cmp	r3, #79	; 0x4f
 800a6bc:	d902      	bls.n	800a6c4 <osMutexNew+0x8c>
          mem = 1;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	61bb      	str	r3, [r7, #24]
 800a6c2:	e00c      	b.n	800a6de <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d108      	bne.n	800a6de <osMutexNew+0xa6>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <osMutexNew+0xa6>
            mem = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e001      	b.n	800a6de <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d112      	bne.n	800a70a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d007      	beq.n	800a6fa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	2004      	movs	r0, #4
 800a6f2:	f000 fe1a 	bl	800b32a <xQueueCreateMutexStatic>
 800a6f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f8:	e016      	b.n	800a728 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	4619      	mov	r1, r3
 800a700:	2001      	movs	r0, #1
 800a702:	f000 fe12 	bl	800b32a <xQueueCreateMutexStatic>
 800a706:	6278      	str	r0, [r7, #36]	; 0x24
 800a708:	e00e      	b.n	800a728 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10b      	bne.n	800a728 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d004      	beq.n	800a720 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a716:	2004      	movs	r0, #4
 800a718:	f000 fdef 	bl	800b2fa <xQueueCreateMutex>
 800a71c:	6278      	str	r0, [r7, #36]	; 0x24
 800a71e:	e003      	b.n	800a728 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a720:	2001      	movs	r0, #1
 800a722:	f000 fdea 	bl	800b2fa <xQueueCreateMutex>
 800a726:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00c      	beq.n	800a748 <osMutexNew+0x110>
        if (attr != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <osMutexNew+0x104>
          name = attr->name;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	e001      	b.n	800a740 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a740:	6979      	ldr	r1, [r7, #20]
 800a742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a744:	f001 fcf6 	bl	800c134 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d006      	beq.n	800a75c <osMutexNew+0x124>
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3728      	adds	r7, #40	; 0x28
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200007d0 	.word	0x200007d0

0800a76c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f023 0301 	bic.w	r3, r3, #1
 800a77c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a78a:	f3ef 8305 	mrs	r3, IPSR
 800a78e:	613b      	str	r3, [r7, #16]
  return(result);
 800a790:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10f      	bne.n	800a7b6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a796:	f3ef 8310 	mrs	r3, PRIMASK
 800a79a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d105      	bne.n	800a7ae <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7a2:	f3ef 8311 	mrs	r3, BASEPRI
 800a7a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <osMutexAcquire+0x52>
 800a7ae:	4b1d      	ldr	r3, [pc, #116]	; (800a824 <osMutexAcquire+0xb8>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d103      	bne.n	800a7be <osMutexAcquire+0x52>
    stat = osErrorISR;
 800a7b6:	f06f 0305 	mvn.w	r3, #5
 800a7ba:	61fb      	str	r3, [r7, #28]
 800a7bc:	e02c      	b.n	800a818 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800a7c4:	f06f 0303 	mvn.w	r3, #3
 800a7c8:	61fb      	str	r3, [r7, #28]
 800a7ca:	e025      	b.n	800a818 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d011      	beq.n	800a7f6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	69b8      	ldr	r0, [r7, #24]
 800a7d6:	f000 fdf9 	bl	800b3cc <xQueueTakeMutexRecursive>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d01b      	beq.n	800a818 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800a7e6:	f06f 0301 	mvn.w	r3, #1
 800a7ea:	61fb      	str	r3, [r7, #28]
 800a7ec:	e014      	b.n	800a818 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a7ee:	f06f 0302 	mvn.w	r3, #2
 800a7f2:	61fb      	str	r3, [r7, #28]
 800a7f4:	e010      	b.n	800a818 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	69b8      	ldr	r0, [r7, #24]
 800a7fa:	f001 f9b3 	bl	800bb64 <xQueueSemaphoreTake>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b01      	cmp	r3, #1
 800a802:	d009      	beq.n	800a818 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800a80a:	f06f 0301 	mvn.w	r3, #1
 800a80e:	61fb      	str	r3, [r7, #28]
 800a810:	e002      	b.n	800a818 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a812:	f06f 0302 	mvn.w	r3, #2
 800a816:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a818:	69fb      	ldr	r3, [r7, #28]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3720      	adds	r7, #32
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	200007d0 	.word	0x200007d0

0800a828 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f023 0301 	bic.w	r3, r3, #1
 800a836:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a844:	f3ef 8305 	mrs	r3, IPSR
 800a848:	613b      	str	r3, [r7, #16]
  return(result);
 800a84a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10f      	bne.n	800a870 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a850:	f3ef 8310 	mrs	r3, PRIMASK
 800a854:	60fb      	str	r3, [r7, #12]
  return(result);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d105      	bne.n	800a868 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a85c:	f3ef 8311 	mrs	r3, BASEPRI
 800a860:	60bb      	str	r3, [r7, #8]
  return(result);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d007      	beq.n	800a878 <osMutexRelease+0x50>
 800a868:	4b16      	ldr	r3, [pc, #88]	; (800a8c4 <osMutexRelease+0x9c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d103      	bne.n	800a878 <osMutexRelease+0x50>
    stat = osErrorISR;
 800a870:	f06f 0305 	mvn.w	r3, #5
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	e01f      	b.n	800a8b8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d103      	bne.n	800a886 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800a87e:	f06f 0303 	mvn.w	r3, #3
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	e018      	b.n	800a8b8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d009      	beq.n	800a8a0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a88c:	69b8      	ldr	r0, [r7, #24]
 800a88e:	f000 fd67 	bl	800b360 <xQueueGiveMutexRecursive>
 800a892:	4603      	mov	r3, r0
 800a894:	2b01      	cmp	r3, #1
 800a896:	d00f      	beq.n	800a8b8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a898:	f06f 0302 	mvn.w	r3, #2
 800a89c:	61fb      	str	r3, [r7, #28]
 800a89e:	e00b      	b.n	800a8b8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	69b8      	ldr	r0, [r7, #24]
 800a8a8:	f000 fe3a 	bl	800b520 <xQueueGenericSend>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d002      	beq.n	800a8b8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a8b2:	f06f 0302 	mvn.w	r3, #2
 800a8b6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a8b8:	69fb      	ldr	r3, [r7, #28]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200007d0 	.word	0x200007d0

0800a8c8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08c      	sub	sp, #48	; 0x30
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8d8:	f3ef 8305 	mrs	r3, IPSR
 800a8dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f040 8086 	bne.w	800a9f2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ea:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8f2:	f3ef 8311 	mrs	r3, BASEPRI
 800a8f6:	613b      	str	r3, [r7, #16]
  return(result);
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <osSemaphoreNew+0x3e>
 800a8fe:	4b3f      	ldr	r3, [pc, #252]	; (800a9fc <osSemaphoreNew+0x134>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d075      	beq.n	800a9f2 <osSemaphoreNew+0x12a>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d072      	beq.n	800a9f2 <osSemaphoreNew+0x12a>
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	429a      	cmp	r2, r3
 800a912:	d86e      	bhi.n	800a9f2 <osSemaphoreNew+0x12a>
    mem = -1;
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
 800a918:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d015      	beq.n	800a94c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d006      	beq.n	800a936 <osSemaphoreNew+0x6e>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b4f      	cmp	r3, #79	; 0x4f
 800a92e:	d902      	bls.n	800a936 <osSemaphoreNew+0x6e>
        mem = 1;
 800a930:	2301      	movs	r3, #1
 800a932:	623b      	str	r3, [r7, #32]
 800a934:	e00c      	b.n	800a950 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d108      	bne.n	800a950 <osSemaphoreNew+0x88>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d104      	bne.n	800a950 <osSemaphoreNew+0x88>
          mem = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	623b      	str	r3, [r7, #32]
 800a94a:	e001      	b.n	800a950 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d04c      	beq.n	800a9f2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d128      	bne.n	800a9b0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d10a      	bne.n	800a97a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	2203      	movs	r2, #3
 800a96a:	9200      	str	r2, [sp, #0]
 800a96c:	2200      	movs	r2, #0
 800a96e:	2100      	movs	r1, #0
 800a970:	2001      	movs	r0, #1
 800a972:	f000 fbc1 	bl	800b0f8 <xQueueGenericCreateStatic>
 800a976:	6278      	str	r0, [r7, #36]	; 0x24
 800a978:	e005      	b.n	800a986 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a97a:	2203      	movs	r2, #3
 800a97c:	2100      	movs	r1, #0
 800a97e:	2001      	movs	r0, #1
 800a980:	f000 fc3c 	bl	800b1fc <xQueueGenericCreate>
 800a984:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d022      	beq.n	800a9d2 <osSemaphoreNew+0x10a>
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01f      	beq.n	800a9d2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a992:	2300      	movs	r3, #0
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a99a:	f000 fdc1 	bl	800b520 <xQueueGenericSend>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d016      	beq.n	800a9d2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a9a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9a6:	f001 fa77 	bl	800be98 <vQueueDelete>
            hSemaphore = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ae:	e010      	b.n	800a9d2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d108      	bne.n	800a9c8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	68b9      	ldr	r1, [r7, #8]
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 fd3c 	bl	800b43c <xQueueCreateCountingSemaphoreStatic>
 800a9c4:	6278      	str	r0, [r7, #36]	; 0x24
 800a9c6:	e004      	b.n	800a9d2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a9c8:	68b9      	ldr	r1, [r7, #8]
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 fd71 	bl	800b4b2 <xQueueCreateCountingSemaphore>
 800a9d0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00c      	beq.n	800a9f2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <osSemaphoreNew+0x11e>
          name = attr->name;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	61fb      	str	r3, [r7, #28]
 800a9e4:	e001      	b.n	800a9ea <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a9ea:	69f9      	ldr	r1, [r7, #28]
 800a9ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ee:	f001 fba1 	bl	800c134 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3728      	adds	r7, #40	; 0x28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	200007d0 	.word	0x200007d0

0800aa00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aa18:	f06f 0303 	mvn.w	r3, #3
 800aa1c:	61fb      	str	r3, [r7, #28]
 800aa1e:	e04b      	b.n	800aab8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa20:	f3ef 8305 	mrs	r3, IPSR
 800aa24:	617b      	str	r3, [r7, #20]
  return(result);
 800aa26:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10f      	bne.n	800aa4c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa2c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa30:	613b      	str	r3, [r7, #16]
  return(result);
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa38:	f3ef 8311 	mrs	r3, BASEPRI
 800aa3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d026      	beq.n	800aa92 <osSemaphoreAcquire+0x92>
 800aa44:	4b1f      	ldr	r3, [pc, #124]	; (800aac4 <osSemaphoreAcquire+0xc4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d122      	bne.n	800aa92 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800aa52:	f06f 0303 	mvn.w	r3, #3
 800aa56:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800aa58:	e02d      	b.n	800aab6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800aa5e:	f107 0308 	add.w	r3, r7, #8
 800aa62:	461a      	mov	r2, r3
 800aa64:	2100      	movs	r1, #0
 800aa66:	69b8      	ldr	r0, [r7, #24]
 800aa68:	f001 f990 	bl	800bd8c <xQueueReceiveFromISR>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d003      	beq.n	800aa7a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800aa72:	f06f 0302 	mvn.w	r3, #2
 800aa76:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800aa78:	e01d      	b.n	800aab6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01a      	beq.n	800aab6 <osSemaphoreAcquire+0xb6>
 800aa80:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <osSemaphoreAcquire+0xc8>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800aa90:	e011      	b.n	800aab6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	69b8      	ldr	r0, [r7, #24]
 800aa96:	f001 f865 	bl	800bb64 <xQueueSemaphoreTake>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d00b      	beq.n	800aab8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800aaa6:	f06f 0301 	mvn.w	r3, #1
 800aaaa:	61fb      	str	r3, [r7, #28]
 800aaac:	e004      	b.n	800aab8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800aaae:	f06f 0302 	mvn.w	r3, #2
 800aab2:	61fb      	str	r3, [r7, #28]
 800aab4:	e000      	b.n	800aab8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800aab6:	bf00      	nop
      }
    }
  }

  return (stat);
 800aab8:	69fb      	ldr	r3, [r7, #28]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3720      	adds	r7, #32
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	200007d0 	.word	0x200007d0
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b088      	sub	sp, #32
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d103      	bne.n	800aaea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aae2:	f06f 0303 	mvn.w	r3, #3
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e03e      	b.n	800ab68 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaea:	f3ef 8305 	mrs	r3, IPSR
 800aaee:	617b      	str	r3, [r7, #20]
  return(result);
 800aaf0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10f      	bne.n	800ab16 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf6:	f3ef 8310 	mrs	r3, PRIMASK
 800aafa:	613b      	str	r3, [r7, #16]
  return(result);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d105      	bne.n	800ab0e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab02:	f3ef 8311 	mrs	r3, BASEPRI
 800ab06:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01e      	beq.n	800ab4c <osSemaphoreRelease+0x80>
 800ab0e:	4b19      	ldr	r3, [pc, #100]	; (800ab74 <osSemaphoreRelease+0xa8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d11a      	bne.n	800ab4c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab1a:	f107 0308 	add.w	r3, r7, #8
 800ab1e:	4619      	mov	r1, r3
 800ab20:	69b8      	ldr	r0, [r7, #24]
 800ab22:	f000 fea3 	bl	800b86c <xQueueGiveFromISR>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d003      	beq.n	800ab34 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ab2c:	f06f 0302 	mvn.w	r3, #2
 800ab30:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab32:	e018      	b.n	800ab66 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d015      	beq.n	800ab66 <osSemaphoreRelease+0x9a>
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <osSemaphoreRelease+0xac>)
 800ab3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab4a:	e00c      	b.n	800ab66 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	69b8      	ldr	r0, [r7, #24]
 800ab54:	f000 fce4 	bl	800b520 <xQueueGenericSend>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d004      	beq.n	800ab68 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ab5e:	f06f 0302 	mvn.w	r3, #2
 800ab62:	61fb      	str	r3, [r7, #28]
 800ab64:	e000      	b.n	800ab68 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab66:	bf00      	nop
    }
  }

  return (stat);
 800ab68:	69fb      	ldr	r3, [r7, #28]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	200007d0 	.word	0x200007d0
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08c      	sub	sp, #48	; 0x30
 800ab80:	af02      	add	r7, sp, #8
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab8c:	f3ef 8305 	mrs	r3, IPSR
 800ab90:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d16f      	bne.n	800ac78 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab98:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9c:	617b      	str	r3, [r7, #20]
  return(result);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d105      	bne.n	800abb0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aba4:	f3ef 8311 	mrs	r3, BASEPRI
 800aba8:	613b      	str	r3, [r7, #16]
  return(result);
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <osMessageQueueNew+0x3c>
 800abb0:	4b34      	ldr	r3, [pc, #208]	; (800ac84 <osMessageQueueNew+0x108>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d05f      	beq.n	800ac78 <osMessageQueueNew+0xfc>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d05c      	beq.n	800ac78 <osMessageQueueNew+0xfc>
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d059      	beq.n	800ac78 <osMessageQueueNew+0xfc>
    mem = -1;
 800abc4:	f04f 33ff 	mov.w	r3, #4294967295
 800abc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d029      	beq.n	800ac24 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d012      	beq.n	800abfe <osMessageQueueNew+0x82>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	2b4f      	cmp	r3, #79	; 0x4f
 800abde:	d90e      	bls.n	800abfe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	695a      	ldr	r2, [r3, #20]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	fb01 f303 	mul.w	r3, r1, r3
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d302      	bcc.n	800abfe <osMessageQueueNew+0x82>
        mem = 1;
 800abf8:	2301      	movs	r3, #1
 800abfa:	623b      	str	r3, [r7, #32]
 800abfc:	e014      	b.n	800ac28 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d110      	bne.n	800ac28 <osMessageQueueNew+0xac>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10c      	bne.n	800ac28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d108      	bne.n	800ac28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d104      	bne.n	800ac28 <osMessageQueueNew+0xac>
          mem = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	623b      	str	r3, [r7, #32]
 800ac22:	e001      	b.n	800ac28 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d10b      	bne.n	800ac46 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691a      	ldr	r2, [r3, #16]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2100      	movs	r1, #0
 800ac38:	9100      	str	r1, [sp, #0]
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 fa5b 	bl	800b0f8 <xQueueGenericCreateStatic>
 800ac42:	6278      	str	r0, [r7, #36]	; 0x24
 800ac44:	e008      	b.n	800ac58 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ac46:	6a3b      	ldr	r3, [r7, #32]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d105      	bne.n	800ac58 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 fad3 	bl	800b1fc <xQueueGenericCreate>
 800ac56:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00c      	beq.n	800ac78 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <osMessageQueueNew+0xf0>
        name = attr->name;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	e001      	b.n	800ac70 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac70:	69f9      	ldr	r1, [r7, #28]
 800ac72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac74:	f001 fa5e 	bl	800c134 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3728      	adds	r7, #40	; 0x28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	200007d0 	.word	0x200007d0

0800ac88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	4613      	mov	r3, r2
 800ac96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca0:	f3ef 8305 	mrs	r3, IPSR
 800aca4:	61fb      	str	r3, [r7, #28]
  return(result);
 800aca6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10f      	bne.n	800accc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acac:	f3ef 8310 	mrs	r3, PRIMASK
 800acb0:	61bb      	str	r3, [r7, #24]
  return(result);
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d105      	bne.n	800acc4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acb8:	f3ef 8311 	mrs	r3, BASEPRI
 800acbc:	617b      	str	r3, [r7, #20]
  return(result);
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d02c      	beq.n	800ad1e <osMessageQueuePut+0x96>
 800acc4:	4b28      	ldr	r3, [pc, #160]	; (800ad68 <osMessageQueuePut+0xe0>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d128      	bne.n	800ad1e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d005      	beq.n	800acde <osMessageQueuePut+0x56>
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <osMessageQueuePut+0x56>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800acde:	f06f 0303 	mvn.w	r3, #3
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ace4:	e039      	b.n	800ad5a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800acea:	f107 0210 	add.w	r2, r7, #16
 800acee:	2300      	movs	r3, #0
 800acf0:	68b9      	ldr	r1, [r7, #8]
 800acf2:	6a38      	ldr	r0, [r7, #32]
 800acf4:	f000 fd1a 	bl	800b72c <xQueueGenericSendFromISR>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d003      	beq.n	800ad06 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800acfe:	f06f 0302 	mvn.w	r3, #2
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad04:	e029      	b.n	800ad5a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d026      	beq.n	800ad5a <osMessageQueuePut+0xd2>
 800ad0c:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <osMessageQueuePut+0xe4>)
 800ad0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad1c:	e01d      	b.n	800ad5a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <osMessageQueuePut+0xa2>
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ad2a:	f06f 0303 	mvn.w	r3, #3
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad30:	e014      	b.n	800ad5c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad32:	2300      	movs	r3, #0
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	6a38      	ldr	r0, [r7, #32]
 800ad3a:	f000 fbf1 	bl	800b520 <xQueueGenericSend>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d00b      	beq.n	800ad5c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ad4a:	f06f 0301 	mvn.w	r3, #1
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad50:	e004      	b.n	800ad5c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ad52:	f06f 0302 	mvn.w	r3, #2
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
 800ad58:	e000      	b.n	800ad5c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3728      	adds	r7, #40	; 0x28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	200007d0 	.word	0x200007d0
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08a      	sub	sp, #40	; 0x28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad86:	f3ef 8305 	mrs	r3, IPSR
 800ad8a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ad8c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10f      	bne.n	800adb2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad92:	f3ef 8310 	mrs	r3, PRIMASK
 800ad96:	61bb      	str	r3, [r7, #24]
  return(result);
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d105      	bne.n	800adaa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad9e:	f3ef 8311 	mrs	r3, BASEPRI
 800ada2:	617b      	str	r3, [r7, #20]
  return(result);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d02c      	beq.n	800ae04 <osMessageQueueGet+0x94>
 800adaa:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <osMessageQueueGet+0xdc>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d128      	bne.n	800ae04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <osMessageQueueGet+0x54>
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <osMessageQueueGet+0x54>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800adc4:	f06f 0303 	mvn.w	r3, #3
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800adca:	e038      	b.n	800ae3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800adcc:	2300      	movs	r3, #0
 800adce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800add0:	f107 0310 	add.w	r3, r7, #16
 800add4:	461a      	mov	r2, r3
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	6a38      	ldr	r0, [r7, #32]
 800adda:	f000 ffd7 	bl	800bd8c <xQueueReceiveFromISR>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d003      	beq.n	800adec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ade4:	f06f 0302 	mvn.w	r3, #2
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800adea:	e028      	b.n	800ae3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d025      	beq.n	800ae3e <osMessageQueueGet+0xce>
 800adf2:	4b17      	ldr	r3, [pc, #92]	; (800ae50 <osMessageQueueGet+0xe0>)
 800adf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae02:	e01c      	b.n	800ae3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <osMessageQueueGet+0xa0>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ae10:	f06f 0303 	mvn.w	r3, #3
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
 800ae16:	e013      	b.n	800ae40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	68b9      	ldr	r1, [r7, #8]
 800ae1c:	6a38      	ldr	r0, [r7, #32]
 800ae1e:	f000 fdbb 	bl	800b998 <xQueueReceive>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d00b      	beq.n	800ae40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ae2e:	f06f 0301 	mvn.w	r3, #1
 800ae32:	627b      	str	r3, [r7, #36]	; 0x24
 800ae34:	e004      	b.n	800ae40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ae36:	f06f 0302 	mvn.w	r3, #2
 800ae3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae3c:	e000      	b.n	800ae40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3728      	adds	r7, #40	; 0x28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200007d0 	.word	0x200007d0
 800ae50:	e000ed04 	.word	0xe000ed04

0800ae54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a07      	ldr	r2, [pc, #28]	; (800ae80 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	4a06      	ldr	r2, [pc, #24]	; (800ae84 <vApplicationGetIdleTaskMemory+0x30>)
 800ae6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2280      	movs	r2, #128	; 0x80
 800ae70:	601a      	str	r2, [r3, #0]
}
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	200007d4 	.word	0x200007d4
 800ae84:	20000890 	.word	0x20000890

0800ae88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4a07      	ldr	r2, [pc, #28]	; (800aeb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ae98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4a06      	ldr	r2, [pc, #24]	; (800aeb8 <vApplicationGetTimerTaskMemory+0x30>)
 800ae9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aea6:	601a      	str	r2, [r3, #0]
}
 800aea8:	bf00      	nop
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	20000a90 	.word	0x20000a90
 800aeb8:	20000b4c 	.word	0x20000b4c

0800aebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f103 0208 	add.w	r2, r3, #8
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f04f 32ff 	mov.w	r2, #4294967295
 800aed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f103 0208 	add.w	r2, r3, #8
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f103 0208 	add.w	r2, r3, #8
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af0a:	bf00      	nop
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af16:	b480      	push	{r7}
 800af18:	b085      	sub	sp, #20
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
}
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af74:	d103      	bne.n	800af7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e00c      	b.n	800af98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3308      	adds	r3, #8
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e002      	b.n	800af8c <vListInsert+0x2e>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	429a      	cmp	r2, r3
 800af96:	d2f6      	bcs.n	800af86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6892      	ldr	r2, [r2, #8]
 800afe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6852      	ldr	r2, [r2, #4]
 800aff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d103      	bne.n	800b004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	1e5a      	subs	r2, r3, #1
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10c      	bne.n	800b052 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	b672      	cpsid	i
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	b662      	cpsie	i
 800b04c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b052:	f002 fe83 	bl	800dd5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05e:	68f9      	ldr	r1, [r7, #12]
 800b060:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b062:	fb01 f303 	mul.w	r3, r1, r3
 800b066:	441a      	add	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b082:	3b01      	subs	r3, #1
 800b084:	68f9      	ldr	r1, [r7, #12]
 800b086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b088:	fb01 f303 	mul.w	r3, r1, r3
 800b08c:	441a      	add	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	22ff      	movs	r2, #255	; 0xff
 800b096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	22ff      	movs	r2, #255	; 0xff
 800b09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d114      	bne.n	800b0d2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01a      	beq.n	800b0e6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3310      	adds	r3, #16
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f001 fd63 	bl	800cb80 <xTaskRemoveFromEventList>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d012      	beq.n	800b0e6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0c0:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <xQueueGenericReset+0xd0>)
 800b0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c6:	601a      	str	r2, [r3, #0]
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	e009      	b.n	800b0e6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3310      	adds	r3, #16
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fef0 	bl	800aebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3324      	adds	r3, #36	; 0x24
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff feeb 	bl	800aebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b0e6:	f002 fe6d 	bl	800ddc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b0ea:	2301      	movs	r3, #1
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	e000ed04 	.word	0xe000ed04

0800b0f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08e      	sub	sp, #56	; 0x38
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10c      	bne.n	800b126 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10c      	bne.n	800b146 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	b672      	cpsid	i
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	b662      	cpsie	i
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b142:	bf00      	nop
 800b144:	e7fe      	b.n	800b144 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <xQueueGenericCreateStatic+0x5a>
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <xQueueGenericCreateStatic+0x5e>
 800b152:	2301      	movs	r3, #1
 800b154:	e000      	b.n	800b158 <xQueueGenericCreateStatic+0x60>
 800b156:	2300      	movs	r3, #0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10c      	bne.n	800b176 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	b672      	cpsid	i
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	b662      	cpsie	i
 800b170:	623b      	str	r3, [r7, #32]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <xQueueGenericCreateStatic+0x8a>
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <xQueueGenericCreateStatic+0x8e>
 800b182:	2301      	movs	r3, #1
 800b184:	e000      	b.n	800b188 <xQueueGenericCreateStatic+0x90>
 800b186:	2300      	movs	r3, #0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10c      	bne.n	800b1a6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	b672      	cpsid	i
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	b662      	cpsie	i
 800b1a0:	61fb      	str	r3, [r7, #28]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1a6:	2350      	movs	r3, #80	; 0x50
 800b1a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b50      	cmp	r3, #80	; 0x50
 800b1ae:	d00c      	beq.n	800b1ca <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	b672      	cpsid	i
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	b662      	cpsie	i
 800b1c4:	61bb      	str	r3, [r7, #24]
}
 800b1c6:	bf00      	nop
 800b1c8:	e7fe      	b.n	800b1c8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00d      	beq.n	800b1f2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f847 	bl	800b280 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3730      	adds	r7, #48	; 0x30
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08a      	sub	sp, #40	; 0x28
 800b200:	af02      	add	r7, sp, #8
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10c      	bne.n	800b22a <xQueueGenericCreate+0x2e>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	b672      	cpsid	i
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	b662      	cpsie	i
 800b224:	613b      	str	r3, [r7, #16]
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b230:	2300      	movs	r3, #0
 800b232:	61fb      	str	r3, [r7, #28]
 800b234:	e004      	b.n	800b240 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
 800b23e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	3350      	adds	r3, #80	; 0x50
 800b244:	4618      	mov	r0, r3
 800b246:	f002 feb5 	bl	800dfb4 <pvPortMalloc>
 800b24a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d011      	beq.n	800b276 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	3350      	adds	r3, #80	; 0x50
 800b25a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b264:	79fa      	ldrb	r2, [r7, #7]
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	4613      	mov	r3, r2
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	68b9      	ldr	r1, [r7, #8]
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 f805 	bl	800b280 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b276:	69bb      	ldr	r3, [r7, #24]
	}
 800b278:	4618      	mov	r0, r3
 800b27a:	3720      	adds	r7, #32
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d103      	bne.n	800b29c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	e002      	b.n	800b2a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	69b8      	ldr	r0, [r7, #24]
 800b2b2:	f7ff feb7 	bl	800b024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00e      	beq.n	800b2f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f917 	bl	800b520 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b086      	sub	sp, #24
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	4603      	mov	r3, r0
 800b302:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b304:	2301      	movs	r3, #1
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	2300      	movs	r3, #0
 800b30a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b30c:	79fb      	ldrb	r3, [r7, #7]
 800b30e:	461a      	mov	r2, r3
 800b310:	6939      	ldr	r1, [r7, #16]
 800b312:	6978      	ldr	r0, [r7, #20]
 800b314:	f7ff ff72 	bl	800b1fc <xQueueGenericCreate>
 800b318:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7ff ffd3 	bl	800b2c6 <prvInitialiseMutex>

		return xNewQueue;
 800b320:	68fb      	ldr	r3, [r7, #12]
	}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b088      	sub	sp, #32
 800b32e:	af02      	add	r7, sp, #8
 800b330:	4603      	mov	r3, r0
 800b332:	6039      	str	r1, [r7, #0]
 800b334:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b336:	2301      	movs	r3, #1
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	2300      	movs	r3, #0
 800b33c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2200      	movs	r2, #0
 800b346:	6939      	ldr	r1, [r7, #16]
 800b348:	6978      	ldr	r0, [r7, #20]
 800b34a:	f7ff fed5 	bl	800b0f8 <xQueueGenericCreateStatic>
 800b34e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f7ff ffb8 	bl	800b2c6 <prvInitialiseMutex>

		return xNewQueue;
 800b356:	68fb      	ldr	r3, [r7, #12]
	}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10c      	bne.n	800b38c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	b672      	cpsid	i
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	b662      	cpsie	i
 800b386:	60fb      	str	r3, [r7, #12]
}
 800b388:	bf00      	nop
 800b38a:	e7fe      	b.n	800b38a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	689c      	ldr	r4, [r3, #8]
 800b390:	f001 fdc0 	bl	800cf14 <xTaskGetCurrentTaskHandle>
 800b394:	4603      	mov	r3, r0
 800b396:	429c      	cmp	r4, r3
 800b398:	d111      	bne.n	800b3be <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	1e5a      	subs	r2, r3, #1
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	6938      	ldr	r0, [r7, #16]
 800b3b4:	f000 f8b4 	bl	800b520 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e001      	b.n	800b3c2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b3c2:	697b      	ldr	r3, [r7, #20]
	}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	371c      	adds	r7, #28
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd90      	pop	{r4, r7, pc}

0800b3cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b3cc:	b590      	push	{r4, r7, lr}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10c      	bne.n	800b3fa <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	b672      	cpsid	i
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	b662      	cpsie	i
 800b3f4:	60fb      	str	r3, [r7, #12]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	689c      	ldr	r4, [r3, #8]
 800b3fe:	f001 fd89 	bl	800cf14 <xTaskGetCurrentTaskHandle>
 800b402:	4603      	mov	r3, r0
 800b404:	429c      	cmp	r4, r3
 800b406:	d107      	bne.n	800b418 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
 800b416:	e00c      	b.n	800b432 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f000 fba2 	bl	800bb64 <xQueueSemaphoreTake>
 800b420:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b432:	697b      	ldr	r3, [r7, #20]
	}
 800b434:	4618      	mov	r0, r3
 800b436:	371c      	adds	r7, #28
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd90      	pop	{r4, r7, pc}

0800b43c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08a      	sub	sp, #40	; 0x28
 800b440:	af02      	add	r7, sp, #8
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10c      	bne.n	800b468 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	b672      	cpsid	i
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	b662      	cpsie	i
 800b462:	61bb      	str	r3, [r7, #24]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d90c      	bls.n	800b48a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	b672      	cpsid	i
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	b662      	cpsie	i
 800b484:	617b      	str	r3, [r7, #20]
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b48a:	2302      	movs	r3, #2
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	2100      	movs	r1, #0
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff fe2f 	bl	800b0f8 <xQueueGenericCreateStatic>
 800b49a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
	}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10c      	bne.n	800b4dc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	b672      	cpsid	i
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	b662      	cpsie	i
 800b4d6:	613b      	str	r3, [r7, #16]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d90c      	bls.n	800b4fe <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	b672      	cpsid	i
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	b662      	cpsie	i
 800b4f8:	60fb      	str	r3, [r7, #12]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b4fe:	2202      	movs	r2, #2
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff fe7a 	bl	800b1fc <xQueueGenericCreate>
 800b508:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b516:	697b      	ldr	r3, [r7, #20]
	}
 800b518:	4618      	mov	r0, r3
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08e      	sub	sp, #56	; 0x38
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b52e:	2300      	movs	r3, #0
 800b530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10c      	bne.n	800b556 <xQueueGenericSend+0x36>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	b672      	cpsid	i
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	b662      	cpsie	i
 800b550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d103      	bne.n	800b564 <xQueueGenericSend+0x44>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <xQueueGenericSend+0x48>
 800b564:	2301      	movs	r3, #1
 800b566:	e000      	b.n	800b56a <xQueueGenericSend+0x4a>
 800b568:	2300      	movs	r3, #0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10c      	bne.n	800b588 <xQueueGenericSend+0x68>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	b672      	cpsid	i
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	b662      	cpsie	i
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d103      	bne.n	800b596 <xQueueGenericSend+0x76>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b592:	2b01      	cmp	r3, #1
 800b594:	d101      	bne.n	800b59a <xQueueGenericSend+0x7a>
 800b596:	2301      	movs	r3, #1
 800b598:	e000      	b.n	800b59c <xQueueGenericSend+0x7c>
 800b59a:	2300      	movs	r3, #0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10c      	bne.n	800b5ba <xQueueGenericSend+0x9a>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	b672      	cpsid	i
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	b662      	cpsie	i
 800b5b4:	623b      	str	r3, [r7, #32]
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5ba:	f001 fcbb 	bl	800cf34 <xTaskGetSchedulerState>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <xQueueGenericSend+0xaa>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <xQueueGenericSend+0xae>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <xQueueGenericSend+0xb0>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10c      	bne.n	800b5ee <xQueueGenericSend+0xce>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	b672      	cpsid	i
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	b662      	cpsie	i
 800b5e8:	61fb      	str	r3, [r7, #28]
}
 800b5ea:	bf00      	nop
 800b5ec:	e7fe      	b.n	800b5ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5ee:	f002 fbb5 	bl	800dd5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d302      	bcc.n	800b604 <xQueueGenericSend+0xe4>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d129      	bne.n	800b658 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b60a:	f000 fc82 	bl	800bf12 <prvCopyDataToQueue>
 800b60e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	d010      	beq.n	800b63a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	3324      	adds	r3, #36	; 0x24
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 faaf 	bl	800cb80 <xTaskRemoveFromEventList>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d013      	beq.n	800b650 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b628:	4b3f      	ldr	r3, [pc, #252]	; (800b728 <xQueueGenericSend+0x208>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	e00a      	b.n	800b650 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b640:	4b39      	ldr	r3, [pc, #228]	; (800b728 <xQueueGenericSend+0x208>)
 800b642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b650:	f002 fbb8 	bl	800ddc4 <vPortExitCritical>
				return pdPASS;
 800b654:	2301      	movs	r3, #1
 800b656:	e063      	b.n	800b720 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d103      	bne.n	800b666 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b65e:	f002 fbb1 	bl	800ddc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b662:	2300      	movs	r3, #0
 800b664:	e05c      	b.n	800b720 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d106      	bne.n	800b67a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b66c:	f107 0314 	add.w	r3, r7, #20
 800b670:	4618      	mov	r0, r3
 800b672:	f001 faeb 	bl	800cc4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b67a:	f002 fba3 	bl	800ddc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b67e:	f001 f84b 	bl	800c718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b682:	f002 fb6b 	bl	800dd5c <vPortEnterCritical>
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b68c:	b25b      	sxtb	r3, r3
 800b68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b692:	d103      	bne.n	800b69c <xQueueGenericSend+0x17c>
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6a2:	b25b      	sxtb	r3, r3
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a8:	d103      	bne.n	800b6b2 <xQueueGenericSend+0x192>
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6b2:	f002 fb87 	bl	800ddc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6b6:	1d3a      	adds	r2, r7, #4
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 fada 	bl	800cc78 <xTaskCheckForTimeOut>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d124      	bne.n	800b714 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6cc:	f000 fd19 	bl	800c102 <prvIsQueueFull>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d018      	beq.n	800b708 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	3310      	adds	r3, #16
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 f9fa 	bl	800cad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e6:	f000 fca4 	bl	800c032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6ea:	f001 f823 	bl	800c734 <xTaskResumeAll>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f47f af7c 	bne.w	800b5ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	; (800b728 <xQueueGenericSend+0x208>)
 800b6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	e772      	b.n	800b5ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b70a:	f000 fc92 	bl	800c032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b70e:	f001 f811 	bl	800c734 <xTaskResumeAll>
 800b712:	e76c      	b.n	800b5ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b716:	f000 fc8c 	bl	800c032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b71a:	f001 f80b 	bl	800c734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b71e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b720:	4618      	mov	r0, r3
 800b722:	3738      	adds	r7, #56	; 0x38
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08e      	sub	sp, #56	; 0x38
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10c      	bne.n	800b75e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	b672      	cpsid	i
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	b662      	cpsie	i
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b75a:	bf00      	nop
 800b75c:	e7fe      	b.n	800b75c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d103      	bne.n	800b76c <xQueueGenericSendFromISR+0x40>
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <xQueueGenericSendFromISR+0x44>
 800b76c:	2301      	movs	r3, #1
 800b76e:	e000      	b.n	800b772 <xQueueGenericSendFromISR+0x46>
 800b770:	2300      	movs	r3, #0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10c      	bne.n	800b790 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	b672      	cpsid	i
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	b662      	cpsie	i
 800b78a:	623b      	str	r3, [r7, #32]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d103      	bne.n	800b79e <xQueueGenericSendFromISR+0x72>
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <xQueueGenericSendFromISR+0x76>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <xQueueGenericSendFromISR+0x78>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10c      	bne.n	800b7c2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	b672      	cpsid	i
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	b662      	cpsie	i
 800b7bc:	61fb      	str	r3, [r7, #28]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7c2:	f002 fbb3 	bl	800df2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	b672      	cpsid	i
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	b662      	cpsie	i
 800b7de:	61ba      	str	r2, [r7, #24]
 800b7e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d302      	bcc.n	800b7f8 <xQueueGenericSendFromISR+0xcc>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d12c      	bne.n	800b852 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b808:	f000 fb83 	bl	800bf12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b80c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b814:	d112      	bne.n	800b83c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d016      	beq.n	800b84c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	3324      	adds	r3, #36	; 0x24
 800b822:	4618      	mov	r0, r3
 800b824:	f001 f9ac 	bl	800cb80 <xTaskRemoveFromEventList>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00e      	beq.n	800b84c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	e007      	b.n	800b84c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b83c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b840:	3301      	adds	r3, #1
 800b842:	b2db      	uxtb	r3, r3
 800b844:	b25a      	sxtb	r2, r3
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b84c:	2301      	movs	r3, #1
 800b84e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b850:	e001      	b.n	800b856 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b852:	2300      	movs	r3, #0
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b860:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b864:	4618      	mov	r0, r3
 800b866:	3738      	adds	r7, #56	; 0x38
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08e      	sub	sp, #56	; 0x38
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10c      	bne.n	800b89a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	b672      	cpsid	i
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	b662      	cpsie	i
 800b894:	623b      	str	r3, [r7, #32]
}
 800b896:	bf00      	nop
 800b898:	e7fe      	b.n	800b898 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00c      	beq.n	800b8bc <xQueueGiveFromISR+0x50>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	b672      	cpsid	i
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	b662      	cpsie	i
 800b8b6:	61fb      	str	r3, [r7, #28]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d103      	bne.n	800b8cc <xQueueGiveFromISR+0x60>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <xQueueGiveFromISR+0x64>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e000      	b.n	800b8d2 <xQueueGiveFromISR+0x66>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10c      	bne.n	800b8f0 <xQueueGiveFromISR+0x84>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	b672      	cpsid	i
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	b662      	cpsie	i
 800b8ea:	61bb      	str	r3, [r7, #24]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8f0:	f002 fb1c 	bl	800df2c <vPortValidateInterruptPriority>
	__asm volatile
 800b8f4:	f3ef 8211 	mrs	r2, BASEPRI
 800b8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fc:	b672      	cpsid	i
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	b662      	cpsie	i
 800b90c:	617a      	str	r2, [r7, #20]
 800b90e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b910:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b912:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b920:	429a      	cmp	r2, r3
 800b922:	d22b      	bcs.n	800b97c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93e:	d112      	bne.n	800b966 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	d016      	beq.n	800b976 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	3324      	adds	r3, #36	; 0x24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 f917 	bl	800cb80 <xTaskRemoveFromEventList>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00e      	beq.n	800b976 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00b      	beq.n	800b976 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2201      	movs	r2, #1
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e007      	b.n	800b976 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b96a:	3301      	adds	r3, #1
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	b25a      	sxtb	r2, r3
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b976:	2301      	movs	r3, #1
 800b978:	637b      	str	r3, [r7, #52]	; 0x34
 800b97a:	e001      	b.n	800b980 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b97c:	2300      	movs	r3, #0
 800b97e:	637b      	str	r3, [r7, #52]	; 0x34
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f383 8811 	msr	BASEPRI, r3
}
 800b98a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3738      	adds	r7, #56	; 0x38
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08c      	sub	sp, #48	; 0x30
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10c      	bne.n	800b9cc <xQueueReceive+0x34>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	b672      	cpsid	i
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	b662      	cpsie	i
 800b9c6:	623b      	str	r3, [r7, #32]
}
 800b9c8:	bf00      	nop
 800b9ca:	e7fe      	b.n	800b9ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d103      	bne.n	800b9da <xQueueReceive+0x42>
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <xQueueReceive+0x46>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e000      	b.n	800b9e0 <xQueueReceive+0x48>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10c      	bne.n	800b9fe <xQueueReceive+0x66>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	b672      	cpsid	i
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	b662      	cpsie	i
 800b9f8:	61fb      	str	r3, [r7, #28]
}
 800b9fa:	bf00      	nop
 800b9fc:	e7fe      	b.n	800b9fc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9fe:	f001 fa99 	bl	800cf34 <xTaskGetSchedulerState>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <xQueueReceive+0x76>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <xQueueReceive+0x7a>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e000      	b.n	800ba14 <xQueueReceive+0x7c>
 800ba12:	2300      	movs	r3, #0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10c      	bne.n	800ba32 <xQueueReceive+0x9a>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	b672      	cpsid	i
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	b662      	cpsie	i
 800ba2c:	61bb      	str	r3, [r7, #24]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba32:	f002 f993 	bl	800dd5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d01f      	beq.n	800ba82 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba42:	68b9      	ldr	r1, [r7, #8]
 800ba44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba46:	f000 face 	bl	800bfe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00f      	beq.n	800ba7a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	3310      	adds	r3, #16
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 f88e 	bl	800cb80 <xTaskRemoveFromEventList>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba6a:	4b3d      	ldr	r3, [pc, #244]	; (800bb60 <xQueueReceive+0x1c8>)
 800ba6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba7a:	f002 f9a3 	bl	800ddc4 <vPortExitCritical>
				return pdPASS;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e069      	b.n	800bb56 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d103      	bne.n	800ba90 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba88:	f002 f99c 	bl	800ddc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	e062      	b.n	800bb56 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba96:	f107 0310 	add.w	r3, r7, #16
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 f8d6 	bl	800cc4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baa4:	f002 f98e 	bl	800ddc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baa8:	f000 fe36 	bl	800c718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baac:	f002 f956 	bl	800dd5c <vPortEnterCritical>
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bab6:	b25b      	sxtb	r3, r3
 800bab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babc:	d103      	bne.n	800bac6 <xQueueReceive+0x12e>
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bacc:	b25b      	sxtb	r3, r3
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d103      	bne.n	800badc <xQueueReceive+0x144>
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800badc:	f002 f972 	bl	800ddc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bae0:	1d3a      	adds	r2, r7, #4
 800bae2:	f107 0310 	add.w	r3, r7, #16
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 f8c5 	bl	800cc78 <xTaskCheckForTimeOut>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d123      	bne.n	800bb3c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf6:	f000 faee 	bl	800c0d6 <prvIsQueueEmpty>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d017      	beq.n	800bb30 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	3324      	adds	r3, #36	; 0x24
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4611      	mov	r1, r2
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 ffe5 	bl	800cad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb10:	f000 fa8f 	bl	800c032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb14:	f000 fe0e 	bl	800c734 <xTaskResumeAll>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d189      	bne.n	800ba32 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bb1e:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <xQueueReceive+0x1c8>)
 800bb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	e780      	b.n	800ba32 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb32:	f000 fa7e 	bl	800c032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb36:	f000 fdfd 	bl	800c734 <xTaskResumeAll>
 800bb3a:	e77a      	b.n	800ba32 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb3e:	f000 fa78 	bl	800c032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb42:	f000 fdf7 	bl	800c734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb48:	f000 fac5 	bl	800c0d6 <prvIsQueueEmpty>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f43f af6f 	beq.w	800ba32 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3730      	adds	r7, #48	; 0x30
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08e      	sub	sp, #56	; 0x38
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10c      	bne.n	800bb9a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	b672      	cpsid	i
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	b662      	cpsie	i
 800bb94:	623b      	str	r3, [r7, #32]
}
 800bb96:	bf00      	nop
 800bb98:	e7fe      	b.n	800bb98 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00c      	beq.n	800bbbc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	b672      	cpsid	i
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	b662      	cpsie	i
 800bbb6:	61fb      	str	r3, [r7, #28]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbbc:	f001 f9ba 	bl	800cf34 <xTaskGetSchedulerState>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <xQueueSemaphoreTake+0x68>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <xQueueSemaphoreTake+0x6c>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e000      	b.n	800bbd2 <xQueueSemaphoreTake+0x6e>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10c      	bne.n	800bbf0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	b672      	cpsid	i
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	b662      	cpsie	i
 800bbea:	61bb      	str	r3, [r7, #24]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbf0:	f002 f8b4 	bl	800dd5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d024      	beq.n	800bc4a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	1e5a      	subs	r2, r3, #1
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d104      	bne.n	800bc1a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc10:	f001 fb0e 	bl	800d230 <pvTaskIncrementMutexHeldCount>
 800bc14:	4602      	mov	r2, r0
 800bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00f      	beq.n	800bc42 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	3310      	adds	r3, #16
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 ffaa 	bl	800cb80 <xTaskRemoveFromEventList>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d007      	beq.n	800bc42 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc32:	4b55      	ldr	r3, [pc, #340]	; (800bd88 <xQueueSemaphoreTake+0x224>)
 800bc34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc42:	f002 f8bf 	bl	800ddc4 <vPortExitCritical>
				return pdPASS;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e099      	b.n	800bd7e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d113      	bne.n	800bc78 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00c      	beq.n	800bc70 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5a:	b672      	cpsid	i
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	b662      	cpsie	i
 800bc6a:	617b      	str	r3, [r7, #20]
}
 800bc6c:	bf00      	nop
 800bc6e:	e7fe      	b.n	800bc6e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bc70:	f002 f8a8 	bl	800ddc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc74:	2300      	movs	r3, #0
 800bc76:	e082      	b.n	800bd7e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc7e:	f107 030c 	add.w	r3, r7, #12
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 ffe2 	bl	800cc4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc8c:	f002 f89a 	bl	800ddc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc90:	f000 fd42 	bl	800c718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc94:	f002 f862 	bl	800dd5c <vPortEnterCritical>
 800bc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d103      	bne.n	800bcae <xQueueSemaphoreTake+0x14a>
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d103      	bne.n	800bcc4 <xQueueSemaphoreTake+0x160>
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcc4:	f002 f87e 	bl	800ddc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcc8:	463a      	mov	r2, r7
 800bcca:	f107 030c 	add.w	r3, r7, #12
 800bcce:	4611      	mov	r1, r2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 ffd1 	bl	800cc78 <xTaskCheckForTimeOut>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d132      	bne.n	800bd42 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcde:	f000 f9fa 	bl	800c0d6 <prvIsQueueEmpty>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d026      	beq.n	800bd36 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d109      	bne.n	800bd04 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bcf0:	f002 f834 	bl	800dd5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f001 f939 	bl	800cf70 <xTaskPriorityInherit>
 800bcfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bd00:	f002 f860 	bl	800ddc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	3324      	adds	r3, #36	; 0x24
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fee3 	bl	800cad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd14:	f000 f98d 	bl	800c032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd18:	f000 fd0c 	bl	800c734 <xTaskResumeAll>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f47f af66 	bne.w	800bbf0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bd24:	4b18      	ldr	r3, [pc, #96]	; (800bd88 <xQueueSemaphoreTake+0x224>)
 800bd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	e75c      	b.n	800bbf0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bd36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd38:	f000 f97b 	bl	800c032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd3c:	f000 fcfa 	bl	800c734 <xTaskResumeAll>
 800bd40:	e756      	b.n	800bbf0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd44:	f000 f975 	bl	800c032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd48:	f000 fcf4 	bl	800c734 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd4e:	f000 f9c2 	bl	800c0d6 <prvIsQueueEmpty>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f43f af4b 	beq.w	800bbf0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00d      	beq.n	800bd7c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bd60:	f001 fffc 	bl	800dd5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bd64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd66:	f000 f8bc 	bl	800bee2 <prvGetDisinheritPriorityAfterTimeout>
 800bd6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 f9d6 	bl	800d124 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bd78:	f002 f824 	bl	800ddc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3738      	adds	r7, #56	; 0x38
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	; 0x38
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10c      	bne.n	800bdbc <xQueueReceiveFromISR+0x30>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	b672      	cpsid	i
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	b662      	cpsie	i
 800bdb6:	623b      	str	r3, [r7, #32]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d103      	bne.n	800bdca <xQueueReceiveFromISR+0x3e>
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <xQueueReceiveFromISR+0x42>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <xQueueReceiveFromISR+0x44>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10c      	bne.n	800bdee <xQueueReceiveFromISR+0x62>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd8:	b672      	cpsid	i
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	b662      	cpsie	i
 800bde8:	61fb      	str	r3, [r7, #28]
}
 800bdea:	bf00      	nop
 800bdec:	e7fe      	b.n	800bdec <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdee:	f002 f89d 	bl	800df2c <vPortValidateInterruptPriority>
	__asm volatile
 800bdf2:	f3ef 8211 	mrs	r2, BASEPRI
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	b672      	cpsid	i
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	b662      	cpsie	i
 800be0a:	61ba      	str	r2, [r7, #24]
 800be0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d02f      	beq.n	800be7e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be2c:	f000 f8db 	bl	800bfe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	1e5a      	subs	r2, r3, #1
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be40:	d112      	bne.n	800be68 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d016      	beq.n	800be78 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	3310      	adds	r3, #16
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fe96 	bl	800cb80 <xTaskRemoveFromEventList>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	e007      	b.n	800be78 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be6c:	3301      	adds	r3, #1
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	b25a      	sxtb	r2, r3
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800be78:	2301      	movs	r3, #1
 800be7a:	637b      	str	r3, [r7, #52]	; 0x34
 800be7c:	e001      	b.n	800be82 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800be7e:	2300      	movs	r3, #0
 800be80:	637b      	str	r3, [r7, #52]	; 0x34
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f383 8811 	msr	BASEPRI, r3
}
 800be8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be90:	4618      	mov	r0, r3
 800be92:	3738      	adds	r7, #56	; 0x38
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10c      	bne.n	800bec4 <vQueueDelete+0x2c>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	b672      	cpsid	i
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	b662      	cpsie	i
 800bebe:	60bb      	str	r3, [r7, #8]
}
 800bec0:	bf00      	nop
 800bec2:	e7fe      	b.n	800bec2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f95f 	bl	800c188 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f002 f937 	bl	800e148 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800beda:	bf00      	nop
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bee2:	b480      	push	{r7}
 800bee4:	b085      	sub	sp, #20
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d006      	beq.n	800bf00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800befc:	60fb      	str	r3, [r7, #12]
 800befe:	e001      	b.n	800bf04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf04:	68fb      	ldr	r3, [r7, #12]
	}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b086      	sub	sp, #24
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10d      	bne.n	800bf4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d14d      	bne.n	800bfd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 f87f 	bl	800d040 <xTaskPriorityDisinherit>
 800bf42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	609a      	str	r2, [r3, #8]
 800bf4a:	e043      	b.n	800bfd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d119      	bne.n	800bf86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6858      	ldr	r0, [r3, #4]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	68b9      	ldr	r1, [r7, #8]
 800bf5e:	f002 fa3d 	bl	800e3dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6a:	441a      	add	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d32b      	bcc.n	800bfd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	605a      	str	r2, [r3, #4]
 800bf84:	e026      	b.n	800bfd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	68d8      	ldr	r0, [r3, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8e:	461a      	mov	r2, r3
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	f002 fa23 	bl	800e3dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	425b      	negs	r3, r3
 800bfa0:	441a      	add	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68da      	ldr	r2, [r3, #12]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d207      	bcs.n	800bfc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	689a      	ldr	r2, [r3, #8]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfba:	425b      	negs	r3, r3
 800bfbc:	441a      	add	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d105      	bne.n	800bfd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfdc:	697b      	ldr	r3, [r7, #20]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d018      	beq.n	800c02a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68da      	ldr	r2, [r3, #12]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c000:	441a      	add	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68da      	ldr	r2, [r3, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d303      	bcc.n	800c01a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68d9      	ldr	r1, [r3, #12]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	461a      	mov	r2, r3
 800c024:	6838      	ldr	r0, [r7, #0]
 800c026:	f002 f9d9 	bl	800e3dc <memcpy>
	}
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c03a:	f001 fe8f 	bl	800dd5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c046:	e011      	b.n	800c06c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d012      	beq.n	800c076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3324      	adds	r3, #36	; 0x24
 800c054:	4618      	mov	r0, r3
 800c056:	f000 fd93 	bl	800cb80 <xTaskRemoveFromEventList>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c060:	f000 fe70 	bl	800cd44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c064:	7bfb      	ldrb	r3, [r7, #15]
 800c066:	3b01      	subs	r3, #1
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c070:	2b00      	cmp	r3, #0
 800c072:	dce9      	bgt.n	800c048 <prvUnlockQueue+0x16>
 800c074:	e000      	b.n	800c078 <prvUnlockQueue+0x46>
					break;
 800c076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	22ff      	movs	r2, #255	; 0xff
 800c07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c080:	f001 fea0 	bl	800ddc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c084:	f001 fe6a 	bl	800dd5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c08e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c090:	e011      	b.n	800c0b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d012      	beq.n	800c0c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3310      	adds	r3, #16
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 fd6e 	bl	800cb80 <xTaskRemoveFromEventList>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d001      	beq.n	800c0ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0aa:	f000 fe4b 	bl	800cd44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0ae:	7bbb      	ldrb	r3, [r7, #14]
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	dce9      	bgt.n	800c092 <prvUnlockQueue+0x60>
 800c0be:	e000      	b.n	800c0c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	22ff      	movs	r2, #255	; 0xff
 800c0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0ca:	f001 fe7b 	bl	800ddc4 <vPortExitCritical>
}
 800c0ce:	bf00      	nop
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0de:	f001 fe3d 	bl	800dd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	e001      	b.n	800c0f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0f4:	f001 fe66 	bl	800ddc4 <vPortExitCritical>

	return xReturn;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c10a:	f001 fe27 	bl	800dd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c116:	429a      	cmp	r2, r3
 800c118:	d102      	bne.n	800c120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c11a:	2301      	movs	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	e001      	b.n	800c124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c120:	2300      	movs	r3, #0
 800c122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c124:	f001 fe4e 	bl	800ddc4 <vPortExitCritical>

	return xReturn;
 800c128:	68fb      	ldr	r3, [r7, #12]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
	...

0800c134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	e014      	b.n	800c16e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c144:	4a0f      	ldr	r2, [pc, #60]	; (800c184 <vQueueAddToRegistry+0x50>)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10b      	bne.n	800c168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c150:	490c      	ldr	r1, [pc, #48]	; (800c184 <vQueueAddToRegistry+0x50>)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c15a:	4a0a      	ldr	r2, [pc, #40]	; (800c184 <vQueueAddToRegistry+0x50>)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c166:	e006      	b.n	800c176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3301      	adds	r3, #1
 800c16c:	60fb      	str	r3, [r7, #12]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b07      	cmp	r3, #7
 800c172:	d9e7      	bls.n	800c144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c174:	bf00      	nop
 800c176:	bf00      	nop
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20000f4c 	.word	0x20000f4c

0800c188 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e016      	b.n	800c1c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c196:	4a10      	ldr	r2, [pc, #64]	; (800c1d8 <vQueueUnregisterQueue+0x50>)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d10b      	bne.n	800c1be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c1a6:	4a0c      	ldr	r2, [pc, #48]	; (800c1d8 <vQueueUnregisterQueue+0x50>)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c1b0:	4a09      	ldr	r2, [pc, #36]	; (800c1d8 <vQueueUnregisterQueue+0x50>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	4413      	add	r3, r2
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	605a      	str	r2, [r3, #4]
				break;
 800c1bc:	e006      	b.n	800c1cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b07      	cmp	r3, #7
 800c1c8:	d9e5      	bls.n	800c196 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c1ca:	bf00      	nop
 800c1cc:	bf00      	nop
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	20000f4c 	.word	0x20000f4c

0800c1dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1ec:	f001 fdb6 	bl	800dd5c <vPortEnterCritical>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1f6:	b25b      	sxtb	r3, r3
 800c1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fc:	d103      	bne.n	800c206 <vQueueWaitForMessageRestricted+0x2a>
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c20c:	b25b      	sxtb	r3, r3
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d103      	bne.n	800c21c <vQueueWaitForMessageRestricted+0x40>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c21c:	f001 fdd2 	bl	800ddc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c224:	2b00      	cmp	r3, #0
 800c226:	d106      	bne.n	800c236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	3324      	adds	r3, #36	; 0x24
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 fc77 	bl	800cb24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c236:	6978      	ldr	r0, [r7, #20]
 800c238:	f7ff fefb 	bl	800c032 <prvUnlockQueue>
	}
 800c23c:	bf00      	nop
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	; 0x38
 800c248:	af04      	add	r7, sp, #16
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10c      	bne.n	800c272 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	b672      	cpsid	i
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	b662      	cpsie	i
 800c26c:	623b      	str	r3, [r7, #32]
}
 800c26e:	bf00      	nop
 800c270:	e7fe      	b.n	800c270 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10c      	bne.n	800c292 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	b672      	cpsid	i
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	b662      	cpsie	i
 800c28c:	61fb      	str	r3, [r7, #28]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c292:	23bc      	movs	r3, #188	; 0xbc
 800c294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2bbc      	cmp	r3, #188	; 0xbc
 800c29a:	d00c      	beq.n	800c2b6 <xTaskCreateStatic+0x72>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	b672      	cpsid	i
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	b662      	cpsie	i
 800c2b0:	61bb      	str	r3, [r7, #24]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d01e      	beq.n	800c2fc <xTaskCreateStatic+0xb8>
 800c2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d01b      	beq.n	800c2fc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9303      	str	r3, [sp, #12]
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	9302      	str	r3, [sp, #8]
 800c2de:	f107 0314 	add.w	r3, r7, #20
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f850 	bl	800c394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2f6:	f000 f8f5 	bl	800c4e4 <prvAddNewTaskToReadyList>
 800c2fa:	e001      	b.n	800c300 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c300:	697b      	ldr	r3, [r7, #20]
	}
 800c302:	4618      	mov	r0, r3
 800c304:	3728      	adds	r7, #40	; 0x28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b08c      	sub	sp, #48	; 0x30
 800c30e:	af04      	add	r7, sp, #16
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	603b      	str	r3, [r7, #0]
 800c316:	4613      	mov	r3, r2
 800c318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4618      	mov	r0, r3
 800c320:	f001 fe48 	bl	800dfb4 <pvPortMalloc>
 800c324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00e      	beq.n	800c34a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c32c:	20bc      	movs	r0, #188	; 0xbc
 800c32e:	f001 fe41 	bl	800dfb4 <pvPortMalloc>
 800c332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d003      	beq.n	800c342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	631a      	str	r2, [r3, #48]	; 0x30
 800c340:	e005      	b.n	800c34e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c342:	6978      	ldr	r0, [r7, #20]
 800c344:	f001 ff00 	bl	800e148 <vPortFree>
 800c348:	e001      	b.n	800c34e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c34a:	2300      	movs	r3, #0
 800c34c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d017      	beq.n	800c384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c35c:	88fa      	ldrh	r2, [r7, #6]
 800c35e:	2300      	movs	r3, #0
 800c360:	9303      	str	r3, [sp, #12]
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	9302      	str	r3, [sp, #8]
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	68b9      	ldr	r1, [r7, #8]
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f000 f80e 	bl	800c394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c378:	69f8      	ldr	r0, [r7, #28]
 800c37a:	f000 f8b3 	bl	800c4e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c37e:	2301      	movs	r3, #1
 800c380:	61bb      	str	r3, [r7, #24]
 800c382:	e002      	b.n	800c38a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c384:	f04f 33ff 	mov.w	r3, #4294967295
 800c388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c38a:	69bb      	ldr	r3, [r7, #24]
	}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3720      	adds	r7, #32
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	21a5      	movs	r1, #165	; 0xa5
 800c3ae:	f002 f823 	bl	800e3f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c3bc:	440b      	add	r3, r1
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	f023 0307 	bic.w	r3, r3, #7
 800c3ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	f003 0307 	and.w	r3, r3, #7
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00c      	beq.n	800c3f0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3da:	b672      	cpsid	i
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	b662      	cpsie	i
 800c3ea:	617b      	str	r3, [r7, #20]
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d01f      	beq.n	800c436 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61fb      	str	r3, [r7, #28]
 800c3fa:	e012      	b.n	800c422 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	4413      	add	r3, r2
 800c402:	7819      	ldrb	r1, [r3, #0]
 800c404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	4413      	add	r3, r2
 800c40a:	3334      	adds	r3, #52	; 0x34
 800c40c:	460a      	mov	r2, r1
 800c40e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	4413      	add	r3, r2
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d006      	beq.n	800c42a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	3301      	adds	r3, #1
 800c420:	61fb      	str	r3, [r7, #28]
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	2b0f      	cmp	r3, #15
 800c426:	d9e9      	bls.n	800c3fc <prvInitialiseNewTask+0x68>
 800c428:	e000      	b.n	800c42c <prvInitialiseNewTask+0x98>
			{
				break;
 800c42a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c434:	e003      	b.n	800c43e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	2b37      	cmp	r3, #55	; 0x37
 800c442:	d901      	bls.n	800c448 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c444:	2337      	movs	r3, #55	; 0x37
 800c446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	2200      	movs	r2, #0
 800c458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	3304      	adds	r3, #4
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fd4c 	bl	800aefc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	3318      	adds	r3, #24
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe fd47 	bl	800aefc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	2200      	movs	r2, #0
 800c488:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c496:	3354      	adds	r3, #84	; 0x54
 800c498:	2260      	movs	r2, #96	; 0x60
 800c49a:	2100      	movs	r1, #0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f001 ffab 	bl	800e3f8 <memset>
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	4a0c      	ldr	r2, [pc, #48]	; (800c4d8 <prvInitialiseNewTask+0x144>)
 800c4a6:	659a      	str	r2, [r3, #88]	; 0x58
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4aa:	4a0c      	ldr	r2, [pc, #48]	; (800c4dc <prvInitialiseNewTask+0x148>)
 800c4ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	4a0b      	ldr	r2, [pc, #44]	; (800c4e0 <prvInitialiseNewTask+0x14c>)
 800c4b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	68f9      	ldr	r1, [r7, #12]
 800c4b8:	69b8      	ldr	r0, [r7, #24]
 800c4ba:	f001 fb3f 	bl	800db3c <pxPortInitialiseStack>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4d0:	bf00      	nop
 800c4d2:	3720      	adds	r7, #32
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	0800efd0 	.word	0x0800efd0
 800c4dc:	0800eff0 	.word	0x0800eff0
 800c4e0:	0800efb0 	.word	0x0800efb0

0800c4e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4ec:	f001 fc36 	bl	800dd5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4f0:	4b2d      	ldr	r3, [pc, #180]	; (800c5a8 <prvAddNewTaskToReadyList+0xc4>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	4a2c      	ldr	r2, [pc, #176]	; (800c5a8 <prvAddNewTaskToReadyList+0xc4>)
 800c4f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4fa:	4b2c      	ldr	r3, [pc, #176]	; (800c5ac <prvAddNewTaskToReadyList+0xc8>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d109      	bne.n	800c516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c502:	4a2a      	ldr	r2, [pc, #168]	; (800c5ac <prvAddNewTaskToReadyList+0xc8>)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c508:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <prvAddNewTaskToReadyList+0xc4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d110      	bne.n	800c532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c510:	f000 fc3c 	bl	800cd8c <prvInitialiseTaskLists>
 800c514:	e00d      	b.n	800c532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c516:	4b26      	ldr	r3, [pc, #152]	; (800c5b0 <prvAddNewTaskToReadyList+0xcc>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c51e:	4b23      	ldr	r3, [pc, #140]	; (800c5ac <prvAddNewTaskToReadyList+0xc8>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	429a      	cmp	r2, r3
 800c52a:	d802      	bhi.n	800c532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c52c:	4a1f      	ldr	r2, [pc, #124]	; (800c5ac <prvAddNewTaskToReadyList+0xc8>)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c532:	4b20      	ldr	r3, [pc, #128]	; (800c5b4 <prvAddNewTaskToReadyList+0xd0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3301      	adds	r3, #1
 800c538:	4a1e      	ldr	r2, [pc, #120]	; (800c5b4 <prvAddNewTaskToReadyList+0xd0>)
 800c53a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c53c:	4b1d      	ldr	r3, [pc, #116]	; (800c5b4 <prvAddNewTaskToReadyList+0xd0>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c548:	4b1b      	ldr	r3, [pc, #108]	; (800c5b8 <prvAddNewTaskToReadyList+0xd4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d903      	bls.n	800c558 <prvAddNewTaskToReadyList+0x74>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	4a18      	ldr	r2, [pc, #96]	; (800c5b8 <prvAddNewTaskToReadyList+0xd4>)
 800c556:	6013      	str	r3, [r2, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4a15      	ldr	r2, [pc, #84]	; (800c5bc <prvAddNewTaskToReadyList+0xd8>)
 800c566:	441a      	add	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3304      	adds	r3, #4
 800c56c:	4619      	mov	r1, r3
 800c56e:	4610      	mov	r0, r2
 800c570:	f7fe fcd1 	bl	800af16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c574:	f001 fc26 	bl	800ddc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c578:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <prvAddNewTaskToReadyList+0xcc>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00e      	beq.n	800c59e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <prvAddNewTaskToReadyList+0xc8>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d207      	bcs.n	800c59e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c58e:	4b0c      	ldr	r3, [pc, #48]	; (800c5c0 <prvAddNewTaskToReadyList+0xdc>)
 800c590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c59e:	bf00      	nop
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20001460 	.word	0x20001460
 800c5ac:	20000f8c 	.word	0x20000f8c
 800c5b0:	2000146c 	.word	0x2000146c
 800c5b4:	2000147c 	.word	0x2000147c
 800c5b8:	20001468 	.word	0x20001468
 800c5bc:	20000f90 	.word	0x20000f90
 800c5c0:	e000ed04 	.word	0xe000ed04

0800c5c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d019      	beq.n	800c60a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5d6:	4b14      	ldr	r3, [pc, #80]	; (800c628 <vTaskDelay+0x64>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00c      	beq.n	800c5f8 <vTaskDelay+0x34>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	b672      	cpsid	i
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	b662      	cpsie	i
 800c5f2:	60bb      	str	r3, [r7, #8]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c5f8:	f000 f88e 	bl	800c718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fe2a 	bl	800d258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c604:	f000 f896 	bl	800c734 <xTaskResumeAll>
 800c608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d107      	bne.n	800c620 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c610:	4b06      	ldr	r3, [pc, #24]	; (800c62c <vTaskDelay+0x68>)
 800c612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c620:	bf00      	nop
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20001488 	.word	0x20001488
 800c62c:	e000ed04 	.word	0xe000ed04

0800c630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b08a      	sub	sp, #40	; 0x28
 800c634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c636:	2300      	movs	r3, #0
 800c638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c63a:	2300      	movs	r3, #0
 800c63c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c63e:	463a      	mov	r2, r7
 800c640:	1d39      	adds	r1, r7, #4
 800c642:	f107 0308 	add.w	r3, r7, #8
 800c646:	4618      	mov	r0, r3
 800c648:	f7fe fc04 	bl	800ae54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c64c:	6839      	ldr	r1, [r7, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	9202      	str	r2, [sp, #8]
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	2300      	movs	r3, #0
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	2300      	movs	r3, #0
 800c65c:	460a      	mov	r2, r1
 800c65e:	4926      	ldr	r1, [pc, #152]	; (800c6f8 <vTaskStartScheduler+0xc8>)
 800c660:	4826      	ldr	r0, [pc, #152]	; (800c6fc <vTaskStartScheduler+0xcc>)
 800c662:	f7ff fdef 	bl	800c244 <xTaskCreateStatic>
 800c666:	4603      	mov	r3, r0
 800c668:	4a25      	ldr	r2, [pc, #148]	; (800c700 <vTaskStartScheduler+0xd0>)
 800c66a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c66c:	4b24      	ldr	r3, [pc, #144]	; (800c700 <vTaskStartScheduler+0xd0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c674:	2301      	movs	r3, #1
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	e001      	b.n	800c67e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d102      	bne.n	800c68a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c684:	f000 fe3c 	bl	800d300 <xTimerCreateTimerTask>
 800c688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d11d      	bne.n	800c6cc <vTaskStartScheduler+0x9c>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	b672      	cpsid	i
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	b662      	cpsie	i
 800c6a4:	613b      	str	r3, [r7, #16]
}
 800c6a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6a8:	4b16      	ldr	r3, [pc, #88]	; (800c704 <vTaskStartScheduler+0xd4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3354      	adds	r3, #84	; 0x54
 800c6ae:	4a16      	ldr	r2, [pc, #88]	; (800c708 <vTaskStartScheduler+0xd8>)
 800c6b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6b2:	4b16      	ldr	r3, [pc, #88]	; (800c70c <vTaskStartScheduler+0xdc>)
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6ba:	4b15      	ldr	r3, [pc, #84]	; (800c710 <vTaskStartScheduler+0xe0>)
 800c6bc:	2201      	movs	r2, #1
 800c6be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6c0:	4b14      	ldr	r3, [pc, #80]	; (800c714 <vTaskStartScheduler+0xe4>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6c6:	f001 facb 	bl	800dc60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6ca:	e010      	b.n	800c6ee <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d2:	d10c      	bne.n	800c6ee <vTaskStartScheduler+0xbe>
	__asm volatile
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	b672      	cpsid	i
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	b662      	cpsie	i
 800c6e8:	60fb      	str	r3, [r7, #12]
}
 800c6ea:	bf00      	nop
 800c6ec:	e7fe      	b.n	800c6ec <vTaskStartScheduler+0xbc>
}
 800c6ee:	bf00      	nop
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0800eac0 	.word	0x0800eac0
 800c6fc:	0800cd5d 	.word	0x0800cd5d
 800c700:	20001484 	.word	0x20001484
 800c704:	20000f8c 	.word	0x20000f8c
 800c708:	20000014 	.word	0x20000014
 800c70c:	20001480 	.word	0x20001480
 800c710:	2000146c 	.word	0x2000146c
 800c714:	20001464 	.word	0x20001464

0800c718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c718:	b480      	push	{r7}
 800c71a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c71c:	4b04      	ldr	r3, [pc, #16]	; (800c730 <vTaskSuspendAll+0x18>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3301      	adds	r3, #1
 800c722:	4a03      	ldr	r2, [pc, #12]	; (800c730 <vTaskSuspendAll+0x18>)
 800c724:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c726:	bf00      	nop
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	20001488 	.word	0x20001488

0800c734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c73e:	2300      	movs	r3, #0
 800c740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c742:	4b43      	ldr	r3, [pc, #268]	; (800c850 <xTaskResumeAll+0x11c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10c      	bne.n	800c764 <xTaskResumeAll+0x30>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	b672      	cpsid	i
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	b662      	cpsie	i
 800c75e:	603b      	str	r3, [r7, #0]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c764:	f001 fafa 	bl	800dd5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c768:	4b39      	ldr	r3, [pc, #228]	; (800c850 <xTaskResumeAll+0x11c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3b01      	subs	r3, #1
 800c76e:	4a38      	ldr	r2, [pc, #224]	; (800c850 <xTaskResumeAll+0x11c>)
 800c770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c772:	4b37      	ldr	r3, [pc, #220]	; (800c850 <xTaskResumeAll+0x11c>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d162      	bne.n	800c840 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c77a:	4b36      	ldr	r3, [pc, #216]	; (800c854 <xTaskResumeAll+0x120>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d05e      	beq.n	800c840 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c782:	e02f      	b.n	800c7e4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c784:	4b34      	ldr	r3, [pc, #208]	; (800c858 <xTaskResumeAll+0x124>)
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	3318      	adds	r3, #24
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe fc1d 	bl	800afd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3304      	adds	r3, #4
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fc18 	bl	800afd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a4:	4b2d      	ldr	r3, [pc, #180]	; (800c85c <xTaskResumeAll+0x128>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d903      	bls.n	800c7b4 <xTaskResumeAll+0x80>
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	4a2a      	ldr	r2, [pc, #168]	; (800c85c <xTaskResumeAll+0x128>)
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4a27      	ldr	r2, [pc, #156]	; (800c860 <xTaskResumeAll+0x12c>)
 800c7c2:	441a      	add	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	f7fe fba3 	bl	800af16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d4:	4b23      	ldr	r3, [pc, #140]	; (800c864 <xTaskResumeAll+0x130>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d302      	bcc.n	800c7e4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c7de:	4b22      	ldr	r3, [pc, #136]	; (800c868 <xTaskResumeAll+0x134>)
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7e4:	4b1c      	ldr	r3, [pc, #112]	; (800c858 <xTaskResumeAll+0x124>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1cb      	bne.n	800c784 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7f2:	f000 fb6f 	bl	800ced4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c7f6:	4b1d      	ldr	r3, [pc, #116]	; (800c86c <xTaskResumeAll+0x138>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d010      	beq.n	800c824 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c802:	f000 f847 	bl	800c894 <xTaskIncrementTick>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c80c:	4b16      	ldr	r3, [pc, #88]	; (800c868 <xTaskResumeAll+0x134>)
 800c80e:	2201      	movs	r2, #1
 800c810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3b01      	subs	r3, #1
 800c816:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1f1      	bne.n	800c802 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c81e:	4b13      	ldr	r3, [pc, #76]	; (800c86c <xTaskResumeAll+0x138>)
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c824:	4b10      	ldr	r3, [pc, #64]	; (800c868 <xTaskResumeAll+0x134>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d009      	beq.n	800c840 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c82c:	2301      	movs	r3, #1
 800c82e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c830:	4b0f      	ldr	r3, [pc, #60]	; (800c870 <xTaskResumeAll+0x13c>)
 800c832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c840:	f001 fac0 	bl	800ddc4 <vPortExitCritical>

	return xAlreadyYielded;
 800c844:	68bb      	ldr	r3, [r7, #8]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20001488 	.word	0x20001488
 800c854:	20001460 	.word	0x20001460
 800c858:	20001420 	.word	0x20001420
 800c85c:	20001468 	.word	0x20001468
 800c860:	20000f90 	.word	0x20000f90
 800c864:	20000f8c 	.word	0x20000f8c
 800c868:	20001474 	.word	0x20001474
 800c86c:	20001470 	.word	0x20001470
 800c870:	e000ed04 	.word	0xe000ed04

0800c874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c87a:	4b05      	ldr	r3, [pc, #20]	; (800c890 <xTaskGetTickCount+0x1c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c880:	687b      	ldr	r3, [r7, #4]
}
 800c882:	4618      	mov	r0, r3
 800c884:	370c      	adds	r7, #12
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	20001464 	.word	0x20001464

0800c894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c89e:	4b50      	ldr	r3, [pc, #320]	; (800c9e0 <xTaskIncrementTick+0x14c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f040 808b 	bne.w	800c9be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8a8:	4b4e      	ldr	r3, [pc, #312]	; (800c9e4 <xTaskIncrementTick+0x150>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c8b0:	4a4c      	ldr	r2, [pc, #304]	; (800c9e4 <xTaskIncrementTick+0x150>)
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d122      	bne.n	800c902 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8bc:	4b4a      	ldr	r3, [pc, #296]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00c      	beq.n	800c8e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	b672      	cpsid	i
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	b662      	cpsie	i
 800c8da:	603b      	str	r3, [r7, #0]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xTaskIncrementTick+0x4a>
 800c8e0:	4b41      	ldr	r3, [pc, #260]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	4b41      	ldr	r3, [pc, #260]	; (800c9ec <xTaskIncrementTick+0x158>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a3f      	ldr	r2, [pc, #252]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c8ec:	6013      	str	r3, [r2, #0]
 800c8ee:	4a3f      	ldr	r2, [pc, #252]	; (800c9ec <xTaskIncrementTick+0x158>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	4b3e      	ldr	r3, [pc, #248]	; (800c9f0 <xTaskIncrementTick+0x15c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	4a3d      	ldr	r2, [pc, #244]	; (800c9f0 <xTaskIncrementTick+0x15c>)
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	f000 fae9 	bl	800ced4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c902:	4b3c      	ldr	r3, [pc, #240]	; (800c9f4 <xTaskIncrementTick+0x160>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d349      	bcc.n	800c9a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c90c:	4b36      	ldr	r3, [pc, #216]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d104      	bne.n	800c920 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c916:	4b37      	ldr	r3, [pc, #220]	; (800c9f4 <xTaskIncrementTick+0x160>)
 800c918:	f04f 32ff 	mov.w	r2, #4294967295
 800c91c:	601a      	str	r2, [r3, #0]
					break;
 800c91e:	e03f      	b.n	800c9a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c920:	4b31      	ldr	r3, [pc, #196]	; (800c9e8 <xTaskIncrementTick+0x154>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d203      	bcs.n	800c940 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c938:	4a2e      	ldr	r2, [pc, #184]	; (800c9f4 <xTaskIncrementTick+0x160>)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c93e:	e02f      	b.n	800c9a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3304      	adds	r3, #4
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe fb43 	bl	800afd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3318      	adds	r3, #24
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fb3a 	bl	800afd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c960:	4b25      	ldr	r3, [pc, #148]	; (800c9f8 <xTaskIncrementTick+0x164>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	429a      	cmp	r2, r3
 800c966:	d903      	bls.n	800c970 <xTaskIncrementTick+0xdc>
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	4a22      	ldr	r2, [pc, #136]	; (800c9f8 <xTaskIncrementTick+0x164>)
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c974:	4613      	mov	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4a1f      	ldr	r2, [pc, #124]	; (800c9fc <xTaskIncrementTick+0x168>)
 800c97e:	441a      	add	r2, r3
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	3304      	adds	r3, #4
 800c984:	4619      	mov	r1, r3
 800c986:	4610      	mov	r0, r2
 800c988:	f7fe fac5 	bl	800af16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c990:	4b1b      	ldr	r3, [pc, #108]	; (800ca00 <xTaskIncrementTick+0x16c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	429a      	cmp	r2, r3
 800c998:	d3b8      	bcc.n	800c90c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c99a:	2301      	movs	r3, #1
 800c99c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c99e:	e7b5      	b.n	800c90c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9a0:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <xTaskIncrementTick+0x16c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a6:	4915      	ldr	r1, [pc, #84]	; (800c9fc <xTaskIncrementTick+0x168>)
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4413      	add	r3, r2
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	440b      	add	r3, r1
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d907      	bls.n	800c9c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	e004      	b.n	800c9c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c9be:	4b11      	ldr	r3, [pc, #68]	; (800ca04 <xTaskIncrementTick+0x170>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	4a0f      	ldr	r2, [pc, #60]	; (800ca04 <xTaskIncrementTick+0x170>)
 800c9c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <xTaskIncrementTick+0x174>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c9d4:	697b      	ldr	r3, [r7, #20]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20001488 	.word	0x20001488
 800c9e4:	20001464 	.word	0x20001464
 800c9e8:	20001418 	.word	0x20001418
 800c9ec:	2000141c 	.word	0x2000141c
 800c9f0:	20001478 	.word	0x20001478
 800c9f4:	20001480 	.word	0x20001480
 800c9f8:	20001468 	.word	0x20001468
 800c9fc:	20000f90 	.word	0x20000f90
 800ca00:	20000f8c 	.word	0x20000f8c
 800ca04:	20001470 	.word	0x20001470
 800ca08:	20001474 	.word	0x20001474

0800ca0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca12:	4b2b      	ldr	r3, [pc, #172]	; (800cac0 <vTaskSwitchContext+0xb4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca1a:	4b2a      	ldr	r3, [pc, #168]	; (800cac4 <vTaskSwitchContext+0xb8>)
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca20:	e048      	b.n	800cab4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ca22:	4b28      	ldr	r3, [pc, #160]	; (800cac4 <vTaskSwitchContext+0xb8>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca28:	4b27      	ldr	r3, [pc, #156]	; (800cac8 <vTaskSwitchContext+0xbc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e012      	b.n	800ca56 <vTaskSwitchContext+0x4a>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10c      	bne.n	800ca50 <vTaskSwitchContext+0x44>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	b672      	cpsid	i
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	b662      	cpsie	i
 800ca4a:	607b      	str	r3, [r7, #4]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <vTaskSwitchContext+0x42>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	491d      	ldr	r1, [pc, #116]	; (800cacc <vTaskSwitchContext+0xc0>)
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	440b      	add	r3, r1
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0e2      	beq.n	800ca30 <vTaskSwitchContext+0x24>
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a15      	ldr	r2, [pc, #84]	; (800cacc <vTaskSwitchContext+0xc0>)
 800ca76:	4413      	add	r3, r2
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	605a      	str	r2, [r3, #4]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d104      	bne.n	800ca9a <vTaskSwitchContext+0x8e>
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	605a      	str	r2, [r3, #4]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4a0b      	ldr	r2, [pc, #44]	; (800cad0 <vTaskSwitchContext+0xc4>)
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	4a08      	ldr	r2, [pc, #32]	; (800cac8 <vTaskSwitchContext+0xbc>)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <vTaskSwitchContext+0xc4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3354      	adds	r3, #84	; 0x54
 800cab0:	4a08      	ldr	r2, [pc, #32]	; (800cad4 <vTaskSwitchContext+0xc8>)
 800cab2:	6013      	str	r3, [r2, #0]
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	20001488 	.word	0x20001488
 800cac4:	20001474 	.word	0x20001474
 800cac8:	20001468 	.word	0x20001468
 800cacc:	20000f90 	.word	0x20000f90
 800cad0:	20000f8c 	.word	0x20000f8c
 800cad4:	20000014 	.word	0x20000014

0800cad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10c      	bne.n	800cb02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	b672      	cpsid	i
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	b662      	cpsie	i
 800cafc:	60fb      	str	r3, [r7, #12]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb02:	4b07      	ldr	r3, [pc, #28]	; (800cb20 <vTaskPlaceOnEventList+0x48>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3318      	adds	r3, #24
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7fe fa27 	bl	800af5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb10:	2101      	movs	r1, #1
 800cb12:	6838      	ldr	r0, [r7, #0]
 800cb14:	f000 fba0 	bl	800d258 <prvAddCurrentTaskToDelayedList>
}
 800cb18:	bf00      	nop
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20000f8c 	.word	0x20000f8c

0800cb24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10c      	bne.n	800cb50 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	b672      	cpsid	i
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	b662      	cpsie	i
 800cb4a:	617b      	str	r3, [r7, #20]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <vTaskPlaceOnEventListRestricted+0x58>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3318      	adds	r3, #24
 800cb56:	4619      	mov	r1, r3
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f7fe f9dc 	bl	800af16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800cb64:	f04f 33ff 	mov.w	r3, #4294967295
 800cb68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb6a:	6879      	ldr	r1, [r7, #4]
 800cb6c:	68b8      	ldr	r0, [r7, #8]
 800cb6e:	f000 fb73 	bl	800d258 <prvAddCurrentTaskToDelayedList>
	}
 800cb72:	bf00      	nop
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000f8c 	.word	0x20000f8c

0800cb80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10c      	bne.n	800cbb0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	b672      	cpsid	i
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	b662      	cpsie	i
 800cbaa:	60fb      	str	r3, [r7, #12]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	3318      	adds	r3, #24
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fa0b 	bl	800afd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbba:	4b1e      	ldr	r3, [pc, #120]	; (800cc34 <xTaskRemoveFromEventList+0xb4>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d11d      	bne.n	800cbfe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fa02 	bl	800afd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	4b19      	ldr	r3, [pc, #100]	; (800cc38 <xTaskRemoveFromEventList+0xb8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d903      	bls.n	800cbe0 <xTaskRemoveFromEventList+0x60>
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	4a16      	ldr	r2, [pc, #88]	; (800cc38 <xTaskRemoveFromEventList+0xb8>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4a13      	ldr	r2, [pc, #76]	; (800cc3c <xTaskRemoveFromEventList+0xbc>)
 800cbee:	441a      	add	r2, r3
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	f7fe f98d 	bl	800af16 <vListInsertEnd>
 800cbfc:	e005      	b.n	800cc0a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3318      	adds	r3, #24
 800cc02:	4619      	mov	r1, r3
 800cc04:	480e      	ldr	r0, [pc, #56]	; (800cc40 <xTaskRemoveFromEventList+0xc0>)
 800cc06:	f7fe f986 	bl	800af16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <xTaskRemoveFromEventList+0xc4>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d905      	bls.n	800cc24 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc1c:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <xTaskRemoveFromEventList+0xc8>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	e001      	b.n	800cc28 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cc24:	2300      	movs	r3, #0
 800cc26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc28:	697b      	ldr	r3, [r7, #20]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001488 	.word	0x20001488
 800cc38:	20001468 	.word	0x20001468
 800cc3c:	20000f90 	.word	0x20000f90
 800cc40:	20001420 	.word	0x20001420
 800cc44:	20000f8c 	.word	0x20000f8c
 800cc48:	20001474 	.word	0x20001474

0800cc4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc54:	4b06      	ldr	r3, [pc, #24]	; (800cc70 <vTaskInternalSetTimeOutState+0x24>)
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <vTaskInternalSetTimeOutState+0x28>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	605a      	str	r2, [r3, #4]
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20001478 	.word	0x20001478
 800cc74:	20001464 	.word	0x20001464

0800cc78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10c      	bne.n	800cca2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	b672      	cpsid	i
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	b662      	cpsie	i
 800cc9c:	613b      	str	r3, [r7, #16]
}
 800cc9e:	bf00      	nop
 800cca0:	e7fe      	b.n	800cca0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10c      	bne.n	800ccc2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	b672      	cpsid	i
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	b662      	cpsie	i
 800ccbc:	60fb      	str	r3, [r7, #12]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ccc2:	f001 f84b 	bl	800dd5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccc6:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <xTaskCheckForTimeOut+0xc4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	69ba      	ldr	r2, [r7, #24]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d102      	bne.n	800cce6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cce0:	2300      	movs	r3, #0
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	e023      	b.n	800cd2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <xTaskCheckForTimeOut+0xc8>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d007      	beq.n	800cd02 <xTaskCheckForTimeOut+0x8a>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	69ba      	ldr	r2, [r7, #24]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d302      	bcc.n	800cd02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	61fb      	str	r3, [r7, #28]
 800cd00:	e015      	b.n	800cd2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d20b      	bcs.n	800cd24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	1ad2      	subs	r2, r2, r3
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff ff97 	bl	800cc4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61fb      	str	r3, [r7, #28]
 800cd22:	e004      	b.n	800cd2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd2e:	f001 f849 	bl	800ddc4 <vPortExitCritical>

	return xReturn;
 800cd32:	69fb      	ldr	r3, [r7, #28]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	20001464 	.word	0x20001464
 800cd40:	20001478 	.word	0x20001478

0800cd44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd48:	4b03      	ldr	r3, [pc, #12]	; (800cd58 <vTaskMissedYield+0x14>)
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	601a      	str	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	20001474 	.word	0x20001474

0800cd5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd64:	f000 f852 	bl	800ce0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd68:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <prvIdleTask+0x28>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d9f9      	bls.n	800cd64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <prvIdleTask+0x2c>)
 800cd72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd80:	e7f0      	b.n	800cd64 <prvIdleTask+0x8>
 800cd82:	bf00      	nop
 800cd84:	20000f90 	.word	0x20000f90
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e00c      	b.n	800cdb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4a12      	ldr	r2, [pc, #72]	; (800cdec <prvInitialiseTaskLists+0x60>)
 800cda4:	4413      	add	r3, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe f888 	bl	800aebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b37      	cmp	r3, #55	; 0x37
 800cdb6:	d9ef      	bls.n	800cd98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdb8:	480d      	ldr	r0, [pc, #52]	; (800cdf0 <prvInitialiseTaskLists+0x64>)
 800cdba:	f7fe f87f 	bl	800aebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdbe:	480d      	ldr	r0, [pc, #52]	; (800cdf4 <prvInitialiseTaskLists+0x68>)
 800cdc0:	f7fe f87c 	bl	800aebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdc4:	480c      	ldr	r0, [pc, #48]	; (800cdf8 <prvInitialiseTaskLists+0x6c>)
 800cdc6:	f7fe f879 	bl	800aebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdca:	480c      	ldr	r0, [pc, #48]	; (800cdfc <prvInitialiseTaskLists+0x70>)
 800cdcc:	f7fe f876 	bl	800aebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdd0:	480b      	ldr	r0, [pc, #44]	; (800ce00 <prvInitialiseTaskLists+0x74>)
 800cdd2:	f7fe f873 	bl	800aebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdd6:	4b0b      	ldr	r3, [pc, #44]	; (800ce04 <prvInitialiseTaskLists+0x78>)
 800cdd8:	4a05      	ldr	r2, [pc, #20]	; (800cdf0 <prvInitialiseTaskLists+0x64>)
 800cdda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <prvInitialiseTaskLists+0x7c>)
 800cdde:	4a05      	ldr	r2, [pc, #20]	; (800cdf4 <prvInitialiseTaskLists+0x68>)
 800cde0:	601a      	str	r2, [r3, #0]
}
 800cde2:	bf00      	nop
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20000f90 	.word	0x20000f90
 800cdf0:	200013f0 	.word	0x200013f0
 800cdf4:	20001404 	.word	0x20001404
 800cdf8:	20001420 	.word	0x20001420
 800cdfc:	20001434 	.word	0x20001434
 800ce00:	2000144c 	.word	0x2000144c
 800ce04:	20001418 	.word	0x20001418
 800ce08:	2000141c 	.word	0x2000141c

0800ce0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce12:	e019      	b.n	800ce48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce14:	f000 ffa2 	bl	800dd5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce18:	4b10      	ldr	r3, [pc, #64]	; (800ce5c <prvCheckTasksWaitingTermination+0x50>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe f8d3 	bl	800afd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <prvCheckTasksWaitingTermination+0x54>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	4a0b      	ldr	r2, [pc, #44]	; (800ce60 <prvCheckTasksWaitingTermination+0x54>)
 800ce32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce34:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	4a0a      	ldr	r2, [pc, #40]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce3e:	f000 ffc1 	bl	800ddc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f810 	bl	800ce68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce48:	4b06      	ldr	r3, [pc, #24]	; (800ce64 <prvCheckTasksWaitingTermination+0x58>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e1      	bne.n	800ce14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20001434 	.word	0x20001434
 800ce60:	20001460 	.word	0x20001460
 800ce64:	20001448 	.word	0x20001448

0800ce68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3354      	adds	r3, #84	; 0x54
 800ce74:	4618      	mov	r0, r3
 800ce76:	f001 fad5 	bl	800e424 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d108      	bne.n	800ce96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f001 f95d 	bl	800e148 <vPortFree>
				vPortFree( pxTCB );
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f001 f95a 	bl	800e148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce94:	e01a      	b.n	800cecc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d103      	bne.n	800cea8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 f951 	bl	800e148 <vPortFree>
	}
 800cea6:	e011      	b.n	800cecc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d00c      	beq.n	800cecc <prvDeleteTCB+0x64>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	b672      	cpsid	i
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	b662      	cpsie	i
 800cec6:	60fb      	str	r3, [r7, #12]
}
 800cec8:	bf00      	nop
 800ceca:	e7fe      	b.n	800ceca <prvDeleteTCB+0x62>
	}
 800cecc:	bf00      	nop
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceda:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <prvResetNextTaskUnblockTime+0x38>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d104      	bne.n	800ceee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cee4:	4b0a      	ldr	r3, [pc, #40]	; (800cf10 <prvResetNextTaskUnblockTime+0x3c>)
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ceec:	e008      	b.n	800cf00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceee:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <prvResetNextTaskUnblockTime+0x38>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	4a04      	ldr	r2, [pc, #16]	; (800cf10 <prvResetNextTaskUnblockTime+0x3c>)
 800cefe:	6013      	str	r3, [r2, #0]
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	20001418 	.word	0x20001418
 800cf10:	20001480 	.word	0x20001480

0800cf14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800cf1a:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <xTaskGetCurrentTaskHandle+0x1c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800cf20:	687b      	ldr	r3, [r7, #4]
	}
 800cf22:	4618      	mov	r0, r3
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20000f8c 	.word	0x20000f8c

0800cf34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf3a:	4b0b      	ldr	r3, [pc, #44]	; (800cf68 <xTaskGetSchedulerState+0x34>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d102      	bne.n	800cf48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf42:	2301      	movs	r3, #1
 800cf44:	607b      	str	r3, [r7, #4]
 800cf46:	e008      	b.n	800cf5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf48:	4b08      	ldr	r3, [pc, #32]	; (800cf6c <xTaskGetSchedulerState+0x38>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf50:	2302      	movs	r3, #2
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	e001      	b.n	800cf5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf56:	2300      	movs	r3, #0
 800cf58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf5a:	687b      	ldr	r3, [r7, #4]
	}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	2000146c 	.word	0x2000146c
 800cf6c:	20001488 	.word	0x20001488

0800cf70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d051      	beq.n	800d02a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8a:	4b2a      	ldr	r3, [pc, #168]	; (800d034 <xTaskPriorityInherit+0xc4>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d241      	bcs.n	800d018 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	db06      	blt.n	800cfaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf9c:	4b25      	ldr	r3, [pc, #148]	; (800d034 <xTaskPriorityInherit+0xc4>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	6959      	ldr	r1, [r3, #20]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4a1f      	ldr	r2, [pc, #124]	; (800d038 <xTaskPriorityInherit+0xc8>)
 800cfbc:	4413      	add	r3, r2
 800cfbe:	4299      	cmp	r1, r3
 800cfc0:	d122      	bne.n	800d008 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe f802 	bl	800afd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cfcc:	4b19      	ldr	r3, [pc, #100]	; (800d034 <xTaskPriorityInherit+0xc4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfda:	4b18      	ldr	r3, [pc, #96]	; (800d03c <xTaskPriorityInherit+0xcc>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d903      	bls.n	800cfea <xTaskPriorityInherit+0x7a>
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe6:	4a15      	ldr	r2, [pc, #84]	; (800d03c <xTaskPriorityInherit+0xcc>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4613      	mov	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4a10      	ldr	r2, [pc, #64]	; (800d038 <xTaskPriorityInherit+0xc8>)
 800cff8:	441a      	add	r2, r3
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7fd ff88 	bl	800af16 <vListInsertEnd>
 800d006:	e004      	b.n	800d012 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d008:	4b0a      	ldr	r3, [pc, #40]	; (800d034 <xTaskPriorityInherit+0xc4>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d012:	2301      	movs	r3, #1
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e008      	b.n	800d02a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d01c:	4b05      	ldr	r3, [pc, #20]	; (800d034 <xTaskPriorityInherit+0xc4>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d022:	429a      	cmp	r2, r3
 800d024:	d201      	bcs.n	800d02a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d026:	2301      	movs	r3, #1
 800d028:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d02a:	68fb      	ldr	r3, [r7, #12]
	}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	20000f8c 	.word	0x20000f8c
 800d038:	20000f90 	.word	0x20000f90
 800d03c:	20001468 	.word	0x20001468

0800d040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d05a      	beq.n	800d10c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d056:	4b30      	ldr	r3, [pc, #192]	; (800d118 <xTaskPriorityDisinherit+0xd8>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d00c      	beq.n	800d07a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	b672      	cpsid	i
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	b662      	cpsie	i
 800d074:	60fb      	str	r3, [r7, #12]
}
 800d076:	bf00      	nop
 800d078:	e7fe      	b.n	800d078 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10c      	bne.n	800d09c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	b672      	cpsid	i
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	b662      	cpsie	i
 800d096:	60bb      	str	r3, [r7, #8]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a0:	1e5a      	subs	r2, r3, #1
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d02c      	beq.n	800d10c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d128      	bne.n	800d10c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fd ff86 	bl	800afd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0dc:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <xTaskPriorityDisinherit+0xdc>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d903      	bls.n	800d0ec <xTaskPriorityDisinherit+0xac>
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e8:	4a0c      	ldr	r2, [pc, #48]	; (800d11c <xTaskPriorityDisinherit+0xdc>)
 800d0ea:	6013      	str	r3, [r2, #0]
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4a09      	ldr	r2, [pc, #36]	; (800d120 <xTaskPriorityDisinherit+0xe0>)
 800d0fa:	441a      	add	r2, r3
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4619      	mov	r1, r3
 800d102:	4610      	mov	r0, r2
 800d104:	f7fd ff07 	bl	800af16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d108:	2301      	movs	r3, #1
 800d10a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d10c:	697b      	ldr	r3, [r7, #20]
	}
 800d10e:	4618      	mov	r0, r3
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20000f8c 	.word	0x20000f8c
 800d11c:	20001468 	.word	0x20001468
 800d120:	20000f90 	.word	0x20000f90

0800d124 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d132:	2301      	movs	r3, #1
 800d134:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d06e      	beq.n	800d21a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10c      	bne.n	800d15e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	b672      	cpsid	i
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	b662      	cpsie	i
 800d158:	60fb      	str	r3, [r7, #12]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d902      	bls.n	800d16e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	61fb      	str	r3, [r7, #28]
 800d16c:	e002      	b.n	800d174 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d172:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	69fa      	ldr	r2, [r7, #28]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d04d      	beq.n	800d21a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d182:	697a      	ldr	r2, [r7, #20]
 800d184:	429a      	cmp	r2, r3
 800d186:	d148      	bne.n	800d21a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d188:	4b26      	ldr	r3, [pc, #152]	; (800d224 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	69ba      	ldr	r2, [r7, #24]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d10c      	bne.n	800d1ac <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	b672      	cpsid	i
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	b662      	cpsie	i
 800d1a6:	60bb      	str	r3, [r7, #8]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	69fa      	ldr	r2, [r7, #28]
 800d1b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	db04      	blt.n	800d1ca <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	6959      	ldr	r1, [r3, #20]
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4a13      	ldr	r2, [pc, #76]	; (800d228 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d1da:	4413      	add	r3, r2
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	d11c      	bne.n	800d21a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fd fef3 	bl	800afd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d903      	bls.n	800d1fe <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fa:	4a0c      	ldr	r2, [pc, #48]	; (800d22c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4a07      	ldr	r2, [pc, #28]	; (800d228 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d20c:	441a      	add	r2, r3
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	3304      	adds	r3, #4
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7fd fe7e 	bl	800af16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d21a:	bf00      	nop
 800d21c:	3720      	adds	r7, #32
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	20000f8c 	.word	0x20000f8c
 800d228:	20000f90 	.word	0x20000f90
 800d22c:	20001468 	.word	0x20001468

0800d230 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d230:	b480      	push	{r7}
 800d232:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d234:	4b07      	ldr	r3, [pc, #28]	; (800d254 <pvTaskIncrementMutexHeldCount+0x24>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d004      	beq.n	800d246 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d23c:	4b05      	ldr	r3, [pc, #20]	; (800d254 <pvTaskIncrementMutexHeldCount+0x24>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d242:	3201      	adds	r2, #1
 800d244:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d246:	4b03      	ldr	r3, [pc, #12]	; (800d254 <pvTaskIncrementMutexHeldCount+0x24>)
 800d248:	681b      	ldr	r3, [r3, #0]
	}
 800d24a:	4618      	mov	r0, r3
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	20000f8c 	.word	0x20000f8c

0800d258 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d262:	4b21      	ldr	r3, [pc, #132]	; (800d2e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d268:	4b20      	ldr	r3, [pc, #128]	; (800d2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3304      	adds	r3, #4
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fd feae 	bl	800afd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27a:	d10a      	bne.n	800d292 <prvAddCurrentTaskToDelayedList+0x3a>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d007      	beq.n	800d292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d282:	4b1a      	ldr	r3, [pc, #104]	; (800d2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3304      	adds	r3, #4
 800d288:	4619      	mov	r1, r3
 800d28a:	4819      	ldr	r0, [pc, #100]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d28c:	f7fd fe43 	bl	800af16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d290:	e026      	b.n	800d2e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4413      	add	r3, r2
 800d298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d29a:	4b14      	ldr	r3, [pc, #80]	; (800d2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d209      	bcs.n	800d2be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2aa:	4b12      	ldr	r3, [pc, #72]	; (800d2f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f7fd fe51 	bl	800af5e <vListInsert>
}
 800d2bc:	e010      	b.n	800d2e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2be:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	f7fd fe47 	bl	800af5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2d0:	4b0a      	ldr	r3, [pc, #40]	; (800d2fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d202      	bcs.n	800d2e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d2da:	4a08      	ldr	r2, [pc, #32]	; (800d2fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	6013      	str	r3, [r2, #0]
}
 800d2e0:	bf00      	nop
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	20001464 	.word	0x20001464
 800d2ec:	20000f8c 	.word	0x20000f8c
 800d2f0:	2000144c 	.word	0x2000144c
 800d2f4:	2000141c 	.word	0x2000141c
 800d2f8:	20001418 	.word	0x20001418
 800d2fc:	20001480 	.word	0x20001480

0800d300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08a      	sub	sp, #40	; 0x28
 800d304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d306:	2300      	movs	r3, #0
 800d308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d30a:	f000 fbb5 	bl	800da78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d30e:	4b1d      	ldr	r3, [pc, #116]	; (800d384 <xTimerCreateTimerTask+0x84>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d021      	beq.n	800d35a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d316:	2300      	movs	r3, #0
 800d318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d31e:	1d3a      	adds	r2, r7, #4
 800d320:	f107 0108 	add.w	r1, r7, #8
 800d324:	f107 030c 	add.w	r3, r7, #12
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fd fdad 	bl	800ae88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	9202      	str	r2, [sp, #8]
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	2302      	movs	r3, #2
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	2300      	movs	r3, #0
 800d33e:	460a      	mov	r2, r1
 800d340:	4911      	ldr	r1, [pc, #68]	; (800d388 <xTimerCreateTimerTask+0x88>)
 800d342:	4812      	ldr	r0, [pc, #72]	; (800d38c <xTimerCreateTimerTask+0x8c>)
 800d344:	f7fe ff7e 	bl	800c244 <xTaskCreateStatic>
 800d348:	4603      	mov	r3, r0
 800d34a:	4a11      	ldr	r2, [pc, #68]	; (800d390 <xTimerCreateTimerTask+0x90>)
 800d34c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d34e:	4b10      	ldr	r3, [pc, #64]	; (800d390 <xTimerCreateTimerTask+0x90>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d001      	beq.n	800d35a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d356:	2301      	movs	r3, #1
 800d358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10c      	bne.n	800d37a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	b672      	cpsid	i
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	b662      	cpsie	i
 800d374:	613b      	str	r3, [r7, #16]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d37a:	697b      	ldr	r3, [r7, #20]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3718      	adds	r7, #24
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200014bc 	.word	0x200014bc
 800d388:	0800eac8 	.word	0x0800eac8
 800d38c:	0800d611 	.word	0x0800d611
 800d390:	200014c0 	.word	0x200014c0

0800d394 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d394:	b580      	push	{r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af02      	add	r7, sp, #8
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d3a2:	202c      	movs	r0, #44	; 0x2c
 800d3a4:	f000 fe06 	bl	800dfb4 <pvPortMalloc>
 800d3a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00d      	beq.n	800d3cc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	68b9      	ldr	r1, [r7, #8]
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 f847 	bl	800d45a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d3cc:	697b      	ldr	r3, [r7, #20]
	}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b08a      	sub	sp, #40	; 0x28
 800d3da:	af02      	add	r7, sp, #8
 800d3dc:	60f8      	str	r0, [r7, #12]
 800d3de:	60b9      	str	r1, [r7, #8]
 800d3e0:	607a      	str	r2, [r7, #4]
 800d3e2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d3e4:	232c      	movs	r3, #44	; 0x2c
 800d3e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	2b2c      	cmp	r3, #44	; 0x2c
 800d3ec:	d00c      	beq.n	800d408 <xTimerCreateStatic+0x32>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	b672      	cpsid	i
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	b662      	cpsie	i
 800d402:	61bb      	str	r3, [r7, #24]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d408:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10c      	bne.n	800d42a <xTimerCreateStatic+0x54>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	b672      	cpsid	i
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	b662      	cpsie	i
 800d424:	617b      	str	r3, [r7, #20]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00d      	beq.n	800d450 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	2202      	movs	r2, #2
 800d438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	68b9      	ldr	r1, [r7, #8]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 f805 	bl	800d45a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d450:	69fb      	ldr	r3, [r7, #28]
	}
 800d452:	4618      	mov	r0, r3
 800d454:	3720      	adds	r7, #32
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b086      	sub	sp, #24
 800d45e:	af00      	add	r7, sp, #0
 800d460:	60f8      	str	r0, [r7, #12]
 800d462:	60b9      	str	r1, [r7, #8]
 800d464:	607a      	str	r2, [r7, #4]
 800d466:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10c      	bne.n	800d488 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	b672      	cpsid	i
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	b662      	cpsie	i
 800d482:	617b      	str	r3, [r7, #20]
}
 800d484:	bf00      	nop
 800d486:	e7fe      	b.n	800d486 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d01e      	beq.n	800d4cc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d48e:	f000 faf3 	bl	800da78 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	6a3a      	ldr	r2, [r7, #32]
 800d4a8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fd fd24 	bl	800aefc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4c0:	f043 0304 	orr.w	r3, r3, #4
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d4cc:	bf00      	nop
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08a      	sub	sp, #40	; 0x28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10c      	bne.n	800d506 <xTimerGenericCommand+0x32>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	b672      	cpsid	i
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	b662      	cpsie	i
 800d500:	623b      	str	r3, [r7, #32]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d506:	4b1a      	ldr	r3, [pc, #104]	; (800d570 <xTimerGenericCommand+0x9c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d02a      	beq.n	800d564 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b05      	cmp	r3, #5
 800d51e:	dc18      	bgt.n	800d552 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d520:	f7ff fd08 	bl	800cf34 <xTaskGetSchedulerState>
 800d524:	4603      	mov	r3, r0
 800d526:	2b02      	cmp	r3, #2
 800d528:	d109      	bne.n	800d53e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d52a:	4b11      	ldr	r3, [pc, #68]	; (800d570 <xTimerGenericCommand+0x9c>)
 800d52c:	6818      	ldr	r0, [r3, #0]
 800d52e:	f107 0110 	add.w	r1, r7, #16
 800d532:	2300      	movs	r3, #0
 800d534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d536:	f7fd fff3 	bl	800b520 <xQueueGenericSend>
 800d53a:	6278      	str	r0, [r7, #36]	; 0x24
 800d53c:	e012      	b.n	800d564 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d53e:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <xTimerGenericCommand+0x9c>)
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	f107 0110 	add.w	r1, r7, #16
 800d546:	2300      	movs	r3, #0
 800d548:	2200      	movs	r2, #0
 800d54a:	f7fd ffe9 	bl	800b520 <xQueueGenericSend>
 800d54e:	6278      	str	r0, [r7, #36]	; 0x24
 800d550:	e008      	b.n	800d564 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d552:	4b07      	ldr	r3, [pc, #28]	; (800d570 <xTimerGenericCommand+0x9c>)
 800d554:	6818      	ldr	r0, [r3, #0]
 800d556:	f107 0110 	add.w	r1, r7, #16
 800d55a:	2300      	movs	r3, #0
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	f7fe f8e5 	bl	800b72c <xQueueGenericSendFromISR>
 800d562:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d566:	4618      	mov	r0, r3
 800d568:	3728      	adds	r7, #40	; 0x28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	200014bc 	.word	0x200014bc

0800d574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af02      	add	r7, sp, #8
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d57e:	4b23      	ldr	r3, [pc, #140]	; (800d60c <prvProcessExpiredTimer+0x98>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	3304      	adds	r3, #4
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fd fd1f 	bl	800afd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d598:	f003 0304 	and.w	r3, r3, #4
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d024      	beq.n	800d5ea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	699a      	ldr	r2, [r3, #24]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	18d1      	adds	r1, r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	683a      	ldr	r2, [r7, #0]
 800d5ac:	6978      	ldr	r0, [r7, #20]
 800d5ae:	f000 f8d3 	bl	800d758 <prvInsertTimerInActiveList>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d021      	beq.n	800d5fc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	2300      	movs	r3, #0
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	6978      	ldr	r0, [r7, #20]
 800d5c4:	f7ff ff86 	bl	800d4d4 <xTimerGenericCommand>
 800d5c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d115      	bne.n	800d5fc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	b672      	cpsid	i
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	b662      	cpsie	i
 800d5e4:	60fb      	str	r3, [r7, #12]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5f0:	f023 0301 	bic.w	r3, r3, #1
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	6a1b      	ldr	r3, [r3, #32]
 800d600:	6978      	ldr	r0, [r7, #20]
 800d602:	4798      	blx	r3
}
 800d604:	bf00      	nop
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	200014b4 	.word	0x200014b4

0800d610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d618:	f107 0308 	add.w	r3, r7, #8
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 f857 	bl	800d6d0 <prvGetNextExpireTime>
 800d622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	4619      	mov	r1, r3
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 f803 	bl	800d634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d62e:	f000 f8d5 	bl	800d7dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d632:	e7f1      	b.n	800d618 <prvTimerTask+0x8>

0800d634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d63e:	f7ff f86b 	bl	800c718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d642:	f107 0308 	add.w	r3, r7, #8
 800d646:	4618      	mov	r0, r3
 800d648:	f000 f866 	bl	800d718 <prvSampleTimeNow>
 800d64c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d130      	bne.n	800d6b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10a      	bne.n	800d670 <prvProcessTimerOrBlockTask+0x3c>
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d806      	bhi.n	800d670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d662:	f7ff f867 	bl	800c734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d666:	68f9      	ldr	r1, [r7, #12]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff ff83 	bl	800d574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d66e:	e024      	b.n	800d6ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d008      	beq.n	800d688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d676:	4b13      	ldr	r3, [pc, #76]	; (800d6c4 <prvProcessTimerOrBlockTask+0x90>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <prvProcessTimerOrBlockTask+0x50>
 800d680:	2301      	movs	r3, #1
 800d682:	e000      	b.n	800d686 <prvProcessTimerOrBlockTask+0x52>
 800d684:	2300      	movs	r3, #0
 800d686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d688:	4b0f      	ldr	r3, [pc, #60]	; (800d6c8 <prvProcessTimerOrBlockTask+0x94>)
 800d68a:	6818      	ldr	r0, [r3, #0]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	4619      	mov	r1, r3
 800d696:	f7fe fda1 	bl	800c1dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d69a:	f7ff f84b 	bl	800c734 <xTaskResumeAll>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10a      	bne.n	800d6ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d6a4:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <prvProcessTimerOrBlockTask+0x98>)
 800d6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6aa:	601a      	str	r2, [r3, #0]
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	f3bf 8f6f 	isb	sy
}
 800d6b4:	e001      	b.n	800d6ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6b6:	f7ff f83d 	bl	800c734 <xTaskResumeAll>
}
 800d6ba:	bf00      	nop
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	200014b8 	.word	0x200014b8
 800d6c8:	200014bc 	.word	0x200014bc
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6d8:	4b0e      	ldr	r3, [pc, #56]	; (800d714 <prvGetNextExpireTime+0x44>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <prvGetNextExpireTime+0x16>
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	e000      	b.n	800d6e8 <prvGetNextExpireTime+0x18>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d105      	bne.n	800d700 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6f4:	4b07      	ldr	r3, [pc, #28]	; (800d714 <prvGetNextExpireTime+0x44>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	e001      	b.n	800d704 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d704:	68fb      	ldr	r3, [r7, #12]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	200014b4 	.word	0x200014b4

0800d718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d720:	f7ff f8a8 	bl	800c874 <xTaskGetTickCount>
 800d724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <prvSampleTimeNow+0x3c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d205      	bcs.n	800d73c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d730:	f000 f93c 	bl	800d9ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	e002      	b.n	800d742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d742:	4a04      	ldr	r2, [pc, #16]	; (800d754 <prvSampleTimeNow+0x3c>)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d748:	68fb      	ldr	r3, [r7, #12]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	200014c4 	.word	0x200014c4

0800d758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d766:	2300      	movs	r3, #0
 800d768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d812      	bhi.n	800d7a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	699b      	ldr	r3, [r3, #24]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d302      	bcc.n	800d792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d78c:	2301      	movs	r3, #1
 800d78e:	617b      	str	r3, [r7, #20]
 800d790:	e01b      	b.n	800d7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d792:	4b10      	ldr	r3, [pc, #64]	; (800d7d4 <prvInsertTimerInActiveList+0x7c>)
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3304      	adds	r3, #4
 800d79a:	4619      	mov	r1, r3
 800d79c:	4610      	mov	r0, r2
 800d79e:	f7fd fbde 	bl	800af5e <vListInsert>
 800d7a2:	e012      	b.n	800d7ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d206      	bcs.n	800d7ba <prvInsertTimerInActiveList+0x62>
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d302      	bcc.n	800d7ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	e007      	b.n	800d7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <prvInsertTimerInActiveList+0x80>)
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	f7fd fbca 	bl	800af5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7ca:	697b      	ldr	r3, [r7, #20]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	200014b8 	.word	0x200014b8
 800d7d8:	200014b4 	.word	0x200014b4

0800d7dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08e      	sub	sp, #56	; 0x38
 800d7e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7e2:	e0d0      	b.n	800d986 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	da1a      	bge.n	800d820 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d7ea:	1d3b      	adds	r3, r7, #4
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10c      	bne.n	800d810 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	b672      	cpsid	i
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	b662      	cpsie	i
 800d80a:	61fb      	str	r3, [r7, #28]
}
 800d80c:	bf00      	nop
 800d80e:	e7fe      	b.n	800d80e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d816:	6850      	ldr	r0, [r2, #4]
 800d818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d81a:	6892      	ldr	r2, [r2, #8]
 800d81c:	4611      	mov	r1, r2
 800d81e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	f2c0 80ae 	blt.w	800d984 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	695b      	ldr	r3, [r3, #20]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d004      	beq.n	800d83e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	3304      	adds	r3, #4
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fd fbc9 	bl	800afd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d83e:	463b      	mov	r3, r7
 800d840:	4618      	mov	r0, r3
 800d842:	f7ff ff69 	bl	800d718 <prvSampleTimeNow>
 800d846:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b09      	cmp	r3, #9
 800d84c:	f200 809b 	bhi.w	800d986 <prvProcessReceivedCommands+0x1aa>
 800d850:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <prvProcessReceivedCommands+0x7c>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d881 	.word	0x0800d881
 800d85c:	0800d881 	.word	0x0800d881
 800d860:	0800d881 	.word	0x0800d881
 800d864:	0800d8f9 	.word	0x0800d8f9
 800d868:	0800d90d 	.word	0x0800d90d
 800d86c:	0800d95b 	.word	0x0800d95b
 800d870:	0800d881 	.word	0x0800d881
 800d874:	0800d881 	.word	0x0800d881
 800d878:	0800d8f9 	.word	0x0800d8f9
 800d87c:	0800d90d 	.word	0x0800d90d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d886:	f043 0301 	orr.w	r3, r3, #1
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	18d1      	adds	r1, r2, r3
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a0:	f7ff ff5a 	bl	800d758 <prvInsertTimerInActiveList>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d06d      	beq.n	800d986 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8b8:	f003 0304 	and.w	r3, r3, #4
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d062      	beq.n	800d986 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	699b      	ldr	r3, [r3, #24]
 800d8c6:	441a      	add	r2, r3
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	9300      	str	r3, [sp, #0]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8d2:	f7ff fdff 	bl	800d4d4 <xTimerGenericCommand>
 800d8d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d153      	bne.n	800d986 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	b672      	cpsid	i
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	b662      	cpsie	i
 800d8f2:	61bb      	str	r3, [r7, #24]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8fe:	f023 0301 	bic.w	r3, r3, #1
 800d902:	b2da      	uxtb	r2, r3
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d90a:	e03c      	b.n	800d986 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10c      	bne.n	800d946 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d930:	b672      	cpsid	i
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	b662      	cpsie	i
 800d940:	617b      	str	r3, [r7, #20]
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	699a      	ldr	r2, [r3, #24]
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	18d1      	adds	r1, r2, r3
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d954:	f7ff ff00 	bl	800d758 <prvInsertTimerInActiveList>
					break;
 800d958:	e015      	b.n	800d986 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d960:	f003 0302 	and.w	r3, r3, #2
 800d964:	2b00      	cmp	r3, #0
 800d966:	d103      	bne.n	800d970 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96a:	f000 fbed 	bl	800e148 <vPortFree>
 800d96e:	e00a      	b.n	800d986 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d976:	f023 0301 	bic.w	r3, r3, #1
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d982:	e000      	b.n	800d986 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d984:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d986:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <prvProcessReceivedCommands+0x1cc>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	1d39      	adds	r1, r7, #4
 800d98c:	2200      	movs	r2, #0
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fe f802 	bl	800b998 <xQueueReceive>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	f47f af24 	bne.w	800d7e4 <prvProcessReceivedCommands+0x8>
	}
}
 800d99c:	bf00      	nop
 800d99e:	bf00      	nop
 800d9a0:	3730      	adds	r7, #48	; 0x30
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	200014bc 	.word	0x200014bc

0800d9ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b088      	sub	sp, #32
 800d9b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9b2:	e04a      	b.n	800da4a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9b4:	4b2e      	ldr	r3, [pc, #184]	; (800da70 <prvSwitchTimerLists+0xc4>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9be:	4b2c      	ldr	r3, [pc, #176]	; (800da70 <prvSwitchTimerLists+0xc4>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fd faff 	bl	800afd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9e0:	f003 0304 	and.w	r3, r3, #4
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d030      	beq.n	800da4a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d90e      	bls.n	800da18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da06:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <prvSwitchTimerLists+0xc4>)
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3304      	adds	r3, #4
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f7fd faa4 	bl	800af5e <vListInsert>
 800da16:	e018      	b.n	800da4a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da18:	2300      	movs	r3, #0
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	2300      	movs	r3, #0
 800da1e:	693a      	ldr	r2, [r7, #16]
 800da20:	2100      	movs	r1, #0
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff fd56 	bl	800d4d4 <xTimerGenericCommand>
 800da28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10c      	bne.n	800da4a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da34:	b672      	cpsid	i
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	b662      	cpsie	i
 800da44:	603b      	str	r3, [r7, #0]
}
 800da46:	bf00      	nop
 800da48:	e7fe      	b.n	800da48 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da4a:	4b09      	ldr	r3, [pc, #36]	; (800da70 <prvSwitchTimerLists+0xc4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1af      	bne.n	800d9b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da54:	4b06      	ldr	r3, [pc, #24]	; (800da70 <prvSwitchTimerLists+0xc4>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da5a:	4b06      	ldr	r3, [pc, #24]	; (800da74 <prvSwitchTimerLists+0xc8>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a04      	ldr	r2, [pc, #16]	; (800da70 <prvSwitchTimerLists+0xc4>)
 800da60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da62:	4a04      	ldr	r2, [pc, #16]	; (800da74 <prvSwitchTimerLists+0xc8>)
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	6013      	str	r3, [r2, #0]
}
 800da68:	bf00      	nop
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	200014b4 	.word	0x200014b4
 800da74:	200014b8 	.word	0x200014b8

0800da78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da7e:	f000 f96d 	bl	800dd5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da82:	4b15      	ldr	r3, [pc, #84]	; (800dad8 <prvCheckForValidListAndQueue+0x60>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d120      	bne.n	800dacc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da8a:	4814      	ldr	r0, [pc, #80]	; (800dadc <prvCheckForValidListAndQueue+0x64>)
 800da8c:	f7fd fa16 	bl	800aebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da90:	4813      	ldr	r0, [pc, #76]	; (800dae0 <prvCheckForValidListAndQueue+0x68>)
 800da92:	f7fd fa13 	bl	800aebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da96:	4b13      	ldr	r3, [pc, #76]	; (800dae4 <prvCheckForValidListAndQueue+0x6c>)
 800da98:	4a10      	ldr	r2, [pc, #64]	; (800dadc <prvCheckForValidListAndQueue+0x64>)
 800da9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da9c:	4b12      	ldr	r3, [pc, #72]	; (800dae8 <prvCheckForValidListAndQueue+0x70>)
 800da9e:	4a10      	ldr	r2, [pc, #64]	; (800dae0 <prvCheckForValidListAndQueue+0x68>)
 800daa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800daa2:	2300      	movs	r3, #0
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	4b11      	ldr	r3, [pc, #68]	; (800daec <prvCheckForValidListAndQueue+0x74>)
 800daa8:	4a11      	ldr	r2, [pc, #68]	; (800daf0 <prvCheckForValidListAndQueue+0x78>)
 800daaa:	2110      	movs	r1, #16
 800daac:	200a      	movs	r0, #10
 800daae:	f7fd fb23 	bl	800b0f8 <xQueueGenericCreateStatic>
 800dab2:	4603      	mov	r3, r0
 800dab4:	4a08      	ldr	r2, [pc, #32]	; (800dad8 <prvCheckForValidListAndQueue+0x60>)
 800dab6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dab8:	4b07      	ldr	r3, [pc, #28]	; (800dad8 <prvCheckForValidListAndQueue+0x60>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d005      	beq.n	800dacc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dac0:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <prvCheckForValidListAndQueue+0x60>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	490b      	ldr	r1, [pc, #44]	; (800daf4 <prvCheckForValidListAndQueue+0x7c>)
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe fb34 	bl	800c134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dacc:	f000 f97a 	bl	800ddc4 <vPortExitCritical>
}
 800dad0:	bf00      	nop
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	200014bc 	.word	0x200014bc
 800dadc:	2000148c 	.word	0x2000148c
 800dae0:	200014a0 	.word	0x200014a0
 800dae4:	200014b4 	.word	0x200014b4
 800dae8:	200014b8 	.word	0x200014b8
 800daec:	20001568 	.word	0x20001568
 800daf0:	200014c8 	.word	0x200014c8
 800daf4:	0800ead0 	.word	0x0800ead0

0800daf8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10c      	bne.n	800db24 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	b672      	cpsid	i
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	b662      	cpsie	i
 800db1e:	60fb      	str	r3, [r7, #12]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800db24:	f000 f91a 	bl	800dd5c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	69db      	ldr	r3, [r3, #28]
 800db2c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800db2e:	f000 f949 	bl	800ddc4 <vPortExitCritical>

	return pvReturn;
 800db32:	693b      	ldr	r3, [r7, #16]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3b04      	subs	r3, #4
 800db4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3b04      	subs	r3, #4
 800db5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f023 0201 	bic.w	r2, r3, #1
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3b04      	subs	r3, #4
 800db6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db6c:	4a0c      	ldr	r2, [pc, #48]	; (800dba0 <pxPortInitialiseStack+0x64>)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	3b14      	subs	r3, #20
 800db76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3b04      	subs	r3, #4
 800db82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f06f 0202 	mvn.w	r2, #2
 800db8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3b20      	subs	r3, #32
 800db90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db92:	68fb      	ldr	r3, [r7, #12]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	0800dba5 	.word	0x0800dba5

0800dba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbae:	4b14      	ldr	r3, [pc, #80]	; (800dc00 <prvTaskExitError+0x5c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb6:	d00c      	beq.n	800dbd2 <prvTaskExitError+0x2e>
	__asm volatile
 800dbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbc:	b672      	cpsid	i
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	b662      	cpsie	i
 800dbcc:	60fb      	str	r3, [r7, #12]
}
 800dbce:	bf00      	nop
 800dbd0:	e7fe      	b.n	800dbd0 <prvTaskExitError+0x2c>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	b672      	cpsid	i
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	b662      	cpsie	i
 800dbe6:	60bb      	str	r3, [r7, #8]
}
 800dbe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dbea:	bf00      	nop
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0fc      	beq.n	800dbec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dbf2:	bf00      	nop
 800dbf4:	bf00      	nop
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	20000010 	.word	0x20000010
	...

0800dc10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc10:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <pxCurrentTCBConst2>)
 800dc12:	6819      	ldr	r1, [r3, #0]
 800dc14:	6808      	ldr	r0, [r1, #0]
 800dc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1a:	f380 8809 	msr	PSP, r0
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f04f 0000 	mov.w	r0, #0
 800dc26:	f380 8811 	msr	BASEPRI, r0
 800dc2a:	4770      	bx	lr
 800dc2c:	f3af 8000 	nop.w

0800dc30 <pxCurrentTCBConst2>:
 800dc30:	20000f8c 	.word	0x20000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop

0800dc38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc38:	4808      	ldr	r0, [pc, #32]	; (800dc5c <prvPortStartFirstTask+0x24>)
 800dc3a:	6800      	ldr	r0, [r0, #0]
 800dc3c:	6800      	ldr	r0, [r0, #0]
 800dc3e:	f380 8808 	msr	MSP, r0
 800dc42:	f04f 0000 	mov.w	r0, #0
 800dc46:	f380 8814 	msr	CONTROL, r0
 800dc4a:	b662      	cpsie	i
 800dc4c:	b661      	cpsie	f
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	df00      	svc	0
 800dc58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc5a:	bf00      	nop
 800dc5c:	e000ed08 	.word	0xe000ed08

0800dc60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc66:	4b37      	ldr	r3, [pc, #220]	; (800dd44 <xPortStartScheduler+0xe4>)
 800dc68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	22ff      	movs	r2, #255	; 0xff
 800dc76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc80:	78fb      	ldrb	r3, [r7, #3]
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	4b2f      	ldr	r3, [pc, #188]	; (800dd48 <xPortStartScheduler+0xe8>)
 800dc8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc8e:	4b2f      	ldr	r3, [pc, #188]	; (800dd4c <xPortStartScheduler+0xec>)
 800dc90:	2207      	movs	r2, #7
 800dc92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc94:	e009      	b.n	800dcaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dc96:	4b2d      	ldr	r3, [pc, #180]	; (800dd4c <xPortStartScheduler+0xec>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	4a2b      	ldr	r2, [pc, #172]	; (800dd4c <xPortStartScheduler+0xec>)
 800dc9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dca0:	78fb      	ldrb	r3, [r7, #3]
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcaa:	78fb      	ldrb	r3, [r7, #3]
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcb2:	2b80      	cmp	r3, #128	; 0x80
 800dcb4:	d0ef      	beq.n	800dc96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dcb6:	4b25      	ldr	r3, [pc, #148]	; (800dd4c <xPortStartScheduler+0xec>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f1c3 0307 	rsb	r3, r3, #7
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d00c      	beq.n	800dcdc <xPortStartScheduler+0x7c>
	__asm volatile
 800dcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc6:	b672      	cpsid	i
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	b662      	cpsie	i
 800dcd6:	60bb      	str	r3, [r7, #8]
}
 800dcd8:	bf00      	nop
 800dcda:	e7fe      	b.n	800dcda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dcdc:	4b1b      	ldr	r3, [pc, #108]	; (800dd4c <xPortStartScheduler+0xec>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	021b      	lsls	r3, r3, #8
 800dce2:	4a1a      	ldr	r2, [pc, #104]	; (800dd4c <xPortStartScheduler+0xec>)
 800dce4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dce6:	4b19      	ldr	r3, [pc, #100]	; (800dd4c <xPortStartScheduler+0xec>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dcee:	4a17      	ldr	r2, [pc, #92]	; (800dd4c <xPortStartScheduler+0xec>)
 800dcf0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dcfa:	4b15      	ldr	r3, [pc, #84]	; (800dd50 <xPortStartScheduler+0xf0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a14      	ldr	r2, [pc, #80]	; (800dd50 <xPortStartScheduler+0xf0>)
 800dd00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd06:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <xPortStartScheduler+0xf0>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a11      	ldr	r2, [pc, #68]	; (800dd50 <xPortStartScheduler+0xf0>)
 800dd0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd12:	f000 f8dd 	bl	800ded0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd16:	4b0f      	ldr	r3, [pc, #60]	; (800dd54 <xPortStartScheduler+0xf4>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd1c:	f000 f8fc 	bl	800df18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd20:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <xPortStartScheduler+0xf8>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a0c      	ldr	r2, [pc, #48]	; (800dd58 <xPortStartScheduler+0xf8>)
 800dd26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd2c:	f7ff ff84 	bl	800dc38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd30:	f7fe fe6c 	bl	800ca0c <vTaskSwitchContext>
	prvTaskExitError();
 800dd34:	f7ff ff36 	bl	800dba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	e000e400 	.word	0xe000e400
 800dd48:	200015b8 	.word	0x200015b8
 800dd4c:	200015bc 	.word	0x200015bc
 800dd50:	e000ed20 	.word	0xe000ed20
 800dd54:	20000010 	.word	0x20000010
 800dd58:	e000ef34 	.word	0xe000ef34

0800dd5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	b672      	cpsid	i
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	b662      	cpsie	i
 800dd76:	607b      	str	r3, [r7, #4]
}
 800dd78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd7a:	4b10      	ldr	r3, [pc, #64]	; (800ddbc <vPortEnterCritical+0x60>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	4a0e      	ldr	r2, [pc, #56]	; (800ddbc <vPortEnterCritical+0x60>)
 800dd82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd84:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <vPortEnterCritical+0x60>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d111      	bne.n	800ddb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd8c:	4b0c      	ldr	r3, [pc, #48]	; (800ddc0 <vPortEnterCritical+0x64>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00c      	beq.n	800ddb0 <vPortEnterCritical+0x54>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9a:	b672      	cpsid	i
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	b662      	cpsie	i
 800ddaa:	603b      	str	r3, [r7, #0]
}
 800ddac:	bf00      	nop
 800ddae:	e7fe      	b.n	800ddae <vPortEnterCritical+0x52>
	}
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	20000010 	.word	0x20000010
 800ddc0:	e000ed04 	.word	0xe000ed04

0800ddc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddca:	4b13      	ldr	r3, [pc, #76]	; (800de18 <vPortExitCritical+0x54>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10c      	bne.n	800ddec <vPortExitCritical+0x28>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd6:	b672      	cpsid	i
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	b662      	cpsie	i
 800dde6:	607b      	str	r3, [r7, #4]
}
 800dde8:	bf00      	nop
 800ddea:	e7fe      	b.n	800ddea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ddec:	4b0a      	ldr	r3, [pc, #40]	; (800de18 <vPortExitCritical+0x54>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	4a09      	ldr	r2, [pc, #36]	; (800de18 <vPortExitCritical+0x54>)
 800ddf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ddf6:	4b08      	ldr	r3, [pc, #32]	; (800de18 <vPortExitCritical+0x54>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <vPortExitCritical+0x46>
 800ddfe:	2300      	movs	r3, #0
 800de00:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	f383 8811 	msr	BASEPRI, r3
}
 800de08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de0a:	bf00      	nop
 800de0c:	370c      	adds	r7, #12
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	20000010 	.word	0x20000010
 800de1c:	00000000 	.word	0x00000000

0800de20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de20:	f3ef 8009 	mrs	r0, PSP
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	4b15      	ldr	r3, [pc, #84]	; (800de80 <pxCurrentTCBConst>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	f01e 0f10 	tst.w	lr, #16
 800de30:	bf08      	it	eq
 800de32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3a:	6010      	str	r0, [r2, #0]
 800de3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de44:	b672      	cpsid	i
 800de46:	f380 8811 	msr	BASEPRI, r0
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	b662      	cpsie	i
 800de54:	f7fe fdda 	bl	800ca0c <vTaskSwitchContext>
 800de58:	f04f 0000 	mov.w	r0, #0
 800de5c:	f380 8811 	msr	BASEPRI, r0
 800de60:	bc09      	pop	{r0, r3}
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	6808      	ldr	r0, [r1, #0]
 800de66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6a:	f01e 0f10 	tst.w	lr, #16
 800de6e:	bf08      	it	eq
 800de70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de74:	f380 8809 	msr	PSP, r0
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop

0800de80 <pxCurrentTCBConst>:
 800de80:	20000f8c 	.word	0x20000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de84:	bf00      	nop
 800de86:	bf00      	nop

0800de88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
	__asm volatile
 800de8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de92:	b672      	cpsid	i
 800de94:	f383 8811 	msr	BASEPRI, r3
 800de98:	f3bf 8f6f 	isb	sy
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	b662      	cpsie	i
 800dea2:	607b      	str	r3, [r7, #4]
}
 800dea4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dea6:	f7fe fcf5 	bl	800c894 <xTaskIncrementTick>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800deb0:	4b06      	ldr	r3, [pc, #24]	; (800decc <SysTick_Handler+0x44>)
 800deb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	2300      	movs	r3, #0
 800deba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	f383 8811 	msr	BASEPRI, r3
}
 800dec2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	e000ed04 	.word	0xe000ed04

0800ded0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ded0:	b480      	push	{r7}
 800ded2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ded4:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <vPortSetupTimerInterrupt+0x34>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800deda:	4b0b      	ldr	r3, [pc, #44]	; (800df08 <vPortSetupTimerInterrupt+0x38>)
 800dedc:	2200      	movs	r2, #0
 800dede:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dee0:	4b0a      	ldr	r3, [pc, #40]	; (800df0c <vPortSetupTimerInterrupt+0x3c>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a0a      	ldr	r2, [pc, #40]	; (800df10 <vPortSetupTimerInterrupt+0x40>)
 800dee6:	fba2 2303 	umull	r2, r3, r2, r3
 800deea:	099b      	lsrs	r3, r3, #6
 800deec:	4a09      	ldr	r2, [pc, #36]	; (800df14 <vPortSetupTimerInterrupt+0x44>)
 800deee:	3b01      	subs	r3, #1
 800def0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800def2:	4b04      	ldr	r3, [pc, #16]	; (800df04 <vPortSetupTimerInterrupt+0x34>)
 800def4:	2207      	movs	r2, #7
 800def6:	601a      	str	r2, [r3, #0]
}
 800def8:	bf00      	nop
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	e000e010 	.word	0xe000e010
 800df08:	e000e018 	.word	0xe000e018
 800df0c:	20000004 	.word	0x20000004
 800df10:	10624dd3 	.word	0x10624dd3
 800df14:	e000e014 	.word	0xe000e014

0800df18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df28 <vPortEnableVFP+0x10>
 800df1c:	6801      	ldr	r1, [r0, #0]
 800df1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df22:	6001      	str	r1, [r0, #0]
 800df24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df26:	bf00      	nop
 800df28:	e000ed88 	.word	0xe000ed88

0800df2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df2c:	b480      	push	{r7}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df32:	f3ef 8305 	mrs	r3, IPSR
 800df36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2b0f      	cmp	r3, #15
 800df3c:	d916      	bls.n	800df6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df3e:	4a19      	ldr	r2, [pc, #100]	; (800dfa4 <vPortValidateInterruptPriority+0x78>)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	4413      	add	r3, r2
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df48:	4b17      	ldr	r3, [pc, #92]	; (800dfa8 <vPortValidateInterruptPriority+0x7c>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	7afa      	ldrb	r2, [r7, #11]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d20c      	bcs.n	800df6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	b672      	cpsid	i
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	b662      	cpsie	i
 800df66:	607b      	str	r3, [r7, #4]
}
 800df68:	bf00      	nop
 800df6a:	e7fe      	b.n	800df6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df6c:	4b0f      	ldr	r3, [pc, #60]	; (800dfac <vPortValidateInterruptPriority+0x80>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df74:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <vPortValidateInterruptPriority+0x84>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d90c      	bls.n	800df96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	b672      	cpsid	i
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	b662      	cpsie	i
 800df90:	603b      	str	r3, [r7, #0]
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <vPortValidateInterruptPriority+0x68>
	}
 800df96:	bf00      	nop
 800df98:	3714      	adds	r7, #20
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	e000e3f0 	.word	0xe000e3f0
 800dfa8:	200015b8 	.word	0x200015b8
 800dfac:	e000ed0c 	.word	0xe000ed0c
 800dfb0:	200015bc 	.word	0x200015bc

0800dfb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08a      	sub	sp, #40	; 0x28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfc0:	f7fe fbaa 	bl	800c718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfc4:	4b5b      	ldr	r3, [pc, #364]	; (800e134 <pvPortMalloc+0x180>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfcc:	f000 f91a 	bl	800e204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfd0:	4b59      	ldr	r3, [pc, #356]	; (800e138 <pvPortMalloc+0x184>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f040 8092 	bne.w	800e102 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d01f      	beq.n	800e024 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dfe4:	2208      	movs	r2, #8
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4413      	add	r3, r2
 800dfea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f003 0307 	and.w	r3, r3, #7
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d016      	beq.n	800e024 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f023 0307 	bic.w	r3, r3, #7
 800dffc:	3308      	adds	r3, #8
 800dffe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00c      	beq.n	800e024 <pvPortMalloc+0x70>
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00e:	b672      	cpsid	i
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	b662      	cpsie	i
 800e01e:	617b      	str	r3, [r7, #20]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d06b      	beq.n	800e102 <pvPortMalloc+0x14e>
 800e02a:	4b44      	ldr	r3, [pc, #272]	; (800e13c <pvPortMalloc+0x188>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d866      	bhi.n	800e102 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e034:	4b42      	ldr	r3, [pc, #264]	; (800e140 <pvPortMalloc+0x18c>)
 800e036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e038:	4b41      	ldr	r3, [pc, #260]	; (800e140 <pvPortMalloc+0x18c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e03e:	e004      	b.n	800e04a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	429a      	cmp	r2, r3
 800e052:	d903      	bls.n	800e05c <pvPortMalloc+0xa8>
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1f1      	bne.n	800e040 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e05c:	4b35      	ldr	r3, [pc, #212]	; (800e134 <pvPortMalloc+0x180>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e062:	429a      	cmp	r2, r3
 800e064:	d04d      	beq.n	800e102 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e066:	6a3b      	ldr	r3, [r7, #32]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2208      	movs	r2, #8
 800e06c:	4413      	add	r3, r2
 800e06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	1ad2      	subs	r2, r2, r3
 800e080:	2308      	movs	r3, #8
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	429a      	cmp	r2, r3
 800e086:	d921      	bls.n	800e0cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4413      	add	r3, r2
 800e08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00c      	beq.n	800e0b4 <pvPortMalloc+0x100>
	__asm volatile
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	b672      	cpsid	i
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	b662      	cpsie	i
 800e0ae:	613b      	str	r3, [r7, #16]
}
 800e0b0:	bf00      	nop
 800e0b2:	e7fe      	b.n	800e0b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	1ad2      	subs	r2, r2, r3
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0c6:	69b8      	ldr	r0, [r7, #24]
 800e0c8:	f000 f8fe 	bl	800e2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0cc:	4b1b      	ldr	r3, [pc, #108]	; (800e13c <pvPortMalloc+0x188>)
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	4a19      	ldr	r2, [pc, #100]	; (800e13c <pvPortMalloc+0x188>)
 800e0d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0da:	4b18      	ldr	r3, [pc, #96]	; (800e13c <pvPortMalloc+0x188>)
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	4b19      	ldr	r3, [pc, #100]	; (800e144 <pvPortMalloc+0x190>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d203      	bcs.n	800e0ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0e6:	4b15      	ldr	r3, [pc, #84]	; (800e13c <pvPortMalloc+0x188>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a16      	ldr	r2, [pc, #88]	; (800e144 <pvPortMalloc+0x190>)
 800e0ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	4b11      	ldr	r3, [pc, #68]	; (800e138 <pvPortMalloc+0x184>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	431a      	orrs	r2, r3
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fe:	2200      	movs	r2, #0
 800e100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e102:	f7fe fb17 	bl	800c734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00c      	beq.n	800e12a <pvPortMalloc+0x176>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e114:	b672      	cpsid	i
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	b662      	cpsie	i
 800e124:	60fb      	str	r3, [r7, #12]
}
 800e126:	bf00      	nop
 800e128:	e7fe      	b.n	800e128 <pvPortMalloc+0x174>
	return pvReturn;
 800e12a:	69fb      	ldr	r3, [r7, #28]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3728      	adds	r7, #40	; 0x28
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	200092c8 	.word	0x200092c8
 800e138:	200092d4 	.word	0x200092d4
 800e13c:	200092cc 	.word	0x200092cc
 800e140:	200092c0 	.word	0x200092c0
 800e144:	200092d0 	.word	0x200092d0

0800e148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b086      	sub	sp, #24
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d04c      	beq.n	800e1f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e15a:	2308      	movs	r3, #8
 800e15c:	425b      	negs	r3, r3
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	4413      	add	r3, r2
 800e162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	4b23      	ldr	r3, [pc, #140]	; (800e1fc <vPortFree+0xb4>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4013      	ands	r3, r2
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10c      	bne.n	800e190 <vPortFree+0x48>
	__asm volatile
 800e176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17a:	b672      	cpsid	i
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	b662      	cpsie	i
 800e18a:	60fb      	str	r3, [r7, #12]
}
 800e18c:	bf00      	nop
 800e18e:	e7fe      	b.n	800e18e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00c      	beq.n	800e1b2 <vPortFree+0x6a>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	b672      	cpsid	i
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	b662      	cpsie	i
 800e1ac:	60bb      	str	r3, [r7, #8]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	685a      	ldr	r2, [r3, #4]
 800e1b6:	4b11      	ldr	r3, [pc, #68]	; (800e1fc <vPortFree+0xb4>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d019      	beq.n	800e1f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d115      	bne.n	800e1f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <vPortFree+0xb4>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	43db      	mvns	r3, r3
 800e1d2:	401a      	ands	r2, r3
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1d8:	f7fe fa9e 	bl	800c718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	4b07      	ldr	r3, [pc, #28]	; (800e200 <vPortFree+0xb8>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	4a06      	ldr	r2, [pc, #24]	; (800e200 <vPortFree+0xb8>)
 800e1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1ea:	6938      	ldr	r0, [r7, #16]
 800e1ec:	f000 f86c 	bl	800e2c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e1f0:	f7fe faa0 	bl	800c734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1f4:	bf00      	nop
 800e1f6:	3718      	adds	r7, #24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	200092d4 	.word	0x200092d4
 800e200:	200092cc 	.word	0x200092cc

0800e204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e20a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e210:	4b27      	ldr	r3, [pc, #156]	; (800e2b0 <prvHeapInit+0xac>)
 800e212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f003 0307 	and.w	r3, r3, #7
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00c      	beq.n	800e238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3307      	adds	r3, #7
 800e222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f023 0307 	bic.w	r3, r3, #7
 800e22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	4a1f      	ldr	r2, [pc, #124]	; (800e2b0 <prvHeapInit+0xac>)
 800e234:	4413      	add	r3, r2
 800e236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e23c:	4a1d      	ldr	r2, [pc, #116]	; (800e2b4 <prvHeapInit+0xb0>)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e242:	4b1c      	ldr	r3, [pc, #112]	; (800e2b4 <prvHeapInit+0xb0>)
 800e244:	2200      	movs	r2, #0
 800e246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	4413      	add	r3, r2
 800e24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e250:	2208      	movs	r2, #8
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	1a9b      	subs	r3, r3, r2
 800e256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f023 0307 	bic.w	r3, r3, #7
 800e25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	4a15      	ldr	r2, [pc, #84]	; (800e2b8 <prvHeapInit+0xb4>)
 800e264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e266:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <prvHeapInit+0xb4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2200      	movs	r2, #0
 800e26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e26e:	4b12      	ldr	r3, [pc, #72]	; (800e2b8 <prvHeapInit+0xb4>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	1ad2      	subs	r2, r2, r3
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e284:	4b0c      	ldr	r3, [pc, #48]	; (800e2b8 <prvHeapInit+0xb4>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	4a0a      	ldr	r2, [pc, #40]	; (800e2bc <prvHeapInit+0xb8>)
 800e292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	4a09      	ldr	r2, [pc, #36]	; (800e2c0 <prvHeapInit+0xbc>)
 800e29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e29c:	4b09      	ldr	r3, [pc, #36]	; (800e2c4 <prvHeapInit+0xc0>)
 800e29e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2a2:	601a      	str	r2, [r3, #0]
}
 800e2a4:	bf00      	nop
 800e2a6:	3714      	adds	r7, #20
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	200015c0 	.word	0x200015c0
 800e2b4:	200092c0 	.word	0x200092c0
 800e2b8:	200092c8 	.word	0x200092c8
 800e2bc:	200092d0 	.word	0x200092d0
 800e2c0:	200092cc 	.word	0x200092cc
 800e2c4:	200092d4 	.word	0x200092d4

0800e2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2d0:	4b28      	ldr	r3, [pc, #160]	; (800e374 <prvInsertBlockIntoFreeList+0xac>)
 800e2d2:	60fb      	str	r3, [r7, #12]
 800e2d4:	e002      	b.n	800e2dc <prvInsertBlockIntoFreeList+0x14>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d8f7      	bhi.n	800e2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	68ba      	ldr	r2, [r7, #8]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d108      	bne.n	800e30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	441a      	add	r2, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	441a      	add	r2, r3
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d118      	bne.n	800e350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	4b15      	ldr	r3, [pc, #84]	; (800e378 <prvInsertBlockIntoFreeList+0xb0>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d00d      	beq.n	800e346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	441a      	add	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	e008      	b.n	800e358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e346:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <prvInsertBlockIntoFreeList+0xb0>)
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	e003      	b.n	800e358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d002      	beq.n	800e366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e366:	bf00      	nop
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	200092c0 	.word	0x200092c0
 800e378:	200092c8 	.word	0x200092c8

0800e37c <atoi>:
 800e37c:	220a      	movs	r2, #10
 800e37e:	2100      	movs	r1, #0
 800e380:	f000 b92e 	b.w	800e5e0 <strtol>

0800e384 <__errno>:
 800e384:	4b01      	ldr	r3, [pc, #4]	; (800e38c <__errno+0x8>)
 800e386:	6818      	ldr	r0, [r3, #0]
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	20000014 	.word	0x20000014

0800e390 <__libc_init_array>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	4d0d      	ldr	r5, [pc, #52]	; (800e3c8 <__libc_init_array+0x38>)
 800e394:	4c0d      	ldr	r4, [pc, #52]	; (800e3cc <__libc_init_array+0x3c>)
 800e396:	1b64      	subs	r4, r4, r5
 800e398:	10a4      	asrs	r4, r4, #2
 800e39a:	2600      	movs	r6, #0
 800e39c:	42a6      	cmp	r6, r4
 800e39e:	d109      	bne.n	800e3b4 <__libc_init_array+0x24>
 800e3a0:	4d0b      	ldr	r5, [pc, #44]	; (800e3d0 <__libc_init_array+0x40>)
 800e3a2:	4c0c      	ldr	r4, [pc, #48]	; (800e3d4 <__libc_init_array+0x44>)
 800e3a4:	f000 f97e 	bl	800e6a4 <_init>
 800e3a8:	1b64      	subs	r4, r4, r5
 800e3aa:	10a4      	asrs	r4, r4, #2
 800e3ac:	2600      	movs	r6, #0
 800e3ae:	42a6      	cmp	r6, r4
 800e3b0:	d105      	bne.n	800e3be <__libc_init_array+0x2e>
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
 800e3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3b8:	4798      	blx	r3
 800e3ba:	3601      	adds	r6, #1
 800e3bc:	e7ee      	b.n	800e39c <__libc_init_array+0xc>
 800e3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3c2:	4798      	blx	r3
 800e3c4:	3601      	adds	r6, #1
 800e3c6:	e7f2      	b.n	800e3ae <__libc_init_array+0x1e>
 800e3c8:	0800f11c 	.word	0x0800f11c
 800e3cc:	0800f11c 	.word	0x0800f11c
 800e3d0:	0800f11c 	.word	0x0800f11c
 800e3d4:	0800f120 	.word	0x0800f120

0800e3d8 <__retarget_lock_acquire_recursive>:
 800e3d8:	4770      	bx	lr

0800e3da <__retarget_lock_release_recursive>:
 800e3da:	4770      	bx	lr

0800e3dc <memcpy>:
 800e3dc:	440a      	add	r2, r1
 800e3de:	4291      	cmp	r1, r2
 800e3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3e4:	d100      	bne.n	800e3e8 <memcpy+0xc>
 800e3e6:	4770      	bx	lr
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3f2:	4291      	cmp	r1, r2
 800e3f4:	d1f9      	bne.n	800e3ea <memcpy+0xe>
 800e3f6:	bd10      	pop	{r4, pc}

0800e3f8 <memset>:
 800e3f8:	4402      	add	r2, r0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d100      	bne.n	800e402 <memset+0xa>
 800e400:	4770      	bx	lr
 800e402:	f803 1b01 	strb.w	r1, [r3], #1
 800e406:	e7f9      	b.n	800e3fc <memset+0x4>

0800e408 <cleanup_glue>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	460c      	mov	r4, r1
 800e40c:	6809      	ldr	r1, [r1, #0]
 800e40e:	4605      	mov	r5, r0
 800e410:	b109      	cbz	r1, 800e416 <cleanup_glue+0xe>
 800e412:	f7ff fff9 	bl	800e408 <cleanup_glue>
 800e416:	4621      	mov	r1, r4
 800e418:	4628      	mov	r0, r5
 800e41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e41e:	f000 b8f5 	b.w	800e60c <_free_r>
	...

0800e424 <_reclaim_reent>:
 800e424:	4b2c      	ldr	r3, [pc, #176]	; (800e4d8 <_reclaim_reent+0xb4>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4283      	cmp	r3, r0
 800e42a:	b570      	push	{r4, r5, r6, lr}
 800e42c:	4604      	mov	r4, r0
 800e42e:	d051      	beq.n	800e4d4 <_reclaim_reent+0xb0>
 800e430:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e432:	b143      	cbz	r3, 800e446 <_reclaim_reent+0x22>
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d14a      	bne.n	800e4d0 <_reclaim_reent+0xac>
 800e43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e43c:	6819      	ldr	r1, [r3, #0]
 800e43e:	b111      	cbz	r1, 800e446 <_reclaim_reent+0x22>
 800e440:	4620      	mov	r0, r4
 800e442:	f000 f8e3 	bl	800e60c <_free_r>
 800e446:	6961      	ldr	r1, [r4, #20]
 800e448:	b111      	cbz	r1, 800e450 <_reclaim_reent+0x2c>
 800e44a:	4620      	mov	r0, r4
 800e44c:	f000 f8de 	bl	800e60c <_free_r>
 800e450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e452:	b111      	cbz	r1, 800e45a <_reclaim_reent+0x36>
 800e454:	4620      	mov	r0, r4
 800e456:	f000 f8d9 	bl	800e60c <_free_r>
 800e45a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e45c:	b111      	cbz	r1, 800e464 <_reclaim_reent+0x40>
 800e45e:	4620      	mov	r0, r4
 800e460:	f000 f8d4 	bl	800e60c <_free_r>
 800e464:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e466:	b111      	cbz	r1, 800e46e <_reclaim_reent+0x4a>
 800e468:	4620      	mov	r0, r4
 800e46a:	f000 f8cf 	bl	800e60c <_free_r>
 800e46e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e470:	b111      	cbz	r1, 800e478 <_reclaim_reent+0x54>
 800e472:	4620      	mov	r0, r4
 800e474:	f000 f8ca 	bl	800e60c <_free_r>
 800e478:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e47a:	b111      	cbz	r1, 800e482 <_reclaim_reent+0x5e>
 800e47c:	4620      	mov	r0, r4
 800e47e:	f000 f8c5 	bl	800e60c <_free_r>
 800e482:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e484:	b111      	cbz	r1, 800e48c <_reclaim_reent+0x68>
 800e486:	4620      	mov	r0, r4
 800e488:	f000 f8c0 	bl	800e60c <_free_r>
 800e48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e48e:	b111      	cbz	r1, 800e496 <_reclaim_reent+0x72>
 800e490:	4620      	mov	r0, r4
 800e492:	f000 f8bb 	bl	800e60c <_free_r>
 800e496:	69a3      	ldr	r3, [r4, #24]
 800e498:	b1e3      	cbz	r3, 800e4d4 <_reclaim_reent+0xb0>
 800e49a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e49c:	4620      	mov	r0, r4
 800e49e:	4798      	blx	r3
 800e4a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e4a2:	b1b9      	cbz	r1, 800e4d4 <_reclaim_reent+0xb0>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4aa:	f7ff bfad 	b.w	800e408 <cleanup_glue>
 800e4ae:	5949      	ldr	r1, [r1, r5]
 800e4b0:	b941      	cbnz	r1, 800e4c4 <_reclaim_reent+0xa0>
 800e4b2:	3504      	adds	r5, #4
 800e4b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4b6:	2d80      	cmp	r5, #128	; 0x80
 800e4b8:	68d9      	ldr	r1, [r3, #12]
 800e4ba:	d1f8      	bne.n	800e4ae <_reclaim_reent+0x8a>
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f000 f8a5 	bl	800e60c <_free_r>
 800e4c2:	e7ba      	b.n	800e43a <_reclaim_reent+0x16>
 800e4c4:	680e      	ldr	r6, [r1, #0]
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f000 f8a0 	bl	800e60c <_free_r>
 800e4cc:	4631      	mov	r1, r6
 800e4ce:	e7ef      	b.n	800e4b0 <_reclaim_reent+0x8c>
 800e4d0:	2500      	movs	r5, #0
 800e4d2:	e7ef      	b.n	800e4b4 <_reclaim_reent+0x90>
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20000014 	.word	0x20000014

0800e4dc <_strtol_l.constprop.0>:
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e2:	d001      	beq.n	800e4e8 <_strtol_l.constprop.0+0xc>
 800e4e4:	2b24      	cmp	r3, #36	; 0x24
 800e4e6:	d906      	bls.n	800e4f6 <_strtol_l.constprop.0+0x1a>
 800e4e8:	f7ff ff4c 	bl	800e384 <__errno>
 800e4ec:	2316      	movs	r3, #22
 800e4ee:	6003      	str	r3, [r0, #0]
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e5dc <_strtol_l.constprop.0+0x100>
 800e4fa:	460d      	mov	r5, r1
 800e4fc:	462e      	mov	r6, r5
 800e4fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e502:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e506:	f017 0708 	ands.w	r7, r7, #8
 800e50a:	d1f7      	bne.n	800e4fc <_strtol_l.constprop.0+0x20>
 800e50c:	2c2d      	cmp	r4, #45	; 0x2d
 800e50e:	d132      	bne.n	800e576 <_strtol_l.constprop.0+0x9a>
 800e510:	782c      	ldrb	r4, [r5, #0]
 800e512:	2701      	movs	r7, #1
 800e514:	1cb5      	adds	r5, r6, #2
 800e516:	2b00      	cmp	r3, #0
 800e518:	d05b      	beq.n	800e5d2 <_strtol_l.constprop.0+0xf6>
 800e51a:	2b10      	cmp	r3, #16
 800e51c:	d109      	bne.n	800e532 <_strtol_l.constprop.0+0x56>
 800e51e:	2c30      	cmp	r4, #48	; 0x30
 800e520:	d107      	bne.n	800e532 <_strtol_l.constprop.0+0x56>
 800e522:	782c      	ldrb	r4, [r5, #0]
 800e524:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e528:	2c58      	cmp	r4, #88	; 0x58
 800e52a:	d14d      	bne.n	800e5c8 <_strtol_l.constprop.0+0xec>
 800e52c:	786c      	ldrb	r4, [r5, #1]
 800e52e:	2310      	movs	r3, #16
 800e530:	3502      	adds	r5, #2
 800e532:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e536:	f108 38ff 	add.w	r8, r8, #4294967295
 800e53a:	f04f 0c00 	mov.w	ip, #0
 800e53e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e542:	4666      	mov	r6, ip
 800e544:	fb03 8a19 	mls	sl, r3, r9, r8
 800e548:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e54c:	f1be 0f09 	cmp.w	lr, #9
 800e550:	d816      	bhi.n	800e580 <_strtol_l.constprop.0+0xa4>
 800e552:	4674      	mov	r4, lr
 800e554:	42a3      	cmp	r3, r4
 800e556:	dd24      	ble.n	800e5a2 <_strtol_l.constprop.0+0xc6>
 800e558:	f1bc 0f00 	cmp.w	ip, #0
 800e55c:	db1e      	blt.n	800e59c <_strtol_l.constprop.0+0xc0>
 800e55e:	45b1      	cmp	r9, r6
 800e560:	d31c      	bcc.n	800e59c <_strtol_l.constprop.0+0xc0>
 800e562:	d101      	bne.n	800e568 <_strtol_l.constprop.0+0x8c>
 800e564:	45a2      	cmp	sl, r4
 800e566:	db19      	blt.n	800e59c <_strtol_l.constprop.0+0xc0>
 800e568:	fb06 4603 	mla	r6, r6, r3, r4
 800e56c:	f04f 0c01 	mov.w	ip, #1
 800e570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e574:	e7e8      	b.n	800e548 <_strtol_l.constprop.0+0x6c>
 800e576:	2c2b      	cmp	r4, #43	; 0x2b
 800e578:	bf04      	itt	eq
 800e57a:	782c      	ldrbeq	r4, [r5, #0]
 800e57c:	1cb5      	addeq	r5, r6, #2
 800e57e:	e7ca      	b.n	800e516 <_strtol_l.constprop.0+0x3a>
 800e580:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e584:	f1be 0f19 	cmp.w	lr, #25
 800e588:	d801      	bhi.n	800e58e <_strtol_l.constprop.0+0xb2>
 800e58a:	3c37      	subs	r4, #55	; 0x37
 800e58c:	e7e2      	b.n	800e554 <_strtol_l.constprop.0+0x78>
 800e58e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e592:	f1be 0f19 	cmp.w	lr, #25
 800e596:	d804      	bhi.n	800e5a2 <_strtol_l.constprop.0+0xc6>
 800e598:	3c57      	subs	r4, #87	; 0x57
 800e59a:	e7db      	b.n	800e554 <_strtol_l.constprop.0+0x78>
 800e59c:	f04f 3cff 	mov.w	ip, #4294967295
 800e5a0:	e7e6      	b.n	800e570 <_strtol_l.constprop.0+0x94>
 800e5a2:	f1bc 0f00 	cmp.w	ip, #0
 800e5a6:	da05      	bge.n	800e5b4 <_strtol_l.constprop.0+0xd8>
 800e5a8:	2322      	movs	r3, #34	; 0x22
 800e5aa:	6003      	str	r3, [r0, #0]
 800e5ac:	4646      	mov	r6, r8
 800e5ae:	b942      	cbnz	r2, 800e5c2 <_strtol_l.constprop.0+0xe6>
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	e79e      	b.n	800e4f2 <_strtol_l.constprop.0+0x16>
 800e5b4:	b107      	cbz	r7, 800e5b8 <_strtol_l.constprop.0+0xdc>
 800e5b6:	4276      	negs	r6, r6
 800e5b8:	2a00      	cmp	r2, #0
 800e5ba:	d0f9      	beq.n	800e5b0 <_strtol_l.constprop.0+0xd4>
 800e5bc:	f1bc 0f00 	cmp.w	ip, #0
 800e5c0:	d000      	beq.n	800e5c4 <_strtol_l.constprop.0+0xe8>
 800e5c2:	1e69      	subs	r1, r5, #1
 800e5c4:	6011      	str	r1, [r2, #0]
 800e5c6:	e7f3      	b.n	800e5b0 <_strtol_l.constprop.0+0xd4>
 800e5c8:	2430      	movs	r4, #48	; 0x30
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1b1      	bne.n	800e532 <_strtol_l.constprop.0+0x56>
 800e5ce:	2308      	movs	r3, #8
 800e5d0:	e7af      	b.n	800e532 <_strtol_l.constprop.0+0x56>
 800e5d2:	2c30      	cmp	r4, #48	; 0x30
 800e5d4:	d0a5      	beq.n	800e522 <_strtol_l.constprop.0+0x46>
 800e5d6:	230a      	movs	r3, #10
 800e5d8:	e7ab      	b.n	800e532 <_strtol_l.constprop.0+0x56>
 800e5da:	bf00      	nop
 800e5dc:	0800f011 	.word	0x0800f011

0800e5e0 <strtol>:
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	460a      	mov	r2, r1
 800e5e4:	4601      	mov	r1, r0
 800e5e6:	4802      	ldr	r0, [pc, #8]	; (800e5f0 <strtol+0x10>)
 800e5e8:	6800      	ldr	r0, [r0, #0]
 800e5ea:	f7ff bf77 	b.w	800e4dc <_strtol_l.constprop.0>
 800e5ee:	bf00      	nop
 800e5f0:	20000014 	.word	0x20000014

0800e5f4 <__malloc_lock>:
 800e5f4:	4801      	ldr	r0, [pc, #4]	; (800e5fc <__malloc_lock+0x8>)
 800e5f6:	f7ff beef 	b.w	800e3d8 <__retarget_lock_acquire_recursive>
 800e5fa:	bf00      	nop
 800e5fc:	200092d8 	.word	0x200092d8

0800e600 <__malloc_unlock>:
 800e600:	4801      	ldr	r0, [pc, #4]	; (800e608 <__malloc_unlock+0x8>)
 800e602:	f7ff beea 	b.w	800e3da <__retarget_lock_release_recursive>
 800e606:	bf00      	nop
 800e608:	200092d8 	.word	0x200092d8

0800e60c <_free_r>:
 800e60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e60e:	2900      	cmp	r1, #0
 800e610:	d044      	beq.n	800e69c <_free_r+0x90>
 800e612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e616:	9001      	str	r0, [sp, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f1a1 0404 	sub.w	r4, r1, #4
 800e61e:	bfb8      	it	lt
 800e620:	18e4      	addlt	r4, r4, r3
 800e622:	f7ff ffe7 	bl	800e5f4 <__malloc_lock>
 800e626:	4a1e      	ldr	r2, [pc, #120]	; (800e6a0 <_free_r+0x94>)
 800e628:	9801      	ldr	r0, [sp, #4]
 800e62a:	6813      	ldr	r3, [r2, #0]
 800e62c:	b933      	cbnz	r3, 800e63c <_free_r+0x30>
 800e62e:	6063      	str	r3, [r4, #4]
 800e630:	6014      	str	r4, [r2, #0]
 800e632:	b003      	add	sp, #12
 800e634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e638:	f7ff bfe2 	b.w	800e600 <__malloc_unlock>
 800e63c:	42a3      	cmp	r3, r4
 800e63e:	d908      	bls.n	800e652 <_free_r+0x46>
 800e640:	6825      	ldr	r5, [r4, #0]
 800e642:	1961      	adds	r1, r4, r5
 800e644:	428b      	cmp	r3, r1
 800e646:	bf01      	itttt	eq
 800e648:	6819      	ldreq	r1, [r3, #0]
 800e64a:	685b      	ldreq	r3, [r3, #4]
 800e64c:	1949      	addeq	r1, r1, r5
 800e64e:	6021      	streq	r1, [r4, #0]
 800e650:	e7ed      	b.n	800e62e <_free_r+0x22>
 800e652:	461a      	mov	r2, r3
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	b10b      	cbz	r3, 800e65c <_free_r+0x50>
 800e658:	42a3      	cmp	r3, r4
 800e65a:	d9fa      	bls.n	800e652 <_free_r+0x46>
 800e65c:	6811      	ldr	r1, [r2, #0]
 800e65e:	1855      	adds	r5, r2, r1
 800e660:	42a5      	cmp	r5, r4
 800e662:	d10b      	bne.n	800e67c <_free_r+0x70>
 800e664:	6824      	ldr	r4, [r4, #0]
 800e666:	4421      	add	r1, r4
 800e668:	1854      	adds	r4, r2, r1
 800e66a:	42a3      	cmp	r3, r4
 800e66c:	6011      	str	r1, [r2, #0]
 800e66e:	d1e0      	bne.n	800e632 <_free_r+0x26>
 800e670:	681c      	ldr	r4, [r3, #0]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	6053      	str	r3, [r2, #4]
 800e676:	4421      	add	r1, r4
 800e678:	6011      	str	r1, [r2, #0]
 800e67a:	e7da      	b.n	800e632 <_free_r+0x26>
 800e67c:	d902      	bls.n	800e684 <_free_r+0x78>
 800e67e:	230c      	movs	r3, #12
 800e680:	6003      	str	r3, [r0, #0]
 800e682:	e7d6      	b.n	800e632 <_free_r+0x26>
 800e684:	6825      	ldr	r5, [r4, #0]
 800e686:	1961      	adds	r1, r4, r5
 800e688:	428b      	cmp	r3, r1
 800e68a:	bf04      	itt	eq
 800e68c:	6819      	ldreq	r1, [r3, #0]
 800e68e:	685b      	ldreq	r3, [r3, #4]
 800e690:	6063      	str	r3, [r4, #4]
 800e692:	bf04      	itt	eq
 800e694:	1949      	addeq	r1, r1, r5
 800e696:	6021      	streq	r1, [r4, #0]
 800e698:	6054      	str	r4, [r2, #4]
 800e69a:	e7ca      	b.n	800e632 <_free_r+0x26>
 800e69c:	b003      	add	sp, #12
 800e69e:	bd30      	pop	{r4, r5, pc}
 800e6a0:	200092dc 	.word	0x200092dc

0800e6a4 <_init>:
 800e6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6a6:	bf00      	nop
 800e6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6aa:	bc08      	pop	{r3}
 800e6ac:	469e      	mov	lr, r3
 800e6ae:	4770      	bx	lr

0800e6b0 <_fini>:
 800e6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b2:	bf00      	nop
 800e6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6b6:	bc08      	pop	{r3}
 800e6b8:	469e      	mov	lr, r3
 800e6ba:	4770      	bx	lr
