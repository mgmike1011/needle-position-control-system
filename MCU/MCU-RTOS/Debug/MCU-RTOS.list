
MCU-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e89c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  0800ea70  0800ea70  0001ea70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f504  0800f504  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f504  0800f504  0001f504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f50c  0800f50c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f50c  0800f50c  0001f50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f510  0800f510  0001f510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009274  20000078  0800f58c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200092ec  0800f58c  000292ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bdb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ff7  00000000  00000000  00047c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  0004cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae8  00000000  00000000  0004e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a774  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024277  00000000  00000000  0007abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe761  00000000  00000000  0009ee3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d59c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e24  00000000  00000000  0019d5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea54 	.word	0x0800ea54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800ea54 	.word	0x0800ea54

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b974 	b.w	8000e4c <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468e      	mov	lr, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14d      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	d969      	bls.n	8000c64 <__udivmoddi4+0xe8>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b152      	cbz	r2, 8000bac <__udivmoddi4+0x30>
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	f1c2 0120 	rsb	r1, r2, #32
 8000b9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba6:	ea41 0e03 	orr.w	lr, r1, r3
 8000baa:	4094      	lsls	r4, r2
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	0c21      	lsrs	r1, r4, #16
 8000bb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb6:	fa1f f78c 	uxth.w	r7, ip
 8000bba:	fb08 e316 	mls	r3, r8, r6, lr
 8000bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc2:	fb06 f107 	mul.w	r1, r6, r7
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 811f 	bcs.w	8000e14 <__udivmoddi4+0x298>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 811c 	bls.w	8000e14 <__udivmoddi4+0x298>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 f707 	mul.w	r7, r0, r7
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x92>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	f080 810a 	bcs.w	8000e18 <__udivmoddi4+0x29c>
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	f240 8107 	bls.w	8000e18 <__udivmoddi4+0x29c>
 8000c0a:	4464      	add	r4, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	1be4      	subs	r4, r4, r7
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa4>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xc2>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80ef 	beq.w	8000e0e <__udivmoddi4+0x292>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x160>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd4>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80f9 	bhi.w	8000e42 <__udivmoddi4+0x2c6>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	469e      	mov	lr, r3
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa4>
 8000c5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xec>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 8092 	bne.w	8000d96 <__udivmoddi4+0x21a>
 8000c72:	eba1 010c 	sub.w	r1, r1, ip
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2601      	movs	r6, #1
 8000c80:	0c20      	lsrs	r0, r4, #16
 8000c82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c86:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8e:	fb0e f003 	mul.w	r0, lr, r3
 8000c92:	4288      	cmp	r0, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x12c>
 8000c96:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x12a>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2c0>
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x156>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x154>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2ca>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x9a>
 8000cdc:	f1c6 0720 	rsb	r7, r6, #32
 8000ce0:	40b3      	lsls	r3, r6
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa20 f407 	lsr.w	r4, r0, r7
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	40f9      	lsrs	r1, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fb09 1118 	mls	r1, r9, r8, r1
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	4288      	cmp	r0, r1
 8000d16:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b8>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2bc>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2bc>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	458e      	cmp	lr, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1e2>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2b4>
 8000d56:	458e      	cmp	lr, r1
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2b4>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d62:	fba0 9402 	umull	r9, r4, r0, r2
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	42a1      	cmp	r1, r4
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46a6      	mov	lr, r4
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x2a4>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x2a0>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x212>
 8000d76:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d82:	fa22 f306 	lsr.w	r3, r2, r6
 8000d86:	40f1      	lsrs	r1, r6
 8000d88:	431f      	orrs	r7, r3
 8000d8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	f1c2 0320 	rsb	r3, r2, #32
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
 8000da4:	4091      	lsls	r1, r2
 8000da6:	4301      	orrs	r1, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db4:	fb07 3610 	mls	r6, r7, r0, r3
 8000db8:	0c0b      	lsrs	r3, r1, #16
 8000dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x260>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	b289      	uxth	r1, r1
 8000de0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de4:	fb07 3316 	mls	r3, r7, r6, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb06 f30e 	mul.w	r3, r6, lr
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x28a>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000e02:	3e02      	subs	r6, #2
 8000e04:	4461      	add	r1, ip
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0x104>
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e705      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e3      	b.n	8000be0 <__udivmoddi4+0x64>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6f8      	b.n	8000c0e <__udivmoddi4+0x92>
 8000e1c:	454b      	cmp	r3, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f8>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f8>
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x28a>
 8000e30:	4620      	mov	r0, r4
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1e2>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b8>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x12c>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e709      	b.n	8000c5a <__udivmoddi4+0xde>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x156>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	f200 809a 	bhi.w	8000f98 <Set_Resolution_A4988+0x148>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <Set_Resolution_A4988+0x1c>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e81 	.word	0x08000e81
 8000e70:	08000eb9 	.word	0x08000eb9
 8000e74:	08000ef1 	.word	0x08000ef1
 8000e78:	08000f29 	.word	0x08000f29
 8000e7c:	08000f61 	.word	0x08000f61
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69d8      	ldr	r0, [r3, #28]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f004 fea2 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a18      	ldr	r0, [r3, #32]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f004 fe9a 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f004 fe92 	bl	8005bd4 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000eb6:	e08b      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69d8      	ldr	r0, [r3, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f004 fe86 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a18      	ldr	r0, [r3, #32]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f004 fe7e 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f004 fe76 	bl	8005bd4 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000eee:	e06f      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69d8      	ldr	r0, [r3, #28]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	f004 fe6a 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a18      	ldr	r0, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f004 fe62 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f004 fe5a 	bl	8005bd4 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f26:	e053      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69d8      	ldr	r0, [r3, #28]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f004 fe4e 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a18      	ldr	r0, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	f004 fe46 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	f004 fe3e 	bl	8005bd4 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f5e:	e037      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69d8      	ldr	r0, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f004 fe32 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a18      	ldr	r0, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f004 fe2a 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f004 fe22 	bl	8005bd4 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2210      	movs	r2, #16
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f96:	e01b      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69d8      	ldr	r0, [r3, #28]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 fe16 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a18      	ldr	r0, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f004 fe0e 	bl	8005bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 fe06 	bl	8005bd4 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2210      	movs	r2, #16
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <Set_Direction_A4988+0x18>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d009      	beq.n	8001002 <Set_Direction_A4988+0x2a>
 8000fee:	e011      	b.n	8001014 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6958      	ldr	r0, [r3, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	8b1b      	ldrh	r3, [r3, #24]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f004 fdea 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 8001000:	e011      	b.n	8001026 <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6958      	ldr	r0, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	8b1b      	ldrh	r3, [r3, #24]
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	f004 fde1 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 8001012:	e008      	b.n	8001026 <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6958      	ldr	r0, [r3, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8b1b      	ldrh	r3, [r3, #24]
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	f004 fdd8 	bl	8005bd4 <HAL_GPIO_WritePin>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d003      	beq.n	8001046 <Enable_A4988+0x18>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d009      	beq.n	8001058 <Enable_A4988+0x2a>
 8001044:	e011      	b.n	800106a <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	f004 fdbf 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 8001056:	e011      	b.n	800107c <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f004 fdb6 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 8001068:	e008      	b.n	800107c <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f004 fdad 	bl	8005bd4 <HAL_GPIO_WritePin>
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d003      	beq.n	800109c <Reset_A4988+0x18>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d00a      	beq.n	80010b0 <Reset_A4988+0x2c>
 800109a:	e013      	b.n	80010c4 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f004 fd93 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 80010ae:	e013      	b.n	80010d8 <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	f004 fd89 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 80010c2:	e009      	b.n	80010d8 <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f004 fd7f 	bl	8005bd4 <HAL_GPIO_WritePin>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d003      	beq.n	80010f8 <Sleep_A4988+0x18>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d00a      	beq.n	800110c <Sleep_A4988+0x2c>
 80010f6:	e013      	b.n	8001120 <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f004 fd65 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 800110a:	e013      	b.n	8001134 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f004 fd5b 	bl	8005bd4 <HAL_GPIO_WritePin>
			break;
 800111e:	e009      	b.n	8001134 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f004 fd51 	bl	8005bd4 <HAL_GPIO_WritePin>
	}
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Init_A4988>:
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
void Init_A4988(A4988_Drive* drive){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fd2f 	bl	8007bac <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 800114e:	2102      	movs	r1, #2
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fe7d 	bl	8000e50 <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff3d 	bl	8000fd8 <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 800115e:	2101      	movs	r1, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff64 	bl	800102e <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 8001166:	2101      	movs	r1, #1
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff8b 	bl	8001084 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 800116e:	2102      	movs	r1, #2
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffb5 	bl	80010e0 <Sleep_A4988>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af04      	add	r7, sp, #16
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <BMP280_Read8+0x38>)
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	b29a      	uxth	r2, r3
 8001196:	230a      	movs	r3, #10
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 030f 	add.w	r3, r7, #15
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	21ec      	movs	r1, #236	; 0xec
 80011a8:	f004 ff04 	bl	8005fb4 <HAL_I2C_Mem_Read>
  return tmp;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000094 	.word	0x20000094

080011bc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <BMP280_Read16+0x40>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	230a      	movs	r3, #10
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2302      	movs	r3, #2
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	21ec      	movs	r1, #236	; 0xec
 80011e0:	f004 fee8 	bl	8005fb4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80011e4:	7b3b      	ldrb	r3, [r7, #12]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000094 	.word	0x20000094

08001200 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffd5 	bl	80011bc <BMP280_Read16>
 8001212:	4603      	mov	r3, r0
 8001214:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29b      	uxth	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	4603      	mov	r3, r0
 800123c:	460a      	mov	r2, r1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	4613      	mov	r3, r2
 8001242:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <BMP280_Write8+0x34>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	b29a      	uxth	r2, r3
 800124c:	230a      	movs	r3, #10
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2301      	movs	r3, #1
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	1dbb      	adds	r3, r7, #6
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	21ec      	movs	r1, #236	; 0xec
 800125c:	f004 fd96 	bl	8005d8c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000094 	.word	0x20000094

0800126c <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af04      	add	r7, sp, #16
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <BMP280_Read24+0x40>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	b29a      	uxth	r2, r3
 800127e:	230a      	movs	r3, #10
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2303      	movs	r3, #3
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	21ec      	movs	r1, #236	; 0xec
 8001290:	f004 fe90 	bl	8005fb4 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	4313      	orrs	r3, r2
 800129e:	7bba      	ldrb	r2, [r7, #14]
 80012a0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000094 	.word	0x20000094

080012b0 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	70fb      	strb	r3, [r7, #3]
 80012c2:	460b      	mov	r3, r1
 80012c4:	70bb      	strb	r3, [r7, #2]
 80012c6:	4613      	mov	r3, r2
 80012c8:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <BMP280_Init+0x13c>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d901      	bls.n	80012da <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80012d6:	2303      	movs	r3, #3
 80012d8:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012da:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <BMP280_Init+0x140>)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d901      	bls.n	80012f4 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012f0:	2305      	movs	r3, #5
 80012f2:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <BMP280_Init+0x144>)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012fa:	78bb      	ldrb	r3, [r7, #2]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d901      	bls.n	8001304 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001300:	2305      	movs	r3, #5
 8001302:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001304:	4a3c      	ldr	r2, [pc, #240]	; (80013f8 <BMP280_Init+0x148>)
 8001306:	78bb      	ldrb	r3, [r7, #2]
 8001308:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800130a:	bf00      	nop
 800130c:	20d0      	movs	r0, #208	; 0xd0
 800130e:	f7ff ff37 	bl	8001180 <BMP280_Read8>
 8001312:	4603      	mov	r3, r0
 8001314:	2b58      	cmp	r3, #88	; 0x58
 8001316:	d1f9      	bne.n	800130c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001318:	2088      	movs	r0, #136	; 0x88
 800131a:	f7ff ff71 	bl	8001200 <BMP280_Read16LE>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <BMP280_Init+0x14c>)
 8001324:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001326:	208a      	movs	r0, #138	; 0x8a
 8001328:	f7ff ff6a 	bl	8001200 <BMP280_Read16LE>
 800132c:	4603      	mov	r3, r0
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <BMP280_Init+0x150>)
 8001332:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001334:	208c      	movs	r0, #140	; 0x8c
 8001336:	f7ff ff63 	bl	8001200 <BMP280_Read16LE>
 800133a:	4603      	mov	r3, r0
 800133c:	b21a      	sxth	r2, r3
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <BMP280_Init+0x154>)
 8001340:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001342:	208e      	movs	r0, #142	; 0x8e
 8001344:	f7ff ff5c 	bl	8001200 <BMP280_Read16LE>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <BMP280_Init+0x158>)
 800134e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001350:	2090      	movs	r0, #144	; 0x90
 8001352:	f7ff ff55 	bl	8001200 <BMP280_Read16LE>
 8001356:	4603      	mov	r3, r0
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <BMP280_Init+0x15c>)
 800135c:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800135e:	2092      	movs	r0, #146	; 0x92
 8001360:	f7ff ff4e 	bl	8001200 <BMP280_Read16LE>
 8001364:	4603      	mov	r3, r0
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <BMP280_Init+0x160>)
 800136a:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800136c:	2094      	movs	r0, #148	; 0x94
 800136e:	f7ff ff47 	bl	8001200 <BMP280_Read16LE>
 8001372:	4603      	mov	r3, r0
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <BMP280_Init+0x164>)
 8001378:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800137a:	2096      	movs	r0, #150	; 0x96
 800137c:	f7ff ff40 	bl	8001200 <BMP280_Read16LE>
 8001380:	4603      	mov	r3, r0
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <BMP280_Init+0x168>)
 8001386:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001388:	2098      	movs	r0, #152	; 0x98
 800138a:	f7ff ff39 	bl	8001200 <BMP280_Read16LE>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <BMP280_Init+0x16c>)
 8001394:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001396:	209a      	movs	r0, #154	; 0x9a
 8001398:	f7ff ff32 	bl	8001200 <BMP280_Read16LE>
 800139c:	4603      	mov	r3, r0
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <BMP280_Init+0x170>)
 80013a2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80013a4:	209c      	movs	r0, #156	; 0x9c
 80013a6:	f7ff ff2b 	bl	8001200 <BMP280_Read16LE>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <BMP280_Init+0x174>)
 80013b0:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80013b2:	209e      	movs	r0, #158	; 0x9e
 80013b4:	f7ff ff24 	bl	8001200 <BMP280_Read16LE>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <BMP280_Init+0x178>)
 80013be:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	78bb      	ldrb	r3, [r7, #2]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	20f4      	movs	r0, #244	; 0xf4
 80013de:	f7ff ff29 	bl	8001234 <BMP280_Write8>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000094 	.word	0x20000094
 80013f0:	2000009a 	.word	0x2000009a
 80013f4:	20000098 	.word	0x20000098
 80013f8:	20000099 	.word	0x20000099
 80013fc:	200000b0 	.word	0x200000b0
 8001400:	2000009c 	.word	0x2000009c
 8001404:	2000009e 	.word	0x2000009e
 8001408:	200000b2 	.word	0x200000b2
 800140c:	200000a0 	.word	0x200000a0
 8001410:	200000a2 	.word	0x200000a2
 8001414:	200000a4 	.word	0x200000a4
 8001418:	200000a6 	.word	0x200000a6
 800141c:	200000a8 	.word	0x200000a8
 8001420:	200000aa 	.word	0x200000aa
 8001424:	200000ac 	.word	0x200000ac
 8001428:	200000ae 	.word	0x200000ae

0800142c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <BMP280_ReadTemperature+0xfc>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d16d      	bne.n	8001516 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800143a:	20f4      	movs	r0, #244	; 0xf4
 800143c:	f7ff fea0 	bl	8001180 <BMP280_Read8>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	4619      	mov	r1, r3
 8001458:	20f4      	movs	r0, #244	; 0xf4
 800145a:	f7ff feeb 	bl	8001234 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800145e:	20f4      	movs	r0, #244	; 0xf4
 8001460:	f7ff fe8e 	bl	8001180 <BMP280_Read8>
 8001464:	4603      	mov	r3, r0
 8001466:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001468:	7dbb      	ldrb	r3, [r7, #22]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d14f      	bne.n	8001516 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001476:	20f4      	movs	r0, #244	; 0xf4
 8001478:	f7ff fe82 	bl	8001180 <BMP280_Read8>
 800147c:	4603      	mov	r3, r0
 800147e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001488:	7dbb      	ldrb	r3, [r7, #22]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d000      	beq.n	8001490 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800148e:	e7f2      	b.n	8001476 <BMP280_ReadTemperature+0x4a>
				  break;
 8001490:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001492:	20fa      	movs	r0, #250	; 0xfa
 8001494:	f7ff feea 	bl	800126c <BMP280_Read24>
 8001498:	4603      	mov	r3, r0
 800149a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	111b      	asrs	r3, r3, #4
 80014a0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	10da      	asrs	r2, r3, #3
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <BMP280_ReadTemperature+0x100>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <BMP280_ReadTemperature+0x104>)
 80014b0:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	12db      	asrs	r3, r3, #11
 80014ba:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	111b      	asrs	r3, r3, #4
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <BMP280_ReadTemperature+0x100>)
 80014c2:	8812      	ldrh	r2, [r2, #0]
 80014c4:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	1112      	asrs	r2, r2, #4
 80014ca:	4918      	ldr	r1, [pc, #96]	; (800152c <BMP280_ReadTemperature+0x100>)
 80014cc:	8809      	ldrh	r1, [r1, #0]
 80014ce:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014d4:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <BMP280_ReadTemperature+0x108>)
 80014d8:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014e0:	139b      	asrs	r3, r3, #14
 80014e2:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <BMP280_ReadTemperature+0x10c>)
 80014ec:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <BMP280_ReadTemperature+0x10c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3380      	adds	r3, #128	; 0x80
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800153c <BMP280_ReadTemperature+0x110>
 8001510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001514:	e001      	b.n	800151a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001516:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001540 <BMP280_ReadTemperature+0x114>
}
 800151a:	eef0 7a47 	vmov.f32	s15, s14
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000009a 	.word	0x2000009a
 800152c:	200000b0 	.word	0x200000b0
 8001530:	2000009c 	.word	0x2000009c
 8001534:	2000009e 	.word	0x2000009e
 8001538:	200000b4 	.word	0x200000b4
 800153c:	42c80000 	.word	0x42c80000
 8001540:	c2c60000 	.word	0xc2c60000

08001544 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	font = font_t;
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <GFX_SetFont+0x1c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200000b8 	.word	0x200000b8

08001564 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <GFX_SetFontSize+0x16>
		size = size_t;
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <GFX_SetFontSize+0x24>)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	7013      	strb	r3, [r2, #0]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	460b      	mov	r3, r1
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	4613      	mov	r3, r2
 80015a0:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b7e      	cmp	r3, #126	; 0x7e
 80015a6:	f200 80a3 	bhi.w	80016f0 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	e096      	b.n	80016de <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80015b0:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <GFX_DrawChar+0x16c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	3b20      	subs	r3, #32
 80015b8:	494f      	ldr	r1, [pc, #316]	; (80016f8 <GFX_DrawChar+0x16c>)
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	3101      	adds	r1, #1
 80015be:	7809      	ldrb	r1, [r1, #0]
 80015c0:	fb03 f101 	mul.w	r1, r3, r1
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	440b      	add	r3, r1
 80015c8:	3302      	adds	r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80015d0:	2300      	movs	r3, #0
 80015d2:	757b      	strb	r3, [r7, #21]
 80015d4:	e078      	b.n	80016c8 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80015d6:	7dbb      	ldrb	r3, [r7, #22]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d032      	beq.n	8001646 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80015e0:	4b46      	ldr	r3, [pc, #280]	; (80016fc <GFX_DrawChar+0x170>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d113      	bne.n	8001610 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b218      	sxth	r0, r3
 80015f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	79ba      	ldrb	r2, [r7, #6]
 8001608:	4619      	mov	r1, r3
 800160a:	f000 fa2f 	bl	8001a6c <SSD1306_DrawPixel>
 800160e:	e052      	b.n	80016b6 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	4a3a      	ldr	r2, [pc, #232]	; (80016fc <GFX_DrawChar+0x170>)
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	18d0      	adds	r0, r2, r3
 800161e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001622:	4a36      	ldr	r2, [pc, #216]	; (80016fc <GFX_DrawChar+0x170>)
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	fb03 f202 	mul.w	r2, r3, r2
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	18d1      	adds	r1, r2, r3
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <GFX_DrawChar+0x170>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <GFX_DrawChar+0x170>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b29c      	uxth	r4, r3
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4623      	mov	r3, r4
 8001640:	f000 f9bd 	bl	80019be <GFX_DrawFillRectangle>
 8001644:	e037      	b.n	80016b6 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800164a:	2b00      	cmp	r3, #0
 800164c:	d133      	bne.n	80016b6 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <GFX_DrawChar+0x170>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d114      	bne.n	8001680 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	b218      	sxth	r0, r3
 8001664:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001668:	b29a      	uxth	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	b21b      	sxth	r3, r3
 8001674:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 f9f7 	bl	8001a6c <SSD1306_DrawPixel>
 800167e:	e01a      	b.n	80016b6 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <GFX_DrawChar+0x170>)
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	fb03 f202 	mul.w	r2, r3, r2
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	18d0      	adds	r0, r2, r3
 800168e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <GFX_DrawChar+0x170>)
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	18d1      	adds	r1, r2, r3
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <GFX_DrawChar+0x170>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <GFX_DrawChar+0x170>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b29c      	uxth	r4, r3
 80016aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4623      	mov	r3, r4
 80016b2:	f000 f984 	bl	80019be <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80016b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	757b      	strb	r3, [r7, #21]
 80016c2:	7dbb      	ldrb	r3, [r7, #22]
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	75bb      	strb	r3, [r7, #22]
 80016c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <GFX_DrawChar+0x16c>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f6ff af7f 	blt.w	80015d6 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	3301      	adds	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <GFX_DrawChar+0x16c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f4ff af61 	bcc.w	80015b0 <GFX_DrawChar+0x24>
 80016ee:	e000      	b.n	80016f2 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80016f0:	bf00      	nop
            }
        }
    }
}
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	200000b8 	.word	0x200000b8
 80016fc:	20000000 	.word	0x20000000

08001700 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001718:	e03e      	b.n	8001798 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800171a:	78f9      	ldrb	r1, [r7, #3]
 800171c:	7cfa      	ldrb	r2, [r7, #19]
 800171e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	460b      	mov	r3, r1
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	6978      	ldr	r0, [r7, #20]
 800172a:	f7ff ff2f 	bl	800158c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <GFX_DrawString+0xb0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <GFX_DrawString+0xb4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	3301      	adds	r3, #1
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d120      	bne.n	8001792 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001750:	2300      	movs	r3, #0
 8001752:	74bb      	strb	r3, [r7, #18]
 8001754:	e012      	b.n	800177c <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29b      	uxth	r3, r3
 800175e:	b218      	sxth	r0, r3
 8001760:	7cbb      	ldrb	r3, [r7, #18]
 8001762:	b29a      	uxth	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21b      	sxth	r3, r3
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	f000 f97b 	bl	8001a6c <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001776:	7cbb      	ldrb	r3, [r7, #18]
 8001778:	3301      	adds	r3, #1
 800177a:	74bb      	strb	r3, [r7, #18]
 800177c:	7cba      	ldrb	r2, [r7, #18]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <GFX_DrawString+0xb0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <GFX_DrawString+0xb4>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	429a      	cmp	r2, r3
 8001790:	dbe1      	blt.n	8001756 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ba      	bne.n	800171a <GFX_DrawString+0x1a>
	}
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000b8 	.word	0x200000b8
 80017b4:	20000000 	.word	0x20000000

080017b8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1acb      	subs	r3, r1, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bfb8      	it	lt
 80017de:	425b      	neglt	r3, r3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bfcc      	ite	gt
 80017e4:	2301      	movgt	r3, #1
 80017e6:	2300      	movle	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80017ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dd0b      	ble.n	800182c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	b29b      	uxth	r3, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	bfb8      	it	lt
 8001844:	425b      	neglt	r3, r3
 8001846:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da00      	bge.n	8001852 <GFX_WriteLine+0x9a>
 8001850:	3301      	adds	r3, #1
 8001852:	105b      	asrs	r3, r3, #1
 8001854:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	da02      	bge.n	8001864 <GFX_WriteLine+0xac>
	        ystep = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001862:	e030      	b.n	80018c6 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001868:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800186a:	e02c      	b.n	80018c6 <GFX_WriteLine+0x10e>
	        if (steep) {
 800186c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	b21b      	sxth	r3, r3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	b211      	sxth	r1, r2
 800187c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f8f3 	bl	8001a6c <SSD1306_DrawPixel>
 8001886:	e008      	b.n	800189a <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b21b      	sxth	r3, r3
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	b211      	sxth	r1, r2
 8001890:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f8e9 	bl	8001a6c <SSD1306_DrawPixel>
	        }
	        err -= dy;
 800189a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800189c:	8abb      	ldrh	r3, [r7, #20]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80018a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da09      	bge.n	80018c0 <GFX_WriteLine+0x108>
	            y_start += ystep;
 80018ac:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80018b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80018b8:	8afb      	ldrh	r3, [r7, #22]
 80018ba:	4413      	add	r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	ddce      	ble.n	800186c <GFX_WriteLine+0xb4>
	        }
	    }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	; 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff ff5d 	bl	80017b8 <GFX_WriteLine>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af02      	add	r7, sp, #8
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff47 	bl	80017b8 <GFX_WriteLine>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b088      	sub	sp, #32
 8001936:	af02      	add	r7, sp, #8
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d114      	bne.n	8001972 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	dd05      	ble.n	800195c <GFX_DrawLine+0x2a>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff ffb4 	bl	80018d8 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001970:	e021      	b.n	80019b6 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d114      	bne.n	80019a4 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dd05      	ble.n	800198e <GFX_DrawLine+0x5c>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff ffb2 	bl	8001906 <GFX_DrawFastHLine>
}
 80019a2:	e008      	b.n	80019b6 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80019a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff01 	bl	80017b8 <GFX_WriteLine>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	4611      	mov	r1, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	80fb      	strh	r3, [r7, #6]
 80019d0:	4613      	mov	r3, r2
 80019d2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e009      	b.n	80019ee <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80019da:	88ba      	ldrh	r2, [r7, #4]
 80019dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff78 	bl	80018d8 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbef      	blt.n	80019da <GFX_DrawFillRectangle+0x1c>
    }

}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af04      	add	r7, sp, #16
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <SSD1306_Command+0x30>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	2200      	movs	r2, #0
 8001a24:	2178      	movs	r1, #120	; 0x78
 8001a26:	f004 f9b1 	bl	8005d8c <HAL_I2C_Mem_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000bc 	.word	0x200000bc

08001a38 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af04      	add	r7, sp, #16
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <SSD1306_Data+0x30>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	2178      	movs	r1, #120	; 0x78
 8001a5c:	f004 f996 	bl	8005d8c <HAL_I2C_Mem_Write>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200000bc 	.word	0x200000bc

08001a6c <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	80bb      	strh	r3, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db79      	blt.n	8001b7a <SSD1306_DrawPixel+0x10e>
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8c:	dc75      	bgt.n	8001b7a <SSD1306_DrawPixel+0x10e>
 8001a8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db71      	blt.n	8001b7a <SSD1306_DrawPixel+0x10e>
 8001a96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a9a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a9c:	dc6d      	bgt.n	8001b7a <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d049      	beq.n	8001b38 <SSD1306_DrawPixel+0xcc>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	dc69      	bgt.n	8001b7c <SSD1306_DrawPixel+0x110>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d022      	beq.n	8001af2 <SSD1306_DrawPixel+0x86>
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d165      	bne.n	8001b7c <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001ab0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da00      	bge.n	8001abe <SSD1306_DrawPixel+0x52>
 8001abc:	3307      	adds	r3, #7
 8001abe:	10db      	asrs	r3, r3, #3
 8001ac0:	b218      	sxth	r0, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	01db      	lsls	r3, r3, #7
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b259      	sxtb	r1, r3
 8001ae0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	01db      	lsls	r3, r3, #7
 8001ae8:	4413      	add	r3, r2
 8001aea:	b2c9      	uxtb	r1, r1
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001aee:	54d1      	strb	r1, [r2, r3]
      break;
 8001af0:	e044      	b.n	8001b7c <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001af6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da00      	bge.n	8001b00 <SSD1306_DrawPixel+0x94>
 8001afe:	3307      	adds	r3, #7
 8001b00:	10db      	asrs	r3, r3, #3
 8001b02:	b218      	sxth	r0, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4013      	ands	r3, r2
 8001b24:	b259      	sxtb	r1, r3
 8001b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	01db      	lsls	r3, r3, #7
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b34:	54d1      	strb	r1, [r2, r3]
      break;
 8001b36:	e021      	b.n	8001b7c <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001b38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da00      	bge.n	8001b46 <SSD1306_DrawPixel+0xda>
 8001b44:	3307      	adds	r3, #7
 8001b46:	10db      	asrs	r3, r3, #3
 8001b48:	b218      	sxth	r0, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	01db      	lsls	r3, r3, #7
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	4053      	eors	r3, r2
 8001b66:	b259      	sxtb	r1, r3
 8001b68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <SSD1306_DrawPixel+0x11c>)
 8001b76:	54d1      	strb	r1, [r2, r3]
      break;
 8001b78:	e000      	b.n	8001b7c <SSD1306_DrawPixel+0x110>
	  return;
 8001b7a:	bf00      	nop
    }
}
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200000c0 	.word	0x200000c0

08001b8c <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <SSD1306_Clear+0x22>
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10d      	bne.n	8001bbc <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba4:	21ff      	movs	r1, #255	; 0xff
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <SSD1306_Clear+0x38>)
 8001ba8:	f00c fdfe 	bl	800e7a8 <memset>
		break;
 8001bac:	e006      	b.n	8001bbc <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <SSD1306_Clear+0x38>)
 8001bb6:	f00c fdf7 	bl	800e7a8 <memset>
		break;
 8001bba:	bf00      	nop
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200000c0 	.word	0x200000c0

08001bc8 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
#ifndef SSD1306_USE_FREERTOS
	SSD1306_Command(SSD1306_PAGEADDR);
 8001bcc:	2022      	movs	r0, #34	; 0x22
 8001bce:	f7ff ff19 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff ff16 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001bd8:	20ff      	movs	r0, #255	; 0xff
 8001bda:	f7ff ff13 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001bde:	2021      	movs	r0, #33	; 0x21
 8001be0:	f7ff ff10 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff ff0d 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001bea:	207f      	movs	r0, #127	; 0x7f
 8001bec:	f7ff ff0a 	bl	8001a04 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <SSD1306_Display+0x38>)
 8001bf6:	f7ff ff1f 	bl	8001a38 <SSD1306_Data>
		osMutexRelease(MutexI2C4Handle);

		osThreadYield();
	}
#endif
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200000c0 	.word	0x200000c0

08001c04 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <SSD1306_Init+0xac>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001c12:	20ae      	movs	r0, #174	; 0xae
 8001c14:	f7ff fef6 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001c18:	20d5      	movs	r0, #213	; 0xd5
 8001c1a:	f7ff fef3 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001c1e:	2080      	movs	r0, #128	; 0x80
 8001c20:	f7ff fef0 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001c24:	203f      	movs	r0, #63	; 0x3f
 8001c26:	f7ff feed 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001c2a:	20d3      	movs	r0, #211	; 0xd3
 8001c2c:	f7ff feea 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fee7 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001c36:	2040      	movs	r0, #64	; 0x40
 8001c38:	f7ff fee4 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001c3c:	208d      	movs	r0, #141	; 0x8d
 8001c3e:	f7ff fee1 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001c42:	2014      	movs	r0, #20
 8001c44:	f7ff fede 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001c48:	2020      	movs	r0, #32
 8001c4a:	f7ff fedb 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fed8 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001c54:	20a1      	movs	r0, #161	; 0xa1
 8001c56:	f7ff fed5 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001c5a:	20c8      	movs	r0, #200	; 0xc8
 8001c5c:	f7ff fed2 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001c60:	20da      	movs	r0, #218	; 0xda
 8001c62:	f7ff fecf 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001c66:	2012      	movs	r0, #18
 8001c68:	f7ff fecc 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001c6c:	2081      	movs	r0, #129	; 0x81
 8001c6e:	f7ff fec9 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001c72:	20ff      	movs	r0, #255	; 0xff
 8001c74:	f7ff fec6 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001c78:	20d9      	movs	r0, #217	; 0xd9
 8001c7a:	f7ff fec3 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8001c7e:	20f1      	movs	r0, #241	; 0xf1
 8001c80:	f7ff fec0 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001c84:	20db      	movs	r0, #219	; 0xdb
 8001c86:	f7ff febd 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001c8a:	2040      	movs	r0, #64	; 0x40
 8001c8c:	f7ff feba 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001c90:	20a4      	movs	r0, #164	; 0xa4
 8001c92:	f7ff feb7 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001c96:	20a6      	movs	r0, #166	; 0xa6
 8001c98:	f7ff feb4 	bl	8001a04 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001c9c:	202e      	movs	r0, #46	; 0x2e
 8001c9e:	f7ff feb1 	bl	8001a04 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001ca2:	20af      	movs	r0, #175	; 0xaf
 8001ca4:	f7ff feae 	bl	8001a04 <SSD1306_Command>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000bc 	.word	0x200000bc

08001cb4 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	1c7b      	adds	r3, r7, #1
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f004 f852 	bl	8005d8c <HAL_I2C_Mem_Write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	729a      	strb	r2, [r3, #10]
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8001d08:	883b      	ldrh	r3, [r7, #0]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 8001d10:	883b      	ldrh	r3, [r7, #0]
 8001d12:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	733b      	strb	r3, [r7, #12]
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f004 f825 	bl	8005d8c <HAL_I2C_Mem_Write>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	729a      	strb	r2, [r3, #10]
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b088      	sub	sp, #32
 8001d56:	af04      	add	r7, sp, #16
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	f107 030f 	add.w	r3, r7, #15
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f004 f918 	bl	8005fb4 <HAL_I2C_Mem_Read>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	729a      	strb	r2, [r3, #10]
	return value;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b088      	sub	sp, #32
 8001d9a:	af04      	add	r7, sp, #16
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 8001da2:	2300      	movs	r3, #0
 8001da4:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	b299      	uxth	r1, r3
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f004 f8f4 	bl	8005fb4 <HAL_I2C_Mem_Read>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	7b3b      	ldrb	r3, [r7, #12]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	81fb      	strh	r3, [r7, #14]
	return value_;
 8001de4:	89fb      	ldrh	r3, [r7, #14]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2229      	movs	r2, #41	; 0x29
 8001e02:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e16:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 8001e1e:	2124      	movs	r1, #36	; 0x24
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff96 	bl	8001d52 <readReg>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 8001e2e:	2116      	movs	r1, #22
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff8e 	bl	8001d52 <readReg>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 80a9 	bne.w	8001f90 <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f240 2107 	movw	r1, #519	; 0x207
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff32 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff2c 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2196      	movs	r1, #150	; 0x96
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff27 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 8001e66:	22fd      	movs	r2, #253	; 0xfd
 8001e68:	2197      	movs	r1, #151	; 0x97
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff22 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 8001e70:	2201      	movs	r2, #1
 8001e72:	21e3      	movs	r1, #227	; 0xe3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff1d 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	21e4      	movs	r1, #228	; 0xe4
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff18 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8001e84:	2202      	movs	r2, #2
 8001e86:	21e5      	movs	r1, #229	; 0xe5
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff13 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	21e6      	movs	r1, #230	; 0xe6
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff0e 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8001e98:	2203      	movs	r2, #3
 8001e9a:	21e7      	movs	r1, #231	; 0xe7
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff09 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	21f5      	movs	r1, #245	; 0xf5
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff04 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 8001eac:	2205      	movs	r2, #5
 8001eae:	21d9      	movs	r1, #217	; 0xd9
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff feff 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8001eb6:	22ce      	movs	r2, #206	; 0xce
 8001eb8:	21db      	movs	r1, #219	; 0xdb
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fefa 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	21dc      	movs	r1, #220	; 0xdc
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fef5 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 8001eca:	22f8      	movs	r2, #248	; 0xf8
 8001ecc:	21dd      	movs	r1, #221	; 0xdd
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fef0 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	219f      	movs	r1, #159	; 0x9f
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff feeb 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 8001ede:	223c      	movs	r2, #60	; 0x3c
 8001ee0:	21a3      	movs	r1, #163	; 0xa3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fee6 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	21b7      	movs	r1, #183	; 0xb7
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff fee1 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 8001ef2:	223c      	movs	r2, #60	; 0x3c
 8001ef4:	21bb      	movs	r1, #187	; 0xbb
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fedc 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 8001efc:	2209      	movs	r2, #9
 8001efe:	21b2      	movs	r1, #178	; 0xb2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fed7 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8001f06:	2209      	movs	r2, #9
 8001f08:	21ca      	movs	r1, #202	; 0xca
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fed2 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fecc 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 8001f1c:	2217      	movs	r2, #23
 8001f1e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fec6 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fec0 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 8001f34:	2205      	movs	r2, #5
 8001f36:	21ff      	movs	r1, #255	; 0xff
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff febb 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 8001f3e:	2205      	movs	r2, #5
 8001f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff feb5 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 8001f4a:	2205      	movs	r2, #5
 8001f4c:	f240 1199 	movw	r1, #409	; 0x199
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff feaf 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 8001f56:	221b      	movs	r2, #27
 8001f58:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fea9 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 8001f62:	223e      	movs	r2, #62	; 0x3e
 8001f64:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fea3 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 8001f6e:	221f      	movs	r2, #31
 8001f70:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fe9d 	bl	8001cb4 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2130      	movs	r1, #48	; 0x30
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe98 	bl	8001cb4 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2116      	movs	r1, #22
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fe93 	bl	8001cb4 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 8001f8e:	e021      	b.n	8001fd4 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 8001f90:	2196      	movs	r1, #150	; 0x96
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff feff 	bl	8001d96 <readReg16Bit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 8001f9c:	2254      	movs	r2, #84	; 0x54
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	715a      	strb	r2, [r3, #5]
 8001faa:	e00a      	b.n	8001fc2 <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 8001fac:	227f      	movs	r2, #127	; 0x7f
 8001fae:	89fb      	ldrh	r3, [r7, #14]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	715a      	strb	r2, [r3, #5]
 8001fba:	e002      	b.n	8001fc2 <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	799a      	ldrb	r2, [r3, #6]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	795b      	ldrb	r3, [r3, #5]
 8001fca:	fb12 f303 	smulbb	r3, r2, r3
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	719a      	strb	r2, [r3, #6]
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8001fe8:	2314      	movs	r3, #20
 8001fea:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d043      	beq.n	800207a <setScaling_VL6180X+0x9e>
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d840      	bhi.n	800207a <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	795b      	ldrb	r3, [r3, #5]
 8002002:	461a      	mov	r2, r3
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <setScaling_VL6180X+0xa8>)
 8002006:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800200a:	461a      	mov	r2, r3
 800200c:	2196      	movs	r1, #150	; 0x96
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fe72 	bl	8001cf8 <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	799a      	ldrb	r2, [r3, #6]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	2124      	movs	r1, #36	; 0x24
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fe44 	bl	8001cb4 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	2121      	movs	r1, #33	; 0x21
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fe39 	bl	8001cb4 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 8002042:	212d      	movs	r1, #45	; 0x2d
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fe84 	bl	8001d52 <readReg>
 800204a:	4603      	mov	r3, r0
 800204c:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 800204e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	b25a      	sxtb	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	795b      	ldrb	r3, [r3, #5]
 800205c:	2b01      	cmp	r3, #1
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	b25b      	sxtb	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b25b      	sxtb	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	212d      	movs	r1, #45	; 0x2d
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe1e 	bl	8001cb4 <writeReg>
 8002078:	e000      	b.n	800207c <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 800207a:	bf00      	nop
}
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	0800eeb8 	.word	0x0800eeb8

08002088 <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 8002090:	f003 fa74 	bl	800557c <HAL_GetTick>
 8002094:	4603      	mov	r3, r0
 8002096:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8002098:	e010      	b.n	80020bc <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	891b      	ldrh	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <readRangeContinuous_VL6180X+0x34>
 80020a2:	f003 fa6b 	bl	800557c <HAL_GetTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	8912      	ldrh	r2, [r2, #8]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	dd01      	ble.n	80020bc <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 80020b8:	23ff      	movs	r3, #255	; 0xff
 80020ba:	e014      	b.n	80020e6 <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 80020bc:	214f      	movs	r1, #79	; 0x4f
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fe47 	bl	8001d52 <readReg>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0e5      	beq.n	800209a <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 80020ce:	2162      	movs	r1, #98	; 0x62
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fe3e 	bl	8001d52 <readReg>
 80020d6:	4603      	mov	r3, r0
 80020d8:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 80020da:	2201      	movs	r2, #1
 80020dc:	2115      	movs	r1, #21
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fde8 	bl	8001cb4 <writeReg>
  return range;
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2118      	movs	r1, #24
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fdda 	bl	8001cb4 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffc1 	bl	8002088 <readRangeContinuous_VL6180X>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 8002118:	2230      	movs	r2, #48	; 0x30
 800211a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fdc8 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 8002124:	2246      	movs	r2, #70	; 0x46
 8002126:	213f      	movs	r1, #63	; 0x3f
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fdc3 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	2131      	movs	r1, #49	; 0x31
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fdbe 	bl	8001cb4 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 8002138:	2263      	movs	r2, #99	; 0x63
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fddb 	bl	8001cf8 <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 8002142:	2201      	movs	r2, #1
 8002144:	212e      	movs	r1, #46	; 0x2e
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fdb4 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 800214c:	2209      	movs	r2, #9
 800214e:	211b      	movs	r1, #27
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fdaf 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 8002156:	2231      	movs	r2, #49	; 0x31
 8002158:	213e      	movs	r1, #62	; 0x3e
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fdaa 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 8002160:	2224      	movs	r2, #36	; 0x24
 8002162:	2114      	movs	r1, #20
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fda5 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 800216a:	2231      	movs	r2, #49	; 0x31
 800216c:	211c      	movs	r1, #28
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fda0 	bl	8001cb4 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	f240 21a3 	movw	r1, #675	; 0x2a3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fd9a 	bl	8001cb4 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 8002180:	2101      	movs	r1, #1
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff2a 	bl	8001fdc <setScaling_VL6180X>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	795b      	ldrb	r3, [r3, #5]
 800219c:	b29c      	uxth	r4, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa5 	bl	80020ee <readRangeSingle_VL6180X>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	fb14 f303 	smulbb	r3, r4, r3
 80021ac:	b29b      	uxth	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
	...

080021b8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	static uint32_t LastTick;

	if(LastTick < osKernelGetTickCount()){
 80021bc:	f008 f960 	bl	800a480 <osKernelGetTickCount>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <vApplicationIdleHook+0x2c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d909      	bls.n	80021de <vApplicationIdleHook+0x26>
		IdleTicks++;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <vApplicationIdleHook+0x30>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <vApplicationIdleHook+0x30>)
 80021d2:	6013      	str	r3, [r2, #0]
		LastTick = osKernelGetTickCount();
 80021d4:	f008 f954 	bl	800a480 <osKernelGetTickCount>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a02      	ldr	r2, [pc, #8]	; (80021e4 <vApplicationIdleHook+0x2c>)
 80021dc:	6013      	str	r3, [r2, #0]
	}
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000053c 	.word	0x2000053c
 80021e8:	200004c4 	.word	0x200004c4

080021ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 80021f0:	4874      	ldr	r0, [pc, #464]	; (80023c4 <MX_FREERTOS_Init+0x1d8>)
 80021f2:	f008 fb65 	bl	800a8c0 <osMutexNew>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a73      	ldr	r2, [pc, #460]	; (80023c8 <MX_FREERTOS_Init+0x1dc>)
 80021fa:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 80021fc:	4873      	ldr	r0, [pc, #460]	; (80023cc <MX_FREERTOS_Init+0x1e0>)
 80021fe:	f008 fb5f 	bl	800a8c0 <osMutexNew>
 8002202:	4603      	mov	r3, r0
 8002204:	4a72      	ldr	r2, [pc, #456]	; (80023d0 <MX_FREERTOS_Init+0x1e4>)
 8002206:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C4 */
  MutexI2C4Handle = osMutexNew(&MutexI2C4_attributes);
 8002208:	4872      	ldr	r0, [pc, #456]	; (80023d4 <MX_FREERTOS_Init+0x1e8>)
 800220a:	f008 fb59 	bl	800a8c0 <osMutexNew>
 800220e:	4603      	mov	r3, r0
 8002210:	4a71      	ldr	r2, [pc, #452]	; (80023d8 <MX_FREERTOS_Init+0x1ec>)
 8002212:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SyringeInfoOLEDSemaphore */
  SyringeInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoOLEDSemaphore_attributes);
 8002214:	4a71      	ldr	r2, [pc, #452]	; (80023dc <MX_FREERTOS_Init+0x1f0>)
 8002216:	2101      	movs	r1, #1
 8002218:	2001      	movs	r0, #1
 800221a:	f008 fc99 	bl	800ab50 <osSemaphoreNew>
 800221e:	4603      	mov	r3, r0
 8002220:	4a6f      	ldr	r2, [pc, #444]	; (80023e0 <MX_FREERTOS_Init+0x1f4>)
 8002222:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoOLEDSemaphore */
  NeedleInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoOLEDSemaphore_attributes);
 8002224:	4a6f      	ldr	r2, [pc, #444]	; (80023e4 <MX_FREERTOS_Init+0x1f8>)
 8002226:	2101      	movs	r1, #1
 8002228:	2001      	movs	r0, #1
 800222a:	f008 fc91 	bl	800ab50 <osSemaphoreNew>
 800222e:	4603      	mov	r3, r0
 8002230:	4a6d      	ldr	r2, [pc, #436]	; (80023e8 <MX_FREERTOS_Init+0x1fc>)
 8002232:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationSemaphore */
  TemperatureInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &TemperatureInfoCommunicationSemaphore_attributes);
 8002234:	4a6d      	ldr	r2, [pc, #436]	; (80023ec <MX_FREERTOS_Init+0x200>)
 8002236:	2101      	movs	r1, #1
 8002238:	2001      	movs	r0, #1
 800223a:	f008 fc89 	bl	800ab50 <osSemaphoreNew>
 800223e:	4603      	mov	r3, r0
 8002240:	4a6b      	ldr	r2, [pc, #428]	; (80023f0 <MX_FREERTOS_Init+0x204>)
 8002242:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoCommunicationSemaphore */
  SyringeInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoCommunicationSemaphore_attributes);
 8002244:	4a6b      	ldr	r2, [pc, #428]	; (80023f4 <MX_FREERTOS_Init+0x208>)
 8002246:	2101      	movs	r1, #1
 8002248:	2001      	movs	r0, #1
 800224a:	f008 fc81 	bl	800ab50 <osSemaphoreNew>
 800224e:	4603      	mov	r3, r0
 8002250:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <MX_FREERTOS_Init+0x20c>)
 8002252:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoCommunicationSemaphore */
  NeedleInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoCommunicationSemaphore_attributes);
 8002254:	4a69      	ldr	r2, [pc, #420]	; (80023fc <MX_FREERTOS_Init+0x210>)
 8002256:	2101      	movs	r1, #1
 8002258:	2001      	movs	r0, #1
 800225a:	f008 fc79 	bl	800ab50 <osSemaphoreNew>
 800225e:	4603      	mov	r3, r0
 8002260:	4a67      	ldr	r2, [pc, #412]	; (8002400 <MX_FREERTOS_Init+0x214>)
 8002262:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SyringeInfoTimerOLED */
  SyringeInfoTimerOLEDHandle = osTimerNew(SyringeInfoTimerOLEDCallback, osTimerPeriodic, NULL, &SyringeInfoTimerOLED_attributes);
 8002264:	4b67      	ldr	r3, [pc, #412]	; (8002404 <MX_FREERTOS_Init+0x218>)
 8002266:	2200      	movs	r2, #0
 8002268:	2101      	movs	r1, #1
 800226a:	4867      	ldr	r0, [pc, #412]	; (8002408 <MX_FREERTOS_Init+0x21c>)
 800226c:	f008 fa64 	bl	800a738 <osTimerNew>
 8002270:	4603      	mov	r3, r0
 8002272:	4a66      	ldr	r2, [pc, #408]	; (800240c <MX_FREERTOS_Init+0x220>)
 8002274:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerOLED */
  NeedleInfoTimerOLEDHandle = osTimerNew(NeedleInfoTimerOLEDCallback, osTimerPeriodic, NULL, &NeedleInfoTimerOLED_attributes);
 8002276:	4b66      	ldr	r3, [pc, #408]	; (8002410 <MX_FREERTOS_Init+0x224>)
 8002278:	2200      	movs	r2, #0
 800227a:	2101      	movs	r1, #1
 800227c:	4865      	ldr	r0, [pc, #404]	; (8002414 <MX_FREERTOS_Init+0x228>)
 800227e:	f008 fa5b 	bl	800a738 <osTimerNew>
 8002282:	4603      	mov	r3, r0
 8002284:	4a64      	ldr	r2, [pc, #400]	; (8002418 <MX_FREERTOS_Init+0x22c>)
 8002286:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoTimerCommunication */
  SyringeInfoTimerCommunicationHandle = osTimerNew(SyringeInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &SyringeInfoTimerCommunication_attributes);
 8002288:	4b64      	ldr	r3, [pc, #400]	; (800241c <MX_FREERTOS_Init+0x230>)
 800228a:	2200      	movs	r2, #0
 800228c:	2101      	movs	r1, #1
 800228e:	4864      	ldr	r0, [pc, #400]	; (8002420 <MX_FREERTOS_Init+0x234>)
 8002290:	f008 fa52 	bl	800a738 <osTimerNew>
 8002294:	4603      	mov	r3, r0
 8002296:	4a63      	ldr	r2, [pc, #396]	; (8002424 <MX_FREERTOS_Init+0x238>)
 8002298:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerCommunication */
  NeedleInfoTimerCommunicationHandle = osTimerNew(NeedleInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &NeedleInfoTimerCommunication_attributes);
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <MX_FREERTOS_Init+0x23c>)
 800229c:	2200      	movs	r2, #0
 800229e:	2101      	movs	r1, #1
 80022a0:	4862      	ldr	r0, [pc, #392]	; (800242c <MX_FREERTOS_Init+0x240>)
 80022a2:	f008 fa49 	bl	800a738 <osTimerNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a61      	ldr	r2, [pc, #388]	; (8002430 <MX_FREERTOS_Init+0x244>)
 80022aa:	6013      	str	r3, [r2, #0]

  /* creation of IDLETimeTimer */
  IDLETimeTimerHandle = osTimerNew(IDLETimeTimerCallback, osTimerPeriodic, NULL, &IDLETimeTimer_attributes);
 80022ac:	4b61      	ldr	r3, [pc, #388]	; (8002434 <MX_FREERTOS_Init+0x248>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	2101      	movs	r1, #1
 80022b2:	4861      	ldr	r0, [pc, #388]	; (8002438 <MX_FREERTOS_Init+0x24c>)
 80022b4:	f008 fa40 	bl	800a738 <osTimerNew>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a60      	ldr	r2, [pc, #384]	; (800243c <MX_FREERTOS_Init+0x250>)
 80022bc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSyringeInfoOLED */
  QueueSyringeInfoOLEDHandle = osMessageQueueNew (8, sizeof(Syringe_info), &QueueSyringeInfoOLED_attributes);
 80022be:	4a60      	ldr	r2, [pc, #384]	; (8002440 <MX_FREERTOS_Init+0x254>)
 80022c0:	2104      	movs	r1, #4
 80022c2:	2008      	movs	r0, #8
 80022c4:	f008 fd9e 	bl	800ae04 <osMessageQueueNew>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <MX_FREERTOS_Init+0x258>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeInfoCommunication */
  QueueSyringeInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Syringe_info), &QueueSyringeInfoCommunication_attributes);
 80022ce:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <MX_FREERTOS_Init+0x25c>)
 80022d0:	2104      	movs	r1, #4
 80022d2:	2002      	movs	r0, #2
 80022d4:	f008 fd96 	bl	800ae04 <osMessageQueueNew>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a5c      	ldr	r2, [pc, #368]	; (800244c <MX_FREERTOS_Init+0x260>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoOLED */
  QueueNeedleInfoOLEDHandle = osMessageQueueNew (8, sizeof(Needle_info), &QueueNeedleInfoOLED_attributes);
 80022de:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <MX_FREERTOS_Init+0x264>)
 80022e0:	2104      	movs	r1, #4
 80022e2:	2008      	movs	r0, #8
 80022e4:	f008 fd8e 	bl	800ae04 <osMessageQueueNew>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <MX_FREERTOS_Init+0x268>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoCommunication */
  QueueNeedleInfoCommunicationHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoCommunication_attributes);
 80022ee:	4a5a      	ldr	r2, [pc, #360]	; (8002458 <MX_FREERTOS_Init+0x26c>)
 80022f0:	2104      	movs	r1, #4
 80022f2:	2004      	movs	r0, #4
 80022f4:	f008 fd86 	bl	800ae04 <osMessageQueueNew>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a58      	ldr	r2, [pc, #352]	; (800245c <MX_FREERTOS_Init+0x270>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* creation of QueueTemperatureCommunication */
  QueueTemperatureCommunicationHandle = osMessageQueueNew (4, sizeof(Temperature_info), &QueueTemperatureCommunication_attributes);
 80022fe:	4a58      	ldr	r2, [pc, #352]	; (8002460 <MX_FREERTOS_Init+0x274>)
 8002300:	2108      	movs	r1, #8
 8002302:	2004      	movs	r0, #4
 8002304:	f008 fd7e 	bl	800ae04 <osMessageQueueNew>
 8002308:	4603      	mov	r3, r0
 800230a:	4a56      	ldr	r2, [pc, #344]	; (8002464 <MX_FREERTOS_Init+0x278>)
 800230c:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleSetPointCommunication */
  QueueNeedleSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueNeedleSetPointCommunication_attributes);
 800230e:	4a56      	ldr	r2, [pc, #344]	; (8002468 <MX_FREERTOS_Init+0x27c>)
 8002310:	2102      	movs	r1, #2
 8002312:	2004      	movs	r0, #4
 8002314:	f008 fd76 	bl	800ae04 <osMessageQueueNew>
 8002318:	4603      	mov	r3, r0
 800231a:	4a54      	ldr	r2, [pc, #336]	; (800246c <MX_FREERTOS_Init+0x280>)
 800231c:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeSetPointCommunication */
  QueueSyringeSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueSyringeSetPointCommunication_attributes);
 800231e:	4a54      	ldr	r2, [pc, #336]	; (8002470 <MX_FREERTOS_Init+0x284>)
 8002320:	2102      	movs	r1, #2
 8002322:	2004      	movs	r0, #4
 8002324:	f008 fd6e 	bl	800ae04 <osMessageQueueNew>
 8002328:	4603      	mov	r3, r0
 800232a:	4a52      	ldr	r2, [pc, #328]	; (8002474 <MX_FREERTOS_Init+0x288>)
 800232c:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringePermission */
  QueueSyringePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueSyringePermission_attributes);
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <MX_FREERTOS_Init+0x28c>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f008 fd66 	bl	800ae04 <osMessageQueueNew>
 8002338:	4603      	mov	r3, r0
 800233a:	4a50      	ldr	r2, [pc, #320]	; (800247c <MX_FREERTOS_Init+0x290>)
 800233c:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedlePermission */
  QueueNeedlePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueNeedlePermission_attributes);
 800233e:	4a50      	ldr	r2, [pc, #320]	; (8002480 <MX_FREERTOS_Init+0x294>)
 8002340:	2101      	movs	r1, #1
 8002342:	2002      	movs	r0, #2
 8002344:	f008 fd5e 	bl	800ae04 <osMessageQueueNew>
 8002348:	4603      	mov	r3, r0
 800234a:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <MX_FREERTOS_Init+0x298>)
 800234c:	6013      	str	r3, [r2, #0]

  /* creation of QueueCommunicationPermission */
  QueueCommunicationPermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueCommunicationPermission_attributes);
 800234e:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <MX_FREERTOS_Init+0x29c>)
 8002350:	2101      	movs	r1, #1
 8002352:	2002      	movs	r0, #2
 8002354:	f008 fd56 	bl	800ae04 <osMessageQueueNew>
 8002358:	4603      	mov	r3, r0
 800235a:	4a4c      	ldr	r2, [pc, #304]	; (800248c <MX_FREERTOS_Init+0x2a0>)
 800235c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTast */
  HeartBeatTastHandle = osThreadNew(StartHeartBeatTast, NULL, &HeartBeatTast_attributes);
 800235e:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <MX_FREERTOS_Init+0x2a4>)
 8002360:	2100      	movs	r1, #0
 8002362:	484c      	ldr	r0, [pc, #304]	; (8002494 <MX_FREERTOS_Init+0x2a8>)
 8002364:	f008 f8be 	bl	800a4e4 <osThreadNew>
 8002368:	4603      	mov	r3, r0
 800236a:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <MX_FREERTOS_Init+0x2ac>)
 800236c:	6013      	str	r3, [r2, #0]

  /* creation of SyringeControlT */
  SyringeControlTHandle = osThreadNew(StartSyringeControlTask, NULL, &SyringeControlT_attributes);
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <MX_FREERTOS_Init+0x2b0>)
 8002370:	2100      	movs	r1, #0
 8002372:	484b      	ldr	r0, [pc, #300]	; (80024a0 <MX_FREERTOS_Init+0x2b4>)
 8002374:	f008 f8b6 	bl	800a4e4 <osThreadNew>
 8002378:	4603      	mov	r3, r0
 800237a:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <MX_FREERTOS_Init+0x2b8>)
 800237c:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 800237e:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <MX_FREERTOS_Init+0x2bc>)
 8002380:	2100      	movs	r1, #0
 8002382:	484a      	ldr	r0, [pc, #296]	; (80024ac <MX_FREERTOS_Init+0x2c0>)
 8002384:	f008 f8ae 	bl	800a4e4 <osThreadNew>
 8002388:	4603      	mov	r3, r0
 800238a:	4a49      	ldr	r2, [pc, #292]	; (80024b0 <MX_FREERTOS_Init+0x2c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* creation of NeedleControlTa */
  NeedleControlTaHandle = osThreadNew(StartNeedleControlTask, NULL, &NeedleControlTa_attributes);
 800238e:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <MX_FREERTOS_Init+0x2c8>)
 8002390:	2100      	movs	r1, #0
 8002392:	4849      	ldr	r0, [pc, #292]	; (80024b8 <MX_FREERTOS_Init+0x2cc>)
 8002394:	f008 f8a6 	bl	800a4e4 <osThreadNew>
 8002398:	4603      	mov	r3, r0
 800239a:	4a48      	ldr	r2, [pc, #288]	; (80024bc <MX_FREERTOS_Init+0x2d0>)
 800239c:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);
 800239e:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <MX_FREERTOS_Init+0x2d4>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4848      	ldr	r0, [pc, #288]	; (80024c4 <MX_FREERTOS_Init+0x2d8>)
 80023a4:	f008 f89e 	bl	800a4e4 <osThreadNew>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <MX_FREERTOS_Init+0x2dc>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureTask */
  TemperatureTaskHandle = osThreadNew(StartTemperatureTask, NULL, &TemperatureTask_attributes);
 80023ae:	4a47      	ldr	r2, [pc, #284]	; (80024cc <MX_FREERTOS_Init+0x2e0>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	4847      	ldr	r0, [pc, #284]	; (80024d0 <MX_FREERTOS_Init+0x2e4>)
 80023b4:	f008 f896 	bl	800a4e4 <osThreadNew>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <MX_FREERTOS_Init+0x2e8>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	0800f2b8 	.word	0x0800f2b8
 80023c8:	2000051c 	.word	0x2000051c
 80023cc:	0800f2c8 	.word	0x0800f2c8
 80023d0:	20000520 	.word	0x20000520
 80023d4:	0800f2d8 	.word	0x0800f2d8
 80023d8:	20000524 	.word	0x20000524
 80023dc:	0800f2e8 	.word	0x0800f2e8
 80023e0:	20000528 	.word	0x20000528
 80023e4:	0800f2f8 	.word	0x0800f2f8
 80023e8:	2000052c 	.word	0x2000052c
 80023ec:	0800f308 	.word	0x0800f308
 80023f0:	20000530 	.word	0x20000530
 80023f4:	0800f318 	.word	0x0800f318
 80023f8:	20000534 	.word	0x20000534
 80023fc:	0800f328 	.word	0x0800f328
 8002400:	20000538 	.word	0x20000538
 8002404:	0800f268 	.word	0x0800f268
 8002408:	08002b99 	.word	0x08002b99
 800240c:	20000508 	.word	0x20000508
 8002410:	0800f278 	.word	0x0800f278
 8002414:	08002bb9 	.word	0x08002bb9
 8002418:	2000050c 	.word	0x2000050c
 800241c:	0800f288 	.word	0x0800f288
 8002420:	08002bd9 	.word	0x08002bd9
 8002424:	20000510 	.word	0x20000510
 8002428:	0800f298 	.word	0x0800f298
 800242c:	08002bf9 	.word	0x08002bf9
 8002430:	20000514 	.word	0x20000514
 8002434:	0800f2a8 	.word	0x0800f2a8
 8002438:	08002c19 	.word	0x08002c19
 800243c:	20000518 	.word	0x20000518
 8002440:	0800f178 	.word	0x0800f178
 8002444:	200004e0 	.word	0x200004e0
 8002448:	0800f190 	.word	0x0800f190
 800244c:	200004e4 	.word	0x200004e4
 8002450:	0800f1a8 	.word	0x0800f1a8
 8002454:	200004e8 	.word	0x200004e8
 8002458:	0800f1c0 	.word	0x0800f1c0
 800245c:	200004ec 	.word	0x200004ec
 8002460:	0800f1d8 	.word	0x0800f1d8
 8002464:	200004f0 	.word	0x200004f0
 8002468:	0800f1f0 	.word	0x0800f1f0
 800246c:	200004f4 	.word	0x200004f4
 8002470:	0800f208 	.word	0x0800f208
 8002474:	200004f8 	.word	0x200004f8
 8002478:	0800f220 	.word	0x0800f220
 800247c:	200004fc 	.word	0x200004fc
 8002480:	0800f238 	.word	0x0800f238
 8002484:	20000500 	.word	0x20000500
 8002488:	0800f250 	.word	0x0800f250
 800248c:	20000504 	.word	0x20000504
 8002490:	0800f0a0 	.word	0x0800f0a0
 8002494:	080024d9 	.word	0x080024d9
 8002498:	200004c8 	.word	0x200004c8
 800249c:	0800f0c4 	.word	0x0800f0c4
 80024a0:	08002521 	.word	0x08002521
 80024a4:	200004cc 	.word	0x200004cc
 80024a8:	0800f0e8 	.word	0x0800f0e8
 80024ac:	080026c9 	.word	0x080026c9
 80024b0:	200004d0 	.word	0x200004d0
 80024b4:	0800f10c 	.word	0x0800f10c
 80024b8:	08002899 	.word	0x08002899
 80024bc:	200004d4 	.word	0x200004d4
 80024c0:	0800f130 	.word	0x0800f130
 80024c4:	080029c1 	.word	0x080029c1
 80024c8:	200004d8 	.word	0x200004d8
 80024cc:	0800f154 	.word	0x0800f154
 80024d0:	08002aa5 	.word	0x08002aa5
 80024d4:	200004dc 	.word	0x200004dc

080024d8 <StartHeartBeatTast>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTast */
void StartHeartBeatTast(void *argument)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTast */
	osTimerStart(IDLETimeTimerHandle, 1000);
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <StartHeartBeatTast+0x3c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024e8:	4618      	mov	r0, r3
 80024ea:	f008 f9a9 	bl	800a840 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80024ee:	2101      	movs	r1, #1
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <StartHeartBeatTast+0x40>)
 80024f2:	f003 fb88 	bl	8005c06 <HAL_GPIO_TogglePin>
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 80024f6:	f007 ffeb 	bl	800a4d0 <osKernelGetTickFreq>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <StartHeartBeatTast+0x44>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	4618      	mov	r0, r3
 800250e:	f008 f88f 	bl	800a630 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002512:	e7ec      	b.n	80024ee <StartHeartBeatTast+0x16>
 8002514:	20000518 	.word	0x20000518
 8002518:	40020400 	.word	0x40020400
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <StartSyringeControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSyringeControlTask */
void StartSyringeControlTask(void *argument)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b09f      	sub	sp, #124	; 0x7c
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSyringeControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Syringe = {	.NAME = "SYRINGE",
 8002528:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <StartSyringeControlTask+0x178>)
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	4611      	mov	r1, r2
 8002530:	2258      	movs	r2, #88	; 0x58
 8002532:	4618      	mov	r0, r3
 8002534:	f00c f92a 	bl	800e78c <memcpy>
	// Queue info
	//
	Syringe_info _Syringe_info;
	uint16_t syringe_setpoint_change;
	uint8_t _Permission;
	_Permission = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	737b      	strb	r3, [r7, #13]
	//
	// Initialization
	//
	Init_A4988(&Syringe); // Drive initialization
 800253c:	f107 0320 	add.w	r3, r7, #32
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fdfb 	bl	800113c <Init_A4988>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002546:	4b55      	ldr	r3, [pc, #340]	; (800269c <StartSyringeControlTask+0x17c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f04f 31ff 	mov.w	r1, #4294967295
 800254e:	4618      	mov	r0, r3
 8002550:	f008 fa50 	bl	800a9f4 <osMutexAcquire>
	VL6180X_Init(&Syringe_sensor, &hi2c4); // Sensor initialization
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4951      	ldr	r1, [pc, #324]	; (80026a0 <StartSyringeControlTask+0x180>)
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fc47 	bl	8001dee <VL6180X_Init>
	configureDefault_VL6180X(&Syringe_sensor); // Sensor initialization
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fdd3 	bl	8002110 <configureDefault_VL6180X>
	osMutexRelease(MutexI2C4Handle);
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <StartSyringeControlTask+0x17c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f008 fa9e 	bl	800aab0 <osMutexRelease>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002574:	4b49      	ldr	r3, [pc, #292]	; (800269c <StartSyringeControlTask+0x17c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	4618      	mov	r0, r3
 800257e:	f008 fa39 	bl	800a9f4 <osMutexAcquire>
	_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Initial measurement
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fe02 	bl	8002190 <readRangeSingleMillimeters_VL6180X>
 800258c:	4603      	mov	r3, r0
 800258e:	823b      	strh	r3, [r7, #16]
	_Syringe_info.Set_distance_syringe = _Syringe_info.MEASURE_Syringe;
 8002590:	8a3b      	ldrh	r3, [r7, #16]
 8002592:	827b      	strh	r3, [r7, #18]
	osMutexRelease(MutexI2C4Handle);
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <StartSyringeControlTask+0x17c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f008 fa89 	bl	800aab0 <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(SyringeInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <StartSyringeControlTask+0x184>)
 80025a0:	681c      	ldr	r4, [r3, #0]
 80025a2:	f007 ff95 	bl	800a4d0 <osKernelGetTickFreq>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f240 2226 	movw	r2, #550	; 0x226
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <StartSyringeControlTask+0x188>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	4619      	mov	r1, r3
 80025ba:	4620      	mov	r0, r4
 80025bc:	f008 f940 	bl	800a840 <osTimerStart>
	osTimerStart(SyringeInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 80025c0:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <StartSyringeControlTask+0x18c>)
 80025c2:	681c      	ldr	r4, [r3, #0]
 80025c4:	f007 ff84 	bl	800a4d0 <osKernelGetTickFreq>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f240 2226 	movw	r2, #550	; 0x226
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <StartSyringeControlTask+0x188>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	4619      	mov	r1, r3
 80025dc:	4620      	mov	r0, r4
 80025de:	f008 f92f 	bl	800a840 <osTimerStart>
  {
	  //
	  // Get data
	  //
	  // Get SetPoint
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
 80025e2:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <StartSyringeControlTask+0x190>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	f107 010e 	add.w	r1, r7, #14
 80025ea:	2300      	movs	r3, #0
 80025ec:	2200      	movs	r2, #0
 80025ee:	f008 fd03 	bl	800aff8 <osMessageQueueGet>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <StartSyringeControlTask+0xdc>
		  _Syringe_info.Set_distance_syringe = syringe_setpoint_change;
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	827b      	strh	r3, [r7, #18]
	  }
	  // Get permission
	  osMessageQueueGet(QueueSyringePermissionHandle, &_Permission, NULL, 0);
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <StartSyringeControlTask+0x194>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f107 010d 	add.w	r1, r7, #13
 8002604:	2300      	movs	r3, #0
 8002606:	2200      	movs	r2, #0
 8002608:	f008 fcf6 	bl	800aff8 <osMessageQueueGet>

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <StartSyringeControlTask+0x17c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	4618      	mov	r0, r3
 8002616:	f008 f9ed 	bl	800a9f4 <osMutexAcquire>
	  _Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fdb6 	bl	8002190 <readRangeSingleMillimeters_VL6180X>
 8002624:	4603      	mov	r3, r0
 8002626:	823b      	strh	r3, [r7, #16]
	  osMutexRelease(MutexI2C4Handle);
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <StartSyringeControlTask+0x17c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f008 fa3f 	bl	800aab0 <osMutexRelease>

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(SyringeInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <StartSyringeControlTask+0x198>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f008 fb25 	bl	800ac88 <osSemaphoreAcquire>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d108      	bne.n	8002656 <StartSyringeControlTask+0x136>
		  osMessageQueuePut(QueueSyringeInfoCommunicationHandle, &_Syringe_info, 0, osWaitForever);
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <StartSyringeControlTask+0x19c>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	f107 0110 	add.w	r1, r7, #16
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	2200      	movs	r2, #0
 8002652:	f008 fc5d 	bl	800af10 <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(SyringeInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <StartSyringeControlTask+0x1a0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f008 fb13 	bl	800ac88 <osSemaphoreAcquire>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d108      	bne.n	800267a <StartSyringeControlTask+0x15a>
	  		osMessageQueuePut(QueueSyringeInfoOLEDHandle, &_Syringe_info, 0, osWaitForever);
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <StartSyringeControlTask+0x1a4>)
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	f107 0110 	add.w	r1, r7, #16
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
 8002674:	2200      	movs	r2, #0
 8002676:	f008 fc4b 	bl	800af10 <osMessageQueuePut>
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 800267a:	f007 ff29 	bl	800a4d0 <osKernelGetTickFreq>
 800267e:	4603      	mov	r3, r0
 8002680:	22c8      	movs	r2, #200	; 0xc8
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <StartSyringeControlTask+0x188>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	4618      	mov	r0, r3
 8002690:	f007 ffce 	bl	800a630 <osDelay>
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
 8002694:	e7a5      	b.n	80025e2 <StartSyringeControlTask+0xc2>
 8002696:	bf00      	nop
 8002698:	0800ed34 	.word	0x0800ed34
 800269c:	20000524 	.word	0x20000524
 80026a0:	2000058c 	.word	0x2000058c
 80026a4:	20000508 	.word	0x20000508
 80026a8:	10624dd3 	.word	0x10624dd3
 80026ac:	20000510 	.word	0x20000510
 80026b0:	200004f8 	.word	0x200004f8
 80026b4:	200004fc 	.word	0x200004fc
 80026b8:	20000534 	.word	0x20000534
 80026bc:	200004e4 	.word	0x200004e4
 80026c0:	20000528 	.word	0x20000528
 80026c4:	200004e0 	.word	0x200004e0

080026c8 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	6078      	str	r0, [r7, #4]
	// Info data initialization
	//
	char Message_OLED[32]; // Message buffer
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	_Needle_info.Set_distance_needle = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	817b      	strh	r3, [r7, #10]
	_Needle_info.MEASURE_Needle = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	813b      	strh	r3, [r7, #8]
	_Syringe_info.Set_distance_syringe = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	81fb      	strh	r3, [r7, #14]
	_Syringe_info.MEASURE_Syringe = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	81bb      	strh	r3, [r7, #12]

	//
	// Screen initialization
	//
	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <StartOLEDTask+0x1a8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295
 80026e8:	4618      	mov	r0, r3
 80026ea:	f008 f983 	bl	800a9f4 <osMutexAcquire>
	SSD1306_Init(&hi2c4);
 80026ee:	4861      	ldr	r0, [pc, #388]	; (8002874 <StartOLEDTask+0x1ac>)
 80026f0:	f7ff fa88 	bl	8001c04 <SSD1306_Init>
	osMutexRelease(MutexI2C4Handle);
 80026f4:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <StartOLEDTask+0x1a8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f008 f9d9 	bl	800aab0 <osMutexRelease>

	GFX_SetFont(font_8x5);
 80026fe:	485e      	ldr	r0, [pc, #376]	; (8002878 <StartOLEDTask+0x1b0>)
 8002700:	f7fe ff20 	bl	8001544 <GFX_SetFont>
	GFX_SetFontSize(1);
 8002704:	2001      	movs	r0, #1
 8002706:	f7fe ff2d 	bl	8001564 <GFX_SetFontSize>

	SSD1306_Clear(BLACK);
 800270a:	2000      	movs	r0, #0
 800270c:	f7ff fa3e 	bl	8001b8c <SSD1306_Clear>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <StartOLEDTask+0x1a8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	4618      	mov	r0, r3
 800271a:	f008 f96b 	bl	800a9f4 <osMutexAcquire>
	SSD1306_Display();
 800271e:	f7ff fa53 	bl	8001bc8 <SSD1306_Display>
	osMutexRelease(MutexI2C4Handle);
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <StartOLEDTask+0x1a8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f008 f9c2 	bl	800aab0 <osMutexRelease>
  {
	  //
	  // Get data from queues
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <StartOLEDTask+0x1b4>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f107 010c 	add.w	r1, r7, #12
 8002734:	2300      	movs	r3, #0
 8002736:	2200      	movs	r2, #0
 8002738:	f008 fc5e 	bl	800aff8 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoOLEDHandle, &_Needle_info, NULL, 0);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <StartOLEDTask+0x1b8>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f107 0108 	add.w	r1, r7, #8
 8002744:	2300      	movs	r3, #0
 8002746:	2200      	movs	r2, #0
 8002748:	f008 fc56 	bl	800aff8 <osMessageQueueGet>

	  //
	  // Make message
	  //
	  SSD1306_Clear(BLACK);
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff fa1d 	bl	8001b8c <SSD1306_Clear>
	  sprintf(Message_OLED, "Needle position");
 8002752:	f107 0310 	add.w	r3, r7, #16
 8002756:	494b      	ldr	r1, [pc, #300]	; (8002884 <StartOLEDTask+0x1bc>)
 8002758:	4618      	mov	r0, r3
 800275a:	f002 faf5 	bl	8004d48 <sprintf_>
	  GFX_DrawString(20, 0, Message_OLED, WHITE, 0);
 800275e:	f107 0210 	add.w	r2, r7, #16
 8002762:	2300      	movs	r3, #0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2301      	movs	r3, #1
 8002768:	2100      	movs	r1, #0
 800276a:	2014      	movs	r0, #20
 800276c:	f7fe ffc8 	bl	8001700 <GFX_DrawString>
	  GFX_DrawLine(0, 9, 128, 9, WHITE);
 8002770:	2301      	movs	r3, #1
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2309      	movs	r3, #9
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	2109      	movs	r1, #9
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff f8d9 	bl	8001932 <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Needle_info.Set_distance_needle); //Set_distance_needle
 8002780:	897b      	ldrh	r3, [r7, #10]
 8002782:	461a      	mov	r2, r3
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	493f      	ldr	r1, [pc, #252]	; (8002888 <StartOLEDTask+0x1c0>)
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fadc 	bl	8004d48 <sprintf_>
	  GFX_DrawString(0, 12, Message_OLED, WHITE, 0);
 8002790:	f107 0210 	add.w	r2, r7, #16
 8002794:	2300      	movs	r3, #0
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2301      	movs	r3, #1
 800279a:	210c      	movs	r1, #12
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe ffaf 	bl	8001700 <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Needle_info.MEASURE_Needle); //MEASURE_Needle
 80027a2:	893b      	ldrh	r3, [r7, #8]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4938      	ldr	r1, [pc, #224]	; (800288c <StartOLEDTask+0x1c4>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 facb 	bl	8004d48 <sprintf_>
	  GFX_DrawString(0, 22, Message_OLED, WHITE, 0);
 80027b2:	f107 0210 	add.w	r2, r7, #16
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2301      	movs	r3, #1
 80027bc:	2116      	movs	r1, #22
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe ff9e 	bl	8001700 <GFX_DrawString>
	  sprintf(Message_OLED, "Syringe position");
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4931      	ldr	r1, [pc, #196]	; (8002890 <StartOLEDTask+0x1c8>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fabc 	bl	8004d48 <sprintf_>
	  GFX_DrawString(15, 32, Message_OLED, WHITE, 0);
 80027d0:	f107 0210 	add.w	r2, r7, #16
 80027d4:	2300      	movs	r3, #0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	2120      	movs	r1, #32
 80027dc:	200f      	movs	r0, #15
 80027de:	f7fe ff8f 	bl	8001700 <GFX_DrawString>
	  GFX_DrawLine(0, 41, 128, 41, WHITE);
 80027e2:	2301      	movs	r3, #1
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2329      	movs	r3, #41	; 0x29
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	2129      	movs	r1, #41	; 0x29
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7ff f8a0 	bl	8001932 <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Syringe_info.Set_distance_syringe); //Set_distance_syringe
 80027f2:	89fb      	ldrh	r3, [r7, #14]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f107 0310 	add.w	r3, r7, #16
 80027fa:	4923      	ldr	r1, [pc, #140]	; (8002888 <StartOLEDTask+0x1c0>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 faa3 	bl	8004d48 <sprintf_>
	  GFX_DrawString(0, 44, Message_OLED, WHITE, 0);
 8002802:	f107 0210 	add.w	r2, r7, #16
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe ff76 	bl	8001700 <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Syringe_info.MEASURE_Syringe); //MEASURE_Syringe
 8002814:	89bb      	ldrh	r3, [r7, #12]
 8002816:	461a      	mov	r2, r3
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	491b      	ldr	r1, [pc, #108]	; (800288c <StartOLEDTask+0x1c4>)
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fa92 	bl	8004d48 <sprintf_>
	  GFX_DrawString(0, 54, Message_OLED, WHITE, 0);
 8002824:	f107 0210 	add.w	r2, r7, #16
 8002828:	2300      	movs	r3, #0
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2301      	movs	r3, #1
 800282e:	2136      	movs	r1, #54	; 0x36
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe ff65 	bl	8001700 <GFX_DrawString>

	  //
	  // Display
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <StartOLEDTask+0x1a8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 31ff 	mov.w	r1, #4294967295
 800283e:	4618      	mov	r0, r3
 8002840:	f008 f8d8 	bl	800a9f4 <osMutexAcquire>
	  SSD1306_Display();
 8002844:	f7ff f9c0 	bl	8001bc8 <SSD1306_Display>
	  osMutexRelease(MutexI2C4Handle);
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <StartOLEDTask+0x1a8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f008 f92f 	bl	800aab0 <osMutexRelease>

	  //
	  // Time interval
	  //
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
 8002852:	f007 fe3d 	bl	800a4d0 <osKernelGetTickFreq>
 8002856:	4603      	mov	r3, r0
 8002858:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <StartOLEDTask+0x1cc>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4618      	mov	r0, r3
 800286a:	f007 fee1 	bl	800a630 <osDelay>
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 800286e:	e75d      	b.n	800272c <StartOLEDTask+0x64>
 8002870:	20000524 	.word	0x20000524
 8002874:	2000058c 	.word	0x2000058c
 8002878:	0800eec0 	.word	0x0800eec0
 800287c:	200004e0 	.word	0x200004e0
 8002880:	200004e8 	.word	0x200004e8
 8002884:	0800ed8c 	.word	0x0800ed8c
 8002888:	0800ed9c 	.word	0x0800ed9c
 800288c:	0800eda8 	.word	0x0800eda8
 8002890:	0800edb8 	.word	0x0800edb8
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <StartNeedleControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNeedleControlTask */
void StartNeedleControlTask(void *argument)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b09b      	sub	sp, #108	; 0x6c
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNeedleControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Needle = {	.NAME = "NEEDLE",
 80028a0:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <StartNeedleControlTask+0x100>)
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	4611      	mov	r1, r2
 80028a8:	2258      	movs	r2, #88	; 0x58
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00b ff6e 	bl	800e78c <memcpy>
	// Queue info
	//
	Needle_info _Needle_info;
	uint16_t needle_setpoint_change;
	uint8_t _Permission;
	_Needle_info.MEASURE_Needle = 10;
 80028b0:	230a      	movs	r3, #10
 80028b2:	81bb      	strh	r3, [r7, #12]
	_Needle_info.Set_distance_needle = 20;
 80028b4:	2314      	movs	r3, #20
 80028b6:	81fb      	strh	r3, [r7, #14]
	_Permission = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	727b      	strb	r3, [r7, #9]
	//
	// Initialization
	//
	Init_A4988(&Needle); // Drive initialization
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fc3b 	bl	800113c <Init_A4988>
//	osMutexRelease(MutexI2C2Handle);

	//
	// Timers
	//
	osTimerStart(NeedleInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <StartNeedleControlTask+0x104>)
 80028c8:	681c      	ldr	r4, [r3, #0]
 80028ca:	f007 fe01 	bl	800a4d0 <osKernelGetTickFreq>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f240 2226 	movw	r2, #550	; 0x226
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <StartNeedleControlTask+0x108>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f007 ffac 	bl	800a840 <osTimerStart>
	osTimerStart(NeedleInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <StartNeedleControlTask+0x10c>)
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	f007 fdf0 	bl	800a4d0 <osKernelGetTickFreq>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f240 2226 	movw	r2, #550	; 0x226
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <StartNeedleControlTask+0x108>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	4619      	mov	r1, r3
 8002904:	4620      	mov	r0, r4
 8002906:	f007 ff9b 	bl	800a840 <osTimerStart>
  {
	  //
	  // Get Data
	  //
	  // Get set point
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <StartNeedleControlTask+0x110>)
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	f107 010a 	add.w	r1, r7, #10
 8002912:	2300      	movs	r3, #0
 8002914:	2200      	movs	r2, #0
 8002916:	f008 fb6f 	bl	800aff8 <osMessageQueueGet>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <StartNeedleControlTask+0x8c>
		  _Needle_info.Set_distance_needle = needle_setpoint_change;
 8002920:	897b      	ldrh	r3, [r7, #10]
 8002922:	81fb      	strh	r3, [r7, #14]
	  }
	  // Get permission
	  osMessageQueueGet(QueueNeedlePermissionHandle, &_Permission, NULL, 0);
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <StartNeedleControlTask+0x114>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	f107 0109 	add.w	r1, r7, #9
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	f008 fb62 	bl	800aff8 <osMessageQueueGet>
//	  osMutexRelease(MutexI2C2Handle);

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(NeedleInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <StartNeedleControlTask+0x118>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f008 f9a4 	bl	800ac88 <osSemaphoreAcquire>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d108      	bne.n	8002958 <StartNeedleControlTask+0xc0>
		  osMessageQueuePut(QueueNeedleInfoCommunicationHandle, &_Needle_info, 0, osWaitForever);
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <StartNeedleControlTask+0x11c>)
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	f107 010c 	add.w	r1, r7, #12
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	2200      	movs	r2, #0
 8002954:	f008 fadc 	bl	800af10 <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(NeedleInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <StartNeedleControlTask+0x120>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f008 f992 	bl	800ac88 <osSemaphoreAcquire>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <StartNeedleControlTask+0xe4>
		  osMessageQueuePut(QueueNeedleInfoOLEDHandle, &_Needle_info, 0, osWaitForever);
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <StartNeedleControlTask+0x124>)
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f107 010c 	add.w	r1, r7, #12
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	2200      	movs	r2, #0
 8002978:	f008 faca 	bl	800af10 <osMessageQueuePut>
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 800297c:	f007 fda8 	bl	800a4d0 <osKernelGetTickFreq>
 8002980:	4603      	mov	r3, r0
 8002982:	22c8      	movs	r2, #200	; 0xc8
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <StartNeedleControlTask+0x108>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	4618      	mov	r0, r3
 8002992:	f007 fe4d 	bl	800a630 <osDelay>
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
 8002996:	e7b8      	b.n	800290a <StartNeedleControlTask+0x72>
 8002998:	0800edcc 	.word	0x0800edcc
 800299c:	2000050c 	.word	0x2000050c
 80029a0:	10624dd3 	.word	0x10624dd3
 80029a4:	20000514 	.word	0x20000514
 80029a8:	200004f4 	.word	0x200004f4
 80029ac:	20000500 	.word	0x20000500
 80029b0:	20000538 	.word	0x20000538
 80029b4:	200004ec 	.word	0x200004ec
 80029b8:	2000052c 	.word	0x2000052c
 80029bc:	200004e8 	.word	0x200004e8

080029c0 <StartCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
 80029c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c4:	b08e      	sub	sp, #56	; 0x38
 80029c6:	af06      	add	r7, sp, #24
 80029c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicationTask */
	//
	// Time interval
	//
	uint32_t DelayTick = osKernelGetTickCount();
 80029ca:	f007 fd59 	bl	800a480 <osKernelGetTickCount>
 80029ce:	61f8      	str	r0, [r7, #28]

	//
	//Receive data
	//
	HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 80029d0:	2204      	movs	r2, #4
 80029d2:	492d      	ldr	r1, [pc, #180]	; (8002a88 <StartCommunicationTask+0xc8>)
 80029d4:	482d      	ldr	r0, [pc, #180]	; (8002a8c <StartCommunicationTask+0xcc>)
 80029d6:	f006 fae2 	bl	8008f9e <HAL_UART_Receive_IT>
	//
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	Temperature_info _Temperature_info;
	uint8_t _Permission;
	_Needle_info.Set_distance_needle = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	82fb      	strh	r3, [r7, #22]
	_Needle_info.MEASURE_Needle = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	82bb      	strh	r3, [r7, #20]
	_Syringe_info.Set_distance_syringe = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	837b      	strh	r3, [r7, #26]
	_Syringe_info.MEASURE_Syringe = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	833b      	strh	r3, [r7, #24]
	_Temperature_info.Fan_info = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	743b      	strb	r3, [r7, #16]
	_Temperature_info.Temperature = 0;
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
	_Permission = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	72fb      	strb	r3, [r7, #11]
  {
	  //
	  // Get data
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <StartCommunicationTask+0xd0>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	f107 0118 	add.w	r1, r7, #24
 8002a00:	2300      	movs	r3, #0
 8002a02:	2200      	movs	r2, #0
 8002a04:	f008 faf8 	bl	800aff8 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoCommunicationHandle, &_Needle_info, NULL, 0);
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <StartCommunicationTask+0xd4>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	f107 0114 	add.w	r1, r7, #20
 8002a10:	2300      	movs	r3, #0
 8002a12:	2200      	movs	r2, #0
 8002a14:	f008 faf0 	bl	800aff8 <osMessageQueueGet>
	  // Get data from Temperature info queue
	  osMessageQueueGet(QueueTemperatureCommunicationHandle, &_Temperature_info, NULL, 0);
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <StartCommunicationTask+0xd8>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	f107 010c 	add.w	r1, r7, #12
 8002a20:	2300      	movs	r3, #0
 8002a22:	2200      	movs	r2, #0
 8002a24:	f008 fae8 	bl	800aff8 <osMessageQueueGet>
	  // Get permission
	  osMessageQueueGet(QueueCommunicationPermissionHandle, &_Permission, NULL, 0);
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <StartCommunicationTask+0xdc>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	f107 010b 	add.w	r1, r7, #11
 8002a30:	2300      	movs	r3, #0
 8002a32:	2200      	movs	r2, #0
 8002a34:	f008 fae0 	bl	800aff8 <osMessageQueueGet>

	  //
	  // Send message
	  //
	  if(_Permission == 1){
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d11b      	bne.n	8002a76 <StartCommunicationTask+0xb6>
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002a3e:	8abb      	ldrh	r3, [r7, #20]
 8002a40:	461d      	mov	r5, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002a42:	8b3b      	ldrh	r3, [r7, #24]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002a44:	461e      	mov	r6, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002a46:	8afb      	ldrh	r3, [r7, #22]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002a48:	4698      	mov	r8, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002a4a:	8b7b      	ldrh	r3, [r7, #26]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002a4c:	461c      	mov	r4, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002a4e:	68fb      	ldr	r3, [r7, #12]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fd41 	bl	80004d8 <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
				  _Temperature_info.Fan_info,0);
 8002a5a:	7c39      	ldrb	r1, [r7, #16]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	2100      	movs	r1, #0
 8002a60:	9105      	str	r1, [sp, #20]
 8002a62:	9004      	str	r0, [sp, #16]
 8002a64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a68:	9400      	str	r4, [sp, #0]
 8002a6a:	4643      	mov	r3, r8
 8002a6c:	4632      	mov	r2, r6
 8002a6e:	4629      	mov	r1, r5
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <StartCommunicationTask+0xe0>)
 8002a72:	f002 f94d 	bl	8004d10 <printf_>
	  }

	  //
	  // Time interval
	  //
	  DelayTick += 500;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a7c:	61fb      	str	r3, [r7, #28]
	  osDelayUntil(DelayTick);
 8002a7e:	69f8      	ldr	r0, [r7, #28]
 8002a80:	f007 fe04 	bl	800a68c <osDelayUntil>
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 8002a84:	e7b8      	b.n	80029f8 <StartCommunicationTask+0x38>
 8002a86:	bf00      	nop
 8002a88:	200004c0 	.word	0x200004c0
 8002a8c:	20000754 	.word	0x20000754
 8002a90:	200004e4 	.word	0x200004e4
 8002a94:	200004ec 	.word	0x200004ec
 8002a98:	200004f0 	.word	0x200004f0
 8002a9c:	20000504 	.word	0x20000504
 8002aa0:	0800ee24 	.word	0x0800ee24

08002aa4 <StartTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperatureTask */
void StartTemperatureTask(void *argument)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperatureTask */
	//
	// Info data initialization
	//
	Temperature_info _Temperature_info;
	_Temperature_info.Fan_info = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	733b      	strb	r3, [r7, #12]
	_Temperature_info.Temperature = 10;
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <StartTemperatureTask+0xdc>)
 8002ab2:	60bb      	str	r3, [r7, #8]

	//
	// Initialize the sensor
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <StartTemperatureTask+0xe0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	4618      	mov	r0, r3
 8002abe:	f007 ff99 	bl	800a9f4 <osMutexAcquire>
	BMP280_Init(&hi2c2, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	482f      	ldr	r0, [pc, #188]	; (8002b88 <StartTemperatureTask+0xe4>)
 8002aca:	f7fe fbf1 	bl	80012b0 <BMP280_Init>
	osMutexRelease(MutexI2C2Handle);
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <StartTemperatureTask+0xe0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f007 ffec 	bl	800aab0 <osMutexRelease>

	//
	// Initial measurement
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <StartTemperatureTask+0xe0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f007 ff87 	bl	800a9f4 <osMutexAcquire>
	_Temperature_info.Temperature = BMP280_ReadTemperature();
 8002ae6:	f7fe fca1 	bl	800142c <BMP280_ReadTemperature>
 8002aea:	eef0 7a40 	vmov.f32	s15, s0
 8002aee:	edc7 7a02 	vstr	s15, [r7, #8]
	osMutexRelease(MutexI2C2Handle);
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <StartTemperatureTask+0xe0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f007 ffda 	bl	800aab0 <osMutexRelease>
  for(;;)
  {
	  //
	  // Measurement
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <StartTemperatureTask+0xe0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	4618      	mov	r0, r3
 8002b06:	f007 ff75 	bl	800a9f4 <osMutexAcquire>
	  _Temperature_info.Temperature = BMP280_ReadTemperature();
 8002b0a:	f7fe fc8f 	bl	800142c <BMP280_ReadTemperature>
 8002b0e:	eef0 7a40 	vmov.f32	s15, s0
 8002b12:	edc7 7a02 	vstr	s15, [r7, #8]
	  osMutexRelease(MutexI2C2Handle);
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <StartTemperatureTask+0xe0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f007 ffc8 	bl	800aab0 <osMutexRelease>
	  	  	  	  /////////////////////////////////////////////////////////////
	  	  	  	  printf("Temp: %.2f\n\r",_Temperature_info.Temperature); // TODO delete
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fcd8 	bl	80004d8 <__aeabi_f2d>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4817      	ldr	r0, [pc, #92]	; (8002b8c <StartTemperatureTask+0xe8>)
 8002b2e:	f002 f8ef 	bl	8004d10 <printf_>
	  	  	  	  /////////////////////////////////////////////////////////////
	  //
	  // Fan functioning
	  //
	  if (_Temperature_info.Temperature >= 31.0) {
 8002b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b36:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	db02      	blt.n	8002b4a <StartTemperatureTask+0xa6>
		//TODO Turn on fan
		  _Temperature_info.Fan_info = 1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	733b      	strb	r3, [r7, #12]
 8002b48:	e001      	b.n	8002b4e <StartTemperatureTask+0xaa>
	  }else{
		  // TODO turn OFF fan
		  _Temperature_info.Fan_info = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	733b      	strb	r3, [r7, #12]
	  }

	  //
	  // Send to queue
	  //
	  osMessageQueuePut(QueueTemperatureCommunicationHandle, &_Temperature_info, 0, osWaitForever);
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <StartTemperatureTask+0xec>)
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	f107 0108 	add.w	r1, r7, #8
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f008 f9d8 	bl	800af10 <osMessageQueuePut>

	  //
	  // Time interval
	  //
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8002b60:	f007 fcb6 	bl	800a4d0 <osKernelGetTickFreq>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <StartTemperatureTask+0xf0>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	4618      	mov	r0, r3
 8002b78:	f007 fd5a 	bl	800a630 <osDelay>
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002b7c:	e7be      	b.n	8002afc <StartTemperatureTask+0x58>
 8002b7e:	bf00      	nop
 8002b80:	41200000 	.word	0x41200000
 8002b84:	20000520 	.word	0x20000520
 8002b88:	20000540 	.word	0x20000540
 8002b8c:	0800ee64 	.word	0x0800ee64
 8002b90:	200004f0 	.word	0x200004f0
 8002b94:	10624dd3 	.word	0x10624dd3

08002b98 <SyringeInfoTimerOLEDCallback>:
  /* USER CODE END StartTemperatureTask */
}

/* SyringeInfoTimerOLEDCallback function */
void SyringeInfoTimerOLEDCallback(void *argument)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerOLEDCallback */
	osSemaphoreRelease(SyringeInfoOLEDSemaphoreHandle);
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SyringeInfoTimerOLEDCallback+0x1c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f008 f8d5 	bl	800ad54 <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerOLEDCallback */
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000528 	.word	0x20000528

08002bb8 <NeedleInfoTimerOLEDCallback>:

/* NeedleInfoTimerOLEDCallback function */
void NeedleInfoTimerOLEDCallback(void *argument)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerOLEDCallback */
	osSemaphoreRelease(NeedleInfoOLEDSemaphoreHandle);
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <NeedleInfoTimerOLEDCallback+0x1c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f008 f8c5 	bl	800ad54 <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerOLEDCallback */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000052c 	.word	0x2000052c

08002bd8 <SyringeInfoTimerCommunicationCallback>:

/* SyringeInfoTimerCommunicationCallback function */
void SyringeInfoTimerCommunicationCallback(void *argument)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerCommunicationCallback */
	osSemaphoreRelease(SyringeInfoCommunicationSemaphoreHandle);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SyringeInfoTimerCommunicationCallback+0x1c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f008 f8b5 	bl	800ad54 <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerCommunicationCallback */
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000534 	.word	0x20000534

08002bf8 <NeedleInfoTimerCommunicationCallback>:

/* NeedleInfoTimerCommunicationCallback function */
void NeedleInfoTimerCommunicationCallback(void *argument)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerCommunicationCallback */
	osSemaphoreRelease(NeedleInfoCommunicationSemaphoreHandle);
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <NeedleInfoTimerCommunicationCallback+0x1c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f008 f8a5 	bl	800ad54 <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerCommunicationCallback */
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000538 	.word	0x20000538

08002c18 <IDLETimeTimerCallback>:

/* IDLETimeTimerCallback function */
void IDLETimeTimerCallback(void *argument)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IDLETimeTimerCallback */
	uint32_t IdleTime;
	IdleTime = (IdleTicks * 100) / 1000;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <IDLETimeTimerCallback+0x34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <IDLETimeTimerCallback+0x38>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	60fb      	str	r3, [r7, #12]
	IdleTicks = 0;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <IDLETimeTimerCallback+0x34>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
	printf("IdleTime: %d\n\r",IdleTime); // TODO delete
 8002c3a:	68f9      	ldr	r1, [r7, #12]
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <IDLETimeTimerCallback+0x3c>)
 8002c3e:	f002 f867 	bl	8004d10 <printf_>
  /* USER CODE END IDLETimeTimerCallback */
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004c4 	.word	0x200004c4
 8002c50:	10624dd3 	.word	0x10624dd3
 8002c54:	0800ee74 	.word	0x0800ee74

08002c58 <_putchar>:
/* USER CODE BEGIN Application */
//
// Printf function implementation
//
void _putchar(char character)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <_putchar+0x38>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f007 fec2 	bl	800a9f4 <osMutexAcquire>
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 1000);
 8002c70:	1df9      	adds	r1, r7, #7
 8002c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c76:	2201      	movs	r2, #1
 8002c78:	4806      	ldr	r0, [pc, #24]	; (8002c94 <_putchar+0x3c>)
 8002c7a:	f006 f8fd 	bl	8008e78 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <_putchar+0x38>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f007 ff14 	bl	800aab0 <osMutexRelease>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000051c 	.word	0x2000051c
 8002c94:	20000754 	.word	0x20000754

08002c98 <HAL_UART_RxCpltCallback>:
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_UART_RxCpltCallback+0x150>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f040 809a 	bne.w	8002de0 <HAL_UART_RxCpltCallback+0x148>
	{
		//
		// Start of handling message
		//
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cb0:	484e      	ldr	r0, [pc, #312]	; (8002dec <HAL_UART_RxCpltCallback+0x154>)
 8002cb2:	f002 ffa8 	bl	8005c06 <HAL_GPIO_TogglePin>

		//
		// Handling the message
		//
		if(Buffor_Rx_USART[0] == 'N'){ // Needle set position
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b4e      	cmp	r3, #78	; 0x4e
 8002cbc:	d119      	bne.n	8002cf2 <HAL_UART_RxCpltCallback+0x5a>
			uint16_t needle_set_point_change;
			char needle_set_point_change_str[3];
			// Convert to uint16_t
			needle_set_point_change_str[0] = Buffor_Rx_USART[1];
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	763b      	strb	r3, [r7, #24]
			needle_set_point_change_str[1] = Buffor_Rx_USART[2];
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002cc6:	789b      	ldrb	r3, [r3, #2]
 8002cc8:	767b      	strb	r3, [r7, #25]
			needle_set_point_change_str[2] = Buffor_Rx_USART[3];
 8002cca:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002ccc:	78db      	ldrb	r3, [r3, #3]
 8002cce:	76bb      	strb	r3, [r7, #26]
			needle_set_point_change =  (uint16_t)atoi(needle_set_point_change_str);
 8002cd0:	f107 0318 	add.w	r3, r7, #24
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00b fd29 	bl	800e72c <atoi>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	83fb      	strh	r3, [r7, #30]
			// Send to queue
			osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 8002ce0:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_UART_RxCpltCallback+0x15c>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	f107 011e 	add.w	r1, r7, #30
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2200      	movs	r2, #0
 8002cec:	f008 f910 	bl	800af10 <osMessageQueuePut>
 8002cf0:	e071      	b.n	8002dd6 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'S') { // Syringe set position
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b53      	cmp	r3, #83	; 0x53
 8002cf8:	d119      	bne.n	8002d2e <HAL_UART_RxCpltCallback+0x96>
			uint16_t syringe_set_point_change;
			char syringe_set_point_change_str[3];
			// Convert to uint16_t
			syringe_set_point_change_str[0] = Buffor_Rx_USART[1];
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	743b      	strb	r3, [r7, #16]
			syringe_set_point_change_str[1] = Buffor_Rx_USART[2];
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002d02:	789b      	ldrb	r3, [r3, #2]
 8002d04:	747b      	strb	r3, [r7, #17]
			syringe_set_point_change_str[2] = Buffor_Rx_USART[3];
 8002d06:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002d08:	78db      	ldrb	r3, [r3, #3]
 8002d0a:	74bb      	strb	r3, [r7, #18]
			syringe_set_point_change =  (uint16_t)atoi(syringe_set_point_change_str);
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	4618      	mov	r0, r3
 8002d12:	f00b fd0b 	bl	800e72c <atoi>
 8002d16:	4603      	mov	r3, r0
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	82fb      	strh	r3, [r7, #22]
			// Send to queue
			osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_UART_RxCpltCallback+0x160>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	f107 0116 	add.w	r1, r7, #22
 8002d24:	2300      	movs	r3, #0
 8002d26:	2200      	movs	r2, #0
 8002d28:	f008 f8f2 	bl	800af10 <osMessageQueuePut>
 8002d2c:	e053      	b.n	8002dd6 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'T') { // Test connection
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b54      	cmp	r3, #84	; 0x54
 8002d34:	d103      	bne.n	8002d3e <HAL_UART_RxCpltCallback+0xa6>
			printf("T");
 8002d36:	4831      	ldr	r0, [pc, #196]	; (8002dfc <HAL_UART_RxCpltCallback+0x164>)
 8002d38:	f001 ffea 	bl	8004d10 <printf_>
 8002d3c:	e04b      	b.n	8002dd6 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'O') { // Start
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b4f      	cmp	r3, #79	; 0x4f
 8002d44:	d11a      	bne.n	8002d7c <HAL_UART_RxCpltCallback+0xe4>
			uint8_t permission = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_UART_RxCpltCallback+0x168>)
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f107 010f 	add.w	r1, r7, #15
 8002d52:	2300      	movs	r3, #0
 8002d54:	2200      	movs	r2, #0
 8002d56:	f008 f8db 	bl	800af10 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_UART_RxCpltCallback+0x16c>)
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	f107 010f 	add.w	r1, r7, #15
 8002d62:	2300      	movs	r3, #0
 8002d64:	2200      	movs	r2, #0
 8002d66:	f008 f8d3 	bl	800af10 <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002d6a:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_UART_RxCpltCallback+0x170>)
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	f107 010f 	add.w	r1, r7, #15
 8002d72:	2300      	movs	r3, #0
 8002d74:	2200      	movs	r2, #0
 8002d76:	f008 f8cb 	bl	800af10 <osMessageQueuePut>
 8002d7a:	e02c      	b.n	8002dd6 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'E') { // STOP
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b45      	cmp	r3, #69	; 0x45
 8002d82:	d11a      	bne.n	8002dba <HAL_UART_RxCpltCallback+0x122>
			uint8_t permission = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73bb      	strb	r3, [r7, #14]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_UART_RxCpltCallback+0x168>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	f107 010e 	add.w	r1, r7, #14
 8002d90:	2300      	movs	r3, #0
 8002d92:	2200      	movs	r2, #0
 8002d94:	f008 f8bc 	bl	800af10 <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_UART_RxCpltCallback+0x16c>)
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	f107 010e 	add.w	r1, r7, #14
 8002da0:	2300      	movs	r3, #0
 8002da2:	2200      	movs	r2, #0
 8002da4:	f008 f8b4 	bl	800af10 <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_UART_RxCpltCallback+0x170>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f107 010e 	add.w	r1, r7, #14
 8002db0:	2300      	movs	r3, #0
 8002db2:	2200      	movs	r2, #0
 8002db4:	f008 f8ac 	bl	800af10 <osMessageQueuePut>
 8002db8:	e00d      	b.n	8002dd6 <HAL_UART_RxCpltCallback+0x13e>
		}else if (Buffor_Rx_USART[0] == 'R') {
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b52      	cmp	r3, #82	; 0x52
 8002dc0:	d109      	bne.n	8002dd6 <HAL_UART_RxCpltCallback+0x13e>
			uint8_t permission = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	737b      	strb	r3, [r7, #13]
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_UART_RxCpltCallback+0x170>)
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	f107 010d 	add.w	r1, r7, #13
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f008 f89d 	bl	800af10 <osMessageQueuePut>
		}

		//
		// Listening setup
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4905      	ldr	r1, [pc, #20]	; (8002df0 <HAL_UART_RxCpltCallback+0x158>)
 8002dda:	480c      	ldr	r0, [pc, #48]	; (8002e0c <HAL_UART_RxCpltCallback+0x174>)
 8002ddc:	f006 f8df 	bl	8008f9e <HAL_UART_Receive_IT>
	}
}
 8002de0:	bf00      	nop
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40004800 	.word	0x40004800
 8002dec:	40020400 	.word	0x40020400
 8002df0:	200004c0 	.word	0x200004c0
 8002df4:	200004f4 	.word	0x200004f4
 8002df8:	200004f8 	.word	0x200004f8
 8002dfc:	0800ee84 	.word	0x0800ee84
 8002e00:	20000500 	.word	0x20000500
 8002e04:	200004fc 	.word	0x200004fc
 8002e08:	20000504 	.word	0x20000504
 8002e0c:	20000754 	.word	0x20000754

08002e10 <HAL_GPIO_EXTI_Callback>:
//
// Safety interlock (limit switch)
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_STOP_SYRINGE_1_Pin){ // END STOP Syringe Near Drive
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e20:	d10a      	bne.n	8002e38 <HAL_GPIO_EXTI_Callback+0x28>
		uint16_t syringe_set_point_change = 120; // TODO change the stop point
 8002e22:	2378      	movs	r3, #120	; 0x78
 8002e24:	81fb      	strh	r3, [r7, #14]
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_GPIO_EXTI_Callback+0x88>)
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f107 010e 	add.w	r1, r7, #14
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2200      	movs	r2, #0
 8002e32:	f008 f86d 	bl	800af10 <osMessageQueuePut>
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
		uint16_t needle_set_point_change = 20; // TODO change the stop point
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}
}
 8002e36:	e02b      	b.n	8002e90 <HAL_GPIO_EXTI_Callback+0x80>
	}else if (GPIO_Pin == END_STOP_SYRINGE_2_Pin){ // END STOP Syringe Near Syringe
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3e:	d10a      	bne.n	8002e56 <HAL_GPIO_EXTI_Callback+0x46>
		uint16_t syringe_set_point_change = 20; // TODO change the stop point
 8002e40:	2314      	movs	r3, #20
 8002e42:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_GPIO_EXTI_Callback+0x88>)
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	f107 010c 	add.w	r1, r7, #12
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f008 f85e 	bl	800af10 <osMessageQueuePut>
}
 8002e54:	e01c      	b.n	8002e90 <HAL_GPIO_EXTI_Callback+0x80>
	}else if(GPIO_Pin == END_STOP_NEEDLE_1_Pin){ // END STOP Needle Near Drive
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d10a      	bne.n	8002e74 <HAL_GPIO_EXTI_Callback+0x64>
		uint16_t needle_set_point_change = 120; // TODO change the stop point
 8002e5e:	2378      	movs	r3, #120	; 0x78
 8002e60:	817b      	strh	r3, [r7, #10]
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	f107 010a 	add.w	r1, r7, #10
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f008 f84f 	bl	800af10 <osMessageQueuePut>
}
 8002e72:	e00d      	b.n	8002e90 <HAL_GPIO_EXTI_Callback+0x80>
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d109      	bne.n	8002e90 <HAL_GPIO_EXTI_Callback+0x80>
		uint16_t needle_set_point_change = 20; // TODO change the stop point
 8002e7c:	2314      	movs	r3, #20
 8002e7e:	813b      	strh	r3, [r7, #8]
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	f107 0108 	add.w	r1, r7, #8
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f008 f840 	bl	800af10 <osMessageQueuePut>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	200004f8 	.word	0x200004f8
 8002e9c:	200004f4 	.word	0x200004f4

08002ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb6:	4b81      	ldr	r3, [pc, #516]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b7e      	ldr	r3, [pc, #504]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ece:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a7a      	ldr	r2, [pc, #488]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002ed4:	f043 0320 	orr.w	r3, r3, #32
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b78      	ldr	r3, [pc, #480]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ee6:	4b75      	ldr	r3, [pc, #468]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a74      	ldr	r2, [pc, #464]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b72      	ldr	r3, [pc, #456]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a6e      	ldr	r2, [pc, #440]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	4b69      	ldr	r3, [pc, #420]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a68      	ldr	r2, [pc, #416]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b66      	ldr	r3, [pc, #408]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a62      	ldr	r2, [pc, #392]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f34:	f043 0310 	orr.w	r3, r3, #16
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b60      	ldr	r3, [pc, #384]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f46:	4b5d      	ldr	r3, [pc, #372]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a5c      	ldr	r2, [pc, #368]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f5e:	4b57      	ldr	r3, [pc, #348]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a56      	ldr	r2, [pc, #344]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b54      	ldr	r3, [pc, #336]	; (80030bc <MX_GPIO_Init+0x21c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin, GPIO_PIN_RESET);
 8002f76:	2200      	movs	r2, #0
 8002f78:	21e0      	movs	r1, #224	; 0xe0
 8002f7a:	4851      	ldr	r0, [pc, #324]	; (80030c0 <MX_GPIO_Init+0x220>)
 8002f7c:	f002 fe2a 	bl	8005bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 8002f80:	2200      	movs	r2, #0
 8002f82:	f644 7181 	movw	r1, #20353	; 0x4f81
 8002f86:	484f      	ldr	r0, [pc, #316]	; (80030c4 <MX_GPIO_Init+0x224>)
 8002f88:	f002 fe24 	bl	8005bd4 <HAL_GPIO_WritePin>
                          |LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f24d 4180 	movw	r1, #54400	; 0xd480
 8002f92:	484d      	ldr	r0, [pc, #308]	; (80030c8 <MX_GPIO_Init+0x228>)
 8002f94:	f002 fe1e 	bl	8005bd4 <HAL_GPIO_WritePin>
                          |MS2_NEEDLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002f9e:	484b      	ldr	r0, [pc, #300]	; (80030cc <MX_GPIO_Init+0x22c>)
 8002fa0:	f002 fe18 	bl	8005bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	4849      	ldr	r0, [pc, #292]	; (80030d0 <MX_GPIO_Init+0x230>)
 8002faa:	f002 fe13 	bl	8005bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin;
 8002fae:	23e0      	movs	r3, #224	; 0xe0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	483e      	ldr	r0, [pc, #248]	; (80030c0 <MX_GPIO_Init+0x220>)
 8002fc6:	f002 fc59 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002fca:	f244 0381 	movw	r3, #16513	; 0x4081
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4838      	ldr	r0, [pc, #224]	; (80030c4 <MX_GPIO_Init+0x224>)
 8002fe4:	f002 fc4a 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002fe8:	f24d 4380 	movw	r3, #54400	; 0xd480
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
                          |MS2_NEEDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffe:	4619      	mov	r1, r3
 8003000:	4831      	ldr	r0, [pc, #196]	; (80030c8 <MX_GPIO_Init+0x228>)
 8003002:	f002 fc3b 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = END_STOP_NEEDLE_1_Pin|END_STOP_SYRINGE_1_Pin|END_STOP_SYRINGE_2_Pin|END_STOP_NEEDLE_2_Pin;
 8003006:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800300c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003012:	2301      	movs	r3, #1
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301a:	4619      	mov	r1, r3
 800301c:	482a      	ldr	r0, [pc, #168]	; (80030c8 <MX_GPIO_Init+0x228>)
 800301e:	f002 fc2d 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin;
 8003022:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003028:	2301      	movs	r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003030:	2302      	movs	r3, #2
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003038:	4619      	mov	r1, r3
 800303a:	4822      	ldr	r0, [pc, #136]	; (80030c4 <MX_GPIO_Init+0x224>)
 800303c:	f002 fc1e 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin;
 8003040:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304e:	2302      	movs	r3, #2
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003056:	4619      	mov	r1, r3
 8003058:	481c      	ldr	r0, [pc, #112]	; (80030cc <MX_GPIO_Init+0x22c>)
 800305a:	f002 fc0f 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800305e:	2340      	movs	r3, #64	; 0x40
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003062:	2301      	movs	r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	2300      	movs	r3, #0
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003072:	4619      	mov	r1, r3
 8003074:	4816      	ldr	r0, [pc, #88]	; (80030d0 <MX_GPIO_Init+0x230>)
 8003076:	f002 fc01 	bl	800587c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308a:	4619      	mov	r1, r3
 800308c:	4810      	ldr	r0, [pc, #64]	; (80030d0 <MX_GPIO_Init+0x230>)
 800308e:	f002 fbf5 	bl	800587c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2105      	movs	r1, #5
 8003096:	2017      	movs	r0, #23
 8003098:	f002 fb34 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800309c:	2017      	movs	r0, #23
 800309e:	f002 fb4d 	bl	800573c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2105      	movs	r1, #5
 80030a6:	2028      	movs	r0, #40	; 0x28
 80030a8:	f002 fb2c 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030ac:	2028      	movs	r0, #40	; 0x28
 80030ae:	f002 fb45 	bl	800573c <HAL_NVIC_EnableIRQ>

}
 80030b2:	bf00      	nop
 80030b4:	3738      	adds	r7, #56	; 0x38
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021800 	.word	0x40021800

080030d4 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <MX_I2C2_Init+0x74>)
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <MX_I2C2_Init+0x78>)
 80030dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <MX_I2C2_Init+0x74>)
 80030e0:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <MX_I2C2_Init+0x7c>)
 80030e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <MX_I2C2_Init+0x74>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <MX_I2C2_Init+0x74>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <MX_I2C2_Init+0x74>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <MX_I2C2_Init+0x74>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <MX_I2C2_Init+0x74>)
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <MX_I2C2_Init+0x74>)
 8003104:	2200      	movs	r2, #0
 8003106:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <MX_I2C2_Init+0x74>)
 800310a:	2200      	movs	r2, #0
 800310c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800310e:	480e      	ldr	r0, [pc, #56]	; (8003148 <MX_I2C2_Init+0x74>)
 8003110:	f002 fdac 	bl	8005c6c <HAL_I2C_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800311a:	f000 f9a1 	bl	8003460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800311e:	2100      	movs	r1, #0
 8003120:	4809      	ldr	r0, [pc, #36]	; (8003148 <MX_I2C2_Init+0x74>)
 8003122:	f003 fb07 	bl	8006734 <HAL_I2CEx_ConfigAnalogFilter>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800312c:	f000 f998 	bl	8003460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003130:	2100      	movs	r1, #0
 8003132:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_I2C2_Init+0x74>)
 8003134:	f003 fb49 	bl	80067ca <HAL_I2CEx_ConfigDigitalFilter>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800313e:	f000 f98f 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000540 	.word	0x20000540
 800314c:	40005800 	.word	0x40005800
 8003150:	00401959 	.word	0x00401959

08003154 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <MX_I2C4_Init+0x74>)
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <MX_I2C4_Init+0x78>)
 800315c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00401959;
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <MX_I2C4_Init+0x74>)
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <MX_I2C4_Init+0x7c>)
 8003162:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <MX_I2C4_Init+0x74>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <MX_I2C4_Init+0x74>)
 800316c:	2201      	movs	r2, #1
 800316e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <MX_I2C4_Init+0x74>)
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <MX_I2C4_Init+0x74>)
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <MX_I2C4_Init+0x74>)
 800317e:	2200      	movs	r2, #0
 8003180:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <MX_I2C4_Init+0x74>)
 8003184:	2200      	movs	r2, #0
 8003186:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <MX_I2C4_Init+0x74>)
 800318a:	2200      	movs	r2, #0
 800318c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800318e:	480e      	ldr	r0, [pc, #56]	; (80031c8 <MX_I2C4_Init+0x74>)
 8003190:	f002 fd6c 	bl	8005c6c <HAL_I2C_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800319a:	f000 f961 	bl	8003460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800319e:	2100      	movs	r1, #0
 80031a0:	4809      	ldr	r0, [pc, #36]	; (80031c8 <MX_I2C4_Init+0x74>)
 80031a2:	f003 fac7 	bl	8006734 <HAL_I2CEx_ConfigAnalogFilter>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80031ac:	f000 f958 	bl	8003460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80031b0:	2100      	movs	r1, #0
 80031b2:	4805      	ldr	r0, [pc, #20]	; (80031c8 <MX_I2C4_Init+0x74>)
 80031b4:	f003 fb09 	bl	80067ca <HAL_I2CEx_ConfigDigitalFilter>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80031be:	f000 f94f 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000058c 	.word	0x2000058c
 80031cc:	40006000 	.word	0x40006000
 80031d0:	00401959 	.word	0x00401959

080031d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b0ac      	sub	sp, #176	; 0xb0
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031ec:	f107 0318 	add.w	r3, r7, #24
 80031f0:	2284      	movs	r2, #132	; 0x84
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f00b fad7 	bl	800e7a8 <memset>
  if(i2cHandle->Instance==I2C2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a44      	ldr	r2, [pc, #272]	; (8003310 <HAL_I2C_MspInit+0x13c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d13d      	bne.n	8003280 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003208:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003210:	f107 0318 	add.w	r3, r7, #24
 8003214:	4618      	mov	r0, r3
 8003216:	f004 f881 	bl	800731c <HAL_RCCEx_PeriphCLKConfig>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003220:	f000 f91e 	bl	8003460 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_I2C_MspInit+0x140>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <HAL_I2C_MspInit+0x140>)
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	6313      	str	r3, [r2, #48]	; 0x30
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_I2C_MspInit+0x140>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800323c:	2303      	movs	r3, #3
 800323e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003242:	2312      	movs	r3, #18
 8003244:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003254:	2304      	movs	r3, #4
 8003256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800325a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800325e:	4619      	mov	r1, r3
 8003260:	482d      	ldr	r0, [pc, #180]	; (8003318 <HAL_I2C_MspInit+0x144>)
 8003262:	f002 fb0b 	bl	800587c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_I2C_MspInit+0x140>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_I2C_MspInit+0x140>)
 800326c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_I2C_MspInit+0x140>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800327e:	e042      	b.n	8003306 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <HAL_I2C_MspInit+0x148>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d13d      	bne.n	8003306 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800328a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800328e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003296:	f107 0318 	add.w	r3, r7, #24
 800329a:	4618      	mov	r0, r3
 800329c:	f004 f83e 	bl	800731c <HAL_RCCEx_PeriphCLKConfig>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80032a6:	f000 f8db 	bl	8003460 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_I2C_MspInit+0x140>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_I2C_MspInit+0x140>)
 80032b0:	f043 0320 	orr.w	r3, r3, #32
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_I2C_MspInit+0x140>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80032c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ca:	2312      	movs	r3, #18
 80032cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80032dc:	2304      	movs	r3, #4
 80032de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032e6:	4619      	mov	r1, r3
 80032e8:	480b      	ldr	r0, [pc, #44]	; (8003318 <HAL_I2C_MspInit+0x144>)
 80032ea:	f002 fac7 	bl	800587c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_I2C_MspInit+0x140>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_I2C_MspInit+0x140>)
 80032f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_I2C_MspInit+0x140>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
}
 8003306:	bf00      	nop
 8003308:	37b0      	adds	r7, #176	; 0xb0
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40005800 	.word	0x40005800
 8003314:	40023800 	.word	0x40023800
 8003318:	40021400 	.word	0x40021400
 800331c:	40006000 	.word	0x40006000

08003320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003324:	f002 f909 	bl	800553a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003328:	f000 f818 	bl	800335c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800332c:	f7ff fdb8 	bl	8002ea0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003330:	f002 f842 	bl	80053b8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8003334:	f7ff fece 	bl	80030d4 <MX_I2C2_Init>
  MX_I2C4_Init();
 8003338:	f7ff ff0c 	bl	8003154 <MX_I2C4_Init>
  MX_TIM2_Init();
 800333c:	f001 fdf4 	bl	8004f28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003340:	f001 fe6a 	bl	8005018 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003344:	f001 feb8 	bl	80050b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8003348:	f001 ff2e 	bl	80051a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800334c:	f007 f82e 	bl	800a3ac <osKernelInitialize>
  MX_FREERTOS_Init();
 8003350:	f7fe ff4c 	bl	80021ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003354:	f007 f85e 	bl	800a414 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003358:	e7fe      	b.n	8003358 <main+0x38>
	...

0800335c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b094      	sub	sp, #80	; 0x50
 8003360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003362:	f107 0320 	add.w	r3, r7, #32
 8003366:	2230      	movs	r2, #48	; 0x30
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f00b fa1c 	bl	800e7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003380:	f003 fa70 	bl	8006864 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <SystemClock_Config+0xd8>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <SystemClock_Config+0xd8>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	4b28      	ldr	r3, [pc, #160]	; (8003434 <SystemClock_Config+0xd8>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <SystemClock_Config+0xdc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033a4:	4a24      	ldr	r2, [pc, #144]	; (8003438 <SystemClock_Config+0xdc>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b22      	ldr	r3, [pc, #136]	; (8003438 <SystemClock_Config+0xdc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80033bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c2:	2302      	movs	r3, #2
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80033cc:	2304      	movs	r3, #4
 80033ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80033d0:	2364      	movs	r3, #100	; 0x64
 80033d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033d4:	2302      	movs	r3, #2
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80033d8:	2303      	movs	r3, #3
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033dc:	f107 0320 	add.w	r3, r7, #32
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fa9f 	bl	8006924 <HAL_RCC_OscConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033ec:	f000 f838 	bl	8003460 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80033f0:	f003 fa48 	bl	8006884 <HAL_PWREx_EnableOverDrive>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80033fa:	f000 f831 	bl	8003460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033fe:	230f      	movs	r3, #15
 8003400:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003402:	2302      	movs	r3, #2
 8003404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800340a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800340e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	2103      	movs	r1, #3
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fd26 	bl	8006e6c <HAL_RCC_ClockConfig>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8003426:	f000 f81b 	bl	8003460 <Error_Handler>
  }
}
 800342a:	bf00      	nop
 800342c:	3750      	adds	r7, #80	; 0x50
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40007000 	.word	0x40007000

0800343c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800344e:	f002 f881 	bl	8005554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40002000 	.word	0x40002000

08003460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003468:	e7fe      	b.n	8003468 <Error_Handler+0x8>

0800346a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d204      	bcs.n	800348c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	701a      	strb	r2, [r3, #0]
  }
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <_out_char+0x1e>
    _putchar(character);
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fbc3 	bl	8002c58 <_putchar>
  }
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e002      	b.n	80034f0 <_strnlen_s+0x16>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <_strnlen_s+0x28>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	603a      	str	r2, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f3      	bne.n	80034ea <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b2f      	cmp	r3, #47	; 0x2f
 8003522:	d904      	bls.n	800352e <_is_digit+0x1a>
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b39      	cmp	r3, #57	; 0x39
 8003528:	d801      	bhi.n	800352e <_is_digit+0x1a>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <_is_digit+0x1c>
 800352e:	2300      	movs	r3, #0
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800354e:	e00e      	b.n	800356e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4618      	mov	r0, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	1c59      	adds	r1, r3, #1
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4403      	add	r3, r0
 800356a:	3b30      	subs	r3, #48	; 0x30
 800356c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ffcd 	bl	8003514 <_is_digit>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e7      	bne.n	8003550 <_atoi+0xe>
  }
  return i;
 8003580:	68fb      	ldr	r3, [r7, #12]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800358a:	b590      	push	{r4, r7, lr}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d125      	bne.n	80035f2 <_out_rev+0x68>
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d120      	bne.n	80035f2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e00a      	b.n	80035cc <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	1c53      	adds	r3, r2, #1
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	68fc      	ldr	r4, [r7, #12]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	2020      	movs	r0, #32
 80035c4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3301      	adds	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3f0      	bcc.n	80035b6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80035d4:	e00d      	b.n	80035f2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	3b01      	subs	r3, #1
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	4413      	add	r3, r2
 80035e2:	7818      	ldrb	r0, [r3, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	1c53      	adds	r3, r2, #1
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	68fc      	ldr	r4, [r7, #12]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	47a0      	blx	r4
  while (len) {
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ee      	bne.n	80035d6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003602:	e007      	b.n	8003614 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	1c53      	adds	r3, r2, #1
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	68fc      	ldr	r4, [r7, #12]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	2020      	movs	r0, #32
 8003612:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361c:	429a      	cmp	r2, r3
 800361e:	d8f1      	bhi.n	8003604 <_out_rev+0x7a>
    }
  }

  return idx;
 8003620:	687b      	ldr	r3, [r7, #4]
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}

0800362a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b088      	sub	sp, #32
 800362e:	af04      	add	r7, sp, #16
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d136      	bne.n	80036b0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d018      	beq.n	800367a <_ntoa_format+0x50>
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d013      	beq.n	800367a <_ntoa_format+0x50>
 8003652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <_ntoa_format+0x3a>
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <_ntoa_format+0x50>
      width--;
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	3b01      	subs	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800366a:	e006      	b.n	800367a <_ntoa_format+0x50>
      buf[len++] = '0';
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	61fa      	str	r2, [r7, #28]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	2230      	movs	r2, #48	; 0x30
 8003678:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	429a      	cmp	r2, r3
 8003680:	d20a      	bcs.n	8003698 <_ntoa_format+0x6e>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b1f      	cmp	r3, #31
 8003686:	d9f1      	bls.n	800366c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003688:	e006      	b.n	8003698 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	61fa      	str	r2, [r7, #28]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4413      	add	r3, r2
 8003694:	2230      	movs	r2, #48	; 0x30
 8003696:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <_ntoa_format+0x86>
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d202      	bcs.n	80036b0 <_ntoa_format+0x86>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b1f      	cmp	r3, #31
 80036ae:	d9ec      	bls.n	800368a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d058      	beq.n	800376c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <_ntoa_format+0xc8>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d013      	beq.n	80036f2 <_ntoa_format+0xc8>
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d003      	beq.n	80036da <_ntoa_format+0xb0>
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d10b      	bne.n	80036f2 <_ntoa_format+0xc8>
      len--;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3b01      	subs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <_ntoa_format+0xc8>
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d102      	bne.n	80036f2 <_ntoa_format+0xc8>
        len--;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d10f      	bne.n	8003718 <_ntoa_format+0xee>
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <_ntoa_format+0xee>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b1f      	cmp	r3, #31
 8003706:	d807      	bhi.n	8003718 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	2278      	movs	r2, #120	; 0x78
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e01f      	b.n	8003758 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b10      	cmp	r3, #16
 800371c:	d10f      	bne.n	800373e <_ntoa_format+0x114>
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <_ntoa_format+0x114>
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b1f      	cmp	r3, #31
 800372c:	d807      	bhi.n	800373e <_ntoa_format+0x114>
      buf[len++] = 'X';
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4413      	add	r3, r2
 8003738:	2258      	movs	r2, #88	; 0x58
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e00c      	b.n	8003758 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	2b02      	cmp	r3, #2
 8003742:	d109      	bne.n	8003758 <_ntoa_format+0x12e>
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b1f      	cmp	r3, #31
 8003748:	d806      	bhi.n	8003758 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	61fa      	str	r2, [r7, #28]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	2262      	movs	r2, #98	; 0x62
 8003756:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b1f      	cmp	r3, #31
 800375c:	d806      	bhi.n	800376c <_ntoa_format+0x142>
      buf[len++] = '0';
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	61fa      	str	r2, [r7, #28]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4413      	add	r3, r2
 8003768:	2230      	movs	r2, #48	; 0x30
 800376a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b1f      	cmp	r3, #31
 8003770:	d824      	bhi.n	80037bc <_ntoa_format+0x192>
    if (negative) {
 8003772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <_ntoa_format+0x160>
      buf[len++] = '-';
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	61fa      	str	r2, [r7, #28]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	222d      	movs	r2, #45	; 0x2d
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e018      	b.n	80037bc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	61fa      	str	r2, [r7, #28]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4413      	add	r3, r2
 800379e:	222b      	movs	r2, #43	; 0x2b
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e00b      	b.n	80037bc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <_ntoa_format+0x192>
      buf[len++] = ' ';
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	61fa      	str	r2, [r7, #28]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	2220      	movs	r2, #32
 80037ba:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff fed9 	bl	800358a <_out_rev>
 80037d8:	4603      	mov	r3, r0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b096      	sub	sp, #88	; 0x58
 80037e6:	af08      	add	r7, sp, #32
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80037f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80037fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fc:	f023 0310 	bic.w	r3, r3, #16
 8003800:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <_ntoa_long+0x30>
 800380c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d032      	beq.n	8003878 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003816:	fbb3 f2f2 	udiv	r2, r3, r2
 800381a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800381c:	fb01 f202 	mul.w	r2, r1, r2
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800382a:	2b09      	cmp	r3, #9
 800382c:	d804      	bhi.n	8003838 <_ntoa_long+0x56>
 800382e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003832:	3330      	adds	r3, #48	; 0x30
 8003834:	b2da      	uxtb	r2, r3
 8003836:	e00d      	b.n	8003854 <_ntoa_long+0x72>
 8003838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <_ntoa_long+0x64>
 8003842:	2241      	movs	r2, #65	; 0x41
 8003844:	e000      	b.n	8003848 <_ntoa_long+0x66>
 8003846:	2261      	movs	r2, #97	; 0x61
 8003848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800384c:	4413      	add	r3, r2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3b0a      	subs	r3, #10
 8003852:	b2da      	uxtb	r2, r3
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	6379      	str	r1, [r7, #52]	; 0x34
 800385a:	3338      	adds	r3, #56	; 0x38
 800385c:	443b      	add	r3, r7
 800385e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800386c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <_ntoa_long+0x96>
 8003872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003874:	2b1f      	cmp	r3, #31
 8003876:	d9cc      	bls.n	8003812 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387a:	9306      	str	r3, [sp, #24]
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	9305      	str	r3, [sp, #20]
 8003880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003882:	9304      	str	r3, [sp, #16]
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	9303      	str	r3, [sp, #12]
 8003888:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff fec3 	bl	800362a <_ntoa_format>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3738      	adds	r7, #56	; 0x38
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b096      	sub	sp, #88	; 0x58
 80038b2:	af08      	add	r7, sp, #32
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80038c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d103      	bne.n	80038d0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80038c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ca:	f023 0310 	bic.w	r3, r3, #16
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80038d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <_ntoa_long_long+0x34>
 80038da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038de:	4313      	orrs	r3, r2
 80038e0:	d037      	beq.n	8003952 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80038e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80038e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038ea:	f7fd f92f 	bl	8000b4c <__aeabi_uldivmod>
 80038ee:	4613      	mov	r3, r2
 80038f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80038f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	d804      	bhi.n	8003906 <_ntoa_long_long+0x58>
 80038fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003900:	3330      	adds	r3, #48	; 0x30
 8003902:	b2da      	uxtb	r2, r3
 8003904:	e00d      	b.n	8003922 <_ntoa_long_long+0x74>
 8003906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <_ntoa_long_long+0x66>
 8003910:	2241      	movs	r2, #65	; 0x41
 8003912:	e000      	b.n	8003916 <_ntoa_long_long+0x68>
 8003914:	2261      	movs	r2, #97	; 0x61
 8003916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800391a:	4413      	add	r3, r2
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3b0a      	subs	r3, #10
 8003920:	b2da      	uxtb	r2, r3
 8003922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	6379      	str	r1, [r7, #52]	; 0x34
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	443b      	add	r3, r7
 800392c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003934:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003938:	f7fd f908 	bl	8000b4c <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003948:	4313      	orrs	r3, r2
 800394a:	d002      	beq.n	8003952 <_ntoa_long_long+0xa4>
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	2b1f      	cmp	r3, #31
 8003950:	d9c7      	bls.n	80038e2 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003956:	9206      	str	r2, [sp, #24]
 8003958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800395a:	9205      	str	r2, [sp, #20]
 800395c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800395e:	9204      	str	r2, [sp, #16]
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	f107 0310 	add.w	r3, r7, #16
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff fe56 	bl	800362a <_ntoa_format>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3738      	adds	r7, #56	; 0x38
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b09d      	sub	sp, #116	; 0x74
 800398c:	af04      	add	r7, sp, #16
 800398e:	6178      	str	r0, [r7, #20]
 8003990:	6139      	str	r1, [r7, #16]
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80039aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039b2:	f7fd f851 	bl	8000a58 <__aeabi_dcmpeq>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80039bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039be:	9303      	str	r3, [sp, #12]
 80039c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c2:	9302      	str	r3, [sp, #8]
 80039c4:	2303      	movs	r3, #3
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	4ba7      	ldr	r3, [pc, #668]	; (8003c68 <_ftoa+0x2e0>)
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	6939      	ldr	r1, [r7, #16]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff fdd9 	bl	800358a <_out_rev>
 80039d8:	4603      	mov	r3, r0
 80039da:	e222      	b.n	8003e22 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80039dc:	f04f 32ff 	mov.w	r2, #4294967295
 80039e0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80039e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039e8:	f7fd f840 	bl	8000a6c <__aeabi_dcmplt>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00f      	beq.n	8003a12 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80039f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	2304      	movs	r3, #4
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	4b9b      	ldr	r3, [pc, #620]	; (8003c6c <_ftoa+0x2e4>)
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6939      	ldr	r1, [r7, #16]
 8003a08:	6978      	ldr	r0, [r7, #20]
 8003a0a:	f7ff fdbe 	bl	800358a <_out_rev>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	e207      	b.n	8003e22 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003a12:	f04f 32ff 	mov.w	r2, #4294967295
 8003a16:	4b96      	ldr	r3, [pc, #600]	; (8003c70 <_ftoa+0x2e8>)
 8003a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a1c:	f7fd f844 	bl	8000aa8 <__aeabi_dcmpgt>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01d      	beq.n	8003a62 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <_ftoa+0xac>
 8003a30:	4b90      	ldr	r3, [pc, #576]	; (8003c74 <_ftoa+0x2ec>)
 8003a32:	e000      	b.n	8003a36 <_ftoa+0xae>
 8003a34:	4b90      	ldr	r3, [pc, #576]	; (8003c78 <_ftoa+0x2f0>)
 8003a36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a38:	f002 0204 	and.w	r2, r2, #4
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	d001      	beq.n	8003a44 <_ftoa+0xbc>
 8003a40:	2204      	movs	r2, #4
 8003a42:	e000      	b.n	8003a46 <_ftoa+0xbe>
 8003a44:	2203      	movs	r2, #3
 8003a46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003a48:	9103      	str	r1, [sp, #12]
 8003a4a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003a4c:	9102      	str	r1, [sp, #8]
 8003a4e:	9201      	str	r2, [sp, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6939      	ldr	r1, [r7, #16]
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f7ff fd96 	bl	800358a <_out_rev>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	e1df      	b.n	8003e22 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003a62:	a37d      	add	r3, pc, #500	; (adr r3, 8003c58 <_ftoa+0x2d0>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a6c:	f7fd f81c 	bl	8000aa8 <__aeabi_dcmpgt>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <_ftoa+0x102>
 8003a76:	a37a      	add	r3, pc, #488	; (adr r3, 8003c60 <_ftoa+0x2d8>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a80:	f7fc fff4 	bl	8000a6c <__aeabi_dcmplt>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00f      	beq.n	8003aaa <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8c:	9302      	str	r3, [sp, #8]
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	ed97 0b00 	vldr	d0, [r7]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	6939      	ldr	r1, [r7, #16]
 8003aa0:	6978      	ldr	r0, [r7, #20]
 8003aa2:	f000 f9c9 	bl	8003e38 <_etoa>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	e1bb      	b.n	8003e22 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003abc:	f7fc ffd6 	bl	8000a6c <__aeabi_dcmplt>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00e      	beq.n	8003ae4 <_ftoa+0x15c>
    negative = true;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	f7fc fb9e 	bl	8000218 <__aeabi_dsub>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003aee:	2306      	movs	r3, #6
 8003af0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003af2:	e00a      	b.n	8003b0a <_ftoa+0x182>
    buf[len++] = '0';
 8003af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003afa:	3360      	adds	r3, #96	; 0x60
 8003afc:	443b      	add	r3, r7
 8003afe:	2230      	movs	r2, #48	; 0x30
 8003b00:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b06:	3b01      	subs	r3, #1
 8003b08:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0c:	2b1f      	cmp	r3, #31
 8003b0e:	d802      	bhi.n	8003b16 <_ftoa+0x18e>
 8003b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b12:	2b09      	cmp	r3, #9
 8003b14:	d8ee      	bhi.n	8003af4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b1a:	f7fc ffcf 	bl	8000abc <__aeabi_d2iz>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003b22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003b24:	f7fc fcc6 	bl	80004b4 <__aeabi_i2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b30:	f7fc fb72 	bl	8000218 <__aeabi_dsub>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4a4f      	ldr	r2, [pc, #316]	; (8003c7c <_ftoa+0x2f4>)
 8003b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f7fc fd1e 	bl	8000588 <__aeabi_dmul>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003b54:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003b58:	f7fc ffd8 	bl	8000b0c <__aeabi_d2uiz>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003b60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b62:	f7fc fc97 	bl	8000494 <__aeabi_ui2d>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003b6e:	f7fc fb53 	bl	8000218 <__aeabi_dsub>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <_ftoa+0x2f8>)
 8003b80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003b84:	f7fc ff90 	bl	8000aa8 <__aeabi_dcmpgt>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <_ftoa+0x234>
    ++frac;
 8003b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b90:	3301      	adds	r3, #1
 8003b92:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003b94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b96:	f7fc fc7d 	bl	8000494 <__aeabi_ui2d>
 8003b9a:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <_ftoa+0x2f4>)
 8003b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f7fc ff75 	bl	8000a94 <__aeabi_dcmpge>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01a      	beq.n	8003be6 <_ftoa+0x25e>
      frac = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	657b      	str	r3, [r7, #84]	; 0x54
 8003bba:	e014      	b.n	8003be6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <_ftoa+0x2f8>)
 8003bc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003bc6:	f7fc ff51 	bl	8000a6c <__aeabi_dcmplt>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <_ftoa+0x258>
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be2:	3301      	adds	r3, #1
 8003be4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d14b      	bne.n	8003c84 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003bec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003bee:	f7fc fc61 	bl	80004b4 <__aeabi_i2d>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bfa:	f7fc fb0d 	bl	8000218 <__aeabi_dsub>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003c06:	2301      	movs	r3, #1
 8003c08:	461c      	mov	r4, r3
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <_ftoa+0x2f8>)
 8003c10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c14:	f7fc ff2a 	bl	8000a6c <__aeabi_dcmplt>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <_ftoa+0x29a>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	461c      	mov	r4, r3
 8003c22:	b2e3      	uxtb	r3, r4
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <_ftoa+0x2ba>
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <_ftoa+0x2f8>)
 8003c34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c38:	f7fc ff36 	bl	8000aa8 <__aeabi_dcmpgt>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d064      	beq.n	8003d0c <_ftoa+0x384>
 8003c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8081 	beq.w	8003d50 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	3301      	adds	r3, #1
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
 8003c54:	e07c      	b.n	8003d50 <_ftoa+0x3c8>
 8003c56:	bf00      	nop
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	41cdcd65 	.word	0x41cdcd65
 8003c60:	00000000 	.word	0x00000000
 8003c64:	c1cdcd65 	.word	0xc1cdcd65
 8003c68:	0800ee88 	.word	0x0800ee88
 8003c6c:	0800ee8c 	.word	0x0800ee8c
 8003c70:	7fefffff 	.word	0x7fefffff
 8003c74:	0800ee94 	.word	0x0800ee94
 8003c78:	0800ee9c 	.word	0x0800ee9c
 8003c7c:	0800f338 	.word	0x0800f338
 8003c80:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c86:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003c88:	e01f      	b.n	8003cca <_ftoa+0x342>
      --count;
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003c90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c92:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <_ftoa+0x4a4>)
 8003c94:	fba3 2301 	umull	r2, r3, r3, r1
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	1aca      	subs	r2, r1, r3
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca8:	1c59      	adds	r1, r3, #1
 8003caa:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003cac:	3230      	adds	r2, #48	; 0x30
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	3360      	adds	r3, #96	; 0x60
 8003cb2:	443b      	add	r3, r7
 8003cb4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cba:	4a5c      	ldr	r2, [pc, #368]	; (8003e2c <_ftoa+0x4a4>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ccc:	2b1f      	cmp	r3, #31
 8003cce:	d9dc      	bls.n	8003c8a <_ftoa+0x302>
 8003cd0:	e009      	b.n	8003ce6 <_ftoa+0x35e>
        break;
 8003cd2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003cd4:	e007      	b.n	8003ce6 <_ftoa+0x35e>
      buf[len++] = '0';
 8003cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003cdc:	3360      	adds	r3, #96	; 0x60
 8003cde:	443b      	add	r3, r7
 8003ce0:	2230      	movs	r2, #48	; 0x30
 8003ce2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce8:	2b1f      	cmp	r3, #31
 8003cea:	d804      	bhi.n	8003cf6 <_ftoa+0x36e>
 8003cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf8:	2b1f      	cmp	r3, #31
 8003cfa:	d829      	bhi.n	8003d50 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d02:	3360      	adds	r3, #96	; 0x60
 8003d04:	443b      	add	r3, r7
 8003d06:	222e      	movs	r2, #46	; 0x2e
 8003d08:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d0c:	e020      	b.n	8003d50 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003d0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d10:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <_ftoa+0x4a8>)
 8003d12:	fb83 1302 	smull	r1, r3, r3, r2
 8003d16:	1099      	asrs	r1, r3, #2
 8003d18:	17d3      	asrs	r3, r2, #31
 8003d1a:	1ac9      	subs	r1, r1, r3
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	1ad1      	subs	r1, r2, r3
 8003d26:	b2ca      	uxtb	r2, r1
 8003d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003d2e:	3230      	adds	r2, #48	; 0x30
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	3360      	adds	r3, #96	; 0x60
 8003d34:	443b      	add	r3, r7
 8003d36:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	4a3c      	ldr	r2, [pc, #240]	; (8003e30 <_ftoa+0x4a8>)
 8003d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d42:	1092      	asrs	r2, r2, #2
 8003d44:	17db      	asrs	r3, r3, #31
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	657b      	str	r3, [r7, #84]	; 0x54
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d52:	2b1f      	cmp	r3, #31
 8003d54:	d9db      	bls.n	8003d0e <_ftoa+0x386>
 8003d56:	e000      	b.n	8003d5a <_ftoa+0x3d2>
      break;
 8003d58:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d123      	bne.n	8003dac <_ftoa+0x424>
 8003d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01e      	beq.n	8003dac <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d014      	beq.n	8003d9e <_ftoa+0x416>
 8003d74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <_ftoa+0x3fe>
 8003d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <_ftoa+0x416>
      width--;
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003d8c:	e007      	b.n	8003d9e <_ftoa+0x416>
      buf[len++] = '0';
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d94:	3360      	adds	r3, #96	; 0x60
 8003d96:	443b      	add	r3, r7
 8003d98:	2230      	movs	r2, #48	; 0x30
 8003d9a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003d9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d202      	bcs.n	8003dac <_ftoa+0x424>
 8003da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da8:	2b1f      	cmp	r3, #31
 8003daa:	d9f0      	bls.n	8003d8e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dae:	2b1f      	cmp	r3, #31
 8003db0:	d827      	bhi.n	8003e02 <_ftoa+0x47a>
    if (negative) {
 8003db2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <_ftoa+0x444>
      buf[len++] = '-';
 8003dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003dc0:	3360      	adds	r3, #96	; 0x60
 8003dc2:	443b      	add	r3, r7
 8003dc4:	222d      	movs	r2, #45	; 0x2d
 8003dc6:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003dca:	e01a      	b.n	8003e02 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ddc:	3360      	adds	r3, #96	; 0x60
 8003dde:	443b      	add	r3, r7
 8003de0:	222b      	movs	r2, #43	; 0x2b
 8003de2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003de6:	e00c      	b.n	8003e02 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003df8:	3360      	adds	r3, #96	; 0x60
 8003dfa:	443b      	add	r3, r7
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	9302      	str	r3, [sp, #8]
 8003e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	f107 0318 	add.w	r3, r7, #24
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	6939      	ldr	r1, [r7, #16]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f7ff fbb5 	bl	800358a <_out_rev>
 8003e20:	4603      	mov	r3, r0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3764      	adds	r7, #100	; 0x64
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd90      	pop	{r4, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	cccccccd 	.word	0xcccccccd
 8003e30:	66666667 	.word	0x66666667
 8003e34:	00000000 	.word	0x00000000

08003e38 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	b09f      	sub	sp, #124	; 0x7c
 8003e3e:	af06      	add	r7, sp, #24
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24
 8003e42:	6239      	str	r1, [r7, #32]
 8003e44:	61fa      	str	r2, [r7, #28]
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003e4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e54:	f7fc fe00 	bl	8000a58 <__aeabi_dcmpeq>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d014      	beq.n	8003e88 <_etoa+0x50>
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	4bc1      	ldr	r3, [pc, #772]	; (8004168 <_etoa+0x330>)
 8003e64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e68:	f7fc fe1e 	bl	8000aa8 <__aeabi_dcmpgt>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <_etoa+0x50>
 8003e72:	f04f 32ff 	mov.w	r2, #4294967295
 8003e76:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003e7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e7e:	f7fc fdf5 	bl	8000a6c <__aeabi_dcmplt>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	ed97 0b04 	vldr	d0, [r7, #16]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	6a39      	ldr	r1, [r7, #32]
 8003ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea6:	f7ff fd6f 	bl	8003988 <_ftoa>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	e23f      	b.n	800432e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	461e      	mov	r6, r3
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ebe:	f7fc fdd5 	bl	8000a6c <__aeabi_dcmplt>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <_etoa+0x94>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	461e      	mov	r6, r3
 8003ecc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003ed0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <_etoa+0xb4>
    value = -value;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	ed97 7b00 	vldr	d7, [r7]
 8003ee8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003ef8:	2306      	movs	r3, #6
 8003efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003f06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	0d0a      	lsrs	r2, r1, #20
 8003f14:	2300      	movs	r3, #0
 8003f16:	4613      	mov	r3, r2
 8003f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f26:	4690      	mov	r8, r2
 8003f28:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003f2c:	4644      	mov	r4, r8
 8003f2e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003f32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003f36:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003f3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003f3c:	f7fc faba 	bl	80004b4 <__aeabi_i2d>
 8003f40:	a37d      	add	r3, pc, #500	; (adr r3, 8004138 <_etoa+0x300>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc fb1f 	bl	8000588 <__aeabi_dmul>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	a37b      	add	r3, pc, #492	; (adr r3, 8004140 <_etoa+0x308>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f7fc f960 	bl	800021c <__adddf3>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	461d      	mov	r5, r3
 8003f64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	4b7f      	ldr	r3, [pc, #508]	; (800416c <_etoa+0x334>)
 8003f6e:	f7fc f953 	bl	8000218 <__aeabi_dsub>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	a373      	add	r3, pc, #460	; (adr r3, 8004148 <_etoa+0x310>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f7fc fb02 	bl	8000588 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7fc f946 	bl	800021c <__adddf3>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	f7fc fd90 	bl	8000abc <__aeabi_d2iz>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003fa0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003fa2:	f7fc fa87 	bl	80004b4 <__aeabi_i2d>
 8003fa6:	a36a      	add	r3, pc, #424	; (adr r3, 8004150 <_etoa+0x318>)
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f7fc faec 	bl	8000588 <__aeabi_dmul>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <_etoa+0x338>)
 8003fbe:	f7fc f92d 	bl	800021c <__adddf3>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f7fc fd77 	bl	8000abc <__aeabi_d2iz>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003fd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003fd4:	f7fc fa6e 	bl	80004b4 <__aeabi_i2d>
 8003fd8:	a35f      	add	r3, pc, #380	; (adr r3, 8004158 <_etoa+0x320>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc fad3 	bl	8000588 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	461d      	mov	r5, r3
 8003fea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003fec:	f7fc fa62 	bl	80004b4 <__aeabi_i2d>
 8003ff0:	a35b      	add	r3, pc, #364	; (adr r3, 8004160 <_etoa+0x328>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc fac7 	bl	8000588 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc f909 	bl	8000218 <__aeabi_dsub>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800400e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004012:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004016:	f7fc fab7 	bl	8000588 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004028:	17da      	asrs	r2, r3, #31
 800402a:	469a      	mov	sl, r3
 800402c:	4693      	mov	fp, r2
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800403a:	2200      	movs	r2, #0
 800403c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004040:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004044:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	f7fc f8e6 	bl	800021c <__adddf3>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4690      	mov	r8, r2
 8004056:	4699      	mov	r9, r3
 8004058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800405c:	f04f 0000 	mov.w	r0, #0
 8004060:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004064:	f7fc f8d8 	bl	8000218 <__aeabi_dsub>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4692      	mov	sl, r2
 800406e:	469b      	mov	fp, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <_etoa+0x33c>)
 8004076:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800407a:	f7fc fbaf 	bl	80007dc <__aeabi_ddiv>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <_etoa+0x340>)
 800408c:	f7fc f8c6 	bl	800021c <__adddf3>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004098:	f7fc fba0 	bl	80007dc <__aeabi_ddiv>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <_etoa+0x344>)
 80040aa:	f7fc f8b7 	bl	800021c <__adddf3>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040b6:	f7fc fb91 	bl	80007dc <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4650      	mov	r0, sl
 80040c0:	4659      	mov	r1, fp
 80040c2:	f7fc f8ab 	bl	800021c <__adddf3>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4640      	mov	r0, r8
 80040cc:	4649      	mov	r1, r9
 80040ce:	f7fc fb85 	bl	80007dc <__aeabi_ddiv>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	4b28      	ldr	r3, [pc, #160]	; (8004180 <_etoa+0x348>)
 80040e0:	f7fc f89c 	bl	800021c <__adddf3>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc fa4c 	bl	8000588 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80040f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004100:	f7fc fcb4 	bl	8000a6c <__aeabi_dcmplt>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <_etoa+0x2ee>
    expval--;
 800410a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410c:	3b01      	subs	r3, #1
 800410e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004110:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <_etoa+0x340>)
 800411a:	f7fc fb5f 	bl	80007dc <__aeabi_ddiv>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004128:	2b63      	cmp	r3, #99	; 0x63
 800412a:	dc2b      	bgt.n	8004184 <_etoa+0x34c>
 800412c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004132:	db27      	blt.n	8004184 <_etoa+0x34c>
 8004134:	2304      	movs	r3, #4
 8004136:	e026      	b.n	8004186 <_etoa+0x34e>
 8004138:	509f79fb 	.word	0x509f79fb
 800413c:	3fd34413 	.word	0x3fd34413
 8004140:	8b60c8b3 	.word	0x8b60c8b3
 8004144:	3fc68a28 	.word	0x3fc68a28
 8004148:	636f4361 	.word	0x636f4361
 800414c:	3fd287a7 	.word	0x3fd287a7
 8004150:	0979a371 	.word	0x0979a371
 8004154:	400a934f 	.word	0x400a934f
 8004158:	bbb55516 	.word	0xbbb55516
 800415c:	40026bb1 	.word	0x40026bb1
 8004160:	fefa39ef 	.word	0xfefa39ef
 8004164:	3fe62e42 	.word	0x3fe62e42
 8004168:	7fefffff 	.word	0x7fefffff
 800416c:	3ff80000 	.word	0x3ff80000
 8004170:	3fe00000 	.word	0x3fe00000
 8004174:	402c0000 	.word	0x402c0000
 8004178:	40240000 	.word	0x40240000
 800417c:	40180000 	.word	0x40180000
 8004180:	3ff00000 	.word	0x3ff00000
 8004184:	2305      	movs	r3, #5
 8004186:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800418c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03d      	beq.n	8004210 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004194:	a368      	add	r3, pc, #416	; (adr r3, 8004338 <_etoa+0x500>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800419e:	f7fc fc79 	bl	8000a94 <__aeabi_dcmpge>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d024      	beq.n	80041f2 <_etoa+0x3ba>
 80041a8:	a365      	add	r3, pc, #404	; (adr r3, 8004340 <_etoa+0x508>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041b2:	f7fc fc5b 	bl	8000a6c <__aeabi_dcmplt>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01a      	beq.n	80041f2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80041bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	da07      	bge.n	80041d6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80041c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d4:	e002      	b.n	80041dc <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80041dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f0:	e00e      	b.n	8004210 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80041f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <_etoa+0x3d8>
 80041fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <_etoa+0x3d8>
        --prec;
 8004206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800420a:	3b01      	subs	r3, #1
 800420c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004214:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8004216:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800421a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800421c:	429a      	cmp	r2, r3
 800421e:	d904      	bls.n	800422a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	657b      	str	r3, [r7, #84]	; 0x54
 8004228:	e001      	b.n	800422e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800422e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <_etoa+0x40c>
 800423a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8004244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <_etoa+0x426>
    value /= conv.F;
 800424a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800424e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004252:	f7fc fac3 	bl	80007dc <__aeabi_ddiv>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004262:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <_etoa+0x440>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e003      	b.n	8004280 <_etoa+0x448>
 8004278:	ed97 7b04 	vldr	d7, [r7, #16]
 800427c:	ed87 7b02 	vstr	d7, [r7, #8]
 8004280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004288:	9302      	str	r3, [sp, #8]
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	ed97 0b02 	vldr	d0, [r7, #8]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a0:	f7ff fb72 	bl	8003988 <_ftoa>
 80042a4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80042a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03f      	beq.n	800432c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80042ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <_etoa+0x484>
 80042b8:	2045      	movs	r0, #69	; 0x45
 80042ba:	e000      	b.n	80042be <_etoa+0x486>
 80042bc:	2065      	movs	r0, #101	; 0x65
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	1c53      	adds	r3, r2, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80042cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bfb8      	it	lt
 80042d2:	425b      	neglt	r3, r3
 80042d4:	4618      	mov	r0, r3
 80042d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d8:	0fdb      	lsrs	r3, r3, #31
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042de:	3a01      	subs	r2, #1
 80042e0:	2105      	movs	r1, #5
 80042e2:	9105      	str	r1, [sp, #20]
 80042e4:	9204      	str	r2, [sp, #16]
 80042e6:	2200      	movs	r2, #0
 80042e8:	9203      	str	r2, [sp, #12]
 80042ea:	220a      	movs	r2, #10
 80042ec:	9202      	str	r2, [sp, #8]
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	9000      	str	r0, [sp, #0]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	6a39      	ldr	r1, [r7, #32]
 80042f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042fa:	f7ff fa72 	bl	80037e2 <_ntoa_long>
 80042fe:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00f      	beq.n	800432c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800430c:	e007      	b.n	800431e <_etoa+0x4e6>
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	1c53      	adds	r3, r2, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	2020      	movs	r0, #32
 800431c:	47a0      	blx	r4
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004328:	429a      	cmp	r2, r3
 800432a:	d8f0      	bhi.n	800430e <_etoa+0x4d6>
    }
  }
  return idx;
 800432c:	69fb      	ldr	r3, [r7, #28]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3764      	adds	r7, #100	; 0x64
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004338:	eb1c432d 	.word	0xeb1c432d
 800433c:	3f1a36e2 	.word	0x3f1a36e2
 8004340:	00000000 	.word	0x00000000
 8004344:	412e8480 	.word	0x412e8480

08004348 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	b0a3      	sub	sp, #140	; 0x8c
 800434e:	af0a      	add	r7, sp, #40	; 0x28
 8004350:	6178      	str	r0, [r7, #20]
 8004352:	6139      	str	r1, [r7, #16]
 8004354:	60fa      	str	r2, [r7, #12]
 8004356:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 84be 	bne.w	8004ce0 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8004364:	4ba3      	ldr	r3, [pc, #652]	; (80045f4 <_vsnprintf+0x2ac>)
 8004366:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004368:	f000 bcba 	b.w	8004ce0 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b25      	cmp	r3, #37	; 0x25
 8004372:	d00d      	beq.n	8004390 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	7818      	ldrb	r0, [r3, #0]
 8004378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800437a:	1c53      	adds	r3, r2, #1
 800437c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437e:	697c      	ldr	r4, [r7, #20]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6939      	ldr	r1, [r7, #16]
 8004384:	47a0      	blx	r4
      format++;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
      continue;
 800438c:	f000 bca8 	b.w	8004ce0 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	3301      	adds	r3, #1
 8004394:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	3b20      	subs	r3, #32
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d857      	bhi.n	8004454 <_vsnprintf+0x10c>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <_vsnprintf+0x64>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	0800442d 	.word	0x0800442d
 80043b0:	08004455 	.word	0x08004455
 80043b4:	08004455 	.word	0x08004455
 80043b8:	08004441 	.word	0x08004441
 80043bc:	08004455 	.word	0x08004455
 80043c0:	08004455 	.word	0x08004455
 80043c4:	08004455 	.word	0x08004455
 80043c8:	08004455 	.word	0x08004455
 80043cc:	08004455 	.word	0x08004455
 80043d0:	08004455 	.word	0x08004455
 80043d4:	08004455 	.word	0x08004455
 80043d8:	08004419 	.word	0x08004419
 80043dc:	08004455 	.word	0x08004455
 80043e0:	08004405 	.word	0x08004405
 80043e4:	08004455 	.word	0x08004455
 80043e8:	08004455 	.word	0x08004455
 80043ec:	080043f1 	.word	0x080043f1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80043f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	2301      	movs	r3, #1
 8004400:	653b      	str	r3, [r7, #80]	; 0x50
 8004402:	e02a      	b.n	800445a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004406:	f043 0302 	orr.w	r3, r3, #2
 800440a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	3301      	adds	r3, #1
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	2301      	movs	r3, #1
 8004414:	653b      	str	r3, [r7, #80]	; 0x50
 8004416:	e020      	b.n	800445a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	3301      	adds	r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	2301      	movs	r3, #1
 8004428:	653b      	str	r3, [r7, #80]	; 0x50
 800442a:	e016      	b.n	800445a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800442c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3301      	adds	r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	2301      	movs	r3, #1
 800443c:	653b      	str	r3, [r7, #80]	; 0x50
 800443e:	e00c      	b.n	800445a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004442:	f043 0310 	orr.w	r3, r3, #16
 8004446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	3301      	adds	r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	2301      	movs	r3, #1
 8004450:	653b      	str	r3, [r7, #80]	; 0x50
 8004452:	e002      	b.n	800445a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004454:	2300      	movs	r3, #0
 8004456:	653b      	str	r3, [r7, #80]	; 0x50
 8004458:	bf00      	nop
      }
    } while (n);
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	2b00      	cmp	r3, #0
 800445e:	d19c      	bne.n	800439a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f853 	bl	8003514 <_is_digit>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f862 	bl	8003542 <_atoi>
 800447e:	65b8      	str	r0, [r7, #88]	; 0x58
 8004480:	e01a      	b.n	80044b8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b2a      	cmp	r3, #42	; 0x2a
 8004488:	d116      	bne.n	80044b8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800448a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	da07      	bge.n	80044ae <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	425b      	negs	r3, r3
 80044aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80044ac:	e001      	b.n	80044b2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b2e      	cmp	r3, #46	; 0x2e
 80044c2:	d127      	bne.n	8004514 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80044c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ca:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f81c 	bl	8003514 <_is_digit>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d006      	beq.n	80044f0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80044e2:	f107 0308 	add.w	r3, r7, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff f82b 	bl	8003542 <_atoi>
 80044ec:	6578      	str	r0, [r7, #84]	; 0x54
 80044ee:	e011      	b.n	8004514 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b2a      	cmp	r3, #42	; 0x2a
 80044f6:	d10d      	bne.n	8004514 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80044f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800450c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3301      	adds	r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	3b68      	subs	r3, #104	; 0x68
 800451a:	2b12      	cmp	r3, #18
 800451c:	d866      	bhi.n	80045ec <_vsnprintf+0x2a4>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <_vsnprintf+0x1dc>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	08004597 	.word	0x08004597
 8004528:	080045ed 	.word	0x080045ed
 800452c:	080045cd 	.word	0x080045cd
 8004530:	080045ed 	.word	0x080045ed
 8004534:	08004571 	.word	0x08004571
 8004538:	080045ed 	.word	0x080045ed
 800453c:	080045ed 	.word	0x080045ed
 8004540:	080045ed 	.word	0x080045ed
 8004544:	080045ed 	.word	0x080045ed
 8004548:	080045ed 	.word	0x080045ed
 800454c:	080045ed 	.word	0x080045ed
 8004550:	080045ed 	.word	0x080045ed
 8004554:	080045bd 	.word	0x080045bd
 8004558:	080045ed 	.word	0x080045ed
 800455c:	080045ed 	.word	0x080045ed
 8004560:	080045ed 	.word	0x080045ed
 8004564:	080045ed 	.word	0x080045ed
 8004568:	080045ed 	.word	0x080045ed
 800456c:	080045dd 	.word	0x080045dd
      case 'l' :
        flags |= FLAGS_LONG;
 8004570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3301      	adds	r3, #1
 800457c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b6c      	cmp	r3, #108	; 0x6c
 8004584:	d134      	bne.n	80045f0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800458c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3301      	adds	r3, #1
 8004592:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004594:	e02c      	b.n	80045f0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b68      	cmp	r3, #104	; 0x68
 80045aa:	d125      	bne.n	80045f8 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80045ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80045ba:	e01d      	b.n	80045f8 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80045bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
        break;
 80045ca:	e016      	b.n	80045fa <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80045cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
        break;
 80045da:	e00e      	b.n	80045fa <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80045dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
        break;
 80045ea:	e006      	b.n	80045fa <_vsnprintf+0x2b2>
      default :
        break;
 80045ec:	bf00      	nop
 80045ee:	e004      	b.n	80045fa <_vsnprintf+0x2b2>
        break;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <_vsnprintf+0x2b2>
 80045f4:	08003499 	.word	0x08003499
        break;
 80045f8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	3b25      	subs	r3, #37	; 0x25
 8004600:	2b53      	cmp	r3, #83	; 0x53
 8004602:	f200 8360 	bhi.w	8004cc6 <_vsnprintf+0x97e>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <_vsnprintf+0x2c4>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004caf 	.word	0x08004caf
 8004610:	08004cc7 	.word	0x08004cc7
 8004614:	08004cc7 	.word	0x08004cc7
 8004618:	08004cc7 	.word	0x08004cc7
 800461c:	08004cc7 	.word	0x08004cc7
 8004620:	08004cc7 	.word	0x08004cc7
 8004624:	08004cc7 	.word	0x08004cc7
 8004628:	08004cc7 	.word	0x08004cc7
 800462c:	08004cc7 	.word	0x08004cc7
 8004630:	08004cc7 	.word	0x08004cc7
 8004634:	08004cc7 	.word	0x08004cc7
 8004638:	08004cc7 	.word	0x08004cc7
 800463c:	08004cc7 	.word	0x08004cc7
 8004640:	08004cc7 	.word	0x08004cc7
 8004644:	08004cc7 	.word	0x08004cc7
 8004648:	08004cc7 	.word	0x08004cc7
 800464c:	08004cc7 	.word	0x08004cc7
 8004650:	08004cc7 	.word	0x08004cc7
 8004654:	08004cc7 	.word	0x08004cc7
 8004658:	08004cc7 	.word	0x08004cc7
 800465c:	08004cc7 	.word	0x08004cc7
 8004660:	08004cc7 	.word	0x08004cc7
 8004664:	08004cc7 	.word	0x08004cc7
 8004668:	08004cc7 	.word	0x08004cc7
 800466c:	08004cc7 	.word	0x08004cc7
 8004670:	08004cc7 	.word	0x08004cc7
 8004674:	08004cc7 	.word	0x08004cc7
 8004678:	08004cc7 	.word	0x08004cc7
 800467c:	08004cc7 	.word	0x08004cc7
 8004680:	08004cc7 	.word	0x08004cc7
 8004684:	08004cc7 	.word	0x08004cc7
 8004688:	08004cc7 	.word	0x08004cc7
 800468c:	08004a63 	.word	0x08004a63
 8004690:	08004a13 	.word	0x08004a13
 8004694:	08004a63 	.word	0x08004a63
 8004698:	08004cc7 	.word	0x08004cc7
 800469c:	08004cc7 	.word	0x08004cc7
 80046a0:	08004cc7 	.word	0x08004cc7
 80046a4:	08004cc7 	.word	0x08004cc7
 80046a8:	08004cc7 	.word	0x08004cc7
 80046ac:	08004cc7 	.word	0x08004cc7
 80046b0:	08004cc7 	.word	0x08004cc7
 80046b4:	08004cc7 	.word	0x08004cc7
 80046b8:	08004cc7 	.word	0x08004cc7
 80046bc:	08004cc7 	.word	0x08004cc7
 80046c0:	08004cc7 	.word	0x08004cc7
 80046c4:	08004cc7 	.word	0x08004cc7
 80046c8:	08004cc7 	.word	0x08004cc7
 80046cc:	08004cc7 	.word	0x08004cc7
 80046d0:	08004cc7 	.word	0x08004cc7
 80046d4:	08004cc7 	.word	0x08004cc7
 80046d8:	0800475d 	.word	0x0800475d
 80046dc:	08004cc7 	.word	0x08004cc7
 80046e0:	08004cc7 	.word	0x08004cc7
 80046e4:	08004cc7 	.word	0x08004cc7
 80046e8:	08004cc7 	.word	0x08004cc7
 80046ec:	08004cc7 	.word	0x08004cc7
 80046f0:	08004cc7 	.word	0x08004cc7
 80046f4:	08004cc7 	.word	0x08004cc7
 80046f8:	08004cc7 	.word	0x08004cc7
 80046fc:	08004cc7 	.word	0x08004cc7
 8004700:	0800475d 	.word	0x0800475d
 8004704:	08004ad3 	.word	0x08004ad3
 8004708:	0800475d 	.word	0x0800475d
 800470c:	08004a63 	.word	0x08004a63
 8004710:	08004a13 	.word	0x08004a13
 8004714:	08004a63 	.word	0x08004a63
 8004718:	08004cc7 	.word	0x08004cc7
 800471c:	0800475d 	.word	0x0800475d
 8004720:	08004cc7 	.word	0x08004cc7
 8004724:	08004cc7 	.word	0x08004cc7
 8004728:	08004cc7 	.word	0x08004cc7
 800472c:	08004cc7 	.word	0x08004cc7
 8004730:	08004cc7 	.word	0x08004cc7
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004c13 	.word	0x08004c13
 800473c:	08004cc7 	.word	0x08004cc7
 8004740:	08004cc7 	.word	0x08004cc7
 8004744:	08004b4b 	.word	0x08004b4b
 8004748:	08004cc7 	.word	0x08004cc7
 800474c:	0800475d 	.word	0x0800475d
 8004750:	08004cc7 	.word	0x08004cc7
 8004754:	08004cc7 	.word	0x08004cc7
 8004758:	0800475d 	.word	0x0800475d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b78      	cmp	r3, #120	; 0x78
 8004762:	d003      	beq.n	800476c <_vsnprintf+0x424>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b58      	cmp	r3, #88	; 0x58
 800476a:	d102      	bne.n	8004772 <_vsnprintf+0x42a>
          base = 16U;
 800476c:	2310      	movs	r3, #16
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	e013      	b.n	800479a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b6f      	cmp	r3, #111	; 0x6f
 8004778:	d102      	bne.n	8004780 <_vsnprintf+0x438>
          base =  8U;
 800477a:	2308      	movs	r3, #8
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
 800477e:	e00c      	b.n	800479a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b62      	cmp	r3, #98	; 0x62
 8004786:	d102      	bne.n	800478e <_vsnprintf+0x446>
          base =  2U;
 8004788:	2302      	movs	r3, #2
 800478a:	64bb      	str	r3, [r7, #72]	; 0x48
 800478c:	e005      	b.n	800479a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800478e:	230a      	movs	r3, #10
 8004790:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b58      	cmp	r3, #88	; 0x58
 80047a0:	d103      	bne.n	80047aa <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80047a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a4:	f043 0320 	orr.w	r3, r3, #32
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b69      	cmp	r3, #105	; 0x69
 80047b0:	d007      	beq.n	80047c2 <_vsnprintf+0x47a>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d003      	beq.n	80047c2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80047ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047bc:	f023 030c 	bic.w	r3, r3, #12
 80047c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80047c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b69      	cmp	r3, #105	; 0x69
 80047da:	d004      	beq.n	80047e6 <_vsnprintf+0x49e>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b64      	cmp	r3, #100	; 0x64
 80047e2:	f040 8098 	bne.w	8004916 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80047e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d031      	beq.n	8004854 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80047f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f4:	3307      	adds	r3, #7
 80047f6:	f023 0307 	bic.w	r3, r3, #7
 80047fa:	f103 0208 	add.w	r2, r3, #8
 80047fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800480a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	da06      	bge.n	8004820 <_vsnprintf+0x4d8>
 8004812:	2100      	movs	r1, #0
 8004814:	f1d2 0800 	rsbs	r8, r2, #0
 8004818:	eb61 0903 	sbc.w	r9, r1, r3
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	69f9      	ldr	r1, [r7, #28]
 8004822:	0fc9      	lsrs	r1, r1, #31
 8004824:	b2c9      	uxtb	r1, r1
 8004826:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004828:	2400      	movs	r4, #0
 800482a:	4682      	mov	sl, r0
 800482c:	46a3      	mov	fp, r4
 800482e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004830:	9008      	str	r0, [sp, #32]
 8004832:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004834:	9007      	str	r0, [sp, #28]
 8004836:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004838:	9006      	str	r0, [sp, #24]
 800483a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800483e:	9102      	str	r1, [sp, #8]
 8004840:	e9cd 2300 	strd	r2, r3, [sp]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004848:	6939      	ldr	r1, [r7, #16]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff f82f 	bl	80038ae <_ntoa_long_long>
 8004850:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004852:	e0da      	b.n	8004a0a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d020      	beq.n	80048a0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800485e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	bfb8      	it	lt
 8004872:	425b      	neglt	r3, r3
 8004874:	4619      	mov	r1, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	0fdb      	lsrs	r3, r3, #31
 800487a:	b2db      	uxtb	r3, r3
 800487c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800487e:	9205      	str	r2, [sp, #20]
 8004880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004882:	9204      	str	r2, [sp, #16]
 8004884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004886:	9203      	str	r2, [sp, #12]
 8004888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488a:	9202      	str	r2, [sp, #8]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	9100      	str	r1, [sp, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	6978      	ldr	r0, [r7, #20]
 8004898:	f7fe ffa3 	bl	80037e2 <_ntoa_long>
 800489c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800489e:	e0b4      	b.n	8004a0a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80048a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <_vsnprintf+0x572>
 80048aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ae:	1d1a      	adds	r2, r3, #4
 80048b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e012      	b.n	80048e0 <_vsnprintf+0x598>
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <_vsnprintf+0x58c>
 80048c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	e005      	b.n	80048e0 <_vsnprintf+0x598>
 80048d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfb8      	it	lt
 80048e8:	425b      	neglt	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	0fdb      	lsrs	r3, r3, #31
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048f4:	9205      	str	r2, [sp, #20]
 80048f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048f8:	9204      	str	r2, [sp, #16]
 80048fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048fc:	9203      	str	r2, [sp, #12]
 80048fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004900:	9202      	str	r2, [sp, #8]
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	9100      	str	r1, [sp, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f7fe ff68 	bl	80037e2 <_ntoa_long>
 8004912:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004914:	e079      	b.n	8004a0a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004924:	3307      	adds	r3, #7
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	f103 0208 	add.w	r2, r3, #8
 800492e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004938:	2000      	movs	r0, #0
 800493a:	460d      	mov	r5, r1
 800493c:	4606      	mov	r6, r0
 800493e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004940:	9108      	str	r1, [sp, #32]
 8004942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004944:	9107      	str	r1, [sp, #28]
 8004946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004948:	9106      	str	r1, [sp, #24]
 800494a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800494e:	2100      	movs	r1, #0
 8004950:	9102      	str	r1, [sp, #8]
 8004952:	e9cd 2300 	strd	r2, r3, [sp]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800495a:	6939      	ldr	r1, [r7, #16]
 800495c:	6978      	ldr	r0, [r7, #20]
 800495e:	f7fe ffa6 	bl	80038ae <_ntoa_long_long>
 8004962:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004964:	e051      	b.n	8004a0a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d018      	beq.n	80049a2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004974:	1d1a      	adds	r2, r3, #4
 8004976:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800497e:	9205      	str	r2, [sp, #20]
 8004980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004982:	9204      	str	r2, [sp, #16]
 8004984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498a:	9202      	str	r2, [sp, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	9201      	str	r2, [sp, #4]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f7fe ff22 	bl	80037e2 <_ntoa_long>
 800499e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80049a0:	e033      	b.n	8004a0a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <_vsnprintf+0x674>
 80049ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e012      	b.n	80049e2 <_vsnprintf+0x69a>
 80049bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <_vsnprintf+0x68e>
 80049c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ca:	1d1a      	adds	r2, r3, #4
 80049cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	e005      	b.n	80049e2 <_vsnprintf+0x69a>
 80049d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049da:	1d1a      	adds	r2, r3, #4
 80049dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80049e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ee:	9303      	str	r3, [sp, #12]
 80049f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	2300      	movs	r3, #0
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7fe feed 	bl	80037e2 <_ntoa_long>
 8004a08:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
        break;
 8004a10:	e166      	b.n	8004ce0 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b46      	cmp	r3, #70	; 0x46
 8004a18:	d103      	bne.n	8004a22 <_vsnprintf+0x6da>
 8004a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1c:	f043 0320 	orr.w	r3, r3, #32
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a26:	3307      	adds	r3, #7
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	f103 0208 	add.w	r2, r3, #8
 8004a30:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a34:	ed93 7b00 	vldr	d7, [r3]
 8004a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	eeb0 0a47 	vmov.f32	s0, s14
 8004a48:	eef0 0a67 	vmov.f32	s1, s15
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	f7fe ff98 	bl	8003988 <_ftoa>
 8004a58:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
        break;
 8004a60:	e13e      	b.n	8004ce0 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b67      	cmp	r3, #103	; 0x67
 8004a68:	d003      	beq.n	8004a72 <_vsnprintf+0x72a>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b47      	cmp	r3, #71	; 0x47
 8004a70:	d103      	bne.n	8004a7a <_vsnprintf+0x732>
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a78:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b45      	cmp	r3, #69	; 0x45
 8004a80:	d003      	beq.n	8004a8a <_vsnprintf+0x742>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b47      	cmp	r3, #71	; 0x47
 8004a88:	d103      	bne.n	8004a92 <_vsnprintf+0x74a>
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a96:	3307      	adds	r3, #7
 8004a98:	f023 0307 	bic.w	r3, r3, #7
 8004a9c:	f103 0208 	add.w	r2, r3, #8
 8004aa0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004aa4:	ed93 7b00 	vldr	d7, [r3]
 8004aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aaa:	9302      	str	r3, [sp, #8]
 8004aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ab8:	eef0 0a67 	vmov.f32	s1, s15
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac0:	6939      	ldr	r1, [r7, #16]
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff f9b8 	bl	8003e38 <_etoa>
 8004ac8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
        break;
 8004ad0:	e106      	b.n	8004ce0 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10e      	bne.n	8004afe <_vsnprintf+0x7b6>
          while (l++ < width) {
 8004ae0:	e007      	b.n	8004af2 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8004ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae4:	1c53      	adds	r3, r2, #1
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae8:	697c      	ldr	r4, [r7, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6939      	ldr	r1, [r7, #16]
 8004aee:	2020      	movs	r0, #32
 8004af0:	47a0      	blx	r4
          while (l++ < width) {
 8004af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	647a      	str	r2, [r7, #68]	; 0x44
 8004af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d8f1      	bhi.n	8004ae2 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b02:	1d1a      	adds	r2, r3, #4
 8004b04:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	b2d8      	uxtb	r0, r3
 8004b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b0e:	1c53      	adds	r3, r2, #1
 8004b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b12:	697c      	ldr	r4, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00e      	beq.n	8004b42 <_vsnprintf+0x7fa>
          while (l++ < width) {
 8004b24:	e007      	b.n	8004b36 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8004b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b28:	1c53      	adds	r3, r2, #1
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b2c:	697c      	ldr	r4, [r7, #20]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6939      	ldr	r1, [r7, #16]
 8004b32:	2020      	movs	r0, #32
 8004b34:	47a0      	blx	r4
          while (l++ < width) {
 8004b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d8f1      	bhi.n	8004b26 <_vsnprintf+0x7de>
          }
        }
        format++;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60bb      	str	r3, [r7, #8]
        break;
 8004b48:	e0ca      	b.n	8004ce0 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <_vsnprintf+0x81a>
 8004b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b60:	e001      	b.n	8004b66 <_vsnprintf+0x81e>
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	4619      	mov	r1, r3
 8004b68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004b6a:	f7fe fcb6 	bl	80034da <_strnlen_s>
 8004b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8004b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	bf28      	it	cs
 8004b82:	4613      	movcs	r3, r2
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d11a      	bne.n	8004bc6 <_vsnprintf+0x87e>
          while (l++ < width) {
 8004b90:	e007      	b.n	8004ba2 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8004b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b94:	1c53      	adds	r3, r2, #1
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	697c      	ldr	r4, [r7, #20]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6939      	ldr	r1, [r7, #16]
 8004b9e:	2020      	movs	r0, #32
 8004ba0:	47a0      	blx	r4
          while (l++ < width) {
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d8f1      	bhi.n	8004b92 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004bae:	e00a      	b.n	8004bc6 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	643a      	str	r2, [r7, #64]	; 0x40
 8004bb6:	7818      	ldrb	r0, [r3, #0]
 8004bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bba:	1c53      	adds	r3, r2, #1
 8004bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bbe:	697c      	ldr	r4, [r7, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6939      	ldr	r1, [r7, #16]
 8004bc4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <_vsnprintf+0x89a>
 8004bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0eb      	beq.n	8004bb0 <_vsnprintf+0x868>
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bda:	1e5a      	subs	r2, r3, #1
 8004bdc:	657a      	str	r2, [r7, #84]	; 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e6      	bne.n	8004bb0 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00e      	beq.n	8004c0a <_vsnprintf+0x8c2>
          while (l++ < width) {
 8004bec:	e007      	b.n	8004bfe <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8004bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bf0:	1c53      	adds	r3, r2, #1
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	697c      	ldr	r4, [r7, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6939      	ldr	r1, [r7, #16]
 8004bfa:	2020      	movs	r0, #32
 8004bfc:	47a0      	blx	r4
          while (l++ < width) {
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d8f1      	bhi.n	8004bee <_vsnprintf+0x8a6>
          }
        }
        format++;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
        break;
 8004c10:	e066      	b.n	8004ce0 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004c12:	2308      	movs	r3, #8
 8004c14:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c18:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004c24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d023      	beq.n	8004c74 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c30:	1d1a      	adds	r2, r3, #4
 8004c32:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	603a      	str	r2, [r7, #0]
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c42:	9308      	str	r3, [sp, #32]
 8004c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c46:	9307      	str	r3, [sp, #28]
 8004c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4a:	9306      	str	r3, [sp, #24]
 8004c4c:	f04f 0210 	mov.w	r2, #16
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c60:	e9cd 3400 	strd	r3, r4, [sp]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c68:	6939      	ldr	r1, [r7, #16]
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7fe fe1f 	bl	80038ae <_ntoa_long_long>
 8004c70:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004c72:	e018      	b.n	8004ca6 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	2310      	movs	r3, #16
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	2300      	movs	r3, #0
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	9200      	str	r2, [sp, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c9c:	6939      	ldr	r1, [r7, #16]
 8004c9e:	6978      	ldr	r0, [r7, #20]
 8004ca0:	f7fe fd9f 	bl	80037e2 <_ntoa_long>
 8004ca4:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
        break;
 8004cac:	e018      	b.n	8004ce0 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cb0:	1c53      	adds	r3, r2, #1
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb4:	697c      	ldr	r4, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6939      	ldr	r1, [r7, #16]
 8004cba:	2025      	movs	r0, #37	; 0x25
 8004cbc:	47a0      	blx	r4
        format++;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
        break;
 8004cc4:	e00c      	b.n	8004ce0 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	7818      	ldrb	r0, [r3, #0]
 8004cca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ccc:	1c53      	adds	r3, r2, #1
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd0:	697c      	ldr	r4, [r7, #20]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6939      	ldr	r1, [r7, #16]
 8004cd6:	47a0      	blx	r4
        format++;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
        break;
 8004cde:	bf00      	nop
  while (*format)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f ab41 	bne.w	800436c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <_vsnprintf+0x9b0>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	e000      	b.n	8004cfa <_vsnprintf+0x9b2>
 8004cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cfa:	697c      	ldr	r4, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6939      	ldr	r1, [r7, #16]
 8004d00:	2000      	movs	r0, #0
 8004d02:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3764      	adds	r7, #100	; 0x64
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004d10 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004d10:	b40f      	push	{r0, r1, r2, r3}
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004d18:	f107 031c 	add.w	r3, r7, #28
 8004d1c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004d1e:	1d39      	adds	r1, r7, #4
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	4806      	ldr	r0, [pc, #24]	; (8004d44 <printf_+0x34>)
 8004d2c:	f7ff fb0c 	bl	8004348 <_vsnprintf>
 8004d30:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3e:	b004      	add	sp, #16
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	080034b5 	.word	0x080034b5

08004d48 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004d48:	b40e      	push	{r1, r2, r3}
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af02      	add	r7, sp, #8
 8004d50:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004d52:	f107 0320 	add.w	r3, r7, #32
 8004d56:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4805      	ldr	r0, [pc, #20]	; (8004d7c <sprintf_+0x34>)
 8004d66:	f7ff faef 	bl	8004348 <_vsnprintf>
 8004d6a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d78:	b003      	add	sp, #12
 8004d7a:	4770      	bx	lr
 8004d7c:	0800346b 	.word	0x0800346b

08004d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_MspInit+0x4c>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <HAL_MspInit+0x4c>)
 8004da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <HAL_MspInit+0x4c>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	210f      	movs	r1, #15
 8004dba:	f06f 0001 	mvn.w	r0, #1
 8004dbe:	f000 fca1 	bl	8005704 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004de0:	2200      	movs	r2, #0
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	202d      	movs	r0, #45	; 0x2d
 8004de6:	f000 fc8d 	bl	8005704 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004dea:	202d      	movs	r0, #45	; 0x2d
 8004dec:	f000 fca6 	bl	800573c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004df0:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <HAL_InitTick+0xa0>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_InitTick+0xa0>)
 8004df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <HAL_InitTick+0xa0>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e08:	f107 0210 	add.w	r2, r7, #16
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f002 fa50 	bl	80072b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004e18:	f002 fa26 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <HAL_InitTick+0xa4>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0c9b      	lsrs	r3, r3, #18
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <HAL_InitTick+0xac>)
 8004e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e3c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004e3e:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004e50:	4809      	ldr	r0, [pc, #36]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e52:	f002 fe53 	bl	8007afc <HAL_TIM_Base_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004e5c:	4806      	ldr	r0, [pc, #24]	; (8004e78 <HAL_InitTick+0xa8>)
 8004e5e:	f002 fea5 	bl	8007bac <HAL_TIM_Base_Start_IT>
 8004e62:	4603      	mov	r3, r0
 8004e64:	e000      	b.n	8004e68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	; 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	431bde83 	.word	0x431bde83
 8004e78:	200005d8 	.word	0x200005d8
 8004e7c:	40002000 	.word	0x40002000

08004e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <NMI_Handler+0x4>

08004e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8a:	e7fe      	b.n	8004e8a <HardFault_Handler+0x4>

08004e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <MemManage_Handler+0x4>

08004e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <BusFault_Handler+0x4>

08004e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <UsageFault_Handler+0x4>

08004e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_1_Pin);
 8004eb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004eb4:	f000 fec2 	bl	8005c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_1_Pin);
 8004eb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ebc:	f000 febe 	bl	8005c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ec8:	4802      	ldr	r0, [pc, #8]	; (8004ed4 <USART3_IRQHandler+0x10>)
 8004eca:	f004 f8b7 	bl	800903c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000754 	.word	0x20000754

08004ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_2_Pin);
 8004edc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ee0:	f000 feac 	bl	8005c3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_2_Pin);
 8004ee4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ee8:	f000 fea8 	bl	8005c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004eec:	bf00      	nop
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004ef4:	4802      	ldr	r0, [pc, #8]	; (8004f00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004ef6:	f002 ff32 	bl	8007d5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200005d8 	.word	0x200005d8

08004f04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <SystemInit+0x20>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <SystemInit+0x20>)
 8004f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	; 0x38
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	605a      	str	r2, [r3, #4]
 8004f38:	609a      	str	r2, [r3, #8]
 8004f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f3c:	f107 031c 	add.w	r3, r7, #28
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f48:	463b      	mov	r3, r7
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	611a      	str	r2, [r3, #16]
 8004f56:	615a      	str	r2, [r3, #20]
 8004f58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8004f62:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f64:	2247      	movs	r2, #71	; 0x47
 8004f66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f82:	4824      	ldr	r0, [pc, #144]	; (8005014 <MX_TIM2_Init+0xec>)
 8004f84:	f002 fdba 	bl	8007afc <HAL_TIM_Base_Init>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004f8e:	f7fe fa67 	bl	8003460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	481d      	ldr	r0, [pc, #116]	; (8005014 <MX_TIM2_Init+0xec>)
 8004fa0:	f003 f910 	bl	80081c4 <HAL_TIM_ConfigClockSource>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004faa:	f7fe fa59 	bl	8003460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004fae:	4819      	ldr	r0, [pc, #100]	; (8005014 <MX_TIM2_Init+0xec>)
 8004fb0:	f002 fe74 	bl	8007c9c <HAL_TIM_PWM_Init>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004fba:	f7fe fa51 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004fbe:	2320      	movs	r3, #32
 8004fc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fc6:	f107 031c 	add.w	r3, r7, #28
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4811      	ldr	r0, [pc, #68]	; (8005014 <MX_TIM2_Init+0xec>)
 8004fce:	f003 fe59 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004fd8:	f7fe fa42 	bl	8003460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fdc:	2360      	movs	r3, #96	; 0x60
 8004fde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8004fe0:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fee:	463b      	mov	r3, r7
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4807      	ldr	r0, [pc, #28]	; (8005014 <MX_TIM2_Init+0xec>)
 8004ff6:	f002 ffd1 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005000:	f7fe fa2e 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005004:	4803      	ldr	r0, [pc, #12]	; (8005014 <MX_TIM2_Init+0xec>)
 8005006:	f000 f979 	bl	80052fc <HAL_TIM_MspPostInit>

}
 800500a:	bf00      	nop
 800500c:	3738      	adds	r7, #56	; 0x38
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000624 	.word	0x20000624

08005018 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800501e:	f107 030c 	add.w	r3, r7, #12
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800502e:	463b      	mov	r3, r7
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <MX_TIM3_Init+0x98>)
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <MX_TIM3_Init+0x9c>)
 800503c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800503e:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <MX_TIM3_Init+0x98>)
 8005040:	2200      	movs	r2, #0
 8005042:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <MX_TIM3_Init+0x98>)
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800504a:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <MX_TIM3_Init+0x98>)
 800504c:	2200      	movs	r2, #0
 800504e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <MX_TIM3_Init+0x98>)
 8005052:	2200      	movs	r2, #0
 8005054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <MX_TIM3_Init+0x98>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800505c:	4814      	ldr	r0, [pc, #80]	; (80050b0 <MX_TIM3_Init+0x98>)
 800505e:	f002 fd4d 	bl	8007afc <HAL_TIM_Base_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005068:	f7fe f9fa 	bl	8003460 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800506c:	2307      	movs	r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8005070:	2310      	movs	r3, #16
 8005072:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8005074:	f107 030c 	add.w	r3, r7, #12
 8005078:	4619      	mov	r1, r3
 800507a:	480d      	ldr	r0, [pc, #52]	; (80050b0 <MX_TIM3_Init+0x98>)
 800507c:	f003 f96c 	bl	8008358 <HAL_TIM_SlaveConfigSynchro>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8005086:	f7fe f9eb 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800508e:	2300      	movs	r3, #0
 8005090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005092:	463b      	mov	r3, r7
 8005094:	4619      	mov	r1, r3
 8005096:	4806      	ldr	r0, [pc, #24]	; (80050b0 <MX_TIM3_Init+0x98>)
 8005098:	f003 fdf4 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80050a2:	f7fe f9dd 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80050a6:	bf00      	nop
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000670 	.word	0x20000670
 80050b4:	40000400 	.word	0x40000400

080050b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08e      	sub	sp, #56	; 0x38
 80050bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050cc:	f107 031c 	add.w	r3, r7, #28
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050d8:	463b      	mov	r3, r7
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	609a      	str	r2, [r3, #8]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	611a      	str	r2, [r3, #16]
 80050e6:	615a      	str	r2, [r3, #20]
 80050e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050ea:	4b2d      	ldr	r3, [pc, #180]	; (80051a0 <MX_TIM4_Init+0xe8>)
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <MX_TIM4_Init+0xec>)
 80050ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80050f0:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <MX_TIM4_Init+0xe8>)
 80050f2:	2247      	movs	r2, #71	; 0x47
 80050f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <MX_TIM4_Init+0xe8>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80050fc:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <MX_TIM4_Init+0xe8>)
 80050fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005102:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005104:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <MX_TIM4_Init+0xe8>)
 8005106:	2200      	movs	r2, #0
 8005108:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <MX_TIM4_Init+0xe8>)
 800510c:	2200      	movs	r2, #0
 800510e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005110:	4823      	ldr	r0, [pc, #140]	; (80051a0 <MX_TIM4_Init+0xe8>)
 8005112:	f002 fcf3 	bl	8007afc <HAL_TIM_Base_Init>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800511c:	f7fe f9a0 	bl	8003460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800512a:	4619      	mov	r1, r3
 800512c:	481c      	ldr	r0, [pc, #112]	; (80051a0 <MX_TIM4_Init+0xe8>)
 800512e:	f003 f849 	bl	80081c4 <HAL_TIM_ConfigClockSource>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005138:	f7fe f992 	bl	8003460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800513c:	4818      	ldr	r0, [pc, #96]	; (80051a0 <MX_TIM4_Init+0xe8>)
 800513e:	f002 fdad 	bl	8007c9c <HAL_TIM_PWM_Init>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005148:	f7fe f98a 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800514c:	2320      	movs	r3, #32
 800514e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005150:	2300      	movs	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005154:	f107 031c 	add.w	r3, r7, #28
 8005158:	4619      	mov	r1, r3
 800515a:	4811      	ldr	r0, [pc, #68]	; (80051a0 <MX_TIM4_Init+0xe8>)
 800515c:	f003 fd92 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005166:	f7fe f97b 	bl	8003460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800516a:	2360      	movs	r3, #96	; 0x60
 800516c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 800516e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005172:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005174:	2300      	movs	r3, #0
 8005176:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800517c:	463b      	mov	r3, r7
 800517e:	2200      	movs	r2, #0
 8005180:	4619      	mov	r1, r3
 8005182:	4807      	ldr	r0, [pc, #28]	; (80051a0 <MX_TIM4_Init+0xe8>)
 8005184:	f002 ff0a 	bl	8007f9c <HAL_TIM_PWM_ConfigChannel>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800518e:	f7fe f967 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005192:	4803      	ldr	r0, [pc, #12]	; (80051a0 <MX_TIM4_Init+0xe8>)
 8005194:	f000 f8b2 	bl	80052fc <HAL_TIM_MspPostInit>

}
 8005198:	bf00      	nop
 800519a:	3738      	adds	r7, #56	; 0x38
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200006bc 	.word	0x200006bc
 80051a4:	40000800 	.word	0x40000800

080051a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	60da      	str	r2, [r3, #12]
 80051bc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051be:	463b      	mov	r3, r7
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <MX_TIM5_Init+0x98>)
 80051ca:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <MX_TIM5_Init+0x9c>)
 80051cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80051ce:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <MX_TIM5_Init+0x98>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <MX_TIM5_Init+0x98>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80051da:	4b19      	ldr	r3, [pc, #100]	; (8005240 <MX_TIM5_Init+0x98>)
 80051dc:	2200      	movs	r2, #0
 80051de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <MX_TIM5_Init+0x98>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051e6:	4b16      	ldr	r3, [pc, #88]	; (8005240 <MX_TIM5_Init+0x98>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80051ec:	4814      	ldr	r0, [pc, #80]	; (8005240 <MX_TIM5_Init+0x98>)
 80051ee:	f002 fc85 	bl	8007afc <HAL_TIM_Base_Init>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80051f8:	f7fe f932 	bl	8003460 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80051fc:	2307      	movs	r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8005200:	2320      	movs	r3, #32
 8005202:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8005204:	f107 030c 	add.w	r3, r7, #12
 8005208:	4619      	mov	r1, r3
 800520a:	480d      	ldr	r0, [pc, #52]	; (8005240 <MX_TIM5_Init+0x98>)
 800520c:	f003 f8a4 	bl	8008358 <HAL_TIM_SlaveConfigSynchro>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8005216:	f7fe f923 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800521a:	2300      	movs	r3, #0
 800521c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005222:	463b      	mov	r3, r7
 8005224:	4619      	mov	r1, r3
 8005226:	4806      	ldr	r0, [pc, #24]	; (8005240 <MX_TIM5_Init+0x98>)
 8005228:	f003 fd2c 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8005232:	f7fe f915 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005236:	bf00      	nop
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000708 	.word	0x20000708
 8005244:	40000c00 	.word	0x40000c00

08005248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d10c      	bne.n	8005274 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	4a23      	ldr	r2, [pc, #140]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	6413      	str	r3, [r2, #64]	; 0x40
 8005266:	4b21      	ldr	r3, [pc, #132]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005272:	e034      	b.n	80052de <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_TIM_Base_MspInit+0xa8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10c      	bne.n	8005298 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
}
 8005296:	e022      	b.n	80052de <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <HAL_TIM_Base_MspInit+0xac>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a11      	ldr	r2, [pc, #68]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	e010      	b.n	80052de <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <HAL_TIM_Base_MspInit+0xb0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10b      	bne.n	80052de <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 80052cc:	f043 0308 	orr.w	r3, r3, #8
 80052d0:	6413      	str	r3, [r2, #64]	; 0x40
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_TIM_Base_MspInit+0xa4>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00

080052fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d11d      	bne.n	800535a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531e:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <HAL_TIM_MspPostInit+0xac>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <HAL_TIM_MspPostInit+0xac>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <HAL_TIM_MspPostInit+0xac>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_SYRINGE_Pin;
 8005336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005348:	2301      	movs	r3, #1
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SYRINGE_GPIO_Port, &GPIO_InitStruct);
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	4619      	mov	r1, r3
 8005352:	4816      	ldr	r0, [pc, #88]	; (80053ac <HAL_TIM_MspPostInit+0xb0>)
 8005354:	f000 fa92 	bl	800587c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005358:	e021      	b.n	800539e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <HAL_TIM_MspPostInit+0xb4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d11c      	bne.n	800539e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_TIM_MspPostInit+0xac>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <HAL_TIM_MspPostInit+0xac>)
 800536a:	f043 0308 	orr.w	r3, r3, #8
 800536e:	6313      	str	r3, [r2, #48]	; 0x30
 8005370:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <HAL_TIM_MspPostInit+0xac>)
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_NEEDLE_Pin;
 800537c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005382:	2302      	movs	r3, #2
 8005384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538a:	2300      	movs	r3, #0
 800538c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800538e:	2302      	movs	r3, #2
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_NEEDLE_GPIO_Port, &GPIO_InitStruct);
 8005392:	f107 0314 	add.w	r3, r7, #20
 8005396:	4619      	mov	r1, r3
 8005398:	4806      	ldr	r0, [pc, #24]	; (80053b4 <HAL_TIM_MspPostInit+0xb8>)
 800539a:	f000 fa6f 	bl	800587c <HAL_GPIO_Init>
}
 800539e:	bf00      	nop
 80053a0:	3728      	adds	r7, #40	; 0x28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40020c00 	.word	0x40020c00

080053b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80053bc:	4b14      	ldr	r3, [pc, #80]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053be:	4a15      	ldr	r2, [pc, #84]	; (8005414 <MX_USART3_UART_Init+0x5c>)
 80053c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053de:	220c      	movs	r2, #12
 80053e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <MX_USART3_UART_Init+0x58>)
 80053fc:	f003 fcee 	bl	8008ddc <HAL_UART_Init>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005406:	f7fe f82b 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000754 	.word	0x20000754
 8005414:	40004800 	.word	0x40004800

08005418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b0aa      	sub	sp, #168	; 0xa8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005430:	f107 0310 	add.w	r3, r7, #16
 8005434:	2284      	movs	r2, #132	; 0x84
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f009 f9b5 	bl	800e7a8 <memset>
  if(uartHandle->Instance==USART3)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a26      	ldr	r2, [pc, #152]	; (80054dc <HAL_UART_MspInit+0xc4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d144      	bne.n	80054d2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800544c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800544e:	2300      	movs	r3, #0
 8005450:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005452:	f107 0310 	add.w	r3, r7, #16
 8005456:	4618      	mov	r0, r3
 8005458:	f001 ff60 	bl	800731c <HAL_RCCEx_PeriphCLKConfig>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005462:	f7fd fffd 	bl	8003460 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005466:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <HAL_UART_MspInit+0xc8>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_UART_MspInit+0xc8>)
 800546c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <HAL_UART_MspInit+0xc8>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <HAL_UART_MspInit+0xc8>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <HAL_UART_MspInit+0xc8>)
 8005484:	f043 0308 	orr.w	r3, r3, #8
 8005488:	6313      	str	r3, [r2, #48]	; 0x30
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_UART_MspInit+0xc8>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800549a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549e:	2302      	movs	r3, #2
 80054a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054aa:	2303      	movs	r3, #3
 80054ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054b0:	2307      	movs	r3, #7
 80054b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80054ba:	4619      	mov	r1, r3
 80054bc:	4809      	ldr	r0, [pc, #36]	; (80054e4 <HAL_UART_MspInit+0xcc>)
 80054be:	f000 f9dd 	bl	800587c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80054c2:	2200      	movs	r2, #0
 80054c4:	2105      	movs	r1, #5
 80054c6:	2027      	movs	r0, #39	; 0x27
 80054c8:	f000 f91c 	bl	8005704 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054cc:	2027      	movs	r0, #39	; 0x27
 80054ce:	f000 f935 	bl	800573c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80054d2:	bf00      	nop
 80054d4:	37a8      	adds	r7, #168	; 0xa8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40004800 	.word	0x40004800
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40020c00 	.word	0x40020c00

080054e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054ec:	480d      	ldr	r0, [pc, #52]	; (8005524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054ee:	490e      	ldr	r1, [pc, #56]	; (8005528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054f0:	4a0e      	ldr	r2, [pc, #56]	; (800552c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054f4:	e002      	b.n	80054fc <LoopCopyDataInit>

080054f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054fa:	3304      	adds	r3, #4

080054fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005500:	d3f9      	bcc.n	80054f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005502:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005504:	4c0b      	ldr	r4, [pc, #44]	; (8005534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005508:	e001      	b.n	800550e <LoopFillZerobss>

0800550a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800550a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800550c:	3204      	adds	r2, #4

0800550e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800550e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005510:	d3fb      	bcc.n	800550a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005512:	f7ff fcf7 	bl	8004f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005516:	f009 f913 	bl	800e740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800551a:	f7fd ff01 	bl	8003320 <main>
  bx  lr    
 800551e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005520:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005528:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800552c:	0800f514 	.word	0x0800f514
  ldr r2, =_sbss
 8005530:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005534:	200092ec 	.word	0x200092ec

08005538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005538:	e7fe      	b.n	8005538 <ADC_IRQHandler>

0800553a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800553e:	2003      	movs	r0, #3
 8005540:	f000 f8d5 	bl	80056ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005544:	200f      	movs	r0, #15
 8005546:	f7ff fc43 	bl	8004dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800554a:	f7ff fc19 	bl	8004d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <HAL_IncTick+0x20>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_IncTick+0x24>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4413      	add	r3, r2
 8005564:	4a04      	ldr	r2, [pc, #16]	; (8005578 <HAL_IncTick+0x24>)
 8005566:	6013      	str	r3, [r2, #0]
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	2000000c 	.word	0x2000000c
 8005578:	200007d8 	.word	0x200007d8

0800557c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return uwTick;
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_GetTick+0x14>)
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	200007d8 	.word	0x200007d8

08005594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <__NVIC_SetPriorityGrouping+0x40>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055b0:	4013      	ands	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <__NVIC_SetPriorityGrouping+0x44>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055c2:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <__NVIC_SetPriorityGrouping+0x40>)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	60d3      	str	r3, [r2, #12]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e000ed00 	.word	0xe000ed00
 80055d8:	05fa0000 	.word	0x05fa0000

080055dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055e0:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <__NVIC_GetPriorityGrouping+0x18>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f003 0307 	and.w	r3, r3, #7
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005606:	2b00      	cmp	r3, #0
 8005608:	db0b      	blt.n	8005622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	f003 021f 	and.w	r2, r3, #31
 8005610:	4907      	ldr	r1, [pc, #28]	; (8005630 <__NVIC_EnableIRQ+0x38>)
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2001      	movs	r0, #1
 800561a:	fa00 f202 	lsl.w	r2, r0, r2
 800561e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000e100 	.word	0xe000e100

08005634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db0a      	blt.n	800565e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	490c      	ldr	r1, [pc, #48]	; (8005680 <__NVIC_SetPriority+0x4c>)
 800564e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	440b      	add	r3, r1
 8005658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800565c:	e00a      	b.n	8005674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	4908      	ldr	r1, [pc, #32]	; (8005684 <__NVIC_SetPriority+0x50>)
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	3b04      	subs	r3, #4
 800566c:	0112      	lsls	r2, r2, #4
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	440b      	add	r3, r1
 8005672:	761a      	strb	r2, [r3, #24]
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	e000e100 	.word	0xe000e100
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005688:	b480      	push	{r7}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f1c3 0307 	rsb	r3, r3, #7
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	bf28      	it	cs
 80056a6:	2304      	movcs	r3, #4
 80056a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3304      	adds	r3, #4
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d902      	bls.n	80056b8 <NVIC_EncodePriority+0x30>
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3b03      	subs	r3, #3
 80056b6:	e000      	b.n	80056ba <NVIC_EncodePriority+0x32>
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	401a      	ands	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056d0:	f04f 31ff 	mov.w	r1, #4294967295
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	43d9      	mvns	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e0:	4313      	orrs	r3, r2
         );
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3724      	adds	r7, #36	; 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff4c 	bl	8005594 <__NVIC_SetPriorityGrouping>
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005716:	f7ff ff61 	bl	80055dc <__NVIC_GetPriorityGrouping>
 800571a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	6978      	ldr	r0, [r7, #20]
 8005722:	f7ff ffb1 	bl	8005688 <NVIC_EncodePriority>
 8005726:	4602      	mov	r2, r0
 8005728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff80 	bl	8005634 <__NVIC_SetPriority>
}
 8005734:	bf00      	nop
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ff54 	bl	80055f8 <__NVIC_EnableIRQ>
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005766:	f7ff ff09 	bl	800557c <HAL_GetTick>
 800576a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d008      	beq.n	800578a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e052      	b.n	8005830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0216 	bic.w	r2, r2, #22
 8005798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <HAL_DMA_Abort+0x62>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0208 	bic.w	r2, r2, #8
 80057c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057da:	e013      	b.n	8005804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057dc:	f7ff fece 	bl	800557c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d90c      	bls.n	8005804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e015      	b.n	8005830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e4      	bne.n	80057dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005816:	223f      	movs	r2, #63	; 0x3f
 8005818:	409a      	lsls	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d004      	beq.n	8005856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e00c      	b.n	8005870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2205      	movs	r2, #5
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800587c:	b480      	push	{r7}
 800587e:	b089      	sub	sp, #36	; 0x24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	e175      	b.n	8005b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800589c:	2201      	movs	r2, #1
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4013      	ands	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	f040 8164 	bne.w	8005b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d005      	beq.n	80058d2 <HAL_GPIO_Init+0x56>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d130      	bne.n	8005934 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	2203      	movs	r2, #3
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4013      	ands	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005908:	2201      	movs	r2, #1
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43db      	mvns	r3, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 0201 	and.w	r2, r3, #1
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b03      	cmp	r3, #3
 800593e:	d017      	beq.n	8005970 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	2203      	movs	r2, #3
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d123      	bne.n	80059c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	08da      	lsrs	r2, r3, #3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3208      	adds	r2, #8
 8005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	220f      	movs	r2, #15
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	08da      	lsrs	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3208      	adds	r2, #8
 80059be:	69b9      	ldr	r1, [r7, #24]
 80059c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	2203      	movs	r2, #3
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 0203 	and.w	r2, r3, #3
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80be 	beq.w	8005b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a06:	4b66      	ldr	r3, [pc, #408]	; (8005ba0 <HAL_GPIO_Init+0x324>)
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	4a65      	ldr	r2, [pc, #404]	; (8005ba0 <HAL_GPIO_Init+0x324>)
 8005a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a10:	6453      	str	r3, [r2, #68]	; 0x44
 8005a12:	4b63      	ldr	r3, [pc, #396]	; (8005ba0 <HAL_GPIO_Init+0x324>)
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a1e:	4a61      	ldr	r2, [pc, #388]	; (8005ba4 <HAL_GPIO_Init+0x328>)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	3302      	adds	r3, #2
 8005a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	220f      	movs	r2, #15
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a58      	ldr	r2, [pc, #352]	; (8005ba8 <HAL_GPIO_Init+0x32c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d037      	beq.n	8005aba <HAL_GPIO_Init+0x23e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a57      	ldr	r2, [pc, #348]	; (8005bac <HAL_GPIO_Init+0x330>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d031      	beq.n	8005ab6 <HAL_GPIO_Init+0x23a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a56      	ldr	r2, [pc, #344]	; (8005bb0 <HAL_GPIO_Init+0x334>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d02b      	beq.n	8005ab2 <HAL_GPIO_Init+0x236>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a55      	ldr	r2, [pc, #340]	; (8005bb4 <HAL_GPIO_Init+0x338>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d025      	beq.n	8005aae <HAL_GPIO_Init+0x232>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a54      	ldr	r2, [pc, #336]	; (8005bb8 <HAL_GPIO_Init+0x33c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01f      	beq.n	8005aaa <HAL_GPIO_Init+0x22e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a53      	ldr	r2, [pc, #332]	; (8005bbc <HAL_GPIO_Init+0x340>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d019      	beq.n	8005aa6 <HAL_GPIO_Init+0x22a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_GPIO_Init+0x344>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_GPIO_Init+0x226>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a51      	ldr	r2, [pc, #324]	; (8005bc4 <HAL_GPIO_Init+0x348>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00d      	beq.n	8005a9e <HAL_GPIO_Init+0x222>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a50      	ldr	r2, [pc, #320]	; (8005bc8 <HAL_GPIO_Init+0x34c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <HAL_GPIO_Init+0x21e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a4f      	ldr	r2, [pc, #316]	; (8005bcc <HAL_GPIO_Init+0x350>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <HAL_GPIO_Init+0x21a>
 8005a92:	2309      	movs	r3, #9
 8005a94:	e012      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005a96:	230a      	movs	r3, #10
 8005a98:	e010      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	e00e      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005a9e:	2307      	movs	r3, #7
 8005aa0:	e00c      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aa2:	2306      	movs	r3, #6
 8005aa4:	e00a      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aa6:	2305      	movs	r3, #5
 8005aa8:	e008      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aaa:	2304      	movs	r3, #4
 8005aac:	e006      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e004      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e002      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_GPIO_Init+0x240>
 8005aba:	2300      	movs	r3, #0
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	f002 0203 	and.w	r2, r2, #3
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	4093      	lsls	r3, r2
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005acc:	4935      	ldr	r1, [pc, #212]	; (8005ba4 <HAL_GPIO_Init+0x328>)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	089b      	lsrs	r3, r3, #2
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ada:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005afe:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b04:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b28:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b2e:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b52:	4a1f      	ldr	r2, [pc, #124]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b7c:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <HAL_GPIO_Init+0x354>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	f67f ae86 	bls.w	800589c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40013800 	.word	0x40013800
 8005ba8:	40020000 	.word	0x40020000
 8005bac:	40020400 	.word	0x40020400
 8005bb0:	40020800 	.word	0x40020800
 8005bb4:	40020c00 	.word	0x40020c00
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40021400 	.word	0x40021400
 8005bc0:	40021800 	.word	0x40021800
 8005bc4:	40021c00 	.word	0x40021c00
 8005bc8:	40022000 	.word	0x40022000
 8005bcc:	40022400 	.word	0x40022400
 8005bd0:	40013c00 	.word	0x40013c00

08005bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]
 8005be0:	4613      	mov	r3, r2
 8005be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005be4:	787b      	ldrb	r3, [r7, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bea:	887a      	ldrh	r2, [r7, #2]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005bf0:	e003      	b.n	8005bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005bf2:	887b      	ldrh	r3, [r7, #2]
 8005bf4:	041a      	lsls	r2, r3, #16
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	619a      	str	r2, [r3, #24]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c18:	887a      	ldrh	r2, [r7, #2]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	041a      	lsls	r2, r3, #16
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	43d9      	mvns	r1, r3
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	400b      	ands	r3, r1
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d006      	beq.n	8005c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c52:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fd f8d8 	bl	8002e10 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40013c00 	.word	0x40013c00

08005c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07f      	b.n	8005d7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fd fa9e 	bl	80031d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	; 0x24
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d107      	bne.n	8005ce6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	e006      	b.n	8005cf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d104      	bne.n	8005d06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <HAL_I2C_Init+0x11c>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69d9      	ldr	r1, [r3, #28]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	02008000 	.word	0x02008000

08005d8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	4608      	mov	r0, r1
 8005d96:	4611      	mov	r1, r2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	817b      	strh	r3, [r7, #10]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	813b      	strh	r3, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	f040 80f9 	bne.w	8005fa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_I2C_Mem_Write+0x34>
 8005dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0ed      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_I2C_Mem_Write+0x4e>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0e6      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005de2:	f7ff fbcb 	bl	800557c <HAL_GetTick>
 8005de6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2319      	movs	r3, #25
 8005dee:	2201      	movs	r2, #1
 8005df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fac3 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0d1      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2221      	movs	r2, #33	; 0x21
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2240      	movs	r2, #64	; 0x40
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a3a      	ldr	r2, [r7, #32]
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e2c:	88f8      	ldrh	r0, [r7, #6]
 8005e2e:	893a      	ldrh	r2, [r7, #8]
 8005e30:	8979      	ldrh	r1, [r7, #10]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f9d3 	bl	80061e8 <I2C_RequestMemoryWrite>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0a9      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2bff      	cmp	r3, #255	; 0xff
 8005e5c:	d90e      	bls.n	8005e7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	22ff      	movs	r2, #255	; 0xff
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	8979      	ldrh	r1, [r7, #10]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fc2b 	bl	80066d0 <I2C_TransferConfig>
 8005e7a:	e00f      	b.n	8005e9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	8979      	ldrh	r1, [r7, #10]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fc1a 	bl	80066d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 faad 	bl	8006400 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e07b      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d034      	beq.n	8005f54 <HAL_I2C_Mem_Write+0x1c8>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d130      	bne.n	8005f54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa3f 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e04d      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2bff      	cmp	r3, #255	; 0xff
 8005f14:	d90e      	bls.n	8005f34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	8979      	ldrh	r1, [r7, #10]
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fbcf 	bl	80066d0 <I2C_TransferConfig>
 8005f32:	e00f      	b.n	8005f54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	8979      	ldrh	r1, [r7, #10]
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fbbe 	bl	80066d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d19e      	bne.n	8005e9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fa8c 	bl	8006480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e01a      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2220      	movs	r2, #32
 8005f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_I2C_Mem_Write+0x224>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e000      	b.n	8005fa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
  }
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	fe00e800 	.word	0xfe00e800

08005fb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	f040 80fd 	bne.w	80061d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_I2C_Mem_Read+0x34>
 8005fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d105      	bne.n	8005ff4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0f1      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_I2C_Mem_Read+0x4e>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e0ea      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800600a:	f7ff fab7 	bl	800557c <HAL_GetTick>
 800600e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	2319      	movs	r3, #25
 8006016:	2201      	movs	r2, #1
 8006018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f9af 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0d5      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2222      	movs	r2, #34	; 0x22
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800604c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006054:	88f8      	ldrh	r0, [r7, #6]
 8006056:	893a      	ldrh	r2, [r7, #8]
 8006058:	8979      	ldrh	r1, [r7, #10]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4603      	mov	r3, r0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f913 	bl	8006290 <I2C_RequestMemoryRead>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0ad      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2bff      	cmp	r3, #255	; 0xff
 8006084:	d90e      	bls.n	80060a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	22ff      	movs	r2, #255	; 0xff
 800608a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	b2da      	uxtb	r2, r3
 8006092:	8979      	ldrh	r1, [r7, #10]
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <HAL_I2C_Mem_Read+0x22c>)
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fb17 	bl	80066d0 <I2C_TransferConfig>
 80060a2:	e00f      	b.n	80060c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	8979      	ldrh	r1, [r7, #10]
 80060b6:	4b4a      	ldr	r3, [pc, #296]	; (80061e0 <HAL_I2C_Mem_Read+0x22c>)
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fb06 	bl	80066d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	2200      	movs	r2, #0
 80060cc:	2104      	movs	r1, #4
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f956 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e07c      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d034      	beq.n	8006184 <HAL_I2C_Mem_Read+0x1d0>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d130      	bne.n	8006184 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	2200      	movs	r2, #0
 800612a:	2180      	movs	r1, #128	; 0x80
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f927 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e04d      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2bff      	cmp	r3, #255	; 0xff
 8006144:	d90e      	bls.n	8006164 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	22ff      	movs	r2, #255	; 0xff
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	b2da      	uxtb	r2, r3
 8006152:	8979      	ldrh	r1, [r7, #10]
 8006154:	2300      	movs	r3, #0
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fab7 	bl	80066d0 <I2C_TransferConfig>
 8006162:	e00f      	b.n	8006184 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	b2da      	uxtb	r2, r3
 8006174:	8979      	ldrh	r1, [r7, #10]
 8006176:	2300      	movs	r3, #0
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 faa6 	bl	80066d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d19a      	bne.n	80060c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f974 	bl	8006480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e01a      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2220      	movs	r2, #32
 80061a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <HAL_I2C_Mem_Read+0x230>)
 80061b6:	400b      	ands	r3, r1
 80061b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	80002400 	.word	0x80002400
 80061e4:	fe00e800 	.word	0xfe00e800

080061e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	817b      	strh	r3, [r7, #10]
 80061fa:	460b      	mov	r3, r1
 80061fc:	813b      	strh	r3, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	8979      	ldrh	r1, [r7, #10]
 8006208:	4b20      	ldr	r3, [pc, #128]	; (800628c <I2C_RequestMemoryWrite+0xa4>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fa5d 	bl	80066d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f8f0 	bl	8006400 <I2C_WaitOnTXISFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e02c      	b.n	8006284 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d105      	bne.n	800623c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006230:	893b      	ldrh	r3, [r7, #8]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	629a      	str	r2, [r3, #40]	; 0x28
 800623a:	e015      	b.n	8006268 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800623c:	893b      	ldrh	r3, [r7, #8]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	b29b      	uxth	r3, r3
 8006242:	b2da      	uxtb	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	69b9      	ldr	r1, [r7, #24]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f8d6 	bl	8006400 <I2C_WaitOnTXISFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e012      	b.n	8006284 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800625e:	893b      	ldrh	r3, [r7, #8]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2200      	movs	r2, #0
 8006270:	2180      	movs	r1, #128	; 0x80
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f884 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	80002000 	.word	0x80002000

08006290 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	817b      	strh	r3, [r7, #10]
 80062a2:	460b      	mov	r3, r1
 80062a4:	813b      	strh	r3, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	8979      	ldrh	r1, [r7, #10]
 80062b0:	4b20      	ldr	r3, [pc, #128]	; (8006334 <I2C_RequestMemoryRead+0xa4>)
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2300      	movs	r3, #0
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa0a 	bl	80066d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	69b9      	ldr	r1, [r7, #24]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f89d 	bl	8006400 <I2C_WaitOnTXISFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02c      	b.n	800632a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d105      	bne.n	80062e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062d6:	893b      	ldrh	r3, [r7, #8]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
 80062e0:	e015      	b.n	800630e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062e2:	893b      	ldrh	r3, [r7, #8]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	69b9      	ldr	r1, [r7, #24]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f883 	bl	8006400 <I2C_WaitOnTXISFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e012      	b.n	800632a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006304:	893b      	ldrh	r3, [r7, #8]
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2200      	movs	r2, #0
 8006316:	2140      	movs	r1, #64	; 0x40
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f831 	bl	8006380 <I2C_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	80002000 	.word	0x80002000

08006338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b02      	cmp	r3, #2
 800634c:	d103      	bne.n	8006356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2200      	movs	r2, #0
 8006354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d007      	beq.n	8006374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	619a      	str	r2, [r3, #24]
  }
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006390:	e022      	b.n	80063d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d01e      	beq.n	80063d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639a:	f7ff f8ef 	bl	800557c <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d302      	bcc.n	80063b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d113      	bne.n	80063d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e00f      	b.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4013      	ands	r3, r2
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	bf0c      	ite	eq
 80063e8:	2301      	moveq	r3, #1
 80063ea:	2300      	movne	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d0cd      	beq.n	8006392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800640c:	e02c      	b.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f870 	bl	80064f8 <I2C_IsErrorOccurred>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e02a      	b.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d01e      	beq.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642a:	f7ff f8a7 	bl	800557c <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d113      	bne.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006444:	f043 0220 	orr.w	r2, r3, #32
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e007      	b.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b02      	cmp	r3, #2
 8006474:	d1cb      	bne.n	800640e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800648c:	e028      	b.n	80064e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f830 	bl	80064f8 <I2C_IsErrorOccurred>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e026      	b.n	80064f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7ff f86b 	bl	800557c <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e007      	b.n	80064f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d1cf      	bne.n	800648e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b00      	cmp	r3, #0
 8006522:	d075      	beq.n	8006610 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2210      	movs	r2, #16
 800652a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800652c:	e056      	b.n	80065dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d052      	beq.n	80065dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7ff f821 	bl	800557c <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <I2C_IsErrorOccurred+0x54>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d147      	bne.n	80065dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800655e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656e:	d12e      	bne.n	80065ce <I2C_IsErrorOccurred+0xd6>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006576:	d02a      	beq.n	80065ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006578:	7cfb      	ldrb	r3, [r7, #19]
 800657a:	2b20      	cmp	r3, #32
 800657c:	d027      	beq.n	80065ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800658c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800658e:	f7fe fff5 	bl	800557c <HAL_GetTick>
 8006592:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006594:	e01b      	b.n	80065ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006596:	f7fe fff1 	bl	800557c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b19      	cmp	r3, #25
 80065a2:	d914      	bls.n	80065ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f043 0220 	orr.w	r2, r3, #32
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d1dc      	bne.n	8006596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d003      	beq.n	80065f2 <I2C_IsErrorOccurred+0xfa>
 80065ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d09d      	beq.n	800652e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2220      	movs	r2, #32
 8006600:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	f043 0304 	orr.w	r3, r3, #4
 8006608:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006632:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	f043 0308 	orr.w	r3, r3, #8
 800664a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f043 0302 	orr.w	r3, r3, #2
 800666c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800667e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01c      	beq.n	80066c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff fe56 	bl	8006338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <I2C_IsErrorOccurred+0x1d4>)
 8006698:	400b      	ands	r3, r1
 800669a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3728      	adds	r7, #40	; 0x28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	fe00e800 	.word	0xfe00e800

080066d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	817b      	strh	r3, [r7, #10]
 80066de:	4613      	mov	r3, r2
 80066e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066e8:	7a7b      	ldrb	r3, [r7, #9]
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	0d5b      	lsrs	r3, r3, #21
 800670a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800670e:	4b08      	ldr	r3, [pc, #32]	; (8006730 <I2C_TransferConfig+0x60>)
 8006710:	430b      	orrs	r3, r1
 8006712:	43db      	mvns	r3, r3
 8006714:	ea02 0103 	and.w	r1, r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	03ff63ff 	.word	0x03ff63ff

08006734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b20      	cmp	r3, #32
 8006748:	d138      	bne.n	80067bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006754:	2302      	movs	r3, #2
 8006756:	e032      	b.n	80067be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e000      	b.n	80067be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d139      	bne.n	8006854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e033      	b.n	8006856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2224      	movs	r2, #36	; 0x24
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0201 	bic.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800681c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a04      	ldr	r2, [pc, #16]	; (8006880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800686e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40007000 	.word	0x40007000

08006884 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	4b23      	ldr	r3, [pc, #140]	; (800691c <HAL_PWREx_EnableOverDrive+0x98>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	4a22      	ldr	r2, [pc, #136]	; (800691c <HAL_PWREx_EnableOverDrive+0x98>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6413      	str	r3, [r2, #64]	; 0x40
 800689a:	4b20      	ldr	r3, [pc, #128]	; (800691c <HAL_PWREx_EnableOverDrive+0x98>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80068a6:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068b2:	f7fe fe63 	bl	800557c <HAL_GetTick>
 80068b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068b8:	e009      	b.n	80068ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068ba:	f7fe fe5f 	bl	800557c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c8:	d901      	bls.n	80068ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e022      	b.n	8006914 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068da:	d1ee      	bne.n	80068ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0f      	ldr	r2, [pc, #60]	; (8006920 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068e8:	f7fe fe48 	bl	800557c <HAL_GetTick>
 80068ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068ee:	e009      	b.n	8006904 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068f0:	f7fe fe44 	bl	800557c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068fe:	d901      	bls.n	8006904 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e007      	b.n	8006914 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006910:	d1ee      	bne.n	80068f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	40007000 	.word	0x40007000

08006924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800692c:	2300      	movs	r3, #0
 800692e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e291      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8087 	beq.w	8006a56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006948:	4b96      	ldr	r3, [pc, #600]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b04      	cmp	r3, #4
 8006952:	d00c      	beq.n	800696e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006954:	4b93      	ldr	r3, [pc, #588]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b08      	cmp	r3, #8
 800695e:	d112      	bne.n	8006986 <HAL_RCC_OscConfig+0x62>
 8006960:	4b90      	ldr	r3, [pc, #576]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800696c:	d10b      	bne.n	8006986 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696e:	4b8d      	ldr	r3, [pc, #564]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d06c      	beq.n	8006a54 <HAL_RCC_OscConfig+0x130>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d168      	bne.n	8006a54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e26b      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698e:	d106      	bne.n	800699e <HAL_RCC_OscConfig+0x7a>
 8006990:	4b84      	ldr	r3, [pc, #528]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a83      	ldr	r2, [pc, #524]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e02e      	b.n	80069fc <HAL_RCC_OscConfig+0xd8>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10c      	bne.n	80069c0 <HAL_RCC_OscConfig+0x9c>
 80069a6:	4b7f      	ldr	r3, [pc, #508]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a7e      	ldr	r2, [pc, #504]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b7c      	ldr	r3, [pc, #496]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a7b      	ldr	r2, [pc, #492]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e01d      	b.n	80069fc <HAL_RCC_OscConfig+0xd8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0xc0>
 80069ca:	4b76      	ldr	r3, [pc, #472]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a75      	ldr	r2, [pc, #468]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4b73      	ldr	r3, [pc, #460]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a72      	ldr	r2, [pc, #456]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0xd8>
 80069e4:	4b6f      	ldr	r3, [pc, #444]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a6e      	ldr	r2, [pc, #440]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	4b6c      	ldr	r3, [pc, #432]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6b      	ldr	r2, [pc, #428]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 80069f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fe fdba 	bl	800557c <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fe fdb6 	bl	800557c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	; 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e21f      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1e:	4b61      	ldr	r3, [pc, #388]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0xe8>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fe fda6 	bl	800557c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a34:	f7fe fda2 	bl	800557c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b64      	cmp	r3, #100	; 0x64
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e20b      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a46:	4b57      	ldr	r3, [pc, #348]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x110>
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d069      	beq.n	8006b36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a62:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d11c      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x190>
 8006a7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d116      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a86:	4b47      	ldr	r3, [pc, #284]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_RCC_OscConfig+0x17a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e1df      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	493d      	ldr	r1, [pc, #244]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab2:	e040      	b.n	8006b36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d023      	beq.n	8006b04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006abc:	4b39      	ldr	r3, [pc, #228]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a38      	ldr	r2, [pc, #224]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac8:	f7fe fd58 	bl	800557c <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ad0:	f7fe fd54 	bl	800557c <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e1bd      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae2:	4b30      	ldr	r3, [pc, #192]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aee:	4b2d      	ldr	r3, [pc, #180]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4929      	ldr	r1, [pc, #164]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]
 8006b02:	e018      	b.n	8006b36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fe fd34 	bl	800557c <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b18:	f7fe fd30 	bl	800557c <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e199      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d038      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d019      	beq.n	8006b7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b4a:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b56:	f7fe fd11 	bl	800557c <HAL_GetTick>
 8006b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b5e:	f7fe fd0d 	bl	800557c <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e176      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b70:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0f0      	beq.n	8006b5e <HAL_RCC_OscConfig+0x23a>
 8006b7c:	e01a      	b.n	8006bb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8a:	f7fe fcf7 	bl	800557c <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b92:	f7fe fcf3 	bl	800557c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d903      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e15c      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
 8006ba4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba8:	4b91      	ldr	r3, [pc, #580]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1ee      	bne.n	8006b92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80a4 	beq.w	8006d0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bc2:	4b8b      	ldr	r3, [pc, #556]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bce:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	4a87      	ldr	r2, [pc, #540]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bda:	4b85      	ldr	r3, [pc, #532]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bea:	4b82      	ldr	r3, [pc, #520]	; (8006df4 <HAL_RCC_OscConfig+0x4d0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d118      	bne.n	8006c28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006bf6:	4b7f      	ldr	r3, [pc, #508]	; (8006df4 <HAL_RCC_OscConfig+0x4d0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a7e      	ldr	r2, [pc, #504]	; (8006df4 <HAL_RCC_OscConfig+0x4d0>)
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c02:	f7fe fcbb 	bl	800557c <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c0a:	f7fe fcb7 	bl	800557c <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b64      	cmp	r3, #100	; 0x64
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e120      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c1c:	4b75      	ldr	r3, [pc, #468]	; (8006df4 <HAL_RCC_OscConfig+0x4d0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCC_OscConfig+0x31a>
 8006c30:	4b6f      	ldr	r3, [pc, #444]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a6e      	ldr	r2, [pc, #440]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	e02d      	b.n	8006c9a <HAL_RCC_OscConfig+0x376>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x33c>
 8006c46:	4b6a      	ldr	r3, [pc, #424]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	4a69      	ldr	r2, [pc, #420]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
 8006c52:	4b67      	ldr	r3, [pc, #412]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a66      	ldr	r2, [pc, #408]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c58:	f023 0304 	bic.w	r3, r3, #4
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5e:	e01c      	b.n	8006c9a <HAL_RCC_OscConfig+0x376>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b05      	cmp	r3, #5
 8006c66:	d10c      	bne.n	8006c82 <HAL_RCC_OscConfig+0x35e>
 8006c68:	4b61      	ldr	r3, [pc, #388]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6c:	4a60      	ldr	r2, [pc, #384]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c6e:	f043 0304 	orr.w	r3, r3, #4
 8006c72:	6713      	str	r3, [r2, #112]	; 0x70
 8006c74:	4b5e      	ldr	r3, [pc, #376]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	4a5d      	ldr	r2, [pc, #372]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c80:	e00b      	b.n	8006c9a <HAL_RCC_OscConfig+0x376>
 8006c82:	4b5b      	ldr	r3, [pc, #364]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a5a      	ldr	r2, [pc, #360]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8e:	4b58      	ldr	r3, [pc, #352]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a57      	ldr	r2, [pc, #348]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006c94:	f023 0304 	bic.w	r3, r3, #4
 8006c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d015      	beq.n	8006cce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca2:	f7fe fc6b 	bl	800557c <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca8:	e00a      	b.n	8006cc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006caa:	f7fe fc67 	bl	800557c <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e0ce      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc0:	4b4b      	ldr	r3, [pc, #300]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0ee      	beq.n	8006caa <HAL_RCC_OscConfig+0x386>
 8006ccc:	e014      	b.n	8006cf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cce:	f7fe fc55 	bl	800557c <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fe fc51 	bl	800557c <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0b8      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cec:	4b40      	ldr	r3, [pc, #256]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ee      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d105      	bne.n	8006d0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfe:	4b3c      	ldr	r3, [pc, #240]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	4a3b      	ldr	r2, [pc, #236]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 80a4 	beq.w	8006e5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d14:	4b36      	ldr	r3, [pc, #216]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 030c 	and.w	r3, r3, #12
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d06b      	beq.n	8006df8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d149      	bne.n	8006dbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d28:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a30      	ldr	r2, [pc, #192]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d34:	f7fe fc22 	bl	800557c <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d3c:	f7fe fc1e 	bl	800557c <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e087      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d4e:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69da      	ldr	r2, [r3, #28]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	019b      	lsls	r3, r3, #6
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	3b01      	subs	r3, #1
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d88:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fe fbf2 	bl	800557c <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fe fbee 	bl	800557c <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e057      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0x478>
 8006dba:	e04f      	b.n	8006e5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0b      	ldr	r2, [pc, #44]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fe fbd8 	bl	800557c <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fe fbd4 	bl	800557c <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e03d      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <HAL_RCC_OscConfig+0x4cc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x4ac>
 8006dee:	e035      	b.n	8006e5c <HAL_RCC_OscConfig+0x538>
 8006df0:	40023800 	.word	0x40023800
 8006df4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006df8:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <HAL_RCC_OscConfig+0x544>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d028      	beq.n	8006e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d121      	bne.n	8006e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d11a      	bne.n	8006e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e28:	4013      	ands	r3, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d111      	bne.n	8006e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	3b01      	subs	r3, #1
 8006e42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d107      	bne.n	8006e58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d001      	beq.n	8006e5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800

08006e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0d0      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e84:	4b6a      	ldr	r3, [pc, #424]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d910      	bls.n	8006eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e92:	4b67      	ldr	r3, [pc, #412]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f023 020f 	bic.w	r2, r3, #15
 8006e9a:	4965      	ldr	r1, [pc, #404]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea2:	4b63      	ldr	r3, [pc, #396]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0b8      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d020      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ecc:	4b59      	ldr	r3, [pc, #356]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4a58      	ldr	r2, [pc, #352]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ed6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ee4:	4b53      	ldr	r3, [pc, #332]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef0:	4b50      	ldr	r3, [pc, #320]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	494d      	ldr	r1, [pc, #308]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d040      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f16:	4b47      	ldr	r3, [pc, #284]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d115      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e07f      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f2e:	4b41      	ldr	r3, [pc, #260]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e073      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3e:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e06b      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f4e:	4b39      	ldr	r3, [pc, #228]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f023 0203 	bic.w	r2, r3, #3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	4936      	ldr	r1, [pc, #216]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f60:	f7fe fb0c 	bl	800557c <HAL_GetTick>
 8006f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f66:	e00a      	b.n	8006f7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f68:	f7fe fb08 	bl	800557c <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e053      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7e:	4b2d      	ldr	r3, [pc, #180]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 020c 	and.w	r2, r3, #12
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d1eb      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d210      	bcs.n	8006fc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 020f 	bic.w	r2, r3, #15
 8006fa6:	4922      	ldr	r1, [pc, #136]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d001      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e032      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4916      	ldr	r1, [pc, #88]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	490e      	ldr	r1, [pc, #56]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ffe:	f000 f821 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8007002:	4602      	mov	r2, r0
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <HAL_RCC_ClockConfig+0x1c8>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	490a      	ldr	r1, [pc, #40]	; (8007038 <HAL_RCC_ClockConfig+0x1cc>)
 8007010:	5ccb      	ldrb	r3, [r1, r3]
 8007012:	fa22 f303 	lsr.w	r3, r2, r3
 8007016:	4a09      	ldr	r2, [pc, #36]	; (800703c <HAL_RCC_ClockConfig+0x1d0>)
 8007018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <HAL_RCC_ClockConfig+0x1d4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7fd fed6 	bl	8004dd0 <HAL_InitTick>

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40023c00 	.word	0x40023c00
 8007034:	40023800 	.word	0x40023800
 8007038:	0800f388 	.word	0x0800f388
 800703c:	20000004 	.word	0x20000004
 8007040:	20000008 	.word	0x20000008

08007044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007048:	b094      	sub	sp, #80	; 0x50
 800704a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	647b      	str	r3, [r7, #68]	; 0x44
 8007050:	2300      	movs	r3, #0
 8007052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007054:	2300      	movs	r3, #0
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800705c:	4b79      	ldr	r3, [pc, #484]	; (8007244 <HAL_RCC_GetSysClockFreq+0x200>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b08      	cmp	r3, #8
 8007066:	d00d      	beq.n	8007084 <HAL_RCC_GetSysClockFreq+0x40>
 8007068:	2b08      	cmp	r3, #8
 800706a:	f200 80e1 	bhi.w	8007230 <HAL_RCC_GetSysClockFreq+0x1ec>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_RCC_GetSysClockFreq+0x34>
 8007072:	2b04      	cmp	r3, #4
 8007074:	d003      	beq.n	800707e <HAL_RCC_GetSysClockFreq+0x3a>
 8007076:	e0db      	b.n	8007230 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007078:	4b73      	ldr	r3, [pc, #460]	; (8007248 <HAL_RCC_GetSysClockFreq+0x204>)
 800707a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800707c:	e0db      	b.n	8007236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800707e:	4b73      	ldr	r3, [pc, #460]	; (800724c <HAL_RCC_GetSysClockFreq+0x208>)
 8007080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007082:	e0d8      	b.n	8007236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007084:	4b6f      	ldr	r3, [pc, #444]	; (8007244 <HAL_RCC_GetSysClockFreq+0x200>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800708e:	4b6d      	ldr	r3, [pc, #436]	; (8007244 <HAL_RCC_GetSysClockFreq+0x200>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d063      	beq.n	8007162 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800709a:	4b6a      	ldr	r3, [pc, #424]	; (8007244 <HAL_RCC_GetSysClockFreq+0x200>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	099b      	lsrs	r3, r3, #6
 80070a0:	2200      	movs	r2, #0
 80070a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	633b      	str	r3, [r7, #48]	; 0x30
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070b6:	4622      	mov	r2, r4
 80070b8:	462b      	mov	r3, r5
 80070ba:	f04f 0000 	mov.w	r0, #0
 80070be:	f04f 0100 	mov.w	r1, #0
 80070c2:	0159      	lsls	r1, r3, #5
 80070c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070c8:	0150      	lsls	r0, r2, #5
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4621      	mov	r1, r4
 80070d0:	1a51      	subs	r1, r2, r1
 80070d2:	6139      	str	r1, [r7, #16]
 80070d4:	4629      	mov	r1, r5
 80070d6:	eb63 0301 	sbc.w	r3, r3, r1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070e8:	4659      	mov	r1, fp
 80070ea:	018b      	lsls	r3, r1, #6
 80070ec:	4651      	mov	r1, sl
 80070ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070f2:	4651      	mov	r1, sl
 80070f4:	018a      	lsls	r2, r1, #6
 80070f6:	4651      	mov	r1, sl
 80070f8:	ebb2 0801 	subs.w	r8, r2, r1
 80070fc:	4659      	mov	r1, fp
 80070fe:	eb63 0901 	sbc.w	r9, r3, r1
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800710e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007116:	4690      	mov	r8, r2
 8007118:	4699      	mov	r9, r3
 800711a:	4623      	mov	r3, r4
 800711c:	eb18 0303 	adds.w	r3, r8, r3
 8007120:	60bb      	str	r3, [r7, #8]
 8007122:	462b      	mov	r3, r5
 8007124:	eb49 0303 	adc.w	r3, r9, r3
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007136:	4629      	mov	r1, r5
 8007138:	024b      	lsls	r3, r1, #9
 800713a:	4621      	mov	r1, r4
 800713c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007140:	4621      	mov	r1, r4
 8007142:	024a      	lsls	r2, r1, #9
 8007144:	4610      	mov	r0, r2
 8007146:	4619      	mov	r1, r3
 8007148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800714a:	2200      	movs	r2, #0
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
 800714e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007154:	f7f9 fcfa 	bl	8000b4c <__aeabi_uldivmod>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4613      	mov	r3, r2
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	e058      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007162:	4b38      	ldr	r3, [pc, #224]	; (8007244 <HAL_RCC_GetSysClockFreq+0x200>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	2200      	movs	r2, #0
 800716a:	4618      	mov	r0, r3
 800716c:	4611      	mov	r1, r2
 800716e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007172:	623b      	str	r3, [r7, #32]
 8007174:	2300      	movs	r3, #0
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800717c:	4642      	mov	r2, r8
 800717e:	464b      	mov	r3, r9
 8007180:	f04f 0000 	mov.w	r0, #0
 8007184:	f04f 0100 	mov.w	r1, #0
 8007188:	0159      	lsls	r1, r3, #5
 800718a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800718e:	0150      	lsls	r0, r2, #5
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4641      	mov	r1, r8
 8007196:	ebb2 0a01 	subs.w	sl, r2, r1
 800719a:	4649      	mov	r1, r9
 800719c:	eb63 0b01 	sbc.w	fp, r3, r1
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071b4:	ebb2 040a 	subs.w	r4, r2, sl
 80071b8:	eb63 050b 	sbc.w	r5, r3, fp
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	00eb      	lsls	r3, r5, #3
 80071c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ca:	00e2      	lsls	r2, r4, #3
 80071cc:	4614      	mov	r4, r2
 80071ce:	461d      	mov	r5, r3
 80071d0:	4643      	mov	r3, r8
 80071d2:	18e3      	adds	r3, r4, r3
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	464b      	mov	r3, r9
 80071d8:	eb45 0303 	adc.w	r3, r5, r3
 80071dc:	607b      	str	r3, [r7, #4]
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	f04f 0300 	mov.w	r3, #0
 80071e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071ea:	4629      	mov	r1, r5
 80071ec:	028b      	lsls	r3, r1, #10
 80071ee:	4621      	mov	r1, r4
 80071f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071f4:	4621      	mov	r1, r4
 80071f6:	028a      	lsls	r2, r1, #10
 80071f8:	4610      	mov	r0, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fe:	2200      	movs	r2, #0
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	61fa      	str	r2, [r7, #28]
 8007204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007208:	f7f9 fca0 	bl	8000b4c <__aeabi_uldivmod>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4613      	mov	r3, r2
 8007212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <HAL_RCC_GetSysClockFreq+0x200>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	3301      	adds	r3, #1
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007228:	fbb2 f3f3 	udiv	r3, r2, r3
 800722c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800722e:	e002      	b.n	8007236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <HAL_RCC_GetSysClockFreq+0x204>)
 8007232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007238:	4618      	mov	r0, r3
 800723a:	3750      	adds	r7, #80	; 0x50
 800723c:	46bd      	mov	sp, r7
 800723e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007242:	bf00      	nop
 8007244:	40023800 	.word	0x40023800
 8007248:	00f42400 	.word	0x00f42400
 800724c:	007a1200 	.word	0x007a1200

08007250 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <HAL_RCC_GetHCLKFreq+0x14>)
 8007256:	681b      	ldr	r3, [r3, #0]
}
 8007258:	4618      	mov	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000004 	.word	0x20000004

08007268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800726c:	f7ff fff0 	bl	8007250 <HAL_RCC_GetHCLKFreq>
 8007270:	4602      	mov	r2, r0
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	0a9b      	lsrs	r3, r3, #10
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	4903      	ldr	r1, [pc, #12]	; (800728c <HAL_RCC_GetPCLK1Freq+0x24>)
 800727e:	5ccb      	ldrb	r3, [r1, r3]
 8007280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007284:	4618      	mov	r0, r3
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40023800 	.word	0x40023800
 800728c:	0800f398 	.word	0x0800f398

08007290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007294:	f7ff ffdc 	bl	8007250 <HAL_RCC_GetHCLKFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	0b5b      	lsrs	r3, r3, #13
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4903      	ldr	r1, [pc, #12]	; (80072b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40023800 	.word	0x40023800
 80072b4:	0800f398 	.word	0x0800f398

080072b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220f      	movs	r2, #15
 80072c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072c8:	4b12      	ldr	r3, [pc, #72]	; (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0203 	and.w	r2, r3, #3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072e0:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <HAL_RCC_GetClockConfig+0x5c>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	08db      	lsrs	r3, r3, #3
 80072f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072fa:	4b07      	ldr	r3, [pc, #28]	; (8007318 <HAL_RCC_GetClockConfig+0x60>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 020f 	and.w	r2, r3, #15
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40023800 	.word	0x40023800
 8007318:	40023c00 	.word	0x40023c00

0800731c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d012      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007344:	4b69      	ldr	r3, [pc, #420]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	4a68      	ldr	r2, [pc, #416]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800734a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800734e:	6093      	str	r3, [r2, #8]
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007358:	4964      	ldr	r1, [pc, #400]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800735a:	4313      	orrs	r3, r2
 800735c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007366:	2301      	movs	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d017      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007376:	4b5d      	ldr	r3, [pc, #372]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007384:	4959      	ldr	r1, [pc, #356]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007394:	d101      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007396:	2301      	movs	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d017      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073b2:	4b4e      	ldr	r3, [pc, #312]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	494a      	ldr	r1, [pc, #296]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d0:	d101      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073d2:	2301      	movs	r3, #1
 80073d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 808b 	beq.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007400:	4b3a      	ldr	r3, [pc, #232]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	4a39      	ldr	r2, [pc, #228]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800740a:	6413      	str	r3, [r2, #64]	; 0x40
 800740c:	4b37      	ldr	r3, [pc, #220]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007418:	4b35      	ldr	r3, [pc, #212]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a34      	ldr	r2, [pc, #208]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800741e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007424:	f7fe f8aa 	bl	800557c <HAL_GetTick>
 8007428:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800742a:	e008      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800742c:	f7fe f8a6 	bl	800557c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b64      	cmp	r3, #100	; 0x64
 8007438:	d901      	bls.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e357      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800743e:	4b2c      	ldr	r3, [pc, #176]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f0      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800744a:	4b28      	ldr	r3, [pc, #160]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d035      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	429a      	cmp	r2, r3
 8007466:	d02e      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800746a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007470:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007472:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	4a1d      	ldr	r2, [pc, #116]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800747e:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	4a1a      	ldr	r2, [pc, #104]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007488:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800748a:	4a18      	ldr	r2, [pc, #96]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007490:	4b16      	ldr	r3, [pc, #88]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	d114      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749c:	f7fe f86e 	bl	800557c <HAL_GetTick>
 80074a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a2:	e00a      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a4:	f7fe f86a 	bl	800557c <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d901      	bls.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e319      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ee      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d2:	d111      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80074e2:	400b      	ands	r3, r1
 80074e4:	4901      	ldr	r1, [pc, #4]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	608b      	str	r3, [r1, #8]
 80074ea:	e00b      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80074ec:	40023800 	.word	0x40023800
 80074f0:	40007000 	.word	0x40007000
 80074f4:	0ffffcff 	.word	0x0ffffcff
 80074f8:	4baa      	ldr	r3, [pc, #680]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	4aa9      	ldr	r2, [pc, #676]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007502:	6093      	str	r3, [r2, #8]
 8007504:	4ba7      	ldr	r3, [pc, #668]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007510:	49a4      	ldr	r1, [pc, #656]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007512:	4313      	orrs	r3, r2
 8007514:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0310 	and.w	r3, r3, #16
 800751e:	2b00      	cmp	r3, #0
 8007520:	d010      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007522:	4ba0      	ldr	r3, [pc, #640]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007528:	4a9e      	ldr	r2, [pc, #632]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800752e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007532:	4b9c      	ldr	r3, [pc, #624]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007534:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	4999      	ldr	r1, [pc, #612]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007550:	4b94      	ldr	r3, [pc, #592]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800755e:	4991      	ldr	r1, [pc, #580]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007560:	4313      	orrs	r3, r2
 8007562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007572:	4b8c      	ldr	r3, [pc, #560]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007580:	4988      	ldr	r1, [pc, #544]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007594:	4b83      	ldr	r3, [pc, #524]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a2:	4980      	ldr	r1, [pc, #512]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075b6:	4b7b      	ldr	r3, [pc, #492]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c4:	4977      	ldr	r1, [pc, #476]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075d8:	4b72      	ldr	r3, [pc, #456]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075de:	f023 0203 	bic.w	r2, r3, #3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	496f      	ldr	r1, [pc, #444]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075fa:	4b6a      	ldr	r3, [pc, #424]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007600:	f023 020c 	bic.w	r2, r3, #12
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007608:	4966      	ldr	r1, [pc, #408]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800761c:	4b61      	ldr	r3, [pc, #388]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800761e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007622:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762a:	495e      	ldr	r1, [pc, #376]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800763e:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007644:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	4955      	ldr	r1, [pc, #340]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007660:	4b50      	ldr	r3, [pc, #320]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	494d      	ldr	r1, [pc, #308]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007682:	4b48      	ldr	r3, [pc, #288]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007688:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007690:	4944      	ldr	r1, [pc, #272]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80076a4:	4b3f      	ldr	r3, [pc, #252]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b2:	493c      	ldr	r1, [pc, #240]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076c6:	4b37      	ldr	r3, [pc, #220]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d4:	4933      	ldr	r1, [pc, #204]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076e8:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f6:	492b      	ldr	r1, [pc, #172]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d011      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800770a:	4b26      	ldr	r3, [pc, #152]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007718:	4922      	ldr	r1, [pc, #136]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007728:	d101      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800772a:	2301      	movs	r3, #1
 800772c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800773a:	2301      	movs	r3, #1
 800773c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800774a:	4b16      	ldr	r3, [pc, #88]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007750:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007758:	4912      	ldr	r1, [pc, #72]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007772:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800777c:	4909      	ldr	r1, [pc, #36]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d006      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80d9 	beq.w	800794a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007798:	4b02      	ldr	r3, [pc, #8]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a01      	ldr	r2, [pc, #4]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800779e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077a2:	e001      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80077a4:	40023800 	.word	0x40023800
 80077a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077aa:	f7fd fee7 	bl	800557c <HAL_GetTick>
 80077ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077b0:	e008      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077b2:	f7fd fee3 	bl	800557c <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b64      	cmp	r3, #100	; 0x64
 80077be:	d901      	bls.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e194      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077c4:	4b6c      	ldr	r3, [pc, #432]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1f0      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d021      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11d      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077e4:	4b64      	ldr	r3, [pc, #400]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077f2:	4b61      	ldr	r3, [pc, #388]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f8:	0e1b      	lsrs	r3, r3, #24
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	019a      	lsls	r2, r3, #6
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	431a      	orrs	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	061b      	lsls	r3, r3, #24
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	071b      	lsls	r3, r3, #28
 8007818:	4957      	ldr	r1, [pc, #348]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007834:	d00a      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800783e:	2b00      	cmp	r3, #0
 8007840:	d02e      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784a:	d129      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800784c:	4b4a      	ldr	r3, [pc, #296]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800784e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800785a:	4b47      	ldr	r3, [pc, #284]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800785c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007860:	0f1b      	lsrs	r3, r3, #28
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	019a      	lsls	r2, r3, #6
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	061b      	lsls	r3, r3, #24
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	071b      	lsls	r3, r3, #28
 8007880:	493d      	ldr	r1, [pc, #244]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007888:	4b3b      	ldr	r3, [pc, #236]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800788a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800788e:	f023 021f 	bic.w	r2, r3, #31
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	3b01      	subs	r3, #1
 8007898:	4937      	ldr	r1, [pc, #220]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01d      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078ac:	4b32      	ldr	r3, [pc, #200]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b2:	0e1b      	lsrs	r3, r3, #24
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078ba:	4b2f      	ldr	r3, [pc, #188]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c0:	0f1b      	lsrs	r3, r3, #28
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	019a      	lsls	r2, r3, #6
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	041b      	lsls	r3, r3, #16
 80078d4:	431a      	orrs	r2, r3
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	061b      	lsls	r3, r3, #24
 80078da:	431a      	orrs	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	071b      	lsls	r3, r3, #28
 80078e0:	4925      	ldr	r1, [pc, #148]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d011      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	019a      	lsls	r2, r3, #6
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	431a      	orrs	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	061b      	lsls	r3, r3, #24
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	071b      	lsls	r3, r3, #28
 8007910:	4919      	ldr	r1, [pc, #100]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007918:	4b17      	ldr	r3, [pc, #92]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a16      	ldr	r2, [pc, #88]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007924:	f7fd fe2a 	bl	800557c <HAL_GetTick>
 8007928:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800792a:	e008      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800792c:	f7fd fe26 	bl	800557c <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	; 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e0d7      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b01      	cmp	r3, #1
 800794e:	f040 80cd 	bne.w	8007aec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007952:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7fd fe0d 	bl	800557c <HAL_GetTick>
 8007962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007964:	e00a      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007966:	f7fd fe09 	bl	800557c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b64      	cmp	r3, #100	; 0x64
 8007972:	d903      	bls.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e0ba      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007978:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800797c:	4b5e      	ldr	r3, [pc, #376]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007988:	d0ed      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d009      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d02e      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d12a      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079b2:	4b51      	ldr	r3, [pc, #324]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079c0:	4b4d      	ldr	r3, [pc, #308]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c6:	0f1b      	lsrs	r3, r3, #28
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	019a      	lsls	r2, r3, #6
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	041b      	lsls	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	061b      	lsls	r3, r3, #24
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	071b      	lsls	r3, r3, #28
 80079e6:	4944      	ldr	r1, [pc, #272]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079ee:	4b42      	ldr	r3, [pc, #264]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	3b01      	subs	r3, #1
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	493d      	ldr	r1, [pc, #244]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d022      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a1c:	d11d      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a1e:	4b36      	ldr	r3, [pc, #216]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a24:	0e1b      	lsrs	r3, r3, #24
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a32:	0f1b      	lsrs	r3, r3, #28
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	019a      	lsls	r2, r3, #6
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	431a      	orrs	r2, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	061b      	lsls	r3, r3, #24
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	071b      	lsls	r3, r3, #28
 8007a52:	4929      	ldr	r1, [pc, #164]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d028      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a66:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6c:	0e1b      	lsrs	r3, r3, #24
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a74:	4b20      	ldr	r3, [pc, #128]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7a:	0c1b      	lsrs	r3, r3, #16
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	019a      	lsls	r2, r3, #6
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	061b      	lsls	r3, r3, #24
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	071b      	lsls	r3, r3, #28
 8007a9a:	4917      	ldr	r1, [pc, #92]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4911      	ldr	r1, [pc, #68]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ab8:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac4:	f7fd fd5a 	bl	800557c <HAL_GetTick>
 8007ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007acc:	f7fd fd56 	bl	800557c <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b64      	cmp	r3, #100	; 0x64
 8007ad8:	d901      	bls.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e007      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aea:	d1ef      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	40023800 	.word	0x40023800

08007afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e049      	b.n	8007ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fd fb90 	bl	8005248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f000 fc76 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d001      	beq.n	8007bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e054      	b.n	8007c6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a26      	ldr	r2, [pc, #152]	; (8007c7c <HAL_TIM_Base_Start_IT+0xd0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d022      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d01d      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d018      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1e      	ldr	r2, [pc, #120]	; (8007c8c <HAL_TIM_Base_Start_IT+0xe0>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d009      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x80>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1b      	ldr	r2, [pc, #108]	; (8007c94 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d115      	bne.n	8007c58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689a      	ldr	r2, [r3, #8]
 8007c32:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <HAL_TIM_Base_Start_IT+0xec>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b06      	cmp	r3, #6
 8007c3c:	d015      	beq.n	8007c6a <HAL_TIM_Base_Start_IT+0xbe>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c44:	d011      	beq.n	8007c6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0201 	orr.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	e008      	b.n	8007c6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e000      	b.n	8007c6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40010400 	.word	0x40010400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40001800 	.word	0x40001800
 8007c98:	00010007 	.word	0x00010007

08007c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e049      	b.n	8007d42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f841 	bl	8007d4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f000 fba6 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d122      	bne.n	8007dba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d11b      	bne.n	8007dba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f06f 0202 	mvn.w	r2, #2
 8007d8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f003 0303 	and.w	r3, r3, #3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb25 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8007da6:	e005      	b.n	8007db4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fb17 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb28 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d122      	bne.n	8007e0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d11b      	bne.n	8007e0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f06f 0204 	mvn.w	r2, #4
 8007dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d003      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fafb 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8007dfa:	e005      	b.n	8007e08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 faed 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fafe 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d122      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d11b      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f06f 0208 	mvn.w	r2, #8
 8007e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2204      	movs	r2, #4
 8007e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fad1 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8007e4e:	e005      	b.n	8007e5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fac3 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fad4 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d122      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d11b      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f06f 0210 	mvn.w	r2, #16
 8007e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 faa7 	bl	80083f0 <HAL_TIM_IC_CaptureCallback>
 8007ea2:	e005      	b.n	8007eb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa99 	bl	80083dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 faaa 	bl	8008404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d10e      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d107      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f06f 0201 	mvn.w	r2, #1
 8007eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7fb faad 	bl	800343c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d10e      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b80      	cmp	r3, #128	; 0x80
 8007efc:	d107      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 ff53 	bl	8008db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1c:	d10e      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f28:	2b80      	cmp	r3, #128	; 0x80
 8007f2a:	d107      	bne.n	8007f3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 ff46 	bl	8008dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d10e      	bne.n	8007f68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d107      	bne.n	8007f68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa58 	bl	8008418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	d10e      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d107      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0220 	mvn.w	r2, #32
 8007f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 ff06 	bl	8008da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e0ff      	b.n	80081ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b14      	cmp	r3, #20
 8007fc6:	f200 80f0 	bhi.w	80081aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08008025 	.word	0x08008025
 8007fd4:	080081ab 	.word	0x080081ab
 8007fd8:	080081ab 	.word	0x080081ab
 8007fdc:	080081ab 	.word	0x080081ab
 8007fe0:	08008065 	.word	0x08008065
 8007fe4:	080081ab 	.word	0x080081ab
 8007fe8:	080081ab 	.word	0x080081ab
 8007fec:	080081ab 	.word	0x080081ab
 8007ff0:	080080a7 	.word	0x080080a7
 8007ff4:	080081ab 	.word	0x080081ab
 8007ff8:	080081ab 	.word	0x080081ab
 8007ffc:	080081ab 	.word	0x080081ab
 8008000:	080080e7 	.word	0x080080e7
 8008004:	080081ab 	.word	0x080081ab
 8008008:	080081ab 	.word	0x080081ab
 800800c:	080081ab 	.word	0x080081ab
 8008010:	08008129 	.word	0x08008129
 8008014:	080081ab 	.word	0x080081ab
 8008018:	080081ab 	.word	0x080081ab
 800801c:	080081ab 	.word	0x080081ab
 8008020:	08008169 	.word	0x08008169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fa9e 	bl	800856c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0208 	orr.w	r2, r2, #8
 800803e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0204 	bic.w	r2, r2, #4
 800804e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6999      	ldr	r1, [r3, #24]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	619a      	str	r2, [r3, #24]
      break;
 8008062:	e0a5      	b.n	80081b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 faf0 	bl	8008650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800807e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800808e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6999      	ldr	r1, [r3, #24]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	021a      	lsls	r2, r3, #8
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	619a      	str	r2, [r3, #24]
      break;
 80080a4:	e084      	b.n	80081b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fb47 	bl	8008740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69da      	ldr	r2, [r3, #28]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 0208 	orr.w	r2, r2, #8
 80080c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0204 	bic.w	r2, r2, #4
 80080d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69d9      	ldr	r1, [r3, #28]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	61da      	str	r2, [r3, #28]
      break;
 80080e4:	e064      	b.n	80081b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fb9d 	bl	800882c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69d9      	ldr	r1, [r3, #28]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	021a      	lsls	r2, r3, #8
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	61da      	str	r2, [r3, #28]
      break;
 8008126:	e043      	b.n	80081b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fbd4 	bl	80088dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0208 	orr.w	r2, r2, #8
 8008142:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0204 	bic.w	r2, r2, #4
 8008152:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008166:	e023      	b.n	80081b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fc06 	bl	8008980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008182:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	021a      	lsls	r2, r3, #8
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081a8:	e002      	b.n	80081b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
      break;
 80081ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop

080081c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d101      	bne.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c>
 80081dc:	2302      	movs	r3, #2
 80081de:	e0b4      	b.n	800834a <HAL_TIM_ConfigClockSource+0x186>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	4b56      	ldr	r3, [pc, #344]	; (8008354 <HAL_TIM_ConfigClockSource+0x190>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008218:	d03e      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0xd4>
 800821a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800821e:	f200 8087 	bhi.w	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008226:	f000 8086 	beq.w	8008336 <HAL_TIM_ConfigClockSource+0x172>
 800822a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822e:	d87f      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008230:	2b70      	cmp	r3, #112	; 0x70
 8008232:	d01a      	beq.n	800826a <HAL_TIM_ConfigClockSource+0xa6>
 8008234:	2b70      	cmp	r3, #112	; 0x70
 8008236:	d87b      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b60      	cmp	r3, #96	; 0x60
 800823a:	d050      	beq.n	80082de <HAL_TIM_ConfigClockSource+0x11a>
 800823c:	2b60      	cmp	r3, #96	; 0x60
 800823e:	d877      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008240:	2b50      	cmp	r3, #80	; 0x50
 8008242:	d03c      	beq.n	80082be <HAL_TIM_ConfigClockSource+0xfa>
 8008244:	2b50      	cmp	r3, #80	; 0x50
 8008246:	d873      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	d058      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0x13a>
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	d86f      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008250:	2b30      	cmp	r3, #48	; 0x30
 8008252:	d064      	beq.n	800831e <HAL_TIM_ConfigClockSource+0x15a>
 8008254:	2b30      	cmp	r3, #48	; 0x30
 8008256:	d86b      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008258:	2b20      	cmp	r3, #32
 800825a:	d060      	beq.n	800831e <HAL_TIM_ConfigClockSource+0x15a>
 800825c:	2b20      	cmp	r3, #32
 800825e:	d867      	bhi.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
 8008260:	2b00      	cmp	r3, #0
 8008262:	d05c      	beq.n	800831e <HAL_TIM_ConfigClockSource+0x15a>
 8008264:	2b10      	cmp	r3, #16
 8008266:	d05a      	beq.n	800831e <HAL_TIM_ConfigClockSource+0x15a>
 8008268:	e062      	b.n	8008330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6899      	ldr	r1, [r3, #8]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f000 fce3 	bl	8008c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800828c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	609a      	str	r2, [r3, #8]
      break;
 8008296:	e04f      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	6899      	ldr	r1, [r3, #8]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f000 fccc 	bl	8008c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082ba:	609a      	str	r2, [r3, #8]
      break;
 80082bc:	e03c      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	6859      	ldr	r1, [r3, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f000 fc40 	bl	8008b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2150      	movs	r1, #80	; 0x50
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fc99 	bl	8008c0e <TIM_ITRx_SetConfig>
      break;
 80082dc:	e02c      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6859      	ldr	r1, [r3, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f000 fc5f 	bl	8008bae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2160      	movs	r1, #96	; 0x60
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fc89 	bl	8008c0e <TIM_ITRx_SetConfig>
      break;
 80082fc:	e01c      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	6859      	ldr	r1, [r3, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	461a      	mov	r2, r3
 800830c:	f000 fc20 	bl	8008b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2140      	movs	r1, #64	; 0x40
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fc79 	bl	8008c0e <TIM_ITRx_SetConfig>
      break;
 800831c:	e00c      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f000 fc70 	bl	8008c0e <TIM_ITRx_SetConfig>
      break;
 800832e:	e003      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
      break;
 8008334:	e000      	b.n	8008338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	fffeff88 	.word	0xfffeff88

08008358 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_TIM_SlaveConfigSynchro+0x18>
 800836c:	2302      	movs	r3, #2
 800836e:	e031      	b.n	80083d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb50 	bl	8008a28 <TIM_SlaveTimer_SetConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e018      	b.n	80083d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a40      	ldr	r2, [pc, #256]	; (8008540 <TIM_Base_SetConfig+0x114>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d00f      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a3d      	ldr	r2, [pc, #244]	; (8008544 <TIM_Base_SetConfig+0x118>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00b      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a3c      	ldr	r2, [pc, #240]	; (8008548 <TIM_Base_SetConfig+0x11c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d007      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a3b      	ldr	r2, [pc, #236]	; (800854c <TIM_Base_SetConfig+0x120>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d003      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a3a      	ldr	r2, [pc, #232]	; (8008550 <TIM_Base_SetConfig+0x124>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d108      	bne.n	800847e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a2f      	ldr	r2, [pc, #188]	; (8008540 <TIM_Base_SetConfig+0x114>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d02b      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848c:	d027      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a2c      	ldr	r2, [pc, #176]	; (8008544 <TIM_Base_SetConfig+0x118>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d023      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a2b      	ldr	r2, [pc, #172]	; (8008548 <TIM_Base_SetConfig+0x11c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01f      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a2a      	ldr	r2, [pc, #168]	; (800854c <TIM_Base_SetConfig+0x120>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d01b      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a29      	ldr	r2, [pc, #164]	; (8008550 <TIM_Base_SetConfig+0x124>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d017      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a28      	ldr	r2, [pc, #160]	; (8008554 <TIM_Base_SetConfig+0x128>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d013      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a27      	ldr	r2, [pc, #156]	; (8008558 <TIM_Base_SetConfig+0x12c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00f      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a26      	ldr	r2, [pc, #152]	; (800855c <TIM_Base_SetConfig+0x130>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00b      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a25      	ldr	r2, [pc, #148]	; (8008560 <TIM_Base_SetConfig+0x134>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d007      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a24      	ldr	r2, [pc, #144]	; (8008564 <TIM_Base_SetConfig+0x138>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a23      	ldr	r2, [pc, #140]	; (8008568 <TIM_Base_SetConfig+0x13c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d108      	bne.n	80084f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a0a      	ldr	r2, [pc, #40]	; (8008540 <TIM_Base_SetConfig+0x114>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d003      	beq.n	8008524 <TIM_Base_SetConfig+0xf8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <TIM_Base_SetConfig+0x124>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d103      	bne.n	800852c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	615a      	str	r2, [r3, #20]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40010400 	.word	0x40010400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800
 8008560:	40001800 	.word	0x40001800
 8008564:	40001c00 	.word	0x40001c00
 8008568:	40002000 	.word	0x40002000

0800856c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0201 	bic.w	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b2b      	ldr	r3, [pc, #172]	; (8008644 <TIM_OC1_SetConfig+0xd8>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f023 0302 	bic.w	r3, r3, #2
 80085b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a21      	ldr	r2, [pc, #132]	; (8008648 <TIM_OC1_SetConfig+0xdc>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC1_SetConfig+0x64>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a20      	ldr	r2, [pc, #128]	; (800864c <TIM_OC1_SetConfig+0xe0>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10c      	bne.n	80085ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f023 0308 	bic.w	r3, r3, #8
 80085d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 0304 	bic.w	r3, r3, #4
 80085e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a16      	ldr	r2, [pc, #88]	; (8008648 <TIM_OC1_SetConfig+0xdc>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d003      	beq.n	80085fa <TIM_OC1_SetConfig+0x8e>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a15      	ldr	r2, [pc, #84]	; (800864c <TIM_OC1_SetConfig+0xe0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d111      	bne.n	800861e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	621a      	str	r2, [r3, #32]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	fffeff8f 	.word	0xfffeff8f
 8008648:	40010000 	.word	0x40010000
 800864c:	40010400 	.word	0x40010400

08008650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f023 0210 	bic.w	r2, r3, #16
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <TIM_OC2_SetConfig+0xe4>)
 800867c:	4013      	ands	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a23      	ldr	r2, [pc, #140]	; (8008738 <TIM_OC2_SetConfig+0xe8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_OC2_SetConfig+0x68>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a22      	ldr	r2, [pc, #136]	; (800873c <TIM_OC2_SetConfig+0xec>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d10d      	bne.n	80086d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a18      	ldr	r2, [pc, #96]	; (8008738 <TIM_OC2_SetConfig+0xe8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC2_SetConfig+0x94>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a17      	ldr	r2, [pc, #92]	; (800873c <TIM_OC2_SetConfig+0xec>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d113      	bne.n	800870c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	feff8fff 	.word	0xfeff8fff
 8008738:	40010000 	.word	0x40010000
 800873c:	40010400 	.word	0x40010400

08008740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4b2d      	ldr	r3, [pc, #180]	; (8008820 <TIM_OC3_SetConfig+0xe0>)
 800876c:	4013      	ands	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a22      	ldr	r2, [pc, #136]	; (8008824 <TIM_OC3_SetConfig+0xe4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d003      	beq.n	80087a6 <TIM_OC3_SetConfig+0x66>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a21      	ldr	r2, [pc, #132]	; (8008828 <TIM_OC3_SetConfig+0xe8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d10d      	bne.n	80087c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	021b      	lsls	r3, r3, #8
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a17      	ldr	r2, [pc, #92]	; (8008824 <TIM_OC3_SetConfig+0xe4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_OC3_SetConfig+0x92>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a16      	ldr	r2, [pc, #88]	; (8008828 <TIM_OC3_SetConfig+0xe8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d113      	bne.n	80087fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	011b      	lsls	r3, r3, #4
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	621a      	str	r2, [r3, #32]
}
 8008814:	bf00      	nop
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	fffeff8f 	.word	0xfffeff8f
 8008824:	40010000 	.word	0x40010000
 8008828:	40010400 	.word	0x40010400

0800882c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <TIM_OC4_SetConfig+0xa4>)
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	031b      	lsls	r3, r3, #12
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a13      	ldr	r2, [pc, #76]	; (80088d4 <TIM_OC4_SetConfig+0xa8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_OC4_SetConfig+0x68>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a12      	ldr	r2, [pc, #72]	; (80088d8 <TIM_OC4_SetConfig+0xac>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d109      	bne.n	80088a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	019b      	lsls	r3, r3, #6
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	feff8fff 	.word	0xfeff8fff
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40010400 	.word	0x40010400

080088dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4b1b      	ldr	r3, [pc, #108]	; (8008974 <TIM_OC5_SetConfig+0x98>)
 8008908:	4013      	ands	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800891c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a12      	ldr	r2, [pc, #72]	; (8008978 <TIM_OC5_SetConfig+0x9c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <TIM_OC5_SetConfig+0x5e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a11      	ldr	r2, [pc, #68]	; (800897c <TIM_OC5_SetConfig+0xa0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d109      	bne.n	800894e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	021b      	lsls	r3, r3, #8
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	621a      	str	r2, [r3, #32]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	fffeff8f 	.word	0xfffeff8f
 8008978:	40010000 	.word	0x40010000
 800897c:	40010400 	.word	0x40010400

08008980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <TIM_OC6_SetConfig+0x9c>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	051b      	lsls	r3, r3, #20
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a13      	ldr	r2, [pc, #76]	; (8008a20 <TIM_OC6_SetConfig+0xa0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_OC6_SetConfig+0x60>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a12      	ldr	r2, [pc, #72]	; (8008a24 <TIM_OC6_SetConfig+0xa4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d109      	bne.n	80089f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	029b      	lsls	r3, r3, #10
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	feff8fff 	.word	0xfeff8fff
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40010400 	.word	0x40010400

08008a28 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a44:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4b3e      	ldr	r3, [pc, #248]	; (8008b4c <TIM_SlaveTimer_SetConfig+0x124>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b70      	cmp	r3, #112	; 0x70
 8008a70:	d01a      	beq.n	8008aa8 <TIM_SlaveTimer_SetConfig+0x80>
 8008a72:	2b70      	cmp	r3, #112	; 0x70
 8008a74:	d860      	bhi.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
 8008a76:	2b60      	cmp	r3, #96	; 0x60
 8008a78:	d054      	beq.n	8008b24 <TIM_SlaveTimer_SetConfig+0xfc>
 8008a7a:	2b60      	cmp	r3, #96	; 0x60
 8008a7c:	d85c      	bhi.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
 8008a7e:	2b50      	cmp	r3, #80	; 0x50
 8008a80:	d046      	beq.n	8008b10 <TIM_SlaveTimer_SetConfig+0xe8>
 8008a82:	2b50      	cmp	r3, #80	; 0x50
 8008a84:	d858      	bhi.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d019      	beq.n	8008abe <TIM_SlaveTimer_SetConfig+0x96>
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d854      	bhi.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
 8008a8e:	2b30      	cmp	r3, #48	; 0x30
 8008a90:	d055      	beq.n	8008b3e <TIM_SlaveTimer_SetConfig+0x116>
 8008a92:	2b30      	cmp	r3, #48	; 0x30
 8008a94:	d850      	bhi.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	d051      	beq.n	8008b3e <TIM_SlaveTimer_SetConfig+0x116>
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	d84c      	bhi.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d04d      	beq.n	8008b3e <TIM_SlaveTimer_SetConfig+0x116>
 8008aa2:	2b10      	cmp	r3, #16
 8008aa4:	d04b      	beq.n	8008b3e <TIM_SlaveTimer_SetConfig+0x116>
 8008aa6:	e047      	b.n	8008b38 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68d9      	ldr	r1, [r3, #12]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	f000 f8c4 	bl	8008c44 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008abc:	e040      	b.n	8008b40 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d101      	bne.n	8008aca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e03b      	b.n	8008b42 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a1a      	ldr	r2, [r3, #32]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0201 	bic.w	r2, r2, #1
 8008ae0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008af0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	621a      	str	r2, [r3, #32]
      break;
 8008b0e:	e017      	b.n	8008b40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	6899      	ldr	r1, [r3, #8]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f000 f817 	bl	8008b50 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008b22:	e00d      	b.n	8008b40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	6899      	ldr	r1, [r3, #8]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	461a      	mov	r2, r3
 8008b32:	f000 f83c 	bl	8008bae <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008b36:	e003      	b.n	8008b40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3c:	e000      	b.n	8008b40 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008b3e:	bf00      	nop
  }

  return status;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	fffefff8 	.word	0xfffefff8

08008b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f023 0201 	bic.w	r2, r3, #1
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f023 030a 	bic.w	r3, r3, #10
 8008b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b087      	sub	sp, #28
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f023 0210 	bic.w	r2, r3, #16
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	031b      	lsls	r3, r3, #12
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f043 0307 	orr.w	r3, r3, #7
 8008c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	609a      	str	r2, [r3, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	021a      	lsls	r2, r3, #8
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	609a      	str	r2, [r3, #8]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e06d      	b.n	8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a30      	ldr	r2, [pc, #192]	; (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d004      	beq.n	8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2f      	ldr	r2, [pc, #188]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d108      	bne.n	8008ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a20      	ldr	r2, [pc, #128]	; (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d022      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0e:	d01d      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d018      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a1c      	ldr	r2, [pc, #112]	; (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d013      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1a      	ldr	r2, [pc, #104]	; (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00e      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a15      	ldr	r2, [pc, #84]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d009      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d004      	beq.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d10c      	bne.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40010400 	.word	0x40010400
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40000c00 	.word	0x40000c00
 8008d98:	40014000 	.word	0x40014000
 8008d9c:	40001800 	.word	0x40001800

08008da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e040      	b.n	8008e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7fc fb0a 	bl	8005418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2224      	movs	r2, #36	; 0x24
 8008e08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0201 	bic.w	r2, r2, #1
 8008e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fbf8 	bl	8009610 <UART_SetConfig>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d101      	bne.n	8008e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e022      	b.n	8008e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fe50 	bl	8009ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fed7 	bl	8009c1c <UART_CheckIdleState>
 8008e6e:	4603      	mov	r3, r0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	f040 8081 	bne.w	8008f94 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <HAL_UART_Transmit+0x26>
 8008e98:	88fb      	ldrh	r3, [r7, #6]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e079      	b.n	8008f96 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_UART_Transmit+0x38>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e072      	b.n	8008f96 <HAL_UART_Transmit+0x11e>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2221      	movs	r2, #33	; 0x21
 8008ec4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ec6:	f7fc fb59 	bl	800557c <HAL_GetTick>
 8008eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	88fa      	ldrh	r2, [r7, #6]
 8008ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee4:	d108      	bne.n	8008ef8 <HAL_UART_Transmit+0x80>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d104      	bne.n	8008ef8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	61bb      	str	r3, [r7, #24]
 8008ef6:	e003      	b.n	8008f00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008f08:	e02c      	b.n	8008f64 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2200      	movs	r2, #0
 8008f12:	2180      	movs	r1, #128	; 0x80
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 feb4 	bl	8009c82 <UART_WaitOnFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e038      	b.n	8008f96 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	e007      	b.n	8008f52 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	781a      	ldrb	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1cc      	bne.n	8008f0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2200      	movs	r2, #0
 8008f78:	2140      	movs	r1, #64	; 0x40
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fe81 	bl	8009c82 <UART_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e005      	b.n	8008f96 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	e000      	b.n	8008f96 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008f94:	2302      	movs	r3, #2
  }
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3720      	adds	r7, #32
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b08a      	sub	sp, #40	; 0x28
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d13d      	bne.n	8009030 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <HAL_UART_Receive_IT+0x22>
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e036      	b.n	8009032 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d101      	bne.n	8008fd2 <HAL_UART_Receive_IT+0x34>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e02f      	b.n	8009032 <HAL_UART_Receive_IT+0x94>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d018      	beq.n	8009020 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	623b      	str	r3, [r7, #32]
 800900e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	69f9      	ldr	r1, [r7, #28]
 8009012:	6a3a      	ldr	r2, [r7, #32]
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	61bb      	str	r3, [r7, #24]
   return(result);
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e6      	bne.n	8008fee <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009020:	88fb      	ldrh	r3, [r7, #6]
 8009022:	461a      	mov	r2, r3
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fef0 	bl	8009e0c <UART_Start_Receive_IT>
 800902c:	4603      	mov	r3, r0
 800902e:	e000      	b.n	8009032 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009030:	2302      	movs	r3, #2
  }
}
 8009032:	4618      	mov	r0, r3
 8009034:	3728      	adds	r7, #40	; 0x28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b0ba      	sub	sp, #232	; 0xe8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009066:	f640 030f 	movw	r3, #2063	; 0x80f
 800906a:	4013      	ands	r3, r2
 800906c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009074:	2b00      	cmp	r3, #0
 8009076:	d115      	bne.n	80090a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00f      	beq.n	80090a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	d009      	beq.n	80090a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 828f 	beq.w	80095b8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
      }
      return;
 80090a2:	e289      	b.n	80095b8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8117 	beq.w	80092dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80090ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80090ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80090be:	4b85      	ldr	r3, [pc, #532]	; (80092d4 <HAL_UART_IRQHandler+0x298>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 810a 	beq.w	80092dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d011      	beq.n	80090f8 <HAL_UART_IRQHandler+0xbc>
 80090d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2201      	movs	r2, #1
 80090e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ee:	f043 0201 	orr.w	r2, r3, #1
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d011      	beq.n	8009128 <HAL_UART_IRQHandler+0xec>
 8009104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2202      	movs	r2, #2
 8009116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800911e:	f043 0204 	orr.w	r2, r3, #4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d011      	beq.n	8009158 <HAL_UART_IRQHandler+0x11c>
 8009134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00b      	beq.n	8009158 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2204      	movs	r2, #4
 8009146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800914e:	f043 0202 	orr.w	r2, r3, #2
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d017      	beq.n	8009194 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d105      	bne.n	800917c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009174:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2208      	movs	r2, #8
 8009182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800918a:	f043 0208 	orr.w	r2, r3, #8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800919c:	2b00      	cmp	r3, #0
 800919e:	d012      	beq.n	80091c6 <HAL_UART_IRQHandler+0x18a>
 80091a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091bc:	f043 0220 	orr.w	r2, r3, #32
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 81f5 	beq.w	80095bc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80091d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00d      	beq.n	80091fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920e:	2b40      	cmp	r3, #64	; 0x40
 8009210:	d005      	beq.n	800921e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009216:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800921a:	2b00      	cmp	r3, #0
 800921c:	d04f      	beq.n	80092be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 febe 	bl	8009fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b40      	cmp	r3, #64	; 0x40
 8009230:	d141      	bne.n	80092b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800924c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800925e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800926a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1d9      	bne.n	8009232 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009282:	2b00      	cmp	r3, #0
 8009284:	d013      	beq.n	80092ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928a:	4a13      	ldr	r2, [pc, #76]	; (80092d8 <HAL_UART_IRQHandler+0x29c>)
 800928c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	4618      	mov	r0, r3
 8009294:	f7fc fad0 	bl	8005838 <HAL_DMA_Abort_IT>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d017      	beq.n	80092ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ac:	e00f      	b.n	80092ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f998 	bl	80095e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b4:	e00b      	b.n	80092ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f994 	bl	80095e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092bc:	e007      	b.n	80092ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f990 	bl	80095e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80092cc:	e176      	b.n	80095bc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ce:	bf00      	nop
    return;
 80092d0:	e174      	b.n	80095bc <HAL_UART_IRQHandler+0x580>
 80092d2:	bf00      	nop
 80092d4:	04000120 	.word	0x04000120
 80092d8:	0800a067 	.word	0x0800a067

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	f040 8144 	bne.w	800956e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ea:	f003 0310 	and.w	r3, r3, #16
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 813d 	beq.w	800956e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f8:	f003 0310 	and.w	r3, r3, #16
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8136 	beq.w	800956e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2210      	movs	r2, #16
 8009308:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	f040 80b2 	bne.w	800947e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009326:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8148 	beq.w	80095c0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800933a:	429a      	cmp	r2, r3
 800933c:	f080 8140 	bcs.w	80095c0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009346:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009354:	f000 8085 	beq.w	8009462 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800936c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009386:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800938e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800939a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1da      	bne.n	8009358 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3308      	adds	r3, #8
 80093c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e1      	bne.n	80093a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	3308      	adds	r3, #8
 80093e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3308      	adds	r3, #8
 80093fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009402:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009404:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e3      	bne.n	80093de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009432:	f023 0310 	bic.w	r3, r3, #16
 8009436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009444:	65bb      	str	r3, [r7, #88]	; 0x58
 8009446:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800944a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	4618      	mov	r0, r3
 800945e:	f7fc f97b 	bl	8005758 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800946e:	b29b      	uxth	r3, r3
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	b29b      	uxth	r3, r3
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8be 	bl	80095f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800947c:	e0a0      	b.n	80095c0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800948a:	b29b      	uxth	r3, r3
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 8092 	beq.w	80095c4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80094a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 808d 	beq.w	80095c4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094cc:	647b      	str	r3, [r7, #68]	; 0x44
 80094ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e4      	bne.n	80094aa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3308      	adds	r3, #8
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	e853 3f00 	ldrex	r3, [r3]
 80094ee:	623b      	str	r3, [r7, #32]
   return(result);
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	f023 0301 	bic.w	r3, r3, #1
 80094f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009504:	633a      	str	r2, [r7, #48]	; 0x30
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800950a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e3      	bne.n	80094e0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	60fb      	str	r3, [r7, #12]
   return(result);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0310 	bic.w	r3, r3, #16
 800953e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	69b9      	ldr	r1, [r7, #24]
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	617b      	str	r3, [r7, #20]
   return(result);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e4      	bne.n	800952a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f846 	bl	80095f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800956c:	e02a      	b.n	80095c4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800957a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b00      	cmp	r3, #0
 8009584:	d008      	beq.n	8009598 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01c      	beq.n	80095c8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
    }
    return;
 8009596:	e017      	b.n	80095c8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d012      	beq.n	80095ca <HAL_UART_IRQHandler+0x58e>
 80095a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00c      	beq.n	80095ca <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fd6e 	bl	800a092 <UART_EndTransmit_IT>
    return;
 80095b6:	e008      	b.n	80095ca <HAL_UART_IRQHandler+0x58e>
      return;
 80095b8:	bf00      	nop
 80095ba:	e006      	b.n	80095ca <HAL_UART_IRQHandler+0x58e>
    return;
 80095bc:	bf00      	nop
 80095be:	e004      	b.n	80095ca <HAL_UART_IRQHandler+0x58e>
      return;
 80095c0:	bf00      	nop
 80095c2:	e002      	b.n	80095ca <HAL_UART_IRQHandler+0x58e>
      return;
 80095c4:	bf00      	nop
 80095c6:	e000      	b.n	80095ca <HAL_UART_IRQHandler+0x58e>
    return;
 80095c8:	bf00      	nop
  }

}
 80095ca:	37e8      	adds	r7, #232	; 0xe8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4ba6      	ldr	r3, [pc, #664]	; (80098d4 <UART_SetConfig+0x2c4>)
 800963c:	4013      	ands	r3, r2
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6812      	ldr	r2, [r2, #0]
 8009642:	6979      	ldr	r1, [r7, #20]
 8009644:	430b      	orrs	r3, r1
 8009646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	430a      	orrs	r2, r1
 8009680:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a94      	ldr	r2, [pc, #592]	; (80098d8 <UART_SetConfig+0x2c8>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d120      	bne.n	80096ce <UART_SetConfig+0xbe>
 800968c:	4b93      	ldr	r3, [pc, #588]	; (80098dc <UART_SetConfig+0x2cc>)
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b03      	cmp	r3, #3
 8009698:	d816      	bhi.n	80096c8 <UART_SetConfig+0xb8>
 800969a:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <UART_SetConfig+0x90>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096b1 	.word	0x080096b1
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096b7 	.word	0x080096b7
 80096ac:	080096c3 	.word	0x080096c3
 80096b0:	2301      	movs	r3, #1
 80096b2:	77fb      	strb	r3, [r7, #31]
 80096b4:	e150      	b.n	8009958 <UART_SetConfig+0x348>
 80096b6:	2302      	movs	r3, #2
 80096b8:	77fb      	strb	r3, [r7, #31]
 80096ba:	e14d      	b.n	8009958 <UART_SetConfig+0x348>
 80096bc:	2304      	movs	r3, #4
 80096be:	77fb      	strb	r3, [r7, #31]
 80096c0:	e14a      	b.n	8009958 <UART_SetConfig+0x348>
 80096c2:	2308      	movs	r3, #8
 80096c4:	77fb      	strb	r3, [r7, #31]
 80096c6:	e147      	b.n	8009958 <UART_SetConfig+0x348>
 80096c8:	2310      	movs	r3, #16
 80096ca:	77fb      	strb	r3, [r7, #31]
 80096cc:	e144      	b.n	8009958 <UART_SetConfig+0x348>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a83      	ldr	r2, [pc, #524]	; (80098e0 <UART_SetConfig+0x2d0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d132      	bne.n	800973e <UART_SetConfig+0x12e>
 80096d8:	4b80      	ldr	r3, [pc, #512]	; (80098dc <UART_SetConfig+0x2cc>)
 80096da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096de:	f003 030c 	and.w	r3, r3, #12
 80096e2:	2b0c      	cmp	r3, #12
 80096e4:	d828      	bhi.n	8009738 <UART_SetConfig+0x128>
 80096e6:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0xdc>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009721 	.word	0x08009721
 80096f0:	08009739 	.word	0x08009739
 80096f4:	08009739 	.word	0x08009739
 80096f8:	08009739 	.word	0x08009739
 80096fc:	0800972d 	.word	0x0800972d
 8009700:	08009739 	.word	0x08009739
 8009704:	08009739 	.word	0x08009739
 8009708:	08009739 	.word	0x08009739
 800970c:	08009727 	.word	0x08009727
 8009710:	08009739 	.word	0x08009739
 8009714:	08009739 	.word	0x08009739
 8009718:	08009739 	.word	0x08009739
 800971c:	08009733 	.word	0x08009733
 8009720:	2300      	movs	r3, #0
 8009722:	77fb      	strb	r3, [r7, #31]
 8009724:	e118      	b.n	8009958 <UART_SetConfig+0x348>
 8009726:	2302      	movs	r3, #2
 8009728:	77fb      	strb	r3, [r7, #31]
 800972a:	e115      	b.n	8009958 <UART_SetConfig+0x348>
 800972c:	2304      	movs	r3, #4
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e112      	b.n	8009958 <UART_SetConfig+0x348>
 8009732:	2308      	movs	r3, #8
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e10f      	b.n	8009958 <UART_SetConfig+0x348>
 8009738:	2310      	movs	r3, #16
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e10c      	b.n	8009958 <UART_SetConfig+0x348>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a68      	ldr	r2, [pc, #416]	; (80098e4 <UART_SetConfig+0x2d4>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d120      	bne.n	800978a <UART_SetConfig+0x17a>
 8009748:	4b64      	ldr	r3, [pc, #400]	; (80098dc <UART_SetConfig+0x2cc>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009752:	2b30      	cmp	r3, #48	; 0x30
 8009754:	d013      	beq.n	800977e <UART_SetConfig+0x16e>
 8009756:	2b30      	cmp	r3, #48	; 0x30
 8009758:	d814      	bhi.n	8009784 <UART_SetConfig+0x174>
 800975a:	2b20      	cmp	r3, #32
 800975c:	d009      	beq.n	8009772 <UART_SetConfig+0x162>
 800975e:	2b20      	cmp	r3, #32
 8009760:	d810      	bhi.n	8009784 <UART_SetConfig+0x174>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <UART_SetConfig+0x15c>
 8009766:	2b10      	cmp	r3, #16
 8009768:	d006      	beq.n	8009778 <UART_SetConfig+0x168>
 800976a:	e00b      	b.n	8009784 <UART_SetConfig+0x174>
 800976c:	2300      	movs	r3, #0
 800976e:	77fb      	strb	r3, [r7, #31]
 8009770:	e0f2      	b.n	8009958 <UART_SetConfig+0x348>
 8009772:	2302      	movs	r3, #2
 8009774:	77fb      	strb	r3, [r7, #31]
 8009776:	e0ef      	b.n	8009958 <UART_SetConfig+0x348>
 8009778:	2304      	movs	r3, #4
 800977a:	77fb      	strb	r3, [r7, #31]
 800977c:	e0ec      	b.n	8009958 <UART_SetConfig+0x348>
 800977e:	2308      	movs	r3, #8
 8009780:	77fb      	strb	r3, [r7, #31]
 8009782:	e0e9      	b.n	8009958 <UART_SetConfig+0x348>
 8009784:	2310      	movs	r3, #16
 8009786:	77fb      	strb	r3, [r7, #31]
 8009788:	e0e6      	b.n	8009958 <UART_SetConfig+0x348>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a56      	ldr	r2, [pc, #344]	; (80098e8 <UART_SetConfig+0x2d8>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d120      	bne.n	80097d6 <UART_SetConfig+0x1c6>
 8009794:	4b51      	ldr	r3, [pc, #324]	; (80098dc <UART_SetConfig+0x2cc>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800979a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800979e:	2bc0      	cmp	r3, #192	; 0xc0
 80097a0:	d013      	beq.n	80097ca <UART_SetConfig+0x1ba>
 80097a2:	2bc0      	cmp	r3, #192	; 0xc0
 80097a4:	d814      	bhi.n	80097d0 <UART_SetConfig+0x1c0>
 80097a6:	2b80      	cmp	r3, #128	; 0x80
 80097a8:	d009      	beq.n	80097be <UART_SetConfig+0x1ae>
 80097aa:	2b80      	cmp	r3, #128	; 0x80
 80097ac:	d810      	bhi.n	80097d0 <UART_SetConfig+0x1c0>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <UART_SetConfig+0x1a8>
 80097b2:	2b40      	cmp	r3, #64	; 0x40
 80097b4:	d006      	beq.n	80097c4 <UART_SetConfig+0x1b4>
 80097b6:	e00b      	b.n	80097d0 <UART_SetConfig+0x1c0>
 80097b8:	2300      	movs	r3, #0
 80097ba:	77fb      	strb	r3, [r7, #31]
 80097bc:	e0cc      	b.n	8009958 <UART_SetConfig+0x348>
 80097be:	2302      	movs	r3, #2
 80097c0:	77fb      	strb	r3, [r7, #31]
 80097c2:	e0c9      	b.n	8009958 <UART_SetConfig+0x348>
 80097c4:	2304      	movs	r3, #4
 80097c6:	77fb      	strb	r3, [r7, #31]
 80097c8:	e0c6      	b.n	8009958 <UART_SetConfig+0x348>
 80097ca:	2308      	movs	r3, #8
 80097cc:	77fb      	strb	r3, [r7, #31]
 80097ce:	e0c3      	b.n	8009958 <UART_SetConfig+0x348>
 80097d0:	2310      	movs	r3, #16
 80097d2:	77fb      	strb	r3, [r7, #31]
 80097d4:	e0c0      	b.n	8009958 <UART_SetConfig+0x348>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a44      	ldr	r2, [pc, #272]	; (80098ec <UART_SetConfig+0x2dc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d125      	bne.n	800982c <UART_SetConfig+0x21c>
 80097e0:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <UART_SetConfig+0x2cc>)
 80097e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ee:	d017      	beq.n	8009820 <UART_SetConfig+0x210>
 80097f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097f4:	d817      	bhi.n	8009826 <UART_SetConfig+0x216>
 80097f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fa:	d00b      	beq.n	8009814 <UART_SetConfig+0x204>
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009800:	d811      	bhi.n	8009826 <UART_SetConfig+0x216>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <UART_SetConfig+0x1fe>
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d006      	beq.n	800981a <UART_SetConfig+0x20a>
 800980c:	e00b      	b.n	8009826 <UART_SetConfig+0x216>
 800980e:	2300      	movs	r3, #0
 8009810:	77fb      	strb	r3, [r7, #31]
 8009812:	e0a1      	b.n	8009958 <UART_SetConfig+0x348>
 8009814:	2302      	movs	r3, #2
 8009816:	77fb      	strb	r3, [r7, #31]
 8009818:	e09e      	b.n	8009958 <UART_SetConfig+0x348>
 800981a:	2304      	movs	r3, #4
 800981c:	77fb      	strb	r3, [r7, #31]
 800981e:	e09b      	b.n	8009958 <UART_SetConfig+0x348>
 8009820:	2308      	movs	r3, #8
 8009822:	77fb      	strb	r3, [r7, #31]
 8009824:	e098      	b.n	8009958 <UART_SetConfig+0x348>
 8009826:	2310      	movs	r3, #16
 8009828:	77fb      	strb	r3, [r7, #31]
 800982a:	e095      	b.n	8009958 <UART_SetConfig+0x348>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a2f      	ldr	r2, [pc, #188]	; (80098f0 <UART_SetConfig+0x2e0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d125      	bne.n	8009882 <UART_SetConfig+0x272>
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <UART_SetConfig+0x2cc>)
 8009838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009844:	d017      	beq.n	8009876 <UART_SetConfig+0x266>
 8009846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800984a:	d817      	bhi.n	800987c <UART_SetConfig+0x26c>
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009850:	d00b      	beq.n	800986a <UART_SetConfig+0x25a>
 8009852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009856:	d811      	bhi.n	800987c <UART_SetConfig+0x26c>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <UART_SetConfig+0x254>
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009860:	d006      	beq.n	8009870 <UART_SetConfig+0x260>
 8009862:	e00b      	b.n	800987c <UART_SetConfig+0x26c>
 8009864:	2301      	movs	r3, #1
 8009866:	77fb      	strb	r3, [r7, #31]
 8009868:	e076      	b.n	8009958 <UART_SetConfig+0x348>
 800986a:	2302      	movs	r3, #2
 800986c:	77fb      	strb	r3, [r7, #31]
 800986e:	e073      	b.n	8009958 <UART_SetConfig+0x348>
 8009870:	2304      	movs	r3, #4
 8009872:	77fb      	strb	r3, [r7, #31]
 8009874:	e070      	b.n	8009958 <UART_SetConfig+0x348>
 8009876:	2308      	movs	r3, #8
 8009878:	77fb      	strb	r3, [r7, #31]
 800987a:	e06d      	b.n	8009958 <UART_SetConfig+0x348>
 800987c:	2310      	movs	r3, #16
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e06a      	b.n	8009958 <UART_SetConfig+0x348>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <UART_SetConfig+0x2e4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d138      	bne.n	80098fe <UART_SetConfig+0x2ee>
 800988c:	4b13      	ldr	r3, [pc, #76]	; (80098dc <UART_SetConfig+0x2cc>)
 800988e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009892:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009896:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800989a:	d017      	beq.n	80098cc <UART_SetConfig+0x2bc>
 800989c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098a0:	d82a      	bhi.n	80098f8 <UART_SetConfig+0x2e8>
 80098a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a6:	d00b      	beq.n	80098c0 <UART_SetConfig+0x2b0>
 80098a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ac:	d824      	bhi.n	80098f8 <UART_SetConfig+0x2e8>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <UART_SetConfig+0x2aa>
 80098b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b6:	d006      	beq.n	80098c6 <UART_SetConfig+0x2b6>
 80098b8:	e01e      	b.n	80098f8 <UART_SetConfig+0x2e8>
 80098ba:	2300      	movs	r3, #0
 80098bc:	77fb      	strb	r3, [r7, #31]
 80098be:	e04b      	b.n	8009958 <UART_SetConfig+0x348>
 80098c0:	2302      	movs	r3, #2
 80098c2:	77fb      	strb	r3, [r7, #31]
 80098c4:	e048      	b.n	8009958 <UART_SetConfig+0x348>
 80098c6:	2304      	movs	r3, #4
 80098c8:	77fb      	strb	r3, [r7, #31]
 80098ca:	e045      	b.n	8009958 <UART_SetConfig+0x348>
 80098cc:	2308      	movs	r3, #8
 80098ce:	77fb      	strb	r3, [r7, #31]
 80098d0:	e042      	b.n	8009958 <UART_SetConfig+0x348>
 80098d2:	bf00      	nop
 80098d4:	efff69f3 	.word	0xefff69f3
 80098d8:	40011000 	.word	0x40011000
 80098dc:	40023800 	.word	0x40023800
 80098e0:	40004400 	.word	0x40004400
 80098e4:	40004800 	.word	0x40004800
 80098e8:	40004c00 	.word	0x40004c00
 80098ec:	40005000 	.word	0x40005000
 80098f0:	40011400 	.word	0x40011400
 80098f4:	40007800 	.word	0x40007800
 80098f8:	2310      	movs	r3, #16
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e02c      	b.n	8009958 <UART_SetConfig+0x348>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a72      	ldr	r2, [pc, #456]	; (8009acc <UART_SetConfig+0x4bc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d125      	bne.n	8009954 <UART_SetConfig+0x344>
 8009908:	4b71      	ldr	r3, [pc, #452]	; (8009ad0 <UART_SetConfig+0x4c0>)
 800990a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800990e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009912:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009916:	d017      	beq.n	8009948 <UART_SetConfig+0x338>
 8009918:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800991c:	d817      	bhi.n	800994e <UART_SetConfig+0x33e>
 800991e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009922:	d00b      	beq.n	800993c <UART_SetConfig+0x32c>
 8009924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009928:	d811      	bhi.n	800994e <UART_SetConfig+0x33e>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <UART_SetConfig+0x326>
 800992e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009932:	d006      	beq.n	8009942 <UART_SetConfig+0x332>
 8009934:	e00b      	b.n	800994e <UART_SetConfig+0x33e>
 8009936:	2300      	movs	r3, #0
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e00d      	b.n	8009958 <UART_SetConfig+0x348>
 800993c:	2302      	movs	r3, #2
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e00a      	b.n	8009958 <UART_SetConfig+0x348>
 8009942:	2304      	movs	r3, #4
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e007      	b.n	8009958 <UART_SetConfig+0x348>
 8009948:	2308      	movs	r3, #8
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e004      	b.n	8009958 <UART_SetConfig+0x348>
 800994e:	2310      	movs	r3, #16
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e001      	b.n	8009958 <UART_SetConfig+0x348>
 8009954:	2310      	movs	r3, #16
 8009956:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009960:	d15b      	bne.n	8009a1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009962:	7ffb      	ldrb	r3, [r7, #31]
 8009964:	2b08      	cmp	r3, #8
 8009966:	d828      	bhi.n	80099ba <UART_SetConfig+0x3aa>
 8009968:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <UART_SetConfig+0x360>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009995 	.word	0x08009995
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099a5 	.word	0x080099a5
 800997c:	080099bb 	.word	0x080099bb
 8009980:	080099ab 	.word	0x080099ab
 8009984:	080099bb 	.word	0x080099bb
 8009988:	080099bb 	.word	0x080099bb
 800998c:	080099bb 	.word	0x080099bb
 8009990:	080099b3 	.word	0x080099b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009994:	f7fd fc68 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8009998:	61b8      	str	r0, [r7, #24]
        break;
 800999a:	e013      	b.n	80099c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800999c:	f7fd fc78 	bl	8007290 <HAL_RCC_GetPCLK2Freq>
 80099a0:	61b8      	str	r0, [r7, #24]
        break;
 80099a2:	e00f      	b.n	80099c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099a4:	4b4b      	ldr	r3, [pc, #300]	; (8009ad4 <UART_SetConfig+0x4c4>)
 80099a6:	61bb      	str	r3, [r7, #24]
        break;
 80099a8:	e00c      	b.n	80099c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099aa:	f7fd fb4b 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 80099ae:	61b8      	str	r0, [r7, #24]
        break;
 80099b0:	e008      	b.n	80099c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099b6:	61bb      	str	r3, [r7, #24]
        break;
 80099b8:	e004      	b.n	80099c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	77bb      	strb	r3, [r7, #30]
        break;
 80099c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d074      	beq.n	8009ab4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	005a      	lsls	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	fbb2 f3f3 	udiv	r3, r2, r3
 80099de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d916      	bls.n	8009a14 <UART_SetConfig+0x404>
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ec:	d212      	bcs.n	8009a14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f023 030f 	bic.w	r3, r3, #15
 80099f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	085b      	lsrs	r3, r3, #1
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	89fa      	ldrh	r2, [r7, #14]
 8009a10:	60da      	str	r2, [r3, #12]
 8009a12:	e04f      	b.n	8009ab4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	77bb      	strb	r3, [r7, #30]
 8009a18:	e04c      	b.n	8009ab4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a1a:	7ffb      	ldrb	r3, [r7, #31]
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d828      	bhi.n	8009a72 <UART_SetConfig+0x462>
 8009a20:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <UART_SetConfig+0x418>)
 8009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a26:	bf00      	nop
 8009a28:	08009a4d 	.word	0x08009a4d
 8009a2c:	08009a55 	.word	0x08009a55
 8009a30:	08009a5d 	.word	0x08009a5d
 8009a34:	08009a73 	.word	0x08009a73
 8009a38:	08009a63 	.word	0x08009a63
 8009a3c:	08009a73 	.word	0x08009a73
 8009a40:	08009a73 	.word	0x08009a73
 8009a44:	08009a73 	.word	0x08009a73
 8009a48:	08009a6b 	.word	0x08009a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a4c:	f7fd fc0c 	bl	8007268 <HAL_RCC_GetPCLK1Freq>
 8009a50:	61b8      	str	r0, [r7, #24]
        break;
 8009a52:	e013      	b.n	8009a7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a54:	f7fd fc1c 	bl	8007290 <HAL_RCC_GetPCLK2Freq>
 8009a58:	61b8      	str	r0, [r7, #24]
        break;
 8009a5a:	e00f      	b.n	8009a7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a5c:	4b1d      	ldr	r3, [pc, #116]	; (8009ad4 <UART_SetConfig+0x4c4>)
 8009a5e:	61bb      	str	r3, [r7, #24]
        break;
 8009a60:	e00c      	b.n	8009a7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a62:	f7fd faef 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8009a66:	61b8      	str	r0, [r7, #24]
        break;
 8009a68:	e008      	b.n	8009a7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6e:	61bb      	str	r3, [r7, #24]
        break;
 8009a70:	e004      	b.n	8009a7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	77bb      	strb	r3, [r7, #30]
        break;
 8009a7a:	bf00      	nop
    }

    if (pclk != 0U)
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d018      	beq.n	8009ab4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	085a      	lsrs	r2, r3, #1
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	d909      	bls.n	8009ab0 <UART_SetConfig+0x4a0>
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa2:	d205      	bcs.n	8009ab0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	e001      	b.n	8009ab4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ac0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3720      	adds	r7, #32
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	40007c00 	.word	0x40007c00
 8009ad0:	40023800 	.word	0x40023800
 8009ad4:	00f42400 	.word	0x00f42400

08009ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00a      	beq.n	8009b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d01a      	beq.n	8009bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bd6:	d10a      	bne.n	8009bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af02      	add	r7, sp, #8
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c2c:	f7fb fca6 	bl	800557c <HAL_GetTick>
 8009c30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d10e      	bne.n	8009c5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f817 	bl	8009c82 <UART_WaitOnFlagUntilTimeout>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e00d      	b.n	8009c7a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2220      	movs	r2, #32
 8009c62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b09c      	sub	sp, #112	; 0x70
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c92:	e0a5      	b.n	8009de0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	f000 80a1 	beq.w	8009de0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c9e:	f7fb fc6d 	bl	800557c <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d302      	bcc.n	8009cb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d13e      	bne.n	8009d32 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e6      	bne.n	8009cb4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	f023 0301 	bic.w	r3, r3, #1
 8009cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d06:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d0e:	e841 2300 	strex	r3, r2, [r1]
 8009d12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e5      	bne.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2220      	movs	r2, #32
 8009d24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e067      	b.n	8009e02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 0304 	and.w	r3, r3, #4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d04f      	beq.n	8009de0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d4e:	d147      	bne.n	8009de0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34
 8009d7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e6      	bne.n	8009d5a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3308      	adds	r3, #8
 8009d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	e853 3f00 	ldrex	r3, [r3]
 8009d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f023 0301 	bic.w	r3, r3, #1
 8009da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3308      	adds	r3, #8
 8009daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dac:	623a      	str	r2, [r7, #32]
 8009dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	69f9      	ldr	r1, [r7, #28]
 8009db2:	6a3a      	ldr	r2, [r7, #32]
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e5      	bne.n	8009d8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e010      	b.n	8009e02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69da      	ldr	r2, [r3, #28]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	4013      	ands	r3, r2
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	bf0c      	ite	eq
 8009df0:	2301      	moveq	r3, #1
 8009df2:	2300      	movne	r3, #0
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	461a      	mov	r2, r3
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	f43f af4a 	beq.w	8009c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3770      	adds	r7, #112	; 0x70
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b097      	sub	sp, #92	; 0x5c
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	4613      	mov	r3, r2
 8009e18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	88fa      	ldrh	r2, [r7, #6]
 8009e24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	88fa      	ldrh	r2, [r7, #6]
 8009e2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e3e:	d10e      	bne.n	8009e5e <UART_Start_Receive_IT+0x52>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d105      	bne.n	8009e54 <UART_Start_Receive_IT+0x48>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e52:	e02d      	b.n	8009eb0 <UART_Start_Receive_IT+0xa4>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	22ff      	movs	r2, #255	; 0xff
 8009e58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e5c:	e028      	b.n	8009eb0 <UART_Start_Receive_IT+0xa4>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10d      	bne.n	8009e82 <UART_Start_Receive_IT+0x76>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d104      	bne.n	8009e78 <UART_Start_Receive_IT+0x6c>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	22ff      	movs	r2, #255	; 0xff
 8009e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e76:	e01b      	b.n	8009eb0 <UART_Start_Receive_IT+0xa4>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	227f      	movs	r2, #127	; 0x7f
 8009e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e80:	e016      	b.n	8009eb0 <UART_Start_Receive_IT+0xa4>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e8a:	d10d      	bne.n	8009ea8 <UART_Start_Receive_IT+0x9c>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <UART_Start_Receive_IT+0x92>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	227f      	movs	r2, #127	; 0x7f
 8009e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e9c:	e008      	b.n	8009eb0 <UART_Start_Receive_IT+0xa4>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	223f      	movs	r2, #63	; 0x3f
 8009ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ea6:	e003      	b.n	8009eb0 <UART_Start_Receive_IT+0xa4>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2222      	movs	r2, #34	; 0x22
 8009ebc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e5      	bne.n	8009ebe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efa:	d107      	bne.n	8009f0c <UART_Start_Receive_IT+0x100>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d103      	bne.n	8009f0c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4a24      	ldr	r2, [pc, #144]	; (8009f98 <UART_Start_Receive_IT+0x18c>)
 8009f08:	665a      	str	r2, [r3, #100]	; 0x64
 8009f0a:	e002      	b.n	8009f12 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4a23      	ldr	r2, [pc, #140]	; (8009f9c <UART_Start_Receive_IT+0x190>)
 8009f10:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d019      	beq.n	8009f56 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
 8009f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e6      	bne.n	8009f22 <UART_Start_Receive_IT+0x116>
 8009f54:	e018      	b.n	8009f88 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	613b      	str	r3, [r7, #16]
   return(result);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f043 0320 	orr.w	r3, r3, #32
 8009f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f74:	623b      	str	r3, [r7, #32]
 8009f76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	69f9      	ldr	r1, [r7, #28]
 8009f7a:	6a3a      	ldr	r2, [r7, #32]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e6      	bne.n	8009f56 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	375c      	adds	r7, #92	; 0x5c
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	0800a243 	.word	0x0800a243
 8009f9c:	0800a0e7 	.word	0x0800a0e7

08009fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b095      	sub	sp, #84	; 0x54
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8009fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e6      	bne.n	8009fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3308      	adds	r3, #8
 8009fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f023 0301 	bic.w	r3, r3, #1
 8009ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e5      	bne.n	8009fda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a012:	2b01      	cmp	r3, #1
 800a014:	d118      	bne.n	800a048 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	60bb      	str	r3, [r7, #8]
   return(result);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f023 0310 	bic.w	r3, r3, #16
 800a02a:	647b      	str	r3, [r7, #68]	; 0x44
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a034:	61bb      	str	r3, [r7, #24]
 800a036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6979      	ldr	r1, [r7, #20]
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	613b      	str	r3, [r7, #16]
   return(result);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e6      	bne.n	800a016 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a05a:	bf00      	nop
 800a05c:	3754      	adds	r7, #84	; 0x54
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff faad 	bl	80095e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b088      	sub	sp, #32
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6979      	ldr	r1, [r7, #20]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e6      	bne.n	800a09a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff fa79 	bl	80095d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0de:	bf00      	nop
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b096      	sub	sp, #88	; 0x58
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0fc:	2b22      	cmp	r3, #34	; 0x22
 800a0fe:	f040 8094 	bne.w	800a22a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a10c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a110:	b2d9      	uxtb	r1, r3
 800a112:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a116:	b2da      	uxtb	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11c:	400a      	ands	r2, r1
 800a11e:	b2d2      	uxtb	r2, r2
 800a120:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a132:	b29b      	uxth	r3, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d177      	bne.n	800a23a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a15e:	653b      	str	r3, [r7, #80]	; 0x50
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a168:	647b      	str	r3, [r7, #68]	; 0x44
 800a16a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a16e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e6      	bne.n	800a14a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3308      	adds	r3, #8
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	623b      	str	r3, [r7, #32]
   return(result);
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3308      	adds	r3, #8
 800a19a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a19c:	633a      	str	r2, [r7, #48]	; 0x30
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e5      	bne.n	800a17c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d12e      	bne.n	800a222 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 0310 	bic.w	r3, r3, #16
 800a1de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	69b9      	ldr	r1, [r7, #24]
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e6      	bne.n	800a1ca <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	2b10      	cmp	r3, #16
 800a208:	d103      	bne.n	800a212 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2210      	movs	r2, #16
 800a210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff f9ec 	bl	80095f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a220:	e00b      	b.n	800a23a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7f8 fd38 	bl	8002c98 <HAL_UART_RxCpltCallback>
}
 800a228:	e007      	b.n	800a23a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699a      	ldr	r2, [r3, #24]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0208 	orr.w	r2, r2, #8
 800a238:	619a      	str	r2, [r3, #24]
}
 800a23a:	bf00      	nop
 800a23c:	3758      	adds	r7, #88	; 0x58
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b096      	sub	sp, #88	; 0x58
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a250:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a258:	2b22      	cmp	r3, #34	; 0x22
 800a25a:	f040 8094 	bne.w	800a386 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a26e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a272:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a276:	4013      	ands	r3, r2
 800a278:	b29a      	uxth	r2, r3
 800a27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a282:	1c9a      	adds	r2, r3, #2
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a28e:	b29b      	uxth	r3, r3
 800a290:	3b01      	subs	r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d177      	bne.n	800a396 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	f023 0301 	bic.w	r3, r3, #1
 800a2ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d12e      	bne.n	800a37e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	e853 3f00 	ldrex	r3, [r3]
 800a332:	60bb      	str	r3, [r7, #8]
   return(result);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f023 0310 	bic.w	r3, r3, #16
 800a33a:	647b      	str	r3, [r7, #68]	; 0x44
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	6979      	ldr	r1, [r7, #20]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	e841 2300 	strex	r3, r2, [r1]
 800a350:	613b      	str	r3, [r7, #16]
   return(result);
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e6      	bne.n	800a326 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f003 0310 	and.w	r3, r3, #16
 800a362:	2b10      	cmp	r3, #16
 800a364:	d103      	bne.n	800a36e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2210      	movs	r2, #16
 800a36c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff f93e 	bl	80095f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a37c:	e00b      	b.n	800a396 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f8 fc8a 	bl	8002c98 <HAL_UART_RxCpltCallback>
}
 800a384:	e007      	b.n	800a396 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	699a      	ldr	r2, [r3, #24]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0208 	orr.w	r2, r2, #8
 800a394:	619a      	str	r2, [r3, #24]
}
 800a396:	bf00      	nop
 800a398:	3758      	adds	r7, #88	; 0x58
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a39e:	b480      	push	{r7}
 800a3a0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a3a2:	bf00      	nop
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b2:	f3ef 8305 	mrs	r3, IPSR
 800a3b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10f      	bne.n	800a3de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3be:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c2:	607b      	str	r3, [r7, #4]
  return(result);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3ca:	f3ef 8311 	mrs	r3, BASEPRI
 800a3ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <osKernelInitialize+0x3a>
 800a3d6:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <osKernelInitialize+0x64>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d103      	bne.n	800a3e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a3de:	f06f 0305 	mvn.w	r3, #5
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e00c      	b.n	800a400 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a3e6:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <osKernelInitialize+0x64>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a3ee:	4b08      	ldr	r3, [pc, #32]	; (800a410 <osKernelInitialize+0x64>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	e002      	b.n	800a400 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a400:	68fb      	ldr	r3, [r7, #12]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	200007dc 	.word	0x200007dc

0800a414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a41a:	f3ef 8305 	mrs	r3, IPSR
 800a41e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a420:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10f      	bne.n	800a446 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a426:	f3ef 8310 	mrs	r3, PRIMASK
 800a42a:	607b      	str	r3, [r7, #4]
  return(result);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d105      	bne.n	800a43e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a432:	f3ef 8311 	mrs	r3, BASEPRI
 800a436:	603b      	str	r3, [r7, #0]
  return(result);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d007      	beq.n	800a44e <osKernelStart+0x3a>
 800a43e:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <osKernelStart+0x68>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d103      	bne.n	800a44e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a446:	f06f 0305 	mvn.w	r3, #5
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e010      	b.n	800a470 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a44e:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <osKernelStart+0x68>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d109      	bne.n	800a46a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a456:	f7ff ffa2 	bl	800a39e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <osKernelStart+0x68>)
 800a45c:	2202      	movs	r2, #2
 800a45e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a460:	f002 faae 	bl	800c9c0 <vTaskStartScheduler>
      stat = osOK;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e002      	b.n	800a470 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a46a:	f04f 33ff 	mov.w	r3, #4294967295
 800a46e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200007dc 	.word	0x200007dc

0800a480 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a486:	f3ef 8305 	mrs	r3, IPSR
 800a48a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a48c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10f      	bne.n	800a4b2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a492:	f3ef 8310 	mrs	r3, PRIMASK
 800a496:	607b      	str	r3, [r7, #4]
  return(result);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d105      	bne.n	800a4aa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a49e:	f3ef 8311 	mrs	r3, BASEPRI
 800a4a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <osKernelGetTickCount+0x3a>
 800a4aa:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <osKernelGetTickCount+0x4c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d103      	bne.n	800a4ba <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800a4b2:	f002 fbb7 	bl	800cc24 <xTaskGetTickCountFromISR>
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	e002      	b.n	800a4c0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800a4ba:	f002 fba3 	bl	800cc04 <xTaskGetTickCount>
 800a4be:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	200007dc 	.word	0x200007dc

0800a4d0 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b090      	sub	sp, #64	; 0x40
 800a4e8:	af04      	add	r7, sp, #16
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f4:	f3ef 8305 	mrs	r3, IPSR
 800a4f8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a4fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 808f 	bne.w	800a620 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a502:	f3ef 8310 	mrs	r3, PRIMASK
 800a506:	61bb      	str	r3, [r7, #24]
  return(result);
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a50e:	f3ef 8311 	mrs	r3, BASEPRI
 800a512:	617b      	str	r3, [r7, #20]
  return(result);
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <osThreadNew+0x3e>
 800a51a:	4b44      	ldr	r3, [pc, #272]	; (800a62c <osThreadNew+0x148>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d07e      	beq.n	800a620 <osThreadNew+0x13c>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d07b      	beq.n	800a620 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a528:	2380      	movs	r3, #128	; 0x80
 800a52a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a52c:	2318      	movs	r3, #24
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a534:	f04f 33ff 	mov.w	r3, #4294967295
 800a538:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d045      	beq.n	800a5cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <osThreadNew+0x6a>
        name = attr->name;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d002      	beq.n	800a55c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <osThreadNew+0x90>
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	2b38      	cmp	r3, #56	; 0x38
 800a566:	d805      	bhi.n	800a574 <osThreadNew+0x90>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <osThreadNew+0x94>
        return (NULL);
 800a574:	2300      	movs	r3, #0
 800a576:	e054      	b.n	800a622 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	089b      	lsrs	r3, r3, #2
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00e      	beq.n	800a5ae <osThreadNew+0xca>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	2bbb      	cmp	r3, #187	; 0xbb
 800a596:	d90a      	bls.n	800a5ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <osThreadNew+0xca>
        mem = 1;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	623b      	str	r3, [r7, #32]
 800a5ac:	e010      	b.n	800a5d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10c      	bne.n	800a5d0 <osThreadNew+0xec>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d108      	bne.n	800a5d0 <osThreadNew+0xec>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d104      	bne.n	800a5d0 <osThreadNew+0xec>
          mem = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	623b      	str	r3, [r7, #32]
 800a5ca:	e001      	b.n	800a5d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d110      	bne.n	800a5f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5de:	9202      	str	r2, [sp, #8]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f001 ff6d 	bl	800c4cc <xTaskCreateStatic>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	613b      	str	r3, [r7, #16]
 800a5f6:	e013      	b.n	800a620 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d110      	bne.n	800a620 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	b29a      	uxth	r2, r3
 800a602:	f107 0310 	add.w	r3, r7, #16
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f001 ffbe 	bl	800c592 <xTaskCreate>
 800a616:	4603      	mov	r3, r0
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d001      	beq.n	800a620 <osThreadNew+0x13c>
          hTask = NULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a620:	693b      	ldr	r3, [r7, #16]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3730      	adds	r7, #48	; 0x30
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	200007dc 	.word	0x200007dc

0800a630 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a638:	f3ef 8305 	mrs	r3, IPSR
 800a63c:	613b      	str	r3, [r7, #16]
  return(result);
 800a63e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10f      	bne.n	800a664 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a644:	f3ef 8310 	mrs	r3, PRIMASK
 800a648:	60fb      	str	r3, [r7, #12]
  return(result);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d105      	bne.n	800a65c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a650:	f3ef 8311 	mrs	r3, BASEPRI
 800a654:	60bb      	str	r3, [r7, #8]
  return(result);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d007      	beq.n	800a66c <osDelay+0x3c>
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <osDelay+0x58>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d103      	bne.n	800a66c <osDelay+0x3c>
    stat = osErrorISR;
 800a664:	f06f 0305 	mvn.w	r3, #5
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	e007      	b.n	800a67c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f002 f96c 	bl	800c954 <vTaskDelay>
    }
  }

  return (stat);
 800a67c:	697b      	ldr	r3, [r7, #20]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200007dc 	.word	0x200007dc

0800a68c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b088      	sub	sp, #32
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a694:	f3ef 8305 	mrs	r3, IPSR
 800a698:	617b      	str	r3, [r7, #20]
  return(result);
 800a69a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10f      	bne.n	800a6c0 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a4:	613b      	str	r3, [r7, #16]
  return(result);
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d105      	bne.n	800a6b8 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a6b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d007      	beq.n	800a6c8 <osDelayUntil+0x3c>
 800a6b8:	4b13      	ldr	r3, [pc, #76]	; (800a708 <osDelayUntil+0x7c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d103      	bne.n	800a6c8 <osDelayUntil+0x3c>
    stat = osErrorISR;
 800a6c0:	f06f 0305 	mvn.w	r3, #5
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	e019      	b.n	800a6fc <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800a6cc:	f002 fa9a 	bl	800cc04 <xTaskGetTickCount>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <osDelayUntil+0x6a>
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	db06      	blt.n	800a6f6 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 800a6e8:	f107 0308 	add.w	r3, r7, #8
 800a6ec:	69b9      	ldr	r1, [r7, #24]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 f8ac 	bl	800c84c <vTaskDelayUntil>
 800a6f4:	e002      	b.n	800a6fc <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a6f6:	f06f 0303 	mvn.w	r3, #3
 800a6fa:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800a6fc:	69fb      	ldr	r3, [r7, #28]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200007dc 	.word	0x200007dc

0800a70c <TimerCallback>:

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f003 fbcb 	bl	800deb0 <pvTimerGetTimerID>
 800a71a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d005      	beq.n	800a72e <TimerCallback+0x22>
    callb->func (callb->arg);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	6852      	ldr	r2, [r2, #4]
 800a72a:	4610      	mov	r0, r2
 800a72c:	4798      	blx	r3
  }
}
 800a72e:	bf00      	nop
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08e      	sub	sp, #56	; 0x38
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	607a      	str	r2, [r7, #4]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	460b      	mov	r3, r1
 800a746:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a74c:	f3ef 8305 	mrs	r3, IPSR
 800a750:	61bb      	str	r3, [r7, #24]
  return(result);
 800a752:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a754:	2b00      	cmp	r3, #0
 800a756:	d16a      	bne.n	800a82e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a758:	f3ef 8310 	mrs	r3, PRIMASK
 800a75c:	617b      	str	r3, [r7, #20]
  return(result);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d105      	bne.n	800a770 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a764:	f3ef 8311 	mrs	r3, BASEPRI
 800a768:	613b      	str	r3, [r7, #16]
  return(result);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <osTimerNew+0x40>
 800a770:	4b31      	ldr	r3, [pc, #196]	; (800a838 <osTimerNew+0x100>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b02      	cmp	r3, #2
 800a776:	d05a      	beq.n	800a82e <osTimerNew+0xf6>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d057      	beq.n	800a82e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a77e:	2008      	movs	r0, #8
 800a780:	f003 fdf0 	bl	800e364 <pvPortMalloc>
 800a784:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d050      	beq.n	800a82e <osTimerNew+0xf6>
      callb->func = func;
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a798:	7afb      	ldrb	r3, [r7, #11]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d102      	bne.n	800a7a4 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7a2:	e001      	b.n	800a7a8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ac:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01c      	beq.n	800a7f2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <osTimerNew+0x8e>
          name = attr->name;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d006      	beq.n	800a7dc <osTimerNew+0xa4>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	2b2b      	cmp	r3, #43	; 0x2b
 800a7d4:	d902      	bls.n	800a7dc <osTimerNew+0xa4>
          mem = 1;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	623b      	str	r3, [r7, #32]
 800a7da:	e00c      	b.n	800a7f6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d108      	bne.n	800a7f6 <osTimerNew+0xbe>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <osTimerNew+0xbe>
            mem = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	623b      	str	r3, [r7, #32]
 800a7f0:	e001      	b.n	800a7f6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d10c      	bne.n	800a816 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	4b0e      	ldr	r3, [pc, #56]	; (800a83c <osTimerNew+0x104>)
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80a:	2101      	movs	r1, #1
 800a80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a80e:	f002 ffbe 	bl	800d78e <xTimerCreateStatic>
 800a812:	62b8      	str	r0, [r7, #40]	; 0x28
 800a814:	e00b      	b.n	800a82e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a81c:	4b07      	ldr	r3, [pc, #28]	; (800a83c <osTimerNew+0x104>)
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a824:	2101      	movs	r1, #1
 800a826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a828:	f002 ff90 	bl	800d74c <xTimerCreate>
 800a82c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a830:	4618      	mov	r0, r3
 800a832:	3730      	adds	r7, #48	; 0x30
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	200007dc 	.word	0x200007dc
 800a83c:	0800a70d 	.word	0x0800a70d

0800a840 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	; 0x28
 800a844:	af02      	add	r7, sp, #8
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a84e:	f3ef 8305 	mrs	r3, IPSR
 800a852:	617b      	str	r3, [r7, #20]
  return(result);
 800a854:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10f      	bne.n	800a87a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a85a:	f3ef 8310 	mrs	r3, PRIMASK
 800a85e:	613b      	str	r3, [r7, #16]
  return(result);
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d105      	bne.n	800a872 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a866:	f3ef 8311 	mrs	r3, BASEPRI
 800a86a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d007      	beq.n	800a882 <osTimerStart+0x42>
 800a872:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <osTimerStart+0x7c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b02      	cmp	r3, #2
 800a878:	d103      	bne.n	800a882 <osTimerStart+0x42>
    stat = osErrorISR;
 800a87a:	f06f 0305 	mvn.w	r3, #5
 800a87e:	61fb      	str	r3, [r7, #28]
 800a880:	e017      	b.n	800a8b2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <osTimerStart+0x50>
    stat = osErrorParameter;
 800a888:	f06f 0303 	mvn.w	r3, #3
 800a88c:	61fb      	str	r3, [r7, #28]
 800a88e:	e010      	b.n	800a8b2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a890:	2300      	movs	r3, #0
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	2104      	movs	r1, #4
 800a89a:	69b8      	ldr	r0, [r7, #24]
 800a89c:	f002 fff6 	bl	800d88c <xTimerGenericCommand>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d102      	bne.n	800a8ac <osTimerStart+0x6c>
      stat = osOK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	61fb      	str	r3, [r7, #28]
 800a8aa:	e002      	b.n	800a8b2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800a8ac:	f06f 0302 	mvn.w	r3, #2
 800a8b0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800a8b2:	69fb      	ldr	r3, [r7, #28]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3720      	adds	r7, #32
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	200007dc 	.word	0x200007dc

0800a8c0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	; 0x28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8cc:	f3ef 8305 	mrs	r3, IPSR
 800a8d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a8d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f040 8085 	bne.w	800a9e4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8da:	f3ef 8310 	mrs	r3, PRIMASK
 800a8de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8e6:	f3ef 8311 	mrs	r3, BASEPRI
 800a8ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <osMutexNew+0x3a>
 800a8f2:	4b3f      	ldr	r3, [pc, #252]	; (800a9f0 <osMutexNew+0x130>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d074      	beq.n	800a9e4 <osMutexNew+0x124>
    if (attr != NULL) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <osMutexNew+0x48>
      type = attr->attr_bits;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	623b      	str	r3, [r7, #32]
 800a906:	e001      	b.n	800a90c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <osMutexNew+0x5c>
      rmtx = 1U;
 800a916:	2301      	movs	r3, #1
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	e001      	b.n	800a920 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	f003 0308 	and.w	r3, r3, #8
 800a926:	2b00      	cmp	r3, #0
 800a928:	d15c      	bne.n	800a9e4 <osMutexNew+0x124>
      mem = -1;
 800a92a:	f04f 33ff 	mov.w	r3, #4294967295
 800a92e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d015      	beq.n	800a962 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <osMutexNew+0x8c>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	2b4f      	cmp	r3, #79	; 0x4f
 800a944:	d902      	bls.n	800a94c <osMutexNew+0x8c>
          mem = 1;
 800a946:	2301      	movs	r3, #1
 800a948:	61bb      	str	r3, [r7, #24]
 800a94a:	e00c      	b.n	800a966 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <osMutexNew+0xa6>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <osMutexNew+0xa6>
            mem = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e001      	b.n	800a966 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d112      	bne.n	800a992 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	4619      	mov	r1, r3
 800a978:	2004      	movs	r0, #4
 800a97a:	f000 fe1a 	bl	800b5b2 <xQueueCreateMutexStatic>
 800a97e:	6278      	str	r0, [r7, #36]	; 0x24
 800a980:	e016      	b.n	800a9b0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	4619      	mov	r1, r3
 800a988:	2001      	movs	r0, #1
 800a98a:	f000 fe12 	bl	800b5b2 <xQueueCreateMutexStatic>
 800a98e:	6278      	str	r0, [r7, #36]	; 0x24
 800a990:	e00e      	b.n	800a9b0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d004      	beq.n	800a9a8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a99e:	2004      	movs	r0, #4
 800a9a0:	f000 fdef 	bl	800b582 <xQueueCreateMutex>
 800a9a4:	6278      	str	r0, [r7, #36]	; 0x24
 800a9a6:	e003      	b.n	800a9b0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	f000 fdea 	bl	800b582 <xQueueCreateMutex>
 800a9ae:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00c      	beq.n	800a9d0 <osMutexNew+0x110>
        if (attr != NULL) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <osMutexNew+0x104>
          name = attr->name;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	617b      	str	r3, [r7, #20]
 800a9c2:	e001      	b.n	800a9c8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a9c8:	6979      	ldr	r1, [r7, #20]
 800a9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9cc:	f001 fcf6 	bl	800c3bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <osMutexNew+0x124>
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	f043 0301 	orr.w	r3, r3, #1
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3728      	adds	r7, #40	; 0x28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200007dc 	.word	0x200007dc

0800a9f4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa12:	f3ef 8305 	mrs	r3, IPSR
 800aa16:	613b      	str	r3, [r7, #16]
  return(result);
 800aa18:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10f      	bne.n	800aa3e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa1e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa22:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d105      	bne.n	800aa36 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa2a:	f3ef 8311 	mrs	r3, BASEPRI
 800aa2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <osMutexAcquire+0x52>
 800aa36:	4b1d      	ldr	r3, [pc, #116]	; (800aaac <osMutexAcquire+0xb8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d103      	bne.n	800aa46 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800aa3e:	f06f 0305 	mvn.w	r3, #5
 800aa42:	61fb      	str	r3, [r7, #28]
 800aa44:	e02c      	b.n	800aaa0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800aa4c:	f06f 0303 	mvn.w	r3, #3
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	e025      	b.n	800aaa0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d011      	beq.n	800aa7e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	69b8      	ldr	r0, [r7, #24]
 800aa5e:	f000 fdf9 	bl	800b654 <xQueueTakeMutexRecursive>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d01b      	beq.n	800aaa0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800aa6e:	f06f 0301 	mvn.w	r3, #1
 800aa72:	61fb      	str	r3, [r7, #28]
 800aa74:	e014      	b.n	800aaa0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800aa76:	f06f 0302 	mvn.w	r3, #2
 800aa7a:	61fb      	str	r3, [r7, #28]
 800aa7c:	e010      	b.n	800aaa0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	69b8      	ldr	r0, [r7, #24]
 800aa82:	f001 f9b3 	bl	800bdec <xQueueSemaphoreTake>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d009      	beq.n	800aaa0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800aa92:	f06f 0301 	mvn.w	r3, #1
 800aa96:	61fb      	str	r3, [r7, #28]
 800aa98:	e002      	b.n	800aaa0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800aa9a:	f06f 0302 	mvn.w	r3, #2
 800aa9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aaa0:	69fb      	ldr	r3, [r7, #28]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3720      	adds	r7, #32
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	200007dc 	.word	0x200007dc

0800aab0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f023 0301 	bic.w	r3, r3, #1
 800aabe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aacc:	f3ef 8305 	mrs	r3, IPSR
 800aad0:	613b      	str	r3, [r7, #16]
  return(result);
 800aad2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10f      	bne.n	800aaf8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad8:	f3ef 8310 	mrs	r3, PRIMASK
 800aadc:	60fb      	str	r3, [r7, #12]
  return(result);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aae4:	f3ef 8311 	mrs	r3, BASEPRI
 800aae8:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d007      	beq.n	800ab00 <osMutexRelease+0x50>
 800aaf0:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <osMutexRelease+0x9c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d103      	bne.n	800ab00 <osMutexRelease+0x50>
    stat = osErrorISR;
 800aaf8:	f06f 0305 	mvn.w	r3, #5
 800aafc:	61fb      	str	r3, [r7, #28]
 800aafe:	e01f      	b.n	800ab40 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ab06:	f06f 0303 	mvn.w	r3, #3
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	e018      	b.n	800ab40 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d009      	beq.n	800ab28 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ab14:	69b8      	ldr	r0, [r7, #24]
 800ab16:	f000 fd67 	bl	800b5e8 <xQueueGiveMutexRecursive>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d00f      	beq.n	800ab40 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ab20:	f06f 0302 	mvn.w	r3, #2
 800ab24:	61fb      	str	r3, [r7, #28]
 800ab26:	e00b      	b.n	800ab40 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ab28:	2300      	movs	r3, #0
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	69b8      	ldr	r0, [r7, #24]
 800ab30:	f000 fe3a 	bl	800b7a8 <xQueueGenericSend>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d002      	beq.n	800ab40 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ab3a:	f06f 0302 	mvn.w	r3, #2
 800ab3e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ab40:	69fb      	ldr	r3, [r7, #28]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200007dc 	.word	0x200007dc

0800ab50 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08c      	sub	sp, #48	; 0x30
 800ab54:	af02      	add	r7, sp, #8
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab60:	f3ef 8305 	mrs	r3, IPSR
 800ab64:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f040 8086 	bne.w	800ac7a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab72:	617b      	str	r3, [r7, #20]
  return(result);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d105      	bne.n	800ab86 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ab7e:	613b      	str	r3, [r7, #16]
  return(result);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <osSemaphoreNew+0x3e>
 800ab86:	4b3f      	ldr	r3, [pc, #252]	; (800ac84 <osSemaphoreNew+0x134>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d075      	beq.n	800ac7a <osSemaphoreNew+0x12a>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d072      	beq.n	800ac7a <osSemaphoreNew+0x12a>
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d86e      	bhi.n	800ac7a <osSemaphoreNew+0x12a>
    mem = -1;
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aba0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d015      	beq.n	800abd4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d006      	beq.n	800abbe <osSemaphoreNew+0x6e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	2b4f      	cmp	r3, #79	; 0x4f
 800abb6:	d902      	bls.n	800abbe <osSemaphoreNew+0x6e>
        mem = 1;
 800abb8:	2301      	movs	r3, #1
 800abba:	623b      	str	r3, [r7, #32]
 800abbc:	e00c      	b.n	800abd8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d108      	bne.n	800abd8 <osSemaphoreNew+0x88>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d104      	bne.n	800abd8 <osSemaphoreNew+0x88>
          mem = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	623b      	str	r3, [r7, #32]
 800abd2:	e001      	b.n	800abd8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d04c      	beq.n	800ac7a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d128      	bne.n	800ac38 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d10a      	bne.n	800ac02 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	2203      	movs	r2, #3
 800abf2:	9200      	str	r2, [sp, #0]
 800abf4:	2200      	movs	r2, #0
 800abf6:	2100      	movs	r1, #0
 800abf8:	2001      	movs	r0, #1
 800abfa:	f000 fbc1 	bl	800b380 <xQueueGenericCreateStatic>
 800abfe:	6278      	str	r0, [r7, #36]	; 0x24
 800ac00:	e005      	b.n	800ac0e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ac02:	2203      	movs	r2, #3
 800ac04:	2100      	movs	r1, #0
 800ac06:	2001      	movs	r0, #1
 800ac08:	f000 fc3c 	bl	800b484 <xQueueGenericCreate>
 800ac0c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d022      	beq.n	800ac5a <osSemaphoreNew+0x10a>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01f      	beq.n	800ac5a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2100      	movs	r1, #0
 800ac20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac22:	f000 fdc1 	bl	800b7a8 <xQueueGenericSend>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d016      	beq.n	800ac5a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ac2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac2e:	f001 fa77 	bl	800c120 <vQueueDelete>
            hSemaphore = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
 800ac36:	e010      	b.n	800ac5a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d108      	bne.n	800ac50 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	461a      	mov	r2, r3
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 fd3c 	bl	800b6c4 <xQueueCreateCountingSemaphoreStatic>
 800ac4c:	6278      	str	r0, [r7, #36]	; 0x24
 800ac4e:	e004      	b.n	800ac5a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 fd71 	bl	800b73a <xQueueCreateCountingSemaphore>
 800ac58:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00c      	beq.n	800ac7a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <osSemaphoreNew+0x11e>
          name = attr->name;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	61fb      	str	r3, [r7, #28]
 800ac6c:	e001      	b.n	800ac72 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ac72:	69f9      	ldr	r1, [r7, #28]
 800ac74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac76:	f001 fba1 	bl	800c3bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3728      	adds	r7, #40	; 0x28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	200007dc 	.word	0x200007dc

0800ac88 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aca0:	f06f 0303 	mvn.w	r3, #3
 800aca4:	61fb      	str	r3, [r7, #28]
 800aca6:	e04b      	b.n	800ad40 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca8:	f3ef 8305 	mrs	r3, IPSR
 800acac:	617b      	str	r3, [r7, #20]
  return(result);
 800acae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10f      	bne.n	800acd4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acb4:	f3ef 8310 	mrs	r3, PRIMASK
 800acb8:	613b      	str	r3, [r7, #16]
  return(result);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d105      	bne.n	800accc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acc0:	f3ef 8311 	mrs	r3, BASEPRI
 800acc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d026      	beq.n	800ad1a <osSemaphoreAcquire+0x92>
 800accc:	4b1f      	ldr	r3, [pc, #124]	; (800ad4c <osSemaphoreAcquire+0xc4>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d122      	bne.n	800ad1a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800acda:	f06f 0303 	mvn.w	r3, #3
 800acde:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ace0:	e02d      	b.n	800ad3e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	461a      	mov	r2, r3
 800acec:	2100      	movs	r1, #0
 800acee:	69b8      	ldr	r0, [r7, #24]
 800acf0:	f001 f990 	bl	800c014 <xQueueReceiveFromISR>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d003      	beq.n	800ad02 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800acfa:	f06f 0302 	mvn.w	r3, #2
 800acfe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ad00:	e01d      	b.n	800ad3e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01a      	beq.n	800ad3e <osSemaphoreAcquire+0xb6>
 800ad08:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <osSemaphoreAcquire+0xc8>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ad18:	e011      	b.n	800ad3e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	69b8      	ldr	r0, [r7, #24]
 800ad1e:	f001 f865 	bl	800bdec <xQueueSemaphoreTake>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d00b      	beq.n	800ad40 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ad2e:	f06f 0301 	mvn.w	r3, #1
 800ad32:	61fb      	str	r3, [r7, #28]
 800ad34:	e004      	b.n	800ad40 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ad36:	f06f 0302 	mvn.w	r3, #2
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	e000      	b.n	800ad40 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ad3e:	bf00      	nop
      }
    }
  }

  return (stat);
 800ad40:	69fb      	ldr	r3, [r7, #28]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3720      	adds	r7, #32
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	200007dc 	.word	0x200007dc
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d103      	bne.n	800ad72 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ad6a:	f06f 0303 	mvn.w	r3, #3
 800ad6e:	61fb      	str	r3, [r7, #28]
 800ad70:	e03e      	b.n	800adf0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad72:	f3ef 8305 	mrs	r3, IPSR
 800ad76:	617b      	str	r3, [r7, #20]
  return(result);
 800ad78:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10f      	bne.n	800ad9e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad82:	613b      	str	r3, [r7, #16]
  return(result);
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d105      	bne.n	800ad96 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ad8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d01e      	beq.n	800add4 <osSemaphoreRelease+0x80>
 800ad96:	4b19      	ldr	r3, [pc, #100]	; (800adfc <osSemaphoreRelease+0xa8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d11a      	bne.n	800add4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	4619      	mov	r1, r3
 800ada8:	69b8      	ldr	r0, [r7, #24]
 800adaa:	f000 fea3 	bl	800baf4 <xQueueGiveFromISR>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d003      	beq.n	800adbc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800adb4:	f06f 0302 	mvn.w	r3, #2
 800adb8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800adba:	e018      	b.n	800adee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d015      	beq.n	800adee <osSemaphoreRelease+0x9a>
 800adc2:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <osSemaphoreRelease+0xac>)
 800adc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800add2:	e00c      	b.n	800adee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800add4:	2300      	movs	r3, #0
 800add6:	2200      	movs	r2, #0
 800add8:	2100      	movs	r1, #0
 800adda:	69b8      	ldr	r0, [r7, #24]
 800addc:	f000 fce4 	bl	800b7a8 <xQueueGenericSend>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d004      	beq.n	800adf0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ade6:	f06f 0302 	mvn.w	r3, #2
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	e000      	b.n	800adf0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800adee:	bf00      	nop
    }
  }

  return (stat);
 800adf0:	69fb      	ldr	r3, [r7, #28]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	200007dc 	.word	0x200007dc
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08c      	sub	sp, #48	; 0x30
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae14:	f3ef 8305 	mrs	r3, IPSR
 800ae18:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d16f      	bne.n	800af00 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae20:	f3ef 8310 	mrs	r3, PRIMASK
 800ae24:	617b      	str	r3, [r7, #20]
  return(result);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d105      	bne.n	800ae38 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae2c:	f3ef 8311 	mrs	r3, BASEPRI
 800ae30:	613b      	str	r3, [r7, #16]
  return(result);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d003      	beq.n	800ae40 <osMessageQueueNew+0x3c>
 800ae38:	4b34      	ldr	r3, [pc, #208]	; (800af0c <osMessageQueueNew+0x108>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d05f      	beq.n	800af00 <osMessageQueueNew+0xfc>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d05c      	beq.n	800af00 <osMessageQueueNew+0xfc>
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d059      	beq.n	800af00 <osMessageQueueNew+0xfc>
    mem = -1;
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d029      	beq.n	800aeac <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d012      	beq.n	800ae86 <osMessageQueueNew+0x82>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	2b4f      	cmp	r3, #79	; 0x4f
 800ae66:	d90e      	bls.n	800ae86 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	695a      	ldr	r2, [r3, #20]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	fb01 f303 	mul.w	r3, r1, r3
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d302      	bcc.n	800ae86 <osMessageQueueNew+0x82>
        mem = 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	623b      	str	r3, [r7, #32]
 800ae84:	e014      	b.n	800aeb0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d110      	bne.n	800aeb0 <osMessageQueueNew+0xac>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10c      	bne.n	800aeb0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d108      	bne.n	800aeb0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d104      	bne.n	800aeb0 <osMessageQueueNew+0xac>
          mem = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	623b      	str	r3, [r7, #32]
 800aeaa:	e001      	b.n	800aeb0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d10b      	bne.n	800aece <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	691a      	ldr	r2, [r3, #16]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	2100      	movs	r1, #0
 800aec0:	9100      	str	r1, [sp, #0]
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 fa5b 	bl	800b380 <xQueueGenericCreateStatic>
 800aeca:	6278      	str	r0, [r7, #36]	; 0x24
 800aecc:	e008      	b.n	800aee0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d105      	bne.n	800aee0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800aed4:	2200      	movs	r2, #0
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fad3 	bl	800b484 <xQueueGenericCreate>
 800aede:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00c      	beq.n	800af00 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	61fb      	str	r3, [r7, #28]
 800aef2:	e001      	b.n	800aef8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800aef8:	69f9      	ldr	r1, [r7, #28]
 800aefa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aefc:	f001 fa5e 	bl	800c3bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af02:	4618      	mov	r0, r3
 800af04:	3728      	adds	r7, #40	; 0x28
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200007dc 	.word	0x200007dc

0800af10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	; 0x28
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	4613      	mov	r3, r2
 800af1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800af24:	2300      	movs	r3, #0
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af28:	f3ef 8305 	mrs	r3, IPSR
 800af2c:	61fb      	str	r3, [r7, #28]
  return(result);
 800af2e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10f      	bne.n	800af54 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af34:	f3ef 8310 	mrs	r3, PRIMASK
 800af38:	61bb      	str	r3, [r7, #24]
  return(result);
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d105      	bne.n	800af4c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af40:	f3ef 8311 	mrs	r3, BASEPRI
 800af44:	617b      	str	r3, [r7, #20]
  return(result);
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d02c      	beq.n	800afa6 <osMessageQueuePut+0x96>
 800af4c:	4b28      	ldr	r3, [pc, #160]	; (800aff0 <osMessageQueuePut+0xe0>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d128      	bne.n	800afa6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <osMessageQueuePut+0x56>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <osMessageQueuePut+0x56>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800af66:	f06f 0303 	mvn.w	r3, #3
 800af6a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af6c:	e039      	b.n	800afe2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800af6e:	2300      	movs	r3, #0
 800af70:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800af72:	f107 0210 	add.w	r2, r7, #16
 800af76:	2300      	movs	r3, #0
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	6a38      	ldr	r0, [r7, #32]
 800af7c:	f000 fd1a 	bl	800b9b4 <xQueueGenericSendFromISR>
 800af80:	4603      	mov	r3, r0
 800af82:	2b01      	cmp	r3, #1
 800af84:	d003      	beq.n	800af8e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800af86:	f06f 0302 	mvn.w	r3, #2
 800af8a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af8c:	e029      	b.n	800afe2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d026      	beq.n	800afe2 <osMessageQueuePut+0xd2>
 800af94:	4b17      	ldr	r3, [pc, #92]	; (800aff4 <osMessageQueuePut+0xe4>)
 800af96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afa4:	e01d      	b.n	800afe2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <osMessageQueuePut+0xa2>
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d103      	bne.n	800afba <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800afb2:	f06f 0303 	mvn.w	r3, #3
 800afb6:	627b      	str	r3, [r7, #36]	; 0x24
 800afb8:	e014      	b.n	800afe4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800afba:	2300      	movs	r3, #0
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	68b9      	ldr	r1, [r7, #8]
 800afc0:	6a38      	ldr	r0, [r7, #32]
 800afc2:	f000 fbf1 	bl	800b7a8 <xQueueGenericSend>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d00b      	beq.n	800afe4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800afd2:	f06f 0301 	mvn.w	r3, #1
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
 800afd8:	e004      	b.n	800afe4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800afda:	f06f 0302 	mvn.w	r3, #2
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
 800afe0:	e000      	b.n	800afe4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afe2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3728      	adds	r7, #40	; 0x28
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200007dc 	.word	0x200007dc
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08a      	sub	sp, #40	; 0x28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b00e:	f3ef 8305 	mrs	r3, IPSR
 800b012:	61fb      	str	r3, [r7, #28]
  return(result);
 800b014:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10f      	bne.n	800b03a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b01a:	f3ef 8310 	mrs	r3, PRIMASK
 800b01e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d105      	bne.n	800b032 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b026:	f3ef 8311 	mrs	r3, BASEPRI
 800b02a:	617b      	str	r3, [r7, #20]
  return(result);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d02c      	beq.n	800b08c <osMessageQueueGet+0x94>
 800b032:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <osMessageQueueGet+0xdc>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d128      	bne.n	800b08c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <osMessageQueueGet+0x54>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <osMessageQueueGet+0x54>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b04c:	f06f 0303 	mvn.w	r3, #3
 800b050:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b052:	e038      	b.n	800b0c6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b054:	2300      	movs	r3, #0
 800b056:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b058:	f107 0310 	add.w	r3, r7, #16
 800b05c:	461a      	mov	r2, r3
 800b05e:	68b9      	ldr	r1, [r7, #8]
 800b060:	6a38      	ldr	r0, [r7, #32]
 800b062:	f000 ffd7 	bl	800c014 <xQueueReceiveFromISR>
 800b066:	4603      	mov	r3, r0
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d003      	beq.n	800b074 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b06c:	f06f 0302 	mvn.w	r3, #2
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b072:	e028      	b.n	800b0c6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d025      	beq.n	800b0c6 <osMessageQueueGet+0xce>
 800b07a:	4b17      	ldr	r3, [pc, #92]	; (800b0d8 <osMessageQueueGet+0xe0>)
 800b07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b08a:	e01c      	b.n	800b0c6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <osMessageQueueGet+0xa0>
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d103      	bne.n	800b0a0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b098:	f06f 0303 	mvn.w	r3, #3
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
 800b09e:	e013      	b.n	800b0c8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	68b9      	ldr	r1, [r7, #8]
 800b0a4:	6a38      	ldr	r0, [r7, #32]
 800b0a6:	f000 fdbb 	bl	800bc20 <xQueueReceive>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d00b      	beq.n	800b0c8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b0b6:	f06f 0301 	mvn.w	r3, #1
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b0bc:	e004      	b.n	800b0c8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b0be:	f06f 0302 	mvn.w	r3, #2
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c4:	e000      	b.n	800b0c8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3728      	adds	r7, #40	; 0x28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	200007dc 	.word	0x200007dc
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4a07      	ldr	r2, [pc, #28]	; (800b108 <vApplicationGetIdleTaskMemory+0x2c>)
 800b0ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	4a06      	ldr	r2, [pc, #24]	; (800b10c <vApplicationGetIdleTaskMemory+0x30>)
 800b0f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2280      	movs	r2, #128	; 0x80
 800b0f8:	601a      	str	r2, [r3, #0]
}
 800b0fa:	bf00      	nop
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	200007e0 	.word	0x200007e0
 800b10c:	2000089c 	.word	0x2000089c

0800b110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4a07      	ldr	r2, [pc, #28]	; (800b13c <vApplicationGetTimerTaskMemory+0x2c>)
 800b120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	4a06      	ldr	r2, [pc, #24]	; (800b140 <vApplicationGetTimerTaskMemory+0x30>)
 800b126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b12e:	601a      	str	r2, [r3, #0]
}
 800b130:	bf00      	nop
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20000a9c 	.word	0x20000a9c
 800b140:	20000b58 	.word	0x20000b58

0800b144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f103 0208 	add.w	r2, r3, #8
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f04f 32ff 	mov.w	r2, #4294967295
 800b15c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f103 0208 	add.w	r2, r3, #8
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f103 0208 	add.w	r2, r3, #8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b192:	bf00      	nop
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	601a      	str	r2, [r3, #0]
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fc:	d103      	bne.n	800b206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	e00c      	b.n	800b220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3308      	adds	r3, #8
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	e002      	b.n	800b214 <vListInsert+0x2e>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d2f6      	bcs.n	800b20e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	601a      	str	r2, [r3, #0]
}
 800b24c:	bf00      	nop
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6892      	ldr	r2, [r2, #8]
 800b26e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6852      	ldr	r2, [r2, #4]
 800b278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d103      	bne.n	800b28c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	1e5a      	subs	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10c      	bne.n	800b2da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	b672      	cpsid	i
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	b662      	cpsie	i
 800b2d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2d6:	bf00      	nop
 800b2d8:	e7fe      	b.n	800b2d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b2da:	f002 ff17 	bl	800e10c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e6:	68f9      	ldr	r1, [r7, #12]
 800b2e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2ea:	fb01 f303 	mul.w	r3, r1, r3
 800b2ee:	441a      	add	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30a:	3b01      	subs	r3, #1
 800b30c:	68f9      	ldr	r1, [r7, #12]
 800b30e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b310:	fb01 f303 	mul.w	r3, r1, r3
 800b314:	441a      	add	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	22ff      	movs	r2, #255	; 0xff
 800b31e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	22ff      	movs	r2, #255	; 0xff
 800b326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d114      	bne.n	800b35a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d01a      	beq.n	800b36e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3310      	adds	r3, #16
 800b33c:	4618      	mov	r0, r3
 800b33e:	f001 fdf9 	bl	800cf34 <xTaskRemoveFromEventList>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d012      	beq.n	800b36e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b348:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <xQueueGenericReset+0xd0>)
 800b34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34e:	601a      	str	r2, [r3, #0]
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	e009      	b.n	800b36e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3310      	adds	r3, #16
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff fef0 	bl	800b144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3324      	adds	r3, #36	; 0x24
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff feeb 	bl	800b144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b36e:	f002 ff01 	bl	800e174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b372:	2301      	movs	r3, #1
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	e000ed04 	.word	0xe000ed04

0800b380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08e      	sub	sp, #56	; 0x38
 800b384:	af02      	add	r7, sp, #8
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10c      	bne.n	800b3ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	b672      	cpsid	i
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	b662      	cpsie	i
 800b3a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10c      	bne.n	800b3ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b8:	b672      	cpsid	i
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	b662      	cpsie	i
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3ca:	bf00      	nop
 800b3cc:	e7fe      	b.n	800b3cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <xQueueGenericCreateStatic+0x5a>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <xQueueGenericCreateStatic+0x5e>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e000      	b.n	800b3e0 <xQueueGenericCreateStatic+0x60>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10c      	bne.n	800b3fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	b672      	cpsid	i
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	b662      	cpsie	i
 800b3f8:	623b      	str	r3, [r7, #32]
}
 800b3fa:	bf00      	nop
 800b3fc:	e7fe      	b.n	800b3fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <xQueueGenericCreateStatic+0x8a>
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <xQueueGenericCreateStatic+0x8e>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <xQueueGenericCreateStatic+0x90>
 800b40e:	2300      	movs	r3, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10c      	bne.n	800b42e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	b672      	cpsid	i
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	b662      	cpsie	i
 800b428:	61fb      	str	r3, [r7, #28]
}
 800b42a:	bf00      	nop
 800b42c:	e7fe      	b.n	800b42c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b42e:	2350      	movs	r3, #80	; 0x50
 800b430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b50      	cmp	r3, #80	; 0x50
 800b436:	d00c      	beq.n	800b452 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	b672      	cpsid	i
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	b662      	cpsie	i
 800b44c:	61bb      	str	r3, [r7, #24]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b452:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00d      	beq.n	800b47a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b466:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	4613      	mov	r3, r2
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 f847 	bl	800b508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3730      	adds	r7, #48	; 0x30
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08a      	sub	sp, #40	; 0x28
 800b488:	af02      	add	r7, sp, #8
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	4613      	mov	r3, r2
 800b490:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10c      	bne.n	800b4b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	b672      	cpsid	i
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	b662      	cpsie	i
 800b4ac:	613b      	str	r3, [r7, #16]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61fb      	str	r3, [r7, #28]
 800b4bc:	e004      	b.n	800b4c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
 800b4c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	3350      	adds	r3, #80	; 0x50
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f002 ff49 	bl	800e364 <pvPortMalloc>
 800b4d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d011      	beq.n	800b4fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	3350      	adds	r3, #80	; 0x50
 800b4e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4ec:	79fa      	ldrb	r2, [r7, #7]
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f805 	bl	800b508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d103      	bne.n	800b524 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	e002      	b.n	800b52a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b536:	2101      	movs	r1, #1
 800b538:	69b8      	ldr	r0, [r7, #24]
 800b53a:	f7ff feb7 	bl	800b2ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00e      	beq.n	800b57a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b56e:	2300      	movs	r3, #0
 800b570:	2200      	movs	r2, #0
 800b572:	2100      	movs	r1, #0
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f917 	bl	800b7a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b582:	b580      	push	{r7, lr}
 800b584:	b086      	sub	sp, #24
 800b586:	af00      	add	r7, sp, #0
 800b588:	4603      	mov	r3, r0
 800b58a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b58c:	2301      	movs	r3, #1
 800b58e:	617b      	str	r3, [r7, #20]
 800b590:	2300      	movs	r3, #0
 800b592:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	461a      	mov	r2, r3
 800b598:	6939      	ldr	r1, [r7, #16]
 800b59a:	6978      	ldr	r0, [r7, #20]
 800b59c:	f7ff ff72 	bl	800b484 <xQueueGenericCreate>
 800b5a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff ffd3 	bl	800b54e <prvInitialiseMutex>

		return xNewQueue;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
	}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b088      	sub	sp, #32
 800b5b6:	af02      	add	r7, sp, #8
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	6039      	str	r1, [r7, #0]
 800b5bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	617b      	str	r3, [r7, #20]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	6939      	ldr	r1, [r7, #16]
 800b5d0:	6978      	ldr	r0, [r7, #20]
 800b5d2:	f7ff fed5 	bl	800b380 <xQueueGenericCreateStatic>
 800b5d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f7ff ffb8 	bl	800b54e <prvInitialiseMutex>

		return xNewQueue;
 800b5de:	68fb      	ldr	r3, [r7, #12]
	}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b5e8:	b590      	push	{r4, r7, lr}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10c      	bne.n	800b614 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fe:	b672      	cpsid	i
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	b662      	cpsie	i
 800b60e:	60fb      	str	r3, [r7, #12]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	689c      	ldr	r4, [r3, #8]
 800b618:	f001 fe58 	bl	800d2cc <xTaskGetCurrentTaskHandle>
 800b61c:	4603      	mov	r3, r0
 800b61e:	429c      	cmp	r4, r3
 800b620:	d111      	bne.n	800b646 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	1e5a      	subs	r2, r3, #1
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d105      	bne.n	800b640 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f000 f8b4 	bl	800b7a8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b640:	2301      	movs	r3, #1
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e001      	b.n	800b64a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b64a:	697b      	ldr	r3, [r7, #20]
	}
 800b64c:	4618      	mov	r0, r3
 800b64e:	371c      	adds	r7, #28
 800b650:	46bd      	mov	sp, r7
 800b652:	bd90      	pop	{r4, r7, pc}

0800b654 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b654:	b590      	push	{r4, r7, lr}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10c      	bne.n	800b682 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	b672      	cpsid	i
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	b662      	cpsie	i
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	689c      	ldr	r4, [r3, #8]
 800b686:	f001 fe21 	bl	800d2cc <xTaskGetCurrentTaskHandle>
 800b68a:	4603      	mov	r3, r0
 800b68c:	429c      	cmp	r4, r3
 800b68e:	d107      	bne.n	800b6a0 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b69a:	2301      	movs	r3, #1
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	e00c      	b.n	800b6ba <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6938      	ldr	r0, [r7, #16]
 800b6a4:	f000 fba2 	bl	800bdec <xQueueSemaphoreTake>
 800b6a8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b6ba:	697b      	ldr	r3, [r7, #20]
	}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd90      	pop	{r4, r7, pc}

0800b6c4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08a      	sub	sp, #40	; 0x28
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10c      	bne.n	800b6f0 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	b672      	cpsid	i
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	b662      	cpsie	i
 800b6ea:	61bb      	str	r3, [r7, #24]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d90c      	bls.n	800b712 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	b672      	cpsid	i
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	b662      	cpsie	i
 800b70c:	617b      	str	r3, [r7, #20]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b712:	2302      	movs	r3, #2
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	2100      	movs	r1, #0
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff fe2f 	bl	800b380 <xQueueGenericCreateStatic>
 800b722:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b730:	69fb      	ldr	r3, [r7, #28]
	}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b086      	sub	sp, #24
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10c      	bne.n	800b764 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	b672      	cpsid	i
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	b662      	cpsie	i
 800b75e:	613b      	str	r3, [r7, #16]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d90c      	bls.n	800b786 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	b672      	cpsid	i
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	b662      	cpsie	i
 800b780:	60fb      	str	r3, [r7, #12]
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b786:	2202      	movs	r2, #2
 800b788:	2100      	movs	r1, #0
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff fe7a 	bl	800b484 <xQueueGenericCreate>
 800b790:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b79e:	697b      	ldr	r3, [r7, #20]
	}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08e      	sub	sp, #56	; 0x38
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10c      	bne.n	800b7de <xQueueGenericSend+0x36>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	b672      	cpsid	i
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	b662      	cpsie	i
 800b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <xQueueGenericSend+0x44>
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <xQueueGenericSend+0x48>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <xQueueGenericSend+0x4a>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10c      	bne.n	800b810 <xQueueGenericSend+0x68>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	b672      	cpsid	i
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	b662      	cpsie	i
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d103      	bne.n	800b81e <xQueueGenericSend+0x76>
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d101      	bne.n	800b822 <xQueueGenericSend+0x7a>
 800b81e:	2301      	movs	r3, #1
 800b820:	e000      	b.n	800b824 <xQueueGenericSend+0x7c>
 800b822:	2300      	movs	r3, #0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10c      	bne.n	800b842 <xQueueGenericSend+0x9a>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	b672      	cpsid	i
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	b662      	cpsie	i
 800b83c:	623b      	str	r3, [r7, #32]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b842:	f001 fd53 	bl	800d2ec <xTaskGetSchedulerState>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d102      	bne.n	800b852 <xQueueGenericSend+0xaa>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <xQueueGenericSend+0xae>
 800b852:	2301      	movs	r3, #1
 800b854:	e000      	b.n	800b858 <xQueueGenericSend+0xb0>
 800b856:	2300      	movs	r3, #0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10c      	bne.n	800b876 <xQueueGenericSend+0xce>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	b672      	cpsid	i
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	b662      	cpsie	i
 800b870:	61fb      	str	r3, [r7, #28]
}
 800b872:	bf00      	nop
 800b874:	e7fe      	b.n	800b874 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b876:	f002 fc49 	bl	800e10c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b882:	429a      	cmp	r2, r3
 800b884:	d302      	bcc.n	800b88c <xQueueGenericSend+0xe4>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d129      	bne.n	800b8e0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b88c:	683a      	ldr	r2, [r7, #0]
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b892:	f000 fc82 	bl	800c19a <prvCopyDataToQueue>
 800b896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d010      	beq.n	800b8c2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	3324      	adds	r3, #36	; 0x24
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 fb45 	bl	800cf34 <xTaskRemoveFromEventList>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d013      	beq.n	800b8d8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8b0:	4b3f      	ldr	r3, [pc, #252]	; (800b9b0 <xQueueGenericSend+0x208>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	e00a      	b.n	800b8d8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8c8:	4b39      	ldr	r3, [pc, #228]	; (800b9b0 <xQueueGenericSend+0x208>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8d8:	f002 fc4c 	bl	800e174 <vPortExitCritical>
				return pdPASS;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e063      	b.n	800b9a8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d103      	bne.n	800b8ee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8e6:	f002 fc45 	bl	800e174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e05c      	b.n	800b9a8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8f4:	f107 0314 	add.w	r3, r7, #20
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 fb81 	bl	800d000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8fe:	2301      	movs	r3, #1
 800b900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b902:	f002 fc37 	bl	800e174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b906:	f001 f8cf 	bl	800caa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b90a:	f002 fbff 	bl	800e10c <vPortEnterCritical>
 800b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b914:	b25b      	sxtb	r3, r3
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91a:	d103      	bne.n	800b924 <xQueueGenericSend+0x17c>
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b92a:	b25b      	sxtb	r3, r3
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d103      	bne.n	800b93a <xQueueGenericSend+0x192>
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b93a:	f002 fc1b 	bl	800e174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b93e:	1d3a      	adds	r2, r7, #4
 800b940:	f107 0314 	add.w	r3, r7, #20
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f001 fb70 	bl	800d02c <xTaskCheckForTimeOut>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d124      	bne.n	800b99c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b954:	f000 fd19 	bl	800c38a <prvIsQueueFull>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d018      	beq.n	800b990 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	3310      	adds	r3, #16
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	4611      	mov	r1, r2
 800b966:	4618      	mov	r0, r3
 800b968:	f001 fa90 	bl	800ce8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b96e:	f000 fca4 	bl	800c2ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b972:	f001 f8a7 	bl	800cac4 <xTaskResumeAll>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f47f af7c 	bne.w	800b876 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b97e:	4b0c      	ldr	r3, [pc, #48]	; (800b9b0 <xQueueGenericSend+0x208>)
 800b980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	e772      	b.n	800b876 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b992:	f000 fc92 	bl	800c2ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b996:	f001 f895 	bl	800cac4 <xTaskResumeAll>
 800b99a:	e76c      	b.n	800b876 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b99c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b99e:	f000 fc8c 	bl	800c2ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9a2:	f001 f88f 	bl	800cac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3738      	adds	r7, #56	; 0x38
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	e000ed04 	.word	0xe000ed04

0800b9b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08e      	sub	sp, #56	; 0x38
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10c      	bne.n	800b9e6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	b672      	cpsid	i
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	b662      	cpsie	i
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9e2:	bf00      	nop
 800b9e4:	e7fe      	b.n	800b9e4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d103      	bne.n	800b9f4 <xQueueGenericSendFromISR+0x40>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <xQueueGenericSendFromISR+0x44>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e000      	b.n	800b9fa <xQueueGenericSendFromISR+0x46>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10c      	bne.n	800ba18 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	b672      	cpsid	i
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	b662      	cpsie	i
 800ba12:	623b      	str	r3, [r7, #32]
}
 800ba14:	bf00      	nop
 800ba16:	e7fe      	b.n	800ba16 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d103      	bne.n	800ba26 <xQueueGenericSendFromISR+0x72>
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d101      	bne.n	800ba2a <xQueueGenericSendFromISR+0x76>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e000      	b.n	800ba2c <xQueueGenericSendFromISR+0x78>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10c      	bne.n	800ba4a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	b672      	cpsid	i
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	b662      	cpsie	i
 800ba44:	61fb      	str	r3, [r7, #28]
}
 800ba46:	bf00      	nop
 800ba48:	e7fe      	b.n	800ba48 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba4a:	f002 fc47 	bl	800e2dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba4e:	f3ef 8211 	mrs	r2, BASEPRI
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	b672      	cpsid	i
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	b662      	cpsie	i
 800ba66:	61ba      	str	r2, [r7, #24]
 800ba68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d302      	bcc.n	800ba80 <xQueueGenericSendFromISR+0xcc>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d12c      	bne.n	800bada <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	68b9      	ldr	r1, [r7, #8]
 800ba8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba90:	f000 fb83 	bl	800c19a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d112      	bne.n	800bac4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d016      	beq.n	800bad4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	3324      	adds	r3, #36	; 0x24
 800baaa:	4618      	mov	r0, r3
 800baac:	f001 fa42 	bl	800cf34 <xTaskRemoveFromEventList>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00e      	beq.n	800bad4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00b      	beq.n	800bad4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	e007      	b.n	800bad4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bac8:	3301      	adds	r3, #1
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	b25a      	sxtb	r2, r3
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bad4:	2301      	movs	r3, #1
 800bad6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bad8:	e001      	b.n	800bade <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bada:	2300      	movs	r3, #0
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800baec:	4618      	mov	r0, r3
 800baee:	3738      	adds	r7, #56	; 0x38
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08e      	sub	sp, #56	; 0x38
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10c      	bne.n	800bb22 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	b672      	cpsid	i
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	b662      	cpsie	i
 800bb1c:	623b      	str	r3, [r7, #32]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00c      	beq.n	800bb44 <xQueueGiveFromISR+0x50>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	b672      	cpsid	i
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	b662      	cpsie	i
 800bb3e:	61fb      	str	r3, [r7, #28]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <xQueueGiveFromISR+0x60>
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <xQueueGiveFromISR+0x64>
 800bb54:	2301      	movs	r3, #1
 800bb56:	e000      	b.n	800bb5a <xQueueGiveFromISR+0x66>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10c      	bne.n	800bb78 <xQueueGiveFromISR+0x84>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	b672      	cpsid	i
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	b662      	cpsie	i
 800bb72:	61bb      	str	r3, [r7, #24]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb78:	f002 fbb0 	bl	800e2dc <vPortValidateInterruptPriority>
	__asm volatile
 800bb7c:	f3ef 8211 	mrs	r2, BASEPRI
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	b672      	cpsid	i
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	b662      	cpsie	i
 800bb94:	617a      	str	r2, [r7, #20]
 800bb96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb98:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d22b      	bcs.n	800bc04 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc6:	d112      	bne.n	800bbee <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d016      	beq.n	800bbfe <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	3324      	adds	r3, #36	; 0x24
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 f9ad 	bl	800cf34 <xTaskRemoveFromEventList>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00e      	beq.n	800bbfe <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00b      	beq.n	800bbfe <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	601a      	str	r2, [r3, #0]
 800bbec:	e007      	b.n	800bbfe <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	b25a      	sxtb	r2, r3
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
 800bc02:	e001      	b.n	800bc08 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc04:	2300      	movs	r3, #0
 800bc06:	637b      	str	r3, [r7, #52]	; 0x34
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f383 8811 	msr	BASEPRI, r3
}
 800bc12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3738      	adds	r7, #56	; 0x38
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
	...

0800bc20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08c      	sub	sp, #48	; 0x30
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10c      	bne.n	800bc54 <xQueueReceive+0x34>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	b672      	cpsid	i
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	b662      	cpsie	i
 800bc4e:	623b      	str	r3, [r7, #32]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d103      	bne.n	800bc62 <xQueueReceive+0x42>
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <xQueueReceive+0x46>
 800bc62:	2301      	movs	r3, #1
 800bc64:	e000      	b.n	800bc68 <xQueueReceive+0x48>
 800bc66:	2300      	movs	r3, #0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10c      	bne.n	800bc86 <xQueueReceive+0x66>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	b672      	cpsid	i
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	b662      	cpsie	i
 800bc80:	61fb      	str	r3, [r7, #28]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc86:	f001 fb31 	bl	800d2ec <xTaskGetSchedulerState>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <xQueueReceive+0x76>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <xQueueReceive+0x7a>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <xQueueReceive+0x7c>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10c      	bne.n	800bcba <xQueueReceive+0x9a>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	b672      	cpsid	i
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	b662      	cpsie	i
 800bcb4:	61bb      	str	r3, [r7, #24]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcba:	f002 fa27 	bl	800e10c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d01f      	beq.n	800bd0a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcce:	f000 face 	bl	800c26e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	1e5a      	subs	r2, r3, #1
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00f      	beq.n	800bd02 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	3310      	adds	r3, #16
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 f924 	bl	800cf34 <xTaskRemoveFromEventList>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d007      	beq.n	800bd02 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcf2:	4b3d      	ldr	r3, [pc, #244]	; (800bde8 <xQueueReceive+0x1c8>)
 800bcf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd02:	f002 fa37 	bl	800e174 <vPortExitCritical>
				return pdPASS;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e069      	b.n	800bdde <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d103      	bne.n	800bd18 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd10:	f002 fa30 	bl	800e174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd14:	2300      	movs	r3, #0
 800bd16:	e062      	b.n	800bdde <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd1e:	f107 0310 	add.w	r3, r7, #16
 800bd22:	4618      	mov	r0, r3
 800bd24:	f001 f96c 	bl	800d000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd2c:	f002 fa22 	bl	800e174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd30:	f000 feba 	bl	800caa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd34:	f002 f9ea 	bl	800e10c <vPortEnterCritical>
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd3e:	b25b      	sxtb	r3, r3
 800bd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd44:	d103      	bne.n	800bd4e <xQueueReceive+0x12e>
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	d103      	bne.n	800bd64 <xQueueReceive+0x144>
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd64:	f002 fa06 	bl	800e174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd68:	1d3a      	adds	r2, r7, #4
 800bd6a:	f107 0310 	add.w	r3, r7, #16
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 f95b 	bl	800d02c <xTaskCheckForTimeOut>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d123      	bne.n	800bdc4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd7e:	f000 faee 	bl	800c35e <prvIsQueueEmpty>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d017      	beq.n	800bdb8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	3324      	adds	r3, #36	; 0x24
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	4611      	mov	r1, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f001 f87b 	bl	800ce8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd98:	f000 fa8f 	bl	800c2ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd9c:	f000 fe92 	bl	800cac4 <xTaskResumeAll>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d189      	bne.n	800bcba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bda6:	4b10      	ldr	r3, [pc, #64]	; (800bde8 <xQueueReceive+0x1c8>)
 800bda8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	e780      	b.n	800bcba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdba:	f000 fa7e 	bl	800c2ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdbe:	f000 fe81 	bl	800cac4 <xTaskResumeAll>
 800bdc2:	e77a      	b.n	800bcba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc6:	f000 fa78 	bl	800c2ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdca:	f000 fe7b 	bl	800cac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd0:	f000 fac5 	bl	800c35e <prvIsQueueEmpty>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f43f af6f 	beq.w	800bcba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3730      	adds	r7, #48	; 0x30
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08e      	sub	sp, #56	; 0x38
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10c      	bne.n	800be22 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	b672      	cpsid	i
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	b662      	cpsie	i
 800be1c:	623b      	str	r3, [r7, #32]
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00c      	beq.n	800be44 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	b672      	cpsid	i
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	b662      	cpsie	i
 800be3e:	61fb      	str	r3, [r7, #28]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be44:	f001 fa52 	bl	800d2ec <xTaskGetSchedulerState>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <xQueueSemaphoreTake+0x68>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d101      	bne.n	800be58 <xQueueSemaphoreTake+0x6c>
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <xQueueSemaphoreTake+0x6e>
 800be58:	2300      	movs	r3, #0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10c      	bne.n	800be78 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	b672      	cpsid	i
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	b662      	cpsie	i
 800be72:	61bb      	str	r3, [r7, #24]
}
 800be74:	bf00      	nop
 800be76:	e7fe      	b.n	800be76 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be78:	f002 f948 	bl	800e10c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	2b00      	cmp	r3, #0
 800be86:	d024      	beq.n	800bed2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	1e5a      	subs	r2, r3, #1
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d104      	bne.n	800bea2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be98:	f001 fba6 	bl	800d5e8 <pvTaskIncrementMutexHeldCount>
 800be9c:	4602      	mov	r2, r0
 800be9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00f      	beq.n	800beca <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	3310      	adds	r3, #16
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 f840 	bl	800cf34 <xTaskRemoveFromEventList>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d007      	beq.n	800beca <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800beba:	4b55      	ldr	r3, [pc, #340]	; (800c010 <xQueueSemaphoreTake+0x224>)
 800bebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beca:	f002 f953 	bl	800e174 <vPortExitCritical>
				return pdPASS;
 800bece:	2301      	movs	r3, #1
 800bed0:	e099      	b.n	800c006 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d113      	bne.n	800bf00 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00c      	beq.n	800bef8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	b672      	cpsid	i
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	b662      	cpsie	i
 800bef2:	617b      	str	r3, [r7, #20]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bef8:	f002 f93c 	bl	800e174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800befc:	2300      	movs	r3, #0
 800befe:	e082      	b.n	800c006 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf06:	f107 030c 	add.w	r3, r7, #12
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f001 f878 	bl	800d000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf10:	2301      	movs	r3, #1
 800bf12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf14:	f002 f92e 	bl	800e174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf18:	f000 fdc6 	bl	800caa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf1c:	f002 f8f6 	bl	800e10c <vPortEnterCritical>
 800bf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d103      	bne.n	800bf36 <xQueueSemaphoreTake+0x14a>
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf3c:	b25b      	sxtb	r3, r3
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf42:	d103      	bne.n	800bf4c <xQueueSemaphoreTake+0x160>
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf4c:	f002 f912 	bl	800e174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf50:	463a      	mov	r2, r7
 800bf52:	f107 030c 	add.w	r3, r7, #12
 800bf56:	4611      	mov	r1, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f001 f867 	bl	800d02c <xTaskCheckForTimeOut>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d132      	bne.n	800bfca <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf66:	f000 f9fa 	bl	800c35e <prvIsQueueEmpty>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d026      	beq.n	800bfbe <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d109      	bne.n	800bf8c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bf78:	f002 f8c8 	bl	800e10c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f001 f9d1 	bl	800d328 <xTaskPriorityInherit>
 800bf86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf88:	f002 f8f4 	bl	800e174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	3324      	adds	r3, #36	; 0x24
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 ff79 	bl	800ce8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf9c:	f000 f98d 	bl	800c2ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfa0:	f000 fd90 	bl	800cac4 <xTaskResumeAll>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f47f af66 	bne.w	800be78 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bfac:	4b18      	ldr	r3, [pc, #96]	; (800c010 <xQueueSemaphoreTake+0x224>)
 800bfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	e75c      	b.n	800be78 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc0:	f000 f97b 	bl	800c2ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfc4:	f000 fd7e 	bl	800cac4 <xTaskResumeAll>
 800bfc8:	e756      	b.n	800be78 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfcc:	f000 f975 	bl	800c2ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfd0:	f000 fd78 	bl	800cac4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd6:	f000 f9c2 	bl	800c35e <prvIsQueueEmpty>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f43f af4b 	beq.w	800be78 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00d      	beq.n	800c004 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bfe8:	f002 f890 	bl	800e10c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bfec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfee:	f000 f8bc 	bl	800c16a <prvGetDisinheritPriorityAfterTimeout>
 800bff2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 fa6e 	bl	800d4dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c000:	f002 f8b8 	bl	800e174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c006:	4618      	mov	r0, r3
 800c008:	3738      	adds	r7, #56	; 0x38
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	e000ed04 	.word	0xe000ed04

0800c014 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08e      	sub	sp, #56	; 0x38
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10c      	bne.n	800c044 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	b672      	cpsid	i
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	b662      	cpsie	i
 800c03e:	623b      	str	r3, [r7, #32]
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d103      	bne.n	800c052 <xQueueReceiveFromISR+0x3e>
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <xQueueReceiveFromISR+0x42>
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <xQueueReceiveFromISR+0x44>
 800c056:	2300      	movs	r3, #0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10c      	bne.n	800c076 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	b672      	cpsid	i
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	b662      	cpsie	i
 800c070:	61fb      	str	r3, [r7, #28]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c076:	f002 f931 	bl	800e2dc <vPortValidateInterruptPriority>
	__asm volatile
 800c07a:	f3ef 8211 	mrs	r2, BASEPRI
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	b672      	cpsid	i
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	b662      	cpsie	i
 800c092:	61ba      	str	r2, [r7, #24]
 800c094:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c096:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d02f      	beq.n	800c106 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0b0:	68b9      	ldr	r1, [r7, #8]
 800c0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b4:	f000 f8db 	bl	800c26e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	1e5a      	subs	r2, r3, #1
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c0c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d112      	bne.n	800c0f0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d016      	beq.n	800c100 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	3310      	adds	r3, #16
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 ff2c 	bl	800cf34 <xTaskRemoveFromEventList>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00e      	beq.n	800c100 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	e007      	b.n	800c100 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	b25a      	sxtb	r2, r3
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c100:	2301      	movs	r3, #1
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
 800c104:	e001      	b.n	800c10a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800c106:	2300      	movs	r3, #0
 800c108:	637b      	str	r3, [r7, #52]	; 0x34
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	f383 8811 	msr	BASEPRI, r3
}
 800c114:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3738      	adds	r7, #56	; 0x38
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10c      	bne.n	800c14c <vQueueDelete+0x2c>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	b672      	cpsid	i
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	b662      	cpsie	i
 800c146:	60bb      	str	r3, [r7, #8]
}
 800c148:	bf00      	nop
 800c14a:	e7fe      	b.n	800c14a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 f95f 	bl	800c410 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d102      	bne.n	800c162 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f002 f9cb 	bl	800e4f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c16a:	b480      	push	{r7}
 800c16c:	b085      	sub	sp, #20
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c176:	2b00      	cmp	r3, #0
 800c178:	d006      	beq.n	800c188 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	e001      	b.n	800c18c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c18c:	68fb      	ldr	r3, [r7, #12]
	}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b086      	sub	sp, #24
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10d      	bne.n	800c1d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d14d      	bne.n	800c25c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f001 f917 	bl	800d3f8 <xTaskPriorityDisinherit>
 800c1ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	609a      	str	r2, [r3, #8]
 800c1d2:	e043      	b.n	800c25c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d119      	bne.n	800c20e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6858      	ldr	r0, [r3, #4]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	f002 fad1 	bl	800e78c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f2:	441a      	add	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	429a      	cmp	r2, r3
 800c202:	d32b      	bcc.n	800c25c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	605a      	str	r2, [r3, #4]
 800c20c:	e026      	b.n	800c25c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68d8      	ldr	r0, [r3, #12]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c216:	461a      	mov	r2, r3
 800c218:	68b9      	ldr	r1, [r7, #8]
 800c21a:	f002 fab7 	bl	800e78c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68da      	ldr	r2, [r3, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c226:	425b      	negs	r3, r3
 800c228:	441a      	add	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d207      	bcs.n	800c24a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	689a      	ldr	r2, [r3, #8]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c242:	425b      	negs	r3, r3
 800c244:	441a      	add	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d105      	bne.n	800c25c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	3b01      	subs	r3, #1
 800c25a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c264:	697b      	ldr	r3, [r7, #20]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d018      	beq.n	800c2b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68da      	ldr	r2, [r3, #12]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c288:	441a      	add	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	429a      	cmp	r2, r3
 800c298:	d303      	bcc.n	800c2a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68d9      	ldr	r1, [r3, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6838      	ldr	r0, [r7, #0]
 800c2ae:	f002 fa6d 	bl	800e78c <memcpy>
	}
}
 800c2b2:	bf00      	nop
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b084      	sub	sp, #16
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2c2:	f001 ff23 	bl	800e10c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2ce:	e011      	b.n	800c2f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d012      	beq.n	800c2fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3324      	adds	r3, #36	; 0x24
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fe29 	bl	800cf34 <xTaskRemoveFromEventList>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2e8:	f000 ff06 	bl	800d0f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dce9      	bgt.n	800c2d0 <prvUnlockQueue+0x16>
 800c2fc:	e000      	b.n	800c300 <prvUnlockQueue+0x46>
					break;
 800c2fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	22ff      	movs	r2, #255	; 0xff
 800c304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c308:	f001 ff34 	bl	800e174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c30c:	f001 fefe 	bl	800e10c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c316:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c318:	e011      	b.n	800c33e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d012      	beq.n	800c348 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3310      	adds	r3, #16
 800c326:	4618      	mov	r0, r3
 800c328:	f000 fe04 	bl	800cf34 <xTaskRemoveFromEventList>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c332:	f000 fee1 	bl	800d0f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	3b01      	subs	r3, #1
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c33e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c342:	2b00      	cmp	r3, #0
 800c344:	dce9      	bgt.n	800c31a <prvUnlockQueue+0x60>
 800c346:	e000      	b.n	800c34a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c348:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	22ff      	movs	r2, #255	; 0xff
 800c34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c352:	f001 ff0f 	bl	800e174 <vPortExitCritical>
}
 800c356:	bf00      	nop
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c366:	f001 fed1 	bl	800e10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c372:	2301      	movs	r3, #1
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	e001      	b.n	800c37c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c378:	2300      	movs	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c37c:	f001 fefa 	bl	800e174 <vPortExitCritical>

	return xReturn;
 800c380:	68fb      	ldr	r3, [r7, #12]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c392:	f001 febb 	bl	800e10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d102      	bne.n	800c3a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	60fb      	str	r3, [r7, #12]
 800c3a6:	e001      	b.n	800c3ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ac:	f001 fee2 	bl	800e174 <vPortExitCritical>

	return xReturn;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
 800c3ca:	e014      	b.n	800c3f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3cc:	4a0f      	ldr	r2, [pc, #60]	; (800c40c <vQueueAddToRegistry+0x50>)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10b      	bne.n	800c3f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3d8:	490c      	ldr	r1, [pc, #48]	; (800c40c <vQueueAddToRegistry+0x50>)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3e2:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <vQueueAddToRegistry+0x50>)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	4413      	add	r3, r2
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3ee:	e006      	b.n	800c3fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2b07      	cmp	r3, #7
 800c3fa:	d9e7      	bls.n	800c3cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3fc:	bf00      	nop
 800c3fe:	bf00      	nop
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	20000f58 	.word	0x20000f58

0800c410 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c418:	2300      	movs	r3, #0
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	e016      	b.n	800c44c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c41e:	4a10      	ldr	r2, [pc, #64]	; (800c460 <vQueueUnregisterQueue+0x50>)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	4413      	add	r3, r2
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d10b      	bne.n	800c446 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c42e:	4a0c      	ldr	r2, [pc, #48]	; (800c460 <vQueueUnregisterQueue+0x50>)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2100      	movs	r1, #0
 800c434:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c438:	4a09      	ldr	r2, [pc, #36]	; (800c460 <vQueueUnregisterQueue+0x50>)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	4413      	add	r3, r2
 800c440:	2200      	movs	r2, #0
 800c442:	605a      	str	r2, [r3, #4]
				break;
 800c444:	e006      	b.n	800c454 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b07      	cmp	r3, #7
 800c450:	d9e5      	bls.n	800c41e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr
 800c460:	20000f58 	.word	0x20000f58

0800c464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c474:	f001 fe4a 	bl	800e10c <vPortEnterCritical>
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c484:	d103      	bne.n	800c48e <vQueueWaitForMessageRestricted+0x2a>
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c494:	b25b      	sxtb	r3, r3
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49a:	d103      	bne.n	800c4a4 <vQueueWaitForMessageRestricted+0x40>
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4a4:	f001 fe66 	bl	800e174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d106      	bne.n	800c4be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	3324      	adds	r3, #36	; 0x24
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	68b9      	ldr	r1, [r7, #8]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 fd0d 	bl	800ced8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4be:	6978      	ldr	r0, [r7, #20]
 800c4c0:	f7ff fefb 	bl	800c2ba <prvUnlockQueue>
	}
 800c4c4:	bf00      	nop
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08e      	sub	sp, #56	; 0x38
 800c4d0:	af04      	add	r7, sp, #16
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10c      	bne.n	800c4fa <xTaskCreateStatic+0x2e>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	b672      	cpsid	i
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	b662      	cpsie	i
 800c4f4:	623b      	str	r3, [r7, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10c      	bne.n	800c51a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	b672      	cpsid	i
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	b662      	cpsie	i
 800c514:	61fb      	str	r3, [r7, #28]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c51a:	23bc      	movs	r3, #188	; 0xbc
 800c51c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2bbc      	cmp	r3, #188	; 0xbc
 800c522:	d00c      	beq.n	800c53e <xTaskCreateStatic+0x72>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	b672      	cpsid	i
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	b662      	cpsie	i
 800c538:	61bb      	str	r3, [r7, #24]
}
 800c53a:	bf00      	nop
 800c53c:	e7fe      	b.n	800c53c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c53e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	2b00      	cmp	r3, #0
 800c544:	d01e      	beq.n	800c584 <xTaskCreateStatic+0xb8>
 800c546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d01b      	beq.n	800c584 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c554:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	2202      	movs	r2, #2
 800c55a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c55e:	2300      	movs	r3, #0
 800c560:	9303      	str	r3, [sp, #12]
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	9302      	str	r3, [sp, #8]
 800c566:	f107 0314 	add.w	r3, r7, #20
 800c56a:	9301      	str	r3, [sp, #4]
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	68b9      	ldr	r1, [r7, #8]
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f000 f850 	bl	800c61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c57e:	f000 f8f5 	bl	800c76c <prvAddNewTaskToReadyList>
 800c582:	e001      	b.n	800c588 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c588:	697b      	ldr	r3, [r7, #20]
	}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3728      	adds	r7, #40	; 0x28
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c592:	b580      	push	{r7, lr}
 800c594:	b08c      	sub	sp, #48	; 0x30
 800c596:	af04      	add	r7, sp, #16
 800c598:	60f8      	str	r0, [r7, #12]
 800c59a:	60b9      	str	r1, [r7, #8]
 800c59c:	603b      	str	r3, [r7, #0]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5a2:	88fb      	ldrh	r3, [r7, #6]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 fedc 	bl	800e364 <pvPortMalloc>
 800c5ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00e      	beq.n	800c5d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5b4:	20bc      	movs	r0, #188	; 0xbc
 800c5b6:	f001 fed5 	bl	800e364 <pvPortMalloc>
 800c5ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	631a      	str	r2, [r3, #48]	; 0x30
 800c5c8:	e005      	b.n	800c5d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	f001 ff94 	bl	800e4f8 <vPortFree>
 800c5d0:	e001      	b.n	800c5d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d017      	beq.n	800c60c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5e4:	88fa      	ldrh	r2, [r7, #6]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	9302      	str	r3, [sp, #8]
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	9301      	str	r3, [sp, #4]
 800c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	68b9      	ldr	r1, [r7, #8]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 f80e 	bl	800c61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c600:	69f8      	ldr	r0, [r7, #28]
 800c602:	f000 f8b3 	bl	800c76c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c606:	2301      	movs	r3, #1
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	e002      	b.n	800c612 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
 800c610:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c612:	69bb      	ldr	r3, [r7, #24]
	}
 800c614:	4618      	mov	r0, r3
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	461a      	mov	r2, r3
 800c634:	21a5      	movs	r1, #165	; 0xa5
 800c636:	f002 f8b7 	bl	800e7a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c644:	440b      	add	r3, r1
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	f023 0307 	bic.w	r3, r3, #7
 800c652:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	f003 0307 	and.w	r3, r3, #7
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00c      	beq.n	800c678 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	b672      	cpsid	i
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	b662      	cpsie	i
 800c672:	617b      	str	r3, [r7, #20]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d01f      	beq.n	800c6be <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c67e:	2300      	movs	r3, #0
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	e012      	b.n	800c6aa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	4413      	add	r3, r2
 800c68a:	7819      	ldrb	r1, [r3, #0]
 800c68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	3334      	adds	r3, #52	; 0x34
 800c694:	460a      	mov	r2, r1
 800c696:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	4413      	add	r3, r2
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d006      	beq.n	800c6b2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	61fb      	str	r3, [r7, #28]
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	2b0f      	cmp	r3, #15
 800c6ae:	d9e9      	bls.n	800c684 <prvInitialiseNewTask+0x68>
 800c6b0:	e000      	b.n	800c6b4 <prvInitialiseNewTask+0x98>
			{
				break;
 800c6b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6bc:	e003      	b.n	800c6c6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	2b37      	cmp	r3, #55	; 0x37
 800c6ca:	d901      	bls.n	800c6d0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6cc:	2337      	movs	r3, #55	; 0x37
 800c6ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	2200      	movs	r2, #0
 800c6e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe fd4c 	bl	800b184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	3318      	adds	r3, #24
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fe fd47 	bl	800b184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c70a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70e:	2200      	movs	r2, #0
 800c710:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	2200      	movs	r2, #0
 800c718:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	3354      	adds	r3, #84	; 0x54
 800c720:	2260      	movs	r2, #96	; 0x60
 800c722:	2100      	movs	r1, #0
 800c724:	4618      	mov	r0, r3
 800c726:	f002 f83f 	bl	800e7a8 <memset>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	4a0c      	ldr	r2, [pc, #48]	; (800c760 <prvInitialiseNewTask+0x144>)
 800c72e:	659a      	str	r2, [r3, #88]	; 0x58
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	4a0c      	ldr	r2, [pc, #48]	; (800c764 <prvInitialiseNewTask+0x148>)
 800c734:	65da      	str	r2, [r3, #92]	; 0x5c
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	4a0b      	ldr	r2, [pc, #44]	; (800c768 <prvInitialiseNewTask+0x14c>)
 800c73a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	68f9      	ldr	r1, [r7, #12]
 800c740:	69b8      	ldr	r0, [r7, #24]
 800c742:	f001 fbd7 	bl	800def4 <pxPortInitialiseStack>
 800c746:	4602      	mov	r2, r0
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c758:	bf00      	nop
 800c75a:	3720      	adds	r7, #32
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	0800f3c0 	.word	0x0800f3c0
 800c764:	0800f3e0 	.word	0x0800f3e0
 800c768:	0800f3a0 	.word	0x0800f3a0

0800c76c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c774:	f001 fcca 	bl	800e10c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c778:	4b2d      	ldr	r3, [pc, #180]	; (800c830 <prvAddNewTaskToReadyList+0xc4>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3301      	adds	r3, #1
 800c77e:	4a2c      	ldr	r2, [pc, #176]	; (800c830 <prvAddNewTaskToReadyList+0xc4>)
 800c780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c782:	4b2c      	ldr	r3, [pc, #176]	; (800c834 <prvAddNewTaskToReadyList+0xc8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d109      	bne.n	800c79e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c78a:	4a2a      	ldr	r2, [pc, #168]	; (800c834 <prvAddNewTaskToReadyList+0xc8>)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c790:	4b27      	ldr	r3, [pc, #156]	; (800c830 <prvAddNewTaskToReadyList+0xc4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d110      	bne.n	800c7ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c798:	f000 fcd4 	bl	800d144 <prvInitialiseTaskLists>
 800c79c:	e00d      	b.n	800c7ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c79e:	4b26      	ldr	r3, [pc, #152]	; (800c838 <prvAddNewTaskToReadyList+0xcc>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d109      	bne.n	800c7ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7a6:	4b23      	ldr	r3, [pc, #140]	; (800c834 <prvAddNewTaskToReadyList+0xc8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d802      	bhi.n	800c7ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7b4:	4a1f      	ldr	r2, [pc, #124]	; (800c834 <prvAddNewTaskToReadyList+0xc8>)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c7ba:	4b20      	ldr	r3, [pc, #128]	; (800c83c <prvAddNewTaskToReadyList+0xd0>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	4a1e      	ldr	r2, [pc, #120]	; (800c83c <prvAddNewTaskToReadyList+0xd0>)
 800c7c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c7c4:	4b1d      	ldr	r3, [pc, #116]	; (800c83c <prvAddNewTaskToReadyList+0xd0>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d0:	4b1b      	ldr	r3, [pc, #108]	; (800c840 <prvAddNewTaskToReadyList+0xd4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d903      	bls.n	800c7e0 <prvAddNewTaskToReadyList+0x74>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7dc:	4a18      	ldr	r2, [pc, #96]	; (800c840 <prvAddNewTaskToReadyList+0xd4>)
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4a15      	ldr	r2, [pc, #84]	; (800c844 <prvAddNewTaskToReadyList+0xd8>)
 800c7ee:	441a      	add	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f7fe fcd1 	bl	800b19e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7fc:	f001 fcba 	bl	800e174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c800:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <prvAddNewTaskToReadyList+0xcc>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c808:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <prvAddNewTaskToReadyList+0xc8>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	429a      	cmp	r2, r3
 800c814:	d207      	bcs.n	800c826 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c816:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <prvAddNewTaskToReadyList+0xdc>)
 800c818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81c:	601a      	str	r2, [r3, #0]
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c826:	bf00      	nop
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	2000146c 	.word	0x2000146c
 800c834:	20000f98 	.word	0x20000f98
 800c838:	20001478 	.word	0x20001478
 800c83c:	20001488 	.word	0x20001488
 800c840:	20001474 	.word	0x20001474
 800c844:	20000f9c 	.word	0x20000f9c
 800c848:	e000ed04 	.word	0xe000ed04

0800c84c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08a      	sub	sp, #40	; 0x28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c856:	2300      	movs	r3, #0
 800c858:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10c      	bne.n	800c87a <vTaskDelayUntil+0x2e>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	b672      	cpsid	i
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	b662      	cpsie	i
 800c874:	617b      	str	r3, [r7, #20]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10c      	bne.n	800c89a <vTaskDelayUntil+0x4e>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	b672      	cpsid	i
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	b662      	cpsie	i
 800c894:	613b      	str	r3, [r7, #16]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c89a:	4b2b      	ldr	r3, [pc, #172]	; (800c948 <vTaskDelayUntil+0xfc>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00c      	beq.n	800c8bc <vTaskDelayUntil+0x70>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a6:	b672      	cpsid	i
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	b662      	cpsie	i
 800c8b6:	60fb      	str	r3, [r7, #12]
}
 800c8b8:	bf00      	nop
 800c8ba:	e7fe      	b.n	800c8ba <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c8bc:	f000 f8f4 	bl	800caa8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c8c0:	4b22      	ldr	r3, [pc, #136]	; (800c94c <vTaskDelayUntil+0x100>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6a3a      	ldr	r2, [r7, #32]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d20b      	bcs.n	800c8f2 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d211      	bcs.n	800c908 <vTaskDelayUntil+0xbc>
 800c8e4:	69fa      	ldr	r2, [r7, #28]
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d90d      	bls.n	800c908 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c8f0:	e00a      	b.n	800c908 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	69fa      	ldr	r2, [r7, #28]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d303      	bcc.n	800c904 <vTaskDelayUntil+0xb8>
 800c8fc:	69fa      	ldr	r2, [r7, #28]
 800c8fe:	6a3b      	ldr	r3, [r7, #32]
 800c900:	429a      	cmp	r2, r3
 800c902:	d901      	bls.n	800c908 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c904:	2301      	movs	r3, #1
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	d006      	beq.n	800c922 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c914:	69fa      	ldr	r2, [r7, #28]
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	2100      	movs	r1, #0
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 fe77 	bl	800d610 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c922:	f000 f8cf 	bl	800cac4 <xTaskResumeAll>
 800c926:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d107      	bne.n	800c93e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c92e:	4b08      	ldr	r3, [pc, #32]	; (800c950 <vTaskDelayUntil+0x104>)
 800c930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c93e:	bf00      	nop
 800c940:	3728      	adds	r7, #40	; 0x28
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	20001494 	.word	0x20001494
 800c94c:	20001470 	.word	0x20001470
 800c950:	e000ed04 	.word	0xe000ed04

0800c954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c95c:	2300      	movs	r3, #0
 800c95e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d019      	beq.n	800c99a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c966:	4b14      	ldr	r3, [pc, #80]	; (800c9b8 <vTaskDelay+0x64>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00c      	beq.n	800c988 <vTaskDelay+0x34>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	b672      	cpsid	i
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	b662      	cpsie	i
 800c982:	60bb      	str	r3, [r7, #8]
}
 800c984:	bf00      	nop
 800c986:	e7fe      	b.n	800c986 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c988:	f000 f88e 	bl	800caa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fe3e 	bl	800d610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c994:	f000 f896 	bl	800cac4 <xTaskResumeAll>
 800c998:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d107      	bne.n	800c9b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c9a0:	4b06      	ldr	r3, [pc, #24]	; (800c9bc <vTaskDelay+0x68>)
 800c9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9b0:	bf00      	nop
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20001494 	.word	0x20001494
 800c9bc:	e000ed04 	.word	0xe000ed04

0800c9c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08a      	sub	sp, #40	; 0x28
 800c9c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9ce:	463a      	mov	r2, r7
 800c9d0:	1d39      	adds	r1, r7, #4
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fb80 	bl	800b0dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	9202      	str	r2, [sp, #8]
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	460a      	mov	r2, r1
 800c9ee:	4926      	ldr	r1, [pc, #152]	; (800ca88 <vTaskStartScheduler+0xc8>)
 800c9f0:	4826      	ldr	r0, [pc, #152]	; (800ca8c <vTaskStartScheduler+0xcc>)
 800c9f2:	f7ff fd6b 	bl	800c4cc <xTaskCreateStatic>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4a25      	ldr	r2, [pc, #148]	; (800ca90 <vTaskStartScheduler+0xd0>)
 800c9fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9fc:	4b24      	ldr	r3, [pc, #144]	; (800ca90 <vTaskStartScheduler+0xd0>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca04:	2301      	movs	r3, #1
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	e001      	b.n	800ca0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d102      	bne.n	800ca1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca14:	f000 fe50 	bl	800d6b8 <xTimerCreateTimerTask>
 800ca18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d11d      	bne.n	800ca5c <vTaskStartScheduler+0x9c>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	b672      	cpsid	i
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	b662      	cpsie	i
 800ca34:	613b      	str	r3, [r7, #16]
}
 800ca36:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca38:	4b16      	ldr	r3, [pc, #88]	; (800ca94 <vTaskStartScheduler+0xd4>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3354      	adds	r3, #84	; 0x54
 800ca3e:	4a16      	ldr	r2, [pc, #88]	; (800ca98 <vTaskStartScheduler+0xd8>)
 800ca40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca42:	4b16      	ldr	r3, [pc, #88]	; (800ca9c <vTaskStartScheduler+0xdc>)
 800ca44:	f04f 32ff 	mov.w	r2, #4294967295
 800ca48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca4a:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <vTaskStartScheduler+0xe0>)
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca50:	4b14      	ldr	r3, [pc, #80]	; (800caa4 <vTaskStartScheduler+0xe4>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca56:	f001 fadb 	bl	800e010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca5a:	e010      	b.n	800ca7e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca62:	d10c      	bne.n	800ca7e <vTaskStartScheduler+0xbe>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	b672      	cpsid	i
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	b662      	cpsie	i
 800ca78:	60fb      	str	r3, [r7, #12]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <vTaskStartScheduler+0xbc>
}
 800ca7e:	bf00      	nop
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	0800eea0 	.word	0x0800eea0
 800ca8c:	0800d111 	.word	0x0800d111
 800ca90:	20001490 	.word	0x20001490
 800ca94:	20000f98 	.word	0x20000f98
 800ca98:	20000014 	.word	0x20000014
 800ca9c:	2000148c 	.word	0x2000148c
 800caa0:	20001478 	.word	0x20001478
 800caa4:	20001470 	.word	0x20001470

0800caa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800caa8:	b480      	push	{r7}
 800caaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800caac:	4b04      	ldr	r3, [pc, #16]	; (800cac0 <vTaskSuspendAll+0x18>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3301      	adds	r3, #1
 800cab2:	4a03      	ldr	r2, [pc, #12]	; (800cac0 <vTaskSuspendAll+0x18>)
 800cab4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cab6:	bf00      	nop
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	20001494 	.word	0x20001494

0800cac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cace:	2300      	movs	r3, #0
 800cad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cad2:	4b43      	ldr	r3, [pc, #268]	; (800cbe0 <xTaskResumeAll+0x11c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10c      	bne.n	800caf4 <xTaskResumeAll+0x30>
	__asm volatile
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	b672      	cpsid	i
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	b662      	cpsie	i
 800caee:	603b      	str	r3, [r7, #0]
}
 800caf0:	bf00      	nop
 800caf2:	e7fe      	b.n	800caf2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800caf4:	f001 fb0a 	bl	800e10c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800caf8:	4b39      	ldr	r3, [pc, #228]	; (800cbe0 <xTaskResumeAll+0x11c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	4a38      	ldr	r2, [pc, #224]	; (800cbe0 <xTaskResumeAll+0x11c>)
 800cb00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb02:	4b37      	ldr	r3, [pc, #220]	; (800cbe0 <xTaskResumeAll+0x11c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d162      	bne.n	800cbd0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb0a:	4b36      	ldr	r3, [pc, #216]	; (800cbe4 <xTaskResumeAll+0x120>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d05e      	beq.n	800cbd0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb12:	e02f      	b.n	800cb74 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb14:	4b34      	ldr	r3, [pc, #208]	; (800cbe8 <xTaskResumeAll+0x124>)
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3318      	adds	r3, #24
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fb99 	bl	800b258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	3304      	adds	r3, #4
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fb94 	bl	800b258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	4b2d      	ldr	r3, [pc, #180]	; (800cbec <xTaskResumeAll+0x128>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d903      	bls.n	800cb44 <xTaskResumeAll+0x80>
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	4a2a      	ldr	r2, [pc, #168]	; (800cbec <xTaskResumeAll+0x128>)
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb48:	4613      	mov	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4a27      	ldr	r2, [pc, #156]	; (800cbf0 <xTaskResumeAll+0x12c>)
 800cb52:	441a      	add	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	3304      	adds	r3, #4
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	f7fe fb1f 	bl	800b19e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb64:	4b23      	ldr	r3, [pc, #140]	; (800cbf4 <xTaskResumeAll+0x130>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d302      	bcc.n	800cb74 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cb6e:	4b22      	ldr	r3, [pc, #136]	; (800cbf8 <xTaskResumeAll+0x134>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb74:	4b1c      	ldr	r3, [pc, #112]	; (800cbe8 <xTaskResumeAll+0x124>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1cb      	bne.n	800cb14 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb82:	f000 fb83 	bl	800d28c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb86:	4b1d      	ldr	r3, [pc, #116]	; (800cbfc <xTaskResumeAll+0x138>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d010      	beq.n	800cbb4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb92:	f000 f859 	bl	800cc48 <xTaskIncrementTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cb9c:	4b16      	ldr	r3, [pc, #88]	; (800cbf8 <xTaskResumeAll+0x134>)
 800cb9e:	2201      	movs	r2, #1
 800cba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1f1      	bne.n	800cb92 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <xTaskResumeAll+0x138>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbb4:	4b10      	ldr	r3, [pc, #64]	; (800cbf8 <xTaskResumeAll+0x134>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d009      	beq.n	800cbd0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbc0:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <xTaskResumeAll+0x13c>)
 800cbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbd0:	f001 fad0 	bl	800e174 <vPortExitCritical>

	return xAlreadyYielded;
 800cbd4:	68bb      	ldr	r3, [r7, #8]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20001494 	.word	0x20001494
 800cbe4:	2000146c 	.word	0x2000146c
 800cbe8:	2000142c 	.word	0x2000142c
 800cbec:	20001474 	.word	0x20001474
 800cbf0:	20000f9c 	.word	0x20000f9c
 800cbf4:	20000f98 	.word	0x20000f98
 800cbf8:	20001480 	.word	0x20001480
 800cbfc:	2000147c 	.word	0x2000147c
 800cc00:	e000ed04 	.word	0xe000ed04

0800cc04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc0a:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <xTaskGetTickCount+0x1c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc10:	687b      	ldr	r3, [r7, #4]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20001470 	.word	0x20001470

0800cc24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc2a:	f001 fb57 	bl	800e2dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cc2e:	2300      	movs	r3, #0
 800cc30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cc32:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <xTaskGetTickCountFromISR+0x20>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc38:	683b      	ldr	r3, [r7, #0]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20001470 	.word	0x20001470

0800cc48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc52:	4b50      	ldr	r3, [pc, #320]	; (800cd94 <xTaskIncrementTick+0x14c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f040 808b 	bne.w	800cd72 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc5c:	4b4e      	ldr	r3, [pc, #312]	; (800cd98 <xTaskIncrementTick+0x150>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3301      	adds	r3, #1
 800cc62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc64:	4a4c      	ldr	r2, [pc, #304]	; (800cd98 <xTaskIncrementTick+0x150>)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d122      	bne.n	800ccb6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc70:	4b4a      	ldr	r3, [pc, #296]	; (800cd9c <xTaskIncrementTick+0x154>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00c      	beq.n	800cc94 <xTaskIncrementTick+0x4c>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	b672      	cpsid	i
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	b662      	cpsie	i
 800cc8e:	603b      	str	r3, [r7, #0]
}
 800cc90:	bf00      	nop
 800cc92:	e7fe      	b.n	800cc92 <xTaskIncrementTick+0x4a>
 800cc94:	4b41      	ldr	r3, [pc, #260]	; (800cd9c <xTaskIncrementTick+0x154>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60fb      	str	r3, [r7, #12]
 800cc9a:	4b41      	ldr	r3, [pc, #260]	; (800cda0 <xTaskIncrementTick+0x158>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a3f      	ldr	r2, [pc, #252]	; (800cd9c <xTaskIncrementTick+0x154>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	4a3f      	ldr	r2, [pc, #252]	; (800cda0 <xTaskIncrementTick+0x158>)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	4b3e      	ldr	r3, [pc, #248]	; (800cda4 <xTaskIncrementTick+0x15c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3301      	adds	r3, #1
 800ccae:	4a3d      	ldr	r2, [pc, #244]	; (800cda4 <xTaskIncrementTick+0x15c>)
 800ccb0:	6013      	str	r3, [r2, #0]
 800ccb2:	f000 faeb 	bl	800d28c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccb6:	4b3c      	ldr	r3, [pc, #240]	; (800cda8 <xTaskIncrementTick+0x160>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d349      	bcc.n	800cd54 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccc0:	4b36      	ldr	r3, [pc, #216]	; (800cd9c <xTaskIncrementTick+0x154>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d104      	bne.n	800ccd4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccca:	4b37      	ldr	r3, [pc, #220]	; (800cda8 <xTaskIncrementTick+0x160>)
 800cccc:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd0:	601a      	str	r2, [r3, #0]
					break;
 800ccd2:	e03f      	b.n	800cd54 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd4:	4b31      	ldr	r3, [pc, #196]	; (800cd9c <xTaskIncrementTick+0x154>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d203      	bcs.n	800ccf4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccec:	4a2e      	ldr	r2, [pc, #184]	; (800cda8 <xTaskIncrementTick+0x160>)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccf2:	e02f      	b.n	800cd54 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fe faad 	bl	800b258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	3318      	adds	r3, #24
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe faa4 	bl	800b258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd14:	4b25      	ldr	r3, [pc, #148]	; (800cdac <xTaskIncrementTick+0x164>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d903      	bls.n	800cd24 <xTaskIncrementTick+0xdc>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	4a22      	ldr	r2, [pc, #136]	; (800cdac <xTaskIncrementTick+0x164>)
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4a1f      	ldr	r2, [pc, #124]	; (800cdb0 <xTaskIncrementTick+0x168>)
 800cd32:	441a      	add	r2, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	f7fe fa2f 	bl	800b19e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd44:	4b1b      	ldr	r3, [pc, #108]	; (800cdb4 <xTaskIncrementTick+0x16c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d3b8      	bcc.n	800ccc0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd52:	e7b5      	b.n	800ccc0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd54:	4b17      	ldr	r3, [pc, #92]	; (800cdb4 <xTaskIncrementTick+0x16c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	4915      	ldr	r1, [pc, #84]	; (800cdb0 <xTaskIncrementTick+0x168>)
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	440b      	add	r3, r1
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d907      	bls.n	800cd7c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	e004      	b.n	800cd7c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd72:	4b11      	ldr	r3, [pc, #68]	; (800cdb8 <xTaskIncrementTick+0x170>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3301      	adds	r3, #1
 800cd78:	4a0f      	ldr	r2, [pc, #60]	; (800cdb8 <xTaskIncrementTick+0x170>)
 800cd7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd7c:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <xTaskIncrementTick+0x174>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cd84:	2301      	movs	r3, #1
 800cd86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd88:	697b      	ldr	r3, [r7, #20]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	20001494 	.word	0x20001494
 800cd98:	20001470 	.word	0x20001470
 800cd9c:	20001424 	.word	0x20001424
 800cda0:	20001428 	.word	0x20001428
 800cda4:	20001484 	.word	0x20001484
 800cda8:	2000148c 	.word	0x2000148c
 800cdac:	20001474 	.word	0x20001474
 800cdb0:	20000f9c 	.word	0x20000f9c
 800cdb4:	20000f98 	.word	0x20000f98
 800cdb8:	2000147c 	.word	0x2000147c
 800cdbc:	20001480 	.word	0x20001480

0800cdc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdc6:	4b2b      	ldr	r3, [pc, #172]	; (800ce74 <vTaskSwitchContext+0xb4>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d003      	beq.n	800cdd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdce:	4b2a      	ldr	r3, [pc, #168]	; (800ce78 <vTaskSwitchContext+0xb8>)
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdd4:	e048      	b.n	800ce68 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800cdd6:	4b28      	ldr	r3, [pc, #160]	; (800ce78 <vTaskSwitchContext+0xb8>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cddc:	4b27      	ldr	r3, [pc, #156]	; (800ce7c <vTaskSwitchContext+0xbc>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e012      	b.n	800ce0a <vTaskSwitchContext+0x4a>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10c      	bne.n	800ce04 <vTaskSwitchContext+0x44>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	b672      	cpsid	i
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	b662      	cpsie	i
 800cdfe:	607b      	str	r3, [r7, #4]
}
 800ce00:	bf00      	nop
 800ce02:	e7fe      	b.n	800ce02 <vTaskSwitchContext+0x42>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	60fb      	str	r3, [r7, #12]
 800ce0a:	491d      	ldr	r1, [pc, #116]	; (800ce80 <vTaskSwitchContext+0xc0>)
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	440b      	add	r3, r1
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d0e2      	beq.n	800cde4 <vTaskSwitchContext+0x24>
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	4613      	mov	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	4a15      	ldr	r2, [pc, #84]	; (800ce80 <vTaskSwitchContext+0xc0>)
 800ce2a:	4413      	add	r3, r2
 800ce2c:	60bb      	str	r3, [r7, #8]
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	605a      	str	r2, [r3, #4]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	3308      	adds	r3, #8
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d104      	bne.n	800ce4e <vTaskSwitchContext+0x8e>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	685a      	ldr	r2, [r3, #4]
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	605a      	str	r2, [r3, #4]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	4a0b      	ldr	r2, [pc, #44]	; (800ce84 <vTaskSwitchContext+0xc4>)
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	4a08      	ldr	r2, [pc, #32]	; (800ce7c <vTaskSwitchContext+0xbc>)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce5e:	4b09      	ldr	r3, [pc, #36]	; (800ce84 <vTaskSwitchContext+0xc4>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3354      	adds	r3, #84	; 0x54
 800ce64:	4a08      	ldr	r2, [pc, #32]	; (800ce88 <vTaskSwitchContext+0xc8>)
 800ce66:	6013      	str	r3, [r2, #0]
}
 800ce68:	bf00      	nop
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr
 800ce74:	20001494 	.word	0x20001494
 800ce78:	20001480 	.word	0x20001480
 800ce7c:	20001474 	.word	0x20001474
 800ce80:	20000f9c 	.word	0x20000f9c
 800ce84:	20000f98 	.word	0x20000f98
 800ce88:	20000014 	.word	0x20000014

0800ce8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10c      	bne.n	800ceb6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	b672      	cpsid	i
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	b662      	cpsie	i
 800ceb0:	60fb      	str	r3, [r7, #12]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ceb6:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <vTaskPlaceOnEventList+0x48>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3318      	adds	r3, #24
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fe f991 	bl	800b1e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cec4:	2101      	movs	r1, #1
 800cec6:	6838      	ldr	r0, [r7, #0]
 800cec8:	f000 fba2 	bl	800d610 <prvAddCurrentTaskToDelayedList>
}
 800cecc:	bf00      	nop
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	20000f98 	.word	0x20000f98

0800ced8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b086      	sub	sp, #24
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10c      	bne.n	800cf04 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	b672      	cpsid	i
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	b662      	cpsie	i
 800cefe:	617b      	str	r3, [r7, #20]
}
 800cf00:	bf00      	nop
 800cf02:	e7fe      	b.n	800cf02 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <vTaskPlaceOnEventListRestricted+0x58>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	3318      	adds	r3, #24
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f7fe f946 	bl	800b19e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	68b8      	ldr	r0, [r7, #8]
 800cf22:	f000 fb75 	bl	800d610 <prvAddCurrentTaskToDelayedList>
	}
 800cf26:	bf00      	nop
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20000f98 	.word	0x20000f98

0800cf34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10c      	bne.n	800cf64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	b672      	cpsid	i
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	b662      	cpsie	i
 800cf5e:	60fb      	str	r3, [r7, #12]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	3318      	adds	r3, #24
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe f975 	bl	800b258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf6e:	4b1e      	ldr	r3, [pc, #120]	; (800cfe8 <xTaskRemoveFromEventList+0xb4>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d11d      	bne.n	800cfb2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe f96c 	bl	800b258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf84:	4b19      	ldr	r3, [pc, #100]	; (800cfec <xTaskRemoveFromEventList+0xb8>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d903      	bls.n	800cf94 <xTaskRemoveFromEventList+0x60>
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf90:	4a16      	ldr	r2, [pc, #88]	; (800cfec <xTaskRemoveFromEventList+0xb8>)
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf98:	4613      	mov	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	4413      	add	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4a13      	ldr	r2, [pc, #76]	; (800cff0 <xTaskRemoveFromEventList+0xbc>)
 800cfa2:	441a      	add	r2, r3
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	4610      	mov	r0, r2
 800cfac:	f7fe f8f7 	bl	800b19e <vListInsertEnd>
 800cfb0:	e005      	b.n	800cfbe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	3318      	adds	r3, #24
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	480e      	ldr	r0, [pc, #56]	; (800cff4 <xTaskRemoveFromEventList+0xc0>)
 800cfba:	f7fe f8f0 	bl	800b19e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc2:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <xTaskRemoveFromEventList+0xc4>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d905      	bls.n	800cfd8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <xTaskRemoveFromEventList+0xc8>)
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	e001      	b.n	800cfdc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfdc:	697b      	ldr	r3, [r7, #20]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20001494 	.word	0x20001494
 800cfec:	20001474 	.word	0x20001474
 800cff0:	20000f9c 	.word	0x20000f9c
 800cff4:	2000142c 	.word	0x2000142c
 800cff8:	20000f98 	.word	0x20000f98
 800cffc:	20001480 	.word	0x20001480

0800d000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d008:	4b06      	ldr	r3, [pc, #24]	; (800d024 <vTaskInternalSetTimeOutState+0x24>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <vTaskInternalSetTimeOutState+0x28>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	605a      	str	r2, [r3, #4]
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	20001484 	.word	0x20001484
 800d028:	20001470 	.word	0x20001470

0800d02c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10c      	bne.n	800d056 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	b672      	cpsid	i
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	b662      	cpsie	i
 800d050:	613b      	str	r3, [r7, #16]
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10c      	bne.n	800d076 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	b672      	cpsid	i
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	b662      	cpsie	i
 800d070:	60fb      	str	r3, [r7, #12]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d076:	f001 f849 	bl	800e10c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d07a:	4b1d      	ldr	r3, [pc, #116]	; (800d0f0 <xTaskCheckForTimeOut+0xc4>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d102      	bne.n	800d09a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d094:	2300      	movs	r3, #0
 800d096:	61fb      	str	r3, [r7, #28]
 800d098:	e023      	b.n	800d0e2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <xTaskCheckForTimeOut+0xc8>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d007      	beq.n	800d0b6 <xTaskCheckForTimeOut+0x8a>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	69ba      	ldr	r2, [r7, #24]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d302      	bcc.n	800d0b6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	61fb      	str	r3, [r7, #28]
 800d0b4:	e015      	b.n	800d0e2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d20b      	bcs.n	800d0d8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	1ad2      	subs	r2, r2, r3
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff ff97 	bl	800d000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	61fb      	str	r3, [r7, #28]
 800d0d6:	e004      	b.n	800d0e2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0e2:	f001 f847 	bl	800e174 <vPortExitCritical>

	return xReturn;
 800d0e6:	69fb      	ldr	r3, [r7, #28]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3720      	adds	r7, #32
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20001470 	.word	0x20001470
 800d0f4:	20001484 	.word	0x20001484

0800d0f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0fc:	4b03      	ldr	r3, [pc, #12]	; (800d10c <vTaskMissedYield+0x14>)
 800d0fe:	2201      	movs	r2, #1
 800d100:	601a      	str	r2, [r3, #0]
}
 800d102:	bf00      	nop
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	20001480 	.word	0x20001480

0800d110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d118:	f000 f854 	bl	800d1c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d11c:	4b07      	ldr	r3, [pc, #28]	; (800d13c <prvIdleTask+0x2c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b01      	cmp	r3, #1
 800d122:	d907      	bls.n	800d134 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d124:	4b06      	ldr	r3, [pc, #24]	; (800d140 <prvIdleTask+0x30>)
 800d126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d134:	f7f5 f840 	bl	80021b8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d138:	e7ee      	b.n	800d118 <prvIdleTask+0x8>
 800d13a:	bf00      	nop
 800d13c:	20000f9c 	.word	0x20000f9c
 800d140:	e000ed04 	.word	0xe000ed04

0800d144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d14a:	2300      	movs	r3, #0
 800d14c:	607b      	str	r3, [r7, #4]
 800d14e:	e00c      	b.n	800d16a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a12      	ldr	r2, [pc, #72]	; (800d1a4 <prvInitialiseTaskLists+0x60>)
 800d15c:	4413      	add	r3, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd fff0 	bl	800b144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3301      	adds	r3, #1
 800d168:	607b      	str	r3, [r7, #4]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b37      	cmp	r3, #55	; 0x37
 800d16e:	d9ef      	bls.n	800d150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d170:	480d      	ldr	r0, [pc, #52]	; (800d1a8 <prvInitialiseTaskLists+0x64>)
 800d172:	f7fd ffe7 	bl	800b144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d176:	480d      	ldr	r0, [pc, #52]	; (800d1ac <prvInitialiseTaskLists+0x68>)
 800d178:	f7fd ffe4 	bl	800b144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d17c:	480c      	ldr	r0, [pc, #48]	; (800d1b0 <prvInitialiseTaskLists+0x6c>)
 800d17e:	f7fd ffe1 	bl	800b144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d182:	480c      	ldr	r0, [pc, #48]	; (800d1b4 <prvInitialiseTaskLists+0x70>)
 800d184:	f7fd ffde 	bl	800b144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d188:	480b      	ldr	r0, [pc, #44]	; (800d1b8 <prvInitialiseTaskLists+0x74>)
 800d18a:	f7fd ffdb 	bl	800b144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d18e:	4b0b      	ldr	r3, [pc, #44]	; (800d1bc <prvInitialiseTaskLists+0x78>)
 800d190:	4a05      	ldr	r2, [pc, #20]	; (800d1a8 <prvInitialiseTaskLists+0x64>)
 800d192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d194:	4b0a      	ldr	r3, [pc, #40]	; (800d1c0 <prvInitialiseTaskLists+0x7c>)
 800d196:	4a05      	ldr	r2, [pc, #20]	; (800d1ac <prvInitialiseTaskLists+0x68>)
 800d198:	601a      	str	r2, [r3, #0]
}
 800d19a:	bf00      	nop
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20000f9c 	.word	0x20000f9c
 800d1a8:	200013fc 	.word	0x200013fc
 800d1ac:	20001410 	.word	0x20001410
 800d1b0:	2000142c 	.word	0x2000142c
 800d1b4:	20001440 	.word	0x20001440
 800d1b8:	20001458 	.word	0x20001458
 800d1bc:	20001424 	.word	0x20001424
 800d1c0:	20001428 	.word	0x20001428

0800d1c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1ca:	e019      	b.n	800d200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1cc:	f000 ff9e 	bl	800e10c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d0:	4b10      	ldr	r3, [pc, #64]	; (800d214 <prvCheckTasksWaitingTermination+0x50>)
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe f83b 	bl	800b258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1e2:	4b0d      	ldr	r3, [pc, #52]	; (800d218 <prvCheckTasksWaitingTermination+0x54>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	4a0b      	ldr	r2, [pc, #44]	; (800d218 <prvCheckTasksWaitingTermination+0x54>)
 800d1ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1ec:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <prvCheckTasksWaitingTermination+0x58>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	4a0a      	ldr	r2, [pc, #40]	; (800d21c <prvCheckTasksWaitingTermination+0x58>)
 800d1f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1f6:	f000 ffbd 	bl	800e174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f810 	bl	800d220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d200:	4b06      	ldr	r3, [pc, #24]	; (800d21c <prvCheckTasksWaitingTermination+0x58>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e1      	bne.n	800d1cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d208:	bf00      	nop
 800d20a:	bf00      	nop
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20001440 	.word	0x20001440
 800d218:	2000146c 	.word	0x2000146c
 800d21c:	20001454 	.word	0x20001454

0800d220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	3354      	adds	r3, #84	; 0x54
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fad1 	bl	800e7d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d108      	bne.n	800d24e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d240:	4618      	mov	r0, r3
 800d242:	f001 f959 	bl	800e4f8 <vPortFree>
				vPortFree( pxTCB );
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f001 f956 	bl	800e4f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d24c:	e01a      	b.n	800d284 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d254:	2b01      	cmp	r3, #1
 800d256:	d103      	bne.n	800d260 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f001 f94d 	bl	800e4f8 <vPortFree>
	}
 800d25e:	e011      	b.n	800d284 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d266:	2b02      	cmp	r3, #2
 800d268:	d00c      	beq.n	800d284 <prvDeleteTCB+0x64>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	b672      	cpsid	i
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	b662      	cpsie	i
 800d27e:	60fb      	str	r3, [r7, #12]
}
 800d280:	bf00      	nop
 800d282:	e7fe      	b.n	800d282 <prvDeleteTCB+0x62>
	}
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d292:	4b0c      	ldr	r3, [pc, #48]	; (800d2c4 <prvResetNextTaskUnblockTime+0x38>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d104      	bne.n	800d2a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d29c:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d29e:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2a4:	e008      	b.n	800d2b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2a6:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <prvResetNextTaskUnblockTime+0x38>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	4a04      	ldr	r2, [pc, #16]	; (800d2c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d2b6:	6013      	str	r3, [r2, #0]
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	20001424 	.word	0x20001424
 800d2c8:	2000148c 	.word	0x2000148c

0800d2cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d2d2:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <xTaskGetCurrentTaskHandle+0x1c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d2d8:	687b      	ldr	r3, [r7, #4]
	}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	20000f98 	.word	0x20000f98

0800d2ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2f2:	4b0b      	ldr	r3, [pc, #44]	; (800d320 <xTaskGetSchedulerState+0x34>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d102      	bne.n	800d300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	607b      	str	r3, [r7, #4]
 800d2fe:	e008      	b.n	800d312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d300:	4b08      	ldr	r3, [pc, #32]	; (800d324 <xTaskGetSchedulerState+0x38>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d308:	2302      	movs	r3, #2
 800d30a:	607b      	str	r3, [r7, #4]
 800d30c:	e001      	b.n	800d312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d30e:	2300      	movs	r3, #0
 800d310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d312:	687b      	ldr	r3, [r7, #4]
	}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	20001478 	.word	0x20001478
 800d324:	20001494 	.word	0x20001494

0800d328 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d334:	2300      	movs	r3, #0
 800d336:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d051      	beq.n	800d3e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d342:	4b2a      	ldr	r3, [pc, #168]	; (800d3ec <xTaskPriorityInherit+0xc4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	429a      	cmp	r2, r3
 800d34a:	d241      	bcs.n	800d3d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	699b      	ldr	r3, [r3, #24]
 800d350:	2b00      	cmp	r3, #0
 800d352:	db06      	blt.n	800d362 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d354:	4b25      	ldr	r3, [pc, #148]	; (800d3ec <xTaskPriorityInherit+0xc4>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	6959      	ldr	r1, [r3, #20]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4a1f      	ldr	r2, [pc, #124]	; (800d3f0 <xTaskPriorityInherit+0xc8>)
 800d374:	4413      	add	r3, r2
 800d376:	4299      	cmp	r1, r3
 800d378:	d122      	bne.n	800d3c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fd ff6a 	bl	800b258 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d384:	4b19      	ldr	r3, [pc, #100]	; (800d3ec <xTaskPriorityInherit+0xc4>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d392:	4b18      	ldr	r3, [pc, #96]	; (800d3f4 <xTaskPriorityInherit+0xcc>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d903      	bls.n	800d3a2 <xTaskPriorityInherit+0x7a>
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39e:	4a15      	ldr	r2, [pc, #84]	; (800d3f4 <xTaskPriorityInherit+0xcc>)
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4a10      	ldr	r2, [pc, #64]	; (800d3f0 <xTaskPriorityInherit+0xc8>)
 800d3b0:	441a      	add	r2, r3
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f7fd fef0 	bl	800b19e <vListInsertEnd>
 800d3be:	e004      	b.n	800d3ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3c0:	4b0a      	ldr	r3, [pc, #40]	; (800d3ec <xTaskPriorityInherit+0xc4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	e008      	b.n	800d3e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3d4:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <xTaskPriorityInherit+0xc4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d201      	bcs.n	800d3e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	20000f98 	.word	0x20000f98
 800d3f0:	20000f9c 	.word	0x20000f9c
 800d3f4:	20001474 	.word	0x20001474

0800d3f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d404:	2300      	movs	r3, #0
 800d406:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d05a      	beq.n	800d4c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d40e:	4b30      	ldr	r3, [pc, #192]	; (800d4d0 <xTaskPriorityDisinherit+0xd8>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	693a      	ldr	r2, [r7, #16]
 800d414:	429a      	cmp	r2, r3
 800d416:	d00c      	beq.n	800d432 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41c:	b672      	cpsid	i
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	b662      	cpsie	i
 800d42c:	60fb      	str	r3, [r7, #12]
}
 800d42e:	bf00      	nop
 800d430:	e7fe      	b.n	800d430 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10c      	bne.n	800d454 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	b672      	cpsid	i
 800d440:	f383 8811 	msr	BASEPRI, r3
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	b662      	cpsie	i
 800d44e:	60bb      	str	r3, [r7, #8]
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d458:	1e5a      	subs	r2, r3, #1
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d466:	429a      	cmp	r2, r3
 800d468:	d02c      	beq.n	800d4c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d128      	bne.n	800d4c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	3304      	adds	r3, #4
 800d476:	4618      	mov	r0, r3
 800d478:	f7fd feee 	bl	800b258 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d488:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d494:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <xTaskPriorityDisinherit+0xdc>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d903      	bls.n	800d4a4 <xTaskPriorityDisinherit+0xac>
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a0:	4a0c      	ldr	r2, [pc, #48]	; (800d4d4 <xTaskPriorityDisinherit+0xdc>)
 800d4a2:	6013      	str	r3, [r2, #0]
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4a09      	ldr	r2, [pc, #36]	; (800d4d8 <xTaskPriorityDisinherit+0xe0>)
 800d4b2:	441a      	add	r2, r3
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	f7fd fe6f 	bl	800b19e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4c4:	697b      	ldr	r3, [r7, #20]
	}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20000f98 	.word	0x20000f98
 800d4d4:	20001474 	.word	0x20001474
 800d4d8:	20000f9c 	.word	0x20000f9c

0800d4dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b088      	sub	sp, #32
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d06e      	beq.n	800d5d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10c      	bne.n	800d516 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	b672      	cpsid	i
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	b662      	cpsie	i
 800d510:	60fb      	str	r3, [r7, #12]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d902      	bls.n	800d526 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	61fb      	str	r3, [r7, #28]
 800d524:	e002      	b.n	800d52c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d52a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d530:	69fa      	ldr	r2, [r7, #28]
 800d532:	429a      	cmp	r2, r3
 800d534:	d04d      	beq.n	800d5d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d53a:	697a      	ldr	r2, [r7, #20]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d148      	bne.n	800d5d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d540:	4b26      	ldr	r3, [pc, #152]	; (800d5dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	429a      	cmp	r2, r3
 800d548:	d10c      	bne.n	800d564 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	b672      	cpsid	i
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	b662      	cpsie	i
 800d55e:	60bb      	str	r3, [r7, #8]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	69fa      	ldr	r2, [r7, #28]
 800d56e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	2b00      	cmp	r3, #0
 800d576:	db04      	blt.n	800d582 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	6959      	ldr	r1, [r3, #20]
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	4613      	mov	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4a13      	ldr	r2, [pc, #76]	; (800d5e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d592:	4413      	add	r3, r2
 800d594:	4299      	cmp	r1, r3
 800d596:	d11c      	bne.n	800d5d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fd fe5b 	bl	800b258 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a6:	4b0f      	ldr	r3, [pc, #60]	; (800d5e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d903      	bls.n	800d5b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b2:	4a0c      	ldr	r2, [pc, #48]	; (800d5e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4a07      	ldr	r2, [pc, #28]	; (800d5e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d5c4:	441a      	add	r2, r3
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f7fd fde6 	bl	800b19e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5d2:	bf00      	nop
 800d5d4:	3720      	adds	r7, #32
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	20000f98 	.word	0x20000f98
 800d5e0:	20000f9c 	.word	0x20000f9c
 800d5e4:	20001474 	.word	0x20001474

0800d5e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5e8:	b480      	push	{r7}
 800d5ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5ec:	4b07      	ldr	r3, [pc, #28]	; (800d60c <pvTaskIncrementMutexHeldCount+0x24>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d004      	beq.n	800d5fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <pvTaskIncrementMutexHeldCount+0x24>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5fa:	3201      	adds	r2, #1
 800d5fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d5fe:	4b03      	ldr	r3, [pc, #12]	; (800d60c <pvTaskIncrementMutexHeldCount+0x24>)
 800d600:	681b      	ldr	r3, [r3, #0]
	}
 800d602:	4618      	mov	r0, r3
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	20000f98 	.word	0x20000f98

0800d610 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d61a:	4b21      	ldr	r3, [pc, #132]	; (800d6a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d620:	4b20      	ldr	r3, [pc, #128]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3304      	adds	r3, #4
 800d626:	4618      	mov	r0, r3
 800d628:	f7fd fe16 	bl	800b258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d632:	d10a      	bne.n	800d64a <prvAddCurrentTaskToDelayedList+0x3a>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d63a:	4b1a      	ldr	r3, [pc, #104]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3304      	adds	r3, #4
 800d640:	4619      	mov	r1, r3
 800d642:	4819      	ldr	r0, [pc, #100]	; (800d6a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d644:	f7fd fdab 	bl	800b19e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d648:	e026      	b.n	800d698 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4413      	add	r3, r2
 800d650:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d652:	4b14      	ldr	r3, [pc, #80]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d209      	bcs.n	800d676 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d662:	4b12      	ldr	r3, [pc, #72]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	3304      	adds	r3, #4
 800d66c:	4619      	mov	r1, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	f7fd fdb9 	bl	800b1e6 <vListInsert>
}
 800d674:	e010      	b.n	800d698 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d676:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	3304      	adds	r3, #4
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	f7fd fdaf 	bl	800b1e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d688:	4b0a      	ldr	r3, [pc, #40]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d202      	bcs.n	800d698 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d692:	4a08      	ldr	r2, [pc, #32]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	6013      	str	r3, [r2, #0]
}
 800d698:	bf00      	nop
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20001470 	.word	0x20001470
 800d6a4:	20000f98 	.word	0x20000f98
 800d6a8:	20001458 	.word	0x20001458
 800d6ac:	20001428 	.word	0x20001428
 800d6b0:	20001424 	.word	0x20001424
 800d6b4:	2000148c 	.word	0x2000148c

0800d6b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08a      	sub	sp, #40	; 0x28
 800d6bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6c2:	f000 fbb5 	bl	800de30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6c6:	4b1d      	ldr	r3, [pc, #116]	; (800d73c <xTimerCreateTimerTask+0x84>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d021      	beq.n	800d712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6d6:	1d3a      	adds	r2, r7, #4
 800d6d8:	f107 0108 	add.w	r1, r7, #8
 800d6dc:	f107 030c 	add.w	r3, r7, #12
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fd fd15 	bl	800b110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	9202      	str	r2, [sp, #8]
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	460a      	mov	r2, r1
 800d6f8:	4911      	ldr	r1, [pc, #68]	; (800d740 <xTimerCreateTimerTask+0x88>)
 800d6fa:	4812      	ldr	r0, [pc, #72]	; (800d744 <xTimerCreateTimerTask+0x8c>)
 800d6fc:	f7fe fee6 	bl	800c4cc <xTaskCreateStatic>
 800d700:	4603      	mov	r3, r0
 800d702:	4a11      	ldr	r2, [pc, #68]	; (800d748 <xTimerCreateTimerTask+0x90>)
 800d704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d706:	4b10      	ldr	r3, [pc, #64]	; (800d748 <xTimerCreateTimerTask+0x90>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d70e:	2301      	movs	r3, #1
 800d710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10c      	bne.n	800d732 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	b672      	cpsid	i
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	b662      	cpsie	i
 800d72c:	613b      	str	r3, [r7, #16]
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d732:	697b      	ldr	r3, [r7, #20]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	200014c8 	.word	0x200014c8
 800d740:	0800eea8 	.word	0x0800eea8
 800d744:	0800d9c9 	.word	0x0800d9c9
 800d748:	200014cc 	.word	0x200014cc

0800d74c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af02      	add	r7, sp, #8
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d75a:	202c      	movs	r0, #44	; 0x2c
 800d75c:	f000 fe02 	bl	800e364 <pvPortMalloc>
 800d760:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d00d      	beq.n	800d784 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	6a3b      	ldr	r3, [r7, #32]
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	68b9      	ldr	r1, [r7, #8]
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f000 f847 	bl	800d812 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d784:	697b      	ldr	r3, [r7, #20]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	3718      	adds	r7, #24
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b08a      	sub	sp, #40	; 0x28
 800d792:	af02      	add	r7, sp, #8
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	607a      	str	r2, [r7, #4]
 800d79a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d79c:	232c      	movs	r3, #44	; 0x2c
 800d79e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b2c      	cmp	r3, #44	; 0x2c
 800d7a4:	d00c      	beq.n	800d7c0 <xTimerCreateStatic+0x32>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	b672      	cpsid	i
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	b662      	cpsie	i
 800d7ba:	61bb      	str	r3, [r7, #24]
}
 800d7bc:	bf00      	nop
 800d7be:	e7fe      	b.n	800d7be <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10c      	bne.n	800d7e2 <xTimerCreateStatic+0x54>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	b672      	cpsid	i
 800d7ce:	f383 8811 	msr	BASEPRI, r3
 800d7d2:	f3bf 8f6f 	isb	sy
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	b662      	cpsie	i
 800d7dc:	617b      	str	r3, [r7, #20]
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00d      	beq.n	800d808 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f000 f805 	bl	800d812 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d808:	69fb      	ldr	r3, [r7, #28]
	}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b086      	sub	sp, #24
 800d816:	af00      	add	r7, sp, #0
 800d818:	60f8      	str	r0, [r7, #12]
 800d81a:	60b9      	str	r1, [r7, #8]
 800d81c:	607a      	str	r2, [r7, #4]
 800d81e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10c      	bne.n	800d840 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82a:	b672      	cpsid	i
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	b662      	cpsie	i
 800d83a:	617b      	str	r3, [r7, #20]
}
 800d83c:	bf00      	nop
 800d83e:	e7fe      	b.n	800d83e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	2b00      	cmp	r3, #0
 800d844:	d01e      	beq.n	800d884 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d846:	f000 faf3 	bl	800de30 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	6a3a      	ldr	r2, [r7, #32]
 800d860:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	3304      	adds	r3, #4
 800d866:	4618      	mov	r0, r3
 800d868:	f7fd fc8c 	bl	800b184 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d008      	beq.n	800d884 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d878:	f043 0304 	orr.w	r3, r3, #4
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d884:	bf00      	nop
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	; 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10c      	bne.n	800d8be <xTimerGenericCommand+0x32>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a8:	b672      	cpsid	i
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	b662      	cpsie	i
 800d8b8:	623b      	str	r3, [r7, #32]
}
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d8be:	4b1a      	ldr	r3, [pc, #104]	; (800d928 <xTimerGenericCommand+0x9c>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d02a      	beq.n	800d91c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2b05      	cmp	r3, #5
 800d8d6:	dc18      	bgt.n	800d90a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d8d8:	f7ff fd08 	bl	800d2ec <xTaskGetSchedulerState>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d109      	bne.n	800d8f6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d8e2:	4b11      	ldr	r3, [pc, #68]	; (800d928 <xTimerGenericCommand+0x9c>)
 800d8e4:	6818      	ldr	r0, [r3, #0]
 800d8e6:	f107 0110 	add.w	r1, r7, #16
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ee:	f7fd ff5b 	bl	800b7a8 <xQueueGenericSend>
 800d8f2:	6278      	str	r0, [r7, #36]	; 0x24
 800d8f4:	e012      	b.n	800d91c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <xTimerGenericCommand+0x9c>)
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	f107 0110 	add.w	r1, r7, #16
 800d8fe:	2300      	movs	r3, #0
 800d900:	2200      	movs	r2, #0
 800d902:	f7fd ff51 	bl	800b7a8 <xQueueGenericSend>
 800d906:	6278      	str	r0, [r7, #36]	; 0x24
 800d908:	e008      	b.n	800d91c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d90a:	4b07      	ldr	r3, [pc, #28]	; (800d928 <xTimerGenericCommand+0x9c>)
 800d90c:	6818      	ldr	r0, [r3, #0]
 800d90e:	f107 0110 	add.w	r1, r7, #16
 800d912:	2300      	movs	r3, #0
 800d914:	683a      	ldr	r2, [r7, #0]
 800d916:	f7fe f84d 	bl	800b9b4 <xQueueGenericSendFromISR>
 800d91a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3728      	adds	r7, #40	; 0x28
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	200014c8 	.word	0x200014c8

0800d92c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b088      	sub	sp, #32
 800d930:	af02      	add	r7, sp, #8
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d936:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <prvProcessExpiredTimer+0x98>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	3304      	adds	r3, #4
 800d944:	4618      	mov	r0, r3
 800d946:	f7fd fc87 	bl	800b258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d950:	f003 0304 	and.w	r3, r3, #4
 800d954:	2b00      	cmp	r3, #0
 800d956:	d024      	beq.n	800d9a2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	699a      	ldr	r2, [r3, #24]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	18d1      	adds	r1, r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	6978      	ldr	r0, [r7, #20]
 800d966:	f000 f8d3 	bl	800db10 <prvInsertTimerInActiveList>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d021      	beq.n	800d9b4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d970:	2300      	movs	r3, #0
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	2300      	movs	r3, #0
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	2100      	movs	r1, #0
 800d97a:	6978      	ldr	r0, [r7, #20]
 800d97c:	f7ff ff86 	bl	800d88c <xTimerGenericCommand>
 800d980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d115      	bne.n	800d9b4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	b672      	cpsid	i
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	b662      	cpsie	i
 800d99c:	60fb      	str	r3, [r7, #12]
}
 800d99e:	bf00      	nop
 800d9a0:	e7fe      	b.n	800d9a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9a8:	f023 0301 	bic.w	r3, r3, #1
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	6978      	ldr	r0, [r7, #20]
 800d9ba:	4798      	blx	r3
}
 800d9bc:	bf00      	nop
 800d9be:	3718      	adds	r7, #24
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	200014c0 	.word	0x200014c0

0800d9c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9d0:	f107 0308 	add.w	r3, r7, #8
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 f857 	bl	800da88 <prvGetNextExpireTime>
 800d9da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f000 f803 	bl	800d9ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d9e6:	f000 f8d5 	bl	800db94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9ea:	e7f1      	b.n	800d9d0 <prvTimerTask+0x8>

0800d9ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d9f6:	f7ff f857 	bl	800caa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9fa:	f107 0308 	add.w	r3, r7, #8
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 f866 	bl	800dad0 <prvSampleTimeNow>
 800da04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d130      	bne.n	800da6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10a      	bne.n	800da28 <prvProcessTimerOrBlockTask+0x3c>
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	429a      	cmp	r2, r3
 800da18:	d806      	bhi.n	800da28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da1a:	f7ff f853 	bl	800cac4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da1e:	68f9      	ldr	r1, [r7, #12]
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff ff83 	bl	800d92c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da26:	e024      	b.n	800da72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d008      	beq.n	800da40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da2e:	4b13      	ldr	r3, [pc, #76]	; (800da7c <prvProcessTimerOrBlockTask+0x90>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <prvProcessTimerOrBlockTask+0x50>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <prvProcessTimerOrBlockTask+0x52>
 800da3c:	2300      	movs	r3, #0
 800da3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <prvProcessTimerOrBlockTask+0x94>)
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4619      	mov	r1, r3
 800da4e:	f7fe fd09 	bl	800c464 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da52:	f7ff f837 	bl	800cac4 <xTaskResumeAll>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da5c:	4b09      	ldr	r3, [pc, #36]	; (800da84 <prvProcessTimerOrBlockTask+0x98>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	f3bf 8f6f 	isb	sy
}
 800da6c:	e001      	b.n	800da72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da6e:	f7ff f829 	bl	800cac4 <xTaskResumeAll>
}
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	200014c4 	.word	0x200014c4
 800da80:	200014c8 	.word	0x200014c8
 800da84:	e000ed04 	.word	0xe000ed04

0800da88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da90:	4b0e      	ldr	r3, [pc, #56]	; (800dacc <prvGetNextExpireTime+0x44>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <prvGetNextExpireTime+0x16>
 800da9a:	2201      	movs	r2, #1
 800da9c:	e000      	b.n	800daa0 <prvGetNextExpireTime+0x18>
 800da9e:	2200      	movs	r2, #0
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d105      	bne.n	800dab8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800daac:	4b07      	ldr	r3, [pc, #28]	; (800dacc <prvGetNextExpireTime+0x44>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	60fb      	str	r3, [r7, #12]
 800dab6:	e001      	b.n	800dabc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dab8:	2300      	movs	r3, #0
 800daba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dabc:	68fb      	ldr	r3, [r7, #12]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3714      	adds	r7, #20
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	200014c0 	.word	0x200014c0

0800dad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dad8:	f7ff f894 	bl	800cc04 <xTaskGetTickCount>
 800dadc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dade:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <prvSampleTimeNow+0x3c>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d205      	bcs.n	800daf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dae8:	f000 f93c 	bl	800dd64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	e002      	b.n	800dafa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dafa:	4a04      	ldr	r2, [pc, #16]	; (800db0c <prvSampleTimeNow+0x3c>)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db00:	68fb      	ldr	r3, [r7, #12]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	200014d0 	.word	0x200014d0

0800db10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
 800db1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db1e:	2300      	movs	r3, #0
 800db20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	429a      	cmp	r2, r3
 800db34:	d812      	bhi.n	800db5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	1ad2      	subs	r2, r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	429a      	cmp	r2, r3
 800db42:	d302      	bcc.n	800db4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db44:	2301      	movs	r3, #1
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	e01b      	b.n	800db82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db4a:	4b10      	ldr	r3, [pc, #64]	; (800db8c <prvInsertTimerInActiveList+0x7c>)
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	3304      	adds	r3, #4
 800db52:	4619      	mov	r1, r3
 800db54:	4610      	mov	r0, r2
 800db56:	f7fd fb46 	bl	800b1e6 <vListInsert>
 800db5a:	e012      	b.n	800db82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	429a      	cmp	r2, r3
 800db62:	d206      	bcs.n	800db72 <prvInsertTimerInActiveList+0x62>
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d302      	bcc.n	800db72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db6c:	2301      	movs	r3, #1
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	e007      	b.n	800db82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db72:	4b07      	ldr	r3, [pc, #28]	; (800db90 <prvInsertTimerInActiveList+0x80>)
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	3304      	adds	r3, #4
 800db7a:	4619      	mov	r1, r3
 800db7c:	4610      	mov	r0, r2
 800db7e:	f7fd fb32 	bl	800b1e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db82:	697b      	ldr	r3, [r7, #20]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3718      	adds	r7, #24
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	200014c4 	.word	0x200014c4
 800db90:	200014c0 	.word	0x200014c0

0800db94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08e      	sub	sp, #56	; 0x38
 800db98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db9a:	e0d0      	b.n	800dd3e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	da1a      	bge.n	800dbd8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dba2:	1d3b      	adds	r3, r7, #4
 800dba4:	3304      	adds	r3, #4
 800dba6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10c      	bne.n	800dbc8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	b672      	cpsid	i
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	b662      	cpsie	i
 800dbc2:	61fb      	str	r3, [r7, #28]
}
 800dbc4:	bf00      	nop
 800dbc6:	e7fe      	b.n	800dbc6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbce:	6850      	ldr	r0, [r2, #4]
 800dbd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd2:	6892      	ldr	r2, [r2, #8]
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f2c0 80ae 	blt.w	800dd3c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d004      	beq.n	800dbf6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	3304      	adds	r3, #4
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fd fb31 	bl	800b258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff ff69 	bl	800dad0 <prvSampleTimeNow>
 800dbfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b09      	cmp	r3, #9
 800dc04:	f200 809b 	bhi.w	800dd3e <prvProcessReceivedCommands+0x1aa>
 800dc08:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <prvProcessReceivedCommands+0x7c>)
 800dc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0e:	bf00      	nop
 800dc10:	0800dc39 	.word	0x0800dc39
 800dc14:	0800dc39 	.word	0x0800dc39
 800dc18:	0800dc39 	.word	0x0800dc39
 800dc1c:	0800dcb1 	.word	0x0800dcb1
 800dc20:	0800dcc5 	.word	0x0800dcc5
 800dc24:	0800dd13 	.word	0x0800dd13
 800dc28:	0800dc39 	.word	0x0800dc39
 800dc2c:	0800dc39 	.word	0x0800dc39
 800dc30:	0800dcb1 	.word	0x0800dcb1
 800dc34:	0800dcc5 	.word	0x0800dcc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc3e:	f043 0301 	orr.w	r3, r3, #1
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	699b      	ldr	r3, [r3, #24]
 800dc50:	18d1      	adds	r1, r2, r3
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc58:	f7ff ff5a 	bl	800db10 <prvInsertTimerInActiveList>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d06d      	beq.n	800dd3e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	6a1b      	ldr	r3, [r3, #32]
 800dc66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d062      	beq.n	800dd3e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	441a      	add	r2, r3
 800dc80:	2300      	movs	r3, #0
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	2300      	movs	r3, #0
 800dc86:	2100      	movs	r1, #0
 800dc88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc8a:	f7ff fdff 	bl	800d88c <xTimerGenericCommand>
 800dc8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc90:	6a3b      	ldr	r3, [r7, #32]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d153      	bne.n	800dd3e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9a:	b672      	cpsid	i
 800dc9c:	f383 8811 	msr	BASEPRI, r3
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	b662      	cpsie	i
 800dcaa:	61bb      	str	r3, [r7, #24]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcb6:	f023 0301 	bic.w	r3, r3, #1
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dcc2:	e03c      	b.n	800dd3e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcca:	f043 0301 	orr.w	r3, r3, #1
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcde:	699b      	ldr	r3, [r3, #24]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10c      	bne.n	800dcfe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	b672      	cpsid	i
 800dcea:	f383 8811 	msr	BASEPRI, r3
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	b662      	cpsie	i
 800dcf8:	617b      	str	r3, [r7, #20]
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd00:	699a      	ldr	r2, [r3, #24]
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	18d1      	adds	r1, r2, r3
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd0c:	f7ff ff00 	bl	800db10 <prvInsertTimerInActiveList>
					break;
 800dd10:	e015      	b.n	800dd3e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd18:	f003 0302 	and.w	r3, r3, #2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d103      	bne.n	800dd28 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800dd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd22:	f000 fbe9 	bl	800e4f8 <vPortFree>
 800dd26:	e00a      	b.n	800dd3e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd2e:	f023 0301 	bic.w	r3, r3, #1
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd3a:	e000      	b.n	800dd3e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dd3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd3e:	4b08      	ldr	r3, [pc, #32]	; (800dd60 <prvProcessReceivedCommands+0x1cc>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	1d39      	adds	r1, r7, #4
 800dd44:	2200      	movs	r2, #0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fd ff6a 	bl	800bc20 <xQueueReceive>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f47f af24 	bne.w	800db9c <prvProcessReceivedCommands+0x8>
	}
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop
 800dd58:	3730      	adds	r7, #48	; 0x30
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	200014c8 	.word	0x200014c8

0800dd64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b088      	sub	sp, #32
 800dd68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd6a:	e04a      	b.n	800de02 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd6c:	4b2e      	ldr	r3, [pc, #184]	; (800de28 <prvSwitchTimerLists+0xc4>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd76:	4b2c      	ldr	r3, [pc, #176]	; (800de28 <prvSwitchTimerLists+0xc4>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fd fa67 	bl	800b258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6a1b      	ldr	r3, [r3, #32]
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd98:	f003 0304 	and.w	r3, r3, #4
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d030      	beq.n	800de02 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	4413      	add	r3, r2
 800dda8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d90e      	bls.n	800ddd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddbe:	4b1a      	ldr	r3, [pc, #104]	; (800de28 <prvSwitchTimerLists+0xc4>)
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	4610      	mov	r0, r2
 800ddca:	f7fd fa0c 	bl	800b1e6 <vListInsert>
 800ddce:	e018      	b.n	800de02 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	693a      	ldr	r2, [r7, #16]
 800ddd8:	2100      	movs	r1, #0
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f7ff fd56 	bl	800d88c <xTimerGenericCommand>
 800dde0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10c      	bne.n	800de02 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	b672      	cpsid	i
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	b662      	cpsie	i
 800ddfc:	603b      	str	r3, [r7, #0]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de02:	4b09      	ldr	r3, [pc, #36]	; (800de28 <prvSwitchTimerLists+0xc4>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1af      	bne.n	800dd6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <prvSwitchTimerLists+0xc4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de12:	4b06      	ldr	r3, [pc, #24]	; (800de2c <prvSwitchTimerLists+0xc8>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a04      	ldr	r2, [pc, #16]	; (800de28 <prvSwitchTimerLists+0xc4>)
 800de18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de1a:	4a04      	ldr	r2, [pc, #16]	; (800de2c <prvSwitchTimerLists+0xc8>)
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	6013      	str	r3, [r2, #0]
}
 800de20:	bf00      	nop
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	200014c0 	.word	0x200014c0
 800de2c:	200014c4 	.word	0x200014c4

0800de30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de36:	f000 f969 	bl	800e10c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de3a:	4b15      	ldr	r3, [pc, #84]	; (800de90 <prvCheckForValidListAndQueue+0x60>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d120      	bne.n	800de84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de42:	4814      	ldr	r0, [pc, #80]	; (800de94 <prvCheckForValidListAndQueue+0x64>)
 800de44:	f7fd f97e 	bl	800b144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de48:	4813      	ldr	r0, [pc, #76]	; (800de98 <prvCheckForValidListAndQueue+0x68>)
 800de4a:	f7fd f97b 	bl	800b144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de4e:	4b13      	ldr	r3, [pc, #76]	; (800de9c <prvCheckForValidListAndQueue+0x6c>)
 800de50:	4a10      	ldr	r2, [pc, #64]	; (800de94 <prvCheckForValidListAndQueue+0x64>)
 800de52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de54:	4b12      	ldr	r3, [pc, #72]	; (800dea0 <prvCheckForValidListAndQueue+0x70>)
 800de56:	4a10      	ldr	r2, [pc, #64]	; (800de98 <prvCheckForValidListAndQueue+0x68>)
 800de58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de5a:	2300      	movs	r3, #0
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	4b11      	ldr	r3, [pc, #68]	; (800dea4 <prvCheckForValidListAndQueue+0x74>)
 800de60:	4a11      	ldr	r2, [pc, #68]	; (800dea8 <prvCheckForValidListAndQueue+0x78>)
 800de62:	2110      	movs	r1, #16
 800de64:	200a      	movs	r0, #10
 800de66:	f7fd fa8b 	bl	800b380 <xQueueGenericCreateStatic>
 800de6a:	4603      	mov	r3, r0
 800de6c:	4a08      	ldr	r2, [pc, #32]	; (800de90 <prvCheckForValidListAndQueue+0x60>)
 800de6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de70:	4b07      	ldr	r3, [pc, #28]	; (800de90 <prvCheckForValidListAndQueue+0x60>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d005      	beq.n	800de84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de78:	4b05      	ldr	r3, [pc, #20]	; (800de90 <prvCheckForValidListAndQueue+0x60>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	490b      	ldr	r1, [pc, #44]	; (800deac <prvCheckForValidListAndQueue+0x7c>)
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fe fa9c 	bl	800c3bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de84:	f000 f976 	bl	800e174 <vPortExitCritical>
}
 800de88:	bf00      	nop
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	200014c8 	.word	0x200014c8
 800de94:	20001498 	.word	0x20001498
 800de98:	200014ac 	.word	0x200014ac
 800de9c:	200014c0 	.word	0x200014c0
 800dea0:	200014c4 	.word	0x200014c4
 800dea4:	20001574 	.word	0x20001574
 800dea8:	200014d4 	.word	0x200014d4
 800deac:	0800eeb0 	.word	0x0800eeb0

0800deb0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10c      	bne.n	800dedc <pvTimerGetTimerID+0x2c>
	__asm volatile
 800dec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec6:	b672      	cpsid	i
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	b662      	cpsie	i
 800ded6:	60fb      	str	r3, [r7, #12]
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800dedc:	f000 f916 	bl	800e10c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	69db      	ldr	r3, [r3, #28]
 800dee4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dee6:	f000 f945 	bl	800e174 <vPortExitCritical>

	return pvReturn;
 800deea:	693b      	ldr	r3, [r7, #16]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3b04      	subs	r3, #4
 800df04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3b04      	subs	r3, #4
 800df12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	f023 0201 	bic.w	r2, r3, #1
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3b04      	subs	r3, #4
 800df22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df24:	4a0c      	ldr	r2, [pc, #48]	; (800df58 <pxPortInitialiseStack+0x64>)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3b14      	subs	r3, #20
 800df2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3b04      	subs	r3, #4
 800df3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f06f 0202 	mvn.w	r2, #2
 800df42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3b20      	subs	r3, #32
 800df48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df4a:	68fb      	ldr	r3, [r7, #12]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	0800df5d 	.word	0x0800df5d

0800df5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df66:	4b14      	ldr	r3, [pc, #80]	; (800dfb8 <prvTaskExitError+0x5c>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6e:	d00c      	beq.n	800df8a <prvTaskExitError+0x2e>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	b672      	cpsid	i
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	b662      	cpsie	i
 800df84:	60fb      	str	r3, [r7, #12]
}
 800df86:	bf00      	nop
 800df88:	e7fe      	b.n	800df88 <prvTaskExitError+0x2c>
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8e:	b672      	cpsid	i
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	b662      	cpsie	i
 800df9e:	60bb      	str	r3, [r7, #8]
}
 800dfa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfa2:	bf00      	nop
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0fc      	beq.n	800dfa4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfaa:	bf00      	nop
 800dfac:	bf00      	nop
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	20000010 	.word	0x20000010
 800dfbc:	00000000 	.word	0x00000000

0800dfc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfc0:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <pxCurrentTCBConst2>)
 800dfc2:	6819      	ldr	r1, [r3, #0]
 800dfc4:	6808      	ldr	r0, [r1, #0]
 800dfc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfca:	f380 8809 	msr	PSP, r0
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f04f 0000 	mov.w	r0, #0
 800dfd6:	f380 8811 	msr	BASEPRI, r0
 800dfda:	4770      	bx	lr
 800dfdc:	f3af 8000 	nop.w

0800dfe0 <pxCurrentTCBConst2>:
 800dfe0:	20000f98 	.word	0x20000f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop

0800dfe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfe8:	4808      	ldr	r0, [pc, #32]	; (800e00c <prvPortStartFirstTask+0x24>)
 800dfea:	6800      	ldr	r0, [r0, #0]
 800dfec:	6800      	ldr	r0, [r0, #0]
 800dfee:	f380 8808 	msr	MSP, r0
 800dff2:	f04f 0000 	mov.w	r0, #0
 800dff6:	f380 8814 	msr	CONTROL, r0
 800dffa:	b662      	cpsie	i
 800dffc:	b661      	cpsie	f
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	df00      	svc	0
 800e008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e00a:	bf00      	nop
 800e00c:	e000ed08 	.word	0xe000ed08

0800e010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e016:	4b37      	ldr	r3, [pc, #220]	; (800e0f4 <xPortStartScheduler+0xe4>)
 800e018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	22ff      	movs	r2, #255	; 0xff
 800e026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e030:	78fb      	ldrb	r3, [r7, #3]
 800e032:	b2db      	uxtb	r3, r3
 800e034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	4b2f      	ldr	r3, [pc, #188]	; (800e0f8 <xPortStartScheduler+0xe8>)
 800e03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e03e:	4b2f      	ldr	r3, [pc, #188]	; (800e0fc <xPortStartScheduler+0xec>)
 800e040:	2207      	movs	r2, #7
 800e042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e044:	e009      	b.n	800e05a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e046:	4b2d      	ldr	r3, [pc, #180]	; (800e0fc <xPortStartScheduler+0xec>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3b01      	subs	r3, #1
 800e04c:	4a2b      	ldr	r2, [pc, #172]	; (800e0fc <xPortStartScheduler+0xec>)
 800e04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	b2db      	uxtb	r3, r3
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	b2db      	uxtb	r3, r3
 800e058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e05a:	78fb      	ldrb	r3, [r7, #3]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e062:	2b80      	cmp	r3, #128	; 0x80
 800e064:	d0ef      	beq.n	800e046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e066:	4b25      	ldr	r3, [pc, #148]	; (800e0fc <xPortStartScheduler+0xec>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f1c3 0307 	rsb	r3, r3, #7
 800e06e:	2b04      	cmp	r3, #4
 800e070:	d00c      	beq.n	800e08c <xPortStartScheduler+0x7c>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	b672      	cpsid	i
 800e078:	f383 8811 	msr	BASEPRI, r3
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	b662      	cpsie	i
 800e086:	60bb      	str	r3, [r7, #8]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e08c:	4b1b      	ldr	r3, [pc, #108]	; (800e0fc <xPortStartScheduler+0xec>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	021b      	lsls	r3, r3, #8
 800e092:	4a1a      	ldr	r2, [pc, #104]	; (800e0fc <xPortStartScheduler+0xec>)
 800e094:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e096:	4b19      	ldr	r3, [pc, #100]	; (800e0fc <xPortStartScheduler+0xec>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e09e:	4a17      	ldr	r2, [pc, #92]	; (800e0fc <xPortStartScheduler+0xec>)
 800e0a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0aa:	4b15      	ldr	r3, [pc, #84]	; (800e100 <xPortStartScheduler+0xf0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a14      	ldr	r2, [pc, #80]	; (800e100 <xPortStartScheduler+0xf0>)
 800e0b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <xPortStartScheduler+0xf0>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a11      	ldr	r2, [pc, #68]	; (800e100 <xPortStartScheduler+0xf0>)
 800e0bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e0c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0c2:	f000 f8dd 	bl	800e280 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0c6:	4b0f      	ldr	r3, [pc, #60]	; (800e104 <xPortStartScheduler+0xf4>)
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0cc:	f000 f8fc 	bl	800e2c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0d0:	4b0d      	ldr	r3, [pc, #52]	; (800e108 <xPortStartScheduler+0xf8>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a0c      	ldr	r2, [pc, #48]	; (800e108 <xPortStartScheduler+0xf8>)
 800e0d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e0da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0dc:	f7ff ff84 	bl	800dfe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0e0:	f7fe fe6e 	bl	800cdc0 <vTaskSwitchContext>
	prvTaskExitError();
 800e0e4:	f7ff ff3a 	bl	800df5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	e000e400 	.word	0xe000e400
 800e0f8:	200015c4 	.word	0x200015c4
 800e0fc:	200015c8 	.word	0x200015c8
 800e100:	e000ed20 	.word	0xe000ed20
 800e104:	20000010 	.word	0x20000010
 800e108:	e000ef34 	.word	0xe000ef34

0800e10c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e116:	b672      	cpsid	i
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	b662      	cpsie	i
 800e126:	607b      	str	r3, [r7, #4]
}
 800e128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e12a:	4b10      	ldr	r3, [pc, #64]	; (800e16c <vPortEnterCritical+0x60>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	3301      	adds	r3, #1
 800e130:	4a0e      	ldr	r2, [pc, #56]	; (800e16c <vPortEnterCritical+0x60>)
 800e132:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e134:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <vPortEnterCritical+0x60>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d111      	bne.n	800e160 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e13c:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <vPortEnterCritical+0x64>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	b2db      	uxtb	r3, r3
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00c      	beq.n	800e160 <vPortEnterCritical+0x54>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14a:	b672      	cpsid	i
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	b662      	cpsie	i
 800e15a:	603b      	str	r3, [r7, #0]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <vPortEnterCritical+0x52>
	}
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr
 800e16c:	20000010 	.word	0x20000010
 800e170:	e000ed04 	.word	0xe000ed04

0800e174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e17a:	4b13      	ldr	r3, [pc, #76]	; (800e1c8 <vPortExitCritical+0x54>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10c      	bne.n	800e19c <vPortExitCritical+0x28>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	b672      	cpsid	i
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	b662      	cpsie	i
 800e196:	607b      	str	r3, [r7, #4]
}
 800e198:	bf00      	nop
 800e19a:	e7fe      	b.n	800e19a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <vPortExitCritical+0x54>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	4a09      	ldr	r2, [pc, #36]	; (800e1c8 <vPortExitCritical+0x54>)
 800e1a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1a6:	4b08      	ldr	r3, [pc, #32]	; (800e1c8 <vPortExitCritical+0x54>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d105      	bne.n	800e1ba <vPortExitCritical+0x46>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	f383 8811 	msr	BASEPRI, r3
}
 800e1b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1ba:	bf00      	nop
 800e1bc:	370c      	adds	r7, #12
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	20000010 	.word	0x20000010
 800e1cc:	00000000 	.word	0x00000000

0800e1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1d0:	f3ef 8009 	mrs	r0, PSP
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	4b15      	ldr	r3, [pc, #84]	; (800e230 <pxCurrentTCBConst>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	f01e 0f10 	tst.w	lr, #16
 800e1e0:	bf08      	it	eq
 800e1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ea:	6010      	str	r0, [r2, #0]
 800e1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e1f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e1f4:	b672      	cpsid	i
 800e1f6:	f380 8811 	msr	BASEPRI, r0
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	b662      	cpsie	i
 800e204:	f7fe fddc 	bl	800cdc0 <vTaskSwitchContext>
 800e208:	f04f 0000 	mov.w	r0, #0
 800e20c:	f380 8811 	msr	BASEPRI, r0
 800e210:	bc09      	pop	{r0, r3}
 800e212:	6819      	ldr	r1, [r3, #0]
 800e214:	6808      	ldr	r0, [r1, #0]
 800e216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21a:	f01e 0f10 	tst.w	lr, #16
 800e21e:	bf08      	it	eq
 800e220:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e224:	f380 8809 	msr	PSP, r0
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop

0800e230 <pxCurrentTCBConst>:
 800e230:	20000f98 	.word	0x20000f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e234:	bf00      	nop
 800e236:	bf00      	nop

0800e238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e242:	b672      	cpsid	i
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	b662      	cpsie	i
 800e252:	607b      	str	r3, [r7, #4]
}
 800e254:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e256:	f7fe fcf7 	bl	800cc48 <xTaskIncrementTick>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d003      	beq.n	800e268 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e260:	4b06      	ldr	r3, [pc, #24]	; (800e27c <SysTick_Handler+0x44>)
 800e262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	2300      	movs	r3, #0
 800e26a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	f383 8811 	msr	BASEPRI, r3
}
 800e272:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	e000ed04 	.word	0xe000ed04

0800e280 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e280:	b480      	push	{r7}
 800e282:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e284:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <vPortSetupTimerInterrupt+0x34>)
 800e286:	2200      	movs	r2, #0
 800e288:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e28a:	4b0b      	ldr	r3, [pc, #44]	; (800e2b8 <vPortSetupTimerInterrupt+0x38>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e290:	4b0a      	ldr	r3, [pc, #40]	; (800e2bc <vPortSetupTimerInterrupt+0x3c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a0a      	ldr	r2, [pc, #40]	; (800e2c0 <vPortSetupTimerInterrupt+0x40>)
 800e296:	fba2 2303 	umull	r2, r3, r2, r3
 800e29a:	099b      	lsrs	r3, r3, #6
 800e29c:	4a09      	ldr	r2, [pc, #36]	; (800e2c4 <vPortSetupTimerInterrupt+0x44>)
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2a2:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <vPortSetupTimerInterrupt+0x34>)
 800e2a4:	2207      	movs	r2, #7
 800e2a6:	601a      	str	r2, [r3, #0]
}
 800e2a8:	bf00      	nop
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	e000e010 	.word	0xe000e010
 800e2b8:	e000e018 	.word	0xe000e018
 800e2bc:	20000004 	.word	0x20000004
 800e2c0:	10624dd3 	.word	0x10624dd3
 800e2c4:	e000e014 	.word	0xe000e014

0800e2c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2d8 <vPortEnableVFP+0x10>
 800e2cc:	6801      	ldr	r1, [r0, #0]
 800e2ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e2d2:	6001      	str	r1, [r0, #0]
 800e2d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2d6:	bf00      	nop
 800e2d8:	e000ed88 	.word	0xe000ed88

0800e2dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2e2:	f3ef 8305 	mrs	r3, IPSR
 800e2e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b0f      	cmp	r3, #15
 800e2ec:	d916      	bls.n	800e31c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2ee:	4a19      	ldr	r2, [pc, #100]	; (800e354 <vPortValidateInterruptPriority+0x78>)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2f8:	4b17      	ldr	r3, [pc, #92]	; (800e358 <vPortValidateInterruptPriority+0x7c>)
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	7afa      	ldrb	r2, [r7, #11]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d20c      	bcs.n	800e31c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	607b      	str	r3, [r7, #4]
}
 800e318:	bf00      	nop
 800e31a:	e7fe      	b.n	800e31a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <vPortValidateInterruptPriority+0x80>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e324:	4b0e      	ldr	r3, [pc, #56]	; (800e360 <vPortValidateInterruptPriority+0x84>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d90c      	bls.n	800e346 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	b672      	cpsid	i
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	b662      	cpsie	i
 800e340:	603b      	str	r3, [r7, #0]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <vPortValidateInterruptPriority+0x68>
	}
 800e346:	bf00      	nop
 800e348:	3714      	adds	r7, #20
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	e000e3f0 	.word	0xe000e3f0
 800e358:	200015c4 	.word	0x200015c4
 800e35c:	e000ed0c 	.word	0xe000ed0c
 800e360:	200015c8 	.word	0x200015c8

0800e364 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08a      	sub	sp, #40	; 0x28
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e36c:	2300      	movs	r3, #0
 800e36e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e370:	f7fe fb9a 	bl	800caa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e374:	4b5b      	ldr	r3, [pc, #364]	; (800e4e4 <pvPortMalloc+0x180>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e37c:	f000 f91a 	bl	800e5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e380:	4b59      	ldr	r3, [pc, #356]	; (800e4e8 <pvPortMalloc+0x184>)
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4013      	ands	r3, r2
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f040 8092 	bne.w	800e4b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d01f      	beq.n	800e3d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e394:	2208      	movs	r2, #8
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4413      	add	r3, r2
 800e39a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f003 0307 	and.w	r3, r3, #7
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d016      	beq.n	800e3d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f023 0307 	bic.w	r3, r3, #7
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f003 0307 	and.w	r3, r3, #7
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00c      	beq.n	800e3d4 <pvPortMalloc+0x70>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3be:	b672      	cpsid	i
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	b662      	cpsie	i
 800e3ce:	617b      	str	r3, [r7, #20]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d06b      	beq.n	800e4b2 <pvPortMalloc+0x14e>
 800e3da:	4b44      	ldr	r3, [pc, #272]	; (800e4ec <pvPortMalloc+0x188>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d866      	bhi.n	800e4b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3e4:	4b42      	ldr	r3, [pc, #264]	; (800e4f0 <pvPortMalloc+0x18c>)
 800e3e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3e8:	4b41      	ldr	r3, [pc, #260]	; (800e4f0 <pvPortMalloc+0x18c>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ee:	e004      	b.n	800e3fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	429a      	cmp	r2, r3
 800e402:	d903      	bls.n	800e40c <pvPortMalloc+0xa8>
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1f1      	bne.n	800e3f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e40c:	4b35      	ldr	r3, [pc, #212]	; (800e4e4 <pvPortMalloc+0x180>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e412:	429a      	cmp	r2, r3
 800e414:	d04d      	beq.n	800e4b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2208      	movs	r2, #8
 800e41c:	4413      	add	r3, r2
 800e41e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	6a3b      	ldr	r3, [r7, #32]
 800e426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	1ad2      	subs	r2, r2, r3
 800e430:	2308      	movs	r3, #8
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	429a      	cmp	r2, r3
 800e436:	d921      	bls.n	800e47c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4413      	add	r3, r2
 800e43e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00c      	beq.n	800e464 <pvPortMalloc+0x100>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	b672      	cpsid	i
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	b662      	cpsie	i
 800e45e:	613b      	str	r3, [r7, #16]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	1ad2      	subs	r2, r2, r3
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e476:	69b8      	ldr	r0, [r7, #24]
 800e478:	f000 f8fe 	bl	800e678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e47c:	4b1b      	ldr	r3, [pc, #108]	; (800e4ec <pvPortMalloc+0x188>)
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	4a19      	ldr	r2, [pc, #100]	; (800e4ec <pvPortMalloc+0x188>)
 800e488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e48a:	4b18      	ldr	r3, [pc, #96]	; (800e4ec <pvPortMalloc+0x188>)
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	4b19      	ldr	r3, [pc, #100]	; (800e4f4 <pvPortMalloc+0x190>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d203      	bcs.n	800e49e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e496:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <pvPortMalloc+0x188>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a16      	ldr	r2, [pc, #88]	; (800e4f4 <pvPortMalloc+0x190>)
 800e49c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	4b11      	ldr	r3, [pc, #68]	; (800e4e8 <pvPortMalloc+0x184>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4b2:	f7fe fb07 	bl	800cac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	f003 0307 	and.w	r3, r3, #7
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00c      	beq.n	800e4da <pvPortMalloc+0x176>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	b672      	cpsid	i
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	b662      	cpsie	i
 800e4d4:	60fb      	str	r3, [r7, #12]
}
 800e4d6:	bf00      	nop
 800e4d8:	e7fe      	b.n	800e4d8 <pvPortMalloc+0x174>
	return pvReturn;
 800e4da:	69fb      	ldr	r3, [r7, #28]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3728      	adds	r7, #40	; 0x28
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	200092d4 	.word	0x200092d4
 800e4e8:	200092e0 	.word	0x200092e0
 800e4ec:	200092d8 	.word	0x200092d8
 800e4f0:	200092cc 	.word	0x200092cc
 800e4f4:	200092dc 	.word	0x200092dc

0800e4f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d04c      	beq.n	800e5a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e50a:	2308      	movs	r3, #8
 800e50c:	425b      	negs	r3, r3
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	4413      	add	r3, r2
 800e512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	4b23      	ldr	r3, [pc, #140]	; (800e5ac <vPortFree+0xb4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4013      	ands	r3, r2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10c      	bne.n	800e540 <vPortFree+0x48>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	b672      	cpsid	i
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	b662      	cpsie	i
 800e53a:	60fb      	str	r3, [r7, #12]
}
 800e53c:	bf00      	nop
 800e53e:	e7fe      	b.n	800e53e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00c      	beq.n	800e562 <vPortFree+0x6a>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	b672      	cpsid	i
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	b662      	cpsie	i
 800e55c:	60bb      	str	r3, [r7, #8]
}
 800e55e:	bf00      	nop
 800e560:	e7fe      	b.n	800e560 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	4b11      	ldr	r3, [pc, #68]	; (800e5ac <vPortFree+0xb4>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4013      	ands	r3, r2
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d019      	beq.n	800e5a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d115      	bne.n	800e5a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <vPortFree+0xb4>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	43db      	mvns	r3, r3
 800e582:	401a      	ands	r2, r3
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e588:	f7fe fa8e 	bl	800caa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	685a      	ldr	r2, [r3, #4]
 800e590:	4b07      	ldr	r3, [pc, #28]	; (800e5b0 <vPortFree+0xb8>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4413      	add	r3, r2
 800e596:	4a06      	ldr	r2, [pc, #24]	; (800e5b0 <vPortFree+0xb8>)
 800e598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e59a:	6938      	ldr	r0, [r7, #16]
 800e59c:	f000 f86c 	bl	800e678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e5a0:	f7fe fa90 	bl	800cac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5a4:	bf00      	nop
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	200092e0 	.word	0x200092e0
 800e5b0:	200092d8 	.word	0x200092d8

0800e5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5c0:	4b27      	ldr	r3, [pc, #156]	; (800e660 <prvHeapInit+0xac>)
 800e5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f003 0307 	and.w	r3, r3, #7
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00c      	beq.n	800e5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3307      	adds	r3, #7
 800e5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f023 0307 	bic.w	r3, r3, #7
 800e5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	4a1f      	ldr	r2, [pc, #124]	; (800e660 <prvHeapInit+0xac>)
 800e5e4:	4413      	add	r3, r2
 800e5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5ec:	4a1d      	ldr	r2, [pc, #116]	; (800e664 <prvHeapInit+0xb0>)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5f2:	4b1c      	ldr	r3, [pc, #112]	; (800e664 <prvHeapInit+0xb0>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e600:	2208      	movs	r2, #8
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	1a9b      	subs	r3, r3, r2
 800e606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f023 0307 	bic.w	r3, r3, #7
 800e60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	4a15      	ldr	r2, [pc, #84]	; (800e668 <prvHeapInit+0xb4>)
 800e614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e616:	4b14      	ldr	r3, [pc, #80]	; (800e668 <prvHeapInit+0xb4>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2200      	movs	r2, #0
 800e61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e61e:	4b12      	ldr	r3, [pc, #72]	; (800e668 <prvHeapInit+0xb4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	1ad2      	subs	r2, r2, r3
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e634:	4b0c      	ldr	r3, [pc, #48]	; (800e668 <prvHeapInit+0xb4>)
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	4a0a      	ldr	r2, [pc, #40]	; (800e66c <prvHeapInit+0xb8>)
 800e642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	4a09      	ldr	r2, [pc, #36]	; (800e670 <prvHeapInit+0xbc>)
 800e64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e64c:	4b09      	ldr	r3, [pc, #36]	; (800e674 <prvHeapInit+0xc0>)
 800e64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e652:	601a      	str	r2, [r3, #0]
}
 800e654:	bf00      	nop
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	200015cc 	.word	0x200015cc
 800e664:	200092cc 	.word	0x200092cc
 800e668:	200092d4 	.word	0x200092d4
 800e66c:	200092dc 	.word	0x200092dc
 800e670:	200092d8 	.word	0x200092d8
 800e674:	200092e0 	.word	0x200092e0

0800e678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e680:	4b28      	ldr	r3, [pc, #160]	; (800e724 <prvInsertBlockIntoFreeList+0xac>)
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	e002      	b.n	800e68c <prvInsertBlockIntoFreeList+0x14>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	429a      	cmp	r2, r3
 800e694:	d8f7      	bhi.n	800e686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d108      	bne.n	800e6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	441a      	add	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	441a      	add	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d118      	bne.n	800e700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	4b15      	ldr	r3, [pc, #84]	; (800e728 <prvInsertBlockIntoFreeList+0xb0>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d00d      	beq.n	800e6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	441a      	add	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	e008      	b.n	800e708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <prvInsertBlockIntoFreeList+0xb0>)
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	e003      	b.n	800e708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d002      	beq.n	800e716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	200092cc 	.word	0x200092cc
 800e728:	200092d4 	.word	0x200092d4

0800e72c <atoi>:
 800e72c:	220a      	movs	r2, #10
 800e72e:	2100      	movs	r1, #0
 800e730:	f000 b92e 	b.w	800e990 <strtol>

0800e734 <__errno>:
 800e734:	4b01      	ldr	r3, [pc, #4]	; (800e73c <__errno+0x8>)
 800e736:	6818      	ldr	r0, [r3, #0]
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	20000014 	.word	0x20000014

0800e740 <__libc_init_array>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	4d0d      	ldr	r5, [pc, #52]	; (800e778 <__libc_init_array+0x38>)
 800e744:	4c0d      	ldr	r4, [pc, #52]	; (800e77c <__libc_init_array+0x3c>)
 800e746:	1b64      	subs	r4, r4, r5
 800e748:	10a4      	asrs	r4, r4, #2
 800e74a:	2600      	movs	r6, #0
 800e74c:	42a6      	cmp	r6, r4
 800e74e:	d109      	bne.n	800e764 <__libc_init_array+0x24>
 800e750:	4d0b      	ldr	r5, [pc, #44]	; (800e780 <__libc_init_array+0x40>)
 800e752:	4c0c      	ldr	r4, [pc, #48]	; (800e784 <__libc_init_array+0x44>)
 800e754:	f000 f97e 	bl	800ea54 <_init>
 800e758:	1b64      	subs	r4, r4, r5
 800e75a:	10a4      	asrs	r4, r4, #2
 800e75c:	2600      	movs	r6, #0
 800e75e:	42a6      	cmp	r6, r4
 800e760:	d105      	bne.n	800e76e <__libc_init_array+0x2e>
 800e762:	bd70      	pop	{r4, r5, r6, pc}
 800e764:	f855 3b04 	ldr.w	r3, [r5], #4
 800e768:	4798      	blx	r3
 800e76a:	3601      	adds	r6, #1
 800e76c:	e7ee      	b.n	800e74c <__libc_init_array+0xc>
 800e76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e772:	4798      	blx	r3
 800e774:	3601      	adds	r6, #1
 800e776:	e7f2      	b.n	800e75e <__libc_init_array+0x1e>
 800e778:	0800f50c 	.word	0x0800f50c
 800e77c:	0800f50c 	.word	0x0800f50c
 800e780:	0800f50c 	.word	0x0800f50c
 800e784:	0800f510 	.word	0x0800f510

0800e788 <__retarget_lock_acquire_recursive>:
 800e788:	4770      	bx	lr

0800e78a <__retarget_lock_release_recursive>:
 800e78a:	4770      	bx	lr

0800e78c <memcpy>:
 800e78c:	440a      	add	r2, r1
 800e78e:	4291      	cmp	r1, r2
 800e790:	f100 33ff 	add.w	r3, r0, #4294967295
 800e794:	d100      	bne.n	800e798 <memcpy+0xc>
 800e796:	4770      	bx	lr
 800e798:	b510      	push	{r4, lr}
 800e79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e79e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7a2:	4291      	cmp	r1, r2
 800e7a4:	d1f9      	bne.n	800e79a <memcpy+0xe>
 800e7a6:	bd10      	pop	{r4, pc}

0800e7a8 <memset>:
 800e7a8:	4402      	add	r2, r0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d100      	bne.n	800e7b2 <memset+0xa>
 800e7b0:	4770      	bx	lr
 800e7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e7b6:	e7f9      	b.n	800e7ac <memset+0x4>

0800e7b8 <cleanup_glue>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	6809      	ldr	r1, [r1, #0]
 800e7be:	4605      	mov	r5, r0
 800e7c0:	b109      	cbz	r1, 800e7c6 <cleanup_glue+0xe>
 800e7c2:	f7ff fff9 	bl	800e7b8 <cleanup_glue>
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7ce:	f000 b8f5 	b.w	800e9bc <_free_r>
	...

0800e7d4 <_reclaim_reent>:
 800e7d4:	4b2c      	ldr	r3, [pc, #176]	; (800e888 <_reclaim_reent+0xb4>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4283      	cmp	r3, r0
 800e7da:	b570      	push	{r4, r5, r6, lr}
 800e7dc:	4604      	mov	r4, r0
 800e7de:	d051      	beq.n	800e884 <_reclaim_reent+0xb0>
 800e7e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e7e2:	b143      	cbz	r3, 800e7f6 <_reclaim_reent+0x22>
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d14a      	bne.n	800e880 <_reclaim_reent+0xac>
 800e7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ec:	6819      	ldr	r1, [r3, #0]
 800e7ee:	b111      	cbz	r1, 800e7f6 <_reclaim_reent+0x22>
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 f8e3 	bl	800e9bc <_free_r>
 800e7f6:	6961      	ldr	r1, [r4, #20]
 800e7f8:	b111      	cbz	r1, 800e800 <_reclaim_reent+0x2c>
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 f8de 	bl	800e9bc <_free_r>
 800e800:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e802:	b111      	cbz	r1, 800e80a <_reclaim_reent+0x36>
 800e804:	4620      	mov	r0, r4
 800e806:	f000 f8d9 	bl	800e9bc <_free_r>
 800e80a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e80c:	b111      	cbz	r1, 800e814 <_reclaim_reent+0x40>
 800e80e:	4620      	mov	r0, r4
 800e810:	f000 f8d4 	bl	800e9bc <_free_r>
 800e814:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e816:	b111      	cbz	r1, 800e81e <_reclaim_reent+0x4a>
 800e818:	4620      	mov	r0, r4
 800e81a:	f000 f8cf 	bl	800e9bc <_free_r>
 800e81e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e820:	b111      	cbz	r1, 800e828 <_reclaim_reent+0x54>
 800e822:	4620      	mov	r0, r4
 800e824:	f000 f8ca 	bl	800e9bc <_free_r>
 800e828:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e82a:	b111      	cbz	r1, 800e832 <_reclaim_reent+0x5e>
 800e82c:	4620      	mov	r0, r4
 800e82e:	f000 f8c5 	bl	800e9bc <_free_r>
 800e832:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e834:	b111      	cbz	r1, 800e83c <_reclaim_reent+0x68>
 800e836:	4620      	mov	r0, r4
 800e838:	f000 f8c0 	bl	800e9bc <_free_r>
 800e83c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e83e:	b111      	cbz	r1, 800e846 <_reclaim_reent+0x72>
 800e840:	4620      	mov	r0, r4
 800e842:	f000 f8bb 	bl	800e9bc <_free_r>
 800e846:	69a3      	ldr	r3, [r4, #24]
 800e848:	b1e3      	cbz	r3, 800e884 <_reclaim_reent+0xb0>
 800e84a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e84c:	4620      	mov	r0, r4
 800e84e:	4798      	blx	r3
 800e850:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e852:	b1b9      	cbz	r1, 800e884 <_reclaim_reent+0xb0>
 800e854:	4620      	mov	r0, r4
 800e856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e85a:	f7ff bfad 	b.w	800e7b8 <cleanup_glue>
 800e85e:	5949      	ldr	r1, [r1, r5]
 800e860:	b941      	cbnz	r1, 800e874 <_reclaim_reent+0xa0>
 800e862:	3504      	adds	r5, #4
 800e864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e866:	2d80      	cmp	r5, #128	; 0x80
 800e868:	68d9      	ldr	r1, [r3, #12]
 800e86a:	d1f8      	bne.n	800e85e <_reclaim_reent+0x8a>
 800e86c:	4620      	mov	r0, r4
 800e86e:	f000 f8a5 	bl	800e9bc <_free_r>
 800e872:	e7ba      	b.n	800e7ea <_reclaim_reent+0x16>
 800e874:	680e      	ldr	r6, [r1, #0]
 800e876:	4620      	mov	r0, r4
 800e878:	f000 f8a0 	bl	800e9bc <_free_r>
 800e87c:	4631      	mov	r1, r6
 800e87e:	e7ef      	b.n	800e860 <_reclaim_reent+0x8c>
 800e880:	2500      	movs	r5, #0
 800e882:	e7ef      	b.n	800e864 <_reclaim_reent+0x90>
 800e884:	bd70      	pop	{r4, r5, r6, pc}
 800e886:	bf00      	nop
 800e888:	20000014 	.word	0x20000014

0800e88c <_strtol_l.constprop.0>:
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e892:	d001      	beq.n	800e898 <_strtol_l.constprop.0+0xc>
 800e894:	2b24      	cmp	r3, #36	; 0x24
 800e896:	d906      	bls.n	800e8a6 <_strtol_l.constprop.0+0x1a>
 800e898:	f7ff ff4c 	bl	800e734 <__errno>
 800e89c:	2316      	movs	r3, #22
 800e89e:	6003      	str	r3, [r0, #0]
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e98c <_strtol_l.constprop.0+0x100>
 800e8aa:	460d      	mov	r5, r1
 800e8ac:	462e      	mov	r6, r5
 800e8ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e8b6:	f017 0708 	ands.w	r7, r7, #8
 800e8ba:	d1f7      	bne.n	800e8ac <_strtol_l.constprop.0+0x20>
 800e8bc:	2c2d      	cmp	r4, #45	; 0x2d
 800e8be:	d132      	bne.n	800e926 <_strtol_l.constprop.0+0x9a>
 800e8c0:	782c      	ldrb	r4, [r5, #0]
 800e8c2:	2701      	movs	r7, #1
 800e8c4:	1cb5      	adds	r5, r6, #2
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d05b      	beq.n	800e982 <_strtol_l.constprop.0+0xf6>
 800e8ca:	2b10      	cmp	r3, #16
 800e8cc:	d109      	bne.n	800e8e2 <_strtol_l.constprop.0+0x56>
 800e8ce:	2c30      	cmp	r4, #48	; 0x30
 800e8d0:	d107      	bne.n	800e8e2 <_strtol_l.constprop.0+0x56>
 800e8d2:	782c      	ldrb	r4, [r5, #0]
 800e8d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e8d8:	2c58      	cmp	r4, #88	; 0x58
 800e8da:	d14d      	bne.n	800e978 <_strtol_l.constprop.0+0xec>
 800e8dc:	786c      	ldrb	r4, [r5, #1]
 800e8de:	2310      	movs	r3, #16
 800e8e0:	3502      	adds	r5, #2
 800e8e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e8e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e8ea:	f04f 0c00 	mov.w	ip, #0
 800e8ee:	fbb8 f9f3 	udiv	r9, r8, r3
 800e8f2:	4666      	mov	r6, ip
 800e8f4:	fb03 8a19 	mls	sl, r3, r9, r8
 800e8f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e8fc:	f1be 0f09 	cmp.w	lr, #9
 800e900:	d816      	bhi.n	800e930 <_strtol_l.constprop.0+0xa4>
 800e902:	4674      	mov	r4, lr
 800e904:	42a3      	cmp	r3, r4
 800e906:	dd24      	ble.n	800e952 <_strtol_l.constprop.0+0xc6>
 800e908:	f1bc 0f00 	cmp.w	ip, #0
 800e90c:	db1e      	blt.n	800e94c <_strtol_l.constprop.0+0xc0>
 800e90e:	45b1      	cmp	r9, r6
 800e910:	d31c      	bcc.n	800e94c <_strtol_l.constprop.0+0xc0>
 800e912:	d101      	bne.n	800e918 <_strtol_l.constprop.0+0x8c>
 800e914:	45a2      	cmp	sl, r4
 800e916:	db19      	blt.n	800e94c <_strtol_l.constprop.0+0xc0>
 800e918:	fb06 4603 	mla	r6, r6, r3, r4
 800e91c:	f04f 0c01 	mov.w	ip, #1
 800e920:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e924:	e7e8      	b.n	800e8f8 <_strtol_l.constprop.0+0x6c>
 800e926:	2c2b      	cmp	r4, #43	; 0x2b
 800e928:	bf04      	itt	eq
 800e92a:	782c      	ldrbeq	r4, [r5, #0]
 800e92c:	1cb5      	addeq	r5, r6, #2
 800e92e:	e7ca      	b.n	800e8c6 <_strtol_l.constprop.0+0x3a>
 800e930:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e934:	f1be 0f19 	cmp.w	lr, #25
 800e938:	d801      	bhi.n	800e93e <_strtol_l.constprop.0+0xb2>
 800e93a:	3c37      	subs	r4, #55	; 0x37
 800e93c:	e7e2      	b.n	800e904 <_strtol_l.constprop.0+0x78>
 800e93e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e942:	f1be 0f19 	cmp.w	lr, #25
 800e946:	d804      	bhi.n	800e952 <_strtol_l.constprop.0+0xc6>
 800e948:	3c57      	subs	r4, #87	; 0x57
 800e94a:	e7db      	b.n	800e904 <_strtol_l.constprop.0+0x78>
 800e94c:	f04f 3cff 	mov.w	ip, #4294967295
 800e950:	e7e6      	b.n	800e920 <_strtol_l.constprop.0+0x94>
 800e952:	f1bc 0f00 	cmp.w	ip, #0
 800e956:	da05      	bge.n	800e964 <_strtol_l.constprop.0+0xd8>
 800e958:	2322      	movs	r3, #34	; 0x22
 800e95a:	6003      	str	r3, [r0, #0]
 800e95c:	4646      	mov	r6, r8
 800e95e:	b942      	cbnz	r2, 800e972 <_strtol_l.constprop.0+0xe6>
 800e960:	4630      	mov	r0, r6
 800e962:	e79e      	b.n	800e8a2 <_strtol_l.constprop.0+0x16>
 800e964:	b107      	cbz	r7, 800e968 <_strtol_l.constprop.0+0xdc>
 800e966:	4276      	negs	r6, r6
 800e968:	2a00      	cmp	r2, #0
 800e96a:	d0f9      	beq.n	800e960 <_strtol_l.constprop.0+0xd4>
 800e96c:	f1bc 0f00 	cmp.w	ip, #0
 800e970:	d000      	beq.n	800e974 <_strtol_l.constprop.0+0xe8>
 800e972:	1e69      	subs	r1, r5, #1
 800e974:	6011      	str	r1, [r2, #0]
 800e976:	e7f3      	b.n	800e960 <_strtol_l.constprop.0+0xd4>
 800e978:	2430      	movs	r4, #48	; 0x30
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1b1      	bne.n	800e8e2 <_strtol_l.constprop.0+0x56>
 800e97e:	2308      	movs	r3, #8
 800e980:	e7af      	b.n	800e8e2 <_strtol_l.constprop.0+0x56>
 800e982:	2c30      	cmp	r4, #48	; 0x30
 800e984:	d0a5      	beq.n	800e8d2 <_strtol_l.constprop.0+0x46>
 800e986:	230a      	movs	r3, #10
 800e988:	e7ab      	b.n	800e8e2 <_strtol_l.constprop.0+0x56>
 800e98a:	bf00      	nop
 800e98c:	0800f401 	.word	0x0800f401

0800e990 <strtol>:
 800e990:	4613      	mov	r3, r2
 800e992:	460a      	mov	r2, r1
 800e994:	4601      	mov	r1, r0
 800e996:	4802      	ldr	r0, [pc, #8]	; (800e9a0 <strtol+0x10>)
 800e998:	6800      	ldr	r0, [r0, #0]
 800e99a:	f7ff bf77 	b.w	800e88c <_strtol_l.constprop.0>
 800e99e:	bf00      	nop
 800e9a0:	20000014 	.word	0x20000014

0800e9a4 <__malloc_lock>:
 800e9a4:	4801      	ldr	r0, [pc, #4]	; (800e9ac <__malloc_lock+0x8>)
 800e9a6:	f7ff beef 	b.w	800e788 <__retarget_lock_acquire_recursive>
 800e9aa:	bf00      	nop
 800e9ac:	200092e4 	.word	0x200092e4

0800e9b0 <__malloc_unlock>:
 800e9b0:	4801      	ldr	r0, [pc, #4]	; (800e9b8 <__malloc_unlock+0x8>)
 800e9b2:	f7ff beea 	b.w	800e78a <__retarget_lock_release_recursive>
 800e9b6:	bf00      	nop
 800e9b8:	200092e4 	.word	0x200092e4

0800e9bc <_free_r>:
 800e9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9be:	2900      	cmp	r1, #0
 800e9c0:	d044      	beq.n	800ea4c <_free_r+0x90>
 800e9c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9c6:	9001      	str	r0, [sp, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e9ce:	bfb8      	it	lt
 800e9d0:	18e4      	addlt	r4, r4, r3
 800e9d2:	f7ff ffe7 	bl	800e9a4 <__malloc_lock>
 800e9d6:	4a1e      	ldr	r2, [pc, #120]	; (800ea50 <_free_r+0x94>)
 800e9d8:	9801      	ldr	r0, [sp, #4]
 800e9da:	6813      	ldr	r3, [r2, #0]
 800e9dc:	b933      	cbnz	r3, 800e9ec <_free_r+0x30>
 800e9de:	6063      	str	r3, [r4, #4]
 800e9e0:	6014      	str	r4, [r2, #0]
 800e9e2:	b003      	add	sp, #12
 800e9e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9e8:	f7ff bfe2 	b.w	800e9b0 <__malloc_unlock>
 800e9ec:	42a3      	cmp	r3, r4
 800e9ee:	d908      	bls.n	800ea02 <_free_r+0x46>
 800e9f0:	6825      	ldr	r5, [r4, #0]
 800e9f2:	1961      	adds	r1, r4, r5
 800e9f4:	428b      	cmp	r3, r1
 800e9f6:	bf01      	itttt	eq
 800e9f8:	6819      	ldreq	r1, [r3, #0]
 800e9fa:	685b      	ldreq	r3, [r3, #4]
 800e9fc:	1949      	addeq	r1, r1, r5
 800e9fe:	6021      	streq	r1, [r4, #0]
 800ea00:	e7ed      	b.n	800e9de <_free_r+0x22>
 800ea02:	461a      	mov	r2, r3
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	b10b      	cbz	r3, 800ea0c <_free_r+0x50>
 800ea08:	42a3      	cmp	r3, r4
 800ea0a:	d9fa      	bls.n	800ea02 <_free_r+0x46>
 800ea0c:	6811      	ldr	r1, [r2, #0]
 800ea0e:	1855      	adds	r5, r2, r1
 800ea10:	42a5      	cmp	r5, r4
 800ea12:	d10b      	bne.n	800ea2c <_free_r+0x70>
 800ea14:	6824      	ldr	r4, [r4, #0]
 800ea16:	4421      	add	r1, r4
 800ea18:	1854      	adds	r4, r2, r1
 800ea1a:	42a3      	cmp	r3, r4
 800ea1c:	6011      	str	r1, [r2, #0]
 800ea1e:	d1e0      	bne.n	800e9e2 <_free_r+0x26>
 800ea20:	681c      	ldr	r4, [r3, #0]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	6053      	str	r3, [r2, #4]
 800ea26:	4421      	add	r1, r4
 800ea28:	6011      	str	r1, [r2, #0]
 800ea2a:	e7da      	b.n	800e9e2 <_free_r+0x26>
 800ea2c:	d902      	bls.n	800ea34 <_free_r+0x78>
 800ea2e:	230c      	movs	r3, #12
 800ea30:	6003      	str	r3, [r0, #0]
 800ea32:	e7d6      	b.n	800e9e2 <_free_r+0x26>
 800ea34:	6825      	ldr	r5, [r4, #0]
 800ea36:	1961      	adds	r1, r4, r5
 800ea38:	428b      	cmp	r3, r1
 800ea3a:	bf04      	itt	eq
 800ea3c:	6819      	ldreq	r1, [r3, #0]
 800ea3e:	685b      	ldreq	r3, [r3, #4]
 800ea40:	6063      	str	r3, [r4, #4]
 800ea42:	bf04      	itt	eq
 800ea44:	1949      	addeq	r1, r1, r5
 800ea46:	6021      	streq	r1, [r4, #0]
 800ea48:	6054      	str	r4, [r2, #4]
 800ea4a:	e7ca      	b.n	800e9e2 <_free_r+0x26>
 800ea4c:	b003      	add	sp, #12
 800ea4e:	bd30      	pop	{r4, r5, pc}
 800ea50:	200092e8 	.word	0x200092e8

0800ea54 <_init>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr

0800ea60 <_fini>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr
