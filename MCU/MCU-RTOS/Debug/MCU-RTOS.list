
MCU-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  0800eee0  0800eee0  0001eee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9e4  0800f9e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9e4  0800f9e4  0001f9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9ec  0800f9ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9ec  0800f9ec  0001f9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9f0  0800f9f0  0001f9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e14  20000078  0800fa6c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009e8c  0800fa6c  00029e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027829  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004daa  00000000  00000000  000478d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  0004c680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a98  00000000  00000000  0004e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4a7  00000000  00000000  0004fda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023835  00000000  00000000  0007a247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe701  00000000  00000000  0009da7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c17d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cdc  00000000  00000000  0019c1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800eec4 	.word	0x0800eec4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800eec4 	.word	0x0800eec4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2f>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b54:	bf24      	itt	cs
 8000b56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5e:	d90d      	bls.n	8000b7c <__aeabi_d2f+0x30>
 8000b60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b74:	bf08      	it	eq
 8000b76:	f020 0001 	biceq.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b80:	d121      	bne.n	8000bc6 <__aeabi_d2f+0x7a>
 8000b82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b86:	bfbc      	itt	lt
 8000b88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	4770      	bxlt	lr
 8000b8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b96:	f1c2 0218 	rsb	r2, r2, #24
 8000b9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	f040 0001 	orrne.w	r0, r0, #1
 8000bac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb8:	ea40 000c 	orr.w	r0, r0, ip
 8000bbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc4:	e7cc      	b.n	8000b60 <__aeabi_d2f+0x14>
 8000bc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bca:	d107      	bne.n	8000bdc <__aeabi_d2f+0x90>
 8000bcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bda:	4770      	bxne	lr
 8000bdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	f200 809a 	bhi.w	8001038 <Set_Resolution_A4988+0x148>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <Set_Resolution_A4988+0x1c>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f21 	.word	0x08000f21
 8000f10:	08000f59 	.word	0x08000f59
 8000f14:	08000f91 	.word	0x08000f91
 8000f18:	08000fc9 	.word	0x08000fc9
 8000f1c:	08001001 	.word	0x08001001
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69d8      	ldr	r0, [r3, #28]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f005 f8a8 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a18      	ldr	r0, [r3, #32]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f005 f8a0 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f005 f898 	bl	8006080 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f56:	e08b      	b.n	8001070 <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69d8      	ldr	r0, [r3, #28]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	f005 f88c 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a18      	ldr	r0, [r3, #32]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	f005 f884 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	f005 f87c 	bl	8006080 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f8e:	e06f      	b.n	8001070 <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69d8      	ldr	r0, [r3, #28]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f005 f870 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a18      	ldr	r0, [r3, #32]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	f005 f868 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f005 f860 	bl	8006080 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000fc6:	e053      	b.n	8001070 <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69d8      	ldr	r0, [r3, #28]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f005 f854 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a18      	ldr	r0, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f005 f84c 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f005 f844 	bl	8006080 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000ffe:	e037      	b.n	8001070 <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69d8      	ldr	r0, [r3, #28]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	f005 f838 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a18      	ldr	r0, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001018:	2201      	movs	r2, #1
 800101a:	4619      	mov	r1, r3
 800101c:	f005 f830 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f005 f828 	bl	8006080 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2210      	movs	r2, #16
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8001036:	e01b      	b.n	8001070 <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69d8      	ldr	r0, [r3, #28]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	f005 f81c 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a18      	ldr	r0, [r3, #32]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f005 f814 	bl	8006080 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f005 f80c 	bl	8006080 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2210      	movs	r2, #16
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d003      	beq.n	8001090 <Set_Direction_A4988+0x18>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d009      	beq.n	80010a2 <Set_Direction_A4988+0x2a>
 800108e:	e011      	b.n	80010b4 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6958      	ldr	r0, [r3, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8b1b      	ldrh	r3, [r3, #24]
 8001098:	2201      	movs	r2, #1
 800109a:	4619      	mov	r1, r3
 800109c:	f004 fff0 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 80010a0:	e011      	b.n	80010c6 <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6958      	ldr	r0, [r3, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	8b1b      	ldrh	r3, [r3, #24]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	f004 ffe7 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 80010b2:	e008      	b.n	80010c6 <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6958      	ldr	r0, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8b1b      	ldrh	r3, [r3, #24]
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	f004 ffde 	bl	8006080 <HAL_GPIO_WritePin>
	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d003      	beq.n	80010e6 <Enable_A4988+0x18>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d009      	beq.n	80010f8 <Enable_A4988+0x2a>
 80010e4:	e011      	b.n	800110a <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	f004 ffc5 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 80010f6:	e011      	b.n	800111c <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	f004 ffbc 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 8001108:	e008      	b.n	800111c <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	f004 ffb3 	bl	8006080 <HAL_GPIO_WritePin>
	}
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d003      	beq.n	800113c <Reset_A4988+0x18>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d00a      	beq.n	8001150 <Reset_A4988+0x2c>
 800113a:	e013      	b.n	8001164 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001146:	2201      	movs	r2, #1
 8001148:	4619      	mov	r1, r3
 800114a:	f004 ff99 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 800114e:	e013      	b.n	8001178 <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	f004 ff8f 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 8001162:	e009      	b.n	8001178 <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	f004 ff85 	bl	8006080 <HAL_GPIO_WritePin>
	}
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <Sleep_A4988+0x18>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d00a      	beq.n	80011ac <Sleep_A4988+0x2c>
 8001196:	e013      	b.n	80011c0 <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	f004 ff6b 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 80011aa:	e013      	b.n	80011d4 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80011b6:	2200      	movs	r2, #0
 80011b8:	4619      	mov	r1, r3
 80011ba:	f004 ff61 	bl	8006080 <HAL_GPIO_WritePin>
			break;
 80011be:	e009      	b.n	80011d4 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	f004 ff57 	bl	8006080 <HAL_GPIO_WritePin>
	}
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Set_Speed>:
	//
	float step_res_ = 360/(float)(drive->STEPS);
	float angle = (distance*step_res_)/((float)(drive->STEP_mm_RESOLUTION));
	Rotate_A4988(drive, angle);
}
void Set_Speed(A4988_Drive* drive, int rpm){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	//	Sets the speed of rotor.
	//	@param rpm: Revolutions per minute
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	if(rpm > 0){
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dd59      	ble.n	80012a0 <Set_Speed+0xc4>
		uint16_t arr_val = TIM_CLK/(((drive->TIM_STEP->Instance->PSC+1)*rpm*drive->RESOLUTION/60))-1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	3301      	adds	r3, #1
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <Set_Speed+0x140>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	4a44      	ldr	r2, [pc, #272]	; (8001320 <Set_Speed+0x144>)
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b01      	subs	r3, #1
 8001216:	81fb      	strh	r3, [r7, #14]
		uint16_t pulse_val = arr_val / 2;
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	81bb      	strh	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(drive->TIM_STEP, arr_val);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	89fa      	ldrh	r2, [r7, #14]
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <Set_Speed+0x68>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	89ba      	ldrh	r2, [r7, #12]
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
 8001242:	e065      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001248:	2b04      	cmp	r3, #4
 800124a:	d105      	bne.n	8001258 <Set_Speed+0x7c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	6393      	str	r3, [r2, #56]	; 0x38
 8001256:	e05b      	b.n	8001310 <Set_Speed+0x134>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125c:	2b08      	cmp	r3, #8
 800125e:	d105      	bne.n	800126c <Set_Speed+0x90>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	63d3      	str	r3, [r2, #60]	; 0x3c
 800126a:	e051      	b.n	8001310 <Set_Speed+0x134>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d105      	bne.n	8001280 <Set_Speed+0xa4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	89bb      	ldrh	r3, [r7, #12]
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	e047      	b.n	8001310 <Set_Speed+0x134>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001284:	2b10      	cmp	r3, #16
 8001286:	d105      	bne.n	8001294 <Set_Speed+0xb8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	89bb      	ldrh	r3, [r7, #12]
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	e03d      	b.n	8001310 <Set_Speed+0x134>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	89bb      	ldrh	r3, [r7, #12]
 800129c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800129e:	e037      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <Set_Speed+0xd8>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012b2:	e02d      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d105      	bne.n	80012c8 <Set_Speed+0xec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012c6:	e023      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d105      	bne.n	80012dc <Set_Speed+0x100>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012da:	e019      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d105      	bne.n	80012f0 <Set_Speed+0x114>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012ee:	e00f      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d105      	bne.n	8001304 <Set_Speed+0x128>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001302:	e005      	b.n	8001310 <Set_Speed+0x134>
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800130e:	e7ff      	b.n	8001310 <Set_Speed+0x134>
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	88888889 	.word	0x88888889
 8001320:	044aa200 	.word	0x044aa200

08001324 <Init_A4988>:
void Init_A4988(A4988_Drive* drive){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	4618      	mov	r0, r3
 8001332:	f006 fe41 	bl	8007fb8 <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 8001336:	2102      	movs	r1, #2
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fdd9 	bl	8000ef0 <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 800133e:	2101      	movs	r1, #1
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fe99 	bl	8001078 <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 8001346:	2101      	movs	r1, #1
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fec0 	bl	80010ce <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 800134e:	2101      	movs	r1, #1
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fee7 	bl	8001124 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 8001356:	2102      	movs	r1, #2
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff11 	bl	8001180 <Sleep_A4988>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <GFX_SetFont+0x1c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000094 	.word	0x20000094

08001388 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <GFX_SetFontSize+0x16>
		size = size_t;
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <GFX_SetFontSize+0x24>)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	7013      	strb	r3, [r2, #0]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	460b      	mov	r3, r1
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	4613      	mov	r3, r2
 80013c4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b7e      	cmp	r3, #126	; 0x7e
 80013ca:	f200 80a3 	bhi.w	8001514 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	e096      	b.n	8001502 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <GFX_DrawChar+0x16c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3b20      	subs	r3, #32
 80013dc:	494f      	ldr	r1, [pc, #316]	; (800151c <GFX_DrawChar+0x16c>)
 80013de:	6809      	ldr	r1, [r1, #0]
 80013e0:	3101      	adds	r1, #1
 80013e2:	7809      	ldrb	r1, [r1, #0]
 80013e4:	fb03 f101 	mul.w	r1, r3, r1
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	440b      	add	r3, r1
 80013ec:	3302      	adds	r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80013f4:	2300      	movs	r3, #0
 80013f6:	757b      	strb	r3, [r7, #21]
 80013f8:	e078      	b.n	80014ec <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d032      	beq.n	800146a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <GFX_DrawChar+0x170>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d113      	bne.n	8001434 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4413      	add	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	b218      	sxth	r0, r3
 800141a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800141e:	b29a      	uxth	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	79ba      	ldrb	r2, [r7, #6]
 800142c:	4619      	mov	r1, r3
 800142e:	f000 fa2f 	bl	8001890 <SSD1306_DrawPixel>
 8001432:	e052      	b.n	80014da <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	4a3a      	ldr	r2, [pc, #232]	; (8001520 <GFX_DrawChar+0x170>)
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	fb03 f202 	mul.w	r2, r3, r2
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	18d0      	adds	r0, r2, r3
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	4a36      	ldr	r2, [pc, #216]	; (8001520 <GFX_DrawChar+0x170>)
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	fb03 f202 	mul.w	r2, r3, r2
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	18d1      	adds	r1, r2, r3
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <GFX_DrawChar+0x170>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <GFX_DrawChar+0x170>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b29c      	uxth	r4, r3
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	f000 f9bd 	bl	80017e2 <GFX_DrawFillRectangle>
 8001468:	e037      	b.n	80014da <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800146a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d133      	bne.n	80014da <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <GFX_DrawChar+0x170>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d114      	bne.n	80014a4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4413      	add	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	b218      	sxth	r0, r3
 8001488:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800148c:	b29a      	uxth	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4413      	add	r3, r2
 8001494:	b29b      	uxth	r3, r3
 8001496:	b21b      	sxth	r3, r3
 8001498:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800149c:	4619      	mov	r1, r3
 800149e:	f000 f9f7 	bl	8001890 <SSD1306_DrawPixel>
 80014a2:	e01a      	b.n	80014da <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <GFX_DrawChar+0x170>)
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	fb03 f202 	mul.w	r2, r3, r2
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	18d0      	adds	r0, r2, r3
 80014b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014b6:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <GFX_DrawChar+0x170>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	fb03 f202 	mul.w	r2, r3, r2
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	18d1      	adds	r1, r2, r3
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <GFX_DrawChar+0x170>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <GFX_DrawChar+0x170>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b29c      	uxth	r4, r3
 80014ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4623      	mov	r3, r4
 80014d6:	f000 f984 	bl	80017e2 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80014da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	757b      	strb	r3, [r7, #21]
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	75bb      	strb	r3, [r7, #22]
 80014ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <GFX_DrawChar+0x16c>)
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f6ff af7f 	blt.w	80013fa <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3301      	adds	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <GFX_DrawChar+0x16c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	429a      	cmp	r2, r3
 800150e:	f4ff af61 	bcc.w	80013d4 <GFX_DrawChar+0x24>
 8001512:	e000      	b.n	8001516 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001514:	bf00      	nop
            }
        }
    }
}
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000094 	.word	0x20000094
 8001520:	20000000 	.word	0x20000000

08001524 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800153c:	e03e      	b.n	80015bc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800153e:	78f9      	ldrb	r1, [r7, #3]
 8001540:	7cfa      	ldrb	r2, [r7, #19]
 8001542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	460b      	mov	r3, r1
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f7ff ff2f 	bl	80013b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <GFX_DrawString+0xb0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <GFX_DrawString+0xb4>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	3301      	adds	r3, #1
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800156c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d120      	bne.n	80015b6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001574:	2300      	movs	r3, #0
 8001576:	74bb      	strb	r3, [r7, #18]
 8001578:	e012      	b.n	80015a0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b29b      	uxth	r3, r3
 8001582:	b218      	sxth	r0, r3
 8001584:	7cbb      	ldrb	r3, [r7, #18]
 8001586:	b29a      	uxth	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b29b      	uxth	r3, r3
 8001590:	b21b      	sxth	r3, r3
 8001592:	2200      	movs	r2, #0
 8001594:	4619      	mov	r1, r3
 8001596:	f000 f97b 	bl	8001890 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800159a:	7cbb      	ldrb	r3, [r7, #18]
 800159c:	3301      	adds	r3, #1
 800159e:	74bb      	strb	r3, [r7, #18]
 80015a0:	7cba      	ldrb	r2, [r7, #18]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <GFX_DrawString+0xb0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <GFX_DrawString+0xb4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dbe1      	blt.n	800157a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ba      	bne.n	800153e <GFX_DrawString+0x1a>
	}
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000094 	.word	0x20000094
 80015d8:	20000000 	.word	0x20000000

080015dc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1acb      	subs	r3, r1, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bfb8      	it	lt
 8001602:	425b      	neglt	r3, r3
 8001604:	429a      	cmp	r2, r3
 8001606:	bfcc      	ite	gt
 8001608:	2301      	movgt	r3, #1
 800160a:	2300      	movle	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001610:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dd0b      	ble.n	8001650 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	b29a      	uxth	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	b29b      	uxth	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b29b      	uxth	r3, r3
 800165c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	bfb8      	it	lt
 8001668:	425b      	neglt	r3, r3
 800166a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800166c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da00      	bge.n	8001676 <GFX_WriteLine+0x9a>
 8001674:	3301      	adds	r3, #1
 8001676:	105b      	asrs	r3, r3, #1
 8001678:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	da02      	bge.n	8001688 <GFX_WriteLine+0xac>
	        ystep = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001686:	e030      	b.n	80016ea <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800168e:	e02c      	b.n	80016ea <GFX_WriteLine+0x10e>
	        if (steep) {
 8001690:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001694:	2b00      	cmp	r3, #0
 8001696:	d009      	beq.n	80016ac <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	b21b      	sxth	r3, r3
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	b211      	sxth	r1, r2
 80016a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f8f3 	bl	8001890 <SSD1306_DrawPixel>
 80016aa:	e008      	b.n	80016be <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	b211      	sxth	r1, r2
 80016b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f8e9 	bl	8001890 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80016be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016c0:	8abb      	ldrh	r3, [r7, #20]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80016c8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da09      	bge.n	80016e4 <GFX_WriteLine+0x108>
	            y_start += ystep;
 80016d0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	4413      	add	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80016da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016dc:	8afb      	ldrh	r3, [r7, #22]
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	ddce      	ble.n	8001690 <GFX_WriteLine+0xb4>
	        }
	    }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	; 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff ff5d 	bl	80015dc <GFX_WriteLine>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af02      	add	r7, sp, #8
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff ff47 	bl	80015dc <GFX_WriteLine>
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b088      	sub	sp, #32
 800175a:	af02      	add	r7, sp, #8
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	d114      	bne.n	8001796 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	dd05      	ble.n	8001780 <GFX_DrawLine+0x2a>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff ffb4 	bl	80016fc <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001794:	e021      	b.n	80017da <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d114      	bne.n	80017c8 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dd05      	ble.n	80017b2 <GFX_DrawLine+0x5c>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff ffb2 	bl	800172a <GFX_DrawFastHLine>
}
 80017c6:	e008      	b.n	80017da <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80017c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff ff01 	bl	80015dc <GFX_WriteLine>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	4611      	mov	r1, r2
 80017ee:	461a      	mov	r2, r3
 80017f0:	460b      	mov	r3, r1
 80017f2:	80fb      	strh	r3, [r7, #6]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e009      	b.n	8001812 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80017fe:	88ba      	ldrh	r2, [r7, #4]
 8001800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff78 	bl	80016fc <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbef      	blt.n	80017fe <GFX_DrawFillRectangle+0x1c>
    }

}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af04      	add	r7, sp, #16
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <SSD1306_Command+0x30>)
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2301      	movs	r3, #1
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	2200      	movs	r2, #0
 8001848:	2178      	movs	r1, #120	; 0x78
 800184a:	f004 fcf5 	bl	8006238 <HAL_I2C_Mem_Write>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000098 	.word	0x20000098

0800185c <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af04      	add	r7, sp, #16
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <SSD1306_Data+0x30>)
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	2178      	movs	r1, #120	; 0x78
 8001880:	f004 fcda 	bl	8006238 <HAL_I2C_Mem_Write>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000098 	.word	0x20000098

08001890 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	460b      	mov	r3, r1
 800189c:	80bb      	strh	r3, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db79      	blt.n	800199e <SSD1306_DrawPixel+0x10e>
 80018aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ae:	2b7f      	cmp	r3, #127	; 0x7f
 80018b0:	dc75      	bgt.n	800199e <SSD1306_DrawPixel+0x10e>
 80018b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db71      	blt.n	800199e <SSD1306_DrawPixel+0x10e>
 80018ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018be:	2b3f      	cmp	r3, #63	; 0x3f
 80018c0:	dc6d      	bgt.n	800199e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d049      	beq.n	800195c <SSD1306_DrawPixel+0xcc>
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	dc69      	bgt.n	80019a0 <SSD1306_DrawPixel+0x110>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d022      	beq.n	8001916 <SSD1306_DrawPixel+0x86>
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d165      	bne.n	80019a0 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80018d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da00      	bge.n	80018e2 <SSD1306_DrawPixel+0x52>
 80018e0:	3307      	adds	r3, #7
 80018e2:	10db      	asrs	r3, r3, #3
 80018e4:	b218      	sxth	r0, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	01db      	lsls	r3, r3, #7
 80018ea:	4413      	add	r3, r2
 80018ec:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <SSD1306_DrawPixel+0x11c>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b259      	sxtb	r1, r3
 8001904:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001908:	4603      	mov	r3, r0
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4413      	add	r3, r2
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <SSD1306_DrawPixel+0x11c>)
 8001912:	54d1      	strb	r1, [r2, r3]
      break;
 8001914:	e044      	b.n	80019a0 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800191a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da00      	bge.n	8001924 <SSD1306_DrawPixel+0x94>
 8001922:	3307      	adds	r3, #7
 8001924:	10db      	asrs	r3, r3, #3
 8001926:	b218      	sxth	r0, r3
 8001928:	4603      	mov	r3, r0
 800192a:	01db      	lsls	r3, r3, #7
 800192c:	4413      	add	r3, r2
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <SSD1306_DrawPixel+0x11c>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	b25a      	sxtb	r2, r3
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	b25b      	sxtb	r3, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	b25b      	sxtb	r3, r3
 8001946:	4013      	ands	r3, r2
 8001948:	b259      	sxtb	r1, r3
 800194a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800194e:	4603      	mov	r3, r0
 8001950:	01db      	lsls	r3, r3, #7
 8001952:	4413      	add	r3, r2
 8001954:	b2c9      	uxtb	r1, r1
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <SSD1306_DrawPixel+0x11c>)
 8001958:	54d1      	strb	r1, [r2, r3]
      break;
 800195a:	e021      	b.n	80019a0 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800195c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da00      	bge.n	800196a <SSD1306_DrawPixel+0xda>
 8001968:	3307      	adds	r3, #7
 800196a:	10db      	asrs	r3, r3, #3
 800196c:	b218      	sxth	r0, r3
 800196e:	4603      	mov	r3, r0
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	4413      	add	r3, r2
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <SSD1306_DrawPixel+0x11c>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	b25a      	sxtb	r2, r3
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	b25b      	sxtb	r3, r3
 8001988:	4053      	eors	r3, r2
 800198a:	b259      	sxtb	r1, r3
 800198c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001990:	4603      	mov	r3, r0
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	4413      	add	r3, r2
 8001996:	b2c9      	uxtb	r1, r1
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <SSD1306_DrawPixel+0x11c>)
 800199a:	54d1      	strb	r1, [r2, r3]
      break;
 800199c:	e000      	b.n	80019a0 <SSD1306_DrawPixel+0x110>
	  return;
 800199e:	bf00      	nop
    }
}
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000009c 	.word	0x2000009c

080019b0 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <SSD1306_Clear+0x22>
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10d      	bne.n	80019e0 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80019c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c8:	21ff      	movs	r1, #255	; 0xff
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <SSD1306_Clear+0x38>)
 80019cc:	f00d f924 	bl	800ec18 <memset>
		break;
 80019d0:	e006      	b.n	80019e0 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	2100      	movs	r1, #0
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <SSD1306_Clear+0x38>)
 80019da:	f00d f91d 	bl	800ec18 <memset>
		break;
 80019de:	bf00      	nop
	}
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000009c 	.word	0x2000009c

080019ec <SSD1306_Display>:

void SSD1306_Display(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
#ifndef SSD1306_USE_FREERTOS
	SSD1306_Command(SSD1306_PAGEADDR);
 80019f0:	2022      	movs	r0, #34	; 0x22
 80019f2:	f7ff ff19 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff ff16 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 80019fc:	20ff      	movs	r0, #255	; 0xff
 80019fe:	f7ff ff13 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001a02:	2021      	movs	r0, #33	; 0x21
 8001a04:	f7ff ff10 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff ff0d 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001a0e:	207f      	movs	r0, #127	; 0x7f
 8001a10:	f7ff ff0a 	bl	8001828 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <SSD1306_Display+0x38>)
 8001a1a:	f7ff ff1f 	bl	800185c <SSD1306_Data>
		osMutexRelease(MutexI2C4Handle);

		osThreadYield();
	}
#endif
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000009c 	.word	0x2000009c

08001a28 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001a30:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <SSD1306_Init+0xac>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001a36:	20ae      	movs	r0, #174	; 0xae
 8001a38:	f7ff fef6 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001a3c:	20d5      	movs	r0, #213	; 0xd5
 8001a3e:	f7ff fef3 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001a42:	2080      	movs	r0, #128	; 0x80
 8001a44:	f7ff fef0 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001a48:	203f      	movs	r0, #63	; 0x3f
 8001a4a:	f7ff feed 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001a4e:	20d3      	movs	r0, #211	; 0xd3
 8001a50:	f7ff feea 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fee7 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001a5a:	2040      	movs	r0, #64	; 0x40
 8001a5c:	f7ff fee4 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001a60:	208d      	movs	r0, #141	; 0x8d
 8001a62:	f7ff fee1 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001a66:	2014      	movs	r0, #20
 8001a68:	f7ff fede 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001a6c:	2020      	movs	r0, #32
 8001a6e:	f7ff fedb 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fed8 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001a78:	20a1      	movs	r0, #161	; 0xa1
 8001a7a:	f7ff fed5 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001a7e:	20c8      	movs	r0, #200	; 0xc8
 8001a80:	f7ff fed2 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001a84:	20da      	movs	r0, #218	; 0xda
 8001a86:	f7ff fecf 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001a8a:	2012      	movs	r0, #18
 8001a8c:	f7ff fecc 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001a90:	2081      	movs	r0, #129	; 0x81
 8001a92:	f7ff fec9 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001a96:	20ff      	movs	r0, #255	; 0xff
 8001a98:	f7ff fec6 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001a9c:	20d9      	movs	r0, #217	; 0xd9
 8001a9e:	f7ff fec3 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8001aa2:	20f1      	movs	r0, #241	; 0xf1
 8001aa4:	f7ff fec0 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001aa8:	20db      	movs	r0, #219	; 0xdb
 8001aaa:	f7ff febd 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001aae:	2040      	movs	r0, #64	; 0x40
 8001ab0:	f7ff feba 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001ab4:	20a4      	movs	r0, #164	; 0xa4
 8001ab6:	f7ff feb7 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001aba:	20a6      	movs	r0, #166	; 0xa6
 8001abc:	f7ff feb4 	bl	8001828 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001ac0:	202e      	movs	r0, #46	; 0x2e
 8001ac2:	f7ff feb1 	bl	8001828 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001ac6:	20af      	movs	r0, #175	; 0xaf
 8001ac8:	f7ff feae 	bl	8001828 <SSD1306_Command>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000098 	.word	0x20000098

08001ad8 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	b299      	uxth	r1, r3
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	1c7b      	adds	r3, r7, #1
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2302      	movs	r3, #2
 8001b08:	f004 fb96 	bl	8006238 <HAL_I2C_Mem_Write>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	729a      	strb	r2, [r3, #10]
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af04      	add	r7, sp, #16
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8001b2c:	883b      	ldrh	r3, [r7, #0]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 8001b34:	883b      	ldrh	r3, [r7, #0]
 8001b36:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	733b      	strb	r3, [r7, #12]
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	2302      	movs	r3, #2
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2302      	movs	r3, #2
 8001b62:	f004 fb69 	bl	8006238 <HAL_I2C_Mem_Write>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	729a      	strb	r2, [r3, #10]
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b088      	sub	sp, #32
 8001b7a:	af04      	add	r7, sp, #16
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	b299      	uxth	r1, r3
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	f107 030f 	add.w	r3, r7, #15
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f004 fc5c 	bl	8006460 <HAL_I2C_Mem_Read>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	729a      	strb	r2, [r3, #10]
	return value;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b088      	sub	sp, #32
 8001bbe:	af04      	add	r7, sp, #16
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2302      	movs	r3, #2
 8001bec:	f004 fc38 	bl	8006460 <HAL_I2C_Mem_Read>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8001bf8:	7b7b      	ldrb	r3, [r7, #13]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	7b3b      	ldrb	r3, [r7, #12]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	81fb      	strh	r3, [r7, #14]
	return value_;
 8001c08:	89fb      	ldrh	r3, [r7, #14]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2229      	movs	r2, #41	; 0x29
 8001c26:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c3a:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 8001c42:	2124      	movs	r1, #36	; 0x24
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff96 	bl	8001b76 <readReg>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 8001c52:	2116      	movs	r1, #22
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff8e 	bl	8001b76 <readReg>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f040 80a9 	bne.w	8001db4 <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f240 2107 	movw	r1, #519	; 0x207
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff32 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ff2c 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2196      	movs	r1, #150	; 0x96
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff27 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 8001c8a:	22fd      	movs	r2, #253	; 0xfd
 8001c8c:	2197      	movs	r1, #151	; 0x97
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff22 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 8001c94:	2201      	movs	r2, #1
 8001c96:	21e3      	movs	r1, #227	; 0xe3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff1d 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	21e4      	movs	r1, #228	; 0xe4
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff18 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8001ca8:	2202      	movs	r2, #2
 8001caa:	21e5      	movs	r1, #229	; 0xe5
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff13 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	21e6      	movs	r1, #230	; 0xe6
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff0e 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	21e7      	movs	r1, #231	; 0xe7
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff09 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	21f5      	movs	r1, #245	; 0xf5
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff04 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	21d9      	movs	r1, #217	; 0xd9
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff feff 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8001cda:	22ce      	movs	r2, #206	; 0xce
 8001cdc:	21db      	movs	r1, #219	; 0xdb
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fefa 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	21dc      	movs	r1, #220	; 0xdc
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fef5 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 8001cee:	22f8      	movs	r2, #248	; 0xf8
 8001cf0:	21dd      	movs	r1, #221	; 0xdd
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fef0 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	219f      	movs	r1, #159	; 0x9f
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff feeb 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 8001d02:	223c      	movs	r2, #60	; 0x3c
 8001d04:	21a3      	movs	r1, #163	; 0xa3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fee6 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	21b7      	movs	r1, #183	; 0xb7
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fee1 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 8001d16:	223c      	movs	r2, #60	; 0x3c
 8001d18:	21bb      	movs	r1, #187	; 0xbb
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fedc 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 8001d20:	2209      	movs	r2, #9
 8001d22:	21b2      	movs	r1, #178	; 0xb2
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fed7 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8001d2a:	2209      	movs	r2, #9
 8001d2c:	21ca      	movs	r1, #202	; 0xca
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fed2 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fecc 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 8001d40:	2217      	movs	r2, #23
 8001d42:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fec6 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fec0 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 8001d58:	2205      	movs	r2, #5
 8001d5a:	21ff      	movs	r1, #255	; 0xff
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff febb 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 8001d62:	2205      	movs	r2, #5
 8001d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff feb5 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 8001d6e:	2205      	movs	r2, #5
 8001d70:	f240 1199 	movw	r1, #409	; 0x199
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff feaf 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 8001d7a:	221b      	movs	r2, #27
 8001d7c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fea9 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 8001d86:	223e      	movs	r2, #62	; 0x3e
 8001d88:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fea3 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 8001d92:	221f      	movs	r2, #31
 8001d94:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fe9d 	bl	8001ad8 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2130      	movs	r1, #48	; 0x30
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fe98 	bl	8001ad8 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2116      	movs	r1, #22
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fe93 	bl	8001ad8 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 8001db2:	e021      	b.n	8001df8 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 8001db4:	2196      	movs	r1, #150	; 0x96
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff feff 	bl	8001bba <readReg16Bit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 8001dc0:	2254      	movs	r2, #84	; 0x54
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d103      	bne.n	8001dd0 <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	715a      	strb	r2, [r3, #5]
 8001dce:	e00a      	b.n	8001de6 <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 8001dd0:	227f      	movs	r2, #127	; 0x7f
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	715a      	strb	r2, [r3, #5]
 8001dde:	e002      	b.n	8001de6 <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	799a      	ldrb	r2, [r3, #6]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	795b      	ldrb	r3, [r3, #5]
 8001dee:	fb12 f303 	smulbb	r3, r2, r3
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	719a      	strb	r2, [r3, #6]
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8001e0c:	2314      	movs	r3, #20
 8001e0e:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d043      	beq.n	8001e9e <setScaling_VL6180X+0x9e>
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d840      	bhi.n	8001e9e <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	795b      	ldrb	r3, [r3, #5]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <setScaling_VL6180X+0xa8>)
 8001e2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2196      	movs	r1, #150	; 0x96
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe72 	bl	8001b1c <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	799a      	ldrb	r2, [r3, #6]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	795b      	ldrb	r3, [r3, #5]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	2124      	movs	r1, #36	; 0x24
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe44 	bl	8001ad8 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	795b      	ldrb	r3, [r3, #5]
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2121      	movs	r1, #33	; 0x21
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fe39 	bl	8001ad8 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 8001e66:	212d      	movs	r1, #45	; 0x2d
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fe84 	bl	8001b76 <readReg>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 8001e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	b25a      	sxtb	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	795b      	ldrb	r3, [r3, #5]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	212d      	movs	r1, #45	; 0x2d
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fe1e 	bl	8001ad8 <writeReg>
 8001e9c:	e000      	b.n	8001ea0 <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8001e9e:	bf00      	nop
}
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	0800f358 	.word	0x0800f358

08001eac <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 8001eb4:	f003 fdb8 	bl	8005a28 <HAL_GetTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8001ebc:	e010      	b.n	8001ee0 <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	891b      	ldrh	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00c      	beq.n	8001ee0 <readRangeContinuous_VL6180X+0x34>
 8001ec6:	f003 fdaf 	bl	8005a28 <HAL_GetTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	8912      	ldrh	r2, [r2, #8]
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	dd01      	ble.n	8001ee0 <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 8001edc:	23ff      	movs	r3, #255	; 0xff
 8001ede:	e014      	b.n	8001f0a <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8001ee0:	214f      	movs	r1, #79	; 0x4f
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fe47 	bl	8001b76 <readReg>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0e5      	beq.n	8001ebe <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 8001ef2:	2162      	movs	r1, #98	; 0x62
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fe3e 	bl	8001b76 <readReg>
 8001efa:	4603      	mov	r3, r0
 8001efc:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2115      	movs	r1, #21
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fde8 	bl	8001ad8 <writeReg>
  return range;
 8001f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2118      	movs	r1, #24
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fdda 	bl	8001ad8 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ffc1 	bl	8001eac <readRangeContinuous_VL6180X>
 8001f2a:	4603      	mov	r3, r0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 8001f3c:	2230      	movs	r2, #48	; 0x30
 8001f3e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fdc8 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 8001f48:	2246      	movs	r2, #70	; 0x46
 8001f4a:	213f      	movs	r1, #63	; 0x3f
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fdc3 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	2131      	movs	r1, #49	; 0x31
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fdbe 	bl	8001ad8 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 8001f5c:	2263      	movs	r2, #99	; 0x63
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fddb 	bl	8001b1c <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 8001f66:	2201      	movs	r2, #1
 8001f68:	212e      	movs	r1, #46	; 0x2e
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fdb4 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 8001f70:	2209      	movs	r2, #9
 8001f72:	211b      	movs	r1, #27
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fdaf 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 8001f7a:	2231      	movs	r2, #49	; 0x31
 8001f7c:	213e      	movs	r1, #62	; 0x3e
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fdaa 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 8001f84:	2224      	movs	r2, #36	; 0x24
 8001f86:	2114      	movs	r1, #20
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fda5 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 8001f8e:	2231      	movs	r2, #49	; 0x31
 8001f90:	211c      	movs	r1, #28
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fda0 	bl	8001ad8 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f240 21a3 	movw	r1, #675	; 0x2a3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fd9a 	bl	8001ad8 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff2a 	bl	8001e00 <setScaling_VL6180X>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	795b      	ldrb	r3, [r3, #5]
 8001fc0:	b29c      	uxth	r4, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa5 	bl	8001f12 <readRangeSingle_VL6180X>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	fb14 f303 	smulbb	r3, r4, r3
 8001fd0:	b29b      	uxth	r3, r3
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}

08001fda <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af04      	add	r7, sp, #16
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	791b      	ldrb	r3, [r3, #4]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	b299      	uxth	r1, r3
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	2301      	movs	r3, #1
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	f107 030f 	add.w	r3, r7, #15
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	f004 fa29 	bl	8006460 <HAL_I2C_Mem_Read>

	return Value;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af04      	add	r7, sp, #16
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	4613      	mov	r3, r2
 8002026:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	b299      	uxth	r1, r3
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	b29a      	uxth	r2, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2301      	movs	r3, #1
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	1cbb      	adds	r3, r7, #2
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	f004 f8f5 	bl	8006238 <HAL_I2C_Mem_Write>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b088      	sub	sp, #32
 800205a:	af04      	add	r7, sp, #16
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	b29b      	uxth	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	b299      	uxth	r1, r3
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	b29a      	uxth	r2, r3
 8002074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2302      	movs	r3, #2
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2301      	movs	r3, #1
 8002086:	f004 f9eb 	bl	8006460 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 800208a:	7b7b      	ldrb	r3, [r7, #13]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	7b3b      	ldrb	r3, [r7, #12]
 8002092:	b21b      	sxth	r3, r3
 8002094:	4313      	orrs	r3, r2
 8002096:	b21b      	sxth	r3, r3
 8002098:	b29b      	uxth	r3, r3
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b088      	sub	sp, #32
 80020a6:	af04      	add	r7, sp, #16
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	791b      	ldrb	r3, [r3, #4]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	b299      	uxth	r1, r3
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	2303      	movs	r3, #3
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	f004 f9c5 	bl	8006460 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	7b7b      	ldrb	r3, [r7, #13]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	4313      	orrs	r3, r2
 80020e0:	7bba      	ldrb	r2, [r7, #14]
 80020e2:	4313      	orrs	r3, r2
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d901      	bls.n	8002102 <BMP280_SetMode+0x16>
 80020fe:	2303      	movs	r3, #3
 8002100:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8002102:	21f4      	movs	r1, #244	; 0xf4
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff68 	bl	8001fda <Read8>
 800210a:	4603      	mov	r3, r0
 800210c:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	f023 0303 	bic.w	r3, r3, #3
 8002114:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 8002116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	b25a      	sxtb	r2, r3
 8002120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002124:	4313      	orrs	r3, r2
 8002126:	b25b      	sxtb	r3, r3
 8002128:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	461a      	mov	r2, r3
 800212e:	21f4      	movs	r1, #244	; 0xf4
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff71 	bl	8002018 <Write8>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d901      	bls.n	8002154 <BMP280_SetPressureOversampling+0x16>
 8002150:	2305      	movs	r3, #5
 8002152:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8002154:	21f4      	movs	r1, #244	; 0xf4
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff3f 	bl	8001fda <Read8>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	f023 031c 	bic.w	r3, r3, #28
 8002166:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	b25b      	sxtb	r3, r3
 800216e:	f003 031c 	and.w	r3, r3, #28
 8002172:	b25a      	sxtb	r2, r3
 8002174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002178:	4313      	orrs	r3, r2
 800217a:	b25b      	sxtb	r3, r3
 800217c:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	461a      	mov	r2, r3
 8002182:	21f4      	movs	r1, #244	; 0xf4
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff47 	bl	8002018 <Write8>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d901      	bls.n	80021a8 <BMP280_SetTemperatureOversampling+0x16>
 80021a4:	2305      	movs	r3, #5
 80021a6:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80021a8:	21f4      	movs	r1, #244	; 0xf4
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff15 	bl	8001fda <Read8>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	015b      	lsls	r3, r3, #5
 80021c0:	b25a      	sxtb	r2, r3
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	461a      	mov	r2, r3
 80021d0:	21f4      	movs	r1, #244	; 0xf4
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff20 	bl	8002018 <Write8>
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 80021e8:	21fa      	movs	r1, #250	; 0xfa
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff59 	bl	80020a2 <Read24>
 80021f0:	4603      	mov	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	111b      	asrs	r3, r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]

	return Tmp;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffe7 	bl	80021e0 <BMP280_ReadTemperatureRaw>
 8002212:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	10da      	asrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8b5b      	ldrh	r3, [r3, #26]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	12db      	asrs	r3, r3, #11
 800222c:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	111b      	asrs	r3, r3, #4
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	8b52      	ldrh	r2, [r2, #26]
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	1112      	asrs	r2, r2, #4
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	8b49      	ldrh	r1, [r1, #26]
 8002240:	1a52      	subs	r2, r2, r1
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	139b      	asrs	r3, r3, #14
 8002254:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	441a      	add	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3380      	adds	r3, #128	; 0x80
 800226c:	121b      	asrs	r3, r3, #8
 800226e:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7fe f91f 	bl	80004b4 <__aeabi_i2d>
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <BMP280_ReadTemperature+0x98>)
 800227c:	f7fe faae 	bl	80007dc <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fc60 	bl	8000b4c <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	ee07 3a90 	vmov	s15, r3
}
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40590000 	.word	0x40590000

080022a0 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 80022ba:	21d0      	movs	r1, #208	; 0xd0
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff fe8c 	bl	8001fda <Read8>
 80022c2:	4603      	mov	r3, r0
 80022c4:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b58      	cmp	r3, #88	; 0x58
 80022ca:	d001      	beq.n	80022d0 <BMP280_Init+0x30>
	{
		return 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e06c      	b.n	80023aa <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 80022d0:	2188      	movs	r1, #136	; 0x88
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff febf 	bl	8002056 <Read16>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 80022e0:	218a      	movs	r1, #138	; 0x8a
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff feb7 	bl	8002056 <Read16>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 80022f0:	218c      	movs	r1, #140	; 0x8c
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff feaf 	bl	8002056 <Read16>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8002300:	218e      	movs	r1, #142	; 0x8e
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff fea7 	bl	8002056 <Read16>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8002310:	2190      	movs	r1, #144	; 0x90
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7ff fe9f 	bl	8002056 <Read16>
 8002318:	4603      	mov	r3, r0
 800231a:	b21a      	sxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8002320:	2192      	movs	r1, #146	; 0x92
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff fe97 	bl	8002056 <Read16>
 8002328:	4603      	mov	r3, r0
 800232a:	b21a      	sxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8002330:	2194      	movs	r1, #148	; 0x94
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff fe8f 	bl	8002056 <Read16>
 8002338:	4603      	mov	r3, r0
 800233a:	b21a      	sxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8002340:	2196      	movs	r1, #150	; 0x96
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff fe87 	bl	8002056 <Read16>
 8002348:	4603      	mov	r3, r0
 800234a:	b21a      	sxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8002350:	2198      	movs	r1, #152	; 0x98
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff fe7f 	bl	8002056 <Read16>
 8002358:	4603      	mov	r3, r0
 800235a:	b21a      	sxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8002360:	219a      	movs	r1, #154	; 0x9a
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff fe77 	bl	8002056 <Read16>
 8002368:	4603      	mov	r3, r0
 800236a:	b21a      	sxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8002370:	219c      	movs	r1, #156	; 0x9c
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fe6f 	bl	8002056 <Read16>
 8002378:	4603      	mov	r3, r0
 800237a:	b21a      	sxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8002380:	219e      	movs	r1, #158	; 0x9e
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fe67 	bl	8002056 <Read16>
 8002388:	4603      	mov	r3, r0
 800238a:	b21a      	sxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8002390:	2105      	movs	r1, #5
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fefd 	bl	8002192 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8002398:	2105      	movs	r1, #5
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fecf 	bl	800213e <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 80023a0:	2103      	movs	r1, #3
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff fea2 	bl	80020ec <BMP280_SetMode>

	return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	static uint32_t LastTick;

	if(LastTick < osKernelGetTickCount()){
 80023b8:	f008 fa98 	bl	800a8ec <osKernelGetTickCount>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <vApplicationIdleHook+0x2c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d909      	bls.n	80023da <vApplicationIdleHook+0x26>
		IdleTicks++;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <vApplicationIdleHook+0x30>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <vApplicationIdleHook+0x30>)
 80023ce:	6013      	str	r3, [r2, #0]
		LastTick = osKernelGetTickCount();
 80023d0:	f008 fa8c 	bl	800a8ec <osKernelGetTickCount>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a02      	ldr	r2, [pc, #8]	; (80023e0 <vApplicationIdleHook+0x2c>)
 80023d8:	6013      	str	r3, [r2, #0]
	}
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000524 	.word	0x20000524
 80023e4:	200004a0 	.word	0x200004a0

080023e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 80023ec:	4880      	ldr	r0, [pc, #512]	; (80025f0 <MX_FREERTOS_Init+0x208>)
 80023ee:	f008 fc9d 	bl	800ad2c <osMutexNew>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4a7f      	ldr	r2, [pc, #508]	; (80025f4 <MX_FREERTOS_Init+0x20c>)
 80023f6:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 80023f8:	487f      	ldr	r0, [pc, #508]	; (80025f8 <MX_FREERTOS_Init+0x210>)
 80023fa:	f008 fc97 	bl	800ad2c <osMutexNew>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a7e      	ldr	r2, [pc, #504]	; (80025fc <MX_FREERTOS_Init+0x214>)
 8002402:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C4 */
  MutexI2C4Handle = osMutexNew(&MutexI2C4_attributes);
 8002404:	487e      	ldr	r0, [pc, #504]	; (8002600 <MX_FREERTOS_Init+0x218>)
 8002406:	f008 fc91 	bl	800ad2c <osMutexNew>
 800240a:	4603      	mov	r3, r0
 800240c:	4a7d      	ldr	r2, [pc, #500]	; (8002604 <MX_FREERTOS_Init+0x21c>)
 800240e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SyringeInfoOLEDSemaphore */
  SyringeInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoOLEDSemaphore_attributes);
 8002410:	4a7d      	ldr	r2, [pc, #500]	; (8002608 <MX_FREERTOS_Init+0x220>)
 8002412:	2101      	movs	r1, #1
 8002414:	2001      	movs	r0, #1
 8002416:	f008 fdd1 	bl	800afbc <osSemaphoreNew>
 800241a:	4603      	mov	r3, r0
 800241c:	4a7b      	ldr	r2, [pc, #492]	; (800260c <MX_FREERTOS_Init+0x224>)
 800241e:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoOLEDSemaphore */
  NeedleInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoOLEDSemaphore_attributes);
 8002420:	4a7b      	ldr	r2, [pc, #492]	; (8002610 <MX_FREERTOS_Init+0x228>)
 8002422:	2101      	movs	r1, #1
 8002424:	2001      	movs	r0, #1
 8002426:	f008 fdc9 	bl	800afbc <osSemaphoreNew>
 800242a:	4603      	mov	r3, r0
 800242c:	4a79      	ldr	r2, [pc, #484]	; (8002614 <MX_FREERTOS_Init+0x22c>)
 800242e:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationSemaphore */
  TemperatureInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &TemperatureInfoCommunicationSemaphore_attributes);
 8002430:	4a79      	ldr	r2, [pc, #484]	; (8002618 <MX_FREERTOS_Init+0x230>)
 8002432:	2101      	movs	r1, #1
 8002434:	2001      	movs	r0, #1
 8002436:	f008 fdc1 	bl	800afbc <osSemaphoreNew>
 800243a:	4603      	mov	r3, r0
 800243c:	4a77      	ldr	r2, [pc, #476]	; (800261c <MX_FREERTOS_Init+0x234>)
 800243e:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoCommunicationSemaphore */
  SyringeInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoCommunicationSemaphore_attributes);
 8002440:	4a77      	ldr	r2, [pc, #476]	; (8002620 <MX_FREERTOS_Init+0x238>)
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	f008 fdb9 	bl	800afbc <osSemaphoreNew>
 800244a:	4603      	mov	r3, r0
 800244c:	4a75      	ldr	r2, [pc, #468]	; (8002624 <MX_FREERTOS_Init+0x23c>)
 800244e:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoCommunicationSemaphore */
  NeedleInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoCommunicationSemaphore_attributes);
 8002450:	4a75      	ldr	r2, [pc, #468]	; (8002628 <MX_FREERTOS_Init+0x240>)
 8002452:	2101      	movs	r1, #1
 8002454:	2001      	movs	r0, #1
 8002456:	f008 fdb1 	bl	800afbc <osSemaphoreNew>
 800245a:	4603      	mov	r3, r0
 800245c:	4a73      	ldr	r2, [pc, #460]	; (800262c <MX_FREERTOS_Init+0x244>)
 800245e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SyringeInfoTimerOLED */
  SyringeInfoTimerOLEDHandle = osTimerNew(SyringeInfoTimerOLEDCallback, osTimerPeriodic, NULL, &SyringeInfoTimerOLED_attributes);
 8002460:	4b73      	ldr	r3, [pc, #460]	; (8002630 <MX_FREERTOS_Init+0x248>)
 8002462:	2200      	movs	r2, #0
 8002464:	2101      	movs	r1, #1
 8002466:	4873      	ldr	r0, [pc, #460]	; (8002634 <MX_FREERTOS_Init+0x24c>)
 8002468:	f008 fb9c 	bl	800aba4 <osTimerNew>
 800246c:	4603      	mov	r3, r0
 800246e:	4a72      	ldr	r2, [pc, #456]	; (8002638 <MX_FREERTOS_Init+0x250>)
 8002470:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerOLED */
  NeedleInfoTimerOLEDHandle = osTimerNew(NeedleInfoTimerOLEDCallback, osTimerPeriodic, NULL, &NeedleInfoTimerOLED_attributes);
 8002472:	4b72      	ldr	r3, [pc, #456]	; (800263c <MX_FREERTOS_Init+0x254>)
 8002474:	2200      	movs	r2, #0
 8002476:	2101      	movs	r1, #1
 8002478:	4871      	ldr	r0, [pc, #452]	; (8002640 <MX_FREERTOS_Init+0x258>)
 800247a:	f008 fb93 	bl	800aba4 <osTimerNew>
 800247e:	4603      	mov	r3, r0
 8002480:	4a70      	ldr	r2, [pc, #448]	; (8002644 <MX_FREERTOS_Init+0x25c>)
 8002482:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoTimerCommunication */
  SyringeInfoTimerCommunicationHandle = osTimerNew(SyringeInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &SyringeInfoTimerCommunication_attributes);
 8002484:	4b70      	ldr	r3, [pc, #448]	; (8002648 <MX_FREERTOS_Init+0x260>)
 8002486:	2200      	movs	r2, #0
 8002488:	2101      	movs	r1, #1
 800248a:	4870      	ldr	r0, [pc, #448]	; (800264c <MX_FREERTOS_Init+0x264>)
 800248c:	f008 fb8a 	bl	800aba4 <osTimerNew>
 8002490:	4603      	mov	r3, r0
 8002492:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <MX_FREERTOS_Init+0x268>)
 8002494:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerCommunication */
  NeedleInfoTimerCommunicationHandle = osTimerNew(NeedleInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &NeedleInfoTimerCommunication_attributes);
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <MX_FREERTOS_Init+0x26c>)
 8002498:	2200      	movs	r2, #0
 800249a:	2101      	movs	r1, #1
 800249c:	486e      	ldr	r0, [pc, #440]	; (8002658 <MX_FREERTOS_Init+0x270>)
 800249e:	f008 fb81 	bl	800aba4 <osTimerNew>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a6d      	ldr	r2, [pc, #436]	; (800265c <MX_FREERTOS_Init+0x274>)
 80024a6:	6013      	str	r3, [r2, #0]

  /* creation of IDLETimeTimer */
  IDLETimeTimerHandle = osTimerNew(IDLETimeTimerCallback, osTimerPeriodic, NULL, &IDLETimeTimer_attributes);
 80024a8:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <MX_FREERTOS_Init+0x278>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	2101      	movs	r1, #1
 80024ae:	486d      	ldr	r0, [pc, #436]	; (8002664 <MX_FREERTOS_Init+0x27c>)
 80024b0:	f008 fb78 	bl	800aba4 <osTimerNew>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <MX_FREERTOS_Init+0x280>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationTimer */
  TemperatureInfoCommunicationTimerHandle = osTimerNew(TemperatureInfoCommunicationTimerCallback, osTimerPeriodic, NULL, &TemperatureInfoCommunicationTimer_attributes);
 80024ba:	4b6c      	ldr	r3, [pc, #432]	; (800266c <MX_FREERTOS_Init+0x284>)
 80024bc:	2200      	movs	r2, #0
 80024be:	2101      	movs	r1, #1
 80024c0:	486b      	ldr	r0, [pc, #428]	; (8002670 <MX_FREERTOS_Init+0x288>)
 80024c2:	f008 fb6f 	bl	800aba4 <osTimerNew>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a6a      	ldr	r2, [pc, #424]	; (8002674 <MX_FREERTOS_Init+0x28c>)
 80024ca:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSyringeInfoOLED */
  QueueSyringeInfoOLEDHandle = osMessageQueueNew (4, sizeof(Syringe_info), &QueueSyringeInfoOLED_attributes);
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <MX_FREERTOS_Init+0x290>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	2004      	movs	r0, #4
 80024d2:	f008 fecd 	bl	800b270 <osMessageQueueNew>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a68      	ldr	r2, [pc, #416]	; (800267c <MX_FREERTOS_Init+0x294>)
 80024da:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeInfoCommunication */
  QueueSyringeInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Syringe_info), &QueueSyringeInfoCommunication_attributes);
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <MX_FREERTOS_Init+0x298>)
 80024de:	2104      	movs	r1, #4
 80024e0:	2002      	movs	r0, #2
 80024e2:	f008 fec5 	bl	800b270 <osMessageQueueNew>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4a66      	ldr	r2, [pc, #408]	; (8002684 <MX_FREERTOS_Init+0x29c>)
 80024ea:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoOLED */
  QueueNeedleInfoOLEDHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoOLED_attributes);
 80024ec:	4a66      	ldr	r2, [pc, #408]	; (8002688 <MX_FREERTOS_Init+0x2a0>)
 80024ee:	2104      	movs	r1, #4
 80024f0:	2004      	movs	r0, #4
 80024f2:	f008 febd 	bl	800b270 <osMessageQueueNew>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a64      	ldr	r2, [pc, #400]	; (800268c <MX_FREERTOS_Init+0x2a4>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoCommunication */
  QueueNeedleInfoCommunicationHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoCommunication_attributes);
 80024fc:	4a64      	ldr	r2, [pc, #400]	; (8002690 <MX_FREERTOS_Init+0x2a8>)
 80024fe:	2104      	movs	r1, #4
 8002500:	2004      	movs	r0, #4
 8002502:	f008 feb5 	bl	800b270 <osMessageQueueNew>
 8002506:	4603      	mov	r3, r0
 8002508:	4a62      	ldr	r2, [pc, #392]	; (8002694 <MX_FREERTOS_Init+0x2ac>)
 800250a:	6013      	str	r3, [r2, #0]

  /* creation of QueueTemperatureCommunication */
  QueueTemperatureCommunicationHandle = osMessageQueueNew (4, sizeof(Temperature_info), &QueueTemperatureCommunication_attributes);
 800250c:	4a62      	ldr	r2, [pc, #392]	; (8002698 <MX_FREERTOS_Init+0x2b0>)
 800250e:	2108      	movs	r1, #8
 8002510:	2004      	movs	r0, #4
 8002512:	f008 fead 	bl	800b270 <osMessageQueueNew>
 8002516:	4603      	mov	r3, r0
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <MX_FREERTOS_Init+0x2b4>)
 800251a:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleSetPointCommunication */
  QueueNeedleSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueNeedleSetPointCommunication_attributes);
 800251c:	4a60      	ldr	r2, [pc, #384]	; (80026a0 <MX_FREERTOS_Init+0x2b8>)
 800251e:	2102      	movs	r1, #2
 8002520:	2004      	movs	r0, #4
 8002522:	f008 fea5 	bl	800b270 <osMessageQueueNew>
 8002526:	4603      	mov	r3, r0
 8002528:	4a5e      	ldr	r2, [pc, #376]	; (80026a4 <MX_FREERTOS_Init+0x2bc>)
 800252a:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeSetPointCommunication */
  QueueSyringeSetPointCommunicationHandle = osMessageQueueNew (4, sizeof(uint16_t), &QueueSyringeSetPointCommunication_attributes);
 800252c:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <MX_FREERTOS_Init+0x2c0>)
 800252e:	2102      	movs	r1, #2
 8002530:	2004      	movs	r0, #4
 8002532:	f008 fe9d 	bl	800b270 <osMessageQueueNew>
 8002536:	4603      	mov	r3, r0
 8002538:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <MX_FREERTOS_Init+0x2c4>)
 800253a:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringePermission */
  QueueSyringePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueSyringePermission_attributes);
 800253c:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <MX_FREERTOS_Init+0x2c8>)
 800253e:	2101      	movs	r1, #1
 8002540:	2002      	movs	r0, #2
 8002542:	f008 fe95 	bl	800b270 <osMessageQueueNew>
 8002546:	4603      	mov	r3, r0
 8002548:	4a5a      	ldr	r2, [pc, #360]	; (80026b4 <MX_FREERTOS_Init+0x2cc>)
 800254a:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedlePermission */
  QueueNeedlePermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueNeedlePermission_attributes);
 800254c:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <MX_FREERTOS_Init+0x2d0>)
 800254e:	2101      	movs	r1, #1
 8002550:	2002      	movs	r0, #2
 8002552:	f008 fe8d 	bl	800b270 <osMessageQueueNew>
 8002556:	4603      	mov	r3, r0
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <MX_FREERTOS_Init+0x2d4>)
 800255a:	6013      	str	r3, [r2, #0]

  /* creation of QueueCommunicationPermission */
  QueueCommunicationPermissionHandle = osMessageQueueNew (2, sizeof(uint8_t), &QueueCommunicationPermission_attributes);
 800255c:	4a58      	ldr	r2, [pc, #352]	; (80026c0 <MX_FREERTOS_Init+0x2d8>)
 800255e:	2101      	movs	r1, #1
 8002560:	2002      	movs	r0, #2
 8002562:	f008 fe85 	bl	800b270 <osMessageQueueNew>
 8002566:	4603      	mov	r3, r0
 8002568:	4a56      	ldr	r2, [pc, #344]	; (80026c4 <MX_FREERTOS_Init+0x2dc>)
 800256a:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeSpeedRPM */
  QueueSyringeSpeedRPMHandle = osMessageQueueNew (2, sizeof(uint16_t), &QueueSyringeSpeedRPM_attributes);
 800256c:	4a56      	ldr	r2, [pc, #344]	; (80026c8 <MX_FREERTOS_Init+0x2e0>)
 800256e:	2102      	movs	r1, #2
 8002570:	2002      	movs	r0, #2
 8002572:	f008 fe7d 	bl	800b270 <osMessageQueueNew>
 8002576:	4603      	mov	r3, r0
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <MX_FREERTOS_Init+0x2e4>)
 800257a:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleSpeedRPM */
  QueueNeedleSpeedRPMHandle = osMessageQueueNew (2, sizeof(uint16_t), &QueueNeedleSpeedRPM_attributes);
 800257c:	4a54      	ldr	r2, [pc, #336]	; (80026d0 <MX_FREERTOS_Init+0x2e8>)
 800257e:	2102      	movs	r1, #2
 8002580:	2002      	movs	r0, #2
 8002582:	f008 fe75 	bl	800b270 <osMessageQueueNew>
 8002586:	4603      	mov	r3, r0
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <MX_FREERTOS_Init+0x2ec>)
 800258a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTast */
  HeartBeatTastHandle = osThreadNew(StartHeartBeatTast, NULL, &HeartBeatTast_attributes);
 800258c:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <MX_FREERTOS_Init+0x2f0>)
 800258e:	2100      	movs	r1, #0
 8002590:	4852      	ldr	r0, [pc, #328]	; (80026dc <MX_FREERTOS_Init+0x2f4>)
 8002592:	f008 f9dd 	bl	800a950 <osThreadNew>
 8002596:	4603      	mov	r3, r0
 8002598:	4a51      	ldr	r2, [pc, #324]	; (80026e0 <MX_FREERTOS_Init+0x2f8>)
 800259a:	6013      	str	r3, [r2, #0]

  /* creation of SyringeControlT */
  SyringeControlTHandle = osThreadNew(StartSyringeControlTask, NULL, &SyringeControlT_attributes);
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <MX_FREERTOS_Init+0x2fc>)
 800259e:	2100      	movs	r1, #0
 80025a0:	4851      	ldr	r0, [pc, #324]	; (80026e8 <MX_FREERTOS_Init+0x300>)
 80025a2:	f008 f9d5 	bl	800a950 <osThreadNew>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <MX_FREERTOS_Init+0x304>)
 80025aa:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 80025ac:	4a50      	ldr	r2, [pc, #320]	; (80026f0 <MX_FREERTOS_Init+0x308>)
 80025ae:	2100      	movs	r1, #0
 80025b0:	4850      	ldr	r0, [pc, #320]	; (80026f4 <MX_FREERTOS_Init+0x30c>)
 80025b2:	f008 f9cd 	bl	800a950 <osThreadNew>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4a4f      	ldr	r2, [pc, #316]	; (80026f8 <MX_FREERTOS_Init+0x310>)
 80025ba:	6013      	str	r3, [r2, #0]

  /* creation of NeedleControlTa */
  NeedleControlTaHandle = osThreadNew(StartNeedleControlTask, NULL, &NeedleControlTa_attributes);
 80025bc:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <MX_FREERTOS_Init+0x314>)
 80025be:	2100      	movs	r1, #0
 80025c0:	484f      	ldr	r0, [pc, #316]	; (8002700 <MX_FREERTOS_Init+0x318>)
 80025c2:	f008 f9c5 	bl	800a950 <osThreadNew>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <MX_FREERTOS_Init+0x31c>)
 80025ca:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);
 80025cc:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <MX_FREERTOS_Init+0x320>)
 80025ce:	2100      	movs	r1, #0
 80025d0:	484e      	ldr	r0, [pc, #312]	; (800270c <MX_FREERTOS_Init+0x324>)
 80025d2:	f008 f9bd 	bl	800a950 <osThreadNew>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <MX_FREERTOS_Init+0x328>)
 80025da:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureTask */
  TemperatureTaskHandle = osThreadNew(StartTemperatureTask, NULL, &TemperatureTask_attributes);
 80025dc:	4a4d      	ldr	r2, [pc, #308]	; (8002714 <MX_FREERTOS_Init+0x32c>)
 80025de:	2100      	movs	r1, #0
 80025e0:	484d      	ldr	r0, [pc, #308]	; (8002718 <MX_FREERTOS_Init+0x330>)
 80025e2:	f008 f9b5 	bl	800a950 <osThreadNew>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a4c      	ldr	r2, [pc, #304]	; (800271c <MX_FREERTOS_Init+0x334>)
 80025ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	0800f798 	.word	0x0800f798
 80025f4:	20000504 	.word	0x20000504
 80025f8:	0800f7a8 	.word	0x0800f7a8
 80025fc:	20000508 	.word	0x20000508
 8002600:	0800f7b8 	.word	0x0800f7b8
 8002604:	2000050c 	.word	0x2000050c
 8002608:	0800f7c8 	.word	0x0800f7c8
 800260c:	20000510 	.word	0x20000510
 8002610:	0800f7d8 	.word	0x0800f7d8
 8002614:	20000514 	.word	0x20000514
 8002618:	0800f7e8 	.word	0x0800f7e8
 800261c:	20000518 	.word	0x20000518
 8002620:	0800f7f8 	.word	0x0800f7f8
 8002624:	2000051c 	.word	0x2000051c
 8002628:	0800f808 	.word	0x0800f808
 800262c:	20000520 	.word	0x20000520
 8002630:	0800f738 	.word	0x0800f738
 8002634:	08002f39 	.word	0x08002f39
 8002638:	200004ec 	.word	0x200004ec
 800263c:	0800f748 	.word	0x0800f748
 8002640:	08002f59 	.word	0x08002f59
 8002644:	200004f0 	.word	0x200004f0
 8002648:	0800f758 	.word	0x0800f758
 800264c:	08002f79 	.word	0x08002f79
 8002650:	200004f4 	.word	0x200004f4
 8002654:	0800f768 	.word	0x0800f768
 8002658:	08002f99 	.word	0x08002f99
 800265c:	200004f8 	.word	0x200004f8
 8002660:	0800f778 	.word	0x0800f778
 8002664:	08002fb9 	.word	0x08002fb9
 8002668:	200004fc 	.word	0x200004fc
 800266c:	0800f788 	.word	0x0800f788
 8002670:	08002ff1 	.word	0x08002ff1
 8002674:	20000500 	.word	0x20000500
 8002678:	0800f618 	.word	0x0800f618
 800267c:	200004bc 	.word	0x200004bc
 8002680:	0800f630 	.word	0x0800f630
 8002684:	200004c0 	.word	0x200004c0
 8002688:	0800f648 	.word	0x0800f648
 800268c:	200004c4 	.word	0x200004c4
 8002690:	0800f660 	.word	0x0800f660
 8002694:	200004c8 	.word	0x200004c8
 8002698:	0800f678 	.word	0x0800f678
 800269c:	200004cc 	.word	0x200004cc
 80026a0:	0800f690 	.word	0x0800f690
 80026a4:	200004d0 	.word	0x200004d0
 80026a8:	0800f6a8 	.word	0x0800f6a8
 80026ac:	200004d4 	.word	0x200004d4
 80026b0:	0800f6c0 	.word	0x0800f6c0
 80026b4:	200004d8 	.word	0x200004d8
 80026b8:	0800f6d8 	.word	0x0800f6d8
 80026bc:	200004dc 	.word	0x200004dc
 80026c0:	0800f6f0 	.word	0x0800f6f0
 80026c4:	200004e0 	.word	0x200004e0
 80026c8:	0800f708 	.word	0x0800f708
 80026cc:	200004e4 	.word	0x200004e4
 80026d0:	0800f720 	.word	0x0800f720
 80026d4:	200004e8 	.word	0x200004e8
 80026d8:	0800f540 	.word	0x0800f540
 80026dc:	08002721 	.word	0x08002721
 80026e0:	200004a4 	.word	0x200004a4
 80026e4:	0800f564 	.word	0x0800f564
 80026e8:	08002769 	.word	0x08002769
 80026ec:	200004a8 	.word	0x200004a8
 80026f0:	0800f588 	.word	0x0800f588
 80026f4:	08002941 	.word	0x08002941
 80026f8:	200004ac 	.word	0x200004ac
 80026fc:	0800f5ac 	.word	0x0800f5ac
 8002700:	08002b11 	.word	0x08002b11
 8002704:	200004b0 	.word	0x200004b0
 8002708:	0800f5d0 	.word	0x0800f5d0
 800270c:	08002cf1 	.word	0x08002cf1
 8002710:	200004b4 	.word	0x200004b4
 8002714:	0800f5f4 	.word	0x0800f5f4
 8002718:	08002dd5 	.word	0x08002dd5
 800271c:	200004b8 	.word	0x200004b8

08002720 <StartHeartBeatTast>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTast */
void StartHeartBeatTast(void *argument)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTast */
	osTimerStart(IDLETimeTimerHandle, 1000);
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <StartHeartBeatTast+0x3c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002730:	4618      	mov	r0, r3
 8002732:	f008 fabb 	bl	800acac <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002736:	2101      	movs	r1, #1
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <StartHeartBeatTast+0x40>)
 800273a:	f003 fcba 	bl	80060b2 <HAL_GPIO_TogglePin>
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 800273e:	f008 f8fd 	bl	800a93c <osKernelGetTickFreq>
 8002742:	4603      	mov	r3, r0
 8002744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <StartHeartBeatTast+0x44>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	4618      	mov	r0, r3
 8002756:	f008 f9a1 	bl	800aa9c <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800275a:	e7ec      	b.n	8002736 <StartHeartBeatTast+0x16>
 800275c:	200004fc 	.word	0x200004fc
 8002760:	40020400 	.word	0x40020400
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <StartSyringeControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSyringeControlTask */
void StartSyringeControlTask(void *argument)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b09f      	sub	sp, #124	; 0x7c
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSyringeControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Syringe = {	.NAME = "SYRINGE",
 8002770:	4a66      	ldr	r2, [pc, #408]	; (800290c <StartSyringeControlTask+0x1a4>)
 8002772:	f107 0320 	add.w	r3, r7, #32
 8002776:	4611      	mov	r1, r2
 8002778:	2258      	movs	r2, #88	; 0x58
 800277a:	4618      	mov	r0, r3
 800277c:	f00c fa3e 	bl	800ebfc <memcpy>
	// Queue info
	//
	Syringe_info _Syringe_info;
	uint16_t syringe_setpoint_change;
	uint8_t _Permission;
	_Permission = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	727b      	strb	r3, [r7, #9]
	//
	// Initialization
	//
	Init_A4988(&Syringe); // Drive initialization
 8002784:	f107 0320 	add.w	r3, r7, #32
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fdcb 	bl	8001324 <Init_A4988>
	HAL_TIM_Base_Stop_IT(Syringe.TIM_COUNTER_SLAVE);
 800278e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002790:	4618      	mov	r0, r3
 8002792:	f005 fc89 	bl	80080a8 <HAL_TIM_Base_Stop_IT>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <StartSyringeControlTask+0x1a8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f04f 31ff 	mov.w	r1, #4294967295
 800279e:	4618      	mov	r0, r3
 80027a0:	f008 fb5e 	bl	800ae60 <osMutexAcquire>
	VL6180X_Init(&Syringe_sensor, &hi2c4); // Sensor initialization
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	495a      	ldr	r1, [pc, #360]	; (8002914 <StartSyringeControlTask+0x1ac>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fa31 	bl	8001c12 <VL6180X_Init>
	configureDefault_VL6180X(&Syringe_sensor); // Sensor initialization
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fbbd 	bl	8001f34 <configureDefault_VL6180X>
	osMutexRelease(MutexI2C4Handle);
 80027ba:	4b55      	ldr	r3, [pc, #340]	; (8002910 <StartSyringeControlTask+0x1a8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f008 fbac 	bl	800af1c <osMutexRelease>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <StartSyringeControlTask+0x1a8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	4618      	mov	r0, r3
 80027ce:	f008 fb47 	bl	800ae60 <osMutexAcquire>
	_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Initial measurement
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fbec 	bl	8001fb4 <readRangeSingleMillimeters_VL6180X>
 80027dc:	4603      	mov	r3, r0
 80027de:	81bb      	strh	r3, [r7, #12]
	_Syringe_info.Set_distance_syringe = _Syringe_info.MEASURE_Syringe;
 80027e0:	89bb      	ldrh	r3, [r7, #12]
 80027e2:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(MutexI2C4Handle);
 80027e4:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <StartSyringeControlTask+0x1a8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f008 fb97 	bl	800af1c <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(SyringeInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <StartSyringeControlTask+0x1b0>)
 80027f0:	681c      	ldr	r4, [r3, #0]
 80027f2:	f008 f8a3 	bl	800a93c <osKernelGetTickFreq>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f240 2226 	movw	r2, #550	; 0x226
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	4a46      	ldr	r2, [pc, #280]	; (800291c <StartSyringeControlTask+0x1b4>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	4619      	mov	r1, r3
 800280a:	4620      	mov	r0, r4
 800280c:	f008 fa4e 	bl	800acac <osTimerStart>
	osTimerStart(SyringeInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <StartSyringeControlTask+0x1b8>)
 8002812:	681c      	ldr	r4, [r3, #0]
 8002814:	f008 f892 	bl	800a93c <osKernelGetTickFreq>
 8002818:	4603      	mov	r3, r0
 800281a:	f240 2226 	movw	r2, #550	; 0x226
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a3e      	ldr	r2, [pc, #248]	; (800291c <StartSyringeControlTask+0x1b4>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	4619      	mov	r1, r3
 800282c:	4620      	mov	r0, r4
 800282e:	f008 fa3d 	bl	800acac <osTimerStart>
  {
	  //
	  // Get data
	  //
	  // Get SetPoint
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
 8002832:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <StartSyringeControlTask+0x1bc>)
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	f107 010a 	add.w	r1, r7, #10
 800283a:	2300      	movs	r3, #0
 800283c:	2200      	movs	r2, #0
 800283e:	f008 fe11 	bl	800b464 <osMessageQueueGet>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <StartSyringeControlTask+0xe4>
		  _Syringe_info.Set_distance_syringe = syringe_setpoint_change;
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	81fb      	strh	r3, [r7, #14]
	  }
	  // Get permission
	  osMessageQueueGet(QueueSyringePermissionHandle, &_Permission, NULL, 0);
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <StartSyringeControlTask+0x1c0>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f107 0109 	add.w	r1, r7, #9
 8002854:	2300      	movs	r3, #0
 8002856:	2200      	movs	r2, #0
 8002858:	f008 fe04 	bl	800b464 <osMessageQueueGet>
	  // Get Speed in rpm
	  if(osOK == osMessageQueueGet(QueueSyringeSpeedRPMHandle, &Syringe_speed_rmp, NULL, 0)){
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <StartSyringeControlTask+0x1c4>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	f107 011e 	add.w	r1, r7, #30
 8002864:	2300      	movs	r3, #0
 8002866:	2200      	movs	r2, #0
 8002868:	f008 fdfc 	bl	800b464 <osMessageQueueGet>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <StartSyringeControlTask+0x11a>
		  Set_Speed(&Syringe, Syringe_speed_rmp);
 8002872:	8bfb      	ldrh	r3, [r7, #30]
 8002874:	461a      	mov	r2, r3
 8002876:	f107 0320 	add.w	r3, r7, #32
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fcad 	bl	80011dc <Set_Speed>
	  }

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <StartSyringeControlTask+0x1a8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 31ff 	mov.w	r1, #4294967295
 800288a:	4618      	mov	r0, r3
 800288c:	f008 fae8 	bl	800ae60 <osMutexAcquire>
	  _Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fb8d 	bl	8001fb4 <readRangeSingleMillimeters_VL6180X>
 800289a:	4603      	mov	r3, r0
 800289c:	81bb      	strh	r3, [r7, #12]
	  osMutexRelease(MutexI2C4Handle);
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <StartSyringeControlTask+0x1a8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f008 fb3a 	bl	800af1c <osMutexRelease>

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(SyringeInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <StartSyringeControlTask+0x1c8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f008 fc20 	bl	800b0f4 <osSemaphoreAcquire>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <StartSyringeControlTask+0x164>
		  osMessageQueuePut(QueueSyringeInfoCommunicationHandle, &_Syringe_info, 0, osWaitForever);
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <StartSyringeControlTask+0x1cc>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f107 010c 	add.w	r1, r7, #12
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	2200      	movs	r2, #0
 80028c8:	f008 fd58 	bl	800b37c <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(SyringeInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <StartSyringeControlTask+0x1d0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f008 fc0e 	bl	800b0f4 <osSemaphoreAcquire>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <StartSyringeControlTask+0x188>
	  		osMessageQueuePut(QueueSyringeInfoOLEDHandle, &_Syringe_info, 0, osWaitForever);
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <StartSyringeControlTask+0x1d4>)
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	f107 010c 	add.w	r1, r7, #12
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	2200      	movs	r2, #0
 80028ec:	f008 fd46 	bl	800b37c <osMessageQueuePut>

	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 80028f0:	f008 f824 	bl	800a93c <osKernelGetTickFreq>
 80028f4:	4603      	mov	r3, r0
 80028f6:	22c8      	movs	r2, #200	; 0xc8
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	4a07      	ldr	r2, [pc, #28]	; (800291c <StartSyringeControlTask+0x1b4>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	4618      	mov	r0, r3
 8002906:	f008 f8c9 	bl	800aa9c <osDelay>
	  if(osOK == osMessageQueueGet(QueueSyringeSetPointCommunicationHandle, &syringe_setpoint_change, NULL, 0)){
 800290a:	e792      	b.n	8002832 <StartSyringeControlTask+0xca>
 800290c:	0800f1f4 	.word	0x0800f1f4
 8002910:	2000050c 	.word	0x2000050c
 8002914:	20000574 	.word	0x20000574
 8002918:	200004ec 	.word	0x200004ec
 800291c:	10624dd3 	.word	0x10624dd3
 8002920:	200004f4 	.word	0x200004f4
 8002924:	200004d4 	.word	0x200004d4
 8002928:	200004d8 	.word	0x200004d8
 800292c:	200004e4 	.word	0x200004e4
 8002930:	2000051c 	.word	0x2000051c
 8002934:	200004c0 	.word	0x200004c0
 8002938:	20000510 	.word	0x20000510
 800293c:	200004bc 	.word	0x200004bc

08002940 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08e      	sub	sp, #56	; 0x38
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
	// Info data initialization
	//
	char Message_OLED[32]; // Message buffer
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	_Needle_info.Set_distance_needle = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	817b      	strh	r3, [r7, #10]
	_Needle_info.MEASURE_Needle = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	813b      	strh	r3, [r7, #8]
	_Syringe_info.Set_distance_syringe = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	81fb      	strh	r3, [r7, #14]
	_Syringe_info.MEASURE_Syringe = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	81bb      	strh	r3, [r7, #12]

	//
	// Screen initialization
	//
	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002958:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <StartOLEDTask+0x1a8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	4618      	mov	r0, r3
 8002962:	f008 fa7d 	bl	800ae60 <osMutexAcquire>
	SSD1306_Init(&hi2c4);
 8002966:	4861      	ldr	r0, [pc, #388]	; (8002aec <StartOLEDTask+0x1ac>)
 8002968:	f7ff f85e 	bl	8001a28 <SSD1306_Init>
	osMutexRelease(MutexI2C4Handle);
 800296c:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <StartOLEDTask+0x1a8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f008 fad3 	bl	800af1c <osMutexRelease>

	GFX_SetFont(font_8x5);
 8002976:	485e      	ldr	r0, [pc, #376]	; (8002af0 <StartOLEDTask+0x1b0>)
 8002978:	f7fe fcf6 	bl	8001368 <GFX_SetFont>
	GFX_SetFontSize(1);
 800297c:	2001      	movs	r0, #1
 800297e:	f7fe fd03 	bl	8001388 <GFX_SetFontSize>

	SSD1306_Clear(BLACK);
 8002982:	2000      	movs	r0, #0
 8002984:	f7ff f814 	bl	80019b0 <SSD1306_Clear>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002988:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <StartOLEDTask+0x1a8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	4618      	mov	r0, r3
 8002992:	f008 fa65 	bl	800ae60 <osMutexAcquire>
	SSD1306_Display();
 8002996:	f7ff f829 	bl	80019ec <SSD1306_Display>
	osMutexRelease(MutexI2C4Handle);
 800299a:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <StartOLEDTask+0x1a8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f008 fabc 	bl	800af1c <osMutexRelease>
  {
	  //
	  // Get data from queues
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <StartOLEDTask+0x1b4>)
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	f107 010c 	add.w	r1, r7, #12
 80029ac:	2300      	movs	r3, #0
 80029ae:	2200      	movs	r2, #0
 80029b0:	f008 fd58 	bl	800b464 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoOLEDHandle, &_Needle_info, NULL, 0);
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <StartOLEDTask+0x1b8>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	f107 0108 	add.w	r1, r7, #8
 80029bc:	2300      	movs	r3, #0
 80029be:	2200      	movs	r2, #0
 80029c0:	f008 fd50 	bl	800b464 <osMessageQueueGet>

	  //
	  // Make message
	  //
	  SSD1306_Clear(BLACK);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe fff3 	bl	80019b0 <SSD1306_Clear>
	  sprintf(Message_OLED, "Needle position");
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	494b      	ldr	r1, [pc, #300]	; (8002afc <StartOLEDTask+0x1bc>)
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 fbed 	bl	80051b0 <sprintf_>
	  GFX_DrawString(20, 0, Message_OLED, WHITE, 0);
 80029d6:	f107 0210 	add.w	r2, r7, #16
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2301      	movs	r3, #1
 80029e0:	2100      	movs	r1, #0
 80029e2:	2014      	movs	r0, #20
 80029e4:	f7fe fd9e 	bl	8001524 <GFX_DrawString>
	  GFX_DrawLine(0, 9, 128, 9, WHITE);
 80029e8:	2301      	movs	r3, #1
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2309      	movs	r3, #9
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	2109      	movs	r1, #9
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe feaf 	bl	8001756 <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Needle_info.Set_distance_needle); //Set_distance_needle
 80029f8:	897b      	ldrh	r3, [r7, #10]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	493f      	ldr	r1, [pc, #252]	; (8002b00 <StartOLEDTask+0x1c0>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fbd4 	bl	80051b0 <sprintf_>
	  GFX_DrawString(0, 12, Message_OLED, WHITE, 0);
 8002a08:	f107 0210 	add.w	r2, r7, #16
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2301      	movs	r3, #1
 8002a12:	210c      	movs	r1, #12
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fd85 	bl	8001524 <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Needle_info.MEASURE_Needle); //MEASURE_Needle
 8002a1a:	893b      	ldrh	r3, [r7, #8]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	4938      	ldr	r1, [pc, #224]	; (8002b04 <StartOLEDTask+0x1c4>)
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fbc3 	bl	80051b0 <sprintf_>
	  GFX_DrawString(0, 22, Message_OLED, WHITE, 0);
 8002a2a:	f107 0210 	add.w	r2, r7, #16
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	2116      	movs	r1, #22
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fe fd74 	bl	8001524 <GFX_DrawString>
	  sprintf(Message_OLED, "Syringe position");
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4931      	ldr	r1, [pc, #196]	; (8002b08 <StartOLEDTask+0x1c8>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 fbb4 	bl	80051b0 <sprintf_>
	  GFX_DrawString(15, 32, Message_OLED, WHITE, 0);
 8002a48:	f107 0210 	add.w	r2, r7, #16
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2301      	movs	r3, #1
 8002a52:	2120      	movs	r1, #32
 8002a54:	200f      	movs	r0, #15
 8002a56:	f7fe fd65 	bl	8001524 <GFX_DrawString>
	  GFX_DrawLine(0, 41, 128, 41, WHITE);
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2329      	movs	r3, #41	; 0x29
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	2129      	movs	r1, #41	; 0x29
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fe76 	bl	8001756 <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Syringe_info.Set_distance_syringe); //Set_distance_syringe
 8002a6a:	89fb      	ldrh	r3, [r7, #14]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4923      	ldr	r1, [pc, #140]	; (8002b00 <StartOLEDTask+0x1c0>)
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fb9b 	bl	80051b0 <sprintf_>
	  GFX_DrawString(0, 44, Message_OLED, WHITE, 0);
 8002a7a:	f107 0210 	add.w	r2, r7, #16
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2301      	movs	r3, #1
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fd4c 	bl	8001524 <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Syringe_info.MEASURE_Syringe); //MEASURE_Syringe
 8002a8c:	89bb      	ldrh	r3, [r7, #12]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	491b      	ldr	r1, [pc, #108]	; (8002b04 <StartOLEDTask+0x1c4>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fb8a 	bl	80051b0 <sprintf_>
	  GFX_DrawString(0, 54, Message_OLED, WHITE, 0);
 8002a9c:	f107 0210 	add.w	r2, r7, #16
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2136      	movs	r1, #54	; 0x36
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe fd3b 	bl	8001524 <GFX_DrawString>

	  //
	  // Display
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <StartOLEDTask+0x1a8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f008 f9d2 	bl	800ae60 <osMutexAcquire>
	  SSD1306_Display();
 8002abc:	f7fe ff96 	bl	80019ec <SSD1306_Display>
	  osMutexRelease(MutexI2C4Handle);
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <StartOLEDTask+0x1a8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f008 fa29 	bl	800af1c <osMutexRelease>

	  //
	  // Time interval
	  //
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
 8002aca:	f007 ff37 	bl	800a93c <osKernelGetTickFreq>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <StartOLEDTask+0x1cc>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f007 ffdb 	bl	800aa9c <osDelay>
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 8002ae6:	e75d      	b.n	80029a4 <StartOLEDTask+0x64>
 8002ae8:	2000050c 	.word	0x2000050c
 8002aec:	20000574 	.word	0x20000574
 8002af0:	0800f360 	.word	0x0800f360
 8002af4:	200004bc 	.word	0x200004bc
 8002af8:	200004c4 	.word	0x200004c4
 8002afc:	0800f24c 	.word	0x0800f24c
 8002b00:	0800f25c 	.word	0x0800f25c
 8002b04:	0800f268 	.word	0x0800f268
 8002b08:	0800f278 	.word	0x0800f278
 8002b0c:	10624dd3 	.word	0x10624dd3

08002b10 <StartNeedleControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNeedleControlTask */
void StartNeedleControlTask(void *argument)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b09f      	sub	sp, #124	; 0x7c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNeedleControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Needle = {	.NAME = "NEEDLE",
 8002b18:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <StartNeedleControlTask+0x1ac>)
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	4611      	mov	r1, r2
 8002b20:	2258      	movs	r2, #88	; 0x58
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00c f86a 	bl	800ebfc <memcpy>
	// Queue info
	//
	Needle_info _Needle_info;
	uint16_t needle_setpoint_change;
	uint8_t _Permission;
	_Needle_info.MEASURE_Needle = 10;
 8002b28:	230a      	movs	r3, #10
 8002b2a:	81bb      	strh	r3, [r7, #12]
	_Needle_info.Set_distance_needle = 20;
 8002b2c:	2314      	movs	r3, #20
 8002b2e:	81fb      	strh	r3, [r7, #14]
	_Permission = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	727b      	strb	r3, [r7, #9]
	//
	// Initialization
	//
	Init_A4988(&Needle); // Drive initialization
 8002b34:	f107 0320 	add.w	r3, r7, #32
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fbf3 	bl	8001324 <Init_A4988>
	HAL_TIM_Base_Stop_IT(Needle.TIM_COUNTER_SLAVE);
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	4618      	mov	r0, r3
 8002b42:	f005 fab1 	bl	80080a8 <HAL_TIM_Base_Stop_IT>

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002b46:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <StartNeedleControlTask+0x1b0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f008 f986 	bl	800ae60 <osMutexAcquire>
	VL6180X_Init(&Needle_sensor, &hi2c2); // Sensor initialization
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	495a      	ldr	r1, [pc, #360]	; (8002cc4 <StartNeedleControlTask+0x1b4>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff f859 	bl	8001c12 <VL6180X_Init>
	configureDefault_VL6180X(&Needle_sensor); // Sensor initialization
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f9e5 	bl	8001f34 <configureDefault_VL6180X>
	osMutexRelease(MutexI2C2Handle);
 8002b6a:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <StartNeedleControlTask+0x1b0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f008 f9d4 	bl	800af1c <osMutexRelease>

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002b74:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <StartNeedleControlTask+0x1b0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f008 f96f 	bl	800ae60 <osMutexAcquire>
	_Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Initial measurement
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fa14 	bl	8001fb4 <readRangeSingleMillimeters_VL6180X>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	81bb      	strh	r3, [r7, #12]
	_Needle_info.Set_distance_needle = _Needle_info.MEASURE_Needle;
 8002b90:	89bb      	ldrh	r3, [r7, #12]
 8002b92:	81fb      	strh	r3, [r7, #14]
	osMutexRelease(MutexI2C2Handle);
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <StartNeedleControlTask+0x1b0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f008 f9bf 	bl	800af1c <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(NeedleInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <StartNeedleControlTask+0x1b8>)
 8002ba0:	681c      	ldr	r4, [r3, #0]
 8002ba2:	f007 fecb 	bl	800a93c <osKernelGetTickFreq>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f240 2226 	movw	r2, #550	; 0x226
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	4a46      	ldr	r2, [pc, #280]	; (8002ccc <StartNeedleControlTask+0x1bc>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f008 f876 	bl	800acac <osTimerStart>
	osTimerStart(NeedleInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <StartNeedleControlTask+0x1c0>)
 8002bc2:	681c      	ldr	r4, [r3, #0]
 8002bc4:	f007 feba 	bl	800a93c <osKernelGetTickFreq>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f240 2226 	movw	r2, #550	; 0x226
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a3e      	ldr	r2, [pc, #248]	; (8002ccc <StartNeedleControlTask+0x1bc>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f008 f865 	bl	800acac <osTimerStart>
  {
	  //
	  // Get Data
	  //
	  // Get set point
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
 8002be2:	4b3c      	ldr	r3, [pc, #240]	; (8002cd4 <StartNeedleControlTask+0x1c4>)
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	f107 010a 	add.w	r1, r7, #10
 8002bea:	2300      	movs	r3, #0
 8002bec:	2200      	movs	r2, #0
 8002bee:	f008 fc39 	bl	800b464 <osMessageQueueGet>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <StartNeedleControlTask+0xec>
		  _Needle_info.Set_distance_needle = needle_setpoint_change;
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	81fb      	strh	r3, [r7, #14]
	  }
	  // Get permission
	  osMessageQueueGet(QueueNeedlePermissionHandle, &_Permission, NULL, 0);
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <StartNeedleControlTask+0x1c8>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	f107 0109 	add.w	r1, r7, #9
 8002c04:	2300      	movs	r3, #0
 8002c06:	2200      	movs	r2, #0
 8002c08:	f008 fc2c 	bl	800b464 <osMessageQueueGet>
	  // Get Speed in rpm
	  if(osOK == osMessageQueueGet(QueueNeedleSpeedRPMHandle, &Needle_speed_rmp, NULL, 0)){
 8002c0c:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <StartNeedleControlTask+0x1cc>)
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	f107 011e 	add.w	r1, r7, #30
 8002c14:	2300      	movs	r3, #0
 8002c16:	2200      	movs	r2, #0
 8002c18:	f008 fc24 	bl	800b464 <osMessageQueueGet>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <StartNeedleControlTask+0x122>
		  Set_Speed(&Needle, Needle_speed_rmp);
 8002c22:	8bfb      	ldrh	r3, [r7, #30]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f107 0320 	add.w	r3, r7, #32
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fad5 	bl	80011dc <Set_Speed>
	  }

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <StartNeedleControlTask+0x1b0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f008 f910 	bl	800ae60 <osMutexAcquire>
	  _Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Measurement
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f9b5 	bl	8001fb4 <readRangeSingleMillimeters_VL6180X>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	81bb      	strh	r3, [r7, #12]
	  osMutexRelease(MutexI2C2Handle);
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <StartNeedleControlTask+0x1b0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f008 f962 	bl	800af1c <osMutexRelease>

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(NeedleInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <StartNeedleControlTask+0x1d0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f008 fa48 	bl	800b0f4 <osSemaphoreAcquire>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <StartNeedleControlTask+0x16c>
		  osMessageQueuePut(QueueNeedleInfoCommunicationHandle, &_Needle_info, 0, osWaitForever);
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <StartNeedleControlTask+0x1d4>)
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	f107 010c 	add.w	r1, r7, #12
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	2200      	movs	r2, #0
 8002c78:	f008 fb80 	bl	800b37c <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(NeedleInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <StartNeedleControlTask+0x1d8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f008 fa36 	bl	800b0f4 <osSemaphoreAcquire>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <StartNeedleControlTask+0x190>
		  osMessageQueuePut(QueueNeedleInfoOLEDHandle, &_Needle_info, 0, osWaitForever);
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <StartNeedleControlTask+0x1dc>)
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	f107 010c 	add.w	r1, r7, #12
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f008 fb6e 	bl	800b37c <osMessageQueuePut>
	  	  // TODO implement
	  }
	  //
	  // Time interval
	  //
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 8002ca0:	f007 fe4c 	bl	800a93c <osKernelGetTickFreq>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	22c8      	movs	r2, #200	; 0xc8
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <StartNeedleControlTask+0x1bc>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f007 fef1 	bl	800aa9c <osDelay>
	  if(osOK == osMessageQueueGet(QueueNeedleSetPointCommunicationHandle, &needle_setpoint_change, NULL, 0)){
 8002cba:	e792      	b.n	8002be2 <StartNeedleControlTask+0xd2>
 8002cbc:	0800f28c 	.word	0x0800f28c
 8002cc0:	20000508 	.word	0x20000508
 8002cc4:	20000528 	.word	0x20000528
 8002cc8:	200004f0 	.word	0x200004f0
 8002ccc:	10624dd3 	.word	0x10624dd3
 8002cd0:	200004f8 	.word	0x200004f8
 8002cd4:	200004d0 	.word	0x200004d0
 8002cd8:	200004dc 	.word	0x200004dc
 8002cdc:	200004e8 	.word	0x200004e8
 8002ce0:	20000520 	.word	0x20000520
 8002ce4:	200004c8 	.word	0x200004c8
 8002ce8:	20000514 	.word	0x20000514
 8002cec:	200004c4 	.word	0x200004c4

08002cf0 <StartCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
 8002cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf4:	b08e      	sub	sp, #56	; 0x38
 8002cf6:	af06      	add	r7, sp, #24
 8002cf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicationTask */
	//
	// Time interval
	//
	uint32_t DelayTick = osKernelGetTickCount();
 8002cfa:	f007 fdf7 	bl	800a8ec <osKernelGetTickCount>
 8002cfe:	61f8      	str	r0, [r7, #28]

	//
	//Receive data
	//
	HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002d00:	2204      	movs	r2, #4
 8002d02:	492d      	ldr	r1, [pc, #180]	; (8002db8 <StartCommunicationTask+0xc8>)
 8002d04:	482d      	ldr	r0, [pc, #180]	; (8002dbc <StartCommunicationTask+0xcc>)
 8002d06:	f006 fb80 	bl	800940a <HAL_UART_Receive_IT>
	//
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	Temperature_info _Temperature_info;
	uint8_t _Permission;
	_Needle_info.Set_distance_needle = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	82fb      	strh	r3, [r7, #22]
	_Needle_info.MEASURE_Needle = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	82bb      	strh	r3, [r7, #20]
	_Syringe_info.Set_distance_syringe = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	837b      	strh	r3, [r7, #26]
	_Syringe_info.MEASURE_Syringe = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	833b      	strh	r3, [r7, #24]
	_Temperature_info.Fan_info = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	743b      	strb	r3, [r7, #16]
	_Temperature_info.Temperature = 0;
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
	_Permission = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	72fb      	strb	r3, [r7, #11]
  {
	  //
	  // Get data
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <StartCommunicationTask+0xd0>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	f107 0118 	add.w	r1, r7, #24
 8002d30:	2300      	movs	r3, #0
 8002d32:	2200      	movs	r2, #0
 8002d34:	f008 fb96 	bl	800b464 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoCommunicationHandle, &_Needle_info, NULL, 0);
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <StartCommunicationTask+0xd4>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	f107 0114 	add.w	r1, r7, #20
 8002d40:	2300      	movs	r3, #0
 8002d42:	2200      	movs	r2, #0
 8002d44:	f008 fb8e 	bl	800b464 <osMessageQueueGet>
	  // Get data from Temperature info queue
	  osMessageQueueGet(QueueTemperatureCommunicationHandle, &_Temperature_info, NULL, 0);
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <StartCommunicationTask+0xd8>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	f107 010c 	add.w	r1, r7, #12
 8002d50:	2300      	movs	r3, #0
 8002d52:	2200      	movs	r2, #0
 8002d54:	f008 fb86 	bl	800b464 <osMessageQueueGet>
	  // Get permission
	  osMessageQueueGet(QueueCommunicationPermissionHandle, &_Permission, NULL, 0);
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <StartCommunicationTask+0xdc>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	f107 010b 	add.w	r1, r7, #11
 8002d60:	2300      	movs	r3, #0
 8002d62:	2200      	movs	r2, #0
 8002d64:	f008 fb7e 	bl	800b464 <osMessageQueueGet>

	  //
	  // Send message
	  //
	  if(_Permission == 1){
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d11b      	bne.n	8002da6 <StartCommunicationTask+0xb6>
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002d6e:	8abb      	ldrh	r3, [r7, #20]
 8002d70:	461d      	mov	r5, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002d72:	8b3b      	ldrh	r3, [r7, #24]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002d74:	461e      	mov	r6, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002d76:	8afb      	ldrh	r3, [r7, #22]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002d78:	4698      	mov	r8, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002d7a:	8b7b      	ldrh	r3, [r7, #26]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002d7c:	461c      	mov	r4, r3
				  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fba9 	bl	80004d8 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
				  _Temperature_info.Fan_info,0);
 8002d8a:	7c39      	ldrb	r1, [r7, #16]
		  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\r\n",_Needle_info.MEASURE_Needle,
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	2100      	movs	r1, #0
 8002d90:	9105      	str	r1, [sp, #20]
 8002d92:	9004      	str	r0, [sp, #16]
 8002d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d98:	9400      	str	r4, [sp, #0]
 8002d9a:	4643      	mov	r3, r8
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	4629      	mov	r1, r5
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <StartCommunicationTask+0xe0>)
 8002da2:	f002 f9e9 	bl	8005178 <printf_>
	  }

	  //
	  // Time interval
	  //
	  DelayTick += 500;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002dac:	61fb      	str	r3, [r7, #28]
	  osDelayUntil(DelayTick);
 8002dae:	69f8      	ldr	r0, [r7, #28]
 8002db0:	f007 fea2 	bl	800aaf8 <osDelayUntil>
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 8002db4:	e7b8      	b.n	8002d28 <StartCommunicationTask+0x38>
 8002db6:	bf00      	nop
 8002db8:	2000049c 	.word	0x2000049c
 8002dbc:	2000073c 	.word	0x2000073c
 8002dc0:	200004c0 	.word	0x200004c0
 8002dc4:	200004c8 	.word	0x200004c8
 8002dc8:	200004cc 	.word	0x200004cc
 8002dcc:	200004e0 	.word	0x200004e0
 8002dd0:	0800f2e4 	.word	0x0800f2e4

08002dd4 <StartTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperatureTask */
void StartTemperatureTask(void *argument)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b08f      	sub	sp, #60	; 0x3c
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperatureTask */
	//
	// Info data initialization
	//
	Temperature_info _Temperature_info;
	_Temperature_info.Fan_info = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	_Temperature_info.Temperature = 10;
 8002de2:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <StartTemperatureTask+0x144>)
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
	BMP280_t Bmp280;

	//
	// Initialize the sensor
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <StartTemperatureTask+0x148>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f04f 31ff 	mov.w	r1, #4294967295
 8002dee:	4618      	mov	r0, r3
 8002df0:	f008 f836 	bl	800ae60 <osMutexAcquire>
	BMP280_Init(&Bmp280, &hi2c2, 0x76);
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2276      	movs	r2, #118	; 0x76
 8002dfa:	4949      	ldr	r1, [pc, #292]	; (8002f20 <StartTemperatureTask+0x14c>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fa4f 	bl	80022a0 <BMP280_Init>
	osMutexRelease(MutexI2C2Handle);
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <StartTemperatureTask+0x148>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f008 f888 	bl	800af1c <osMutexRelease>

	//
	// Initial measurement
	//
	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <StartTemperatureTask+0x148>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 f823 	bl	800ae60 <osMutexAcquire>
	_Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f9f0 	bl	8002204 <BMP280_ReadTemperature>
 8002e24:	eef0 7a40 	vmov.f32	s15, s0
 8002e28:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	osMutexRelease(MutexI2C2Handle);
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <StartTemperatureTask+0x148>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 f873 	bl	800af1c <osMutexRelease>

	//
	// Timer start
	//
	osTimerStart(TemperatureInfoCommunicationTimerHandle, (1000 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <StartTemperatureTask+0x150>)
 8002e38:	681c      	ldr	r4, [r3, #0]
 8002e3a:	f007 fd7f 	bl	800a93c <osKernelGetTickFreq>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	4a37      	ldr	r2, [pc, #220]	; (8002f28 <StartTemperatureTask+0x154>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	4619      	mov	r1, r3
 8002e52:	4620      	mov	r0, r4
 8002e54:	f007 ff2a 	bl	800acac <osTimerStart>
  for(;;)
  {
	  //
	  // Measurement
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <StartTemperatureTask+0x148>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	4618      	mov	r0, r3
 8002e62:	f007 fffd 	bl	800ae60 <osMutexAcquire>
	  _Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f9ca 	bl	8002204 <BMP280_ReadTemperature>
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  if(_Temperature_info.Temperature < 0 ){
 8002e78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d508      	bpl.n	8002e98 <StartTemperatureTask+0xc4>
		  _Temperature_info.Temperature = BMP280_ReadTemperature(&Bmp280);
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f9ba 	bl	8002204 <BMP280_ReadTemperature>
 8002e90:	eef0 7a40 	vmov.f32	s15, s0
 8002e94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  }
	  osMutexRelease(MutexI2C2Handle);
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <StartTemperatureTask+0x148>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f008 f83d 	bl	800af1c <osMutexRelease>
	  //
	  // Fan functioning
	  //
	  if (_Temperature_info.Temperature >= 31.0) {
 8002ea2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ea6:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	db08      	blt.n	8002ec6 <StartTemperatureTask+0xf2>
		  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_SET);
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	481c      	ldr	r0, [pc, #112]	; (8002f2c <StartTemperatureTask+0x158>)
 8002eba:	f003 f8e1 	bl	8006080 <HAL_GPIO_WritePin>
		  _Temperature_info.Fan_info = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002ec4:	e007      	b.n	8002ed6 <StartTemperatureTask+0x102>
	  }else{
		  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_RESET);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	4818      	ldr	r0, [pc, #96]	; (8002f2c <StartTemperatureTask+0x158>)
 8002ecc:	f003 f8d8 	bl	8006080 <HAL_GPIO_WritePin>
		  _Temperature_info.Fan_info = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	  }

	  //
	  // Send to queue
	  //
	  if(osOK == osSemaphoreAcquire(TemperatureInfoCommunicationSemaphoreHandle, 0)){
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <StartTemperatureTask+0x15c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f008 f909 	bl	800b0f4 <osSemaphoreAcquire>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <StartTemperatureTask+0x126>
		  osMessageQueuePut(QueueTemperatureCommunicationHandle, &_Temperature_info, 0, osWaitForever);
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <StartTemperatureTask+0x160>)
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f008 fa41 	bl	800b37c <osMessageQueuePut>
	  }

	  //
	  // Time interval
	  //
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8002efa:	f007 fd1f 	bl	800a93c <osKernelGetTickFreq>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <StartTemperatureTask+0x154>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	4618      	mov	r0, r3
 8002f12:	f007 fdc3 	bl	800aa9c <osDelay>
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002f16:	e79f      	b.n	8002e58 <StartTemperatureTask+0x84>
 8002f18:	41200000 	.word	0x41200000
 8002f1c:	20000508 	.word	0x20000508
 8002f20:	20000528 	.word	0x20000528
 8002f24:	20000500 	.word	0x20000500
 8002f28:	10624dd3 	.word	0x10624dd3
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	20000518 	.word	0x20000518
 8002f34:	200004cc 	.word	0x200004cc

08002f38 <SyringeInfoTimerOLEDCallback>:
  /* USER CODE END StartTemperatureTask */
}

/* SyringeInfoTimerOLEDCallback function */
void SyringeInfoTimerOLEDCallback(void *argument)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerOLEDCallback */
	osSemaphoreRelease(SyringeInfoOLEDSemaphoreHandle);
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <SyringeInfoTimerOLEDCallback+0x1c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f008 f93b 	bl	800b1c0 <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerOLEDCallback */
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000510 	.word	0x20000510

08002f58 <NeedleInfoTimerOLEDCallback>:

/* NeedleInfoTimerOLEDCallback function */
void NeedleInfoTimerOLEDCallback(void *argument)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerOLEDCallback */
	osSemaphoreRelease(NeedleInfoOLEDSemaphoreHandle);
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <NeedleInfoTimerOLEDCallback+0x1c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f008 f92b 	bl	800b1c0 <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerOLEDCallback */
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000514 	.word	0x20000514

08002f78 <SyringeInfoTimerCommunicationCallback>:

/* SyringeInfoTimerCommunicationCallback function */
void SyringeInfoTimerCommunicationCallback(void *argument)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerCommunicationCallback */
	osSemaphoreRelease(SyringeInfoCommunicationSemaphoreHandle);
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <SyringeInfoTimerCommunicationCallback+0x1c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f008 f91b 	bl	800b1c0 <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerCommunicationCallback */
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000051c 	.word	0x2000051c

08002f98 <NeedleInfoTimerCommunicationCallback>:

/* NeedleInfoTimerCommunicationCallback function */
void NeedleInfoTimerCommunicationCallback(void *argument)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerCommunicationCallback */
	osSemaphoreRelease(NeedleInfoCommunicationSemaphoreHandle);
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <NeedleInfoTimerCommunicationCallback+0x1c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f008 f90b 	bl	800b1c0 <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerCommunicationCallback */
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000520 	.word	0x20000520

08002fb8 <IDLETimeTimerCallback>:

/* IDLETimeTimerCallback function */
void IDLETimeTimerCallback(void *argument)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IDLETimeTimerCallback */
	uint32_t IdleTime;
	IdleTime = (IdleTicks * 100) / 1000;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <IDLETimeTimerCallback+0x30>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2264      	movs	r2, #100	; 0x64
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <IDLETimeTimerCallback+0x34>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	60fb      	str	r3, [r7, #12]
	IdleTicks = 0;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <IDLETimeTimerCallback+0x30>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
//	printf("IdleTime: %d\n\r",IdleTime);
  /* USER CODE END IDLETimeTimerCallback */
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200004a0 	.word	0x200004a0
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <TemperatureInfoCommunicationTimerCallback>:

/* TemperatureInfoCommunicationTimerCallback function */
void TemperatureInfoCommunicationTimerCallback(void *argument)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TemperatureInfoCommunicationTimerCallback */
	osSemaphoreRelease(TemperatureInfoCommunicationSemaphoreHandle);
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <TemperatureInfoCommunicationTimerCallback+0x1c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f008 f8df 	bl	800b1c0 <osSemaphoreRelease>
  /* USER CODE END TemperatureInfoCommunicationTimerCallback */
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000518 	.word	0x20000518

08003010 <_putchar>:
/* USER CODE BEGIN Application */
//
// Printf function implementation
//
void _putchar(char character)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <_putchar+0x38>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f04f 31ff 	mov.w	r1, #4294967295
 8003022:	4618      	mov	r0, r3
 8003024:	f007 ff1c 	bl	800ae60 <osMutexAcquire>
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 1000);
 8003028:	1df9      	adds	r1, r7, #7
 800302a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302e:	2201      	movs	r2, #1
 8003030:	4806      	ldr	r0, [pc, #24]	; (800304c <_putchar+0x3c>)
 8003032:	f006 f957 	bl	80092e4 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <_putchar+0x38>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f007 ff6e 	bl	800af1c <osMutexRelease>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000504 	.word	0x20000504
 800304c:	2000073c 	.word	0x2000073c

08003050 <HAL_UART_RxCpltCallback>:
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7d      	ldr	r2, [pc, #500]	; (8003254 <HAL_UART_RxCpltCallback+0x204>)
 800305e:	4293      	cmp	r3, r2
 8003060:	f040 80f3 	bne.w	800324a <HAL_UART_RxCpltCallback+0x1fa>
	{
		//
		// Start of handling message
		//
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003064:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003068:	487b      	ldr	r0, [pc, #492]	; (8003258 <HAL_UART_RxCpltCallback+0x208>)
 800306a:	f003 f822 	bl	80060b2 <HAL_GPIO_TogglePin>

		//
		// Handling the message
		//
		if(Buffor_Rx_USART[0] == 'N'){ // Needle set position
 800306e:	4b7b      	ldr	r3, [pc, #492]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b4e      	cmp	r3, #78	; 0x4e
 8003074:	d11c      	bne.n	80030b0 <HAL_UART_RxCpltCallback+0x60>
			uint16_t needle_set_point_change;
			char needle_set_point_change_str[3];
			// Convert to uint16_t
			needle_set_point_change_str[0] = Buffor_Rx_USART[1];
 8003076:	4b79      	ldr	r3, [pc, #484]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			needle_set_point_change_str[1] = Buffor_Rx_USART[2];
 800307e:	4b77      	ldr	r3, [pc, #476]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003080:	789b      	ldrb	r3, [r3, #2]
 8003082:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			needle_set_point_change_str[2] = Buffor_Rx_USART[3];
 8003086:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003088:	78db      	ldrb	r3, [r3, #3]
 800308a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			needle_set_point_change =  (uint16_t)atoi(needle_set_point_change_str);
 800308e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003092:	4618      	mov	r0, r3
 8003094:	f00b fd82 	bl	800eb9c <atoi>
 8003098:	4603      	mov	r3, r0
 800309a:	b29b      	uxth	r3, r3
 800309c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			// Send to queue
			osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 800309e:	4b70      	ldr	r3, [pc, #448]	; (8003260 <HAL_UART_RxCpltCallback+0x210>)
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 80030a6:	2300      	movs	r3, #0
 80030a8:	2200      	movs	r2, #0
 80030aa:	f008 f967 	bl	800b37c <osMessageQueuePut>
 80030ae:	e0c7      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'S') { // Syringe set position
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b53      	cmp	r3, #83	; 0x53
 80030b6:	d11c      	bne.n	80030f2 <HAL_UART_RxCpltCallback+0xa2>
			uint16_t syringe_set_point_change;
			char syringe_set_point_change_str[3];
			// Convert to uint16_t
			syringe_set_point_change_str[0] = Buffor_Rx_USART[1];
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	f887 3020 	strb.w	r3, [r7, #32]
			syringe_set_point_change_str[1] = Buffor_Rx_USART[2];
 80030c0:	4b66      	ldr	r3, [pc, #408]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80030c2:	789b      	ldrb	r3, [r3, #2]
 80030c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			syringe_set_point_change_str[2] = Buffor_Rx_USART[3];
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80030ca:	78db      	ldrb	r3, [r3, #3]
 80030cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			syringe_set_point_change =  (uint16_t)atoi(syringe_set_point_change_str);
 80030d0:	f107 0320 	add.w	r3, r7, #32
 80030d4:	4618      	mov	r0, r3
 80030d6:	f00b fd61 	bl	800eb9c <atoi>
 80030da:	4603      	mov	r3, r0
 80030dc:	b29b      	uxth	r3, r3
 80030de:	84fb      	strh	r3, [r7, #38]	; 0x26
			// Send to queue
			osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 80030e0:	4b60      	ldr	r3, [pc, #384]	; (8003264 <HAL_UART_RxCpltCallback+0x214>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80030e8:	2300      	movs	r3, #0
 80030ea:	2200      	movs	r2, #0
 80030ec:	f008 f946 	bl	800b37c <osMessageQueuePut>
 80030f0:	e0a6      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'T') { // Test connection
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b54      	cmp	r3, #84	; 0x54
 80030f8:	d103      	bne.n	8003102 <HAL_UART_RxCpltCallback+0xb2>
			printf("T");
 80030fa:	485b      	ldr	r0, [pc, #364]	; (8003268 <HAL_UART_RxCpltCallback+0x218>)
 80030fc:	f002 f83c 	bl	8005178 <printf_>
 8003100:	e09e      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'O') { // Start ALL
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b4f      	cmp	r3, #79	; 0x4f
 8003108:	d11a      	bne.n	8003140 <HAL_UART_RxCpltCallback+0xf0>
			uint8_t permission = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	77fb      	strb	r3, [r7, #31]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 800310e:	4b57      	ldr	r3, [pc, #348]	; (800326c <HAL_UART_RxCpltCallback+0x21c>)
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	f107 011f 	add.w	r1, r7, #31
 8003116:	2300      	movs	r3, #0
 8003118:	2200      	movs	r2, #0
 800311a:	f008 f92f 	bl	800b37c <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_UART_RxCpltCallback+0x220>)
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	f107 011f 	add.w	r1, r7, #31
 8003126:	2300      	movs	r3, #0
 8003128:	2200      	movs	r2, #0
 800312a:	f008 f927 	bl	800b37c <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <HAL_UART_RxCpltCallback+0x224>)
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	f107 011f 	add.w	r1, r7, #31
 8003136:	2300      	movs	r3, #0
 8003138:	2200      	movs	r2, #0
 800313a:	f008 f91f 	bl	800b37c <osMessageQueuePut>
 800313e:	e07f      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'E') { // STOP ALL
 8003140:	4b46      	ldr	r3, [pc, #280]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b45      	cmp	r3, #69	; 0x45
 8003146:	d11a      	bne.n	800317e <HAL_UART_RxCpltCallback+0x12e>
			uint8_t permission = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	77bb      	strb	r3, [r7, #30]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_UART_RxCpltCallback+0x21c>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	f107 011e 	add.w	r1, r7, #30
 8003154:	2300      	movs	r3, #0
 8003156:	2200      	movs	r2, #0
 8003158:	f008 f910 	bl	800b37c <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_UART_RxCpltCallback+0x220>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	f107 011e 	add.w	r1, r7, #30
 8003164:	2300      	movs	r3, #0
 8003166:	2200      	movs	r2, #0
 8003168:	f008 f908 	bl	800b37c <osMessageQueuePut>
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 800316c:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_UART_RxCpltCallback+0x224>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	f107 011e 	add.w	r1, r7, #30
 8003174:	2300      	movs	r3, #0
 8003176:	2200      	movs	r2, #0
 8003178:	f008 f900 	bl	800b37c <osMessageQueuePut>
 800317c:	e060      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'R') { // STOP communication
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b52      	cmp	r3, #82	; 0x52
 8003184:	d10a      	bne.n	800319c <HAL_UART_RxCpltCallback+0x14c>
			uint8_t permission = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	777b      	strb	r3, [r7, #29]
			osMessageQueuePut(QueueCommunicationPermissionHandle, &permission, 0, 0U);
 800318a:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_UART_RxCpltCallback+0x224>)
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	f107 011d 	add.w	r1, r7, #29
 8003192:	2300      	movs	r3, #0
 8003194:	2200      	movs	r2, #0
 8003196:	f008 f8f1 	bl	800b37c <osMessageQueuePut>
 800319a:	e051      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'M') { // STOP motors
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b4d      	cmp	r3, #77	; 0x4d
 80031a2:	d112      	bne.n	80031ca <HAL_UART_RxCpltCallback+0x17a>
			uint8_t permission = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	773b      	strb	r3, [r7, #28]
			osMessageQueuePut(QueueNeedlePermissionHandle, &permission, 0, 0U);
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_UART_RxCpltCallback+0x21c>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	f107 011c 	add.w	r1, r7, #28
 80031b0:	2300      	movs	r3, #0
 80031b2:	2200      	movs	r2, #0
 80031b4:	f008 f8e2 	bl	800b37c <osMessageQueuePut>
			osMessageQueuePut(QueueSyringePermissionHandle, &permission, 0, 0U);
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_UART_RxCpltCallback+0x220>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	f107 011c 	add.w	r1, r7, #28
 80031c0:	2300      	movs	r3, #0
 80031c2:	2200      	movs	r2, #0
 80031c4:	f008 f8da 	bl	800b37c <osMessageQueuePut>
 80031c8:	e03a      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'Q') { // Needle speed in rpm
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b51      	cmp	r3, #81	; 0x51
 80031d0:	d119      	bne.n	8003206 <HAL_UART_RxCpltCallback+0x1b6>
			uint16_t Needle_speed_changed;
			char Needle_speed_changed_str[3];
			// Convert to uint16_t
			Needle_speed_changed_str[0] = Buffor_Rx_USART[1];
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	753b      	strb	r3, [r7, #20]
			Needle_speed_changed_str[1] = Buffor_Rx_USART[2];
 80031d8:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80031da:	789b      	ldrb	r3, [r3, #2]
 80031dc:	757b      	strb	r3, [r7, #21]
			Needle_speed_changed_str[2] = Buffor_Rx_USART[3];
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 80031e0:	78db      	ldrb	r3, [r3, #3]
 80031e2:	75bb      	strb	r3, [r7, #22]
			Needle_speed_changed =  (uint16_t)atoi(Needle_speed_changed_str);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4618      	mov	r0, r3
 80031ea:	f00b fcd7 	bl	800eb9c <atoi>
 80031ee:	4603      	mov	r3, r0
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	837b      	strh	r3, [r7, #26]
			// Send to queue
			osMessageQueuePut(QueueNeedleSpeedRPMHandle, &Needle_speed_changed, 0, 0U);
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_UART_RxCpltCallback+0x228>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	f107 011a 	add.w	r1, r7, #26
 80031fc:	2300      	movs	r3, #0
 80031fe:	2200      	movs	r2, #0
 8003200:	f008 f8bc 	bl	800b37c <osMessageQueuePut>
 8003204:	e01c      	b.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
		}else if (Buffor_Rx_USART[0] == 'W') { // Syringe speed in rpm
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b57      	cmp	r3, #87	; 0x57
 800320c:	d118      	bne.n	8003240 <HAL_UART_RxCpltCallback+0x1f0>
			uint16_t Syringe_speed_changed;
			char Syringe_speed_changed_str[3];
			// Convert to uint16_t
			Syringe_speed_changed_str[0] = Buffor_Rx_USART[1];
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	733b      	strb	r3, [r7, #12]
			Syringe_speed_changed_str[1] = Buffor_Rx_USART[2];
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003216:	789b      	ldrb	r3, [r3, #2]
 8003218:	737b      	strb	r3, [r7, #13]
			Syringe_speed_changed_str[2] = Buffor_Rx_USART[3];
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 800321c:	78db      	ldrb	r3, [r3, #3]
 800321e:	73bb      	strb	r3, [r7, #14]
			Syringe_speed_changed =  (uint16_t)atoi(Syringe_speed_changed_str);
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	4618      	mov	r0, r3
 8003226:	f00b fcb9 	bl	800eb9c <atoi>
 800322a:	4603      	mov	r3, r0
 800322c:	b29b      	uxth	r3, r3
 800322e:	827b      	strh	r3, [r7, #18]
			// Send to queue
			osMessageQueuePut(QueueSyringeSpeedRPMHandle, &Syringe_speed_changed, 0, 0U);
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_UART_RxCpltCallback+0x22c>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	f107 0112 	add.w	r1, r7, #18
 8003238:	2300      	movs	r3, #0
 800323a:	2200      	movs	r2, #0
 800323c:	f008 f89e 	bl	800b37c <osMessageQueuePut>
		}
		//
		// Listening setup
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8003240:	2204      	movs	r2, #4
 8003242:	4906      	ldr	r1, [pc, #24]	; (800325c <HAL_UART_RxCpltCallback+0x20c>)
 8003244:	480e      	ldr	r0, [pc, #56]	; (8003280 <HAL_UART_RxCpltCallback+0x230>)
 8003246:	f006 f8e0 	bl	800940a <HAL_UART_Receive_IT>
	}
}
 800324a:	bf00      	nop
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40004800 	.word	0x40004800
 8003258:	40020400 	.word	0x40020400
 800325c:	2000049c 	.word	0x2000049c
 8003260:	200004d0 	.word	0x200004d0
 8003264:	200004d4 	.word	0x200004d4
 8003268:	0800f324 	.word	0x0800f324
 800326c:	200004dc 	.word	0x200004dc
 8003270:	200004d8 	.word	0x200004d8
 8003274:	200004e0 	.word	0x200004e0
 8003278:	200004e8 	.word	0x200004e8
 800327c:	200004e4 	.word	0x200004e4
 8003280:	2000073c 	.word	0x2000073c

08003284 <HAL_GPIO_EXTI_Callback>:
//
// Safety interlock (limit switch)
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_STOP_SYRINGE_1_Pin){ // END STOP Syringe Near Drive
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d10a      	bne.n	80032ac <HAL_GPIO_EXTI_Callback+0x28>
		uint16_t syringe_set_point_change = 120; // TODO change the stop point
 8003296:	2378      	movs	r3, #120	; 0x78
 8003298:	81fb      	strh	r3, [r7, #14]
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_GPIO_EXTI_Callback+0x88>)
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f107 010e 	add.w	r1, r7, #14
 80032a2:	2300      	movs	r3, #0
 80032a4:	2200      	movs	r2, #0
 80032a6:	f008 f869 	bl	800b37c <osMessageQueuePut>
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
		uint16_t needle_set_point_change = 20; // TODO change the stop point
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
	}
}
 80032aa:	e02b      	b.n	8003304 <HAL_GPIO_EXTI_Callback+0x80>
	}else if (GPIO_Pin == END_STOP_SYRINGE_2_Pin){ // END STOP Syringe Near Syringe
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b2:	d10a      	bne.n	80032ca <HAL_GPIO_EXTI_Callback+0x46>
		uint16_t syringe_set_point_change = 20; // TODO change the stop point
 80032b4:	2314      	movs	r3, #20
 80032b6:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(QueueSyringeSetPointCommunicationHandle, &syringe_set_point_change, 0, 0U);
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_GPIO_EXTI_Callback+0x88>)
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	f107 010c 	add.w	r1, r7, #12
 80032c0:	2300      	movs	r3, #0
 80032c2:	2200      	movs	r2, #0
 80032c4:	f008 f85a 	bl	800b37c <osMessageQueuePut>
}
 80032c8:	e01c      	b.n	8003304 <HAL_GPIO_EXTI_Callback+0x80>
	}else if(GPIO_Pin == END_STOP_NEEDLE_1_Pin){ // END STOP Needle Near Drive
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d0:	d10a      	bne.n	80032e8 <HAL_GPIO_EXTI_Callback+0x64>
		uint16_t needle_set_point_change = 120; // TODO change the stop point
 80032d2:	2378      	movs	r3, #120	; 0x78
 80032d4:	817b      	strh	r3, [r7, #10]
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_GPIO_EXTI_Callback+0x8c>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	f107 010a 	add.w	r1, r7, #10
 80032de:	2300      	movs	r3, #0
 80032e0:	2200      	movs	r2, #0
 80032e2:	f008 f84b 	bl	800b37c <osMessageQueuePut>
}
 80032e6:	e00d      	b.n	8003304 <HAL_GPIO_EXTI_Callback+0x80>
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d109      	bne.n	8003304 <HAL_GPIO_EXTI_Callback+0x80>
		uint16_t needle_set_point_change = 20; // TODO change the stop point
 80032f0:	2314      	movs	r3, #20
 80032f2:	813b      	strh	r3, [r7, #8]
		osMessageQueuePut(QueueNeedleSetPointCommunicationHandle, &needle_set_point_change, 0, 0U);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_GPIO_EXTI_Callback+0x8c>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	f107 0108 	add.w	r1, r7, #8
 80032fc:	2300      	movs	r3, #0
 80032fe:	2200      	movs	r2, #0
 8003300:	f008 f83c 	bl	800b37c <osMessageQueuePut>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200004d4 	.word	0x200004d4
 8003310:	200004d0 	.word	0x200004d0

08003314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b81      	ldr	r3, [pc, #516]	; (8003530 <MX_GPIO_Init+0x21c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a80      	ldr	r2, [pc, #512]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003330:	f043 0304 	orr.w	r3, r3, #4
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b7e      	ldr	r3, [pc, #504]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003342:	4b7b      	ldr	r3, [pc, #492]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a7a      	ldr	r2, [pc, #488]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003348:	f043 0320 	orr.w	r3, r3, #32
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b78      	ldr	r3, [pc, #480]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800335a:	4b75      	ldr	r3, [pc, #468]	; (8003530 <MX_GPIO_Init+0x21c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a74      	ldr	r2, [pc, #464]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b72      	ldr	r3, [pc, #456]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b6f      	ldr	r3, [pc, #444]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a6e      	ldr	r2, [pc, #440]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	4b69      	ldr	r3, [pc, #420]	; (8003530 <MX_GPIO_Init+0x21c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a68      	ldr	r2, [pc, #416]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b66      	ldr	r3, [pc, #408]	; (8003530 <MX_GPIO_Init+0x21c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a62      	ldr	r2, [pc, #392]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033a8:	f043 0310 	orr.w	r3, r3, #16
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b60      	ldr	r3, [pc, #384]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ba:	4b5d      	ldr	r3, [pc, #372]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a5c      	ldr	r2, [pc, #368]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b5a      	ldr	r3, [pc, #360]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a56      	ldr	r2, [pc, #344]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b54      	ldr	r3, [pc, #336]	; (8003530 <MX_GPIO_Init+0x21c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin, GPIO_PIN_RESET);
 80033ea:	2200      	movs	r2, #0
 80033ec:	21e0      	movs	r1, #224	; 0xe0
 80033ee:	4851      	ldr	r0, [pc, #324]	; (8003534 <MX_GPIO_Init+0x220>)
 80033f0:	f002 fe46 	bl	8006080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 80033f4:	2200      	movs	r2, #0
 80033f6:	f644 71c1 	movw	r1, #20417	; 0x4fc1
 80033fa:	484f      	ldr	r0, [pc, #316]	; (8003538 <MX_GPIO_Init+0x224>)
 80033fc:	f002 fe40 	bl	8006080 <HAL_GPIO_WritePin>
                          |FAN_OUT_Pin|LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8003400:	2200      	movs	r2, #0
 8003402:	f24d 4180 	movw	r1, #54400	; 0xd480
 8003406:	484d      	ldr	r0, [pc, #308]	; (800353c <MX_GPIO_Init+0x228>)
 8003408:	f002 fe3a 	bl	8006080 <HAL_GPIO_WritePin>
                          |MS2_NEEDLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003412:	484b      	ldr	r0, [pc, #300]	; (8003540 <MX_GPIO_Init+0x22c>)
 8003414:	f002 fe34 	bl	8006080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003418:	2200      	movs	r2, #0
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	4849      	ldr	r0, [pc, #292]	; (8003544 <MX_GPIO_Init+0x230>)
 800341e:	f002 fe2f 	bl	8006080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin;
 8003422:	23e0      	movs	r3, #224	; 0xe0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003426:	2301      	movs	r3, #1
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800342e:	2302      	movs	r3, #2
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003436:	4619      	mov	r1, r3
 8003438:	483e      	ldr	r0, [pc, #248]	; (8003534 <MX_GPIO_Init+0x220>)
 800343a:	f002 fc75 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|FAN_OUT_Pin|LD2_Pin;
 800343e:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003444:	2301      	movs	r3, #1
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	4838      	ldr	r0, [pc, #224]	; (8003538 <MX_GPIO_Init+0x224>)
 8003458:	f002 fc66 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 800345c:	f24d 4380 	movw	r3, #54400	; 0xd480
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
                          |MS2_NEEDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003462:	2301      	movs	r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800346a:	2302      	movs	r3, #2
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800346e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003472:	4619      	mov	r1, r3
 8003474:	4831      	ldr	r0, [pc, #196]	; (800353c <MX_GPIO_Init+0x228>)
 8003476:	f002 fc57 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = END_STOP_NEEDLE_1_Pin|END_STOP_SYRINGE_1_Pin|END_STOP_SYRINGE_2_Pin|END_STOP_NEEDLE_2_Pin;
 800347a:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003480:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003486:	2301      	movs	r3, #1
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800348a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	482a      	ldr	r0, [pc, #168]	; (800353c <MX_GPIO_Init+0x228>)
 8003492:	f002 fc49 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin;
 8003496:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349c:	2301      	movs	r3, #1
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a4:	2302      	movs	r3, #2
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4822      	ldr	r0, [pc, #136]	; (8003538 <MX_GPIO_Init+0x224>)
 80034b0:	f002 fc3a 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin;
 80034b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ba:	2301      	movs	r3, #1
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c2:	2302      	movs	r3, #2
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	4619      	mov	r1, r3
 80034cc:	481c      	ldr	r0, [pc, #112]	; (8003540 <MX_GPIO_Init+0x22c>)
 80034ce:	f002 fc2b 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2300      	movs	r3, #0
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e6:	4619      	mov	r1, r3
 80034e8:	4816      	ldr	r0, [pc, #88]	; (8003544 <MX_GPIO_Init+0x230>)
 80034ea:	f002 fc1d 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80034fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fe:	4619      	mov	r1, r3
 8003500:	4810      	ldr	r0, [pc, #64]	; (8003544 <MX_GPIO_Init+0x230>)
 8003502:	f002 fc11 	bl	8005d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2105      	movs	r1, #5
 800350a:	2017      	movs	r0, #23
 800350c:	f002 fb50 	bl	8005bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003510:	2017      	movs	r0, #23
 8003512:	f002 fb69 	bl	8005be8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2105      	movs	r1, #5
 800351a:	2028      	movs	r0, #40	; 0x28
 800351c:	f002 fb48 	bl	8005bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003520:	2028      	movs	r0, #40	; 0x28
 8003522:	f002 fb61 	bl	8005be8 <HAL_NVIC_EnableIRQ>

}
 8003526:	bf00      	nop
 8003528:	3738      	adds	r7, #56	; 0x38
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40021000 	.word	0x40021000
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021800 	.word	0x40021800

08003548 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <MX_I2C2_Init+0x74>)
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <MX_I2C2_Init+0x78>)
 8003550:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <MX_I2C2_Init+0x74>)
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <MX_I2C2_Init+0x7c>)
 8003556:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <MX_I2C2_Init+0x74>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <MX_I2C2_Init+0x74>)
 8003560:	2201      	movs	r2, #1
 8003562:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <MX_I2C2_Init+0x74>)
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <MX_I2C2_Init+0x74>)
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <MX_I2C2_Init+0x74>)
 8003572:	2200      	movs	r2, #0
 8003574:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <MX_I2C2_Init+0x74>)
 8003578:	2200      	movs	r2, #0
 800357a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <MX_I2C2_Init+0x74>)
 800357e:	2200      	movs	r2, #0
 8003580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003582:	480e      	ldr	r0, [pc, #56]	; (80035bc <MX_I2C2_Init+0x74>)
 8003584:	f002 fdc8 	bl	8006118 <HAL_I2C_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800358e:	f000 f999 	bl	80038c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003592:	2100      	movs	r1, #0
 8003594:	4809      	ldr	r0, [pc, #36]	; (80035bc <MX_I2C2_Init+0x74>)
 8003596:	f003 fb23 	bl	8006be0 <HAL_I2CEx_ConfigAnalogFilter>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80035a0:	f000 f990 	bl	80038c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80035a4:	2100      	movs	r1, #0
 80035a6:	4805      	ldr	r0, [pc, #20]	; (80035bc <MX_I2C2_Init+0x74>)
 80035a8:	f003 fb65 	bl	8006c76 <HAL_I2CEx_ConfigDigitalFilter>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80035b2:	f000 f987 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000528 	.word	0x20000528
 80035c0:	40005800 	.word	0x40005800
 80035c4:	00301739 	.word	0x00301739

080035c8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <MX_I2C4_Init+0x74>)
 80035ce:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <MX_I2C4_Init+0x78>)
 80035d0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00301739;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <MX_I2C4_Init+0x74>)
 80035d4:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <MX_I2C4_Init+0x7c>)
 80035d6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <MX_I2C4_Init+0x74>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <MX_I2C4_Init+0x74>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <MX_I2C4_Init+0x74>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <MX_I2C4_Init+0x74>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <MX_I2C4_Init+0x74>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <MX_I2C4_Init+0x74>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <MX_I2C4_Init+0x74>)
 80035fe:	2200      	movs	r2, #0
 8003600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003602:	480e      	ldr	r0, [pc, #56]	; (800363c <MX_I2C4_Init+0x74>)
 8003604:	f002 fd88 	bl	8006118 <HAL_I2C_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800360e:	f000 f959 	bl	80038c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003612:	2100      	movs	r1, #0
 8003614:	4809      	ldr	r0, [pc, #36]	; (800363c <MX_I2C4_Init+0x74>)
 8003616:	f003 fae3 	bl	8006be0 <HAL_I2CEx_ConfigAnalogFilter>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003620:	f000 f950 	bl	80038c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003624:	2100      	movs	r1, #0
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <MX_I2C4_Init+0x74>)
 8003628:	f003 fb25 	bl	8006c76 <HAL_I2CEx_ConfigDigitalFilter>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003632:	f000 f947 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000574 	.word	0x20000574
 8003640:	40006000 	.word	0x40006000
 8003644:	00301739 	.word	0x00301739

08003648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0ac      	sub	sp, #176	; 0xb0
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	2284      	movs	r2, #132	; 0x84
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f00b fad5 	bl	800ec18 <memset>
  if(i2cHandle->Instance==I2C2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a44      	ldr	r2, [pc, #272]	; (8003784 <HAL_I2C_MspInit+0x13c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d13d      	bne.n	80036f4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003684:	f107 0318 	add.w	r3, r7, #24
 8003688:	4618      	mov	r0, r3
 800368a:	f004 f84d 	bl	8007728 <HAL_RCCEx_PeriphCLKConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003694:	f000 f916 	bl	80038c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003698:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_I2C_MspInit+0x140>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	4a3a      	ldr	r2, [pc, #232]	; (8003788 <HAL_I2C_MspInit+0x140>)
 800369e:	f043 0320 	orr.w	r3, r3, #32
 80036a2:	6313      	str	r3, [r2, #48]	; 0x30
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_I2C_MspInit+0x140>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036b6:	2312      	movs	r3, #18
 80036b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036c8:	2304      	movs	r3, #4
 80036ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036d2:	4619      	mov	r1, r3
 80036d4:	482d      	ldr	r0, [pc, #180]	; (800378c <HAL_I2C_MspInit+0x144>)
 80036d6:	f002 fb27 	bl	8005d28 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_I2C_MspInit+0x140>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_I2C_MspInit+0x140>)
 80036e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_I2C_MspInit+0x140>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80036f2:	e042      	b.n	800377a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <HAL_I2C_MspInit+0x148>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d13d      	bne.n	800377a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80036fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003702:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800370a:	f107 0318 	add.w	r3, r7, #24
 800370e:	4618      	mov	r0, r3
 8003710:	f004 f80a 	bl	8007728 <HAL_RCCEx_PeriphCLKConfig>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800371a:	f000 f8d3 	bl	80038c4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_I2C_MspInit+0x140>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_I2C_MspInit+0x140>)
 8003724:	f043 0320 	orr.w	r3, r3, #32
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_I2C_MspInit+0x140>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003736:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800373a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800373e:	2312      	movs	r3, #18
 8003740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003750:	2304      	movs	r3, #4
 8003752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003756:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800375a:	4619      	mov	r1, r3
 800375c:	480b      	ldr	r0, [pc, #44]	; (800378c <HAL_I2C_MspInit+0x144>)
 800375e:	f002 fae3 	bl	8005d28 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_I2C_MspInit+0x140>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_I2C_MspInit+0x140>)
 8003768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_I2C_MspInit+0x140>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
}
 800377a:	bf00      	nop
 800377c:	37b0      	adds	r7, #176	; 0xb0
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40005800 	.word	0x40005800
 8003788:	40023800 	.word	0x40023800
 800378c:	40021400 	.word	0x40021400
 8003790:	40006000 	.word	0x40006000

08003794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003798:	f002 f925 	bl	80059e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800379c:	f000 f818 	bl	80037d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037a0:	f7ff fdb8 	bl	8003314 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80037a4:	f002 f85e 	bl	8005864 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80037a8:	f7ff fece 	bl	8003548 <MX_I2C2_Init>
  MX_I2C4_Init();
 80037ac:	f7ff ff0c 	bl	80035c8 <MX_I2C4_Init>
  MX_TIM2_Init();
 80037b0:	f001 fe02 	bl	80053b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80037b4:	f001 fe78 	bl	80054a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80037b8:	f001 fec6 	bl	8005548 <MX_TIM4_Init>
  MX_TIM5_Init();
 80037bc:	f001 ff3c 	bl	8005638 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80037c0:	f007 f82a 	bl	800a818 <osKernelInitialize>
  MX_FREERTOS_Init();
 80037c4:	f7fe fe10 	bl	80023e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80037c8:	f007 f85a 	bl	800a880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037cc:	e7fe      	b.n	80037cc <main+0x38>
	...

080037d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b094      	sub	sp, #80	; 0x50
 80037d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037d6:	f107 0320 	add.w	r3, r7, #32
 80037da:	2230      	movs	r2, #48	; 0x30
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f00b fa1a 	bl	800ec18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037f4:	f003 fa8c 	bl	8006d10 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <SystemClock_Config+0xc8>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a26      	ldr	r2, [pc, #152]	; (8003898 <SystemClock_Config+0xc8>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <SystemClock_Config+0xc8>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <SystemClock_Config+0xcc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <SystemClock_Config+0xcc>)
 800381a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <SystemClock_Config+0xcc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800382c:	2301      	movs	r3, #1
 800382e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003836:	2302      	movs	r3, #2
 8003838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800383a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003840:	2304      	movs	r3, #4
 8003842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003844:	2348      	movs	r3, #72	; 0x48
 8003846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003848:	2302      	movs	r3, #2
 800384a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800384c:	2303      	movs	r3, #3
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003850:	f107 0320 	add.w	r3, r7, #32
 8003854:	4618      	mov	r0, r3
 8003856:	f003 fa6b 	bl	8006d30 <HAL_RCC_OscConfig>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003860:	f000 f830 	bl	80038c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003864:	230f      	movs	r3, #15
 8003866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003868:	2302      	movs	r3, #2
 800386a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f003 fcf9 	bl	8007278 <HAL_RCC_ClockConfig>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800388c:	f000 f81a 	bl	80038c4 <Error_Handler>
  }
}
 8003890:	bf00      	nop
 8003892:	3750      	adds	r7, #80	; 0x50
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000

080038a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038b2:	f002 f8a5 	bl	8005a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40002000 	.word	0x40002000

080038c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038c8:	b672      	cpsid	i
}
 80038ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038cc:	e7fe      	b.n	80038cc <Error_Handler+0x8>

080038ce <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4603      	mov	r3, r0
 80038dc:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d204      	bcs.n	80038f0 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	701a      	strb	r2, [r3, #0]
  }
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <_out_char+0x1e>
    _putchar(character);
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fb6d 	bl	8003010 <_putchar>
  }
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e002      	b.n	8003954 <_strnlen_s+0x16>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3301      	adds	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <_strnlen_s+0x28>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1e5a      	subs	r2, r3, #1
 8003960:	603a      	str	r2, [r7, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f3      	bne.n	800394e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1ad3      	subs	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	2b2f      	cmp	r3, #47	; 0x2f
 8003986:	d904      	bls.n	8003992 <_is_digit+0x1a>
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	2b39      	cmp	r3, #57	; 0x39
 800398c:	d801      	bhi.n	8003992 <_is_digit+0x1a>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <_is_digit+0x1c>
 8003992:	2300      	movs	r3, #0
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80039b2:	e00e      	b.n	80039d2 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4618      	mov	r0, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	1c59      	adds	r1, r3, #1
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	4403      	add	r3, r0
 80039ce:	3b30      	subs	r3, #48	; 0x30
 80039d0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ffcd 	bl	8003978 <_is_digit>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e7      	bne.n	80039b4 <_atoi+0xe>
  }
  return i;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b087      	sub	sp, #28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d125      	bne.n	8003a56 <_out_rev+0x68>
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d120      	bne.n	8003a56 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e00a      	b.n	8003a30 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	1c53      	adds	r3, r2, #1
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	68fc      	ldr	r4, [r7, #12]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	2020      	movs	r0, #32
 8003a28:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3f0      	bcc.n	8003a1a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003a38:	e00d      	b.n	8003a56 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	4413      	add	r3, r2
 8003a46:	7818      	ldrb	r0, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	1c53      	adds	r3, r2, #1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	68fc      	ldr	r4, [r7, #12]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	47a0      	blx	r4
  while (len) {
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003a66:	e007      	b.n	8003a78 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	1c53      	adds	r3, r2, #1
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	68fc      	ldr	r4, [r7, #12]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	2020      	movs	r0, #32
 8003a76:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8f1      	bhi.n	8003a68 <_out_rev+0x7a>
    }
  }

  return idx;
 8003a84:	687b      	ldr	r3, [r7, #4]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd90      	pop	{r4, r7, pc}

08003a8e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b088      	sub	sp, #32
 8003a92:	af04      	add	r7, sp, #16
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d136      	bne.n	8003b14 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d018      	beq.n	8003ade <_ntoa_format+0x50>
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <_ntoa_format+0x50>
 8003ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <_ntoa_format+0x3a>
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <_ntoa_format+0x50>
      width--;
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	3b01      	subs	r3, #1
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003ace:	e006      	b.n	8003ade <_ntoa_format+0x50>
      buf[len++] = '0';
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	61fa      	str	r2, [r7, #28]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4413      	add	r3, r2
 8003ada:	2230      	movs	r2, #48	; 0x30
 8003adc:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20a      	bcs.n	8003afc <_ntoa_format+0x6e>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b1f      	cmp	r3, #31
 8003aea:	d9f1      	bls.n	8003ad0 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003aec:	e006      	b.n	8003afc <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	61fa      	str	r2, [r7, #28]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	2230      	movs	r2, #48	; 0x30
 8003afa:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <_ntoa_format+0x86>
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d202      	bcs.n	8003b14 <_ntoa_format+0x86>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b1f      	cmp	r3, #31
 8003b12:	d9ec      	bls.n	8003aee <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d058      	beq.n	8003bd0 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <_ntoa_format+0xc8>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <_ntoa_format+0xc8>
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d003      	beq.n	8003b3e <_ntoa_format+0xb0>
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <_ntoa_format+0xc8>
      len--;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <_ntoa_format+0xc8>
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d102      	bne.n	8003b56 <_ntoa_format+0xc8>
        len--;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d10f      	bne.n	8003b7c <_ntoa_format+0xee>
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <_ntoa_format+0xee>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b1f      	cmp	r3, #31
 8003b6a:	d807      	bhi.n	8003b7c <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	61fa      	str	r2, [r7, #28]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4413      	add	r3, r2
 8003b76:	2278      	movs	r2, #120	; 0x78
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e01f      	b.n	8003bbc <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d10f      	bne.n	8003ba2 <_ntoa_format+0x114>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <_ntoa_format+0x114>
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b1f      	cmp	r3, #31
 8003b90:	d807      	bhi.n	8003ba2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	61fa      	str	r2, [r7, #28]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	2258      	movs	r2, #88	; 0x58
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e00c      	b.n	8003bbc <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d109      	bne.n	8003bbc <_ntoa_format+0x12e>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b1f      	cmp	r3, #31
 8003bac:	d806      	bhi.n	8003bbc <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	2262      	movs	r2, #98	; 0x62
 8003bba:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b1f      	cmp	r3, #31
 8003bc0:	d806      	bhi.n	8003bd0 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	61fa      	str	r2, [r7, #28]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4413      	add	r3, r2
 8003bcc:	2230      	movs	r2, #48	; 0x30
 8003bce:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b1f      	cmp	r3, #31
 8003bd4:	d824      	bhi.n	8003c20 <_ntoa_format+0x192>
    if (negative) {
 8003bd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <_ntoa_format+0x160>
      buf[len++] = '-';
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	61fa      	str	r2, [r7, #28]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	222d      	movs	r2, #45	; 0x2d
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e018      	b.n	8003c20 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	61fa      	str	r2, [r7, #28]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4413      	add	r3, r2
 8003c02:	222b      	movs	r2, #43	; 0x2b
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e00b      	b.n	8003c20 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	61fa      	str	r2, [r7, #28]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	9303      	str	r3, [sp, #12]
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	9302      	str	r3, [sp, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff fed9 	bl	80039ee <_out_rev>
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b096      	sub	sp, #88	; 0x58
 8003c4a:	af08      	add	r7, sp, #32
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c60:	f023 0310 	bic.w	r3, r3, #16
 8003c64:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <_ntoa_long+0x30>
 8003c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d032      	beq.n	8003cdc <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c80:	fb01 f202 	mul.w	r2, r1, r2
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c8e:	2b09      	cmp	r3, #9
 8003c90:	d804      	bhi.n	8003c9c <_ntoa_long+0x56>
 8003c92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c96:	3330      	adds	r3, #48	; 0x30
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	e00d      	b.n	8003cb8 <_ntoa_long+0x72>
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <_ntoa_long+0x64>
 8003ca6:	2241      	movs	r2, #65	; 0x41
 8003ca8:	e000      	b.n	8003cac <_ntoa_long+0x66>
 8003caa:	2261      	movs	r2, #97	; 0x61
 8003cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cb0:	4413      	add	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3b0a      	subs	r3, #10
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	6379      	str	r1, [r7, #52]	; 0x34
 8003cbe:	3338      	adds	r3, #56	; 0x38
 8003cc0:	443b      	add	r3, r7
 8003cc2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <_ntoa_long+0x96>
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	2b1f      	cmp	r3, #31
 8003cda:	d9cc      	bls.n	8003c76 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cde:	9306      	str	r3, [sp, #24]
 8003ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003cf0:	9302      	str	r3, [sp, #8]
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	f107 0310 	add.w	r3, r7, #16
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff fec3 	bl	8003a8e <_ntoa_format>
 8003d08:	4603      	mov	r3, r0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3738      	adds	r7, #56	; 0x38
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b096      	sub	sp, #88	; 0x58
 8003d16:	af08      	add	r7, sp, #32
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003d24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d103      	bne.n	8003d34 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003d2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <_ntoa_long_long+0x34>
 8003d3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d037      	beq.n	8003db6 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003d46:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d4e:	f7fc ff4d 	bl	8000bec <__aeabi_uldivmod>
 8003d52:	4613      	mov	r3, r2
 8003d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003d58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d804      	bhi.n	8003d6a <_ntoa_long_long+0x58>
 8003d60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d64:	3330      	adds	r3, #48	; 0x30
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	e00d      	b.n	8003d86 <_ntoa_long_long+0x74>
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <_ntoa_long_long+0x66>
 8003d74:	2241      	movs	r2, #65	; 0x41
 8003d76:	e000      	b.n	8003d7a <_ntoa_long_long+0x68>
 8003d78:	2261      	movs	r2, #97	; 0x61
 8003d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d7e:	4413      	add	r3, r2
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	3b0a      	subs	r3, #10
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	6379      	str	r1, [r7, #52]	; 0x34
 8003d8c:	3338      	adds	r3, #56	; 0x38
 8003d8e:	443b      	add	r3, r7
 8003d90:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d9c:	f7fc ff26 	bl	8000bec <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003da8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d002      	beq.n	8003db6 <_ntoa_long_long+0xa4>
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	2b1f      	cmp	r3, #31
 8003db4:	d9c7      	bls.n	8003d46 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dba:	9206      	str	r2, [sp, #24]
 8003dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dbe:	9205      	str	r2, [sp, #20]
 8003dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc2:	9204      	str	r2, [sp, #16]
 8003dc4:	9303      	str	r3, [sp, #12]
 8003dc6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003dca:	9302      	str	r3, [sp, #8]
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	f107 0310 	add.w	r3, r7, #16
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff fe56 	bl	8003a8e <_ntoa_format>
 8003de2:	4603      	mov	r3, r0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3738      	adds	r7, #56	; 0x38
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	0000      	movs	r0, r0
	...

08003df0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b09d      	sub	sp, #116	; 0x74
 8003df4:	af04      	add	r7, sp, #16
 8003df6:	6178      	str	r0, [r7, #20]
 8003df8:	6139      	str	r1, [r7, #16]
 8003dfa:	60fa      	str	r2, [r7, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e1a:	f7fc fe1d 	bl	8000a58 <__aeabi_dcmpeq>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	4ba7      	ldr	r3, [pc, #668]	; (80040d0 <_ftoa+0x2e0>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	6939      	ldr	r1, [r7, #16]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f7ff fdd7 	bl	80039ee <_out_rev>
 8003e40:	4603      	mov	r3, r0
 8003e42:	e222      	b.n	800428a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295
 8003e48:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e50:	f7fc fe0c 	bl	8000a6c <__aeabi_dcmplt>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00f      	beq.n	8003e7a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5c:	9303      	str	r3, [sp, #12]
 8003e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e60:	9302      	str	r3, [sp, #8]
 8003e62:	2304      	movs	r3, #4
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	4b9b      	ldr	r3, [pc, #620]	; (80040d4 <_ftoa+0x2e4>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	6939      	ldr	r1, [r7, #16]
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f7ff fdbc 	bl	80039ee <_out_rev>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e207      	b.n	800428a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	4b96      	ldr	r3, [pc, #600]	; (80040d8 <_ftoa+0x2e8>)
 8003e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e84:	f7fc fe10 	bl	8000aa8 <__aeabi_dcmpgt>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01d      	beq.n	8003eca <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <_ftoa+0xac>
 8003e98:	4b90      	ldr	r3, [pc, #576]	; (80040dc <_ftoa+0x2ec>)
 8003e9a:	e000      	b.n	8003e9e <_ftoa+0xae>
 8003e9c:	4b90      	ldr	r3, [pc, #576]	; (80040e0 <_ftoa+0x2f0>)
 8003e9e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ea0:	f002 0204 	and.w	r2, r2, #4
 8003ea4:	2a00      	cmp	r2, #0
 8003ea6:	d001      	beq.n	8003eac <_ftoa+0xbc>
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	e000      	b.n	8003eae <_ftoa+0xbe>
 8003eac:	2203      	movs	r2, #3
 8003eae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003eb0:	9103      	str	r1, [sp, #12]
 8003eb2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003eb4:	9102      	str	r1, [sp, #8]
 8003eb6:	9201      	str	r2, [sp, #4]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	6939      	ldr	r1, [r7, #16]
 8003ec0:	6978      	ldr	r0, [r7, #20]
 8003ec2:	f7ff fd94 	bl	80039ee <_out_rev>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	e1df      	b.n	800428a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003eca:	a37d      	add	r3, pc, #500	; (adr r3, 80040c0 <_ftoa+0x2d0>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ed4:	f7fc fde8 	bl	8000aa8 <__aeabi_dcmpgt>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <_ftoa+0x102>
 8003ede:	a37a      	add	r3, pc, #488	; (adr r3, 80040c8 <_ftoa+0x2d8>)
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ee8:	f7fc fdc0 	bl	8000a6c <__aeabi_dcmplt>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00f      	beq.n	8003f12 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef4:	9302      	str	r3, [sp, #8]
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	ed97 0b00 	vldr	d0, [r7]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	6939      	ldr	r1, [r7, #16]
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f000 f9c9 	bl	80042a0 <_etoa>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	e1bb      	b.n	800428a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f24:	f7fc fda2 	bl	8000a6c <__aeabi_dcmplt>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00e      	beq.n	8003f4c <_ftoa+0x15c>
    negative = true;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	f7fc f96a 	bl	8000218 <__aeabi_dsub>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003f56:	2306      	movs	r3, #6
 8003f58:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003f5a:	e00a      	b.n	8003f72 <_ftoa+0x182>
    buf[len++] = '0';
 8003f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f62:	3360      	adds	r3, #96	; 0x60
 8003f64:	443b      	add	r3, r7
 8003f66:	2230      	movs	r2, #48	; 0x30
 8003f68:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f74:	2b1f      	cmp	r3, #31
 8003f76:	d802      	bhi.n	8003f7e <_ftoa+0x18e>
 8003f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7a:	2b09      	cmp	r3, #9
 8003f7c:	d8ee      	bhi.n	8003f5c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f82:	f7fc fd9b 	bl	8000abc <__aeabi_d2iz>
 8003f86:	4603      	mov	r3, r0
 8003f88:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003f8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003f8c:	f7fc fa92 	bl	80004b4 <__aeabi_i2d>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f98:	f7fc f93e 	bl	8000218 <__aeabi_dsub>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4a4f      	ldr	r2, [pc, #316]	; (80040e4 <_ftoa+0x2f4>)
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc faea 	bl	8000588 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003fbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003fc0:	f7fc fda4 	bl	8000b0c <__aeabi_d2uiz>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003fc8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003fca:	f7fc fa63 	bl	8000494 <__aeabi_ui2d>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003fd6:	f7fc f91f 	bl	8000218 <__aeabi_dsub>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <_ftoa+0x2f8>)
 8003fe8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003fec:	f7fc fd5c 	bl	8000aa8 <__aeabi_dcmpgt>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <_ftoa+0x234>
    ++frac;
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003ffc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003ffe:	f7fc fa49 	bl	8000494 <__aeabi_ui2d>
 8004002:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <_ftoa+0x2f4>)
 8004004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc fd41 	bl	8000a94 <__aeabi_dcmpge>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01a      	beq.n	800404e <_ftoa+0x25e>
      frac = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	3301      	adds	r3, #1
 8004020:	657b      	str	r3, [r7, #84]	; 0x54
 8004022:	e014      	b.n	800404e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <_ftoa+0x2f8>)
 800402a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800402e:	f7fc fd1d 	bl	8000a6c <__aeabi_dcmplt>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <_ftoa+0x258>
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	3301      	adds	r3, #1
 800404c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800404e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004050:	2b00      	cmp	r3, #0
 8004052:	d14b      	bne.n	80040ec <_ftoa+0x2fc>
    diff = value - (double)whole;
 8004054:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004056:	f7fc fa2d 	bl	80004b4 <__aeabi_i2d>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004062:	f7fc f8d9 	bl	8000218 <__aeabi_dsub>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800406e:	2301      	movs	r3, #1
 8004070:	461c      	mov	r4, r3
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <_ftoa+0x2f8>)
 8004078:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800407c:	f7fc fcf6 	bl	8000a6c <__aeabi_dcmplt>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <_ftoa+0x29a>
 8004086:	2300      	movs	r3, #0
 8004088:	461c      	mov	r4, r3
 800408a:	b2e3      	uxtb	r3, r4
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <_ftoa+0x2ba>
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <_ftoa+0x2f8>)
 800409c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040a0:	f7fc fd02 	bl	8000aa8 <__aeabi_dcmpgt>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d064      	beq.n	8004174 <_ftoa+0x384>
 80040aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8081 	beq.w	80041b8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	3301      	adds	r3, #1
 80040ba:	657b      	str	r3, [r7, #84]	; 0x54
 80040bc:	e07c      	b.n	80041b8 <_ftoa+0x3c8>
 80040be:	bf00      	nop
 80040c0:	00000000 	.word	0x00000000
 80040c4:	41cdcd65 	.word	0x41cdcd65
 80040c8:	00000000 	.word	0x00000000
 80040cc:	c1cdcd65 	.word	0xc1cdcd65
 80040d0:	0800f328 	.word	0x0800f328
 80040d4:	0800f32c 	.word	0x0800f32c
 80040d8:	7fefffff 	.word	0x7fefffff
 80040dc:	0800f334 	.word	0x0800f334
 80040e0:	0800f33c 	.word	0x0800f33c
 80040e4:	0800f818 	.word	0x0800f818
 80040e8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80040ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80040f0:	e01f      	b.n	8004132 <_ftoa+0x342>
      --count;
 80040f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f4:	3b01      	subs	r3, #1
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80040f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040fa:	4b66      	ldr	r3, [pc, #408]	; (8004294 <_ftoa+0x4a4>)
 80040fc:	fba3 2301 	umull	r2, r3, r3, r1
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	1aca      	subs	r2, r1, r3
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004114:	3230      	adds	r2, #48	; 0x30
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	3360      	adds	r3, #96	; 0x60
 800411a:	443b      	add	r3, r7
 800411c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <_ftoa+0x4a4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	08db      	lsrs	r3, r3, #3
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004134:	2b1f      	cmp	r3, #31
 8004136:	d9dc      	bls.n	80040f2 <_ftoa+0x302>
 8004138:	e009      	b.n	800414e <_ftoa+0x35e>
        break;
 800413a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800413c:	e007      	b.n	800414e <_ftoa+0x35e>
      buf[len++] = '0';
 800413e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004144:	3360      	adds	r3, #96	; 0x60
 8004146:	443b      	add	r3, r7
 8004148:	2230      	movs	r2, #48	; 0x30
 800414a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004150:	2b1f      	cmp	r3, #31
 8004152:	d804      	bhi.n	800415e <_ftoa+0x36e>
 8004154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	64fa      	str	r2, [r7, #76]	; 0x4c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ef      	bne.n	800413e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800415e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004160:	2b1f      	cmp	r3, #31
 8004162:	d829      	bhi.n	80041b8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8004164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	65fa      	str	r2, [r7, #92]	; 0x5c
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	443b      	add	r3, r7
 800416e:	222e      	movs	r2, #46	; 0x2e
 8004170:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004174:	e020      	b.n	80041b8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8004176:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004178:	4b47      	ldr	r3, [pc, #284]	; (8004298 <_ftoa+0x4a8>)
 800417a:	fb83 1302 	smull	r1, r3, r3, r2
 800417e:	1099      	asrs	r1, r3, #2
 8004180:	17d3      	asrs	r3, r2, #31
 8004182:	1ac9      	subs	r1, r1, r3
 8004184:	460b      	mov	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	1ad1      	subs	r1, r2, r3
 800418e:	b2ca      	uxtb	r2, r1
 8004190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004196:	3230      	adds	r2, #48	; 0x30
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	3360      	adds	r3, #96	; 0x60
 800419c:	443b      	add	r3, r7
 800419e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	4a3c      	ldr	r2, [pc, #240]	; (8004298 <_ftoa+0x4a8>)
 80041a6:	fb82 1203 	smull	r1, r2, r2, r3
 80041aa:	1092      	asrs	r2, r2, #2
 80041ac:	17db      	asrs	r3, r3, #31
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	657b      	str	r3, [r7, #84]	; 0x54
 80041b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80041b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ba:	2b1f      	cmp	r3, #31
 80041bc:	d9db      	bls.n	8004176 <_ftoa+0x386>
 80041be:	e000      	b.n	80041c2 <_ftoa+0x3d2>
      break;
 80041c0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80041c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d123      	bne.n	8004214 <_ftoa+0x424>
 80041cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01e      	beq.n	8004214 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d014      	beq.n	8004206 <_ftoa+0x416>
 80041dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <_ftoa+0x3fe>
 80041e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <_ftoa+0x416>
      width--;
 80041ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f0:	3b01      	subs	r3, #1
 80041f2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80041f4:	e007      	b.n	8004206 <_ftoa+0x416>
      buf[len++] = '0';
 80041f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041fc:	3360      	adds	r3, #96	; 0x60
 80041fe:	443b      	add	r3, r7
 8004200:	2230      	movs	r2, #48	; 0x30
 8004202:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004206:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	429a      	cmp	r2, r3
 800420c:	d202      	bcs.n	8004214 <_ftoa+0x424>
 800420e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004210:	2b1f      	cmp	r3, #31
 8004212:	d9f0      	bls.n	80041f6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004216:	2b1f      	cmp	r3, #31
 8004218:	d827      	bhi.n	800426a <_ftoa+0x47a>
    if (negative) {
 800421a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <_ftoa+0x444>
      buf[len++] = '-';
 8004222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004228:	3360      	adds	r3, #96	; 0x60
 800422a:	443b      	add	r3, r7
 800422c:	222d      	movs	r2, #45	; 0x2d
 800422e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004232:	e01a      	b.n	800426a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8004234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800423e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004244:	3360      	adds	r3, #96	; 0x60
 8004246:	443b      	add	r3, r7
 8004248:	222b      	movs	r2, #43	; 0x2b
 800424a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800424e:	e00c      	b.n	800426a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <_ftoa+0x47a>
      buf[len++] = ' ';
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004260:	3360      	adds	r3, #96	; 0x60
 8004262:	443b      	add	r3, r7
 8004264:	2220      	movs	r2, #32
 8004266:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800426a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426c:	9303      	str	r3, [sp, #12]
 800426e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	f107 0318 	add.w	r3, r7, #24
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6939      	ldr	r1, [r7, #16]
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff fbb3 	bl	80039ee <_out_rev>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3764      	adds	r7, #100	; 0x64
 800428e:	46bd      	mov	sp, r7
 8004290:	bd90      	pop	{r4, r7, pc}
 8004292:	bf00      	nop
 8004294:	cccccccd 	.word	0xcccccccd
 8004298:	66666667 	.word	0x66666667
 800429c:	00000000 	.word	0x00000000

080042a0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	b09f      	sub	sp, #124	; 0x7c
 80042a6:	af06      	add	r7, sp, #24
 80042a8:	6278      	str	r0, [r7, #36]	; 0x24
 80042aa:	6239      	str	r1, [r7, #32]
 80042ac:	61fa      	str	r2, [r7, #28]
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80042b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042bc:	f7fc fbcc 	bl	8000a58 <__aeabi_dcmpeq>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d014      	beq.n	80042f0 <_etoa+0x50>
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	4bc1      	ldr	r3, [pc, #772]	; (80045d0 <_etoa+0x330>)
 80042cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042d0:	f7fc fbea 	bl	8000aa8 <__aeabi_dcmpgt>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <_etoa+0x50>
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80042e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042e6:	f7fc fbc1 	bl	8000a6c <__aeabi_dcmplt>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80042f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042f4:	9302      	str	r3, [sp, #8]
 80042f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	ed97 0b04 	vldr	d0, [r7, #16]
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	6a39      	ldr	r1, [r7, #32]
 800430c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800430e:	f7ff fd6f 	bl	8003df0 <_ftoa>
 8004312:	4603      	mov	r3, r0
 8004314:	e23f      	b.n	8004796 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8004316:	2301      	movs	r3, #1
 8004318:	461e      	mov	r6, r3
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004326:	f7fc fba1 	bl	8000a6c <__aeabi_dcmplt>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <_etoa+0x94>
 8004330:	2300      	movs	r3, #0
 8004332:	461e      	mov	r6, r3
 8004334:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8004338:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <_etoa+0xb4>
    value = -value;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	ed97 7b00 	vldr	d7, [r7]
 8004350:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004360:	2306      	movs	r3, #6
 8004362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004366:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800436a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800436e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	0d0a      	lsrs	r2, r1, #20
 800437c:	2300      	movs	r3, #0
 800437e:	4613      	mov	r3, r2
 8004380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004384:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004388:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800438a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438e:	4690      	mov	r8, r2
 8004390:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8004394:	4644      	mov	r4, r8
 8004396:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800439a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800439e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80043a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80043a4:	f7fc f886 	bl	80004b4 <__aeabi_i2d>
 80043a8:	a37d      	add	r3, pc, #500	; (adr r3, 80045a0 <_etoa+0x300>)
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fc f8eb 	bl	8000588 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	a37b      	add	r3, pc, #492	; (adr r3, 80045a8 <_etoa+0x308>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fb ff2c 	bl	800021c <__adddf3>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	461d      	mov	r5, r3
 80043cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <_etoa+0x334>)
 80043d6:	f7fb ff1f 	bl	8000218 <__aeabi_dsub>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	a373      	add	r3, pc, #460	; (adr r3, 80045b0 <_etoa+0x310>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc f8ce 	bl	8000588 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4620      	mov	r0, r4
 80043f2:	4629      	mov	r1, r5
 80043f4:	f7fb ff12 	bl	800021c <__adddf3>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f7fc fb5c 	bl	8000abc <__aeabi_d2iz>
 8004404:	4603      	mov	r3, r0
 8004406:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004408:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800440a:	f7fc f853 	bl	80004b4 <__aeabi_i2d>
 800440e:	a36a      	add	r3, pc, #424	; (adr r3, 80045b8 <_etoa+0x318>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc f8b8 	bl	8000588 <__aeabi_dmul>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <_etoa+0x338>)
 8004426:	f7fb fef9 	bl	800021c <__adddf3>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	f7fc fb43 	bl	8000abc <__aeabi_d2iz>
 8004436:	4603      	mov	r3, r0
 8004438:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800443a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800443c:	f7fc f83a 	bl	80004b4 <__aeabi_i2d>
 8004440:	a35f      	add	r3, pc, #380	; (adr r3, 80045c0 <_etoa+0x320>)
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f7fc f89f 	bl	8000588 <__aeabi_dmul>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4614      	mov	r4, r2
 8004450:	461d      	mov	r5, r3
 8004452:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004454:	f7fc f82e 	bl	80004b4 <__aeabi_i2d>
 8004458:	a35b      	add	r3, pc, #364	; (adr r3, 80045c8 <_etoa+0x328>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc f893 	bl	8000588 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f7fb fed5 	bl	8000218 <__aeabi_dsub>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8004476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800447a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800447e:	f7fc f883 	bl	8000588 <__aeabi_dmul>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004490:	17da      	asrs	r2, r3, #31
 8004492:	469a      	mov	sl, r3
 8004494:	4693      	mov	fp, r2
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80044a2:	2200      	movs	r2, #0
 80044a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80044a8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80044ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	f7fb feb2 	bl	800021c <__adddf3>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	4699      	mov	r9, r3
 80044c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044cc:	f7fb fea4 	bl	8000218 <__aeabi_dsub>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4692      	mov	sl, r2
 80044d6:	469b      	mov	fp, r3
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <_etoa+0x33c>)
 80044de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80044e2:	f7fc f97b 	bl	80007dc <__aeabi_ddiv>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <_etoa+0x340>)
 80044f4:	f7fb fe92 	bl	800021c <__adddf3>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004500:	f7fc f96c 	bl	80007dc <__aeabi_ddiv>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <_etoa+0x344>)
 8004512:	f7fb fe83 	bl	800021c <__adddf3>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800451e:	f7fc f95d 	bl	80007dc <__aeabi_ddiv>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4650      	mov	r0, sl
 8004528:	4659      	mov	r1, fp
 800452a:	f7fb fe77 	bl	800021c <__adddf3>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4640      	mov	r0, r8
 8004534:	4649      	mov	r1, r9
 8004536:	f7fc f951 	bl	80007dc <__aeabi_ddiv>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <_etoa+0x348>)
 8004548:	f7fb fe68 	bl	800021c <__adddf3>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fc f818 	bl	8000588 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004564:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004568:	f7fc fa80 	bl	8000a6c <__aeabi_dcmplt>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <_etoa+0x2ee>
    expval--;
 8004572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004574:	3b01      	subs	r3, #1
 8004576:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004578:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <_etoa+0x340>)
 8004582:	f7fc f92b 	bl	80007dc <__aeabi_ddiv>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800458e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004590:	2b63      	cmp	r3, #99	; 0x63
 8004592:	dc2b      	bgt.n	80045ec <_etoa+0x34c>
 8004594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004596:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800459a:	db27      	blt.n	80045ec <_etoa+0x34c>
 800459c:	2304      	movs	r3, #4
 800459e:	e026      	b.n	80045ee <_etoa+0x34e>
 80045a0:	509f79fb 	.word	0x509f79fb
 80045a4:	3fd34413 	.word	0x3fd34413
 80045a8:	8b60c8b3 	.word	0x8b60c8b3
 80045ac:	3fc68a28 	.word	0x3fc68a28
 80045b0:	636f4361 	.word	0x636f4361
 80045b4:	3fd287a7 	.word	0x3fd287a7
 80045b8:	0979a371 	.word	0x0979a371
 80045bc:	400a934f 	.word	0x400a934f
 80045c0:	bbb55516 	.word	0xbbb55516
 80045c4:	40026bb1 	.word	0x40026bb1
 80045c8:	fefa39ef 	.word	0xfefa39ef
 80045cc:	3fe62e42 	.word	0x3fe62e42
 80045d0:	7fefffff 	.word	0x7fefffff
 80045d4:	3ff80000 	.word	0x3ff80000
 80045d8:	3fe00000 	.word	0x3fe00000
 80045dc:	402c0000 	.word	0x402c0000
 80045e0:	40240000 	.word	0x40240000
 80045e4:	40180000 	.word	0x40180000
 80045e8:	3ff00000 	.word	0x3ff00000
 80045ec:	2305      	movs	r3, #5
 80045ee:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80045f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03d      	beq.n	8004678 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80045fc:	a368      	add	r3, pc, #416	; (adr r3, 80047a0 <_etoa+0x500>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004606:	f7fc fa45 	bl	8000a94 <__aeabi_dcmpge>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d024      	beq.n	800465a <_etoa+0x3ba>
 8004610:	a365      	add	r3, pc, #404	; (adr r3, 80047a8 <_etoa+0x508>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800461a:	f7fc fa27 	bl	8000a6c <__aeabi_dcmplt>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01a      	beq.n	800465a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800462a:	429a      	cmp	r2, r3
 800462c:	da07      	bge.n	800463e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800462e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800463c:	e002      	b.n	8004644 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004658:	e00e      	b.n	8004678 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800465a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <_etoa+0x3d8>
 8004662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <_etoa+0x3d8>
        --prec;
 800466e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004672:	3b01      	subs	r3, #1
 8004674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800467c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800467e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004684:	429a      	cmp	r2, r3
 8004686:	d904      	bls.n	8004692 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800468a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	657b      	str	r3, [r7, #84]	; 0x54
 8004690:	e001      	b.n	8004696 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <_etoa+0x40c>
 80046a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80046ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <_etoa+0x426>
    value /= conv.F;
 80046b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046ba:	f7fc f88f 	bl	80007dc <__aeabi_ddiv>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80046ca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <_etoa+0x440>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e003      	b.n	80046e8 <_etoa+0x448>
 80046e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80046e4:	ed87 7b02 	vstr	d7, [r7, #8]
 80046e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f0:	9302      	str	r3, [sp, #8]
 80046f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004708:	f7ff fb72 	bl	8003df0 <_ftoa>
 800470c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800470e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004710:	2b00      	cmp	r3, #0
 8004712:	d03f      	beq.n	8004794 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <_etoa+0x484>
 8004720:	2045      	movs	r0, #69	; 0x45
 8004722:	e000      	b.n	8004726 <_etoa+0x486>
 8004724:	2065      	movs	r0, #101	; 0x65
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	1c53      	adds	r3, r2, #1
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6a39      	ldr	r1, [r7, #32]
 8004732:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	2b00      	cmp	r3, #0
 8004738:	bfb8      	it	lt
 800473a:	425b      	neglt	r3, r3
 800473c:	4618      	mov	r0, r3
 800473e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004740:	0fdb      	lsrs	r3, r3, #31
 8004742:	b2db      	uxtb	r3, r3
 8004744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004746:	3a01      	subs	r2, #1
 8004748:	2105      	movs	r1, #5
 800474a:	9105      	str	r1, [sp, #20]
 800474c:	9204      	str	r2, [sp, #16]
 800474e:	2200      	movs	r2, #0
 8004750:	9203      	str	r2, [sp, #12]
 8004752:	220a      	movs	r2, #10
 8004754:	9202      	str	r2, [sp, #8]
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	9000      	str	r0, [sp, #0]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	6a39      	ldr	r1, [r7, #32]
 8004760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004762:	f7ff fa70 	bl	8003c46 <_ntoa_long>
 8004766:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00f      	beq.n	8004794 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004774:	e007      	b.n	8004786 <_etoa+0x4e6>
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	1c53      	adds	r3, r2, #1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6a39      	ldr	r1, [r7, #32]
 8004782:	2020      	movs	r0, #32
 8004784:	47a0      	blx	r4
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004790:	429a      	cmp	r2, r3
 8004792:	d8f0      	bhi.n	8004776 <_etoa+0x4d6>
    }
  }
  return idx;
 8004794:	69fb      	ldr	r3, [r7, #28]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3764      	adds	r7, #100	; 0x64
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	eb1c432d 	.word	0xeb1c432d
 80047a4:	3f1a36e2 	.word	0x3f1a36e2
 80047a8:	00000000 	.word	0x00000000
 80047ac:	412e8480 	.word	0x412e8480

080047b0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80047b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	b0a3      	sub	sp, #140	; 0x8c
 80047b6:	af0a      	add	r7, sp, #40	; 0x28
 80047b8:	6178      	str	r0, [r7, #20]
 80047ba:	6139      	str	r1, [r7, #16]
 80047bc:	60fa      	str	r2, [r7, #12]
 80047be:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 84be 	bne.w	8005148 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 80047cc:	4ba3      	ldr	r3, [pc, #652]	; (8004a5c <_vsnprintf+0x2ac>)
 80047ce:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80047d0:	f000 bcba 	b.w	8005148 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b25      	cmp	r3, #37	; 0x25
 80047da:	d00d      	beq.n	80047f8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	7818      	ldrb	r0, [r3, #0]
 80047e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e2:	1c53      	adds	r3, r2, #1
 80047e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e6:	697c      	ldr	r4, [r7, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6939      	ldr	r1, [r7, #16]
 80047ec:	47a0      	blx	r4
      format++;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
      continue;
 80047f4:	f000 bca8 	b.w	8005148 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	3b20      	subs	r3, #32
 8004808:	2b10      	cmp	r3, #16
 800480a:	d857      	bhi.n	80048bc <_vsnprintf+0x10c>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <_vsnprintf+0x64>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004895 	.word	0x08004895
 8004818:	080048bd 	.word	0x080048bd
 800481c:	080048bd 	.word	0x080048bd
 8004820:	080048a9 	.word	0x080048a9
 8004824:	080048bd 	.word	0x080048bd
 8004828:	080048bd 	.word	0x080048bd
 800482c:	080048bd 	.word	0x080048bd
 8004830:	080048bd 	.word	0x080048bd
 8004834:	080048bd 	.word	0x080048bd
 8004838:	080048bd 	.word	0x080048bd
 800483c:	080048bd 	.word	0x080048bd
 8004840:	08004881 	.word	0x08004881
 8004844:	080048bd 	.word	0x080048bd
 8004848:	0800486d 	.word	0x0800486d
 800484c:	080048bd 	.word	0x080048bd
 8004850:	080048bd 	.word	0x080048bd
 8004854:	08004859 	.word	0x08004859
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3301      	adds	r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	2301      	movs	r3, #1
 8004868:	653b      	str	r3, [r7, #80]	; 0x50
 800486a:	e02a      	b.n	80048c2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	3301      	adds	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	2301      	movs	r3, #1
 800487c:	653b      	str	r3, [r7, #80]	; 0x50
 800487e:	e020      	b.n	80048c2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	3301      	adds	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	2301      	movs	r3, #1
 8004890:	653b      	str	r3, [r7, #80]	; 0x50
 8004892:	e016      	b.n	80048c2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004896:	f043 0308 	orr.w	r3, r3, #8
 800489a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	3301      	adds	r3, #1
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	2301      	movs	r3, #1
 80048a4:	653b      	str	r3, [r7, #80]	; 0x50
 80048a6:	e00c      	b.n	80048c2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80048a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048aa:	f043 0310 	orr.w	r3, r3, #16
 80048ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	2301      	movs	r3, #1
 80048b8:	653b      	str	r3, [r7, #80]	; 0x50
 80048ba:	e002      	b.n	80048c2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80048bc:	2300      	movs	r3, #0
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
 80048c0:	bf00      	nop
      }
    } while (n);
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d19c      	bne.n	8004802 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff f851 	bl	8003978 <_is_digit>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <_vsnprintf+0x13a>
      width = _atoi(&format);
 80048dc:	f107 0308 	add.w	r3, r7, #8
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff f860 	bl	80039a6 <_atoi>
 80048e6:	65b8      	str	r0, [r7, #88]	; 0x58
 80048e8:	e01a      	b.n	8004920 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b2a      	cmp	r3, #42	; 0x2a
 80048f0:	d116      	bne.n	8004920 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80048f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	2b00      	cmp	r3, #0
 8004904:	da07      	bge.n	8004916 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	425b      	negs	r3, r3
 8004912:	65bb      	str	r3, [r7, #88]	; 0x58
 8004914:	e001      	b.n	800491a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3301      	adds	r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b2e      	cmp	r3, #46	; 0x2e
 800492a:	d127      	bne.n	800497c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800492c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004932:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3301      	adds	r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f81a 	bl	8003978 <_is_digit>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff f829 	bl	80039a6 <_atoi>
 8004954:	6578      	str	r0, [r7, #84]	; 0x54
 8004956:	e011      	b.n	800497c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b2a      	cmp	r3, #42	; 0x2a
 800495e:	d10d      	bne.n	800497c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004974:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3301      	adds	r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	3b68      	subs	r3, #104	; 0x68
 8004982:	2b12      	cmp	r3, #18
 8004984:	d866      	bhi.n	8004a54 <_vsnprintf+0x2a4>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <_vsnprintf+0x1dc>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049ff 	.word	0x080049ff
 8004990:	08004a55 	.word	0x08004a55
 8004994:	08004a35 	.word	0x08004a35
 8004998:	08004a55 	.word	0x08004a55
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	08004a55 	.word	0x08004a55
 80049a4:	08004a55 	.word	0x08004a55
 80049a8:	08004a55 	.word	0x08004a55
 80049ac:	08004a55 	.word	0x08004a55
 80049b0:	08004a55 	.word	0x08004a55
 80049b4:	08004a55 	.word	0x08004a55
 80049b8:	08004a55 	.word	0x08004a55
 80049bc:	08004a25 	.word	0x08004a25
 80049c0:	08004a55 	.word	0x08004a55
 80049c4:	08004a55 	.word	0x08004a55
 80049c8:	08004a55 	.word	0x08004a55
 80049cc:	08004a55 	.word	0x08004a55
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004a45 	.word	0x08004a45
      case 'l' :
        flags |= FLAGS_LONG;
 80049d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b6c      	cmp	r3, #108	; 0x6c
 80049ec:	d134      	bne.n	8004a58 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049f4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3301      	adds	r3, #1
 80049fa:	60bb      	str	r3, [r7, #8]
        }
        break;
 80049fc:	e02c      	b.n	8004a58 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80049fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b68      	cmp	r3, #104	; 0x68
 8004a12:	d125      	bne.n	8004a60 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004a22:	e01d      	b.n	8004a60 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]
        break;
 8004a32:	e016      	b.n	8004a62 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60bb      	str	r3, [r7, #8]
        break;
 8004a42:	e00e      	b.n	8004a62 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
        break;
 8004a52:	e006      	b.n	8004a62 <_vsnprintf+0x2b2>
      default :
        break;
 8004a54:	bf00      	nop
 8004a56:	e004      	b.n	8004a62 <_vsnprintf+0x2b2>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <_vsnprintf+0x2b2>
 8004a5c:	080038fd 	.word	0x080038fd
        break;
 8004a60:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	3b25      	subs	r3, #37	; 0x25
 8004a68:	2b53      	cmp	r3, #83	; 0x53
 8004a6a:	f200 8360 	bhi.w	800512e <_vsnprintf+0x97e>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <_vsnprintf+0x2c4>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08005117 	.word	0x08005117
 8004a78:	0800512f 	.word	0x0800512f
 8004a7c:	0800512f 	.word	0x0800512f
 8004a80:	0800512f 	.word	0x0800512f
 8004a84:	0800512f 	.word	0x0800512f
 8004a88:	0800512f 	.word	0x0800512f
 8004a8c:	0800512f 	.word	0x0800512f
 8004a90:	0800512f 	.word	0x0800512f
 8004a94:	0800512f 	.word	0x0800512f
 8004a98:	0800512f 	.word	0x0800512f
 8004a9c:	0800512f 	.word	0x0800512f
 8004aa0:	0800512f 	.word	0x0800512f
 8004aa4:	0800512f 	.word	0x0800512f
 8004aa8:	0800512f 	.word	0x0800512f
 8004aac:	0800512f 	.word	0x0800512f
 8004ab0:	0800512f 	.word	0x0800512f
 8004ab4:	0800512f 	.word	0x0800512f
 8004ab8:	0800512f 	.word	0x0800512f
 8004abc:	0800512f 	.word	0x0800512f
 8004ac0:	0800512f 	.word	0x0800512f
 8004ac4:	0800512f 	.word	0x0800512f
 8004ac8:	0800512f 	.word	0x0800512f
 8004acc:	0800512f 	.word	0x0800512f
 8004ad0:	0800512f 	.word	0x0800512f
 8004ad4:	0800512f 	.word	0x0800512f
 8004ad8:	0800512f 	.word	0x0800512f
 8004adc:	0800512f 	.word	0x0800512f
 8004ae0:	0800512f 	.word	0x0800512f
 8004ae4:	0800512f 	.word	0x0800512f
 8004ae8:	0800512f 	.word	0x0800512f
 8004aec:	0800512f 	.word	0x0800512f
 8004af0:	0800512f 	.word	0x0800512f
 8004af4:	08004ecb 	.word	0x08004ecb
 8004af8:	08004e7b 	.word	0x08004e7b
 8004afc:	08004ecb 	.word	0x08004ecb
 8004b00:	0800512f 	.word	0x0800512f
 8004b04:	0800512f 	.word	0x0800512f
 8004b08:	0800512f 	.word	0x0800512f
 8004b0c:	0800512f 	.word	0x0800512f
 8004b10:	0800512f 	.word	0x0800512f
 8004b14:	0800512f 	.word	0x0800512f
 8004b18:	0800512f 	.word	0x0800512f
 8004b1c:	0800512f 	.word	0x0800512f
 8004b20:	0800512f 	.word	0x0800512f
 8004b24:	0800512f 	.word	0x0800512f
 8004b28:	0800512f 	.word	0x0800512f
 8004b2c:	0800512f 	.word	0x0800512f
 8004b30:	0800512f 	.word	0x0800512f
 8004b34:	0800512f 	.word	0x0800512f
 8004b38:	0800512f 	.word	0x0800512f
 8004b3c:	0800512f 	.word	0x0800512f
 8004b40:	08004bc5 	.word	0x08004bc5
 8004b44:	0800512f 	.word	0x0800512f
 8004b48:	0800512f 	.word	0x0800512f
 8004b4c:	0800512f 	.word	0x0800512f
 8004b50:	0800512f 	.word	0x0800512f
 8004b54:	0800512f 	.word	0x0800512f
 8004b58:	0800512f 	.word	0x0800512f
 8004b5c:	0800512f 	.word	0x0800512f
 8004b60:	0800512f 	.word	0x0800512f
 8004b64:	0800512f 	.word	0x0800512f
 8004b68:	08004bc5 	.word	0x08004bc5
 8004b6c:	08004f3b 	.word	0x08004f3b
 8004b70:	08004bc5 	.word	0x08004bc5
 8004b74:	08004ecb 	.word	0x08004ecb
 8004b78:	08004e7b 	.word	0x08004e7b
 8004b7c:	08004ecb 	.word	0x08004ecb
 8004b80:	0800512f 	.word	0x0800512f
 8004b84:	08004bc5 	.word	0x08004bc5
 8004b88:	0800512f 	.word	0x0800512f
 8004b8c:	0800512f 	.word	0x0800512f
 8004b90:	0800512f 	.word	0x0800512f
 8004b94:	0800512f 	.word	0x0800512f
 8004b98:	0800512f 	.word	0x0800512f
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	0800507b 	.word	0x0800507b
 8004ba4:	0800512f 	.word	0x0800512f
 8004ba8:	0800512f 	.word	0x0800512f
 8004bac:	08004fb3 	.word	0x08004fb3
 8004bb0:	0800512f 	.word	0x0800512f
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	0800512f 	.word	0x0800512f
 8004bbc:	0800512f 	.word	0x0800512f
 8004bc0:	08004bc5 	.word	0x08004bc5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b78      	cmp	r3, #120	; 0x78
 8004bca:	d003      	beq.n	8004bd4 <_vsnprintf+0x424>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b58      	cmp	r3, #88	; 0x58
 8004bd2:	d102      	bne.n	8004bda <_vsnprintf+0x42a>
          base = 16U;
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd8:	e013      	b.n	8004c02 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b6f      	cmp	r3, #111	; 0x6f
 8004be0:	d102      	bne.n	8004be8 <_vsnprintf+0x438>
          base =  8U;
 8004be2:	2308      	movs	r3, #8
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be6:	e00c      	b.n	8004c02 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b62      	cmp	r3, #98	; 0x62
 8004bee:	d102      	bne.n	8004bf6 <_vsnprintf+0x446>
          base =  2U;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf4:	e005      	b.n	8004c02 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfc:	f023 0310 	bic.w	r3, r3, #16
 8004c00:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b58      	cmp	r3, #88	; 0x58
 8004c08:	d103      	bne.n	8004c12 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8004c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0c:	f043 0320 	orr.w	r3, r3, #32
 8004c10:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b69      	cmp	r3, #105	; 0x69
 8004c18:	d007      	beq.n	8004c2a <_vsnprintf+0x47a>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d003      	beq.n	8004c2a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	f023 030c 	bic.w	r3, r3, #12
 8004c28:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b69      	cmp	r3, #105	; 0x69
 8004c42:	d004      	beq.n	8004c4e <_vsnprintf+0x49e>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b64      	cmp	r3, #100	; 0x64
 8004c4a:	f040 8098 	bne.w	8004d7e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d031      	beq.n	8004cbc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5c:	3307      	adds	r3, #7
 8004c5e:	f023 0307 	bic.w	r3, r3, #7
 8004c62:	f103 0208 	add.w	r2, r3, #8
 8004c66:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da06      	bge.n	8004c88 <_vsnprintf+0x4d8>
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f1d2 0800 	rsbs	r8, r2, #0
 8004c80:	eb61 0903 	sbc.w	r9, r1, r3
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	69f9      	ldr	r1, [r7, #28]
 8004c8a:	0fc9      	lsrs	r1, r1, #31
 8004c8c:	b2c9      	uxtb	r1, r1
 8004c8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004c90:	2400      	movs	r4, #0
 8004c92:	4682      	mov	sl, r0
 8004c94:	46a3      	mov	fp, r4
 8004c96:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c98:	9008      	str	r0, [sp, #32]
 8004c9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c9c:	9007      	str	r0, [sp, #28]
 8004c9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ca0:	9006      	str	r0, [sp, #24]
 8004ca2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004ca6:	9102      	str	r1, [sp, #8]
 8004ca8:	e9cd 2300 	strd	r2, r3, [sp]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cb0:	6939      	ldr	r1, [r7, #16]
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f7ff f82d 	bl	8003d12 <_ntoa_long_long>
 8004cb8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004cba:	e0da      	b.n	8004e72 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8004cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfb8      	it	lt
 8004cda:	425b      	neglt	r3, r3
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	0fdb      	lsrs	r3, r3, #31
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ce6:	9205      	str	r2, [sp, #20]
 8004ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cea:	9204      	str	r2, [sp, #16]
 8004cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cee:	9203      	str	r2, [sp, #12]
 8004cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf2:	9202      	str	r2, [sp, #8]
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9100      	str	r1, [sp, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cfc:	6939      	ldr	r1, [r7, #16]
 8004cfe:	6978      	ldr	r0, [r7, #20]
 8004d00:	f7fe ffa1 	bl	8003c46 <_ntoa_long>
 8004d04:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004d06:	e0b4      	b.n	8004e72 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <_vsnprintf+0x572>
 8004d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	e012      	b.n	8004d48 <_vsnprintf+0x598>
 8004d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <_vsnprintf+0x58c>
 8004d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	e005      	b.n	8004d48 <_vsnprintf+0x598>
 8004d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d40:	1d1a      	adds	r2, r3, #4
 8004d42:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bfb8      	it	lt
 8004d50:	425b      	neglt	r3, r3
 8004d52:	4619      	mov	r1, r3
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	0fdb      	lsrs	r3, r3, #31
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d5c:	9205      	str	r2, [sp, #20]
 8004d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d60:	9204      	str	r2, [sp, #16]
 8004d62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d64:	9203      	str	r2, [sp, #12]
 8004d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d68:	9202      	str	r2, [sp, #8]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	9100      	str	r1, [sp, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	6978      	ldr	r0, [r7, #20]
 8004d76:	f7fe ff66 	bl	8003c46 <_ntoa_long>
 8004d7a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004d7c:	e079      	b.n	8004e72 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d022      	beq.n	8004dce <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d8c:	3307      	adds	r3, #7
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	f103 0208 	add.w	r2, r3, #8
 8004d96:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004da0:	2000      	movs	r0, #0
 8004da2:	460d      	mov	r5, r1
 8004da4:	4606      	mov	r6, r0
 8004da6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004da8:	9108      	str	r1, [sp, #32]
 8004daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dac:	9107      	str	r1, [sp, #28]
 8004dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004db0:	9106      	str	r1, [sp, #24]
 8004db2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8004db6:	2100      	movs	r1, #0
 8004db8:	9102      	str	r1, [sp, #8]
 8004dba:	e9cd 2300 	strd	r2, r3, [sp]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc2:	6939      	ldr	r1, [r7, #16]
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7fe ffa4 	bl	8003d12 <_ntoa_long_long>
 8004dca:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004dcc:	e051      	b.n	8004e72 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d018      	beq.n	8004e0a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ddc:	1d1a      	adds	r2, r3, #4
 8004dde:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004de6:	9205      	str	r2, [sp, #20]
 8004de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dea:	9204      	str	r2, [sp, #16]
 8004dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dee:	9203      	str	r2, [sp, #12]
 8004df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df2:	9202      	str	r2, [sp, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	9201      	str	r2, [sp, #4]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfe:	6939      	ldr	r1, [r7, #16]
 8004e00:	6978      	ldr	r0, [r7, #20]
 8004e02:	f7fe ff20 	bl	8003c46 <_ntoa_long>
 8004e06:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004e08:	e033      	b.n	8004e72 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <_vsnprintf+0x674>
 8004e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e012      	b.n	8004e4a <_vsnprintf+0x69a>
 8004e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <_vsnprintf+0x68e>
 8004e2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e32:	1d1a      	adds	r2, r3, #4
 8004e34:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	e005      	b.n	8004e4a <_vsnprintf+0x69a>
 8004e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e42:	1d1a      	adds	r2, r3, #4
 8004e44:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4e:	9305      	str	r3, [sp, #20]
 8004e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	9302      	str	r3, [sp, #8]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e68:	6939      	ldr	r1, [r7, #16]
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7fe feeb 	bl	8003c46 <_ntoa_long>
 8004e70:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3301      	adds	r3, #1
 8004e76:	60bb      	str	r3, [r7, #8]
        break;
 8004e78:	e166      	b.n	8005148 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b46      	cmp	r3, #70	; 0x46
 8004e80:	d103      	bne.n	8004e8a <_vsnprintf+0x6da>
 8004e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e8e:	3307      	adds	r3, #7
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	f103 0208 	add.w	r2, r3, #8
 8004e98:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e9c:	ed93 7b00 	vldr	d7, [r3]
 8004ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea2:	9302      	str	r3, [sp, #8]
 8004ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	eeb0 0a47 	vmov.f32	s0, s14
 8004eb0:	eef0 0a67 	vmov.f32	s1, s15
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eb8:	6939      	ldr	r1, [r7, #16]
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7fe ff98 	bl	8003df0 <_ftoa>
 8004ec0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60bb      	str	r3, [r7, #8]
        break;
 8004ec8:	e13e      	b.n	8005148 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b67      	cmp	r3, #103	; 0x67
 8004ed0:	d003      	beq.n	8004eda <_vsnprintf+0x72a>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b47      	cmp	r3, #71	; 0x47
 8004ed8:	d103      	bne.n	8004ee2 <_vsnprintf+0x732>
 8004eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004edc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b45      	cmp	r3, #69	; 0x45
 8004ee8:	d003      	beq.n	8004ef2 <_vsnprintf+0x742>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b47      	cmp	r3, #71	; 0x47
 8004ef0:	d103      	bne.n	8004efa <_vsnprintf+0x74a>
 8004ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef4:	f043 0320 	orr.w	r3, r3, #32
 8004ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004efe:	3307      	adds	r3, #7
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	f103 0208 	add.w	r2, r3, #8
 8004f08:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f0c:	ed93 7b00 	vldr	d7, [r3]
 8004f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8004f20:	eef0 0a67 	vmov.f32	s1, s15
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f28:	6939      	ldr	r1, [r7, #16]
 8004f2a:	6978      	ldr	r0, [r7, #20]
 8004f2c:	f7ff f9b8 	bl	80042a0 <_etoa>
 8004f30:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
        break;
 8004f38:	e106      	b.n	8005148 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10e      	bne.n	8004f66 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8004f48:	e007      	b.n	8004f5a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8004f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4c:	1c53      	adds	r3, r2, #1
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f50:	697c      	ldr	r4, [r7, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6939      	ldr	r1, [r7, #16]
 8004f56:	2020      	movs	r0, #32
 8004f58:	47a0      	blx	r4
          while (l++ < width) {
 8004f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d8f1      	bhi.n	8004f4a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	b2d8      	uxtb	r0, r3
 8004f74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f76:	1c53      	adds	r3, r2, #1
 8004f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7a:	697c      	ldr	r4, [r7, #20]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6939      	ldr	r1, [r7, #16]
 8004f80:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <_vsnprintf+0x7fa>
          while (l++ < width) {
 8004f8c:	e007      	b.n	8004f9e <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8004f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f90:	1c53      	adds	r3, r2, #1
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	697c      	ldr	r4, [r7, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	2020      	movs	r0, #32
 8004f9c:	47a0      	blx	r4
          while (l++ < width) {
 8004f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	647a      	str	r2, [r7, #68]	; 0x44
 8004fa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d8f1      	bhi.n	8004f8e <_vsnprintf+0x7de>
          }
        }
        format++;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
        break;
 8004fb0:	e0ca      	b.n	8005148 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fb6:	1d1a      	adds	r2, r3, #4
 8004fb8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <_vsnprintf+0x81a>
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc8:	e001      	b.n	8004fce <_vsnprintf+0x81e>
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004fd2:	f7fe fcb4 	bl	800393e <_strnlen_s>
 8004fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8004fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bf28      	it	cs
 8004fea:	4613      	movcs	r3, r2
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11a      	bne.n	800502e <_vsnprintf+0x87e>
          while (l++ < width) {
 8004ff8:	e007      	b.n	800500a <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8004ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ffc:	1c53      	adds	r3, r2, #1
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	697c      	ldr	r4, [r7, #20]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6939      	ldr	r1, [r7, #16]
 8005006:	2020      	movs	r0, #32
 8005008:	47a0      	blx	r4
          while (l++ < width) {
 800500a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005012:	429a      	cmp	r2, r3
 8005014:	d8f1      	bhi.n	8004ffa <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005016:	e00a      	b.n	800502e <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	643a      	str	r2, [r7, #64]	; 0x40
 800501e:	7818      	ldrb	r0, [r3, #0]
 8005020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005022:	1c53      	adds	r3, r2, #1
 8005024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005026:	697c      	ldr	r4, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800502e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <_vsnprintf+0x89a>
 8005036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0eb      	beq.n	8005018 <_vsnprintf+0x868>
 8005040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	657a      	str	r2, [r7, #84]	; 0x54
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e6      	bne.n	8005018 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800504a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8005054:	e007      	b.n	8005066 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8005056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005058:	1c53      	adds	r3, r2, #1
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505c:	697c      	ldr	r4, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6939      	ldr	r1, [r7, #16]
 8005062:	2020      	movs	r0, #32
 8005064:	47a0      	blx	r4
          while (l++ < width) {
 8005066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800506c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800506e:	429a      	cmp	r2, r3
 8005070:	d8f1      	bhi.n	8005056 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3301      	adds	r3, #1
 8005076:	60bb      	str	r3, [r7, #8]
        break;
 8005078:	e066      	b.n	8005148 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800507a:	2308      	movs	r3, #8
 800507c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800507e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005080:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005084:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800508c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005090:	2b00      	cmp	r3, #0
 8005092:	d023      	beq.n	80050dc <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005098:	1d1a      	adds	r2, r3, #4
 800509a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	603a      	str	r2, [r7, #0]
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050aa:	9308      	str	r3, [sp, #32]
 80050ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ae:	9307      	str	r3, [sp, #28]
 80050b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b2:	9306      	str	r3, [sp, #24]
 80050b4:	f04f 0210 	mov.w	r2, #16
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050c0:	2300      	movs	r3, #0
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80050c8:	e9cd 3400 	strd	r3, r4, [sp]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050d0:	6939      	ldr	r1, [r7, #16]
 80050d2:	6978      	ldr	r0, [r7, #20]
 80050d4:	f7fe fe1d 	bl	8003d12 <_ntoa_long_long>
 80050d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80050da:	e018      	b.n	800510e <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80050dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e0:	1d1a      	adds	r2, r3, #4
 80050e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ec:	9305      	str	r3, [sp, #20]
 80050ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	2310      	movs	r3, #16
 80050f8:	9302      	str	r3, [sp, #8]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	9200      	str	r2, [sp, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005104:	6939      	ldr	r1, [r7, #16]
 8005106:	6978      	ldr	r0, [r7, #20]
 8005108:	f7fe fd9d 	bl	8003c46 <_ntoa_long>
 800510c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3301      	adds	r3, #1
 8005112:	60bb      	str	r3, [r7, #8]
        break;
 8005114:	e018      	b.n	8005148 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005118:	1c53      	adds	r3, r2, #1
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	697c      	ldr	r4, [r7, #20]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6939      	ldr	r1, [r7, #16]
 8005122:	2025      	movs	r0, #37	; 0x25
 8005124:	47a0      	blx	r4
        format++;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3301      	adds	r3, #1
 800512a:	60bb      	str	r3, [r7, #8]
        break;
 800512c:	e00c      	b.n	8005148 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	7818      	ldrb	r0, [r3, #0]
 8005132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005134:	1c53      	adds	r3, r2, #1
 8005136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005138:	697c      	ldr	r4, [r7, #20]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	47a0      	blx	r4
        format++;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3301      	adds	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
        break;
 8005146:	bf00      	nop
  while (*format)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f47f ab41 	bne.w	80047d4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <_vsnprintf+0x9b0>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1e5a      	subs	r2, r3, #1
 800515e:	e000      	b.n	8005162 <_vsnprintf+0x9b2>
 8005160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005162:	697c      	ldr	r4, [r7, #20]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6939      	ldr	r1, [r7, #16]
 8005168:	2000      	movs	r0, #0
 800516a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800516e:	4618      	mov	r0, r3
 8005170:	3764      	adds	r7, #100	; 0x64
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005178 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8005178:	b40f      	push	{r0, r1, r2, r3}
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8005180:	f107 031c 	add.w	r3, r7, #28
 8005184:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005186:	1d39      	adds	r1, r7, #4
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	4806      	ldr	r0, [pc, #24]	; (80051ac <printf_+0x34>)
 8005194:	f7ff fb0c 	bl	80047b0 <_vsnprintf>
 8005198:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800519a:	68fb      	ldr	r3, [r7, #12]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	08003919 	.word	0x08003919

080051b0 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80051b0:	b40e      	push	{r1, r2, r3}
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af02      	add	r7, sp, #8
 80051b8:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80051ba:	f107 0320 	add.w	r3, r7, #32
 80051be:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4805      	ldr	r0, [pc, #20]	; (80051e4 <sprintf_+0x34>)
 80051ce:	f7ff faef 	bl	80047b0 <_vsnprintf>
 80051d2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e0:	b003      	add	sp, #12
 80051e2:	4770      	bx	lr
 80051e4:	080038cf 	.word	0x080038cf

080051e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_MspInit+0x4c>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <HAL_MspInit+0x4c>)
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
 80051fa:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_MspInit+0x4c>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_MspInit+0x4c>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <HAL_MspInit+0x4c>)
 800520c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005210:	6453      	str	r3, [r2, #68]	; 0x44
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_MspInit+0x4c>)
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	210f      	movs	r1, #15
 8005222:	f06f 0001 	mvn.w	r0, #1
 8005226:	f000 fcc3 	bl	8005bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800

08005238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	; 0x30
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8005248:	2200      	movs	r2, #0
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	202d      	movs	r0, #45	; 0x2d
 800524e:	f000 fcaf 	bl	8005bb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005252:	202d      	movs	r0, #45	; 0x2d
 8005254:	f000 fcc8 	bl	8005be8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_InitTick+0xa0>)
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_InitTick+0xa0>)
 800525e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005262:	6413      	str	r3, [r2, #64]	; 0x40
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_InitTick+0xa0>)
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005270:	f107 0210 	add.w	r2, r7, #16
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	4611      	mov	r1, r2
 800527a:	4618      	mov	r0, r3
 800527c:	f002 fa22 	bl	80076c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005280:	f002 f9f8 	bl	8007674 <HAL_RCC_GetPCLK1Freq>
 8005284:	4603      	mov	r3, r0
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <HAL_InitTick+0xa4>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	0c9b      	lsrs	r3, r3, #18
 8005294:	3b01      	subs	r3, #1
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_InitTick+0xa8>)
 800529a:	4a12      	ldr	r2, [pc, #72]	; (80052e4 <HAL_InitTick+0xac>)
 800529c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_InitTick+0xa8>)
 80052a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052a4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80052a6:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <HAL_InitTick+0xa8>)
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <HAL_InitTick+0xa8>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_InitTick+0xa8>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80052b8:	4809      	ldr	r0, [pc, #36]	; (80052e0 <HAL_InitTick+0xa8>)
 80052ba:	f002 fe25 	bl	8007f08 <HAL_TIM_Base_Init>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80052c4:	4806      	ldr	r0, [pc, #24]	; (80052e0 <HAL_InitTick+0xa8>)
 80052c6:	f002 fe77 	bl	8007fb8 <HAL_TIM_Base_Start_IT>
 80052ca:	4603      	mov	r3, r0
 80052cc:	e000      	b.n	80052d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3730      	adds	r7, #48	; 0x30
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40023800 	.word	0x40023800
 80052dc:	431bde83 	.word	0x431bde83
 80052e0:	200005c0 	.word	0x200005c0
 80052e4:	40002000 	.word	0x40002000

080052e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052ec:	e7fe      	b.n	80052ec <NMI_Handler+0x4>

080052ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052f2:	e7fe      	b.n	80052f2 <HardFault_Handler+0x4>

080052f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052f8:	e7fe      	b.n	80052f8 <MemManage_Handler+0x4>

080052fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052fe:	e7fe      	b.n	80052fe <BusFault_Handler+0x4>

08005300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005304:	e7fe      	b.n	8005304 <UsageFault_Handler+0x4>

08005306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_1_Pin);
 8005318:	f44f 7080 	mov.w	r0, #256	; 0x100
 800531c:	f000 fee4 	bl	80060e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_1_Pin);
 8005320:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005324:	f000 fee0 	bl	80060e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}

0800532c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005330:	4802      	ldr	r0, [pc, #8]	; (800533c <TIM3_IRQHandler+0x10>)
 8005332:	f002 ff49 	bl	80081c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000658 	.word	0x20000658

08005340 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005344:	4802      	ldr	r0, [pc, #8]	; (8005350 <USART3_IRQHandler+0x10>)
 8005346:	f004 f8af 	bl	80094a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	2000073c 	.word	0x2000073c

08005354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_2_Pin);
 8005358:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800535c:	f000 fec4 	bl	80060e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_2_Pin);
 8005360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005364:	f000 fec0 	bl	80060e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}

0800536c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005370:	4802      	ldr	r0, [pc, #8]	; (800537c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005372:	f002 ff29 	bl	80081c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200005c0 	.word	0x200005c0

08005380 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <TIM5_IRQHandler+0x10>)
 8005386:	f002 ff1f 	bl	80081c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200006f0 	.word	0x200006f0

08005394 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <SystemInit+0x20>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <SystemInit+0x20>)
 80053a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000ed00 	.word	0xe000ed00

080053b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053cc:	f107 031c 	add.w	r3, r7, #28
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053d8:	463b      	mov	r3, r7
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	611a      	str	r2, [r3, #16]
 80053e6:	615a      	str	r2, [r3, #20]
 80053e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80053ea:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <MX_TIM2_Init+0xec>)
 80053ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80053f2:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <MX_TIM2_Init+0xec>)
 80053f4:	2247      	movs	r2, #71	; 0x47
 80053f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053f8:	4b2a      	ldr	r3, [pc, #168]	; (80054a4 <MX_TIM2_Init+0xec>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005400:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005404:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005406:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <MX_TIM2_Init+0xec>)
 800540e:	2200      	movs	r2, #0
 8005410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005412:	4824      	ldr	r0, [pc, #144]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005414:	f002 fd78 	bl	8007f08 <HAL_TIM_Base_Init>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800541e:	f7fe fa51 	bl	80038c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800542c:	4619      	mov	r1, r3
 800542e:	481d      	ldr	r0, [pc, #116]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005430:	f003 f8fe 	bl	8008630 <HAL_TIM_ConfigClockSource>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800543a:	f7fe fa43 	bl	80038c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800543e:	4819      	ldr	r0, [pc, #100]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005440:	f002 fe61 	bl	8008106 <HAL_TIM_PWM_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800544a:	f7fe fa3b 	bl	80038c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800544e:	2320      	movs	r3, #32
 8005450:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005452:	2300      	movs	r3, #0
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005456:	f107 031c 	add.w	r3, r7, #28
 800545a:	4619      	mov	r1, r3
 800545c:	4811      	ldr	r0, [pc, #68]	; (80054a4 <MX_TIM2_Init+0xec>)
 800545e:	f003 fe47 	bl	80090f0 <HAL_TIMEx_MasterConfigSynchronization>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005468:	f7fe fa2c 	bl	80038c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800546c:	2360      	movs	r3, #96	; 0x60
 800546e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8005470:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005474:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800547e:	463b      	mov	r3, r7
 8005480:	2200      	movs	r2, #0
 8005482:	4619      	mov	r1, r3
 8005484:	4807      	ldr	r0, [pc, #28]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005486:	f002 ffbf 	bl	8008408 <HAL_TIM_PWM_ConfigChannel>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005490:	f7fe fa18 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005494:	4803      	ldr	r0, [pc, #12]	; (80054a4 <MX_TIM2_Init+0xec>)
 8005496:	f000 f987 	bl	80057a8 <HAL_TIM_MspPostInit>

}
 800549a:	bf00      	nop
 800549c:	3738      	adds	r7, #56	; 0x38
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2000060c 	.word	0x2000060c

080054a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	60da      	str	r2, [r3, #12]
 80054bc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054be:	463b      	mov	r3, r7
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <MX_TIM3_Init+0x98>)
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <MX_TIM3_Init+0x9c>)
 80054cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <MX_TIM3_Init+0x98>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <MX_TIM3_Init+0x98>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <MX_TIM3_Init+0x98>)
 80054dc:	2200      	movs	r2, #0
 80054de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <MX_TIM3_Init+0x98>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <MX_TIM3_Init+0x98>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80054ec:	4814      	ldr	r0, [pc, #80]	; (8005540 <MX_TIM3_Init+0x98>)
 80054ee:	f002 fd0b 	bl	8007f08 <HAL_TIM_Base_Init>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80054f8:	f7fe f9e4 	bl	80038c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80054fc:	2307      	movs	r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8005500:	2310      	movs	r3, #16
 8005502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	4619      	mov	r1, r3
 800550a:	480d      	ldr	r0, [pc, #52]	; (8005540 <MX_TIM3_Init+0x98>)
 800550c:	f003 f95a 	bl	80087c4 <HAL_TIM_SlaveConfigSynchro>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8005516:	f7fe f9d5 	bl	80038c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800551a:	2300      	movs	r3, #0
 800551c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005522:	463b      	mov	r3, r7
 8005524:	4619      	mov	r1, r3
 8005526:	4806      	ldr	r0, [pc, #24]	; (8005540 <MX_TIM3_Init+0x98>)
 8005528:	f003 fde2 	bl	80090f0 <HAL_TIMEx_MasterConfigSynchronization>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8005532:	f7fe f9c7 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005536:	bf00      	nop
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000658 	.word	0x20000658
 8005544:	40000400 	.word	0x40000400

08005548 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800554e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800555c:	f107 031c 	add.w	r3, r7, #28
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005568:	463b      	mov	r3, r7
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	605a      	str	r2, [r3, #4]
 8005570:	609a      	str	r2, [r3, #8]
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	611a      	str	r2, [r3, #16]
 8005576:	615a      	str	r2, [r3, #20]
 8005578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <MX_TIM4_Init+0xe8>)
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <MX_TIM4_Init+0xec>)
 800557e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005580:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <MX_TIM4_Init+0xe8>)
 8005582:	2247      	movs	r2, #71	; 0x47
 8005584:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005586:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <MX_TIM4_Init+0xe8>)
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800558c:	4b28      	ldr	r3, [pc, #160]	; (8005630 <MX_TIM4_Init+0xe8>)
 800558e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005592:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005594:	4b26      	ldr	r3, [pc, #152]	; (8005630 <MX_TIM4_Init+0xe8>)
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800559a:	4b25      	ldr	r3, [pc, #148]	; (8005630 <MX_TIM4_Init+0xe8>)
 800559c:	2200      	movs	r2, #0
 800559e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80055a0:	4823      	ldr	r0, [pc, #140]	; (8005630 <MX_TIM4_Init+0xe8>)
 80055a2:	f002 fcb1 	bl	8007f08 <HAL_TIM_Base_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80055ac:	f7fe f98a 	bl	80038c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80055b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055ba:	4619      	mov	r1, r3
 80055bc:	481c      	ldr	r0, [pc, #112]	; (8005630 <MX_TIM4_Init+0xe8>)
 80055be:	f003 f837 	bl	8008630 <HAL_TIM_ConfigClockSource>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80055c8:	f7fe f97c 	bl	80038c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80055cc:	4818      	ldr	r0, [pc, #96]	; (8005630 <MX_TIM4_Init+0xe8>)
 80055ce:	f002 fd9a 	bl	8008106 <HAL_TIM_PWM_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80055d8:	f7fe f974 	bl	80038c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055dc:	2320      	movs	r3, #32
 80055de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80055e4:	f107 031c 	add.w	r3, r7, #28
 80055e8:	4619      	mov	r1, r3
 80055ea:	4811      	ldr	r0, [pc, #68]	; (8005630 <MX_TIM4_Init+0xe8>)
 80055ec:	f003 fd80 	bl	80090f0 <HAL_TIMEx_MasterConfigSynchronization>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80055f6:	f7fe f965 	bl	80038c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055fa:	2360      	movs	r3, #96	; 0x60
 80055fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 80055fe:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005602:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005604:	2300      	movs	r3, #0
 8005606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800560c:	463b      	mov	r3, r7
 800560e:	2200      	movs	r2, #0
 8005610:	4619      	mov	r1, r3
 8005612:	4807      	ldr	r0, [pc, #28]	; (8005630 <MX_TIM4_Init+0xe8>)
 8005614:	f002 fef8 	bl	8008408 <HAL_TIM_PWM_ConfigChannel>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800561e:	f7fe f951 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005622:	4803      	ldr	r0, [pc, #12]	; (8005630 <MX_TIM4_Init+0xe8>)
 8005624:	f000 f8c0 	bl	80057a8 <HAL_TIM_MspPostInit>

}
 8005628:	bf00      	nop
 800562a:	3738      	adds	r7, #56	; 0x38
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	200006a4 	.word	0x200006a4
 8005634:	40000800 	.word	0x40000800

08005638 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800563e:	f107 030c 	add.w	r3, r7, #12
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564e:	463b      	mov	r3, r7
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <MX_TIM5_Init+0x98>)
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <MX_TIM5_Init+0x9c>)
 800565c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800565e:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <MX_TIM5_Init+0x98>)
 8005660:	2200      	movs	r2, #0
 8005662:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <MX_TIM5_Init+0x98>)
 8005666:	2200      	movs	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <MX_TIM5_Init+0x98>)
 800566c:	2200      	movs	r2, #0
 800566e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <MX_TIM5_Init+0x98>)
 8005672:	2200      	movs	r2, #0
 8005674:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <MX_TIM5_Init+0x98>)
 8005678:	2200      	movs	r2, #0
 800567a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800567c:	4814      	ldr	r0, [pc, #80]	; (80056d0 <MX_TIM5_Init+0x98>)
 800567e:	f002 fc43 	bl	8007f08 <HAL_TIM_Base_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005688:	f7fe f91c 	bl	80038c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800568c:	2307      	movs	r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8005690:	2320      	movs	r3, #32
 8005692:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	4619      	mov	r1, r3
 800569a:	480d      	ldr	r0, [pc, #52]	; (80056d0 <MX_TIM5_Init+0x98>)
 800569c:	f003 f892 	bl	80087c4 <HAL_TIM_SlaveConfigSynchro>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80056a6:	f7fe f90d 	bl	80038c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056aa:	2300      	movs	r3, #0
 80056ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80056b2:	463b      	mov	r3, r7
 80056b4:	4619      	mov	r1, r3
 80056b6:	4806      	ldr	r0, [pc, #24]	; (80056d0 <MX_TIM5_Init+0x98>)
 80056b8:	f003 fd1a 	bl	80090f0 <HAL_TIMEx_MasterConfigSynchronization>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80056c2:	f7fe f8ff 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200006f0 	.word	0x200006f0
 80056d4:	40000c00 	.word	0x40000c00

080056d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d10c      	bne.n	8005704 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	6413      	str	r3, [r2, #64]	; 0x40
 80056f6:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005702:	e044      	b.n	800578e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <HAL_TIM_Base_MspInit+0xc4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d114      	bne.n	8005738 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800570e:	4b22      	ldr	r3, [pc, #136]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005714:	f043 0302 	orr.w	r3, r3, #2
 8005718:	6413      	str	r3, [r2, #64]	; 0x40
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005726:	2200      	movs	r2, #0
 8005728:	2105      	movs	r1, #5
 800572a:	201d      	movs	r0, #29
 800572c:	f000 fa40 	bl	8005bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005730:	201d      	movs	r0, #29
 8005732:	f000 fa59 	bl	8005be8 <HAL_NVIC_EnableIRQ>
}
 8005736:	e02a      	b.n	800578e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_TIM_Base_MspInit+0xc8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10c      	bne.n	800575c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005748:	f043 0304 	orr.w	r3, r3, #4
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
}
 800575a:	e018      	b.n	800578e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a10      	ldr	r2, [pc, #64]	; (80057a4 <HAL_TIM_Base_MspInit+0xcc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d113      	bne.n	800578e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 800576c:	f043 0308 	orr.w	r3, r3, #8
 8005770:	6413      	str	r3, [r2, #64]	; 0x40
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_TIM_Base_MspInit+0xc0>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800577e:	2200      	movs	r2, #0
 8005780:	2105      	movs	r1, #5
 8005782:	2032      	movs	r0, #50	; 0x32
 8005784:	f000 fa14 	bl	8005bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005788:	2032      	movs	r0, #50	; 0x32
 800578a:	f000 fa2d 	bl	8005be8 <HAL_NVIC_EnableIRQ>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00

080057a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	60da      	str	r2, [r3, #12]
 80057be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d11d      	bne.n	8005806 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_TIM_MspPostInit+0xac>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4a21      	ldr	r2, [pc, #132]	; (8005854 <HAL_TIM_MspPostInit+0xac>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6313      	str	r3, [r2, #48]	; 0x30
 80057d6:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <HAL_TIM_MspPostInit+0xac>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_SYRINGE_Pin;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e8:	2302      	movs	r3, #2
 80057ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f0:	2300      	movs	r3, #0
 80057f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057f4:	2301      	movs	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SYRINGE_GPIO_Port, &GPIO_InitStruct);
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	4619      	mov	r1, r3
 80057fe:	4816      	ldr	r0, [pc, #88]	; (8005858 <HAL_TIM_MspPostInit+0xb0>)
 8005800:	f000 fa92 	bl	8005d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005804:	e021      	b.n	800584a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a14      	ldr	r2, [pc, #80]	; (800585c <HAL_TIM_MspPostInit+0xb4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d11c      	bne.n	800584a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_TIM_MspPostInit+0xac>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	4a0f      	ldr	r2, [pc, #60]	; (8005854 <HAL_TIM_MspPostInit+0xac>)
 8005816:	f043 0308 	orr.w	r3, r3, #8
 800581a:	6313      	str	r3, [r2, #48]	; 0x30
 800581c:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <HAL_TIM_MspPostInit+0xac>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_NEEDLE_Pin;
 8005828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800582e:	2302      	movs	r3, #2
 8005830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800583a:	2302      	movs	r3, #2
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_NEEDLE_GPIO_Port, &GPIO_InitStruct);
 800583e:	f107 0314 	add.w	r3, r7, #20
 8005842:	4619      	mov	r1, r3
 8005844:	4806      	ldr	r0, [pc, #24]	; (8005860 <HAL_TIM_MspPostInit+0xb8>)
 8005846:	f000 fa6f 	bl	8005d28 <HAL_GPIO_Init>
}
 800584a:	bf00      	nop
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800
 8005858:	40020000 	.word	0x40020000
 800585c:	40000800 	.word	0x40000800
 8005860:	40020c00 	.word	0x40020c00

08005864 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005868:	4b14      	ldr	r3, [pc, #80]	; (80058bc <MX_USART3_UART_Init+0x58>)
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <MX_USART3_UART_Init+0x5c>)
 800586c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <MX_USART3_UART_Init+0x58>)
 8005870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005876:	4b11      	ldr	r3, [pc, #68]	; (80058bc <MX_USART3_UART_Init+0x58>)
 8005878:	2200      	movs	r2, #0
 800587a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <MX_USART3_UART_Init+0x58>)
 800587e:	2200      	movs	r2, #0
 8005880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005882:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <MX_USART3_UART_Init+0x58>)
 8005884:	2200      	movs	r2, #0
 8005886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <MX_USART3_UART_Init+0x58>)
 800588a:	220c      	movs	r2, #12
 800588c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <MX_USART3_UART_Init+0x58>)
 8005890:	2200      	movs	r2, #0
 8005892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <MX_USART3_UART_Init+0x58>)
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <MX_USART3_UART_Init+0x58>)
 800589c:	2200      	movs	r2, #0
 800589e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <MX_USART3_UART_Init+0x58>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80058a6:	4805      	ldr	r0, [pc, #20]	; (80058bc <MX_USART3_UART_Init+0x58>)
 80058a8:	f003 fcce 	bl	8009248 <HAL_UART_Init>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80058b2:	f7fe f807 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000073c 	.word	0x2000073c
 80058c0:	40004800 	.word	0x40004800

080058c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b0aa      	sub	sp, #168	; 0xa8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058dc:	f107 0310 	add.w	r3, r7, #16
 80058e0:	2284      	movs	r2, #132	; 0x84
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f009 f997 	bl	800ec18 <memset>
  if(uartHandle->Instance==USART3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a26      	ldr	r2, [pc, #152]	; (8005988 <HAL_UART_MspInit+0xc4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d144      	bne.n	800597e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80058fa:	2300      	movs	r3, #0
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058fe:	f107 0310 	add.w	r3, r7, #16
 8005902:	4618      	mov	r0, r3
 8005904:	f001 ff10 	bl	8007728 <HAL_RCCEx_PeriphCLKConfig>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800590e:	f7fd ffd9 	bl	80038c4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005912:	4b1e      	ldr	r3, [pc, #120]	; (800598c <HAL_UART_MspInit+0xc8>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_UART_MspInit+0xc8>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591c:	6413      	str	r3, [r2, #64]	; 0x40
 800591e:	4b1b      	ldr	r3, [pc, #108]	; (800598c <HAL_UART_MspInit+0xc8>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <HAL_UART_MspInit+0xc8>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <HAL_UART_MspInit+0xc8>)
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	6313      	str	r3, [r2, #48]	; 0x30
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_UART_MspInit+0xc8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594a:	2302      	movs	r3, #2
 800594c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005956:	2303      	movs	r3, #3
 8005958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800595c:	2307      	movs	r3, #7
 800595e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005962:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005966:	4619      	mov	r1, r3
 8005968:	4809      	ldr	r0, [pc, #36]	; (8005990 <HAL_UART_MspInit+0xcc>)
 800596a:	f000 f9dd 	bl	8005d28 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800596e:	2200      	movs	r2, #0
 8005970:	2105      	movs	r1, #5
 8005972:	2027      	movs	r0, #39	; 0x27
 8005974:	f000 f91c 	bl	8005bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005978:	2027      	movs	r0, #39	; 0x27
 800597a:	f000 f935 	bl	8005be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800597e:	bf00      	nop
 8005980:	37a8      	adds	r7, #168	; 0xa8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40004800 	.word	0x40004800
 800598c:	40023800 	.word	0x40023800
 8005990:	40020c00 	.word	0x40020c00

08005994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005998:	480d      	ldr	r0, [pc, #52]	; (80059d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800599a:	490e      	ldr	r1, [pc, #56]	; (80059d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800599c:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800599e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059a0:	e002      	b.n	80059a8 <LoopCopyDataInit>

080059a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059a6:	3304      	adds	r3, #4

080059a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059ac:	d3f9      	bcc.n	80059a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ae:	4a0b      	ldr	r2, [pc, #44]	; (80059dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80059b0:	4c0b      	ldr	r4, [pc, #44]	; (80059e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80059b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059b4:	e001      	b.n	80059ba <LoopFillZerobss>

080059b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059b8:	3204      	adds	r2, #4

080059ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059bc:	d3fb      	bcc.n	80059b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80059be:	f7ff fce9 	bl	8005394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059c2:	f009 f8f5 	bl	800ebb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059c6:	f7fd fee5 	bl	8003794 <main>
  bx  lr    
 80059ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80059d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80059d8:	0800f9f4 	.word	0x0800f9f4
  ldr r2, =_sbss
 80059dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80059e0:	20009e8c 	.word	0x20009e8c

080059e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059e4:	e7fe      	b.n	80059e4 <ADC_IRQHandler>

080059e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059ea:	2003      	movs	r0, #3
 80059ec:	f000 f8d5 	bl	8005b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059f0:	200f      	movs	r0, #15
 80059f2:	f7ff fc21 	bl	8005238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059f6:	f7ff fbf7 	bl	80051e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_IncTick+0x20>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_IncTick+0x24>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4413      	add	r3, r2
 8005a10:	4a04      	ldr	r2, [pc, #16]	; (8005a24 <HAL_IncTick+0x24>)
 8005a12:	6013      	str	r3, [r2, #0]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	2000000c 	.word	0x2000000c
 8005a24:	200007c0 	.word	0x200007c0

08005a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a2c:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <HAL_GetTick+0x14>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	200007c0 	.word	0x200007c0

08005a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <__NVIC_SetPriorityGrouping+0x40>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <__NVIC_SetPriorityGrouping+0x44>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a6e:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <__NVIC_SetPriorityGrouping+0x40>)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	60d3      	str	r3, [r2, #12]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00
 8005a84:	05fa0000 	.word	0x05fa0000

08005a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 0307 	and.w	r3, r3, #7
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	e000ed00 	.word	0xe000ed00

08005aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	db0b      	blt.n	8005ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	f003 021f 	and.w	r2, r3, #31
 8005abc:	4907      	ldr	r1, [pc, #28]	; (8005adc <__NVIC_EnableIRQ+0x38>)
 8005abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000e100 	.word	0xe000e100

08005ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db0a      	blt.n	8005b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	490c      	ldr	r1, [pc, #48]	; (8005b2c <__NVIC_SetPriority+0x4c>)
 8005afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afe:	0112      	lsls	r2, r2, #4
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	440b      	add	r3, r1
 8005b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b08:	e00a      	b.n	8005b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	4908      	ldr	r1, [pc, #32]	; (8005b30 <__NVIC_SetPriority+0x50>)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	3b04      	subs	r3, #4
 8005b18:	0112      	lsls	r2, r2, #4
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	761a      	strb	r2, [r3, #24]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	e000e100 	.word	0xe000e100
 8005b30:	e000ed00 	.word	0xe000ed00

08005b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f1c3 0307 	rsb	r3, r3, #7
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	bf28      	it	cs
 8005b52:	2304      	movcs	r3, #4
 8005b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2b06      	cmp	r3, #6
 8005b5c:	d902      	bls.n	8005b64 <NVIC_EncodePriority+0x30>
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3b03      	subs	r3, #3
 8005b62:	e000      	b.n	8005b66 <NVIC_EncodePriority+0x32>
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43da      	mvns	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	401a      	ands	r2, r3
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	43d9      	mvns	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b8c:	4313      	orrs	r3, r2
         );
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff ff4c 	bl	8005a40 <__NVIC_SetPriorityGrouping>
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bc2:	f7ff ff61 	bl	8005a88 <__NVIC_GetPriorityGrouping>
 8005bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	6978      	ldr	r0, [r7, #20]
 8005bce:	f7ff ffb1 	bl	8005b34 <NVIC_EncodePriority>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff80 	bl	8005ae0 <__NVIC_SetPriority>
}
 8005be0:	bf00      	nop
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff ff54 	bl	8005aa4 <__NVIC_EnableIRQ>
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c12:	f7ff ff09 	bl	8005a28 <HAL_GetTick>
 8005c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d008      	beq.n	8005c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e052      	b.n	8005cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0216 	bic.w	r2, r2, #22
 8005c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_DMA_Abort+0x62>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0208 	bic.w	r2, r2, #8
 8005c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c86:	e013      	b.n	8005cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c88:	f7ff fece 	bl	8005a28 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d90c      	bls.n	8005cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e015      	b.n	8005cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e4      	bne.n	8005c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc2:	223f      	movs	r2, #63	; 0x3f
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d004      	beq.n	8005d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2280      	movs	r2, #128	; 0x80
 8005cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e00c      	b.n	8005d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2205      	movs	r2, #5
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0201 	bic.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	e175      	b.n	8006034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d48:	2201      	movs	r2, #1
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	f040 8164 	bne.w	800602e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d005      	beq.n	8005d7e <HAL_GPIO_Init+0x56>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d130      	bne.n	8005de0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	2203      	movs	r2, #3
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005db4:	2201      	movs	r2, #1
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 0201 	and.w	r2, r3, #1
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d017      	beq.n	8005e1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	2203      	movs	r2, #3
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d123      	bne.n	8005e70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	08da      	lsrs	r2, r3, #3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3208      	adds	r2, #8
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	220f      	movs	r2, #15
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	08da      	lsrs	r2, r3, #3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3208      	adds	r2, #8
 8005e6a:	69b9      	ldr	r1, [r7, #24]
 8005e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 0203 	and.w	r2, r3, #3
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80be 	beq.w	800602e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb2:	4b66      	ldr	r3, [pc, #408]	; (800604c <HAL_GPIO_Init+0x324>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	4a65      	ldr	r2, [pc, #404]	; (800604c <HAL_GPIO_Init+0x324>)
 8005eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ebe:	4b63      	ldr	r3, [pc, #396]	; (800604c <HAL_GPIO_Init+0x324>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005eca:	4a61      	ldr	r2, [pc, #388]	; (8006050 <HAL_GPIO_Init+0x328>)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	220f      	movs	r2, #15
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a58      	ldr	r2, [pc, #352]	; (8006054 <HAL_GPIO_Init+0x32c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d037      	beq.n	8005f66 <HAL_GPIO_Init+0x23e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a57      	ldr	r2, [pc, #348]	; (8006058 <HAL_GPIO_Init+0x330>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d031      	beq.n	8005f62 <HAL_GPIO_Init+0x23a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a56      	ldr	r2, [pc, #344]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d02b      	beq.n	8005f5e <HAL_GPIO_Init+0x236>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a55      	ldr	r2, [pc, #340]	; (8006060 <HAL_GPIO_Init+0x338>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d025      	beq.n	8005f5a <HAL_GPIO_Init+0x232>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a54      	ldr	r2, [pc, #336]	; (8006064 <HAL_GPIO_Init+0x33c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01f      	beq.n	8005f56 <HAL_GPIO_Init+0x22e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a53      	ldr	r2, [pc, #332]	; (8006068 <HAL_GPIO_Init+0x340>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d019      	beq.n	8005f52 <HAL_GPIO_Init+0x22a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a52      	ldr	r2, [pc, #328]	; (800606c <HAL_GPIO_Init+0x344>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_GPIO_Init+0x226>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a51      	ldr	r2, [pc, #324]	; (8006070 <HAL_GPIO_Init+0x348>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00d      	beq.n	8005f4a <HAL_GPIO_Init+0x222>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a50      	ldr	r2, [pc, #320]	; (8006074 <HAL_GPIO_Init+0x34c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d007      	beq.n	8005f46 <HAL_GPIO_Init+0x21e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a4f      	ldr	r2, [pc, #316]	; (8006078 <HAL_GPIO_Init+0x350>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d101      	bne.n	8005f42 <HAL_GPIO_Init+0x21a>
 8005f3e:	2309      	movs	r3, #9
 8005f40:	e012      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f42:	230a      	movs	r3, #10
 8005f44:	e010      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f46:	2308      	movs	r3, #8
 8005f48:	e00e      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f4a:	2307      	movs	r3, #7
 8005f4c:	e00c      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f4e:	2306      	movs	r3, #6
 8005f50:	e00a      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f52:	2305      	movs	r3, #5
 8005f54:	e008      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f56:	2304      	movs	r3, #4
 8005f58:	e006      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e004      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e002      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <HAL_GPIO_Init+0x240>
 8005f66:	2300      	movs	r3, #0
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	f002 0203 	and.w	r2, r2, #3
 8005f6e:	0092      	lsls	r2, r2, #2
 8005f70:	4093      	lsls	r3, r2
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f78:	4935      	ldr	r1, [pc, #212]	; (8006050 <HAL_GPIO_Init+0x328>)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	089b      	lsrs	r3, r3, #2
 8005f7e:	3302      	adds	r3, #2
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f86:	4b3d      	ldr	r3, [pc, #244]	; (800607c <HAL_GPIO_Init+0x354>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	4013      	ands	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005faa:	4a34      	ldr	r2, [pc, #208]	; (800607c <HAL_GPIO_Init+0x354>)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fb0:	4b32      	ldr	r3, [pc, #200]	; (800607c <HAL_GPIO_Init+0x354>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <HAL_GPIO_Init+0x354>)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fda:	4b28      	ldr	r3, [pc, #160]	; (800607c <HAL_GPIO_Init+0x354>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	; (800607c <HAL_GPIO_Init+0x354>)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006004:	4b1d      	ldr	r3, [pc, #116]	; (800607c <HAL_GPIO_Init+0x354>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006028:	4a14      	ldr	r2, [pc, #80]	; (800607c <HAL_GPIO_Init+0x354>)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3301      	adds	r3, #1
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b0f      	cmp	r3, #15
 8006038:	f67f ae86 	bls.w	8005d48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	3724      	adds	r7, #36	; 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40023800 	.word	0x40023800
 8006050:	40013800 	.word	0x40013800
 8006054:	40020000 	.word	0x40020000
 8006058:	40020400 	.word	0x40020400
 800605c:	40020800 	.word	0x40020800
 8006060:	40020c00 	.word	0x40020c00
 8006064:	40021000 	.word	0x40021000
 8006068:	40021400 	.word	0x40021400
 800606c:	40021800 	.word	0x40021800
 8006070:	40021c00 	.word	0x40021c00
 8006074:	40022000 	.word	0x40022000
 8006078:	40022400 	.word	0x40022400
 800607c:	40013c00 	.word	0x40013c00

08006080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
 800608c:	4613      	mov	r3, r2
 800608e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006090:	787b      	ldrb	r3, [r7, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006096:	887a      	ldrh	r2, [r7, #2]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800609c:	e003      	b.n	80060a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800609e:	887b      	ldrh	r3, [r7, #2]
 80060a0:	041a      	lsls	r2, r3, #16
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	619a      	str	r2, [r3, #24]
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060c4:	887a      	ldrh	r2, [r7, #2]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4013      	ands	r3, r2
 80060ca:	041a      	lsls	r2, r3, #16
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	43d9      	mvns	r1, r3
 80060d0:	887b      	ldrh	r3, [r7, #2]
 80060d2:	400b      	ands	r3, r1
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060fe:	4a05      	ldr	r2, [pc, #20]	; (8006114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	4618      	mov	r0, r3
 8006108:	f7fd f8bc 	bl	8003284 <HAL_GPIO_EXTI_Callback>
  }
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40013c00 	.word	0x40013c00

08006118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e07f      	b.n	800622a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fd fa82 	bl	8003648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2224      	movs	r2, #36	; 0x24
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0201 	bic.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d107      	bne.n	8006192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	e006      	b.n	80061a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800619e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d104      	bne.n	80061b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6859      	ldr	r1, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <HAL_I2C_Init+0x11c>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69d9      	ldr	r1, [r3, #28]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	02008000 	.word	0x02008000

08006238 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	4608      	mov	r0, r1
 8006242:	4611      	mov	r1, r2
 8006244:	461a      	mov	r2, r3
 8006246:	4603      	mov	r3, r0
 8006248:	817b      	strh	r3, [r7, #10]
 800624a:	460b      	mov	r3, r1
 800624c:	813b      	strh	r3, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b20      	cmp	r3, #32
 800625c:	f040 80f9 	bne.w	8006452 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_I2C_Mem_Write+0x34>
 8006266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d105      	bne.n	8006278 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006272:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0ed      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_I2C_Mem_Write+0x4e>
 8006282:	2302      	movs	r3, #2
 8006284:	e0e6      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800628e:	f7ff fbcb 	bl	8005a28 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2319      	movs	r3, #25
 800629a:	2201      	movs	r2, #1
 800629c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fac3 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0d1      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2221      	movs	r2, #33	; 0x21
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2240      	movs	r2, #64	; 0x40
 80062bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062d8:	88f8      	ldrh	r0, [r7, #6]
 80062da:	893a      	ldrh	r2, [r7, #8]
 80062dc:	8979      	ldrh	r1, [r7, #10]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4603      	mov	r3, r0
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f9d3 	bl	8006694 <I2C_RequestMemoryWrite>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0a9      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2bff      	cmp	r3, #255	; 0xff
 8006308:	d90e      	bls.n	8006328 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	b2da      	uxtb	r2, r3
 8006316:	8979      	ldrh	r1, [r7, #10]
 8006318:	2300      	movs	r3, #0
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fc2b 	bl	8006b7c <I2C_TransferConfig>
 8006326:	e00f      	b.n	8006348 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006336:	b2da      	uxtb	r2, r3
 8006338:	8979      	ldrh	r1, [r7, #10]
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fc1a 	bl	8006b7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 faad 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e07b      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d034      	beq.n	8006400 <HAL_I2C_Mem_Write+0x1c8>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d130      	bne.n	8006400 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	2200      	movs	r2, #0
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 fa3f 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e04d      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2bff      	cmp	r3, #255	; 0xff
 80063c0:	d90e      	bls.n	80063e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22ff      	movs	r2, #255	; 0xff
 80063c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	8979      	ldrh	r1, [r7, #10]
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fbcf 	bl	8006b7c <I2C_TransferConfig>
 80063de:	e00f      	b.n	8006400 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	8979      	ldrh	r1, [r7, #10]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fbbe 	bl	8006b7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d19e      	bne.n	8006348 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa8c 	bl	800692c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e01a      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2220      	movs	r2, #32
 8006424:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6859      	ldr	r1, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <HAL_I2C_Mem_Write+0x224>)
 8006432:	400b      	ands	r3, r1
 8006434:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	fe00e800 	.word	0xfe00e800

08006460 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4603      	mov	r3, r0
 8006470:	817b      	strh	r3, [r7, #10]
 8006472:	460b      	mov	r3, r1
 8006474:	813b      	strh	r3, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b20      	cmp	r3, #32
 8006484:	f040 80fd 	bne.w	8006682 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_I2C_Mem_Read+0x34>
 800648e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0f1      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_I2C_Mem_Read+0x4e>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e0ea      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064b6:	f7ff fab7 	bl	8005a28 <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2319      	movs	r3, #25
 80064c2:	2201      	movs	r2, #1
 80064c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f9af 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0d5      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2222      	movs	r2, #34	; 0x22
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006500:	88f8      	ldrh	r0, [r7, #6]
 8006502:	893a      	ldrh	r2, [r7, #8]
 8006504:	8979      	ldrh	r1, [r7, #10]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4603      	mov	r3, r0
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f913 	bl	800673c <I2C_RequestMemoryRead>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0ad      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2bff      	cmp	r3, #255	; 0xff
 8006530:	d90e      	bls.n	8006550 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	b2da      	uxtb	r2, r3
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	4b52      	ldr	r3, [pc, #328]	; (800668c <HAL_I2C_Mem_Read+0x22c>)
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fb17 	bl	8006b7c <I2C_TransferConfig>
 800654e:	e00f      	b.n	8006570 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	b2da      	uxtb	r2, r3
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	4b4a      	ldr	r3, [pc, #296]	; (800668c <HAL_I2C_Mem_Read+0x22c>)
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fb06 	bl	8006b7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2200      	movs	r2, #0
 8006578:	2104      	movs	r1, #4
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f956 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e07c      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d034      	beq.n	8006630 <HAL_I2C_Mem_Read+0x1d0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d130      	bne.n	8006630 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	2200      	movs	r2, #0
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f927 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e04d      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2bff      	cmp	r3, #255	; 0xff
 80065f0:	d90e      	bls.n	8006610 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	22ff      	movs	r2, #255	; 0xff
 80065f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	8979      	ldrh	r1, [r7, #10]
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fab7 	bl	8006b7c <I2C_TransferConfig>
 800660e:	e00f      	b.n	8006630 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	b2da      	uxtb	r2, r3
 8006620:	8979      	ldrh	r1, [r7, #10]
 8006622:	2300      	movs	r3, #0
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 faa6 	bl	8006b7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d19a      	bne.n	8006570 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f974 	bl	800692c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e01a      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2220      	movs	r2, #32
 8006654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6859      	ldr	r1, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_I2C_Mem_Read+0x230>)
 8006662:	400b      	ands	r3, r1
 8006664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	80002400 	.word	0x80002400
 8006690:	fe00e800 	.word	0xfe00e800

08006694 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	460b      	mov	r3, r1
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	8979      	ldrh	r1, [r7, #10]
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <I2C_RequestMemoryWrite+0xa4>)
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fa5d 	bl	8006b7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f8f0 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e02c      	b.n	8006730 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d105      	bne.n	80066e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	629a      	str	r2, [r3, #40]	; 0x28
 80066e6:	e015      	b.n	8006714 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066e8:	893b      	ldrh	r3, [r7, #8]
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8d6 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e012      	b.n	8006730 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2200      	movs	r2, #0
 800671c:	2180      	movs	r1, #128	; 0x80
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f884 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	80002000 	.word	0x80002000

0800673c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	8979      	ldrh	r1, [r7, #10]
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <I2C_RequestMemoryRead+0xa4>)
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2300      	movs	r3, #0
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fa0a 	bl	8006b7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f89d 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e02c      	b.n	80067d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006782:	893b      	ldrh	r3, [r7, #8]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	629a      	str	r2, [r3, #40]	; 0x28
 800678c:	e015      	b.n	80067ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	0a1b      	lsrs	r3, r3, #8
 8006792:	b29b      	uxth	r3, r3
 8006794:	b2da      	uxtb	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f883 	bl	80068ac <I2C_WaitOnTXISFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e012      	b.n	80067d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b0:	893b      	ldrh	r3, [r7, #8]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2140      	movs	r1, #64	; 0x40
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f831 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	80002000 	.word	0x80002000

080067e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d103      	bne.n	8006802 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d007      	beq.n	8006820 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	619a      	str	r2, [r3, #24]
  }
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800683c:	e022      	b.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d01e      	beq.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7ff f8ef 	bl	8005a28 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d113      	bne.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e00f      	b.n	80068a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4013      	ands	r3, r2
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	461a      	mov	r2, r3
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d0cd      	beq.n	800683e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b8:	e02c      	b.n	8006914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f870 	bl	80069a4 <I2C_IsErrorOccurred>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e02a      	b.n	8006924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d01e      	beq.n	8006914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7ff f8a7 	bl	8005a28 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d113      	bne.n	8006914 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e007      	b.n	8006924 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b02      	cmp	r3, #2
 8006920:	d1cb      	bne.n	80068ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006938:	e028      	b.n	800698c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f830 	bl	80069a4 <I2C_IsErrorOccurred>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e026      	b.n	800699c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694e:	f7ff f86b 	bl	8005a28 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d113      	bne.n	800698c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e007      	b.n	800699c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b20      	cmp	r3, #32
 8006998:	d1cf      	bne.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	; 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d075      	beq.n	8006abc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2210      	movs	r2, #16
 80069d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069d8:	e056      	b.n	8006a88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d052      	beq.n	8006a88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7ff f821 	bl	8005a28 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <I2C_IsErrorOccurred+0x54>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d147      	bne.n	8006a88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1a:	d12e      	bne.n	8006a7a <I2C_IsErrorOccurred+0xd6>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a22:	d02a      	beq.n	8006a7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a24:	7cfb      	ldrb	r3, [r7, #19]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d027      	beq.n	8006a7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a38:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a3a:	f7fe fff5 	bl	8005a28 <HAL_GetTick>
 8006a3e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a40:	e01b      	b.n	8006a7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a42:	f7fe fff1 	bl	8005a28 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b19      	cmp	r3, #25
 8006a4e:	d914      	bls.n	8006a7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	f043 0220 	orr.w	r2, r3, #32
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d1dc      	bne.n	8006a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d003      	beq.n	8006a9e <I2C_IsErrorOccurred+0xfa>
 8006a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d09d      	beq.n	80069da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f043 0304 	orr.w	r3, r3, #4
 8006ab4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ade:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	f043 0308 	orr.w	r3, r3, #8
 8006af6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01c      	beq.n	8006b6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff fe56 	bl	80067e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6859      	ldr	r1, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <I2C_IsErrorOccurred+0x1d4>)
 8006b44:	400b      	ands	r3, r1
 8006b46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3728      	adds	r7, #40	; 0x28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	fe00e800 	.word	0xfe00e800

08006b7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	817b      	strh	r3, [r7, #10]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b94:	7a7b      	ldrb	r3, [r7, #9]
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b9c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006baa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	0d5b      	lsrs	r3, r3, #21
 8006bb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bba:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <I2C_TransferConfig+0x60>)
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	ea02 0103 	and.w	r1, r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	03ff63ff 	.word	0x03ff63ff

08006be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d138      	bne.n	8006c68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e032      	b.n	8006c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2224      	movs	r2, #36	; 0x24
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d139      	bne.n	8006d00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e033      	b.n	8006d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2224      	movs	r2, #36	; 0x24
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e000      	b.n	8006d02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d00:	2302      	movs	r3, #2
  }
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a04      	ldr	r2, [pc, #16]	; (8006d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1e:	6013      	str	r3, [r2, #0]
}
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40007000 	.word	0x40007000

08006d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e291      	b.n	800726a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8087 	beq.w	8006e62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d54:	4b96      	ldr	r3, [pc, #600]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 030c 	and.w	r3, r3, #12
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d00c      	beq.n	8006d7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d60:	4b93      	ldr	r3, [pc, #588]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d112      	bne.n	8006d92 <HAL_RCC_OscConfig+0x62>
 8006d6c:	4b90      	ldr	r3, [pc, #576]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d78:	d10b      	bne.n	8006d92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7a:	4b8d      	ldr	r3, [pc, #564]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d06c      	beq.n	8006e60 <HAL_RCC_OscConfig+0x130>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d168      	bne.n	8006e60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e26b      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9a:	d106      	bne.n	8006daa <HAL_RCC_OscConfig+0x7a>
 8006d9c:	4b84      	ldr	r3, [pc, #528]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a83      	ldr	r2, [pc, #524]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	e02e      	b.n	8006e08 <HAL_RCC_OscConfig+0xd8>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCC_OscConfig+0x9c>
 8006db2:	4b7f      	ldr	r3, [pc, #508]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a7e      	ldr	r2, [pc, #504]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	4b7c      	ldr	r3, [pc, #496]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a7b      	ldr	r2, [pc, #492]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e01d      	b.n	8006e08 <HAL_RCC_OscConfig+0xd8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RCC_OscConfig+0xc0>
 8006dd6:	4b76      	ldr	r3, [pc, #472]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a75      	ldr	r2, [pc, #468]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	4b73      	ldr	r3, [pc, #460]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a72      	ldr	r2, [pc, #456]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e00b      	b.n	8006e08 <HAL_RCC_OscConfig+0xd8>
 8006df0:	4b6f      	ldr	r3, [pc, #444]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a6e      	ldr	r2, [pc, #440]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	4b6c      	ldr	r3, [pc, #432]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a6b      	ldr	r2, [pc, #428]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d013      	beq.n	8006e38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e10:	f7fe fe0a 	bl	8005a28 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e18:	f7fe fe06 	bl	8005a28 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b64      	cmp	r3, #100	; 0x64
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e21f      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2a:	4b61      	ldr	r3, [pc, #388]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0f0      	beq.n	8006e18 <HAL_RCC_OscConfig+0xe8>
 8006e36:	e014      	b.n	8006e62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e38:	f7fe fdf6 	bl	8005a28 <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e40:	f7fe fdf2 	bl	8005a28 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b64      	cmp	r3, #100	; 0x64
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e20b      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e52:	4b57      	ldr	r3, [pc, #348]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x110>
 8006e5e:	e000      	b.n	8006e62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d069      	beq.n	8006f42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e6e:	4b50      	ldr	r3, [pc, #320]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 030c 	and.w	r3, r3, #12
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e7a:	4b4d      	ldr	r3, [pc, #308]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 030c 	and.w	r3, r3, #12
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d11c      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x190>
 8006e86:	4b4a      	ldr	r3, [pc, #296]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d116      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e92:	4b47      	ldr	r3, [pc, #284]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_RCC_OscConfig+0x17a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d001      	beq.n	8006eaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e1df      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	493d      	ldr	r1, [pc, #244]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ebe:	e040      	b.n	8006f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d023      	beq.n	8006f10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ec8:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a38      	ldr	r2, [pc, #224]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed4:	f7fe fda8 	bl	8005a28 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006edc:	f7fe fda4 	bl	8005a28 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e1bd      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eee:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efa:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4929      	ldr	r1, [pc, #164]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	600b      	str	r3, [r1, #0]
 8006f0e:	e018      	b.n	8006f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f10:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fe fd84 	bl	8005a28 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f24:	f7fe fd80 	bl	8005a28 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e199      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f0      	bne.n	8006f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d038      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d019      	beq.n	8006f8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f56:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	4a15      	ldr	r2, [pc, #84]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f62:	f7fe fd61 	bl	8005a28 <HAL_GetTick>
 8006f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f6a:	f7fe fd5d 	bl	8005a28 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e176      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCC_OscConfig+0x23a>
 8006f88:	e01a      	b.n	8006fc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8e:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <HAL_RCC_OscConfig+0x280>)
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f96:	f7fe fd47 	bl	8005a28 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f9c:	e00a      	b.n	8006fb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f9e:	f7fe fd43 	bl	8005a28 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d903      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e15c      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
 8006fb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb4:	4b91      	ldr	r3, [pc, #580]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1ee      	bne.n	8006f9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 80a4 	beq.w	8007116 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fce:	4b8b      	ldr	r3, [pc, #556]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	4b88      	ldr	r3, [pc, #544]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	4a87      	ldr	r2, [pc, #540]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8006fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe6:	4b85      	ldr	r3, [pc, #532]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff6:	4b82      	ldr	r3, [pc, #520]	; (8007200 <HAL_RCC_OscConfig+0x4d0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d118      	bne.n	8007034 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007002:	4b7f      	ldr	r3, [pc, #508]	; (8007200 <HAL_RCC_OscConfig+0x4d0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7e      	ldr	r2, [pc, #504]	; (8007200 <HAL_RCC_OscConfig+0x4d0>)
 8007008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700e:	f7fe fd0b 	bl	8005a28 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007016:	f7fe fd07 	bl	8005a28 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b64      	cmp	r3, #100	; 0x64
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e120      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007028:	4b75      	ldr	r3, [pc, #468]	; (8007200 <HAL_RCC_OscConfig+0x4d0>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0f0      	beq.n	8007016 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d106      	bne.n	800704a <HAL_RCC_OscConfig+0x31a>
 800703c:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800703e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007040:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	6713      	str	r3, [r2, #112]	; 0x70
 8007048:	e02d      	b.n	80070a6 <HAL_RCC_OscConfig+0x376>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x33c>
 8007052:	4b6a      	ldr	r3, [pc, #424]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	4a69      	ldr	r2, [pc, #420]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	6713      	str	r3, [r2, #112]	; 0x70
 800705e:	4b67      	ldr	r3, [pc, #412]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007062:	4a66      	ldr	r2, [pc, #408]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	6713      	str	r3, [r2, #112]	; 0x70
 800706a:	e01c      	b.n	80070a6 <HAL_RCC_OscConfig+0x376>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b05      	cmp	r3, #5
 8007072:	d10c      	bne.n	800708e <HAL_RCC_OscConfig+0x35e>
 8007074:	4b61      	ldr	r3, [pc, #388]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	4a60      	ldr	r2, [pc, #384]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800707a:	f043 0304 	orr.w	r3, r3, #4
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	4b5e      	ldr	r3, [pc, #376]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	4a5d      	ldr	r2, [pc, #372]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	6713      	str	r3, [r2, #112]	; 0x70
 800708c:	e00b      	b.n	80070a6 <HAL_RCC_OscConfig+0x376>
 800708e:	4b5b      	ldr	r3, [pc, #364]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	4a5a      	ldr	r2, [pc, #360]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	6713      	str	r3, [r2, #112]	; 0x70
 800709a:	4b58      	ldr	r3, [pc, #352]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a57      	ldr	r2, [pc, #348]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80070a0:	f023 0304 	bic.w	r3, r3, #4
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d015      	beq.n	80070da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ae:	f7fe fcbb 	bl	8005a28 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b4:	e00a      	b.n	80070cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7fe fcb7 	bl	8005a28 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0ce      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070cc:	4b4b      	ldr	r3, [pc, #300]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0ee      	beq.n	80070b6 <HAL_RCC_OscConfig+0x386>
 80070d8:	e014      	b.n	8007104 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070da:	f7fe fca5 	bl	8005a28 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7fe fca1 	bl	8005a28 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e0b8      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f8:	4b40      	ldr	r3, [pc, #256]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80070fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ee      	bne.n	80070e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d105      	bne.n	8007116 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800710a:	4b3c      	ldr	r3, [pc, #240]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	4a3b      	ldr	r2, [pc, #236]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007114:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80a4 	beq.w	8007268 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007120:	4b36      	ldr	r3, [pc, #216]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 030c 	and.w	r3, r3, #12
 8007128:	2b08      	cmp	r3, #8
 800712a:	d06b      	beq.n	8007204 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d149      	bne.n	80071c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007134:	4b31      	ldr	r3, [pc, #196]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a30      	ldr	r2, [pc, #192]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800713a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800713e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fe fc72 	bl	8005a28 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fe fc6e 	bl	8005a28 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e087      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715a:	4b28      	ldr	r3, [pc, #160]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	019b      	lsls	r3, r3, #6
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	3b01      	subs	r3, #1
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	061b      	lsls	r3, r3, #24
 800718a:	4313      	orrs	r3, r2
 800718c:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800718e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007192:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007194:	4b19      	ldr	r3, [pc, #100]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a18      	ldr	r2, [pc, #96]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 800719a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800719e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fe fc42 	bl	8005a28 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a8:	f7fe fc3e 	bl	8005a28 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e057      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ba:	4b10      	ldr	r3, [pc, #64]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCC_OscConfig+0x478>
 80071c6:	e04f      	b.n	8007268 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80071ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d4:	f7fe fc28 	bl	8005a28 <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071dc:	f7fe fc24 	bl	8005a28 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e03d      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ee:	4b03      	ldr	r3, [pc, #12]	; (80071fc <HAL_RCC_OscConfig+0x4cc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f0      	bne.n	80071dc <HAL_RCC_OscConfig+0x4ac>
 80071fa:	e035      	b.n	8007268 <HAL_RCC_OscConfig+0x538>
 80071fc:	40023800 	.word	0x40023800
 8007200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <HAL_RCC_OscConfig+0x544>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d028      	beq.n	8007264 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d121      	bne.n	8007264 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800722a:	429a      	cmp	r2, r3
 800722c:	d11a      	bne.n	8007264 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007234:	4013      	ands	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800723a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800723c:	4293      	cmp	r3, r2
 800723e:	d111      	bne.n	8007264 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	3b01      	subs	r3, #1
 800724e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d107      	bne.n	8007264 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007260:	429a      	cmp	r2, r3
 8007262:	d001      	beq.n	8007268 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800

08007278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0d0      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007290:	4b6a      	ldr	r3, [pc, #424]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d910      	bls.n	80072c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729e:	4b67      	ldr	r3, [pc, #412]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 020f 	bic.w	r2, r3, #15
 80072a6:	4965      	ldr	r1, [pc, #404]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ae:	4b63      	ldr	r3, [pc, #396]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d001      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0b8      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d020      	beq.n	800730e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072d8:	4b59      	ldr	r3, [pc, #356]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4a58      	ldr	r2, [pc, #352]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80072de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072f0:	4b53      	ldr	r3, [pc, #332]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	4a52      	ldr	r2, [pc, #328]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80072f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072fc:	4b50      	ldr	r3, [pc, #320]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	494d      	ldr	r1, [pc, #308]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 800730a:	4313      	orrs	r3, r2
 800730c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d040      	beq.n	800739c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d107      	bne.n	8007332 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007322:	4b47      	ldr	r3, [pc, #284]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d115      	bne.n	800735a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e07f      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d107      	bne.n	800734a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733a:	4b41      	ldr	r3, [pc, #260]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e073      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734a:	4b3d      	ldr	r3, [pc, #244]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e06b      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800735a:	4b39      	ldr	r3, [pc, #228]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 0203 	bic.w	r2, r3, #3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4936      	ldr	r1, [pc, #216]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 8007368:	4313      	orrs	r3, r2
 800736a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736c:	f7fe fb5c 	bl	8005a28 <HAL_GetTick>
 8007370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007372:	e00a      	b.n	800738a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007374:	f7fe fb58 	bl	8005a28 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e053      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738a:	4b2d      	ldr	r3, [pc, #180]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 020c 	and.w	r2, r3, #12
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	429a      	cmp	r2, r3
 800739a:	d1eb      	bne.n	8007374 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800739c:	4b27      	ldr	r3, [pc, #156]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d210      	bcs.n	80073cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073aa:	4b24      	ldr	r3, [pc, #144]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f023 020f 	bic.w	r2, r3, #15
 80073b2:	4922      	ldr	r1, [pc, #136]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ba:	4b20      	ldr	r3, [pc, #128]	; (800743c <HAL_RCC_ClockConfig+0x1c4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d001      	beq.n	80073cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e032      	b.n	8007432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073d8:	4b19      	ldr	r3, [pc, #100]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4916      	ldr	r1, [pc, #88]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073f6:	4b12      	ldr	r3, [pc, #72]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	490e      	ldr	r1, [pc, #56]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 8007406:	4313      	orrs	r3, r2
 8007408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800740a:	f000 f821 	bl	8007450 <HAL_RCC_GetSysClockFreq>
 800740e:	4602      	mov	r2, r0
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	490a      	ldr	r1, [pc, #40]	; (8007444 <HAL_RCC_ClockConfig+0x1cc>)
 800741c:	5ccb      	ldrb	r3, [r1, r3]
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	4a09      	ldr	r2, [pc, #36]	; (8007448 <HAL_RCC_ClockConfig+0x1d0>)
 8007424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <HAL_RCC_ClockConfig+0x1d4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7fd ff04 	bl	8005238 <HAL_InitTick>

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40023c00 	.word	0x40023c00
 8007440:	40023800 	.word	0x40023800
 8007444:	0800f868 	.word	0x0800f868
 8007448:	20000004 	.word	0x20000004
 800744c:	20000008 	.word	0x20000008

08007450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007454:	b094      	sub	sp, #80	; 0x50
 8007456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
 800745c:	2300      	movs	r3, #0
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007460:	2300      	movs	r3, #0
 8007462:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007468:	4b79      	ldr	r3, [pc, #484]	; (8007650 <HAL_RCC_GetSysClockFreq+0x200>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 030c 	and.w	r3, r3, #12
 8007470:	2b08      	cmp	r3, #8
 8007472:	d00d      	beq.n	8007490 <HAL_RCC_GetSysClockFreq+0x40>
 8007474:	2b08      	cmp	r3, #8
 8007476:	f200 80e1 	bhi.w	800763c <HAL_RCC_GetSysClockFreq+0x1ec>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0x34>
 800747e:	2b04      	cmp	r3, #4
 8007480:	d003      	beq.n	800748a <HAL_RCC_GetSysClockFreq+0x3a>
 8007482:	e0db      	b.n	800763c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007484:	4b73      	ldr	r3, [pc, #460]	; (8007654 <HAL_RCC_GetSysClockFreq+0x204>)
 8007486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007488:	e0db      	b.n	8007642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800748a:	4b73      	ldr	r3, [pc, #460]	; (8007658 <HAL_RCC_GetSysClockFreq+0x208>)
 800748c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800748e:	e0d8      	b.n	8007642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007490:	4b6f      	ldr	r3, [pc, #444]	; (8007650 <HAL_RCC_GetSysClockFreq+0x200>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007498:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800749a:	4b6d      	ldr	r3, [pc, #436]	; (8007650 <HAL_RCC_GetSysClockFreq+0x200>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d063      	beq.n	800756e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a6:	4b6a      	ldr	r3, [pc, #424]	; (8007650 <HAL_RCC_GetSysClockFreq+0x200>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	099b      	lsrs	r3, r3, #6
 80074ac:	2200      	movs	r2, #0
 80074ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80074b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	633b      	str	r3, [r7, #48]	; 0x30
 80074ba:	2300      	movs	r3, #0
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
 80074be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074c2:	4622      	mov	r2, r4
 80074c4:	462b      	mov	r3, r5
 80074c6:	f04f 0000 	mov.w	r0, #0
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	0159      	lsls	r1, r3, #5
 80074d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074d4:	0150      	lsls	r0, r2, #5
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4621      	mov	r1, r4
 80074dc:	1a51      	subs	r1, r2, r1
 80074de:	6139      	str	r1, [r7, #16]
 80074e0:	4629      	mov	r1, r5
 80074e2:	eb63 0301 	sbc.w	r3, r3, r1
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074f4:	4659      	mov	r1, fp
 80074f6:	018b      	lsls	r3, r1, #6
 80074f8:	4651      	mov	r1, sl
 80074fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074fe:	4651      	mov	r1, sl
 8007500:	018a      	lsls	r2, r1, #6
 8007502:	4651      	mov	r1, sl
 8007504:	ebb2 0801 	subs.w	r8, r2, r1
 8007508:	4659      	mov	r1, fp
 800750a:	eb63 0901 	sbc.w	r9, r3, r1
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800751a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800751e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007522:	4690      	mov	r8, r2
 8007524:	4699      	mov	r9, r3
 8007526:	4623      	mov	r3, r4
 8007528:	eb18 0303 	adds.w	r3, r8, r3
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	462b      	mov	r3, r5
 8007530:	eb49 0303 	adc.w	r3, r9, r3
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007542:	4629      	mov	r1, r5
 8007544:	024b      	lsls	r3, r1, #9
 8007546:	4621      	mov	r1, r4
 8007548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800754c:	4621      	mov	r1, r4
 800754e:	024a      	lsls	r2, r1, #9
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007556:	2200      	movs	r2, #0
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28
 800755a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800755c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007560:	f7f9 fb44 	bl	8000bec <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4613      	mov	r3, r2
 800756a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800756c:	e058      	b.n	8007620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800756e:	4b38      	ldr	r3, [pc, #224]	; (8007650 <HAL_RCC_GetSysClockFreq+0x200>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	099b      	lsrs	r3, r3, #6
 8007574:	2200      	movs	r2, #0
 8007576:	4618      	mov	r0, r3
 8007578:	4611      	mov	r1, r2
 800757a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	2300      	movs	r3, #0
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
 8007584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	f04f 0000 	mov.w	r0, #0
 8007590:	f04f 0100 	mov.w	r1, #0
 8007594:	0159      	lsls	r1, r3, #5
 8007596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800759a:	0150      	lsls	r0, r2, #5
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4641      	mov	r1, r8
 80075a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80075a6:	4649      	mov	r1, r9
 80075a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075c0:	ebb2 040a 	subs.w	r4, r2, sl
 80075c4:	eb63 050b 	sbc.w	r5, r3, fp
 80075c8:	f04f 0200 	mov.w	r2, #0
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	00eb      	lsls	r3, r5, #3
 80075d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075d6:	00e2      	lsls	r2, r4, #3
 80075d8:	4614      	mov	r4, r2
 80075da:	461d      	mov	r5, r3
 80075dc:	4643      	mov	r3, r8
 80075de:	18e3      	adds	r3, r4, r3
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	464b      	mov	r3, r9
 80075e4:	eb45 0303 	adc.w	r3, r5, r3
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075f6:	4629      	mov	r1, r5
 80075f8:	028b      	lsls	r3, r1, #10
 80075fa:	4621      	mov	r1, r4
 80075fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007600:	4621      	mov	r1, r4
 8007602:	028a      	lsls	r2, r1, #10
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760a:	2200      	movs	r2, #0
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	61fa      	str	r2, [r7, #28]
 8007610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007614:	f7f9 faea 	bl	8000bec <__aeabi_uldivmod>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4613      	mov	r3, r2
 800761e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <HAL_RCC_GetSysClockFreq+0x200>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	0c1b      	lsrs	r3, r3, #16
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	3301      	adds	r3, #1
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007634:	fbb2 f3f3 	udiv	r3, r2, r3
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800763a:	e002      	b.n	8007642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <HAL_RCC_GetSysClockFreq+0x204>)
 800763e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007644:	4618      	mov	r0, r3
 8007646:	3750      	adds	r7, #80	; 0x50
 8007648:	46bd      	mov	sp, r7
 800764a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800764e:	bf00      	nop
 8007650:	40023800 	.word	0x40023800
 8007654:	00f42400 	.word	0x00f42400
 8007658:	007a1200 	.word	0x007a1200

0800765c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007660:	4b03      	ldr	r3, [pc, #12]	; (8007670 <HAL_RCC_GetHCLKFreq+0x14>)
 8007662:	681b      	ldr	r3, [r3, #0]
}
 8007664:	4618      	mov	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000004 	.word	0x20000004

08007674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007678:	f7ff fff0 	bl	800765c <HAL_RCC_GetHCLKFreq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	0a9b      	lsrs	r3, r3, #10
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	4903      	ldr	r1, [pc, #12]	; (8007698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800768a:	5ccb      	ldrb	r3, [r1, r3]
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40023800 	.word	0x40023800
 8007698:	0800f878 	.word	0x0800f878

0800769c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076a0:	f7ff ffdc 	bl	800765c <HAL_RCC_GetHCLKFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	0b5b      	lsrs	r3, r3, #13
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4903      	ldr	r1, [pc, #12]	; (80076c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	0800f878 	.word	0x0800f878

080076c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	220f      	movs	r2, #15
 80076d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076d4:	4b12      	ldr	r3, [pc, #72]	; (8007720 <HAL_RCC_GetClockConfig+0x5c>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0203 	and.w	r2, r3, #3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076e0:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <HAL_RCC_GetClockConfig+0x5c>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076ec:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <HAL_RCC_GetClockConfig+0x5c>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80076f8:	4b09      	ldr	r3, [pc, #36]	; (8007720 <HAL_RCC_GetClockConfig+0x5c>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	08db      	lsrs	r3, r3, #3
 80076fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <HAL_RCC_GetClockConfig+0x60>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 020f 	and.w	r2, r3, #15
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	601a      	str	r2, [r3, #0]
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800
 8007724:	40023c00 	.word	0x40023c00

08007728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007750:	4b69      	ldr	r3, [pc, #420]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a68      	ldr	r2, [pc, #416]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007756:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800775a:	6093      	str	r3, [r2, #8]
 800775c:	4b66      	ldr	r3, [pc, #408]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007764:	4964      	ldr	r1, [pc, #400]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007766:	4313      	orrs	r3, r2
 8007768:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d017      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007782:	4b5d      	ldr	r3, [pc, #372]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007790:	4959      	ldr	r1, [pc, #356]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a0:	d101      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80077ae:	2301      	movs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d017      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80077be:	4b4e      	ldr	r3, [pc, #312]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	494a      	ldr	r1, [pc, #296]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077dc:	d101      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80077de:	2301      	movs	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 808b 	beq.w	8007922 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800780c:	4b3a      	ldr	r3, [pc, #232]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	4a39      	ldr	r2, [pc, #228]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007816:	6413      	str	r3, [r2, #64]	; 0x40
 8007818:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007824:	4b35      	ldr	r3, [pc, #212]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a34      	ldr	r2, [pc, #208]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800782a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007830:	f7fe f8fa 	bl	8005a28 <HAL_GetTick>
 8007834:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007836:	e008      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007838:	f7fe f8f6 	bl	8005a28 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b64      	cmp	r3, #100	; 0x64
 8007844:	d901      	bls.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e357      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800784a:	4b2c      	ldr	r3, [pc, #176]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f0      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007856:	4b28      	ldr	r3, [pc, #160]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d035      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	429a      	cmp	r2, r3
 8007872:	d02e      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007874:	4b20      	ldr	r3, [pc, #128]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800787e:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007882:	4a1d      	ldr	r2, [pc, #116]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007888:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800788a:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007894:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007896:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d114      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fe f8be 	bl	8005a28 <HAL_GetTick>
 80078ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ae:	e00a      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078b0:	f7fe f8ba 	bl	8005a28 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e319      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c6:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0ee      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078de:	d111      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80078e0:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078ee:	400b      	ands	r3, r1
 80078f0:	4901      	ldr	r1, [pc, #4]	; (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	608b      	str	r3, [r1, #8]
 80078f6:	e00b      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80078f8:	40023800 	.word	0x40023800
 80078fc:	40007000 	.word	0x40007000
 8007900:	0ffffcff 	.word	0x0ffffcff
 8007904:	4baa      	ldr	r3, [pc, #680]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4aa9      	ldr	r2, [pc, #676]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800790a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800790e:	6093      	str	r3, [r2, #8]
 8007910:	4ba7      	ldr	r3, [pc, #668]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800791c:	49a4      	ldr	r1, [pc, #656]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800791e:	4313      	orrs	r3, r2
 8007920:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b00      	cmp	r3, #0
 800792c:	d010      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800792e:	4ba0      	ldr	r3, [pc, #640]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007934:	4a9e      	ldr	r2, [pc, #632]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800793a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800793e:	4b9c      	ldr	r3, [pc, #624]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007940:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	4999      	ldr	r1, [pc, #612]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800795c:	4b94      	ldr	r3, [pc, #592]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796a:	4991      	ldr	r1, [pc, #580]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800797e:	4b8c      	ldr	r3, [pc, #560]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007984:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798c:	4988      	ldr	r1, [pc, #544]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800798e:	4313      	orrs	r3, r2
 8007990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079a0:	4b83      	ldr	r3, [pc, #524]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ae:	4980      	ldr	r1, [pc, #512]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079c2:	4b7b      	ldr	r3, [pc, #492]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	4977      	ldr	r1, [pc, #476]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079e4:	4b72      	ldr	r3, [pc, #456]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ea:	f023 0203 	bic.w	r2, r3, #3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	496f      	ldr	r1, [pc, #444]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a06:	4b6a      	ldr	r3, [pc, #424]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0c:	f023 020c 	bic.w	r2, r3, #12
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a14:	4966      	ldr	r1, [pc, #408]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a28:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	495e      	ldr	r1, [pc, #376]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a4a:	4b59      	ldr	r3, [pc, #356]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a58:	4955      	ldr	r1, [pc, #340]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a6c:	4b50      	ldr	r3, [pc, #320]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	494d      	ldr	r1, [pc, #308]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a8e:	4b48      	ldr	r3, [pc, #288]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9c:	4944      	ldr	r1, [pc, #272]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ab0:	4b3f      	ldr	r3, [pc, #252]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abe:	493c      	ldr	r1, [pc, #240]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ad2:	4b37      	ldr	r3, [pc, #220]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae0:	4933      	ldr	r1, [pc, #204]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007af4:	4b2e      	ldr	r3, [pc, #184]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b02:	492b      	ldr	r1, [pc, #172]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d011      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b16:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b24:	4922      	ldr	r1, [pc, #136]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b34:	d101      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007b36:	2301      	movs	r3, #1
 8007b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007b46:	2301      	movs	r3, #1
 8007b48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b56:	4b16      	ldr	r3, [pc, #88]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b64:	4912      	ldr	r1, [pc, #72]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b78:	4b0d      	ldr	r3, [pc, #52]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b88:	4909      	ldr	r1, [pc, #36]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d006      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80d9 	beq.w	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a01      	ldr	r2, [pc, #4]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bae:	e001      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb6:	f7fd ff37 	bl	8005a28 <HAL_GetTick>
 8007bba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bbe:	f7fd ff33 	bl	8005a28 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b64      	cmp	r3, #100	; 0x64
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e194      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bd0:	4b6c      	ldr	r3, [pc, #432]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f0      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d021      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d11d      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007bf0:	4b64      	ldr	r3, [pc, #400]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	f003 0303 	and.w	r3, r3, #3
 8007bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bfe:	4b61      	ldr	r3, [pc, #388]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c04:	0e1b      	lsrs	r3, r3, #24
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	019a      	lsls	r2, r3, #6
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	431a      	orrs	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	061b      	lsls	r3, r3, #24
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	071b      	lsls	r3, r3, #28
 8007c24:	4957      	ldr	r1, [pc, #348]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d02e      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c56:	d129      	bne.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c58:	4b4a      	ldr	r3, [pc, #296]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c5e:	0c1b      	lsrs	r3, r3, #16
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c66:	4b47      	ldr	r3, [pc, #284]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6c:	0f1b      	lsrs	r3, r3, #28
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	019a      	lsls	r2, r3, #6
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	071b      	lsls	r3, r3, #28
 8007c8c:	493d      	ldr	r1, [pc, #244]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c94:	4b3b      	ldr	r3, [pc, #236]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c9a:	f023 021f 	bic.w	r2, r3, #31
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	4937      	ldr	r1, [pc, #220]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01d      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cb8:	4b32      	ldr	r3, [pc, #200]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cbe:	0e1b      	lsrs	r3, r3, #24
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007cc6:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ccc:	0f1b      	lsrs	r3, r3, #28
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	019a      	lsls	r2, r3, #6
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	061b      	lsls	r3, r3, #24
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	071b      	lsls	r3, r3, #28
 8007cec:	4925      	ldr	r1, [pc, #148]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d011      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	019a      	lsls	r2, r3, #6
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	061b      	lsls	r3, r3, #24
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	071b      	lsls	r3, r3, #28
 8007d1c:	4919      	ldr	r1, [pc, #100]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d24:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a16      	ldr	r2, [pc, #88]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d30:	f7fd fe7a 	bl	8005a28 <HAL_GetTick>
 8007d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d36:	e008      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d38:	f7fd fe76 	bl	8005a28 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b64      	cmp	r3, #100	; 0x64
 8007d44:	d901      	bls.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e0d7      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0f0      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	f040 80cd 	bne.w	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d6a:	f7fd fe5d 	bl	8005a28 <HAL_GetTick>
 8007d6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d70:	e00a      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d72:	f7fd fe59 	bl	8005a28 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b64      	cmp	r3, #100	; 0x64
 8007d7e:	d903      	bls.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e0ba      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007d84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d88:	4b5e      	ldr	r3, [pc, #376]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d94:	d0ed      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d02e      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d12a      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007dbe:	4b51      	ldr	r3, [pc, #324]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc4:	0c1b      	lsrs	r3, r3, #16
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007dcc:	4b4d      	ldr	r3, [pc, #308]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd2:	0f1b      	lsrs	r3, r3, #28
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	019a      	lsls	r2, r3, #6
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	061b      	lsls	r3, r3, #24
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	071b      	lsls	r3, r3, #28
 8007df2:	4944      	ldr	r1, [pc, #272]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007dfa:	4b42      	ldr	r3, [pc, #264]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	493d      	ldr	r1, [pc, #244]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d022      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e28:	d11d      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e2a:	4b36      	ldr	r3, [pc, #216]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e30:	0e1b      	lsrs	r3, r3, #24
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e38:	4b32      	ldr	r3, [pc, #200]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3e:	0f1b      	lsrs	r3, r3, #28
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	019a      	lsls	r2, r3, #6
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	431a      	orrs	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	061b      	lsls	r3, r3, #24
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	071b      	lsls	r3, r3, #28
 8007e5e:	4929      	ldr	r1, [pc, #164]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d028      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e72:	4b24      	ldr	r3, [pc, #144]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e78:	0e1b      	lsrs	r3, r3, #24
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e80:	4b20      	ldr	r3, [pc, #128]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	019a      	lsls	r2, r3, #6
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	041b      	lsls	r3, r3, #16
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	061b      	lsls	r3, r3, #24
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	071b      	lsls	r3, r3, #28
 8007ea6:	4917      	ldr	r1, [pc, #92]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007eae:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4911      	ldr	r1, [pc, #68]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a0e      	ldr	r2, [pc, #56]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed0:	f7fd fdaa 	bl	8005a28 <HAL_GetTick>
 8007ed4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ed6:	e008      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ed8:	f7fd fda6 	bl	8005a28 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b64      	cmp	r3, #100	; 0x64
 8007ee4:	d901      	bls.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e007      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eea:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef6:	d1ef      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40023800 	.word	0x40023800

08007f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e049      	b.n	8007fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fd fbd2 	bl	80056d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 fca6 	bl	8008898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d001      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e054      	b.n	800807a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a26      	ldr	r2, [pc, #152]	; (8008088 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d022      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffa:	d01d      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a22      	ldr	r2, [pc, #136]	; (800808c <HAL_TIM_Base_Start_IT+0xd4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d018      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a21      	ldr	r2, [pc, #132]	; (8008090 <HAL_TIM_Base_Start_IT+0xd8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1f      	ldr	r2, [pc, #124]	; (8008094 <HAL_TIM_Base_Start_IT+0xdc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00e      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <HAL_TIM_Base_Start_IT+0xe0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d009      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_TIM_Base_Start_IT+0xe4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <HAL_TIM_Base_Start_IT+0x80>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1b      	ldr	r2, [pc, #108]	; (80080a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d115      	bne.n	8008064 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	4b19      	ldr	r3, [pc, #100]	; (80080a4 <HAL_TIM_Base_Start_IT+0xec>)
 8008040:	4013      	ands	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b06      	cmp	r3, #6
 8008048:	d015      	beq.n	8008076 <HAL_TIM_Base_Start_IT+0xbe>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008050:	d011      	beq.n	8008076 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f042 0201 	orr.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008062:	e008      	b.n	8008076 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40010000 	.word	0x40010000
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40010400 	.word	0x40010400
 800809c:	40014000 	.word	0x40014000
 80080a0:	40001800 	.word	0x40001800
 80080a4:	00010007 	.word	0x00010007

080080a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <HAL_TIM_Base_Stop_IT+0x48>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6a1a      	ldr	r2, [r3, #32]
 80080d6:	f240 4344 	movw	r3, #1092	; 0x444
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <HAL_TIM_Base_Stop_IT+0x48>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e049      	b.n	80081ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f841 	bl	80081b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3304      	adds	r3, #4
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f000 fba7 	bl	8008898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d122      	bne.n	8008224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d11b      	bne.n	8008224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0202 	mvn.w	r2, #2
 80081f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fb26 	bl	800885c <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fb18 	bl	8008848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb29 	bl	8008870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d122      	bne.n	8008278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b04      	cmp	r3, #4
 800823e:	d11b      	bne.n	8008278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0204 	mvn.w	r2, #4
 8008248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fafc 	bl	800885c <HAL_TIM_IC_CaptureCallback>
 8008264:	e005      	b.n	8008272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 faee 	bl	8008848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 faff 	bl	8008870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b08      	cmp	r3, #8
 8008284:	d122      	bne.n	80082cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b08      	cmp	r3, #8
 8008292:	d11b      	bne.n	80082cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0208 	mvn.w	r2, #8
 800829c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2204      	movs	r2, #4
 80082a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fad2 	bl	800885c <HAL_TIM_IC_CaptureCallback>
 80082b8:	e005      	b.n	80082c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fac4 	bl	8008848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fad5 	bl	8008870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d122      	bne.n	8008320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d11b      	bne.n	8008320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0210 	mvn.w	r2, #16
 80082f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2208      	movs	r2, #8
 80082f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 faa8 	bl	800885c <HAL_TIM_IC_CaptureCallback>
 800830c:	e005      	b.n	800831a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa9a 	bl	8008848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 faab 	bl	8008870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10e      	bne.n	800834c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b01      	cmp	r3, #1
 800833a:	d107      	bne.n	800834c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0201 	mvn.w	r2, #1
 8008344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fb faaa 	bl	80038a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008356:	2b80      	cmp	r3, #128	; 0x80
 8008358:	d10e      	bne.n	8008378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d107      	bne.n	8008378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 ff54 	bl	8009220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008386:	d10e      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b80      	cmp	r3, #128	; 0x80
 8008394:	d107      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800839e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 ff47 	bl	8009234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d10e      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083be:	2b40      	cmp	r3, #64	; 0x40
 80083c0:	d107      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fa59 	bl	8008884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	2b20      	cmp	r3, #32
 80083de:	d10e      	bne.n	80083fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d107      	bne.n	80083fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f06f 0220 	mvn.w	r2, #32
 80083f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 ff07 	bl	800920c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008422:	2302      	movs	r3, #2
 8008424:	e0ff      	b.n	8008626 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b14      	cmp	r3, #20
 8008432:	f200 80f0 	bhi.w	8008616 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008436:	a201      	add	r2, pc, #4	; (adr r2, 800843c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	08008491 	.word	0x08008491
 8008440:	08008617 	.word	0x08008617
 8008444:	08008617 	.word	0x08008617
 8008448:	08008617 	.word	0x08008617
 800844c:	080084d1 	.word	0x080084d1
 8008450:	08008617 	.word	0x08008617
 8008454:	08008617 	.word	0x08008617
 8008458:	08008617 	.word	0x08008617
 800845c:	08008513 	.word	0x08008513
 8008460:	08008617 	.word	0x08008617
 8008464:	08008617 	.word	0x08008617
 8008468:	08008617 	.word	0x08008617
 800846c:	08008553 	.word	0x08008553
 8008470:	08008617 	.word	0x08008617
 8008474:	08008617 	.word	0x08008617
 8008478:	08008617 	.word	0x08008617
 800847c:	08008595 	.word	0x08008595
 8008480:	08008617 	.word	0x08008617
 8008484:	08008617 	.word	0x08008617
 8008488:	08008617 	.word	0x08008617
 800848c:	080085d5 	.word	0x080085d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fa9e 	bl	80089d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0208 	orr.w	r2, r2, #8
 80084aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0204 	bic.w	r2, r2, #4
 80084ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6999      	ldr	r1, [r3, #24]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	619a      	str	r2, [r3, #24]
      break;
 80084ce:	e0a5      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 faf0 	bl	8008abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699a      	ldr	r2, [r3, #24]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699a      	ldr	r2, [r3, #24]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6999      	ldr	r1, [r3, #24]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	021a      	lsls	r2, r3, #8
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	619a      	str	r2, [r3, #24]
      break;
 8008510:	e084      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fb47 	bl	8008bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0208 	orr.w	r2, r2, #8
 800852c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0204 	bic.w	r2, r2, #4
 800853c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69d9      	ldr	r1, [r3, #28]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	61da      	str	r2, [r3, #28]
      break;
 8008550:	e064      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fb9d 	bl	8008c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69da      	ldr	r2, [r3, #28]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800856c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69da      	ldr	r2, [r3, #28]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800857c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69d9      	ldr	r1, [r3, #28]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	021a      	lsls	r2, r3, #8
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	61da      	str	r2, [r3, #28]
      break;
 8008592:	e043      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fbd4 	bl	8008d48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0208 	orr.w	r2, r2, #8
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0204 	bic.w	r2, r2, #4
 80085be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085d2:	e023      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fc06 	bl	8008dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	021a      	lsls	r2, r3, #8
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008614:	e002      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
      break;
 800861a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop

08008630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIM_ConfigClockSource+0x1c>
 8008648:	2302      	movs	r3, #2
 800864a:	e0b4      	b.n	80087b6 <HAL_TIM_ConfigClockSource+0x186>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	4b56      	ldr	r3, [pc, #344]	; (80087c0 <HAL_TIM_ConfigClockSource+0x190>)
 8008668:	4013      	ands	r3, r2
 800866a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008684:	d03e      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0xd4>
 8008686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868a:	f200 8087 	bhi.w	800879c <HAL_TIM_ConfigClockSource+0x16c>
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008692:	f000 8086 	beq.w	80087a2 <HAL_TIM_ConfigClockSource+0x172>
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869a:	d87f      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b70      	cmp	r3, #112	; 0x70
 800869e:	d01a      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0xa6>
 80086a0:	2b70      	cmp	r3, #112	; 0x70
 80086a2:	d87b      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b60      	cmp	r3, #96	; 0x60
 80086a6:	d050      	beq.n	800874a <HAL_TIM_ConfigClockSource+0x11a>
 80086a8:	2b60      	cmp	r3, #96	; 0x60
 80086aa:	d877      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b50      	cmp	r3, #80	; 0x50
 80086ae:	d03c      	beq.n	800872a <HAL_TIM_ConfigClockSource+0xfa>
 80086b0:	2b50      	cmp	r3, #80	; 0x50
 80086b2:	d873      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d058      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x13a>
 80086b8:	2b40      	cmp	r3, #64	; 0x40
 80086ba:	d86f      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b30      	cmp	r3, #48	; 0x30
 80086be:	d064      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086c0:	2b30      	cmp	r3, #48	; 0x30
 80086c2:	d86b      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d060      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d867      	bhi.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d05c      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d05a      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x15a>
 80086d4:	e062      	b.n	800879c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6899      	ldr	r1, [r3, #8]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f000 fce3 	bl	80090b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	609a      	str	r2, [r3, #8]
      break;
 8008702:	e04f      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	6899      	ldr	r1, [r3, #8]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f000 fccc 	bl	80090b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008726:	609a      	str	r2, [r3, #8]
      break;
 8008728:	e03c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6859      	ldr	r1, [r3, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	461a      	mov	r2, r3
 8008738:	f000 fc40 	bl	8008fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2150      	movs	r1, #80	; 0x50
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fc99 	bl	800907a <TIM_ITRx_SetConfig>
      break;
 8008748:	e02c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	f000 fc5f 	bl	800901a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2160      	movs	r1, #96	; 0x60
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fc89 	bl	800907a <TIM_ITRx_SetConfig>
      break;
 8008768:	e01c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6859      	ldr	r1, [r3, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	461a      	mov	r2, r3
 8008778:	f000 fc20 	bl	8008fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2140      	movs	r1, #64	; 0x40
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fc79 	bl	800907a <TIM_ITRx_SetConfig>
      break;
 8008788:	e00c      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f000 fc70 	bl	800907a <TIM_ITRx_SetConfig>
      break;
 800879a:	e003      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
      break;
 80087a0:	e000      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	fffeff88 	.word	0xfffeff88

080087c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_TIM_SlaveConfigSynchro+0x18>
 80087d8:	2302      	movs	r3, #2
 80087da:	e031      	b.n	8008840 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fb50 	bl	8008e94 <TIM_SlaveTimer_SetConfig>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e018      	b.n	8008840 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800881c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800882c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a40      	ldr	r2, [pc, #256]	; (80089ac <TIM_Base_SetConfig+0x114>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d013      	beq.n	80088d8 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b6:	d00f      	beq.n	80088d8 <TIM_Base_SetConfig+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a3d      	ldr	r2, [pc, #244]	; (80089b0 <TIM_Base_SetConfig+0x118>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00b      	beq.n	80088d8 <TIM_Base_SetConfig+0x40>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a3c      	ldr	r2, [pc, #240]	; (80089b4 <TIM_Base_SetConfig+0x11c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d007      	beq.n	80088d8 <TIM_Base_SetConfig+0x40>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a3b      	ldr	r2, [pc, #236]	; (80089b8 <TIM_Base_SetConfig+0x120>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d003      	beq.n	80088d8 <TIM_Base_SetConfig+0x40>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a3a      	ldr	r2, [pc, #232]	; (80089bc <TIM_Base_SetConfig+0x124>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d108      	bne.n	80088ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2f      	ldr	r2, [pc, #188]	; (80089ac <TIM_Base_SetConfig+0x114>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d02b      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f8:	d027      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a2c      	ldr	r2, [pc, #176]	; (80089b0 <TIM_Base_SetConfig+0x118>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d023      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a2b      	ldr	r2, [pc, #172]	; (80089b4 <TIM_Base_SetConfig+0x11c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d01f      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a2a      	ldr	r2, [pc, #168]	; (80089b8 <TIM_Base_SetConfig+0x120>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d01b      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a29      	ldr	r2, [pc, #164]	; (80089bc <TIM_Base_SetConfig+0x124>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d017      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a28      	ldr	r2, [pc, #160]	; (80089c0 <TIM_Base_SetConfig+0x128>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d013      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a27      	ldr	r2, [pc, #156]	; (80089c4 <TIM_Base_SetConfig+0x12c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00f      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <TIM_Base_SetConfig+0x130>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d00b      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a25      	ldr	r2, [pc, #148]	; (80089cc <TIM_Base_SetConfig+0x134>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d007      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a24      	ldr	r2, [pc, #144]	; (80089d0 <TIM_Base_SetConfig+0x138>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d003      	beq.n	800894a <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a23      	ldr	r2, [pc, #140]	; (80089d4 <TIM_Base_SetConfig+0x13c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d108      	bne.n	800895c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <TIM_Base_SetConfig+0x114>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_Base_SetConfig+0xf8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a0c      	ldr	r2, [pc, #48]	; (80089bc <TIM_Base_SetConfig+0x124>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d103      	bne.n	8008998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	615a      	str	r2, [r3, #20]
}
 800899e:	bf00      	nop
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40010000 	.word	0x40010000
 80089b0:	40000400 	.word	0x40000400
 80089b4:	40000800 	.word	0x40000800
 80089b8:	40000c00 	.word	0x40000c00
 80089bc:	40010400 	.word	0x40010400
 80089c0:	40014000 	.word	0x40014000
 80089c4:	40014400 	.word	0x40014400
 80089c8:	40014800 	.word	0x40014800
 80089cc:	40001800 	.word	0x40001800
 80089d0:	40001c00 	.word	0x40001c00
 80089d4:	40002000 	.word	0x40002000

080089d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	f023 0201 	bic.w	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4b2b      	ldr	r3, [pc, #172]	; (8008ab0 <TIM_OC1_SetConfig+0xd8>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f023 0302 	bic.w	r3, r3, #2
 8008a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a21      	ldr	r2, [pc, #132]	; (8008ab4 <TIM_OC1_SetConfig+0xdc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC1_SetConfig+0x64>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <TIM_OC1_SetConfig+0xe0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d10c      	bne.n	8008a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f023 0308 	bic.w	r3, r3, #8
 8008a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f023 0304 	bic.w	r3, r3, #4
 8008a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a16      	ldr	r2, [pc, #88]	; (8008ab4 <TIM_OC1_SetConfig+0xdc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_OC1_SetConfig+0x8e>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a15      	ldr	r2, [pc, #84]	; (8008ab8 <TIM_OC1_SetConfig+0xe0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d111      	bne.n	8008a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	621a      	str	r2, [r3, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	fffeff8f 	.word	0xfffeff8f
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40010400 	.word	0x40010400

08008abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f023 0210 	bic.w	r2, r3, #16
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <TIM_OC2_SetConfig+0xe4>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 0320 	bic.w	r3, r3, #32
 8008b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a23      	ldr	r2, [pc, #140]	; (8008ba4 <TIM_OC2_SetConfig+0xe8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d003      	beq.n	8008b24 <TIM_OC2_SetConfig+0x68>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a22      	ldr	r2, [pc, #136]	; (8008ba8 <TIM_OC2_SetConfig+0xec>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d10d      	bne.n	8008b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a18      	ldr	r2, [pc, #96]	; (8008ba4 <TIM_OC2_SetConfig+0xe8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_OC2_SetConfig+0x94>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <TIM_OC2_SetConfig+0xec>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d113      	bne.n	8008b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	feff8fff 	.word	0xfeff8fff
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40010400 	.word	0x40010400

08008bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4b2d      	ldr	r3, [pc, #180]	; (8008c8c <TIM_OC3_SetConfig+0xe0>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0303 	bic.w	r3, r3, #3
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a22      	ldr	r2, [pc, #136]	; (8008c90 <TIM_OC3_SetConfig+0xe4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d003      	beq.n	8008c12 <TIM_OC3_SetConfig+0x66>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a21      	ldr	r2, [pc, #132]	; (8008c94 <TIM_OC3_SetConfig+0xe8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d10d      	bne.n	8008c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a17      	ldr	r2, [pc, #92]	; (8008c90 <TIM_OC3_SetConfig+0xe4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC3_SetConfig+0x92>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <TIM_OC3_SetConfig+0xe8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d113      	bne.n	8008c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	621a      	str	r2, [r3, #32]
}
 8008c80:	bf00      	nop
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	fffeff8f 	.word	0xfffeff8f
 8008c90:	40010000 	.word	0x40010000
 8008c94:	40010400 	.word	0x40010400

08008c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4b1e      	ldr	r3, [pc, #120]	; (8008d3c <TIM_OC4_SetConfig+0xa4>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	021b      	lsls	r3, r3, #8
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	031b      	lsls	r3, r3, #12
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a13      	ldr	r2, [pc, #76]	; (8008d40 <TIM_OC4_SetConfig+0xa8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_OC4_SetConfig+0x68>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <TIM_OC4_SetConfig+0xac>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d109      	bne.n	8008d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	019b      	lsls	r3, r3, #6
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	621a      	str	r2, [r3, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	feff8fff 	.word	0xfeff8fff
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400

08008d48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <TIM_OC5_SetConfig+0x98>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <TIM_OC5_SetConfig+0x9c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d003      	beq.n	8008da6 <TIM_OC5_SetConfig+0x5e>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <TIM_OC5_SetConfig+0xa0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d109      	bne.n	8008dba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	021b      	lsls	r3, r3, #8
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	621a      	str	r2, [r3, #32]
}
 8008dd4:	bf00      	nop
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	fffeff8f 	.word	0xfffeff8f
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40010400 	.word	0x40010400

08008dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <TIM_OC6_SetConfig+0x9c>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	021b      	lsls	r3, r3, #8
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	051b      	lsls	r3, r3, #20
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <TIM_OC6_SetConfig+0xa0>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <TIM_OC6_SetConfig+0x60>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a12      	ldr	r2, [pc, #72]	; (8008e90 <TIM_OC6_SetConfig+0xa4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d109      	bne.n	8008e60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	029b      	lsls	r3, r3, #10
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	621a      	str	r2, [r3, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	feff8fff 	.word	0xfeff8fff
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40010400 	.word	0x40010400

08008e94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4b3e      	ldr	r3, [pc, #248]	; (8008fb8 <TIM_SlaveTimer_SetConfig+0x124>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b70      	cmp	r3, #112	; 0x70
 8008edc:	d01a      	beq.n	8008f14 <TIM_SlaveTimer_SetConfig+0x80>
 8008ede:	2b70      	cmp	r3, #112	; 0x70
 8008ee0:	d860      	bhi.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
 8008ee2:	2b60      	cmp	r3, #96	; 0x60
 8008ee4:	d054      	beq.n	8008f90 <TIM_SlaveTimer_SetConfig+0xfc>
 8008ee6:	2b60      	cmp	r3, #96	; 0x60
 8008ee8:	d85c      	bhi.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
 8008eea:	2b50      	cmp	r3, #80	; 0x50
 8008eec:	d046      	beq.n	8008f7c <TIM_SlaveTimer_SetConfig+0xe8>
 8008eee:	2b50      	cmp	r3, #80	; 0x50
 8008ef0:	d858      	bhi.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
 8008ef2:	2b40      	cmp	r3, #64	; 0x40
 8008ef4:	d019      	beq.n	8008f2a <TIM_SlaveTimer_SetConfig+0x96>
 8008ef6:	2b40      	cmp	r3, #64	; 0x40
 8008ef8:	d854      	bhi.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
 8008efa:	2b30      	cmp	r3, #48	; 0x30
 8008efc:	d055      	beq.n	8008faa <TIM_SlaveTimer_SetConfig+0x116>
 8008efe:	2b30      	cmp	r3, #48	; 0x30
 8008f00:	d850      	bhi.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d051      	beq.n	8008faa <TIM_SlaveTimer_SetConfig+0x116>
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d84c      	bhi.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d04d      	beq.n	8008faa <TIM_SlaveTimer_SetConfig+0x116>
 8008f0e:	2b10      	cmp	r3, #16
 8008f10:	d04b      	beq.n	8008faa <TIM_SlaveTimer_SetConfig+0x116>
 8008f12:	e047      	b.n	8008fa4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68d9      	ldr	r1, [r3, #12]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f000 f8c4 	bl	80090b0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008f28:	e040      	b.n	8008fac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d101      	bne.n	8008f36 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e03b      	b.n	8008fae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6a1a      	ldr	r2, [r3, #32]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0201 	bic.w	r2, r2, #1
 8008f4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f5c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	621a      	str	r2, [r3, #32]
      break;
 8008f7a:	e017      	b.n	8008fac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6818      	ldr	r0, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	6899      	ldr	r1, [r3, #8]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	f000 f817 	bl	8008fbc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008f8e:	e00d      	b.n	8008fac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	6899      	ldr	r1, [r3, #8]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f000 f83c 	bl	800901a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008fa2:	e003      	b.n	8008fac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa8:	e000      	b.n	8008fac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008faa:	bf00      	nop
  }

  return status;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	fffefff8 	.word	0xfffefff8

08008fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	f023 0201 	bic.w	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f023 030a 	bic.w	r3, r3, #10
 8008ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800901a:	b480      	push	{r7}
 800901c:	b087      	sub	sp, #28
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	f023 0210 	bic.w	r2, r3, #16
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	031b      	lsls	r3, r3, #12
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	621a      	str	r2, [r3, #32]
}
 800906e:	bf00      	nop
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	f043 0307 	orr.w	r3, r3, #7
 800909c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	609a      	str	r2, [r3, #8]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	021a      	lsls	r2, r3, #8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009104:	2302      	movs	r3, #2
 8009106:	e06d      	b.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a30      	ldr	r2, [pc, #192]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d004      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a2f      	ldr	r2, [pc, #188]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d108      	bne.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009142:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4313      	orrs	r3, r2
 800914c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009154:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d022      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917a:	d01d      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d018      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a1c      	ldr	r2, [pc, #112]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d013      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a1a      	ldr	r2, [pc, #104]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00e      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a15      	ldr	r2, [pc, #84]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d009      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a16      	ldr	r2, [pc, #88]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d004      	beq.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a15      	ldr	r2, [pc, #84]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d10c      	bne.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	40010000 	.word	0x40010000
 80091f4:	40010400 	.word	0x40010400
 80091f8:	40000400 	.word	0x40000400
 80091fc:	40000800 	.word	0x40000800
 8009200:	40000c00 	.word	0x40000c00
 8009204:	40014000 	.word	0x40014000
 8009208:	40001800 	.word	0x40001800

0800920c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e040      	b.n	80092dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fc fb2a 	bl	80058c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2224      	movs	r2, #36	; 0x24
 8009274:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0201 	bic.w	r2, r2, #1
 8009284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fbf8 	bl	8009a7c <UART_SetConfig>
 800928c:	4603      	mov	r3, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e022      	b.n	80092dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fe50 	bl	8009f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fed7 	bl	800a088 <UART_CheckIdleState>
 80092da:	4603      	mov	r3, r0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08a      	sub	sp, #40	; 0x28
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	4613      	mov	r3, r2
 80092f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	f040 8081 	bne.w	8009400 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HAL_UART_Transmit+0x26>
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e079      	b.n	8009402 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_UART_Transmit+0x38>
 8009318:	2302      	movs	r3, #2
 800931a:	e072      	b.n	8009402 <HAL_UART_Transmit+0x11e>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2221      	movs	r2, #33	; 0x21
 8009330:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009332:	f7fc fb79 	bl	8005a28 <HAL_GetTick>
 8009336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009350:	d108      	bne.n	8009364 <HAL_UART_Transmit+0x80>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	e003      	b.n	800936c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009368:	2300      	movs	r3, #0
 800936a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009374:	e02c      	b.n	80093d0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2200      	movs	r2, #0
 800937e:	2180      	movs	r1, #128	; 0x80
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 feb4 	bl	800a0ee <UART_WaitOnFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e038      	b.n	8009402 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	3302      	adds	r3, #2
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	e007      	b.n	80093be <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	3301      	adds	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1cc      	bne.n	8009376 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2200      	movs	r2, #0
 80093e4:	2140      	movs	r1, #64	; 0x40
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fe81 	bl	800a0ee <UART_WaitOnFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e005      	b.n	8009402 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	e000      	b.n	8009402 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009400:	2302      	movs	r3, #2
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b08a      	sub	sp, #40	; 0x28
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	4613      	mov	r3, r2
 8009416:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800941c:	2b20      	cmp	r3, #32
 800941e:	d13d      	bne.n	800949c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <HAL_UART_Receive_IT+0x22>
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e036      	b.n	800949e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UART_Receive_IT+0x34>
 800943a:	2302      	movs	r3, #2
 800943c:	e02f      	b.n	800949e <HAL_UART_Receive_IT+0x94>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d018      	beq.n	800948c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	613b      	str	r3, [r7, #16]
   return(result);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	623b      	str	r3, [r7, #32]
 800947a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	69f9      	ldr	r1, [r7, #28]
 800947e:	6a3a      	ldr	r2, [r7, #32]
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	61bb      	str	r3, [r7, #24]
   return(result);
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800948c:	88fb      	ldrh	r3, [r7, #6]
 800948e:	461a      	mov	r2, r3
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 fef0 	bl	800a278 <UART_Start_Receive_IT>
 8009498:	4603      	mov	r3, r0
 800949a:	e000      	b.n	800949e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800949c:	2302      	movs	r3, #2
  }
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3728      	adds	r7, #40	; 0x28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b0ba      	sub	sp, #232	; 0xe8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80094d6:	4013      	ands	r3, r2
 80094d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d115      	bne.n	8009510 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80094e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00f      	beq.n	8009510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d009      	beq.n	8009510 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 828f 	beq.w	8009a24 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	4798      	blx	r3
      }
      return;
 800950e:	e289      	b.n	8009a24 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8117 	beq.w	8009748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800951a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800952a:	4b85      	ldr	r3, [pc, #532]	; (8009740 <HAL_UART_IRQHandler+0x298>)
 800952c:	4013      	ands	r3, r2
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 810a 	beq.w	8009748 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	d011      	beq.n	8009564 <HAL_UART_IRQHandler+0xbc>
 8009540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2201      	movs	r2, #1
 8009552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800955a:	f043 0201 	orr.w	r2, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d011      	beq.n	8009594 <HAL_UART_IRQHandler+0xec>
 8009570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2202      	movs	r2, #2
 8009582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800958a:	f043 0204 	orr.w	r2, r3, #4
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d011      	beq.n	80095c4 <HAL_UART_IRQHandler+0x11c>
 80095a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2204      	movs	r2, #4
 80095b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ba:	f043 0202 	orr.w	r2, r3, #2
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d017      	beq.n	8009600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d105      	bne.n	80095e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80095dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2208      	movs	r2, #8
 80095ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f6:	f043 0208 	orr.w	r2, r3, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009608:	2b00      	cmp	r3, #0
 800960a:	d012      	beq.n	8009632 <HAL_UART_IRQHandler+0x18a>
 800960c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00c      	beq.n	8009632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009628:	f043 0220 	orr.w	r2, r3, #32
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 81f5 	beq.w	8009a28 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800963e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00d      	beq.n	8009666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800964a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d007      	beq.n	8009666 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d005      	beq.n	800968a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800967e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009682:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04f      	beq.n	800972a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 febe 	bl	800a40c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969a:	2b40      	cmp	r3, #64	; 0x40
 800969c:	d141      	bne.n	8009722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3308      	adds	r3, #8
 80096c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1d9      	bne.n	800969e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d013      	beq.n	800971a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	4a13      	ldr	r2, [pc, #76]	; (8009744 <HAL_UART_IRQHandler+0x29c>)
 80096f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fc faf0 	bl	8005ce4 <HAL_DMA_Abort_IT>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d017      	beq.n	800973a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	e00f      	b.n	800973a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f998 	bl	8009a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	e00b      	b.n	800973a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f994 	bl	8009a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009728:	e007      	b.n	800973a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f990 	bl	8009a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009738:	e176      	b.n	8009a28 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973a:	bf00      	nop
    return;
 800973c:	e174      	b.n	8009a28 <HAL_UART_IRQHandler+0x580>
 800973e:	bf00      	nop
 8009740:	04000120 	.word	0x04000120
 8009744:	0800a4d3 	.word	0x0800a4d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800974c:	2b01      	cmp	r3, #1
 800974e:	f040 8144 	bne.w	80099da <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 813d 	beq.w	80099da <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 8136 	beq.w	80099da <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2210      	movs	r2, #16
 8009774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	f040 80b2 	bne.w	80098ea <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 8148 	beq.w	8009a2c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097a6:	429a      	cmp	r2, r3
 80097a8:	f080 8140 	bcs.w	8009a2c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c0:	f000 8085 	beq.w	80098ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1da      	bne.n	80097c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3308      	adds	r3, #8
 8009814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009818:	e853 3f00 	ldrex	r3, [r3]
 800981c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800981e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009820:	f023 0301 	bic.w	r3, r3, #1
 8009824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3308      	adds	r3, #8
 800982e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800983a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e1      	bne.n	800980e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800985a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800985c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800986e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800987c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e3      	bne.n	800984a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2220      	movs	r2, #32
 8009886:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800989c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989e:	f023 0310 	bic.w	r3, r3, #16
 80098a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80098b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e4      	bne.n	800988e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fc f99b 	bl	8005c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098da:	b29b      	uxth	r3, r3
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	b29b      	uxth	r3, r3
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8be 	bl	8009a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098e8:	e0a0      	b.n	8009a2c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 8092 	beq.w	8009a30 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800990c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 808d 	beq.w	8009a30 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800992a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009938:	647b      	str	r3, [r7, #68]	; 0x44
 800993a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800993e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e4      	bne.n	8009916 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	623b      	str	r3, [r7, #32]
   return(result);
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f023 0301 	bic.w	r3, r3, #1
 8009962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009970:	633a      	str	r2, [r7, #48]	; 0x30
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e3      	bne.n	800994c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2220      	movs	r2, #32
 8009988:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0310 	bic.w	r3, r3, #16
 80099aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	69b9      	ldr	r1, [r7, #24]
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	e841 2300 	strex	r3, r2, [r1]
 80099c4:	617b      	str	r3, [r7, #20]
   return(result);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e4      	bne.n	8009996 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f846 	bl	8009a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099d8:	e02a      	b.n	8009a30 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80099da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80099e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d008      	beq.n	8009a04 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d01c      	beq.n	8009a34 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
    }
    return;
 8009a02:	e017      	b.n	8009a34 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d012      	beq.n	8009a36 <HAL_UART_IRQHandler+0x58e>
 8009a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00c      	beq.n	8009a36 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fd6e 	bl	800a4fe <UART_EndTransmit_IT>
    return;
 8009a22:	e008      	b.n	8009a36 <HAL_UART_IRQHandler+0x58e>
      return;
 8009a24:	bf00      	nop
 8009a26:	e006      	b.n	8009a36 <HAL_UART_IRQHandler+0x58e>
    return;
 8009a28:	bf00      	nop
 8009a2a:	e004      	b.n	8009a36 <HAL_UART_IRQHandler+0x58e>
      return;
 8009a2c:	bf00      	nop
 8009a2e:	e002      	b.n	8009a36 <HAL_UART_IRQHandler+0x58e>
      return;
 8009a30:	bf00      	nop
 8009a32:	e000      	b.n	8009a36 <HAL_UART_IRQHandler+0x58e>
    return;
 8009a34:	bf00      	nop
  }

}
 8009a36:	37e8      	adds	r7, #232	; 0xe8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4ba6      	ldr	r3, [pc, #664]	; (8009d40 <UART_SetConfig+0x2c4>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6812      	ldr	r2, [r2, #0]
 8009aae:	6979      	ldr	r1, [r7, #20]
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a94      	ldr	r2, [pc, #592]	; (8009d44 <UART_SetConfig+0x2c8>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d120      	bne.n	8009b3a <UART_SetConfig+0xbe>
 8009af8:	4b93      	ldr	r3, [pc, #588]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d816      	bhi.n	8009b34 <UART_SetConfig+0xb8>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <UART_SetConfig+0x90>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b1d 	.word	0x08009b1d
 8009b10:	08009b29 	.word	0x08009b29
 8009b14:	08009b23 	.word	0x08009b23
 8009b18:	08009b2f 	.word	0x08009b2f
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	77fb      	strb	r3, [r7, #31]
 8009b20:	e150      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b22:	2302      	movs	r3, #2
 8009b24:	77fb      	strb	r3, [r7, #31]
 8009b26:	e14d      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e14a      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b2e:	2308      	movs	r3, #8
 8009b30:	77fb      	strb	r3, [r7, #31]
 8009b32:	e147      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b34:	2310      	movs	r3, #16
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e144      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a83      	ldr	r2, [pc, #524]	; (8009d4c <UART_SetConfig+0x2d0>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d132      	bne.n	8009baa <UART_SetConfig+0x12e>
 8009b44:	4b80      	ldr	r3, [pc, #512]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4a:	f003 030c 	and.w	r3, r3, #12
 8009b4e:	2b0c      	cmp	r3, #12
 8009b50:	d828      	bhi.n	8009ba4 <UART_SetConfig+0x128>
 8009b52:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <UART_SetConfig+0xdc>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b8d 	.word	0x08009b8d
 8009b5c:	08009ba5 	.word	0x08009ba5
 8009b60:	08009ba5 	.word	0x08009ba5
 8009b64:	08009ba5 	.word	0x08009ba5
 8009b68:	08009b99 	.word	0x08009b99
 8009b6c:	08009ba5 	.word	0x08009ba5
 8009b70:	08009ba5 	.word	0x08009ba5
 8009b74:	08009ba5 	.word	0x08009ba5
 8009b78:	08009b93 	.word	0x08009b93
 8009b7c:	08009ba5 	.word	0x08009ba5
 8009b80:	08009ba5 	.word	0x08009ba5
 8009b84:	08009ba5 	.word	0x08009ba5
 8009b88:	08009b9f 	.word	0x08009b9f
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	77fb      	strb	r3, [r7, #31]
 8009b90:	e118      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b92:	2302      	movs	r3, #2
 8009b94:	77fb      	strb	r3, [r7, #31]
 8009b96:	e115      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	77fb      	strb	r3, [r7, #31]
 8009b9c:	e112      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009b9e:	2308      	movs	r3, #8
 8009ba0:	77fb      	strb	r3, [r7, #31]
 8009ba2:	e10f      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	77fb      	strb	r3, [r7, #31]
 8009ba8:	e10c      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a68      	ldr	r2, [pc, #416]	; (8009d50 <UART_SetConfig+0x2d4>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d120      	bne.n	8009bf6 <UART_SetConfig+0x17a>
 8009bb4:	4b64      	ldr	r3, [pc, #400]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009bbe:	2b30      	cmp	r3, #48	; 0x30
 8009bc0:	d013      	beq.n	8009bea <UART_SetConfig+0x16e>
 8009bc2:	2b30      	cmp	r3, #48	; 0x30
 8009bc4:	d814      	bhi.n	8009bf0 <UART_SetConfig+0x174>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d009      	beq.n	8009bde <UART_SetConfig+0x162>
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d810      	bhi.n	8009bf0 <UART_SetConfig+0x174>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <UART_SetConfig+0x15c>
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d006      	beq.n	8009be4 <UART_SetConfig+0x168>
 8009bd6:	e00b      	b.n	8009bf0 <UART_SetConfig+0x174>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e0f2      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009bde:	2302      	movs	r3, #2
 8009be0:	77fb      	strb	r3, [r7, #31]
 8009be2:	e0ef      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009be4:	2304      	movs	r3, #4
 8009be6:	77fb      	strb	r3, [r7, #31]
 8009be8:	e0ec      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009bea:	2308      	movs	r3, #8
 8009bec:	77fb      	strb	r3, [r7, #31]
 8009bee:	e0e9      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	77fb      	strb	r3, [r7, #31]
 8009bf4:	e0e6      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a56      	ldr	r2, [pc, #344]	; (8009d54 <UART_SetConfig+0x2d8>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d120      	bne.n	8009c42 <UART_SetConfig+0x1c6>
 8009c00:	4b51      	ldr	r3, [pc, #324]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8009c0c:	d013      	beq.n	8009c36 <UART_SetConfig+0x1ba>
 8009c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8009c10:	d814      	bhi.n	8009c3c <UART_SetConfig+0x1c0>
 8009c12:	2b80      	cmp	r3, #128	; 0x80
 8009c14:	d009      	beq.n	8009c2a <UART_SetConfig+0x1ae>
 8009c16:	2b80      	cmp	r3, #128	; 0x80
 8009c18:	d810      	bhi.n	8009c3c <UART_SetConfig+0x1c0>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <UART_SetConfig+0x1a8>
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	d006      	beq.n	8009c30 <UART_SetConfig+0x1b4>
 8009c22:	e00b      	b.n	8009c3c <UART_SetConfig+0x1c0>
 8009c24:	2300      	movs	r3, #0
 8009c26:	77fb      	strb	r3, [r7, #31]
 8009c28:	e0cc      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	77fb      	strb	r3, [r7, #31]
 8009c2e:	e0c9      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c30:	2304      	movs	r3, #4
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	e0c6      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c36:	2308      	movs	r3, #8
 8009c38:	77fb      	strb	r3, [r7, #31]
 8009c3a:	e0c3      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e0c0      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a44      	ldr	r2, [pc, #272]	; (8009d58 <UART_SetConfig+0x2dc>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d125      	bne.n	8009c98 <UART_SetConfig+0x21c>
 8009c4c:	4b3e      	ldr	r3, [pc, #248]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c5a:	d017      	beq.n	8009c8c <UART_SetConfig+0x210>
 8009c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c60:	d817      	bhi.n	8009c92 <UART_SetConfig+0x216>
 8009c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c66:	d00b      	beq.n	8009c80 <UART_SetConfig+0x204>
 8009c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c6c:	d811      	bhi.n	8009c92 <UART_SetConfig+0x216>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <UART_SetConfig+0x1fe>
 8009c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c76:	d006      	beq.n	8009c86 <UART_SetConfig+0x20a>
 8009c78:	e00b      	b.n	8009c92 <UART_SetConfig+0x216>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	77fb      	strb	r3, [r7, #31]
 8009c7e:	e0a1      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c80:	2302      	movs	r3, #2
 8009c82:	77fb      	strb	r3, [r7, #31]
 8009c84:	e09e      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c86:	2304      	movs	r3, #4
 8009c88:	77fb      	strb	r3, [r7, #31]
 8009c8a:	e09b      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c8c:	2308      	movs	r3, #8
 8009c8e:	77fb      	strb	r3, [r7, #31]
 8009c90:	e098      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c92:	2310      	movs	r3, #16
 8009c94:	77fb      	strb	r3, [r7, #31]
 8009c96:	e095      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a2f      	ldr	r2, [pc, #188]	; (8009d5c <UART_SetConfig+0x2e0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d125      	bne.n	8009cee <UART_SetConfig+0x272>
 8009ca2:	4b29      	ldr	r3, [pc, #164]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cb0:	d017      	beq.n	8009ce2 <UART_SetConfig+0x266>
 8009cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cb6:	d817      	bhi.n	8009ce8 <UART_SetConfig+0x26c>
 8009cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cbc:	d00b      	beq.n	8009cd6 <UART_SetConfig+0x25a>
 8009cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cc2:	d811      	bhi.n	8009ce8 <UART_SetConfig+0x26c>
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <UART_SetConfig+0x254>
 8009cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ccc:	d006      	beq.n	8009cdc <UART_SetConfig+0x260>
 8009cce:	e00b      	b.n	8009ce8 <UART_SetConfig+0x26c>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e076      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	77fb      	strb	r3, [r7, #31]
 8009cda:	e073      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009cdc:	2304      	movs	r3, #4
 8009cde:	77fb      	strb	r3, [r7, #31]
 8009ce0:	e070      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009ce2:	2308      	movs	r3, #8
 8009ce4:	77fb      	strb	r3, [r7, #31]
 8009ce6:	e06d      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009ce8:	2310      	movs	r3, #16
 8009cea:	77fb      	strb	r3, [r7, #31]
 8009cec:	e06a      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <UART_SetConfig+0x2e4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d138      	bne.n	8009d6a <UART_SetConfig+0x2ee>
 8009cf8:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <UART_SetConfig+0x2cc>)
 8009cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009d02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d06:	d017      	beq.n	8009d38 <UART_SetConfig+0x2bc>
 8009d08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d0c:	d82a      	bhi.n	8009d64 <UART_SetConfig+0x2e8>
 8009d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d12:	d00b      	beq.n	8009d2c <UART_SetConfig+0x2b0>
 8009d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d18:	d824      	bhi.n	8009d64 <UART_SetConfig+0x2e8>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <UART_SetConfig+0x2aa>
 8009d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d22:	d006      	beq.n	8009d32 <UART_SetConfig+0x2b6>
 8009d24:	e01e      	b.n	8009d64 <UART_SetConfig+0x2e8>
 8009d26:	2300      	movs	r3, #0
 8009d28:	77fb      	strb	r3, [r7, #31]
 8009d2a:	e04b      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	77fb      	strb	r3, [r7, #31]
 8009d30:	e048      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009d32:	2304      	movs	r3, #4
 8009d34:	77fb      	strb	r3, [r7, #31]
 8009d36:	e045      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	77fb      	strb	r3, [r7, #31]
 8009d3c:	e042      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009d3e:	bf00      	nop
 8009d40:	efff69f3 	.word	0xefff69f3
 8009d44:	40011000 	.word	0x40011000
 8009d48:	40023800 	.word	0x40023800
 8009d4c:	40004400 	.word	0x40004400
 8009d50:	40004800 	.word	0x40004800
 8009d54:	40004c00 	.word	0x40004c00
 8009d58:	40005000 	.word	0x40005000
 8009d5c:	40011400 	.word	0x40011400
 8009d60:	40007800 	.word	0x40007800
 8009d64:	2310      	movs	r3, #16
 8009d66:	77fb      	strb	r3, [r7, #31]
 8009d68:	e02c      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a72      	ldr	r2, [pc, #456]	; (8009f38 <UART_SetConfig+0x4bc>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d125      	bne.n	8009dc0 <UART_SetConfig+0x344>
 8009d74:	4b71      	ldr	r3, [pc, #452]	; (8009f3c <UART_SetConfig+0x4c0>)
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d82:	d017      	beq.n	8009db4 <UART_SetConfig+0x338>
 8009d84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d88:	d817      	bhi.n	8009dba <UART_SetConfig+0x33e>
 8009d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d8e:	d00b      	beq.n	8009da8 <UART_SetConfig+0x32c>
 8009d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d94:	d811      	bhi.n	8009dba <UART_SetConfig+0x33e>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <UART_SetConfig+0x326>
 8009d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d9e:	d006      	beq.n	8009dae <UART_SetConfig+0x332>
 8009da0:	e00b      	b.n	8009dba <UART_SetConfig+0x33e>
 8009da2:	2300      	movs	r3, #0
 8009da4:	77fb      	strb	r3, [r7, #31]
 8009da6:	e00d      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009da8:	2302      	movs	r3, #2
 8009daa:	77fb      	strb	r3, [r7, #31]
 8009dac:	e00a      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009dae:	2304      	movs	r3, #4
 8009db0:	77fb      	strb	r3, [r7, #31]
 8009db2:	e007      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009db4:	2308      	movs	r3, #8
 8009db6:	77fb      	strb	r3, [r7, #31]
 8009db8:	e004      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009dba:	2310      	movs	r3, #16
 8009dbc:	77fb      	strb	r3, [r7, #31]
 8009dbe:	e001      	b.n	8009dc4 <UART_SetConfig+0x348>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dcc:	d15b      	bne.n	8009e86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009dce:	7ffb      	ldrb	r3, [r7, #31]
 8009dd0:	2b08      	cmp	r3, #8
 8009dd2:	d828      	bhi.n	8009e26 <UART_SetConfig+0x3aa>
 8009dd4:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <UART_SetConfig+0x360>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e09 	.word	0x08009e09
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	08009e27 	.word	0x08009e27
 8009dec:	08009e17 	.word	0x08009e17
 8009df0:	08009e27 	.word	0x08009e27
 8009df4:	08009e27 	.word	0x08009e27
 8009df8:	08009e27 	.word	0x08009e27
 8009dfc:	08009e1f 	.word	0x08009e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e00:	f7fd fc38 	bl	8007674 <HAL_RCC_GetPCLK1Freq>
 8009e04:	61b8      	str	r0, [r7, #24]
        break;
 8009e06:	e013      	b.n	8009e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e08:	f7fd fc48 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 8009e0c:	61b8      	str	r0, [r7, #24]
        break;
 8009e0e:	e00f      	b.n	8009e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e10:	4b4b      	ldr	r3, [pc, #300]	; (8009f40 <UART_SetConfig+0x4c4>)
 8009e12:	61bb      	str	r3, [r7, #24]
        break;
 8009e14:	e00c      	b.n	8009e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e16:	f7fd fb1b 	bl	8007450 <HAL_RCC_GetSysClockFreq>
 8009e1a:	61b8      	str	r0, [r7, #24]
        break;
 8009e1c:	e008      	b.n	8009e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e22:	61bb      	str	r3, [r7, #24]
        break;
 8009e24:	e004      	b.n	8009e30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	77bb      	strb	r3, [r7, #30]
        break;
 8009e2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d074      	beq.n	8009f20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	005a      	lsls	r2, r3, #1
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	085b      	lsrs	r3, r3, #1
 8009e40:	441a      	add	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2b0f      	cmp	r3, #15
 8009e50:	d916      	bls.n	8009e80 <UART_SetConfig+0x404>
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e58:	d212      	bcs.n	8009e80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	f023 030f 	bic.w	r3, r3, #15
 8009e62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	89fb      	ldrh	r3, [r7, #14]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	89fa      	ldrh	r2, [r7, #14]
 8009e7c:	60da      	str	r2, [r3, #12]
 8009e7e:	e04f      	b.n	8009f20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	77bb      	strb	r3, [r7, #30]
 8009e84:	e04c      	b.n	8009f20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e86:	7ffb      	ldrb	r3, [r7, #31]
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	d828      	bhi.n	8009ede <UART_SetConfig+0x462>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0x418>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	08009edf 	.word	0x08009edf
 8009ea4:	08009ecf 	.word	0x08009ecf
 8009ea8:	08009edf 	.word	0x08009edf
 8009eac:	08009edf 	.word	0x08009edf
 8009eb0:	08009edf 	.word	0x08009edf
 8009eb4:	08009ed7 	.word	0x08009ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb8:	f7fd fbdc 	bl	8007674 <HAL_RCC_GetPCLK1Freq>
 8009ebc:	61b8      	str	r0, [r7, #24]
        break;
 8009ebe:	e013      	b.n	8009ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ec0:	f7fd fbec 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 8009ec4:	61b8      	str	r0, [r7, #24]
        break;
 8009ec6:	e00f      	b.n	8009ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ec8:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <UART_SetConfig+0x4c4>)
 8009eca:	61bb      	str	r3, [r7, #24]
        break;
 8009ecc:	e00c      	b.n	8009ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ece:	f7fd fabf 	bl	8007450 <HAL_RCC_GetSysClockFreq>
 8009ed2:	61b8      	str	r0, [r7, #24]
        break;
 8009ed4:	e008      	b.n	8009ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eda:	61bb      	str	r3, [r7, #24]
        break;
 8009edc:	e004      	b.n	8009ee8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	77bb      	strb	r3, [r7, #30]
        break;
 8009ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d018      	beq.n	8009f20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	085a      	lsrs	r2, r3, #1
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	441a      	add	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b0f      	cmp	r3, #15
 8009f06:	d909      	bls.n	8009f1c <UART_SetConfig+0x4a0>
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0e:	d205      	bcs.n	8009f1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	e001      	b.n	8009f20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009f2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40007c00 	.word	0x40007c00
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	00f42400 	.word	0x00f42400

08009f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00a      	beq.n	8009f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00a      	beq.n	8009fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	f003 0308 	and.w	r3, r3, #8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00a      	beq.n	8009fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00a      	beq.n	8009ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	430a      	orrs	r2, r1
 800a016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	d01a      	beq.n	800a05a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a042:	d10a      	bne.n	800a05a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a098:	f7fb fcc6 	bl	8005a28 <HAL_GetTick>
 800a09c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0308 	and.w	r3, r3, #8
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d10e      	bne.n	800a0ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f817 	bl	800a0ee <UART_WaitOnFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e00d      	b.n	800a0e6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b09c      	sub	sp, #112	; 0x70
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	603b      	str	r3, [r7, #0]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0fe:	e0a5      	b.n	800a24c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a106:	f000 80a1 	beq.w	800a24c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a10a:	f7fb fc8d 	bl	8005a28 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a116:	429a      	cmp	r2, r3
 800a118:	d302      	bcc.n	800a120 <UART_WaitOnFlagUntilTimeout+0x32>
 800a11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d13e      	bne.n	800a19e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a134:	667b      	str	r3, [r7, #100]	; 0x64
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a140:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e6      	bne.n	800a120 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	663b      	str	r3, [r7, #96]	; 0x60
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3308      	adds	r3, #8
 800a170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a172:	64ba      	str	r2, [r7, #72]	; 0x48
 800a174:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e5      	bne.n	800a152 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2220      	movs	r2, #32
 800a18a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2220      	movs	r2, #32
 800a190:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e067      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d04f      	beq.n	800a24c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ba:	d147      	bne.n	800a24c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	e853 3f00 	ldrex	r3, [r3]
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e6      	bne.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	613b      	str	r3, [r7, #16]
   return(result);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f023 0301 	bic.w	r3, r3, #1
 800a20e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a218:	623a      	str	r2, [r7, #32]
 800a21a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	69f9      	ldr	r1, [r7, #28]
 800a21e:	6a3a      	ldr	r2, [r7, #32]
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	61bb      	str	r3, [r7, #24]
   return(result);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e5      	bne.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2220      	movs	r2, #32
 800a236:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e010      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	69da      	ldr	r2, [r3, #28]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4013      	ands	r3, r2
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	429a      	cmp	r2, r3
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	429a      	cmp	r2, r3
 800a268:	f43f af4a 	beq.w	800a100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3770      	adds	r7, #112	; 0x70
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a278:	b480      	push	{r7}
 800a27a:	b097      	sub	sp, #92	; 0x5c
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	88fa      	ldrh	r2, [r7, #6]
 800a290:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	88fa      	ldrh	r2, [r7, #6]
 800a298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2aa:	d10e      	bne.n	800a2ca <UART_Start_Receive_IT+0x52>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <UART_Start_Receive_IT+0x48>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a2ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2be:	e02d      	b.n	800a31c <UART_Start_Receive_IT+0xa4>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	22ff      	movs	r2, #255	; 0xff
 800a2c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2c8:	e028      	b.n	800a31c <UART_Start_Receive_IT+0xa4>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10d      	bne.n	800a2ee <UART_Start_Receive_IT+0x76>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d104      	bne.n	800a2e4 <UART_Start_Receive_IT+0x6c>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	22ff      	movs	r2, #255	; 0xff
 800a2de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2e2:	e01b      	b.n	800a31c <UART_Start_Receive_IT+0xa4>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	227f      	movs	r2, #127	; 0x7f
 800a2e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2ec:	e016      	b.n	800a31c <UART_Start_Receive_IT+0xa4>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2f6:	d10d      	bne.n	800a314 <UART_Start_Receive_IT+0x9c>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d104      	bne.n	800a30a <UART_Start_Receive_IT+0x92>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	227f      	movs	r2, #127	; 0x7f
 800a304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a308:	e008      	b.n	800a31c <UART_Start_Receive_IT+0xa4>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	223f      	movs	r2, #63	; 0x3f
 800a30e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a312:	e003      	b.n	800a31c <UART_Start_Receive_IT+0xa4>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2222      	movs	r2, #34	; 0x22
 800a328:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3308      	adds	r3, #8
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	f043 0301 	orr.w	r3, r3, #1
 800a340:	657b      	str	r3, [r7, #84]	; 0x54
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3308      	adds	r3, #8
 800a348:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a34a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a34c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e5      	bne.n	800a32a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a366:	d107      	bne.n	800a378 <UART_Start_Receive_IT+0x100>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4a24      	ldr	r2, [pc, #144]	; (800a404 <UART_Start_Receive_IT+0x18c>)
 800a374:	665a      	str	r2, [r3, #100]	; 0x64
 800a376:	e002      	b.n	800a37e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4a23      	ldr	r2, [pc, #140]	; (800a408 <UART_Start_Receive_IT+0x190>)
 800a37c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d019      	beq.n	800a3c2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	e853 3f00 	ldrex	r3, [r3]
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e6      	bne.n	800a38e <UART_Start_Receive_IT+0x116>
 800a3c0:	e018      	b.n	800a3f4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f043 0320 	orr.w	r3, r3, #32
 800a3d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e0:	623b      	str	r3, [r7, #32]
 800a3e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	69f9      	ldr	r1, [r7, #28]
 800a3e6:	6a3a      	ldr	r2, [r7, #32]
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e6      	bne.n	800a3c2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	375c      	adds	r7, #92	; 0x5c
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	0800a6af 	.word	0x0800a6af
 800a408:	0800a553 	.word	0x0800a553

0800a40c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b095      	sub	sp, #84	; 0x54
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41c:	e853 3f00 	ldrex	r3, [r3]
 800a420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a432:	643b      	str	r3, [r7, #64]	; 0x40
 800a434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e6      	bne.n	800a414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	61fb      	str	r3, [r7, #28]
   return(result);
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f023 0301 	bic.w	r3, r3, #1
 800a45c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a466:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e5      	bne.n	800a446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d118      	bne.n	800a4b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f023 0310 	bic.w	r3, r3, #16
 800a496:	647b      	str	r3, [r7, #68]	; 0x44
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a0:	61bb      	str	r3, [r7, #24]
 800a4a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6979      	ldr	r1, [r7, #20]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e6      	bne.n	800a482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a4c6:	bf00      	nop
 800a4c8:	3754      	adds	r7, #84	; 0x54
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7ff faad 	bl	8009a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b088      	sub	sp, #32
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	e853 3f00 	ldrex	r3, [r3]
 800a512:	60bb      	str	r3, [r7, #8]
   return(result);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a51a:	61fb      	str	r3, [r7, #28]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	61bb      	str	r3, [r7, #24]
 800a526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6979      	ldr	r1, [r7, #20]
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	613b      	str	r3, [r7, #16]
   return(result);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e6      	bne.n	800a506 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2220      	movs	r2, #32
 800a53c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff fa79 	bl	8009a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a54a:	bf00      	nop
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b096      	sub	sp, #88	; 0x58
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a560:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a568:	2b22      	cmp	r3, #34	; 0x22
 800a56a:	f040 8094 	bne.w	800a696 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a578:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a57c:	b2d9      	uxtb	r1, r3
 800a57e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a582:	b2da      	uxtb	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a588:	400a      	ands	r2, r1
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d177      	bne.n	800a6a6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e6      	bne.n	800a5b6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	623b      	str	r3, [r7, #32]
   return(result);
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	f023 0301 	bic.w	r3, r3, #1
 800a5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a608:	633a      	str	r2, [r7, #48]	; 0x30
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e5      	bne.n	800a5e8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d12e      	bne.n	800a68e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	60fb      	str	r3, [r7, #12]
   return(result);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0310 	bic.w	r3, r3, #16
 800a64a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	69b9      	ldr	r1, [r7, #24]
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	617b      	str	r3, [r7, #20]
   return(result);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e6      	bne.n	800a636 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	f003 0310 	and.w	r3, r3, #16
 800a672:	2b10      	cmp	r3, #16
 800a674:	d103      	bne.n	800a67e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2210      	movs	r2, #16
 800a67c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff f9ec 	bl	8009a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a68c:	e00b      	b.n	800a6a6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7f8 fcde 	bl	8003050 <HAL_UART_RxCpltCallback>
}
 800a694:	e007      	b.n	800a6a6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	699a      	ldr	r2, [r3, #24]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0208 	orr.w	r2, r2, #8
 800a6a4:	619a      	str	r2, [r3, #24]
}
 800a6a6:	bf00      	nop
 800a6a8:	3758      	adds	r7, #88	; 0x58
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b096      	sub	sp, #88	; 0x58
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c4:	2b22      	cmp	r3, #34	; 0x22
 800a6c6:	f040 8094 	bne.w	800a7f2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a6da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a6de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ee:	1c9a      	adds	r2, r3, #2
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d177      	bne.n	800a802 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a726:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a730:	643b      	str	r3, [r7, #64]	; 0x40
 800a732:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e6      	bne.n	800a712 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3308      	adds	r3, #8
 800a74a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	e853 3f00 	ldrex	r3, [r3]
 800a752:	61fb      	str	r3, [r7, #28]
   return(result);
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a764:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a76c:	e841 2300 	strex	r3, r2, [r1]
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e5      	bne.n	800a744 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2220      	movs	r2, #32
 800a77c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d12e      	bne.n	800a7ea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f023 0310 	bic.w	r3, r3, #16
 800a7a6:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e6      	bne.n	800a792 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	f003 0310 	and.w	r3, r3, #16
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d103      	bne.n	800a7da <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff f93e 	bl	8009a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7e8:	e00b      	b.n	800a802 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7f8 fc30 	bl	8003050 <HAL_UART_RxCpltCallback>
}
 800a7f0:	e007      	b.n	800a802 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0208 	orr.w	r2, r2, #8
 800a800:	619a      	str	r2, [r3, #24]
}
 800a802:	bf00      	nop
 800a804:	3758      	adds	r7, #88	; 0x58
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a80a:	b480      	push	{r7}
 800a80c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a80e:	bf00      	nop
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a81e:	f3ef 8305 	mrs	r3, IPSR
 800a822:	60bb      	str	r3, [r7, #8]
  return(result);
 800a824:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10f      	bne.n	800a84a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a82a:	f3ef 8310 	mrs	r3, PRIMASK
 800a82e:	607b      	str	r3, [r7, #4]
  return(result);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a836:	f3ef 8311 	mrs	r3, BASEPRI
 800a83a:	603b      	str	r3, [r7, #0]
  return(result);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <osKernelInitialize+0x3a>
 800a842:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <osKernelInitialize+0x64>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b02      	cmp	r3, #2
 800a848:	d103      	bne.n	800a852 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a84a:	f06f 0305 	mvn.w	r3, #5
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e00c      	b.n	800a86c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a852:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <osKernelInitialize+0x64>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d105      	bne.n	800a866 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <osKernelInitialize+0x64>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e002      	b.n	800a86c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a866:	f04f 33ff 	mov.w	r3, #4294967295
 800a86a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a86c:	68fb      	ldr	r3, [r7, #12]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	200007c4 	.word	0x200007c4

0800a880 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a886:	f3ef 8305 	mrs	r3, IPSR
 800a88a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a88c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10f      	bne.n	800a8b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a892:	f3ef 8310 	mrs	r3, PRIMASK
 800a896:	607b      	str	r3, [r7, #4]
  return(result);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d105      	bne.n	800a8aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a89e:	f3ef 8311 	mrs	r3, BASEPRI
 800a8a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d007      	beq.n	800a8ba <osKernelStart+0x3a>
 800a8aa:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <osKernelStart+0x68>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d103      	bne.n	800a8ba <osKernelStart+0x3a>
    stat = osErrorISR;
 800a8b2:	f06f 0305 	mvn.w	r3, #5
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e010      	b.n	800a8dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <osKernelStart+0x68>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d109      	bne.n	800a8d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8c2:	f7ff ffa2 	bl	800a80a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8c6:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <osKernelStart+0x68>)
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8cc:	f002 faae 	bl	800ce2c <vTaskStartScheduler>
      stat = osOK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e002      	b.n	800a8dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200007c4 	.word	0x200007c4

0800a8ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f2:	f3ef 8305 	mrs	r3, IPSR
 800a8f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10f      	bne.n	800a91e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a902:	607b      	str	r3, [r7, #4]
  return(result);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d105      	bne.n	800a916 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a90a:	f3ef 8311 	mrs	r3, BASEPRI
 800a90e:	603b      	str	r3, [r7, #0]
  return(result);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d007      	beq.n	800a926 <osKernelGetTickCount+0x3a>
 800a916:	4b08      	ldr	r3, [pc, #32]	; (800a938 <osKernelGetTickCount+0x4c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d103      	bne.n	800a926 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800a91e:	f002 fbb7 	bl	800d090 <xTaskGetTickCountFromISR>
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	e002      	b.n	800a92c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800a926:	f002 fba3 	bl	800d070 <xTaskGetTickCount>
 800a92a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	200007c4 	.word	0x200007c4

0800a93c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a944:	4618      	mov	r0, r3
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
	...

0800a950 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a950:	b580      	push	{r7, lr}
 800a952:	b090      	sub	sp, #64	; 0x40
 800a954:	af04      	add	r7, sp, #16
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a960:	f3ef 8305 	mrs	r3, IPSR
 800a964:	61fb      	str	r3, [r7, #28]
  return(result);
 800a966:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f040 808f 	bne.w	800aa8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a96e:	f3ef 8310 	mrs	r3, PRIMASK
 800a972:	61bb      	str	r3, [r7, #24]
  return(result);
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a97a:	f3ef 8311 	mrs	r3, BASEPRI
 800a97e:	617b      	str	r3, [r7, #20]
  return(result);
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <osThreadNew+0x3e>
 800a986:	4b44      	ldr	r3, [pc, #272]	; (800aa98 <osThreadNew+0x148>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d07e      	beq.n	800aa8c <osThreadNew+0x13c>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d07b      	beq.n	800aa8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a994:	2380      	movs	r3, #128	; 0x80
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a998:	2318      	movs	r3, #24
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d045      	beq.n	800aa38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <osThreadNew+0x6a>
        name = attr->name;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d008      	beq.n	800a9e0 <osThreadNew+0x90>
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	2b38      	cmp	r3, #56	; 0x38
 800a9d2:	d805      	bhi.n	800a9e0 <osThreadNew+0x90>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <osThreadNew+0x94>
        return (NULL);
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e054      	b.n	800aa8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	089b      	lsrs	r3, r3, #2
 800a9f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00e      	beq.n	800aa1a <osThreadNew+0xca>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	2bbb      	cmp	r3, #187	; 0xbb
 800aa02:	d90a      	bls.n	800aa1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d006      	beq.n	800aa1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <osThreadNew+0xca>
        mem = 1;
 800aa14:	2301      	movs	r3, #1
 800aa16:	623b      	str	r3, [r7, #32]
 800aa18:	e010      	b.n	800aa3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10c      	bne.n	800aa3c <osThreadNew+0xec>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d108      	bne.n	800aa3c <osThreadNew+0xec>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d104      	bne.n	800aa3c <osThreadNew+0xec>
          mem = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	623b      	str	r3, [r7, #32]
 800aa36:	e001      	b.n	800aa3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d110      	bne.n	800aa64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa4a:	9202      	str	r2, [sp, #8]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f001 ff6d 	bl	800c938 <xTaskCreateStatic>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	e013      	b.n	800aa8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d110      	bne.n	800aa8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	f107 0310 	add.w	r3, r7, #16
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f001 ffbe 	bl	800c9fe <xTaskCreate>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d001      	beq.n	800aa8c <osThreadNew+0x13c>
          hTask = NULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa8c:	693b      	ldr	r3, [r7, #16]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3730      	adds	r7, #48	; 0x30
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	200007c4 	.word	0x200007c4

0800aa9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa4:	f3ef 8305 	mrs	r3, IPSR
 800aaa8:	613b      	str	r3, [r7, #16]
  return(result);
 800aaaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10f      	bne.n	800aad0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aab0:	f3ef 8310 	mrs	r3, PRIMASK
 800aab4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d105      	bne.n	800aac8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aabc:	f3ef 8311 	mrs	r3, BASEPRI
 800aac0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d007      	beq.n	800aad8 <osDelay+0x3c>
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <osDelay+0x58>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d103      	bne.n	800aad8 <osDelay+0x3c>
    stat = osErrorISR;
 800aad0:	f06f 0305 	mvn.w	r3, #5
 800aad4:	617b      	str	r3, [r7, #20]
 800aad6:	e007      	b.n	800aae8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f002 f96c 	bl	800cdc0 <vTaskDelay>
    }
  }

  return (stat);
 800aae8:	697b      	ldr	r3, [r7, #20]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200007c4 	.word	0x200007c4

0800aaf8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab00:	f3ef 8305 	mrs	r3, IPSR
 800ab04:	617b      	str	r3, [r7, #20]
  return(result);
 800ab06:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10f      	bne.n	800ab2c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab10:	613b      	str	r3, [r7, #16]
  return(result);
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab18:	f3ef 8311 	mrs	r3, BASEPRI
 800ab1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <osDelayUntil+0x3c>
 800ab24:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <osDelayUntil+0x7c>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d103      	bne.n	800ab34 <osDelayUntil+0x3c>
    stat = osErrorISR;
 800ab2c:	f06f 0305 	mvn.w	r3, #5
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	e019      	b.n	800ab68 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800ab38:	f002 fa9a 	bl	800d070 <xTaskGetTickCount>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d009      	beq.n	800ab62 <osDelayUntil+0x6a>
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	db06      	blt.n	800ab62 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 800ab54:	f107 0308 	add.w	r3, r7, #8
 800ab58:	69b9      	ldr	r1, [r7, #24]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f002 f8ac 	bl	800ccb8 <vTaskDelayUntil>
 800ab60:	e002      	b.n	800ab68 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ab62:	f06f 0303 	mvn.w	r3, #3
 800ab66:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800ab68:	69fb      	ldr	r3, [r7, #28]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	200007c4 	.word	0x200007c4

0800ab78 <TimerCallback>:

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f003 fbcb 	bl	800e31c <pvTimerGetTimerID>
 800ab86:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <TimerCallback+0x22>
    callb->func (callb->arg);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	6852      	ldr	r2, [r2, #4]
 800ab96:	4610      	mov	r0, r2
 800ab98:	4798      	blx	r3
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08e      	sub	sp, #56	; 0x38
 800aba8:	af02      	add	r7, sp, #8
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	460b      	mov	r3, r1
 800abb2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abb8:	f3ef 8305 	mrs	r3, IPSR
 800abbc:	61bb      	str	r3, [r7, #24]
  return(result);
 800abbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d16a      	bne.n	800ac9a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc4:	f3ef 8310 	mrs	r3, PRIMASK
 800abc8:	617b      	str	r3, [r7, #20]
  return(result);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d105      	bne.n	800abdc <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800abd0:	f3ef 8311 	mrs	r3, BASEPRI
 800abd4:	613b      	str	r3, [r7, #16]
  return(result);
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <osTimerNew+0x40>
 800abdc:	4b31      	ldr	r3, [pc, #196]	; (800aca4 <osTimerNew+0x100>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d05a      	beq.n	800ac9a <osTimerNew+0xf6>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d057      	beq.n	800ac9a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800abea:	2008      	movs	r0, #8
 800abec:	f003 fdf2 	bl	800e7d4 <pvPortMalloc>
 800abf0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d050      	beq.n	800ac9a <osTimerNew+0xf6>
      callb->func = func;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d102      	bne.n	800ac10 <osTimerNew+0x6c>
        reload = pdFALSE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac0e:	e001      	b.n	800ac14 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800ac10:	2301      	movs	r3, #1
 800ac12:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	623b      	str	r3, [r7, #32]
      name = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01c      	beq.n	800ac5e <osTimerNew+0xba>
        if (attr->name != NULL) {
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <osTimerNew+0x8e>
          name = attr->name;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <osTimerNew+0xa4>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	2b2b      	cmp	r3, #43	; 0x2b
 800ac40:	d902      	bls.n	800ac48 <osTimerNew+0xa4>
          mem = 1;
 800ac42:	2301      	movs	r3, #1
 800ac44:	623b      	str	r3, [r7, #32]
 800ac46:	e00c      	b.n	800ac62 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d108      	bne.n	800ac62 <osTimerNew+0xbe>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d104      	bne.n	800ac62 <osTimerNew+0xbe>
            mem = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	623b      	str	r3, [r7, #32]
 800ac5c:	e001      	b.n	800ac62 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d10c      	bne.n	800ac82 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	4b0e      	ldr	r3, [pc, #56]	; (800aca8 <osTimerNew+0x104>)
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	2101      	movs	r1, #1
 800ac78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac7a:	f002 ffbe 	bl	800dbfa <xTimerCreateStatic>
 800ac7e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac80:	e00b      	b.n	800ac9a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d108      	bne.n	800ac9a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ac88:	4b07      	ldr	r3, [pc, #28]	; (800aca8 <osTimerNew+0x104>)
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac90:	2101      	movs	r1, #1
 800ac92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac94:	f002 ff90 	bl	800dbb8 <xTimerCreate>
 800ac98:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3730      	adds	r7, #48	; 0x30
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	200007c4 	.word	0x200007c4
 800aca8:	0800ab79 	.word	0x0800ab79

0800acac <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800acac:	b580      	push	{r7, lr}
 800acae:	b08a      	sub	sp, #40	; 0x28
 800acb0:	af02      	add	r7, sp, #8
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acba:	f3ef 8305 	mrs	r3, IPSR
 800acbe:	617b      	str	r3, [r7, #20]
  return(result);
 800acc0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10f      	bne.n	800ace6 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acc6:	f3ef 8310 	mrs	r3, PRIMASK
 800acca:	613b      	str	r3, [r7, #16]
  return(result);
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d105      	bne.n	800acde <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acd2:	f3ef 8311 	mrs	r3, BASEPRI
 800acd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d007      	beq.n	800acee <osTimerStart+0x42>
 800acde:	4b12      	ldr	r3, [pc, #72]	; (800ad28 <osTimerStart+0x7c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d103      	bne.n	800acee <osTimerStart+0x42>
    stat = osErrorISR;
 800ace6:	f06f 0305 	mvn.w	r3, #5
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e017      	b.n	800ad1e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d103      	bne.n	800acfc <osTimerStart+0x50>
    stat = osErrorParameter;
 800acf4:	f06f 0303 	mvn.w	r3, #3
 800acf8:	61fb      	str	r3, [r7, #28]
 800acfa:	e010      	b.n	800ad1e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800acfc:	2300      	movs	r3, #0
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	2104      	movs	r1, #4
 800ad06:	69b8      	ldr	r0, [r7, #24]
 800ad08:	f002 fff6 	bl	800dcf8 <xTimerGenericCommand>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d102      	bne.n	800ad18 <osTimerStart+0x6c>
      stat = osOK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	61fb      	str	r3, [r7, #28]
 800ad16:	e002      	b.n	800ad1e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800ad18:	f06f 0302 	mvn.w	r3, #2
 800ad1c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	200007c4 	.word	0x200007c4

0800ad2c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b08a      	sub	sp, #40	; 0x28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad38:	f3ef 8305 	mrs	r3, IPSR
 800ad3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ad3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f040 8085 	bne.w	800ae50 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad46:	f3ef 8310 	mrs	r3, PRIMASK
 800ad4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d105      	bne.n	800ad5e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad52:	f3ef 8311 	mrs	r3, BASEPRI
 800ad56:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <osMutexNew+0x3a>
 800ad5e:	4b3f      	ldr	r3, [pc, #252]	; (800ae5c <osMutexNew+0x130>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d074      	beq.n	800ae50 <osMutexNew+0x124>
    if (attr != NULL) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <osMutexNew+0x48>
      type = attr->attr_bits;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	623b      	str	r3, [r7, #32]
 800ad72:	e001      	b.n	800ad78 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <osMutexNew+0x5c>
      rmtx = 1U;
 800ad82:	2301      	movs	r3, #1
 800ad84:	61fb      	str	r3, [r7, #28]
 800ad86:	e001      	b.n	800ad8c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	f003 0308 	and.w	r3, r3, #8
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d15c      	bne.n	800ae50 <osMutexNew+0x124>
      mem = -1;
 800ad96:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d015      	beq.n	800adce <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d006      	beq.n	800adb8 <osMutexNew+0x8c>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	2b4f      	cmp	r3, #79	; 0x4f
 800adb0:	d902      	bls.n	800adb8 <osMutexNew+0x8c>
          mem = 1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	61bb      	str	r3, [r7, #24]
 800adb6:	e00c      	b.n	800add2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d108      	bne.n	800add2 <osMutexNew+0xa6>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <osMutexNew+0xa6>
            mem = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	e001      	b.n	800add2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d112      	bne.n	800adfe <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d007      	beq.n	800adee <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	4619      	mov	r1, r3
 800ade4:	2004      	movs	r0, #4
 800ade6:	f000 fe1a 	bl	800ba1e <xQueueCreateMutexStatic>
 800adea:	6278      	str	r0, [r7, #36]	; 0x24
 800adec:	e016      	b.n	800ae1c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	4619      	mov	r1, r3
 800adf4:	2001      	movs	r0, #1
 800adf6:	f000 fe12 	bl	800ba1e <xQueueCreateMutexStatic>
 800adfa:	6278      	str	r0, [r7, #36]	; 0x24
 800adfc:	e00e      	b.n	800ae1c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10b      	bne.n	800ae1c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ae0a:	2004      	movs	r0, #4
 800ae0c:	f000 fdef 	bl	800b9ee <xQueueCreateMutex>
 800ae10:	6278      	str	r0, [r7, #36]	; 0x24
 800ae12:	e003      	b.n	800ae1c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ae14:	2001      	movs	r0, #1
 800ae16:	f000 fdea 	bl	800b9ee <xQueueCreateMutex>
 800ae1a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00c      	beq.n	800ae3c <osMutexNew+0x110>
        if (attr != NULL) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <osMutexNew+0x104>
          name = attr->name;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e001      	b.n	800ae34 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ae34:	6979      	ldr	r1, [r7, #20]
 800ae36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae38:	f001 fcf6 	bl	800c828 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <osMutexNew+0x124>
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d003      	beq.n	800ae50 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3728      	adds	r7, #40	; 0x28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200007c4 	.word	0x200007c4

0800ae60 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f023 0301 	bic.w	r3, r3, #1
 800ae70:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae7e:	f3ef 8305 	mrs	r3, IPSR
 800ae82:	613b      	str	r3, [r7, #16]
  return(result);
 800ae84:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10f      	bne.n	800aeaa <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d105      	bne.n	800aea2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae96:	f3ef 8311 	mrs	r3, BASEPRI
 800ae9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <osMutexAcquire+0x52>
 800aea2:	4b1d      	ldr	r3, [pc, #116]	; (800af18 <osMutexAcquire+0xb8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d103      	bne.n	800aeb2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800aeaa:	f06f 0305 	mvn.w	r3, #5
 800aeae:	61fb      	str	r3, [r7, #28]
 800aeb0:	e02c      	b.n	800af0c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d103      	bne.n	800aec0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800aeb8:	f06f 0303 	mvn.w	r3, #3
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	e025      	b.n	800af0c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d011      	beq.n	800aeea <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	69b8      	ldr	r0, [r7, #24]
 800aeca:	f000 fdf9 	bl	800bac0 <xQueueTakeMutexRecursive>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d01b      	beq.n	800af0c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800aeda:	f06f 0301 	mvn.w	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	e014      	b.n	800af0c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800aee2:	f06f 0302 	mvn.w	r3, #2
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	e010      	b.n	800af0c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	69b8      	ldr	r0, [r7, #24]
 800aeee:	f001 f9b3 	bl	800c258 <xQueueSemaphoreTake>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d009      	beq.n	800af0c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800aefe:	f06f 0301 	mvn.w	r3, #1
 800af02:	61fb      	str	r3, [r7, #28]
 800af04:	e002      	b.n	800af0c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800af06:	f06f 0302 	mvn.w	r3, #2
 800af0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800af0c:	69fb      	ldr	r3, [r7, #28]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	200007c4 	.word	0x200007c4

0800af1c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f023 0301 	bic.w	r3, r3, #1
 800af2a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800af34:	2300      	movs	r3, #0
 800af36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af38:	f3ef 8305 	mrs	r3, IPSR
 800af3c:	613b      	str	r3, [r7, #16]
  return(result);
 800af3e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10f      	bne.n	800af64 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af44:	f3ef 8310 	mrs	r3, PRIMASK
 800af48:	60fb      	str	r3, [r7, #12]
  return(result);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d105      	bne.n	800af5c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af50:	f3ef 8311 	mrs	r3, BASEPRI
 800af54:	60bb      	str	r3, [r7, #8]
  return(result);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <osMutexRelease+0x50>
 800af5c:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <osMutexRelease+0x9c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b02      	cmp	r3, #2
 800af62:	d103      	bne.n	800af6c <osMutexRelease+0x50>
    stat = osErrorISR;
 800af64:	f06f 0305 	mvn.w	r3, #5
 800af68:	61fb      	str	r3, [r7, #28]
 800af6a:	e01f      	b.n	800afac <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d103      	bne.n	800af7a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800af72:	f06f 0303 	mvn.w	r3, #3
 800af76:	61fb      	str	r3, [r7, #28]
 800af78:	e018      	b.n	800afac <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d009      	beq.n	800af94 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800af80:	69b8      	ldr	r0, [r7, #24]
 800af82:	f000 fd67 	bl	800ba54 <xQueueGiveMutexRecursive>
 800af86:	4603      	mov	r3, r0
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d00f      	beq.n	800afac <osMutexRelease+0x90>
        stat = osErrorResource;
 800af8c:	f06f 0302 	mvn.w	r3, #2
 800af90:	61fb      	str	r3, [r7, #28]
 800af92:	e00b      	b.n	800afac <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800af94:	2300      	movs	r3, #0
 800af96:	2200      	movs	r2, #0
 800af98:	2100      	movs	r1, #0
 800af9a:	69b8      	ldr	r0, [r7, #24]
 800af9c:	f000 fe3a 	bl	800bc14 <xQueueGenericSend>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d002      	beq.n	800afac <osMutexRelease+0x90>
        stat = osErrorResource;
 800afa6:	f06f 0302 	mvn.w	r3, #2
 800afaa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800afac:	69fb      	ldr	r3, [r7, #28]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3720      	adds	r7, #32
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	200007c4 	.word	0x200007c4

0800afbc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08c      	sub	sp, #48	; 0x30
 800afc0:	af02      	add	r7, sp, #8
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afcc:	f3ef 8305 	mrs	r3, IPSR
 800afd0:	61bb      	str	r3, [r7, #24]
  return(result);
 800afd2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f040 8086 	bne.w	800b0e6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afda:	f3ef 8310 	mrs	r3, PRIMASK
 800afde:	617b      	str	r3, [r7, #20]
  return(result);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d105      	bne.n	800aff2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afe6:	f3ef 8311 	mrs	r3, BASEPRI
 800afea:	613b      	str	r3, [r7, #16]
  return(result);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <osSemaphoreNew+0x3e>
 800aff2:	4b3f      	ldr	r3, [pc, #252]	; (800b0f0 <osSemaphoreNew+0x134>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d075      	beq.n	800b0e6 <osSemaphoreNew+0x12a>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d072      	beq.n	800b0e6 <osSemaphoreNew+0x12a>
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	429a      	cmp	r2, r3
 800b006:	d86e      	bhi.n	800b0e6 <osSemaphoreNew+0x12a>
    mem = -1;
 800b008:	f04f 33ff 	mov.w	r3, #4294967295
 800b00c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d015      	beq.n	800b040 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d006      	beq.n	800b02a <osSemaphoreNew+0x6e>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	2b4f      	cmp	r3, #79	; 0x4f
 800b022:	d902      	bls.n	800b02a <osSemaphoreNew+0x6e>
        mem = 1;
 800b024:	2301      	movs	r3, #1
 800b026:	623b      	str	r3, [r7, #32]
 800b028:	e00c      	b.n	800b044 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d108      	bne.n	800b044 <osSemaphoreNew+0x88>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <osSemaphoreNew+0x88>
          mem = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	623b      	str	r3, [r7, #32]
 800b03e:	e001      	b.n	800b044 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04a:	d04c      	beq.n	800b0e6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d128      	bne.n	800b0a4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d10a      	bne.n	800b06e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	2203      	movs	r2, #3
 800b05e:	9200      	str	r2, [sp, #0]
 800b060:	2200      	movs	r2, #0
 800b062:	2100      	movs	r1, #0
 800b064:	2001      	movs	r0, #1
 800b066:	f000 fbc1 	bl	800b7ec <xQueueGenericCreateStatic>
 800b06a:	6278      	str	r0, [r7, #36]	; 0x24
 800b06c:	e005      	b.n	800b07a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b06e:	2203      	movs	r2, #3
 800b070:	2100      	movs	r1, #0
 800b072:	2001      	movs	r0, #1
 800b074:	f000 fc3c 	bl	800b8f0 <xQueueGenericCreate>
 800b078:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d022      	beq.n	800b0c6 <osSemaphoreNew+0x10a>
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d01f      	beq.n	800b0c6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b086:	2300      	movs	r3, #0
 800b088:	2200      	movs	r2, #0
 800b08a:	2100      	movs	r1, #0
 800b08c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b08e:	f000 fdc1 	bl	800bc14 <xQueueGenericSend>
 800b092:	4603      	mov	r3, r0
 800b094:	2b01      	cmp	r3, #1
 800b096:	d016      	beq.n	800b0c6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800b098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b09a:	f001 fa77 	bl	800c58c <vQueueDelete>
            hSemaphore = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a2:	e010      	b.n	800b0c6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d108      	bne.n	800b0bc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f000 fd3c 	bl	800bb30 <xQueueCreateCountingSemaphoreStatic>
 800b0b8:	6278      	str	r0, [r7, #36]	; 0x24
 800b0ba:	e004      	b.n	800b0c6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 fd71 	bl	800bba6 <xQueueCreateCountingSemaphore>
 800b0c4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00c      	beq.n	800b0e6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <osSemaphoreNew+0x11e>
          name = attr->name;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	61fb      	str	r3, [r7, #28]
 800b0d8:	e001      	b.n	800b0de <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b0de:	69f9      	ldr	r1, [r7, #28]
 800b0e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0e2:	f001 fba1 	bl	800c828 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3728      	adds	r7, #40	; 0x28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	200007c4 	.word	0x200007c4

0800b0f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b102:	2300      	movs	r3, #0
 800b104:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d103      	bne.n	800b114 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b10c:	f06f 0303 	mvn.w	r3, #3
 800b110:	61fb      	str	r3, [r7, #28]
 800b112:	e04b      	b.n	800b1ac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b114:	f3ef 8305 	mrs	r3, IPSR
 800b118:	617b      	str	r3, [r7, #20]
  return(result);
 800b11a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10f      	bne.n	800b140 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b120:	f3ef 8310 	mrs	r3, PRIMASK
 800b124:	613b      	str	r3, [r7, #16]
  return(result);
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d105      	bne.n	800b138 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b12c:	f3ef 8311 	mrs	r3, BASEPRI
 800b130:	60fb      	str	r3, [r7, #12]
  return(result);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d026      	beq.n	800b186 <osSemaphoreAcquire+0x92>
 800b138:	4b1f      	ldr	r3, [pc, #124]	; (800b1b8 <osSemaphoreAcquire+0xc4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d122      	bne.n	800b186 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800b146:	f06f 0303 	mvn.w	r3, #3
 800b14a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b14c:	e02d      	b.n	800b1aa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	461a      	mov	r2, r3
 800b158:	2100      	movs	r1, #0
 800b15a:	69b8      	ldr	r0, [r7, #24]
 800b15c:	f001 f990 	bl	800c480 <xQueueReceiveFromISR>
 800b160:	4603      	mov	r3, r0
 800b162:	2b01      	cmp	r3, #1
 800b164:	d003      	beq.n	800b16e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b166:	f06f 0302 	mvn.w	r3, #2
 800b16a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b16c:	e01d      	b.n	800b1aa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d01a      	beq.n	800b1aa <osSemaphoreAcquire+0xb6>
 800b174:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <osSemaphoreAcquire+0xc8>)
 800b176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b184:	e011      	b.n	800b1aa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	69b8      	ldr	r0, [r7, #24]
 800b18a:	f001 f865 	bl	800c258 <xQueueSemaphoreTake>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b01      	cmp	r3, #1
 800b192:	d00b      	beq.n	800b1ac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b19a:	f06f 0301 	mvn.w	r3, #1
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e004      	b.n	800b1ac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b1a2:	f06f 0302 	mvn.w	r3, #2
 800b1a6:	61fb      	str	r3, [r7, #28]
 800b1a8:	e000      	b.n	800b1ac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b1aa:	bf00      	nop
      }
    }
  }

  return (stat);
 800b1ac:	69fb      	ldr	r3, [r7, #28]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3720      	adds	r7, #32
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	200007c4 	.word	0x200007c4
 800b1bc:	e000ed04 	.word	0xe000ed04

0800b1c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b088      	sub	sp, #32
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d103      	bne.n	800b1de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b1d6:	f06f 0303 	mvn.w	r3, #3
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	e03e      	b.n	800b25c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1de:	f3ef 8305 	mrs	r3, IPSR
 800b1e2:	617b      	str	r3, [r7, #20]
  return(result);
 800b1e4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10f      	bne.n	800b20a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ee:	613b      	str	r3, [r7, #16]
  return(result);
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d105      	bne.n	800b202 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b1f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b1fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01e      	beq.n	800b240 <osSemaphoreRelease+0x80>
 800b202:	4b19      	ldr	r3, [pc, #100]	; (800b268 <osSemaphoreRelease+0xa8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b02      	cmp	r3, #2
 800b208:	d11a      	bne.n	800b240 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4619      	mov	r1, r3
 800b214:	69b8      	ldr	r0, [r7, #24]
 800b216:	f000 fea3 	bl	800bf60 <xQueueGiveFromISR>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d003      	beq.n	800b228 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b220:	f06f 0302 	mvn.w	r3, #2
 800b224:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b226:	e018      	b.n	800b25a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d015      	beq.n	800b25a <osSemaphoreRelease+0x9a>
 800b22e:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <osSemaphoreRelease+0xac>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b23e:	e00c      	b.n	800b25a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	69b8      	ldr	r0, [r7, #24]
 800b248:	f000 fce4 	bl	800bc14 <xQueueGenericSend>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d004      	beq.n	800b25c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b252:	f06f 0302 	mvn.w	r3, #2
 800b256:	61fb      	str	r3, [r7, #28]
 800b258:	e000      	b.n	800b25c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b25a:	bf00      	nop
    }
  }

  return (stat);
 800b25c:	69fb      	ldr	r3, [r7, #28]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	200007c4 	.word	0x200007c4
 800b26c:	e000ed04 	.word	0xe000ed04

0800b270 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b270:	b580      	push	{r7, lr}
 800b272:	b08c      	sub	sp, #48	; 0x30
 800b274:	af02      	add	r7, sp, #8
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b280:	f3ef 8305 	mrs	r3, IPSR
 800b284:	61bb      	str	r3, [r7, #24]
  return(result);
 800b286:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d16f      	bne.n	800b36c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b28c:	f3ef 8310 	mrs	r3, PRIMASK
 800b290:	617b      	str	r3, [r7, #20]
  return(result);
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d105      	bne.n	800b2a4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b298:	f3ef 8311 	mrs	r3, BASEPRI
 800b29c:	613b      	str	r3, [r7, #16]
  return(result);
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <osMessageQueueNew+0x3c>
 800b2a4:	4b34      	ldr	r3, [pc, #208]	; (800b378 <osMessageQueueNew+0x108>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d05f      	beq.n	800b36c <osMessageQueueNew+0xfc>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d05c      	beq.n	800b36c <osMessageQueueNew+0xfc>
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d059      	beq.n	800b36c <osMessageQueueNew+0xfc>
    mem = -1;
 800b2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d029      	beq.n	800b318 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d012      	beq.n	800b2f2 <osMessageQueueNew+0x82>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	2b4f      	cmp	r3, #79	; 0x4f
 800b2d2:	d90e      	bls.n	800b2f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695a      	ldr	r2, [r3, #20]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	68b9      	ldr	r1, [r7, #8]
 800b2e4:	fb01 f303 	mul.w	r3, r1, r3
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d302      	bcc.n	800b2f2 <osMessageQueueNew+0x82>
        mem = 1;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	623b      	str	r3, [r7, #32]
 800b2f0:	e014      	b.n	800b31c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d110      	bne.n	800b31c <osMessageQueueNew+0xac>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10c      	bne.n	800b31c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b306:	2b00      	cmp	r3, #0
 800b308:	d108      	bne.n	800b31c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d104      	bne.n	800b31c <osMessageQueueNew+0xac>
          mem = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	623b      	str	r3, [r7, #32]
 800b316:	e001      	b.n	800b31c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d10b      	bne.n	800b33a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	691a      	ldr	r2, [r3, #16]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	2100      	movs	r1, #0
 800b32c:	9100      	str	r1, [sp, #0]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 fa5b 	bl	800b7ec <xQueueGenericCreateStatic>
 800b336:	6278      	str	r0, [r7, #36]	; 0x24
 800b338:	e008      	b.n	800b34c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d105      	bne.n	800b34c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b340:	2200      	movs	r2, #0
 800b342:	68b9      	ldr	r1, [r7, #8]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 fad3 	bl	800b8f0 <xQueueGenericCreate>
 800b34a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00c      	beq.n	800b36c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	e001      	b.n	800b364 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b364:	69f9      	ldr	r1, [r7, #28]
 800b366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b368:	f001 fa5e 	bl	800c828 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3728      	adds	r7, #40	; 0x28
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200007c4 	.word	0x200007c4

0800b37c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08a      	sub	sp, #40	; 0x28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	4613      	mov	r3, r2
 800b38a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b390:	2300      	movs	r3, #0
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b394:	f3ef 8305 	mrs	r3, IPSR
 800b398:	61fb      	str	r3, [r7, #28]
  return(result);
 800b39a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10f      	bne.n	800b3c0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3ac:	f3ef 8311 	mrs	r3, BASEPRI
 800b3b0:	617b      	str	r3, [r7, #20]
  return(result);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d02c      	beq.n	800b412 <osMessageQueuePut+0x96>
 800b3b8:	4b28      	ldr	r3, [pc, #160]	; (800b45c <osMessageQueuePut+0xe0>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d128      	bne.n	800b412 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <osMessageQueuePut+0x56>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <osMessageQueuePut+0x56>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800b3d2:	f06f 0303 	mvn.w	r3, #3
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3d8:	e039      	b.n	800b44e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b3de:	f107 0210 	add.w	r2, r7, #16
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	68b9      	ldr	r1, [r7, #8]
 800b3e6:	6a38      	ldr	r0, [r7, #32]
 800b3e8:	f000 fd1a 	bl	800be20 <xQueueGenericSendFromISR>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d003      	beq.n	800b3fa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800b3f2:	f06f 0302 	mvn.w	r3, #2
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3f8:	e029      	b.n	800b44e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d026      	beq.n	800b44e <osMessageQueuePut+0xd2>
 800b400:	4b17      	ldr	r3, [pc, #92]	; (800b460 <osMessageQueuePut+0xe4>)
 800b402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b410:	e01d      	b.n	800b44e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <osMessageQueuePut+0xa2>
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800b41e:	f06f 0303 	mvn.w	r3, #3
 800b422:	627b      	str	r3, [r7, #36]	; 0x24
 800b424:	e014      	b.n	800b450 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b426:	2300      	movs	r3, #0
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	6a38      	ldr	r0, [r7, #32]
 800b42e:	f000 fbf1 	bl	800bc14 <xQueueGenericSend>
 800b432:	4603      	mov	r3, r0
 800b434:	2b01      	cmp	r3, #1
 800b436:	d00b      	beq.n	800b450 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800b43e:	f06f 0301 	mvn.w	r3, #1
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
 800b444:	e004      	b.n	800b450 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800b446:	f06f 0302 	mvn.w	r3, #2
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
 800b44c:	e000      	b.n	800b450 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b44e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b452:	4618      	mov	r0, r3
 800b454:	3728      	adds	r7, #40	; 0x28
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200007c4 	.word	0x200007c4
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b464:	b580      	push	{r7, lr}
 800b466:	b08a      	sub	sp, #40	; 0x28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b476:	2300      	movs	r3, #0
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b47a:	f3ef 8305 	mrs	r3, IPSR
 800b47e:	61fb      	str	r3, [r7, #28]
  return(result);
 800b480:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10f      	bne.n	800b4a6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b486:	f3ef 8310 	mrs	r3, PRIMASK
 800b48a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d105      	bne.n	800b49e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b492:	f3ef 8311 	mrs	r3, BASEPRI
 800b496:	617b      	str	r3, [r7, #20]
  return(result);
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02c      	beq.n	800b4f8 <osMessageQueueGet+0x94>
 800b49e:	4b28      	ldr	r3, [pc, #160]	; (800b540 <osMessageQueueGet+0xdc>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d128      	bne.n	800b4f8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <osMessageQueueGet+0x54>
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <osMessageQueueGet+0x54>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b4b8:	f06f 0303 	mvn.w	r3, #3
 800b4bc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4be:	e038      	b.n	800b532 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b4c4:	f107 0310 	add.w	r3, r7, #16
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	68b9      	ldr	r1, [r7, #8]
 800b4cc:	6a38      	ldr	r0, [r7, #32]
 800b4ce:	f000 ffd7 	bl	800c480 <xQueueReceiveFromISR>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d003      	beq.n	800b4e0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b4d8:	f06f 0302 	mvn.w	r3, #2
 800b4dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4de:	e028      	b.n	800b532 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d025      	beq.n	800b532 <osMessageQueueGet+0xce>
 800b4e6:	4b17      	ldr	r3, [pc, #92]	; (800b544 <osMessageQueueGet+0xe0>)
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4f6:	e01c      	b.n	800b532 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <osMessageQueueGet+0xa0>
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b504:	f06f 0303 	mvn.w	r3, #3
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
 800b50a:	e013      	b.n	800b534 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	6a38      	ldr	r0, [r7, #32]
 800b512:	f000 fdbb 	bl	800c08c <xQueueReceive>
 800b516:	4603      	mov	r3, r0
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d00b      	beq.n	800b534 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b522:	f06f 0301 	mvn.w	r3, #1
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
 800b528:	e004      	b.n	800b534 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b52a:	f06f 0302 	mvn.w	r3, #2
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
 800b530:	e000      	b.n	800b534 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b532:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b536:	4618      	mov	r0, r3
 800b538:	3728      	adds	r7, #40	; 0x28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	200007c4 	.word	0x200007c4
 800b544:	e000ed04 	.word	0xe000ed04

0800b548 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	4a07      	ldr	r2, [pc, #28]	; (800b574 <vApplicationGetIdleTaskMemory+0x2c>)
 800b558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	4a06      	ldr	r2, [pc, #24]	; (800b578 <vApplicationGetIdleTaskMemory+0x30>)
 800b55e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2280      	movs	r2, #128	; 0x80
 800b564:	601a      	str	r2, [r3, #0]
}
 800b566:	bf00      	nop
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	200007c8 	.word	0x200007c8
 800b578:	20000884 	.word	0x20000884

0800b57c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4a07      	ldr	r2, [pc, #28]	; (800b5a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b58c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	4a06      	ldr	r2, [pc, #24]	; (800b5ac <vApplicationGetTimerTaskMemory+0x30>)
 800b592:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b59a:	601a      	str	r2, [r3, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	20000a84 	.word	0x20000a84
 800b5ac:	20000b40 	.word	0x20000b40

0800b5b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f103 0208 	add.w	r2, r3, #8
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f103 0208 	add.w	r2, r3, #8
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f103 0208 	add.w	r2, r3, #8
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	689a      	ldr	r2, [r3, #8]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	601a      	str	r2, [r3, #0]
}
 800b646:	bf00      	nop
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b668:	d103      	bne.n	800b672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e00c      	b.n	800b68c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3308      	adds	r3, #8
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	e002      	b.n	800b680 <vListInsert+0x2e>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d2f6      	bcs.n	800b67a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	6892      	ldr	r2, [r2, #8]
 800b6da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6852      	ldr	r2, [r2, #4]
 800b6e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d103      	bne.n	800b6f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1e5a      	subs	r2, r3, #1
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10c      	bne.n	800b746 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	b672      	cpsid	i
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	b662      	cpsie	i
 800b740:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b742:	bf00      	nop
 800b744:	e7fe      	b.n	800b744 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b746:	f002 ff19 	bl	800e57c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b752:	68f9      	ldr	r1, [r7, #12]
 800b754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	441a      	add	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b776:	3b01      	subs	r3, #1
 800b778:	68f9      	ldr	r1, [r7, #12]
 800b77a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b77c:	fb01 f303 	mul.w	r3, r1, r3
 800b780:	441a      	add	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	22ff      	movs	r2, #255	; 0xff
 800b78a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	22ff      	movs	r2, #255	; 0xff
 800b792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d114      	bne.n	800b7c6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d01a      	beq.n	800b7da <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3310      	adds	r3, #16
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 fdf9 	bl	800d3a0 <xTaskRemoveFromEventList>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d012      	beq.n	800b7da <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7b4:	4b0c      	ldr	r3, [pc, #48]	; (800b7e8 <xQueueGenericReset+0xd0>)
 800b7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	e009      	b.n	800b7da <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3310      	adds	r3, #16
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7ff fef0 	bl	800b5b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3324      	adds	r3, #36	; 0x24
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff feeb 	bl	800b5b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7da:	f002 ff03 	bl	800e5e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7de:	2301      	movs	r3, #1
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b08e      	sub	sp, #56	; 0x38
 800b7f0:	af02      	add	r7, sp, #8
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10c      	bne.n	800b81a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	b672      	cpsid	i
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	b662      	cpsie	i
 800b814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10c      	bne.n	800b83a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	b672      	cpsid	i
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	b662      	cpsie	i
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <xQueueGenericCreateStatic+0x5a>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d001      	beq.n	800b84a <xQueueGenericCreateStatic+0x5e>
 800b846:	2301      	movs	r3, #1
 800b848:	e000      	b.n	800b84c <xQueueGenericCreateStatic+0x60>
 800b84a:	2300      	movs	r3, #0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10c      	bne.n	800b86a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	b672      	cpsid	i
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	b662      	cpsie	i
 800b864:	623b      	str	r3, [r7, #32]
}
 800b866:	bf00      	nop
 800b868:	e7fe      	b.n	800b868 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d102      	bne.n	800b876 <xQueueGenericCreateStatic+0x8a>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <xQueueGenericCreateStatic+0x8e>
 800b876:	2301      	movs	r3, #1
 800b878:	e000      	b.n	800b87c <xQueueGenericCreateStatic+0x90>
 800b87a:	2300      	movs	r3, #0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10c      	bne.n	800b89a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	b672      	cpsid	i
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	b662      	cpsie	i
 800b894:	61fb      	str	r3, [r7, #28]
}
 800b896:	bf00      	nop
 800b898:	e7fe      	b.n	800b898 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b89a:	2350      	movs	r3, #80	; 0x50
 800b89c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b50      	cmp	r3, #80	; 0x50
 800b8a2:	d00c      	beq.n	800b8be <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	b672      	cpsid	i
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	b662      	cpsie	i
 800b8b8:	61bb      	str	r3, [r7, #24]
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00d      	beq.n	800b8e6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	68b9      	ldr	r1, [r7, #8]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 f847 	bl	800b974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3730      	adds	r7, #48	; 0x30
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08a      	sub	sp, #40	; 0x28
 800b8f4:	af02      	add	r7, sp, #8
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10c      	bne.n	800b91e <xQueueGenericCreate+0x2e>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	b672      	cpsid	i
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	b662      	cpsie	i
 800b918:	613b      	str	r3, [r7, #16]
}
 800b91a:	bf00      	nop
 800b91c:	e7fe      	b.n	800b91c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b924:	2300      	movs	r3, #0
 800b926:	61fb      	str	r3, [r7, #28]
 800b928:	e004      	b.n	800b934 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	fb02 f303 	mul.w	r3, r2, r3
 800b932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	3350      	adds	r3, #80	; 0x50
 800b938:	4618      	mov	r0, r3
 800b93a:	f002 ff4b 	bl	800e7d4 <pvPortMalloc>
 800b93e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d011      	beq.n	800b96a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	3350      	adds	r3, #80	; 0x50
 800b94e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b958:	79fa      	ldrb	r2, [r7, #7]
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	4613      	mov	r3, r2
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 f805 	bl	800b974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b96a:	69bb      	ldr	r3, [r7, #24]
	}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3720      	adds	r7, #32
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e002      	b.n	800b996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	69b8      	ldr	r0, [r7, #24]
 800b9a6:	f7ff feb7 	bl	800b718 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	78fa      	ldrb	r2, [r7, #3]
 800b9ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9b2:	bf00      	nop
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b082      	sub	sp, #8
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00e      	beq.n	800b9e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2100      	movs	r1, #0
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f917 	bl	800bc14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	617b      	str	r3, [r7, #20]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba00:	79fb      	ldrb	r3, [r7, #7]
 800ba02:	461a      	mov	r2, r3
 800ba04:	6939      	ldr	r1, [r7, #16]
 800ba06:	6978      	ldr	r0, [r7, #20]
 800ba08:	f7ff ff72 	bl	800b8f0 <xQueueGenericCreate>
 800ba0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f7ff ffd3 	bl	800b9ba <prvInitialiseMutex>

		return xNewQueue;
 800ba14:	68fb      	ldr	r3, [r7, #12]
	}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b088      	sub	sp, #32
 800ba22:	af02      	add	r7, sp, #8
 800ba24:	4603      	mov	r3, r0
 800ba26:	6039      	str	r1, [r7, #0]
 800ba28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba32:	79fb      	ldrb	r3, [r7, #7]
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	6939      	ldr	r1, [r7, #16]
 800ba3c:	6978      	ldr	r0, [r7, #20]
 800ba3e:	f7ff fed5 	bl	800b7ec <xQueueGenericCreateStatic>
 800ba42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f7ff ffb8 	bl	800b9ba <prvInitialiseMutex>

		return xNewQueue;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ba54:	b590      	push	{r4, r7, lr}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10c      	bne.n	800ba80 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	b672      	cpsid	i
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	b662      	cpsie	i
 800ba7a:	60fb      	str	r3, [r7, #12]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	689c      	ldr	r4, [r3, #8]
 800ba84:	f001 fe58 	bl	800d738 <xTaskGetCurrentTaskHandle>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	429c      	cmp	r4, r3
 800ba8c:	d111      	bne.n	800bab2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d105      	bne.n	800baac <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800baa0:	2300      	movs	r3, #0
 800baa2:	2200      	movs	r2, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	6938      	ldr	r0, [r7, #16]
 800baa8:	f000 f8b4 	bl	800bc14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800baac:	2301      	movs	r3, #1
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	e001      	b.n	800bab6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bab6:	697b      	ldr	r3, [r7, #20]
	}
 800bab8:	4618      	mov	r0, r3
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}

0800bac0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bac0:	b590      	push	{r4, r7, lr}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10c      	bne.n	800baee <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	b672      	cpsid	i
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	b662      	cpsie	i
 800bae8:	60fb      	str	r3, [r7, #12]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	689c      	ldr	r4, [r3, #8]
 800baf2:	f001 fe21 	bl	800d738 <xTaskGetCurrentTaskHandle>
 800baf6:	4603      	mov	r3, r0
 800baf8:	429c      	cmp	r4, r3
 800bafa:	d107      	bne.n	800bb0c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bb06:	2301      	movs	r3, #1
 800bb08:	617b      	str	r3, [r7, #20]
 800bb0a:	e00c      	b.n	800bb26 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6938      	ldr	r0, [r7, #16]
 800bb10:	f000 fba2 	bl	800c258 <xQueueSemaphoreTake>
 800bb14:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bb26:	697b      	ldr	r3, [r7, #20]
	}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd90      	pop	{r4, r7, pc}

0800bb30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08a      	sub	sp, #40	; 0x28
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10c      	bne.n	800bb5c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	b672      	cpsid	i
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	b662      	cpsie	i
 800bb56:	61bb      	str	r3, [r7, #24]
}
 800bb58:	bf00      	nop
 800bb5a:	e7fe      	b.n	800bb5a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d90c      	bls.n	800bb7e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb68:	b672      	cpsid	i
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	b662      	cpsie	i
 800bb78:	617b      	str	r3, [r7, #20]
}
 800bb7a:	bf00      	nop
 800bb7c:	e7fe      	b.n	800bb7c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb7e:	2302      	movs	r3, #2
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	2100      	movs	r1, #0
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff fe2f 	bl	800b7ec <xQueueGenericCreateStatic>
 800bb8e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
	}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10c      	bne.n	800bbd0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	b672      	cpsid	i
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	b662      	cpsie	i
 800bbca:	613b      	str	r3, [r7, #16]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d90c      	bls.n	800bbf2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	b672      	cpsid	i
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	b662      	cpsie	i
 800bbec:	60fb      	str	r3, [r7, #12]
}
 800bbee:	bf00      	nop
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff fe7a 	bl	800b8f0 <xQueueGenericCreate>
 800bbfc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bc0a:	697b      	ldr	r3, [r7, #20]
	}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08e      	sub	sp, #56	; 0x38
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc22:	2300      	movs	r3, #0
 800bc24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10c      	bne.n	800bc4a <xQueueGenericSend+0x36>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	b672      	cpsid	i
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	b662      	cpsie	i
 800bc44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d103      	bne.n	800bc58 <xQueueGenericSend+0x44>
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <xQueueGenericSend+0x48>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e000      	b.n	800bc5e <xQueueGenericSend+0x4a>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10c      	bne.n	800bc7c <xQueueGenericSend+0x68>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	b672      	cpsid	i
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	b662      	cpsie	i
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc78:	bf00      	nop
 800bc7a:	e7fe      	b.n	800bc7a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d103      	bne.n	800bc8a <xQueueGenericSend+0x76>
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d101      	bne.n	800bc8e <xQueueGenericSend+0x7a>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e000      	b.n	800bc90 <xQueueGenericSend+0x7c>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10c      	bne.n	800bcae <xQueueGenericSend+0x9a>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	b672      	cpsid	i
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	b662      	cpsie	i
 800bca8:	623b      	str	r3, [r7, #32]
}
 800bcaa:	bf00      	nop
 800bcac:	e7fe      	b.n	800bcac <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcae:	f001 fd53 	bl	800d758 <xTaskGetSchedulerState>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <xQueueGenericSend+0xaa>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <xQueueGenericSend+0xae>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e000      	b.n	800bcc4 <xQueueGenericSend+0xb0>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10c      	bne.n	800bce2 <xQueueGenericSend+0xce>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	b672      	cpsid	i
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	b662      	cpsie	i
 800bcdc:	61fb      	str	r3, [r7, #28]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bce2:	f002 fc4b 	bl	800e57c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d302      	bcc.n	800bcf8 <xQueueGenericSend+0xe4>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d129      	bne.n	800bd4c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	68b9      	ldr	r1, [r7, #8]
 800bcfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcfe:	f000 fc82 	bl	800c606 <prvCopyDataToQueue>
 800bd02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d010      	beq.n	800bd2e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	3324      	adds	r3, #36	; 0x24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f001 fb45 	bl	800d3a0 <xTaskRemoveFromEventList>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d013      	beq.n	800bd44 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd1c:	4b3f      	ldr	r3, [pc, #252]	; (800be1c <xQueueGenericSend+0x208>)
 800bd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	e00a      	b.n	800bd44 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d007      	beq.n	800bd44 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd34:	4b39      	ldr	r3, [pc, #228]	; (800be1c <xQueueGenericSend+0x208>)
 800bd36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd44:	f002 fc4e 	bl	800e5e4 <vPortExitCritical>
				return pdPASS;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e063      	b.n	800be14 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d103      	bne.n	800bd5a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd52:	f002 fc47 	bl	800e5e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e05c      	b.n	800be14 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d106      	bne.n	800bd6e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd60:	f107 0314 	add.w	r3, r7, #20
 800bd64:	4618      	mov	r0, r3
 800bd66:	f001 fb81 	bl	800d46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd6e:	f002 fc39 	bl	800e5e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd72:	f001 f8cf 	bl	800cf14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd76:	f002 fc01 	bl	800e57c <vPortEnterCritical>
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd80:	b25b      	sxtb	r3, r3
 800bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd86:	d103      	bne.n	800bd90 <xQueueGenericSend+0x17c>
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd96:	b25b      	sxtb	r3, r3
 800bd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9c:	d103      	bne.n	800bda6 <xQueueGenericSend+0x192>
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bda6:	f002 fc1d 	bl	800e5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdaa:	1d3a      	adds	r2, r7, #4
 800bdac:	f107 0314 	add.w	r3, r7, #20
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fb70 	bl	800d498 <xTaskCheckForTimeOut>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d124      	bne.n	800be08 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdc0:	f000 fd19 	bl	800c7f6 <prvIsQueueFull>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d018      	beq.n	800bdfc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	3310      	adds	r3, #16
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f001 fa90 	bl	800d2f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdda:	f000 fca4 	bl	800c726 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdde:	f001 f8a7 	bl	800cf30 <xTaskResumeAll>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f47f af7c 	bne.w	800bce2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bdea:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <xQueueGenericSend+0x208>)
 800bdec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf0:	601a      	str	r2, [r3, #0]
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	e772      	b.n	800bce2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bdfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfe:	f000 fc92 	bl	800c726 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be02:	f001 f895 	bl	800cf30 <xTaskResumeAll>
 800be06:	e76c      	b.n	800bce2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be0a:	f000 fc8c 	bl	800c726 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be0e:	f001 f88f 	bl	800cf30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be14:	4618      	mov	r0, r3
 800be16:	3738      	adds	r7, #56	; 0x38
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	e000ed04 	.word	0xe000ed04

0800be20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	; 0x38
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10c      	bne.n	800be52 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	b672      	cpsid	i
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	b662      	cpsie	i
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d103      	bne.n	800be60 <xQueueGenericSendFromISR+0x40>
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <xQueueGenericSendFromISR+0x44>
 800be60:	2301      	movs	r3, #1
 800be62:	e000      	b.n	800be66 <xQueueGenericSendFromISR+0x46>
 800be64:	2300      	movs	r3, #0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10c      	bne.n	800be84 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	b672      	cpsid	i
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	b662      	cpsie	i
 800be7e:	623b      	str	r3, [r7, #32]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b02      	cmp	r3, #2
 800be88:	d103      	bne.n	800be92 <xQueueGenericSendFromISR+0x72>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <xQueueGenericSendFromISR+0x76>
 800be92:	2301      	movs	r3, #1
 800be94:	e000      	b.n	800be98 <xQueueGenericSendFromISR+0x78>
 800be96:	2300      	movs	r3, #0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10c      	bne.n	800beb6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	b672      	cpsid	i
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	b662      	cpsie	i
 800beb0:	61fb      	str	r3, [r7, #28]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800beb6:	f002 fc49 	bl	800e74c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800beba:	f3ef 8211 	mrs	r2, BASEPRI
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	b672      	cpsid	i
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	b662      	cpsie	i
 800bed2:	61ba      	str	r2, [r7, #24]
 800bed4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bed6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d302      	bcc.n	800beec <xQueueGenericSendFromISR+0xcc>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d12c      	bne.n	800bf46 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	68b9      	ldr	r1, [r7, #8]
 800befa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800befc:	f000 fb83 	bl	800c606 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf08:	d112      	bne.n	800bf30 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d016      	beq.n	800bf40 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	3324      	adds	r3, #36	; 0x24
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 fa42 	bl	800d3a0 <xTaskRemoveFromEventList>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e007      	b.n	800bf40 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	b25a      	sxtb	r2, r3
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf40:	2301      	movs	r3, #1
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bf44:	e001      	b.n	800bf4a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	637b      	str	r3, [r7, #52]	; 0x34
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3738      	adds	r7, #56	; 0x38
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08e      	sub	sp, #56	; 0x38
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10c      	bne.n	800bf8e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	b672      	cpsid	i
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	b662      	cpsie	i
 800bf88:	623b      	str	r3, [r7, #32]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00c      	beq.n	800bfb0 <xQueueGiveFromISR+0x50>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	b672      	cpsid	i
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	b662      	cpsie	i
 800bfaa:	61fb      	str	r3, [r7, #28]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d103      	bne.n	800bfc0 <xQueueGiveFromISR+0x60>
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <xQueueGiveFromISR+0x64>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e000      	b.n	800bfc6 <xQueueGiveFromISR+0x66>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10c      	bne.n	800bfe4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	b672      	cpsid	i
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	b662      	cpsie	i
 800bfde:	61bb      	str	r3, [r7, #24]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfe4:	f002 fbb2 	bl	800e74c <vPortValidateInterruptPriority>
	__asm volatile
 800bfe8:	f3ef 8211 	mrs	r2, BASEPRI
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	b672      	cpsid	i
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	b662      	cpsie	i
 800c000:	617a      	str	r2, [r7, #20]
 800c002:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c004:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c006:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c014:	429a      	cmp	r2, r3
 800c016:	d22b      	bcs.n	800c070 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c02a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d112      	bne.n	800c05a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d016      	beq.n	800c06a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	3324      	adds	r3, #36	; 0x24
 800c040:	4618      	mov	r0, r3
 800c042:	f001 f9ad 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00e      	beq.n	800c06a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00b      	beq.n	800c06a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2201      	movs	r2, #1
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	e007      	b.n	800c06a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c05e:	3301      	adds	r3, #1
 800c060:	b2db      	uxtb	r3, r3
 800c062:	b25a      	sxtb	r2, r3
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c06a:	2301      	movs	r3, #1
 800c06c:	637b      	str	r3, [r7, #52]	; 0x34
 800c06e:	e001      	b.n	800c074 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c070:	2300      	movs	r3, #0
 800c072:	637b      	str	r3, [r7, #52]	; 0x34
 800c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c076:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f383 8811 	msr	BASEPRI, r3
}
 800c07e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c082:	4618      	mov	r0, r3
 800c084:	3738      	adds	r7, #56	; 0x38
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b08c      	sub	sp, #48	; 0x30
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c098:	2300      	movs	r3, #0
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10c      	bne.n	800c0c0 <xQueueReceive+0x34>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	b672      	cpsid	i
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	b662      	cpsie	i
 800c0ba:	623b      	str	r3, [r7, #32]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <xQueueReceive+0x42>
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <xQueueReceive+0x46>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e000      	b.n	800c0d4 <xQueueReceive+0x48>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10c      	bne.n	800c0f2 <xQueueReceive+0x66>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	b672      	cpsid	i
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	b662      	cpsie	i
 800c0ec:	61fb      	str	r3, [r7, #28]
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0f2:	f001 fb31 	bl	800d758 <xTaskGetSchedulerState>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <xQueueReceive+0x76>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <xQueueReceive+0x7a>
 800c102:	2301      	movs	r3, #1
 800c104:	e000      	b.n	800c108 <xQueueReceive+0x7c>
 800c106:	2300      	movs	r3, #0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10c      	bne.n	800c126 <xQueueReceive+0x9a>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	b672      	cpsid	i
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	b662      	cpsie	i
 800c120:	61bb      	str	r3, [r7, #24]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c126:	f002 fa29 	bl	800e57c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	2b00      	cmp	r3, #0
 800c134:	d01f      	beq.n	800c176 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c136:	68b9      	ldr	r1, [r7, #8]
 800c138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13a:	f000 face 	bl	800c6da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	1e5a      	subs	r2, r3, #1
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00f      	beq.n	800c16e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	3310      	adds	r3, #16
 800c152:	4618      	mov	r0, r3
 800c154:	f001 f924 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d007      	beq.n	800c16e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c15e:	4b3d      	ldr	r3, [pc, #244]	; (800c254 <xQueueReceive+0x1c8>)
 800c160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c16e:	f002 fa39 	bl	800e5e4 <vPortExitCritical>
				return pdPASS;
 800c172:	2301      	movs	r3, #1
 800c174:	e069      	b.n	800c24a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d103      	bne.n	800c184 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c17c:	f002 fa32 	bl	800e5e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c180:	2300      	movs	r3, #0
 800c182:	e062      	b.n	800c24a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c18a:	f107 0310 	add.w	r3, r7, #16
 800c18e:	4618      	mov	r0, r3
 800c190:	f001 f96c 	bl	800d46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c194:	2301      	movs	r3, #1
 800c196:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c198:	f002 fa24 	bl	800e5e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c19c:	f000 feba 	bl	800cf14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1a0:	f002 f9ec 	bl	800e57c <vPortEnterCritical>
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1aa:	b25b      	sxtb	r3, r3
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b0:	d103      	bne.n	800c1ba <xQueueReceive+0x12e>
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c6:	d103      	bne.n	800c1d0 <xQueueReceive+0x144>
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d0:	f002 fa08 	bl	800e5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1d4:	1d3a      	adds	r2, r7, #4
 800c1d6:	f107 0310 	add.w	r3, r7, #16
 800c1da:	4611      	mov	r1, r2
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f001 f95b 	bl	800d498 <xTaskCheckForTimeOut>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d123      	bne.n	800c230 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ea:	f000 faee 	bl	800c7ca <prvIsQueueEmpty>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d017      	beq.n	800c224 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	3324      	adds	r3, #36	; 0x24
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 f87b 	bl	800d2f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c204:	f000 fa8f 	bl	800c726 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c208:	f000 fe92 	bl	800cf30 <xTaskResumeAll>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d189      	bne.n	800c126 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c212:	4b10      	ldr	r3, [pc, #64]	; (800c254 <xQueueReceive+0x1c8>)
 800c214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	e780      	b.n	800c126 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c226:	f000 fa7e 	bl	800c726 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c22a:	f000 fe81 	bl	800cf30 <xTaskResumeAll>
 800c22e:	e77a      	b.n	800c126 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c232:	f000 fa78 	bl	800c726 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c236:	f000 fe7b 	bl	800cf30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c23c:	f000 fac5 	bl	800c7ca <prvIsQueueEmpty>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	f43f af6f 	beq.w	800c126 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3730      	adds	r7, #48	; 0x30
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	e000ed04 	.word	0xe000ed04

0800c258 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08e      	sub	sp, #56	; 0x38
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c262:	2300      	movs	r3, #0
 800c264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c26a:	2300      	movs	r3, #0
 800c26c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10c      	bne.n	800c28e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	b672      	cpsid	i
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	b662      	cpsie	i
 800c288:	623b      	str	r3, [r7, #32]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00c      	beq.n	800c2b0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29a:	b672      	cpsid	i
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	b662      	cpsie	i
 800c2aa:	61fb      	str	r3, [r7, #28]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2b0:	f001 fa52 	bl	800d758 <xTaskGetSchedulerState>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d102      	bne.n	800c2c0 <xQueueSemaphoreTake+0x68>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <xQueueSemaphoreTake+0x6c>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e000      	b.n	800c2c6 <xQueueSemaphoreTake+0x6e>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10c      	bne.n	800c2e4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	b672      	cpsid	i
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	b662      	cpsie	i
 800c2de:	61bb      	str	r3, [r7, #24]
}
 800c2e0:	bf00      	nop
 800c2e2:	e7fe      	b.n	800c2e2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2e4:	f002 f94a 	bl	800e57c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d024      	beq.n	800c33e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	1e5a      	subs	r2, r3, #1
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d104      	bne.n	800c30e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c304:	f001 fba6 	bl	800da54 <pvTaskIncrementMutexHeldCount>
 800c308:	4602      	mov	r2, r0
 800c30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00f      	beq.n	800c336 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	3310      	adds	r3, #16
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 f840 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d007      	beq.n	800c336 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c326:	4b55      	ldr	r3, [pc, #340]	; (800c47c <xQueueSemaphoreTake+0x224>)
 800c328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c336:	f002 f955 	bl	800e5e4 <vPortExitCritical>
				return pdPASS;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e099      	b.n	800c472 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d113      	bne.n	800c36c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00c      	beq.n	800c364 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	b672      	cpsid	i
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	b662      	cpsie	i
 800c35e:	617b      	str	r3, [r7, #20]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c364:	f002 f93e 	bl	800e5e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c368:	2300      	movs	r3, #0
 800c36a:	e082      	b.n	800c472 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d106      	bne.n	800c380 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c372:	f107 030c 	add.w	r3, r7, #12
 800c376:	4618      	mov	r0, r3
 800c378:	f001 f878 	bl	800d46c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c380:	f002 f930 	bl	800e5e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c384:	f000 fdc6 	bl	800cf14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c388:	f002 f8f8 	bl	800e57c <vPortEnterCritical>
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c392:	b25b      	sxtb	r3, r3
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c398:	d103      	bne.n	800c3a2 <xQueueSemaphoreTake+0x14a>
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3a8:	b25b      	sxtb	r3, r3
 800c3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ae:	d103      	bne.n	800c3b8 <xQueueSemaphoreTake+0x160>
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3b8:	f002 f914 	bl	800e5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3bc:	463a      	mov	r2, r7
 800c3be:	f107 030c 	add.w	r3, r7, #12
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f001 f867 	bl	800d498 <xTaskCheckForTimeOut>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d132      	bne.n	800c436 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3d2:	f000 f9fa 	bl	800c7ca <prvIsQueueEmpty>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d026      	beq.n	800c42a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d109      	bne.n	800c3f8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c3e4:	f002 f8ca 	bl	800e57c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f001 f9d1 	bl	800d794 <xTaskPriorityInherit>
 800c3f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c3f4:	f002 f8f6 	bl	800e5e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	3324      	adds	r3, #36	; 0x24
 800c3fc:	683a      	ldr	r2, [r7, #0]
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f000 ff79 	bl	800d2f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c408:	f000 f98d 	bl	800c726 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c40c:	f000 fd90 	bl	800cf30 <xTaskResumeAll>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	f47f af66 	bne.w	800c2e4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c418:	4b18      	ldr	r3, [pc, #96]	; (800c47c <xQueueSemaphoreTake+0x224>)
 800c41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	e75c      	b.n	800c2e4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c42c:	f000 f97b 	bl	800c726 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c430:	f000 fd7e 	bl	800cf30 <xTaskResumeAll>
 800c434:	e756      	b.n	800c2e4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c438:	f000 f975 	bl	800c726 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c43c:	f000 fd78 	bl	800cf30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c442:	f000 f9c2 	bl	800c7ca <prvIsQueueEmpty>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f43f af4b 	beq.w	800c2e4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00d      	beq.n	800c470 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c454:	f002 f892 	bl	800e57c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c45a:	f000 f8bc 	bl	800c5d6 <prvGetDisinheritPriorityAfterTimeout>
 800c45e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c466:	4618      	mov	r0, r3
 800c468:	f001 fa6e 	bl	800d948 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c46c:	f002 f8ba 	bl	800e5e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c472:	4618      	mov	r0, r3
 800c474:	3738      	adds	r7, #56	; 0x38
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	e000ed04 	.word	0xe000ed04

0800c480 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b08e      	sub	sp, #56	; 0x38
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10c      	bne.n	800c4b0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	b672      	cpsid	i
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	b662      	cpsie	i
 800c4aa:	623b      	str	r3, [r7, #32]
}
 800c4ac:	bf00      	nop
 800c4ae:	e7fe      	b.n	800c4ae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d103      	bne.n	800c4be <xQueueReceiveFromISR+0x3e>
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <xQueueReceiveFromISR+0x42>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e000      	b.n	800c4c4 <xQueueReceiveFromISR+0x44>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10c      	bne.n	800c4e2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	b672      	cpsid	i
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	b662      	cpsie	i
 800c4dc:	61fb      	str	r3, [r7, #28]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4e2:	f002 f933 	bl	800e74c <vPortValidateInterruptPriority>
	__asm volatile
 800c4e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	b672      	cpsid	i
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	b662      	cpsie	i
 800c4fe:	61ba      	str	r2, [r7, #24]
 800c500:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c502:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c504:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d02f      	beq.n	800c572 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c520:	f000 f8db 	bl	800c6da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	1e5a      	subs	r2, r3, #1
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c52c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c534:	d112      	bne.n	800c55c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d016      	beq.n	800c56c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	3310      	adds	r3, #16
 800c542:	4618      	mov	r0, r3
 800c544:	f000 ff2c 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00e      	beq.n	800c56c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00b      	beq.n	800c56c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	e007      	b.n	800c56c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c560:	3301      	adds	r3, #1
 800c562:	b2db      	uxtb	r3, r3
 800c564:	b25a      	sxtb	r2, r3
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c56c:	2301      	movs	r3, #1
 800c56e:	637b      	str	r3, [r7, #52]	; 0x34
 800c570:	e001      	b.n	800c576 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800c572:	2300      	movs	r3, #0
 800c574:	637b      	str	r3, [r7, #52]	; 0x34
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	f383 8811 	msr	BASEPRI, r3
}
 800c580:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c584:	4618      	mov	r0, r3
 800c586:	3738      	adds	r7, #56	; 0x38
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10c      	bne.n	800c5b8 <vQueueDelete+0x2c>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a2:	b672      	cpsid	i
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	b662      	cpsie	i
 800c5b2:	60bb      	str	r3, [r7, #8]
}
 800c5b4:	bf00      	nop
 800c5b6:	e7fe      	b.n	800c5b6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 f95f 	bl	800c87c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d102      	bne.n	800c5ce <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f002 f9cd 	bl	800e968 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d006      	beq.n	800c5f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c5f0:	60fb      	str	r3, [r7, #12]
 800c5f2:	e001      	b.n	800c5f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
	}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b086      	sub	sp, #24
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	60b9      	str	r1, [r7, #8]
 800c610:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c612:	2300      	movs	r3, #0
 800c614:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10d      	bne.n	800c640 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d14d      	bne.n	800c6c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	4618      	mov	r0, r3
 800c632:	f001 f917 	bl	800d864 <xTaskPriorityDisinherit>
 800c636:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	609a      	str	r2, [r3, #8]
 800c63e:	e043      	b.n	800c6c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d119      	bne.n	800c67a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6858      	ldr	r0, [r3, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64e:	461a      	mov	r2, r3
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	f002 fad3 	bl	800ebfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	685a      	ldr	r2, [r3, #4]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	441a      	add	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d32b      	bcc.n	800c6c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	605a      	str	r2, [r3, #4]
 800c678:	e026      	b.n	800c6c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	68d8      	ldr	r0, [r3, #12]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c682:	461a      	mov	r2, r3
 800c684:	68b9      	ldr	r1, [r7, #8]
 800c686:	f002 fab9 	bl	800ebfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c692:	425b      	negs	r3, r3
 800c694:	441a      	add	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	68da      	ldr	r2, [r3, #12]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d207      	bcs.n	800c6b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ae:	425b      	negs	r3, r3
 800c6b0:	441a      	add	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d105      	bne.n	800c6c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c6d0:	697b      	ldr	r3, [r7, #20]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d018      	beq.n	800c71e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68da      	ldr	r2, [r3, #12]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f4:	441a      	add	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68da      	ldr	r2, [r3, #12]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	429a      	cmp	r2, r3
 800c704:	d303      	bcc.n	800c70e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68d9      	ldr	r1, [r3, #12]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c716:	461a      	mov	r2, r3
 800c718:	6838      	ldr	r0, [r7, #0]
 800c71a:	f002 fa6f 	bl	800ebfc <memcpy>
	}
}
 800c71e:	bf00      	nop
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c72e:	f001 ff25 	bl	800e57c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c738:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c73a:	e011      	b.n	800c760 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c740:	2b00      	cmp	r3, #0
 800c742:	d012      	beq.n	800c76a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3324      	adds	r3, #36	; 0x24
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fe29 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c754:	f000 ff06 	bl	800d564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c764:	2b00      	cmp	r3, #0
 800c766:	dce9      	bgt.n	800c73c <prvUnlockQueue+0x16>
 800c768:	e000      	b.n	800c76c <prvUnlockQueue+0x46>
					break;
 800c76a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	22ff      	movs	r2, #255	; 0xff
 800c770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c774:	f001 ff36 	bl	800e5e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c778:	f001 ff00 	bl	800e57c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c782:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c784:	e011      	b.n	800c7aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d012      	beq.n	800c7b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3310      	adds	r3, #16
 800c792:	4618      	mov	r0, r3
 800c794:	f000 fe04 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c79e:	f000 fee1 	bl	800d564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	dce9      	bgt.n	800c786 <prvUnlockQueue+0x60>
 800c7b2:	e000      	b.n	800c7b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	22ff      	movs	r2, #255	; 0xff
 800c7ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c7be:	f001 ff11 	bl	800e5e4 <vPortExitCritical>
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b084      	sub	sp, #16
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7d2:	f001 fed3 	bl	800e57c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	e001      	b.n	800c7e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7e8:	f001 fefc 	bl	800e5e4 <vPortExitCritical>

	return xReturn;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7fe:	f001 febd 	bl	800e57c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d102      	bne.n	800c814 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c80e:	2301      	movs	r3, #1
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e001      	b.n	800c818 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c818:	f001 fee4 	bl	800e5e4 <vPortExitCritical>

	return xReturn;
 800c81c:	68fb      	ldr	r3, [r7, #12]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c832:	2300      	movs	r3, #0
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	e014      	b.n	800c862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c838:	4a0f      	ldr	r2, [pc, #60]	; (800c878 <vQueueAddToRegistry+0x50>)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10b      	bne.n	800c85c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c844:	490c      	ldr	r1, [pc, #48]	; (800c878 <vQueueAddToRegistry+0x50>)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c84e:	4a0a      	ldr	r2, [pc, #40]	; (800c878 <vQueueAddToRegistry+0x50>)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	4413      	add	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c85a:	e006      	b.n	800c86a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3301      	adds	r3, #1
 800c860:	60fb      	str	r3, [r7, #12]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b07      	cmp	r3, #7
 800c866:	d9e7      	bls.n	800c838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	20000f40 	.word	0x20000f40

0800c87c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e016      	b.n	800c8b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c88a:	4a10      	ldr	r2, [pc, #64]	; (800c8cc <vQueueUnregisterQueue+0x50>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	4413      	add	r3, r2
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	429a      	cmp	r2, r3
 800c898:	d10b      	bne.n	800c8b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c89a:	4a0c      	ldr	r2, [pc, #48]	; (800c8cc <vQueueUnregisterQueue+0x50>)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2100      	movs	r1, #0
 800c8a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c8a4:	4a09      	ldr	r2, [pc, #36]	; (800c8cc <vQueueUnregisterQueue+0x50>)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	4413      	add	r3, r2
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	605a      	str	r2, [r3, #4]
				break;
 800c8b0:	e006      	b.n	800c8c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2b07      	cmp	r3, #7
 800c8bc:	d9e5      	bls.n	800c88a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c8be:	bf00      	nop
 800c8c0:	bf00      	nop
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000f40 	.word	0x20000f40

0800c8d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c8e0:	f001 fe4c 	bl	800e57c <vPortEnterCritical>
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8ea:	b25b      	sxtb	r3, r3
 800c8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f0:	d103      	bne.n	800c8fa <vQueueWaitForMessageRestricted+0x2a>
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c900:	b25b      	sxtb	r3, r3
 800c902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c906:	d103      	bne.n	800c910 <vQueueWaitForMessageRestricted+0x40>
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c910:	f001 fe68 	bl	800e5e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d106      	bne.n	800c92a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	3324      	adds	r3, #36	; 0x24
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	68b9      	ldr	r1, [r7, #8]
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fd0d 	bl	800d344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c92a:	6978      	ldr	r0, [r7, #20]
 800c92c:	f7ff fefb 	bl	800c726 <prvUnlockQueue>
	}
 800c930:	bf00      	nop
 800c932:	3718      	adds	r7, #24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b08e      	sub	sp, #56	; 0x38
 800c93c:	af04      	add	r7, sp, #16
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10c      	bne.n	800c966 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c950:	b672      	cpsid	i
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	b662      	cpsie	i
 800c960:	623b      	str	r3, [r7, #32]
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10c      	bne.n	800c986 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	b672      	cpsid	i
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	b662      	cpsie	i
 800c980:	61fb      	str	r3, [r7, #28]
}
 800c982:	bf00      	nop
 800c984:	e7fe      	b.n	800c984 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c986:	23bc      	movs	r3, #188	; 0xbc
 800c988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2bbc      	cmp	r3, #188	; 0xbc
 800c98e:	d00c      	beq.n	800c9aa <xTaskCreateStatic+0x72>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	b672      	cpsid	i
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	b662      	cpsie	i
 800c9a4:	61bb      	str	r3, [r7, #24]
}
 800c9a6:	bf00      	nop
 800c9a8:	e7fe      	b.n	800c9a8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d01e      	beq.n	800c9f0 <xTaskCreateStatic+0xb8>
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01b      	beq.n	800c9f0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9303      	str	r3, [sp, #12]
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	f107 0314 	add.w	r3, r7, #20
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	68b9      	ldr	r1, [r7, #8]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f000 f850 	bl	800ca88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ea:	f000 f8f5 	bl	800cbd8 <prvAddNewTaskToReadyList>
 800c9ee:	e001      	b.n	800c9f4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c9f4:	697b      	ldr	r3, [r7, #20]
	}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3728      	adds	r7, #40	; 0x28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b08c      	sub	sp, #48	; 0x30
 800ca02:	af04      	add	r7, sp, #16
 800ca04:	60f8      	str	r0, [r7, #12]
 800ca06:	60b9      	str	r1, [r7, #8]
 800ca08:	603b      	str	r3, [r7, #0]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca0e:	88fb      	ldrh	r3, [r7, #6]
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 fede 	bl	800e7d4 <pvPortMalloc>
 800ca18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00e      	beq.n	800ca3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca20:	20bc      	movs	r0, #188	; 0xbc
 800ca22:	f001 fed7 	bl	800e7d4 <pvPortMalloc>
 800ca26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d003      	beq.n	800ca36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	631a      	str	r2, [r3, #48]	; 0x30
 800ca34:	e005      	b.n	800ca42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca36:	6978      	ldr	r0, [r7, #20]
 800ca38:	f001 ff96 	bl	800e968 <vPortFree>
 800ca3c:	e001      	b.n	800ca42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d017      	beq.n	800ca78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca50:	88fa      	ldrh	r2, [r7, #6]
 800ca52:	2300      	movs	r3, #0
 800ca54:	9303      	str	r3, [sp, #12]
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	9302      	str	r3, [sp, #8]
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	9301      	str	r3, [sp, #4]
 800ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	68b9      	ldr	r1, [r7, #8]
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f000 f80e 	bl	800ca88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca6c:	69f8      	ldr	r0, [r7, #28]
 800ca6e:	f000 f8b3 	bl	800cbd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca72:	2301      	movs	r3, #1
 800ca74:	61bb      	str	r3, [r7, #24]
 800ca76:	e002      	b.n	800ca7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca78:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
	}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3720      	adds	r7, #32
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	461a      	mov	r2, r3
 800caa0:	21a5      	movs	r1, #165	; 0xa5
 800caa2:	f002 f8b9 	bl	800ec18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cab0:	440b      	add	r3, r1
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	f023 0307 	bic.w	r3, r3, #7
 800cabe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00c      	beq.n	800cae4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	617b      	str	r3, [r7, #20]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d01f      	beq.n	800cb2a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caea:	2300      	movs	r3, #0
 800caec:	61fb      	str	r3, [r7, #28]
 800caee:	e012      	b.n	800cb16 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	4413      	add	r3, r2
 800caf6:	7819      	ldrb	r1, [r3, #0]
 800caf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	4413      	add	r3, r2
 800cafe:	3334      	adds	r3, #52	; 0x34
 800cb00:	460a      	mov	r2, r1
 800cb02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	4413      	add	r3, r2
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d006      	beq.n	800cb1e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	3301      	adds	r3, #1
 800cb14:	61fb      	str	r3, [r7, #28]
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	2b0f      	cmp	r3, #15
 800cb1a:	d9e9      	bls.n	800caf0 <prvInitialiseNewTask+0x68>
 800cb1c:	e000      	b.n	800cb20 <prvInitialiseNewTask+0x98>
			{
				break;
 800cb1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb28:	e003      	b.n	800cb32 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	2b37      	cmp	r3, #55	; 0x37
 800cb36:	d901      	bls.n	800cb3c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb38:	2337      	movs	r3, #55	; 0x37
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	3304      	adds	r3, #4
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe fd4c 	bl	800b5f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	3318      	adds	r3, #24
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe fd47 	bl	800b5f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	3354      	adds	r3, #84	; 0x54
 800cb8c:	2260      	movs	r2, #96	; 0x60
 800cb8e:	2100      	movs	r1, #0
 800cb90:	4618      	mov	r0, r3
 800cb92:	f002 f841 	bl	800ec18 <memset>
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	4a0c      	ldr	r2, [pc, #48]	; (800cbcc <prvInitialiseNewTask+0x144>)
 800cb9a:	659a      	str	r2, [r3, #88]	; 0x58
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	4a0c      	ldr	r2, [pc, #48]	; (800cbd0 <prvInitialiseNewTask+0x148>)
 800cba0:	65da      	str	r2, [r3, #92]	; 0x5c
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	4a0b      	ldr	r2, [pc, #44]	; (800cbd4 <prvInitialiseNewTask+0x14c>)
 800cba6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	68f9      	ldr	r1, [r7, #12]
 800cbac:	69b8      	ldr	r0, [r7, #24]
 800cbae:	f001 fbd7 	bl	800e360 <pxPortInitialiseStack>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc4:	bf00      	nop
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	0800f8a0 	.word	0x0800f8a0
 800cbd0:	0800f8c0 	.word	0x0800f8c0
 800cbd4:	0800f880 	.word	0x0800f880

0800cbd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbe0:	f001 fccc 	bl	800e57c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbe4:	4b2d      	ldr	r3, [pc, #180]	; (800cc9c <prvAddNewTaskToReadyList+0xc4>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	4a2c      	ldr	r2, [pc, #176]	; (800cc9c <prvAddNewTaskToReadyList+0xc4>)
 800cbec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbee:	4b2c      	ldr	r3, [pc, #176]	; (800cca0 <prvAddNewTaskToReadyList+0xc8>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d109      	bne.n	800cc0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbf6:	4a2a      	ldr	r2, [pc, #168]	; (800cca0 <prvAddNewTaskToReadyList+0xc8>)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cbfc:	4b27      	ldr	r3, [pc, #156]	; (800cc9c <prvAddNewTaskToReadyList+0xc4>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d110      	bne.n	800cc26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc04:	f000 fcd4 	bl	800d5b0 <prvInitialiseTaskLists>
 800cc08:	e00d      	b.n	800cc26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc0a:	4b26      	ldr	r3, [pc, #152]	; (800cca4 <prvAddNewTaskToReadyList+0xcc>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d109      	bne.n	800cc26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc12:	4b23      	ldr	r3, [pc, #140]	; (800cca0 <prvAddNewTaskToReadyList+0xc8>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d802      	bhi.n	800cc26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc20:	4a1f      	ldr	r2, [pc, #124]	; (800cca0 <prvAddNewTaskToReadyList+0xc8>)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc26:	4b20      	ldr	r3, [pc, #128]	; (800cca8 <prvAddNewTaskToReadyList+0xd0>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	4a1e      	ldr	r2, [pc, #120]	; (800cca8 <prvAddNewTaskToReadyList+0xd0>)
 800cc2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc30:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <prvAddNewTaskToReadyList+0xd0>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc3c:	4b1b      	ldr	r3, [pc, #108]	; (800ccac <prvAddNewTaskToReadyList+0xd4>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d903      	bls.n	800cc4c <prvAddNewTaskToReadyList+0x74>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	4a18      	ldr	r2, [pc, #96]	; (800ccac <prvAddNewTaskToReadyList+0xd4>)
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc50:	4613      	mov	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <prvAddNewTaskToReadyList+0xd8>)
 800cc5a:	441a      	add	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	4619      	mov	r1, r3
 800cc62:	4610      	mov	r0, r2
 800cc64:	f7fe fcd1 	bl	800b60a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc68:	f001 fcbc 	bl	800e5e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <prvAddNewTaskToReadyList+0xcc>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00e      	beq.n	800cc92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc74:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <prvAddNewTaskToReadyList+0xc8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d207      	bcs.n	800cc92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc82:	4b0c      	ldr	r3, [pc, #48]	; (800ccb4 <prvAddNewTaskToReadyList+0xdc>)
 800cc84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc92:	bf00      	nop
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20001454 	.word	0x20001454
 800cca0:	20000f80 	.word	0x20000f80
 800cca4:	20001460 	.word	0x20001460
 800cca8:	20001470 	.word	0x20001470
 800ccac:	2000145c 	.word	0x2000145c
 800ccb0:	20000f84 	.word	0x20000f84
 800ccb4:	e000ed04 	.word	0xe000ed04

0800ccb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08a      	sub	sp, #40	; 0x28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10c      	bne.n	800cce6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd0:	b672      	cpsid	i
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	b662      	cpsie	i
 800cce0:	617b      	str	r3, [r7, #20]
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10c      	bne.n	800cd06 <vTaskDelayUntil+0x4e>
	__asm volatile
 800ccec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf0:	b672      	cpsid	i
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	b662      	cpsie	i
 800cd00:	613b      	str	r3, [r7, #16]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800cd06:	4b2b      	ldr	r3, [pc, #172]	; (800cdb4 <vTaskDelayUntil+0xfc>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00c      	beq.n	800cd28 <vTaskDelayUntil+0x70>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	b672      	cpsid	i
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	b662      	cpsie	i
 800cd22:	60fb      	str	r3, [r7, #12]
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800cd28:	f000 f8f4 	bl	800cf14 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cd2c:	4b22      	ldr	r3, [pc, #136]	; (800cdb8 <vTaskDelayUntil+0x100>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	4413      	add	r3, r2
 800cd3a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6a3a      	ldr	r2, [r7, #32]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d20b      	bcs.n	800cd5e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	69fa      	ldr	r2, [r7, #28]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d211      	bcs.n	800cd74 <vTaskDelayUntil+0xbc>
 800cd50:	69fa      	ldr	r2, [r7, #28]
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d90d      	bls.n	800cd74 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd5c:	e00a      	b.n	800cd74 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d303      	bcc.n	800cd70 <vTaskDelayUntil+0xb8>
 800cd68:	69fa      	ldr	r2, [r7, #28]
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d901      	bls.n	800cd74 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	69fa      	ldr	r2, [r7, #28]
 800cd78:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d006      	beq.n	800cd8e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cd80:	69fa      	ldr	r2, [r7, #28]
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	2100      	movs	r1, #0
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 fe77 	bl	800da7c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cd8e:	f000 f8cf 	bl	800cf30 <xTaskResumeAll>
 800cd92:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d107      	bne.n	800cdaa <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800cd9a:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <vTaskDelayUntil+0x104>)
 800cd9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda0:	601a      	str	r2, [r3, #0]
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cdaa:	bf00      	nop
 800cdac:	3728      	adds	r7, #40	; 0x28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	2000147c 	.word	0x2000147c
 800cdb8:	20001458 	.word	0x20001458
 800cdbc:	e000ed04 	.word	0xe000ed04

0800cdc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d019      	beq.n	800ce06 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cdd2:	4b14      	ldr	r3, [pc, #80]	; (800ce24 <vTaskDelay+0x64>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <vTaskDelay+0x34>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	b672      	cpsid	i
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	b662      	cpsie	i
 800cdee:	60bb      	str	r3, [r7, #8]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cdf4:	f000 f88e 	bl	800cf14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fe3e 	bl	800da7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce00:	f000 f896 	bl	800cf30 <xTaskResumeAll>
 800ce04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d107      	bne.n	800ce1c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ce0c:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <vTaskDelay+0x68>)
 800ce0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce1c:	bf00      	nop
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	2000147c 	.word	0x2000147c
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08a      	sub	sp, #40	; 0x28
 800ce30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce3a:	463a      	mov	r2, r7
 800ce3c:	1d39      	adds	r1, r7, #4
 800ce3e:	f107 0308 	add.w	r3, r7, #8
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fb80 	bl	800b548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	9202      	str	r2, [sp, #8]
 800ce50:	9301      	str	r3, [sp, #4]
 800ce52:	2300      	movs	r3, #0
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	2300      	movs	r3, #0
 800ce58:	460a      	mov	r2, r1
 800ce5a:	4926      	ldr	r1, [pc, #152]	; (800cef4 <vTaskStartScheduler+0xc8>)
 800ce5c:	4826      	ldr	r0, [pc, #152]	; (800cef8 <vTaskStartScheduler+0xcc>)
 800ce5e:	f7ff fd6b 	bl	800c938 <xTaskCreateStatic>
 800ce62:	4603      	mov	r3, r0
 800ce64:	4a25      	ldr	r2, [pc, #148]	; (800cefc <vTaskStartScheduler+0xd0>)
 800ce66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce68:	4b24      	ldr	r3, [pc, #144]	; (800cefc <vTaskStartScheduler+0xd0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce70:	2301      	movs	r3, #1
 800ce72:	617b      	str	r3, [r7, #20]
 800ce74:	e001      	b.n	800ce7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce76:	2300      	movs	r3, #0
 800ce78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d102      	bne.n	800ce86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce80:	f000 fe50 	bl	800db24 <xTimerCreateTimerTask>
 800ce84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d11d      	bne.n	800cec8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	b672      	cpsid	i
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	b662      	cpsie	i
 800cea0:	613b      	str	r3, [r7, #16]
}
 800cea2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cea4:	4b16      	ldr	r3, [pc, #88]	; (800cf00 <vTaskStartScheduler+0xd4>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3354      	adds	r3, #84	; 0x54
 800ceaa:	4a16      	ldr	r2, [pc, #88]	; (800cf04 <vTaskStartScheduler+0xd8>)
 800ceac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ceae:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <vTaskStartScheduler+0xdc>)
 800ceb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ceb6:	4b15      	ldr	r3, [pc, #84]	; (800cf0c <vTaskStartScheduler+0xe0>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cebc:	4b14      	ldr	r3, [pc, #80]	; (800cf10 <vTaskStartScheduler+0xe4>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cec2:	f001 fadd 	bl	800e480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cec6:	e010      	b.n	800ceea <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cece:	d10c      	bne.n	800ceea <vTaskStartScheduler+0xbe>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	b672      	cpsid	i
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	b662      	cpsie	i
 800cee4:	60fb      	str	r3, [r7, #12]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <vTaskStartScheduler+0xbc>
}
 800ceea:	bf00      	nop
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	0800f340 	.word	0x0800f340
 800cef8:	0800d57d 	.word	0x0800d57d
 800cefc:	20001478 	.word	0x20001478
 800cf00:	20000f80 	.word	0x20000f80
 800cf04:	20000014 	.word	0x20000014
 800cf08:	20001474 	.word	0x20001474
 800cf0c:	20001460 	.word	0x20001460
 800cf10:	20001458 	.word	0x20001458

0800cf14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf14:	b480      	push	{r7}
 800cf16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cf18:	4b04      	ldr	r3, [pc, #16]	; (800cf2c <vTaskSuspendAll+0x18>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	4a03      	ldr	r2, [pc, #12]	; (800cf2c <vTaskSuspendAll+0x18>)
 800cf20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cf22:	bf00      	nop
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	2000147c 	.word	0x2000147c

0800cf30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf3e:	4b43      	ldr	r3, [pc, #268]	; (800d04c <xTaskResumeAll+0x11c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10c      	bne.n	800cf60 <xTaskResumeAll+0x30>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	b672      	cpsid	i
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	b662      	cpsie	i
 800cf5a:	603b      	str	r3, [r7, #0]
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf60:	f001 fb0c 	bl	800e57c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf64:	4b39      	ldr	r3, [pc, #228]	; (800d04c <xTaskResumeAll+0x11c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	4a38      	ldr	r2, [pc, #224]	; (800d04c <xTaskResumeAll+0x11c>)
 800cf6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf6e:	4b37      	ldr	r3, [pc, #220]	; (800d04c <xTaskResumeAll+0x11c>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d162      	bne.n	800d03c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf76:	4b36      	ldr	r3, [pc, #216]	; (800d050 <xTaskResumeAll+0x120>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d05e      	beq.n	800d03c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf7e:	e02f      	b.n	800cfe0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf80:	4b34      	ldr	r3, [pc, #208]	; (800d054 <xTaskResumeAll+0x124>)
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3318      	adds	r3, #24
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fb99 	bl	800b6c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	3304      	adds	r3, #4
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fe fb94 	bl	800b6c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa0:	4b2d      	ldr	r3, [pc, #180]	; (800d058 <xTaskResumeAll+0x128>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d903      	bls.n	800cfb0 <xTaskResumeAll+0x80>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfac:	4a2a      	ldr	r2, [pc, #168]	; (800d058 <xTaskResumeAll+0x128>)
 800cfae:	6013      	str	r3, [r2, #0]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4a27      	ldr	r2, [pc, #156]	; (800d05c <xTaskResumeAll+0x12c>)
 800cfbe:	441a      	add	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	f7fe fb1f 	bl	800b60a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd0:	4b23      	ldr	r3, [pc, #140]	; (800d060 <xTaskResumeAll+0x130>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d302      	bcc.n	800cfe0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cfda:	4b22      	ldr	r3, [pc, #136]	; (800d064 <xTaskResumeAll+0x134>)
 800cfdc:	2201      	movs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfe0:	4b1c      	ldr	r3, [pc, #112]	; (800d054 <xTaskResumeAll+0x124>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1cb      	bne.n	800cf80 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cfee:	f000 fb83 	bl	800d6f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cff2:	4b1d      	ldr	r3, [pc, #116]	; (800d068 <xTaskResumeAll+0x138>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d010      	beq.n	800d020 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cffe:	f000 f859 	bl	800d0b4 <xTaskIncrementTick>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d008:	4b16      	ldr	r3, [pc, #88]	; (800d064 <xTaskResumeAll+0x134>)
 800d00a:	2201      	movs	r2, #1
 800d00c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3b01      	subs	r3, #1
 800d012:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1f1      	bne.n	800cffe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d01a:	4b13      	ldr	r3, [pc, #76]	; (800d068 <xTaskResumeAll+0x138>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d020:	4b10      	ldr	r3, [pc, #64]	; (800d064 <xTaskResumeAll+0x134>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d009      	beq.n	800d03c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d028:	2301      	movs	r3, #1
 800d02a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d02c:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <xTaskResumeAll+0x13c>)
 800d02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d03c:	f001 fad2 	bl	800e5e4 <vPortExitCritical>

	return xAlreadyYielded;
 800d040:	68bb      	ldr	r3, [r7, #8]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	2000147c 	.word	0x2000147c
 800d050:	20001454 	.word	0x20001454
 800d054:	20001414 	.word	0x20001414
 800d058:	2000145c 	.word	0x2000145c
 800d05c:	20000f84 	.word	0x20000f84
 800d060:	20000f80 	.word	0x20000f80
 800d064:	20001468 	.word	0x20001468
 800d068:	20001464 	.word	0x20001464
 800d06c:	e000ed04 	.word	0xe000ed04

0800d070 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d076:	4b05      	ldr	r3, [pc, #20]	; (800d08c <xTaskGetTickCount+0x1c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d07c:	687b      	ldr	r3, [r7, #4]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20001458 	.word	0x20001458

0800d090 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d096:	f001 fb59 	bl	800e74c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d09a:	2300      	movs	r3, #0
 800d09c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d09e:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <xTaskGetTickCountFromISR+0x20>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0a4:	683b      	ldr	r3, [r7, #0]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20001458 	.word	0x20001458

0800d0b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0be:	4b50      	ldr	r3, [pc, #320]	; (800d200 <xTaskIncrementTick+0x14c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 808b 	bne.w	800d1de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0c8:	4b4e      	ldr	r3, [pc, #312]	; (800d204 <xTaskIncrementTick+0x150>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0d0:	4a4c      	ldr	r2, [pc, #304]	; (800d204 <xTaskIncrementTick+0x150>)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d122      	bne.n	800d122 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0dc:	4b4a      	ldr	r3, [pc, #296]	; (800d208 <xTaskIncrementTick+0x154>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00c      	beq.n	800d100 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	b672      	cpsid	i
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	b662      	cpsie	i
 800d0fa:	603b      	str	r3, [r7, #0]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xTaskIncrementTick+0x4a>
 800d100:	4b41      	ldr	r3, [pc, #260]	; (800d208 <xTaskIncrementTick+0x154>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	4b41      	ldr	r3, [pc, #260]	; (800d20c <xTaskIncrementTick+0x158>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a3f      	ldr	r2, [pc, #252]	; (800d208 <xTaskIncrementTick+0x154>)
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	4a3f      	ldr	r2, [pc, #252]	; (800d20c <xTaskIncrementTick+0x158>)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	4b3e      	ldr	r3, [pc, #248]	; (800d210 <xTaskIncrementTick+0x15c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	4a3d      	ldr	r2, [pc, #244]	; (800d210 <xTaskIncrementTick+0x15c>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	f000 faeb 	bl	800d6f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d122:	4b3c      	ldr	r3, [pc, #240]	; (800d214 <xTaskIncrementTick+0x160>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d349      	bcc.n	800d1c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d12c:	4b36      	ldr	r3, [pc, #216]	; (800d208 <xTaskIncrementTick+0x154>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d136:	4b37      	ldr	r3, [pc, #220]	; (800d214 <xTaskIncrementTick+0x160>)
 800d138:	f04f 32ff 	mov.w	r2, #4294967295
 800d13c:	601a      	str	r2, [r3, #0]
					break;
 800d13e:	e03f      	b.n	800d1c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d140:	4b31      	ldr	r3, [pc, #196]	; (800d208 <xTaskIncrementTick+0x154>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	429a      	cmp	r2, r3
 800d156:	d203      	bcs.n	800d160 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d158:	4a2e      	ldr	r2, [pc, #184]	; (800d214 <xTaskIncrementTick+0x160>)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d15e:	e02f      	b.n	800d1c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	3304      	adds	r3, #4
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe faad 	bl	800b6c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d004      	beq.n	800d17c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	3318      	adds	r3, #24
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe faa4 	bl	800b6c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d180:	4b25      	ldr	r3, [pc, #148]	; (800d218 <xTaskIncrementTick+0x164>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	429a      	cmp	r2, r3
 800d186:	d903      	bls.n	800d190 <xTaskIncrementTick+0xdc>
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	4a22      	ldr	r2, [pc, #136]	; (800d218 <xTaskIncrementTick+0x164>)
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d194:	4613      	mov	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4a1f      	ldr	r2, [pc, #124]	; (800d21c <xTaskIncrementTick+0x168>)
 800d19e:	441a      	add	r2, r3
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	f7fe fa2f 	bl	800b60a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b0:	4b1b      	ldr	r3, [pc, #108]	; (800d220 <xTaskIncrementTick+0x16c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d3b8      	bcc.n	800d12c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1be:	e7b5      	b.n	800d12c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1c0:	4b17      	ldr	r3, [pc, #92]	; (800d220 <xTaskIncrementTick+0x16c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	4915      	ldr	r1, [pc, #84]	; (800d21c <xTaskIncrementTick+0x168>)
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d907      	bls.n	800d1e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	617b      	str	r3, [r7, #20]
 800d1dc:	e004      	b.n	800d1e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d1de:	4b11      	ldr	r3, [pc, #68]	; (800d224 <xTaskIncrementTick+0x170>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	4a0f      	ldr	r2, [pc, #60]	; (800d224 <xTaskIncrementTick+0x170>)
 800d1e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d1e8:	4b0f      	ldr	r3, [pc, #60]	; (800d228 <xTaskIncrementTick+0x174>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d1f4:	697b      	ldr	r3, [r7, #20]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3718      	adds	r7, #24
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	2000147c 	.word	0x2000147c
 800d204:	20001458 	.word	0x20001458
 800d208:	2000140c 	.word	0x2000140c
 800d20c:	20001410 	.word	0x20001410
 800d210:	2000146c 	.word	0x2000146c
 800d214:	20001474 	.word	0x20001474
 800d218:	2000145c 	.word	0x2000145c
 800d21c:	20000f84 	.word	0x20000f84
 800d220:	20000f80 	.word	0x20000f80
 800d224:	20001464 	.word	0x20001464
 800d228:	20001468 	.word	0x20001468

0800d22c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d232:	4b2b      	ldr	r3, [pc, #172]	; (800d2e0 <vTaskSwitchContext+0xb4>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d23a:	4b2a      	ldr	r3, [pc, #168]	; (800d2e4 <vTaskSwitchContext+0xb8>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d240:	e048      	b.n	800d2d4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800d242:	4b28      	ldr	r3, [pc, #160]	; (800d2e4 <vTaskSwitchContext+0xb8>)
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d248:	4b27      	ldr	r3, [pc, #156]	; (800d2e8 <vTaskSwitchContext+0xbc>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	e012      	b.n	800d276 <vTaskSwitchContext+0x4a>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10c      	bne.n	800d270 <vTaskSwitchContext+0x44>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	b672      	cpsid	i
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	b662      	cpsie	i
 800d26a:	607b      	str	r3, [r7, #4]
}
 800d26c:	bf00      	nop
 800d26e:	e7fe      	b.n	800d26e <vTaskSwitchContext+0x42>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3b01      	subs	r3, #1
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	491d      	ldr	r1, [pc, #116]	; (800d2ec <vTaskSwitchContext+0xc0>)
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0e2      	beq.n	800d250 <vTaskSwitchContext+0x24>
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	4613      	mov	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4a15      	ldr	r2, [pc, #84]	; (800d2ec <vTaskSwitchContext+0xc0>)
 800d296:	4413      	add	r3, r2
 800d298:	60bb      	str	r3, [r7, #8]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	605a      	str	r2, [r3, #4]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d104      	bne.n	800d2ba <vTaskSwitchContext+0x8e>
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	605a      	str	r2, [r3, #4]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	4a0b      	ldr	r2, [pc, #44]	; (800d2f0 <vTaskSwitchContext+0xc4>)
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	4a08      	ldr	r2, [pc, #32]	; (800d2e8 <vTaskSwitchContext+0xbc>)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <vTaskSwitchContext+0xc4>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3354      	adds	r3, #84	; 0x54
 800d2d0:	4a08      	ldr	r2, [pc, #32]	; (800d2f4 <vTaskSwitchContext+0xc8>)
 800d2d2:	6013      	str	r3, [r2, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	2000147c 	.word	0x2000147c
 800d2e4:	20001468 	.word	0x20001468
 800d2e8:	2000145c 	.word	0x2000145c
 800d2ec:	20000f84 	.word	0x20000f84
 800d2f0:	20000f80 	.word	0x20000f80
 800d2f4:	20000014 	.word	0x20000014

0800d2f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10c      	bne.n	800d322 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	b672      	cpsid	i
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	b662      	cpsie	i
 800d31c:	60fb      	str	r3, [r7, #12]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d322:	4b07      	ldr	r3, [pc, #28]	; (800d340 <vTaskPlaceOnEventList+0x48>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3318      	adds	r3, #24
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7fe f991 	bl	800b652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d330:	2101      	movs	r1, #1
 800d332:	6838      	ldr	r0, [r7, #0]
 800d334:	f000 fba2 	bl	800da7c <prvAddCurrentTaskToDelayedList>
}
 800d338:	bf00      	nop
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20000f80 	.word	0x20000f80

0800d344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d10c      	bne.n	800d370 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800d356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35a:	b672      	cpsid	i
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	b662      	cpsie	i
 800d36a:	617b      	str	r3, [r7, #20]
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d370:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <vTaskPlaceOnEventListRestricted+0x58>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3318      	adds	r3, #24
 800d376:	4619      	mov	r1, r3
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f7fe f946 	bl	800b60a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800d384:	f04f 33ff 	mov.w	r3, #4294967295
 800d388:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d38a:	6879      	ldr	r1, [r7, #4]
 800d38c:	68b8      	ldr	r0, [r7, #8]
 800d38e:	f000 fb75 	bl	800da7c <prvAddCurrentTaskToDelayedList>
	}
 800d392:	bf00      	nop
 800d394:	3718      	adds	r7, #24
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	20000f80 	.word	0x20000f80

0800d3a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10c      	bne.n	800d3d0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	b672      	cpsid	i
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	b662      	cpsie	i
 800d3ca:	60fb      	str	r3, [r7, #12]
}
 800d3cc:	bf00      	nop
 800d3ce:	e7fe      	b.n	800d3ce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	3318      	adds	r3, #24
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe f975 	bl	800b6c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3da:	4b1e      	ldr	r3, [pc, #120]	; (800d454 <xTaskRemoveFromEventList+0xb4>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d11d      	bne.n	800d41e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe f96c 	bl	800b6c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f0:	4b19      	ldr	r3, [pc, #100]	; (800d458 <xTaskRemoveFromEventList+0xb8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d903      	bls.n	800d400 <xTaskRemoveFromEventList+0x60>
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	4a16      	ldr	r2, [pc, #88]	; (800d458 <xTaskRemoveFromEventList+0xb8>)
 800d3fe:	6013      	str	r3, [r2, #0]
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d404:	4613      	mov	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4413      	add	r3, r2
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4a13      	ldr	r2, [pc, #76]	; (800d45c <xTaskRemoveFromEventList+0xbc>)
 800d40e:	441a      	add	r2, r3
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	3304      	adds	r3, #4
 800d414:	4619      	mov	r1, r3
 800d416:	4610      	mov	r0, r2
 800d418:	f7fe f8f7 	bl	800b60a <vListInsertEnd>
 800d41c:	e005      	b.n	800d42a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	3318      	adds	r3, #24
 800d422:	4619      	mov	r1, r3
 800d424:	480e      	ldr	r0, [pc, #56]	; (800d460 <xTaskRemoveFromEventList+0xc0>)
 800d426:	f7fe f8f0 	bl	800b60a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42e:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <xTaskRemoveFromEventList+0xc4>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d434:	429a      	cmp	r2, r3
 800d436:	d905      	bls.n	800d444 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d438:	2301      	movs	r3, #1
 800d43a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d43c:	4b0a      	ldr	r3, [pc, #40]	; (800d468 <xTaskRemoveFromEventList+0xc8>)
 800d43e:	2201      	movs	r2, #1
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	e001      	b.n	800d448 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d444:	2300      	movs	r3, #0
 800d446:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d448:	697b      	ldr	r3, [r7, #20]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3718      	adds	r7, #24
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	2000147c 	.word	0x2000147c
 800d458:	2000145c 	.word	0x2000145c
 800d45c:	20000f84 	.word	0x20000f84
 800d460:	20001414 	.word	0x20001414
 800d464:	20000f80 	.word	0x20000f80
 800d468:	20001468 	.word	0x20001468

0800d46c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d474:	4b06      	ldr	r3, [pc, #24]	; (800d490 <vTaskInternalSetTimeOutState+0x24>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d47c:	4b05      	ldr	r3, [pc, #20]	; (800d494 <vTaskInternalSetTimeOutState+0x28>)
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	605a      	str	r2, [r3, #4]
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	2000146c 	.word	0x2000146c
 800d494:	20001458 	.word	0x20001458

0800d498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10c      	bne.n	800d4c2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	b672      	cpsid	i
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	b662      	cpsie	i
 800d4bc:	613b      	str	r3, [r7, #16]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10c      	bne.n	800d4e2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4cc:	b672      	cpsid	i
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	b662      	cpsie	i
 800d4dc:	60fb      	str	r3, [r7, #12]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d4e2:	f001 f84b 	bl	800e57c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4e6:	4b1d      	ldr	r3, [pc, #116]	; (800d55c <xTaskCheckForTimeOut+0xc4>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	69ba      	ldr	r2, [r7, #24]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fe:	d102      	bne.n	800d506 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d500:	2300      	movs	r3, #0
 800d502:	61fb      	str	r3, [r7, #28]
 800d504:	e023      	b.n	800d54e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4b15      	ldr	r3, [pc, #84]	; (800d560 <xTaskCheckForTimeOut+0xc8>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d007      	beq.n	800d522 <xTaskCheckForTimeOut+0x8a>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	69ba      	ldr	r2, [r7, #24]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d302      	bcc.n	800d522 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d51c:	2301      	movs	r3, #1
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	e015      	b.n	800d54e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d20b      	bcs.n	800d544 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	1ad2      	subs	r2, r2, r3
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff ff97 	bl	800d46c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d53e:	2300      	movs	r3, #0
 800d540:	61fb      	str	r3, [r7, #28]
 800d542:	e004      	b.n	800d54e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2200      	movs	r2, #0
 800d548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d54a:	2301      	movs	r3, #1
 800d54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d54e:	f001 f849 	bl	800e5e4 <vPortExitCritical>

	return xReturn;
 800d552:	69fb      	ldr	r3, [r7, #28]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3720      	adds	r7, #32
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20001458 	.word	0x20001458
 800d560:	2000146c 	.word	0x2000146c

0800d564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d564:	b480      	push	{r7}
 800d566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d568:	4b03      	ldr	r3, [pc, #12]	; (800d578 <vTaskMissedYield+0x14>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	601a      	str	r2, [r3, #0]
}
 800d56e:	bf00      	nop
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	20001468 	.word	0x20001468

0800d57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d584:	f000 f854 	bl	800d630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d588:	4b07      	ldr	r3, [pc, #28]	; (800d5a8 <prvIdleTask+0x2c>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d907      	bls.n	800d5a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d590:	4b06      	ldr	r3, [pc, #24]	; (800d5ac <prvIdleTask+0x30>)
 800d592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d5a0:	f7f4 ff08 	bl	80023b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d5a4:	e7ee      	b.n	800d584 <prvIdleTask+0x8>
 800d5a6:	bf00      	nop
 800d5a8:	20000f84 	.word	0x20000f84
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	e00c      	b.n	800d5d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4a12      	ldr	r2, [pc, #72]	; (800d610 <prvInitialiseTaskLists+0x60>)
 800d5c8:	4413      	add	r3, r2
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fd fff0 	bl	800b5b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	607b      	str	r3, [r7, #4]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2b37      	cmp	r3, #55	; 0x37
 800d5da:	d9ef      	bls.n	800d5bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5dc:	480d      	ldr	r0, [pc, #52]	; (800d614 <prvInitialiseTaskLists+0x64>)
 800d5de:	f7fd ffe7 	bl	800b5b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5e2:	480d      	ldr	r0, [pc, #52]	; (800d618 <prvInitialiseTaskLists+0x68>)
 800d5e4:	f7fd ffe4 	bl	800b5b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5e8:	480c      	ldr	r0, [pc, #48]	; (800d61c <prvInitialiseTaskLists+0x6c>)
 800d5ea:	f7fd ffe1 	bl	800b5b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5ee:	480c      	ldr	r0, [pc, #48]	; (800d620 <prvInitialiseTaskLists+0x70>)
 800d5f0:	f7fd ffde 	bl	800b5b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5f4:	480b      	ldr	r0, [pc, #44]	; (800d624 <prvInitialiseTaskLists+0x74>)
 800d5f6:	f7fd ffdb 	bl	800b5b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5fa:	4b0b      	ldr	r3, [pc, #44]	; (800d628 <prvInitialiseTaskLists+0x78>)
 800d5fc:	4a05      	ldr	r2, [pc, #20]	; (800d614 <prvInitialiseTaskLists+0x64>)
 800d5fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d600:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <prvInitialiseTaskLists+0x7c>)
 800d602:	4a05      	ldr	r2, [pc, #20]	; (800d618 <prvInitialiseTaskLists+0x68>)
 800d604:	601a      	str	r2, [r3, #0]
}
 800d606:	bf00      	nop
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20000f84 	.word	0x20000f84
 800d614:	200013e4 	.word	0x200013e4
 800d618:	200013f8 	.word	0x200013f8
 800d61c:	20001414 	.word	0x20001414
 800d620:	20001428 	.word	0x20001428
 800d624:	20001440 	.word	0x20001440
 800d628:	2000140c 	.word	0x2000140c
 800d62c:	20001410 	.word	0x20001410

0800d630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d636:	e019      	b.n	800d66c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d638:	f000 ffa0 	bl	800e57c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d63c:	4b10      	ldr	r3, [pc, #64]	; (800d680 <prvCheckTasksWaitingTermination+0x50>)
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3304      	adds	r3, #4
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe f83b 	bl	800b6c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d64e:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <prvCheckTasksWaitingTermination+0x54>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3b01      	subs	r3, #1
 800d654:	4a0b      	ldr	r2, [pc, #44]	; (800d684 <prvCheckTasksWaitingTermination+0x54>)
 800d656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d658:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <prvCheckTasksWaitingTermination+0x58>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	3b01      	subs	r3, #1
 800d65e:	4a0a      	ldr	r2, [pc, #40]	; (800d688 <prvCheckTasksWaitingTermination+0x58>)
 800d660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d662:	f000 ffbf 	bl	800e5e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f810 	bl	800d68c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d66c:	4b06      	ldr	r3, [pc, #24]	; (800d688 <prvCheckTasksWaitingTermination+0x58>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1e1      	bne.n	800d638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d674:	bf00      	nop
 800d676:	bf00      	nop
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	20001428 	.word	0x20001428
 800d684:	20001454 	.word	0x20001454
 800d688:	2000143c 	.word	0x2000143c

0800d68c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3354      	adds	r3, #84	; 0x54
 800d698:	4618      	mov	r0, r3
 800d69a:	f001 fad3 	bl	800ec44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d108      	bne.n	800d6ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f001 f95b 	bl	800e968 <vPortFree>
				vPortFree( pxTCB );
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f001 f958 	bl	800e968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d6b8:	e01a      	b.n	800d6f0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d103      	bne.n	800d6cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f001 f94f 	bl	800e968 <vPortFree>
	}
 800d6ca:	e011      	b.n	800d6f0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d00c      	beq.n	800d6f0 <prvDeleteTCB+0x64>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	b672      	cpsid	i
 800d6dc:	f383 8811 	msr	BASEPRI, r3
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	b662      	cpsie	i
 800d6ea:	60fb      	str	r3, [r7, #12]
}
 800d6ec:	bf00      	nop
 800d6ee:	e7fe      	b.n	800d6ee <prvDeleteTCB+0x62>
	}
 800d6f0:	bf00      	nop
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <prvResetNextTaskUnblockTime+0x38>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d104      	bne.n	800d712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d708:	4b0a      	ldr	r3, [pc, #40]	; (800d734 <prvResetNextTaskUnblockTime+0x3c>)
 800d70a:	f04f 32ff 	mov.w	r2, #4294967295
 800d70e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d710:	e008      	b.n	800d724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d712:	4b07      	ldr	r3, [pc, #28]	; (800d730 <prvResetNextTaskUnblockTime+0x38>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	4a04      	ldr	r2, [pc, #16]	; (800d734 <prvResetNextTaskUnblockTime+0x3c>)
 800d722:	6013      	str	r3, [r2, #0]
}
 800d724:	bf00      	nop
 800d726:	370c      	adds	r7, #12
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	2000140c 	.word	0x2000140c
 800d734:	20001474 	.word	0x20001474

0800d738 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d73e:	4b05      	ldr	r3, [pc, #20]	; (800d754 <xTaskGetCurrentTaskHandle+0x1c>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d744:	687b      	ldr	r3, [r7, #4]
	}
 800d746:	4618      	mov	r0, r3
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	20000f80 	.word	0x20000f80

0800d758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d75e:	4b0b      	ldr	r3, [pc, #44]	; (800d78c <xTaskGetSchedulerState+0x34>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d102      	bne.n	800d76c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d766:	2301      	movs	r3, #1
 800d768:	607b      	str	r3, [r7, #4]
 800d76a:	e008      	b.n	800d77e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d76c:	4b08      	ldr	r3, [pc, #32]	; (800d790 <xTaskGetSchedulerState+0x38>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d102      	bne.n	800d77a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d774:	2302      	movs	r3, #2
 800d776:	607b      	str	r3, [r7, #4]
 800d778:	e001      	b.n	800d77e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d77a:	2300      	movs	r3, #0
 800d77c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d77e:	687b      	ldr	r3, [r7, #4]
	}
 800d780:	4618      	mov	r0, r3
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr
 800d78c:	20001460 	.word	0x20001460
 800d790:	2000147c 	.word	0x2000147c

0800d794 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d051      	beq.n	800d84e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ae:	4b2a      	ldr	r3, [pc, #168]	; (800d858 <xTaskPriorityInherit+0xc4>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d241      	bcs.n	800d83c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	699b      	ldr	r3, [r3, #24]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	db06      	blt.n	800d7ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c0:	4b25      	ldr	r3, [pc, #148]	; (800d858 <xTaskPriorityInherit+0xc4>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	6959      	ldr	r1, [r3, #20]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4a1f      	ldr	r2, [pc, #124]	; (800d85c <xTaskPriorityInherit+0xc8>)
 800d7e0:	4413      	add	r3, r2
 800d7e2:	4299      	cmp	r1, r3
 800d7e4:	d122      	bne.n	800d82c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fd ff6a 	bl	800b6c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7f0:	4b19      	ldr	r3, [pc, #100]	; (800d858 <xTaskPriorityInherit+0xc4>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fe:	4b18      	ldr	r3, [pc, #96]	; (800d860 <xTaskPriorityInherit+0xcc>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	429a      	cmp	r2, r3
 800d804:	d903      	bls.n	800d80e <xTaskPriorityInherit+0x7a>
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80a:	4a15      	ldr	r2, [pc, #84]	; (800d860 <xTaskPriorityInherit+0xcc>)
 800d80c:	6013      	str	r3, [r2, #0]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d812:	4613      	mov	r3, r2
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	4413      	add	r3, r2
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4a10      	ldr	r2, [pc, #64]	; (800d85c <xTaskPriorityInherit+0xc8>)
 800d81c:	441a      	add	r2, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	3304      	adds	r3, #4
 800d822:	4619      	mov	r1, r3
 800d824:	4610      	mov	r0, r2
 800d826:	f7fd fef0 	bl	800b60a <vListInsertEnd>
 800d82a:	e004      	b.n	800d836 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d82c:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <xTaskPriorityInherit+0xc4>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d836:	2301      	movs	r3, #1
 800d838:	60fb      	str	r3, [r7, #12]
 800d83a:	e008      	b.n	800d84e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <xTaskPriorityInherit+0xc4>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d846:	429a      	cmp	r2, r3
 800d848:	d201      	bcs.n	800d84e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d84a:	2301      	movs	r3, #1
 800d84c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d84e:	68fb      	ldr	r3, [r7, #12]
	}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20000f80 	.word	0x20000f80
 800d85c:	20000f84 	.word	0x20000f84
 800d860:	2000145c 	.word	0x2000145c

0800d864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d870:	2300      	movs	r3, #0
 800d872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d05a      	beq.n	800d930 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d87a:	4b30      	ldr	r3, [pc, #192]	; (800d93c <xTaskPriorityDisinherit+0xd8>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	429a      	cmp	r2, r3
 800d882:	d00c      	beq.n	800d89e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	b672      	cpsid	i
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	b662      	cpsie	i
 800d898:	60fb      	str	r3, [r7, #12]
}
 800d89a:	bf00      	nop
 800d89c:	e7fe      	b.n	800d89c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10c      	bne.n	800d8c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	b672      	cpsid	i
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	b662      	cpsie	i
 800d8ba:	60bb      	str	r3, [r7, #8]
}
 800d8bc:	bf00      	nop
 800d8be:	e7fe      	b.n	800d8be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8c4:	1e5a      	subs	r2, r3, #1
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d02c      	beq.n	800d930 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d128      	bne.n	800d930 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fd feee 	bl	800b6c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d900:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <xTaskPriorityDisinherit+0xdc>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	429a      	cmp	r2, r3
 800d906:	d903      	bls.n	800d910 <xTaskPriorityDisinherit+0xac>
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90c:	4a0c      	ldr	r2, [pc, #48]	; (800d940 <xTaskPriorityDisinherit+0xdc>)
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	4613      	mov	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4a09      	ldr	r2, [pc, #36]	; (800d944 <xTaskPriorityDisinherit+0xe0>)
 800d91e:	441a      	add	r2, r3
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	3304      	adds	r3, #4
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fd fe6f 	bl	800b60a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d92c:	2301      	movs	r3, #1
 800d92e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d930:	697b      	ldr	r3, [r7, #20]
	}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	20000f80 	.word	0x20000f80
 800d940:	2000145c 	.word	0x2000145c
 800d944:	20000f84 	.word	0x20000f84

0800d948 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d956:	2301      	movs	r3, #1
 800d958:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d06e      	beq.n	800da3e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10c      	bne.n	800d982 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96c:	b672      	cpsid	i
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	b662      	cpsie	i
 800d97c:	60fb      	str	r3, [r7, #12]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d902      	bls.n	800d992 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	61fb      	str	r3, [r7, #28]
 800d990:	e002      	b.n	800d998 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d996:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	69fa      	ldr	r2, [r7, #28]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d04d      	beq.n	800da3e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d148      	bne.n	800da3e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d9ac:	4b26      	ldr	r3, [pc, #152]	; (800da48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d10c      	bne.n	800d9d0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ba:	b672      	cpsid	i
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	b662      	cpsie	i
 800d9ca:	60bb      	str	r3, [r7, #8]
}
 800d9cc:	bf00      	nop
 800d9ce:	e7fe      	b.n	800d9ce <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	69fa      	ldr	r2, [r7, #28]
 800d9da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	db04      	blt.n	800d9ee <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	6959      	ldr	r1, [r3, #20]
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4a13      	ldr	r2, [pc, #76]	; (800da4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d9fe:	4413      	add	r3, r2
 800da00:	4299      	cmp	r1, r3
 800da02:	d11c      	bne.n	800da3e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	3304      	adds	r3, #4
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fd fe5b 	bl	800b6c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da12:	4b0f      	ldr	r3, [pc, #60]	; (800da50 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	429a      	cmp	r2, r3
 800da18:	d903      	bls.n	800da22 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1e:	4a0c      	ldr	r2, [pc, #48]	; (800da50 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da26:	4613      	mov	r3, r2
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	4413      	add	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4a07      	ldr	r2, [pc, #28]	; (800da4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800da30:	441a      	add	r2, r3
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	3304      	adds	r3, #4
 800da36:	4619      	mov	r1, r3
 800da38:	4610      	mov	r0, r2
 800da3a:	f7fd fde6 	bl	800b60a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da3e:	bf00      	nop
 800da40:	3720      	adds	r7, #32
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	20000f80 	.word	0x20000f80
 800da4c:	20000f84 	.word	0x20000f84
 800da50:	2000145c 	.word	0x2000145c

0800da54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da54:	b480      	push	{r7}
 800da56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da58:	4b07      	ldr	r3, [pc, #28]	; (800da78 <pvTaskIncrementMutexHeldCount+0x24>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d004      	beq.n	800da6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da60:	4b05      	ldr	r3, [pc, #20]	; (800da78 <pvTaskIncrementMutexHeldCount+0x24>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da66:	3201      	adds	r2, #1
 800da68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800da6a:	4b03      	ldr	r3, [pc, #12]	; (800da78 <pvTaskIncrementMutexHeldCount+0x24>)
 800da6c:	681b      	ldr	r3, [r3, #0]
	}
 800da6e:	4618      	mov	r0, r3
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr
 800da78:	20000f80 	.word	0x20000f80

0800da7c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da86:	4b21      	ldr	r3, [pc, #132]	; (800db0c <prvAddCurrentTaskToDelayedList+0x90>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da8c:	4b20      	ldr	r3, [pc, #128]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3304      	adds	r3, #4
 800da92:	4618      	mov	r0, r3
 800da94:	f7fd fe16 	bl	800b6c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d10a      	bne.n	800dab6 <prvAddCurrentTaskToDelayedList+0x3a>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d007      	beq.n	800dab6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daa6:	4b1a      	ldr	r3, [pc, #104]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3304      	adds	r3, #4
 800daac:	4619      	mov	r1, r3
 800daae:	4819      	ldr	r0, [pc, #100]	; (800db14 <prvAddCurrentTaskToDelayedList+0x98>)
 800dab0:	f7fd fdab 	bl	800b60a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dab4:	e026      	b.n	800db04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	4413      	add	r3, r2
 800dabc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dabe:	4b14      	ldr	r3, [pc, #80]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d209      	bcs.n	800dae2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dace:	4b12      	ldr	r3, [pc, #72]	; (800db18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3304      	adds	r3, #4
 800dad8:	4619      	mov	r1, r3
 800dada:	4610      	mov	r0, r2
 800dadc:	f7fd fdb9 	bl	800b652 <vListInsert>
}
 800dae0:	e010      	b.n	800db04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dae2:	4b0e      	ldr	r3, [pc, #56]	; (800db1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	4b0a      	ldr	r3, [pc, #40]	; (800db10 <prvAddCurrentTaskToDelayedList+0x94>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3304      	adds	r3, #4
 800daec:	4619      	mov	r1, r3
 800daee:	4610      	mov	r0, r2
 800daf0:	f7fd fdaf 	bl	800b652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d202      	bcs.n	800db04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dafe:	4a08      	ldr	r2, [pc, #32]	; (800db20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	6013      	str	r3, [r2, #0]
}
 800db04:	bf00      	nop
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20001458 	.word	0x20001458
 800db10:	20000f80 	.word	0x20000f80
 800db14:	20001440 	.word	0x20001440
 800db18:	20001410 	.word	0x20001410
 800db1c:	2000140c 	.word	0x2000140c
 800db20:	20001474 	.word	0x20001474

0800db24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	; 0x28
 800db28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db2e:	f000 fbb5 	bl	800e29c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db32:	4b1d      	ldr	r3, [pc, #116]	; (800dba8 <xTimerCreateTimerTask+0x84>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d021      	beq.n	800db7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db3e:	2300      	movs	r3, #0
 800db40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db42:	1d3a      	adds	r2, r7, #4
 800db44:	f107 0108 	add.w	r1, r7, #8
 800db48:	f107 030c 	add.w	r3, r7, #12
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fd fd15 	bl	800b57c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	9202      	str	r2, [sp, #8]
 800db5a:	9301      	str	r3, [sp, #4]
 800db5c:	2302      	movs	r3, #2
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	2300      	movs	r3, #0
 800db62:	460a      	mov	r2, r1
 800db64:	4911      	ldr	r1, [pc, #68]	; (800dbac <xTimerCreateTimerTask+0x88>)
 800db66:	4812      	ldr	r0, [pc, #72]	; (800dbb0 <xTimerCreateTimerTask+0x8c>)
 800db68:	f7fe fee6 	bl	800c938 <xTaskCreateStatic>
 800db6c:	4603      	mov	r3, r0
 800db6e:	4a11      	ldr	r2, [pc, #68]	; (800dbb4 <xTimerCreateTimerTask+0x90>)
 800db70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800db72:	4b10      	ldr	r3, [pc, #64]	; (800dbb4 <xTimerCreateTimerTask+0x90>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db7a:	2301      	movs	r3, #1
 800db7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10c      	bne.n	800db9e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db88:	b672      	cpsid	i
 800db8a:	f383 8811 	msr	BASEPRI, r3
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	b662      	cpsie	i
 800db98:	613b      	str	r3, [r7, #16]
}
 800db9a:	bf00      	nop
 800db9c:	e7fe      	b.n	800db9c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800db9e:	697b      	ldr	r3, [r7, #20]
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	200014b0 	.word	0x200014b0
 800dbac:	0800f348 	.word	0x0800f348
 800dbb0:	0800de35 	.word	0x0800de35
 800dbb4:	200014b4 	.word	0x200014b4

0800dbb8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af02      	add	r7, sp, #8
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
 800dbc4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dbc6:	202c      	movs	r0, #44	; 0x2c
 800dbc8:	f000 fe04 	bl	800e7d4 <pvPortMalloc>
 800dbcc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00d      	beq.n	800dbf0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	6a3b      	ldr	r3, [r7, #32]
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	68b9      	ldr	r1, [r7, #8]
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f000 f847 	bl	800dc7e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dbf0:	697b      	ldr	r3, [r7, #20]
	}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b08a      	sub	sp, #40	; 0x28
 800dbfe:	af02      	add	r7, sp, #8
 800dc00:	60f8      	str	r0, [r7, #12]
 800dc02:	60b9      	str	r1, [r7, #8]
 800dc04:	607a      	str	r2, [r7, #4]
 800dc06:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800dc08:	232c      	movs	r3, #44	; 0x2c
 800dc0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	2b2c      	cmp	r3, #44	; 0x2c
 800dc10:	d00c      	beq.n	800dc2c <xTimerCreateStatic+0x32>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	b672      	cpsid	i
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	b662      	cpsie	i
 800dc26:	61bb      	str	r3, [r7, #24]
}
 800dc28:	bf00      	nop
 800dc2a:	e7fe      	b.n	800dc2a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dc2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10c      	bne.n	800dc4e <xTimerCreateStatic+0x54>
	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	b672      	cpsid	i
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	b662      	cpsie	i
 800dc48:	617b      	str	r3, [r7, #20]
}
 800dc4a:	bf00      	nop
 800dc4c:	e7fe      	b.n	800dc4c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc50:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00d      	beq.n	800dc74 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f000 f805 	bl	800dc7e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dc74:	69fb      	ldr	r3, [r7, #28]
	}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3720      	adds	r7, #32
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b086      	sub	sp, #24
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	607a      	str	r2, [r7, #4]
 800dc8a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10c      	bne.n	800dcac <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	b672      	cpsid	i
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	b662      	cpsie	i
 800dca6:	617b      	str	r3, [r7, #20]
}
 800dca8:	bf00      	nop
 800dcaa:	e7fe      	b.n	800dcaa <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d01e      	beq.n	800dcf0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dcb2:	f000 faf3 	bl	800e29c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	683a      	ldr	r2, [r7, #0]
 800dcc6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcca:	6a3a      	ldr	r2, [r7, #32]
 800dccc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fd fc8c 	bl	800b5f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d008      	beq.n	800dcf0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dce4:	f043 0304 	orr.w	r3, r3, #4
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dcf0:	bf00      	nop
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08a      	sub	sp, #40	; 0x28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10c      	bne.n	800dd2a <xTimerGenericCommand+0x32>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	b672      	cpsid	i
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	b662      	cpsie	i
 800dd24:	623b      	str	r3, [r7, #32]
}
 800dd26:	bf00      	nop
 800dd28:	e7fe      	b.n	800dd28 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd2a:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <xTimerGenericCommand+0x9c>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d02a      	beq.n	800dd88 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2b05      	cmp	r3, #5
 800dd42:	dc18      	bgt.n	800dd76 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd44:	f7ff fd08 	bl	800d758 <xTaskGetSchedulerState>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d109      	bne.n	800dd62 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd4e:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <xTimerGenericCommand+0x9c>)
 800dd50:	6818      	ldr	r0, [r3, #0]
 800dd52:	f107 0110 	add.w	r1, r7, #16
 800dd56:	2300      	movs	r3, #0
 800dd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd5a:	f7fd ff5b 	bl	800bc14 <xQueueGenericSend>
 800dd5e:	6278      	str	r0, [r7, #36]	; 0x24
 800dd60:	e012      	b.n	800dd88 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd62:	4b0c      	ldr	r3, [pc, #48]	; (800dd94 <xTimerGenericCommand+0x9c>)
 800dd64:	6818      	ldr	r0, [r3, #0]
 800dd66:	f107 0110 	add.w	r1, r7, #16
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f7fd ff51 	bl	800bc14 <xQueueGenericSend>
 800dd72:	6278      	str	r0, [r7, #36]	; 0x24
 800dd74:	e008      	b.n	800dd88 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd76:	4b07      	ldr	r3, [pc, #28]	; (800dd94 <xTimerGenericCommand+0x9c>)
 800dd78:	6818      	ldr	r0, [r3, #0]
 800dd7a:	f107 0110 	add.w	r1, r7, #16
 800dd7e:	2300      	movs	r3, #0
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	f7fe f84d 	bl	800be20 <xQueueGenericSendFromISR>
 800dd86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3728      	adds	r7, #40	; 0x28
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	200014b0 	.word	0x200014b0

0800dd98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af02      	add	r7, sp, #8
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda2:	4b23      	ldr	r3, [pc, #140]	; (800de30 <prvProcessExpiredTimer+0x98>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fd fc87 	bl	800b6c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddbc:	f003 0304 	and.w	r3, r3, #4
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d024      	beq.n	800de0e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	699a      	ldr	r2, [r3, #24]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	18d1      	adds	r1, r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	6978      	ldr	r0, [r7, #20]
 800ddd2:	f000 f8d3 	bl	800df7c <prvInsertTimerInActiveList>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d021      	beq.n	800de20 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dddc:	2300      	movs	r3, #0
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	2300      	movs	r3, #0
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	2100      	movs	r1, #0
 800dde6:	6978      	ldr	r0, [r7, #20]
 800dde8:	f7ff ff86 	bl	800dcf8 <xTimerGenericCommand>
 800ddec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d115      	bne.n	800de20 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf8:	b672      	cpsid	i
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	b662      	cpsie	i
 800de08:	60fb      	str	r3, [r7, #12]
}
 800de0a:	bf00      	nop
 800de0c:	e7fe      	b.n	800de0c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de14:	f023 0301 	bic.w	r3, r3, #1
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	6978      	ldr	r0, [r7, #20]
 800de26:	4798      	blx	r3
}
 800de28:	bf00      	nop
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	200014a8 	.word	0x200014a8

0800de34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de3c:	f107 0308 	add.w	r3, r7, #8
 800de40:	4618      	mov	r0, r3
 800de42:	f000 f857 	bl	800def4 <prvGetNextExpireTime>
 800de46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	4619      	mov	r1, r3
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 f803 	bl	800de58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de52:	f000 f8d5 	bl	800e000 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de56:	e7f1      	b.n	800de3c <prvTimerTask+0x8>

0800de58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de62:	f7ff f857 	bl	800cf14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de66:	f107 0308 	add.w	r3, r7, #8
 800de6a:	4618      	mov	r0, r3
 800de6c:	f000 f866 	bl	800df3c <prvSampleTimeNow>
 800de70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d130      	bne.n	800deda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10a      	bne.n	800de94 <prvProcessTimerOrBlockTask+0x3c>
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	429a      	cmp	r2, r3
 800de84:	d806      	bhi.n	800de94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800de86:	f7ff f853 	bl	800cf30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800de8a:	68f9      	ldr	r1, [r7, #12]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff ff83 	bl	800dd98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800de92:	e024      	b.n	800dede <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d008      	beq.n	800deac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de9a:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <prvProcessTimerOrBlockTask+0x90>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <prvProcessTimerOrBlockTask+0x50>
 800dea4:	2301      	movs	r3, #1
 800dea6:	e000      	b.n	800deaa <prvProcessTimerOrBlockTask+0x52>
 800dea8:	2300      	movs	r3, #0
 800deaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800deac:	4b0f      	ldr	r3, [pc, #60]	; (800deec <prvProcessTimerOrBlockTask+0x94>)
 800deae:	6818      	ldr	r0, [r3, #0]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	683a      	ldr	r2, [r7, #0]
 800deb8:	4619      	mov	r1, r3
 800deba:	f7fe fd09 	bl	800c8d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800debe:	f7ff f837 	bl	800cf30 <xTaskResumeAll>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10a      	bne.n	800dede <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dec8:	4b09      	ldr	r3, [pc, #36]	; (800def0 <prvProcessTimerOrBlockTask+0x98>)
 800deca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dece:	601a      	str	r2, [r3, #0]
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	f3bf 8f6f 	isb	sy
}
 800ded8:	e001      	b.n	800dede <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800deda:	f7ff f829 	bl	800cf30 <xTaskResumeAll>
}
 800dede:	bf00      	nop
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	200014ac 	.word	0x200014ac
 800deec:	200014b0 	.word	0x200014b0
 800def0:	e000ed04 	.word	0xe000ed04

0800def4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800defc:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <prvGetNextExpireTime+0x44>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <prvGetNextExpireTime+0x16>
 800df06:	2201      	movs	r2, #1
 800df08:	e000      	b.n	800df0c <prvGetNextExpireTime+0x18>
 800df0a:	2200      	movs	r2, #0
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d105      	bne.n	800df24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df18:	4b07      	ldr	r3, [pc, #28]	; (800df38 <prvGetNextExpireTime+0x44>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	e001      	b.n	800df28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df28:	68fb      	ldr	r3, [r7, #12]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	200014a8 	.word	0x200014a8

0800df3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df44:	f7ff f894 	bl	800d070 <xTaskGetTickCount>
 800df48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df4a:	4b0b      	ldr	r3, [pc, #44]	; (800df78 <prvSampleTimeNow+0x3c>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	429a      	cmp	r2, r3
 800df52:	d205      	bcs.n	800df60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df54:	f000 f93c 	bl	800e1d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	601a      	str	r2, [r3, #0]
 800df5e:	e002      	b.n	800df66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df66:	4a04      	ldr	r2, [pc, #16]	; (800df78 <prvSampleTimeNow+0x3c>)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df6c:	68fb      	ldr	r3, [r7, #12]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	200014b8 	.word	0x200014b8

0800df7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
 800df88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800df8a:	2300      	movs	r3, #0
 800df8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d812      	bhi.n	800dfc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d302      	bcc.n	800dfb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	617b      	str	r3, [r7, #20]
 800dfb4:	e01b      	b.n	800dfee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dfb6:	4b10      	ldr	r3, [pc, #64]	; (800dff8 <prvInsertTimerInActiveList+0x7c>)
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	f7fd fb46 	bl	800b652 <vListInsert>
 800dfc6:	e012      	b.n	800dfee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d206      	bcs.n	800dfde <prvInsertTimerInActiveList+0x62>
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d302      	bcc.n	800dfde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	617b      	str	r3, [r7, #20]
 800dfdc:	e007      	b.n	800dfee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfde:	4b07      	ldr	r3, [pc, #28]	; (800dffc <prvInsertTimerInActiveList+0x80>)
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7fd fb32 	bl	800b652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dfee:	697b      	ldr	r3, [r7, #20]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	200014ac 	.word	0x200014ac
 800dffc:	200014a8 	.word	0x200014a8

0800e000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b08e      	sub	sp, #56	; 0x38
 800e004:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e006:	e0d0      	b.n	800e1aa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	da1a      	bge.n	800e044 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e00e:	1d3b      	adds	r3, r7, #4
 800e010:	3304      	adds	r3, #4
 800e012:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10c      	bne.n	800e034 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	b672      	cpsid	i
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	b662      	cpsie	i
 800e02e:	61fb      	str	r3, [r7, #28]
}
 800e030:	bf00      	nop
 800e032:	e7fe      	b.n	800e032 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e03a:	6850      	ldr	r0, [r2, #4]
 800e03c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e03e:	6892      	ldr	r2, [r2, #8]
 800e040:	4611      	mov	r1, r2
 800e042:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b00      	cmp	r3, #0
 800e048:	f2c0 80ae 	blt.w	800e1a8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d004      	beq.n	800e062 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	3304      	adds	r3, #4
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fd fb31 	bl	800b6c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e062:	463b      	mov	r3, r7
 800e064:	4618      	mov	r0, r3
 800e066:	f7ff ff69 	bl	800df3c <prvSampleTimeNow>
 800e06a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b09      	cmp	r3, #9
 800e070:	f200 809b 	bhi.w	800e1aa <prvProcessReceivedCommands+0x1aa>
 800e074:	a201      	add	r2, pc, #4	; (adr r2, 800e07c <prvProcessReceivedCommands+0x7c>)
 800e076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e07a:	bf00      	nop
 800e07c:	0800e0a5 	.word	0x0800e0a5
 800e080:	0800e0a5 	.word	0x0800e0a5
 800e084:	0800e0a5 	.word	0x0800e0a5
 800e088:	0800e11d 	.word	0x0800e11d
 800e08c:	0800e131 	.word	0x0800e131
 800e090:	0800e17f 	.word	0x0800e17f
 800e094:	0800e0a5 	.word	0x0800e0a5
 800e098:	0800e0a5 	.word	0x0800e0a5
 800e09c:	0800e11d 	.word	0x0800e11d
 800e0a0:	0800e131 	.word	0x0800e131
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0aa:	f043 0301 	orr.w	r3, r3, #1
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	18d1      	adds	r1, r2, r3
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0c4:	f7ff ff5a 	bl	800df7c <prvInsertTimerInActiveList>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d06d      	beq.n	800e1aa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0dc:	f003 0304 	and.w	r3, r3, #4
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d062      	beq.n	800e1aa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	441a      	add	r2, r3
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0f6:	f7ff fdff 	bl	800dcf8 <xTimerGenericCommand>
 800e0fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d153      	bne.n	800e1aa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800e102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e106:	b672      	cpsid	i
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	b662      	cpsie	i
 800e116:	61bb      	str	r3, [r7, #24]
}
 800e118:	bf00      	nop
 800e11a:	e7fe      	b.n	800e11a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e122:	f023 0301 	bic.w	r3, r3, #1
 800e126:	b2da      	uxtb	r2, r3
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e12e:	e03c      	b.n	800e1aa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e136:	f043 0301 	orr.w	r3, r3, #1
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10c      	bne.n	800e16a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	b672      	cpsid	i
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	b662      	cpsie	i
 800e164:	617b      	str	r3, [r7, #20]
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	699a      	ldr	r2, [r3, #24]
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	18d1      	adds	r1, r2, r3
 800e172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e178:	f7ff ff00 	bl	800df7c <prvInsertTimerInActiveList>
					break;
 800e17c:	e015      	b.n	800e1aa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e184:	f003 0302 	and.w	r3, r3, #2
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d103      	bne.n	800e194 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800e18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e18e:	f000 fbeb 	bl	800e968 <vPortFree>
 800e192:	e00a      	b.n	800e1aa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e19a:	f023 0301 	bic.w	r3, r3, #1
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1a6:	e000      	b.n	800e1aa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e1a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1aa:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <prvProcessReceivedCommands+0x1cc>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	1d39      	adds	r1, r7, #4
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fd ff6a 	bl	800c08c <xQueueReceive>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f47f af24 	bne.w	800e008 <prvProcessReceivedCommands+0x8>
	}
}
 800e1c0:	bf00      	nop
 800e1c2:	bf00      	nop
 800e1c4:	3730      	adds	r7, #48	; 0x30
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200014b0 	.word	0x200014b0

0800e1d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1d6:	e04a      	b.n	800e26e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1d8:	4b2e      	ldr	r3, [pc, #184]	; (800e294 <prvSwitchTimerLists+0xc4>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e2:	4b2c      	ldr	r3, [pc, #176]	; (800e294 <prvSwitchTimerLists+0xc4>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fd fa67 	bl	800b6c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e204:	f003 0304 	and.w	r3, r3, #4
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d030      	beq.n	800e26e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	699b      	ldr	r3, [r3, #24]
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	4413      	add	r3, r2
 800e214:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d90e      	bls.n	800e23c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e22a:	4b1a      	ldr	r3, [pc, #104]	; (800e294 <prvSwitchTimerLists+0xc4>)
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3304      	adds	r3, #4
 800e232:	4619      	mov	r1, r3
 800e234:	4610      	mov	r0, r2
 800e236:	f7fd fa0c 	bl	800b652 <vListInsert>
 800e23a:	e018      	b.n	800e26e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e23c:	2300      	movs	r3, #0
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	2300      	movs	r3, #0
 800e242:	693a      	ldr	r2, [r7, #16]
 800e244:	2100      	movs	r1, #0
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f7ff fd56 	bl	800dcf8 <xTimerGenericCommand>
 800e24c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10c      	bne.n	800e26e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e258:	b672      	cpsid	i
 800e25a:	f383 8811 	msr	BASEPRI, r3
 800e25e:	f3bf 8f6f 	isb	sy
 800e262:	f3bf 8f4f 	dsb	sy
 800e266:	b662      	cpsie	i
 800e268:	603b      	str	r3, [r7, #0]
}
 800e26a:	bf00      	nop
 800e26c:	e7fe      	b.n	800e26c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e26e:	4b09      	ldr	r3, [pc, #36]	; (800e294 <prvSwitchTimerLists+0xc4>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1af      	bne.n	800e1d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e278:	4b06      	ldr	r3, [pc, #24]	; (800e294 <prvSwitchTimerLists+0xc4>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e27e:	4b06      	ldr	r3, [pc, #24]	; (800e298 <prvSwitchTimerLists+0xc8>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a04      	ldr	r2, [pc, #16]	; (800e294 <prvSwitchTimerLists+0xc4>)
 800e284:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e286:	4a04      	ldr	r2, [pc, #16]	; (800e298 <prvSwitchTimerLists+0xc8>)
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	6013      	str	r3, [r2, #0]
}
 800e28c:	bf00      	nop
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	200014a8 	.word	0x200014a8
 800e298:	200014ac 	.word	0x200014ac

0800e29c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2a2:	f000 f96b 	bl	800e57c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2a6:	4b15      	ldr	r3, [pc, #84]	; (800e2fc <prvCheckForValidListAndQueue+0x60>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d120      	bne.n	800e2f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2ae:	4814      	ldr	r0, [pc, #80]	; (800e300 <prvCheckForValidListAndQueue+0x64>)
 800e2b0:	f7fd f97e 	bl	800b5b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2b4:	4813      	ldr	r0, [pc, #76]	; (800e304 <prvCheckForValidListAndQueue+0x68>)
 800e2b6:	f7fd f97b 	bl	800b5b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2ba:	4b13      	ldr	r3, [pc, #76]	; (800e308 <prvCheckForValidListAndQueue+0x6c>)
 800e2bc:	4a10      	ldr	r2, [pc, #64]	; (800e300 <prvCheckForValidListAndQueue+0x64>)
 800e2be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2c0:	4b12      	ldr	r3, [pc, #72]	; (800e30c <prvCheckForValidListAndQueue+0x70>)
 800e2c2:	4a10      	ldr	r2, [pc, #64]	; (800e304 <prvCheckForValidListAndQueue+0x68>)
 800e2c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	4b11      	ldr	r3, [pc, #68]	; (800e310 <prvCheckForValidListAndQueue+0x74>)
 800e2cc:	4a11      	ldr	r2, [pc, #68]	; (800e314 <prvCheckForValidListAndQueue+0x78>)
 800e2ce:	2110      	movs	r1, #16
 800e2d0:	200a      	movs	r0, #10
 800e2d2:	f7fd fa8b 	bl	800b7ec <xQueueGenericCreateStatic>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	4a08      	ldr	r2, [pc, #32]	; (800e2fc <prvCheckForValidListAndQueue+0x60>)
 800e2da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2dc:	4b07      	ldr	r3, [pc, #28]	; (800e2fc <prvCheckForValidListAndQueue+0x60>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2e4:	4b05      	ldr	r3, [pc, #20]	; (800e2fc <prvCheckForValidListAndQueue+0x60>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	490b      	ldr	r1, [pc, #44]	; (800e318 <prvCheckForValidListAndQueue+0x7c>)
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe fa9c 	bl	800c828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2f0:	f000 f978 	bl	800e5e4 <vPortExitCritical>
}
 800e2f4:	bf00      	nop
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	200014b0 	.word	0x200014b0
 800e300:	20001480 	.word	0x20001480
 800e304:	20001494 	.word	0x20001494
 800e308:	200014a8 	.word	0x200014a8
 800e30c:	200014ac 	.word	0x200014ac
 800e310:	2000155c 	.word	0x2000155c
 800e314:	200014bc 	.word	0x200014bc
 800e318:	0800f350 	.word	0x0800f350

0800e31c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10c      	bne.n	800e348 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	b672      	cpsid	i
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	b662      	cpsie	i
 800e342:	60fb      	str	r3, [r7, #12]
}
 800e344:	bf00      	nop
 800e346:	e7fe      	b.n	800e346 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800e348:	f000 f918 	bl	800e57c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e352:	f000 f947 	bl	800e5e4 <vPortExitCritical>

	return pvReturn;
 800e356:	693b      	ldr	r3, [r7, #16]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3718      	adds	r7, #24
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e360:	b480      	push	{r7}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3b04      	subs	r3, #4
 800e370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3b04      	subs	r3, #4
 800e37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	f023 0201 	bic.w	r2, r3, #1
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3b04      	subs	r3, #4
 800e38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e390:	4a0c      	ldr	r2, [pc, #48]	; (800e3c4 <pxPortInitialiseStack+0x64>)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3b14      	subs	r3, #20
 800e39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3b04      	subs	r3, #4
 800e3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f06f 0202 	mvn.w	r2, #2
 800e3ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3b20      	subs	r3, #32
 800e3b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	0800e3c9 	.word	0x0800e3c9

0800e3c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3d2:	4b14      	ldr	r3, [pc, #80]	; (800e424 <prvTaskExitError+0x5c>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3da:	d00c      	beq.n	800e3f6 <prvTaskExitError+0x2e>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e0:	b672      	cpsid	i
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	b662      	cpsie	i
 800e3f0:	60fb      	str	r3, [r7, #12]
}
 800e3f2:	bf00      	nop
 800e3f4:	e7fe      	b.n	800e3f4 <prvTaskExitError+0x2c>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fa:	b672      	cpsid	i
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	b662      	cpsie	i
 800e40a:	60bb      	str	r3, [r7, #8]
}
 800e40c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e40e:	bf00      	nop
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d0fc      	beq.n	800e410 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e416:	bf00      	nop
 800e418:	bf00      	nop
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	20000010 	.word	0x20000010
	...

0800e430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e430:	4b07      	ldr	r3, [pc, #28]	; (800e450 <pxCurrentTCBConst2>)
 800e432:	6819      	ldr	r1, [r3, #0]
 800e434:	6808      	ldr	r0, [r1, #0]
 800e436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	f380 8809 	msr	PSP, r0
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f04f 0000 	mov.w	r0, #0
 800e446:	f380 8811 	msr	BASEPRI, r0
 800e44a:	4770      	bx	lr
 800e44c:	f3af 8000 	nop.w

0800e450 <pxCurrentTCBConst2>:
 800e450:	20000f80 	.word	0x20000f80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e454:	bf00      	nop
 800e456:	bf00      	nop

0800e458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e458:	4808      	ldr	r0, [pc, #32]	; (800e47c <prvPortStartFirstTask+0x24>)
 800e45a:	6800      	ldr	r0, [r0, #0]
 800e45c:	6800      	ldr	r0, [r0, #0]
 800e45e:	f380 8808 	msr	MSP, r0
 800e462:	f04f 0000 	mov.w	r0, #0
 800e466:	f380 8814 	msr	CONTROL, r0
 800e46a:	b662      	cpsie	i
 800e46c:	b661      	cpsie	f
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	df00      	svc	0
 800e478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e47a:	bf00      	nop
 800e47c:	e000ed08 	.word	0xe000ed08

0800e480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e486:	4b37      	ldr	r3, [pc, #220]	; (800e564 <xPortStartScheduler+0xe4>)
 800e488:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	22ff      	movs	r2, #255	; 0xff
 800e496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	4b2f      	ldr	r3, [pc, #188]	; (800e568 <xPortStartScheduler+0xe8>)
 800e4ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4ae:	4b2f      	ldr	r3, [pc, #188]	; (800e56c <xPortStartScheduler+0xec>)
 800e4b0:	2207      	movs	r2, #7
 800e4b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4b4:	e009      	b.n	800e4ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e4b6:	4b2d      	ldr	r3, [pc, #180]	; (800e56c <xPortStartScheduler+0xec>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	4a2b      	ldr	r2, [pc, #172]	; (800e56c <xPortStartScheduler+0xec>)
 800e4be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4c0:	78fb      	ldrb	r3, [r7, #3]
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	005b      	lsls	r3, r3, #1
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4ca:	78fb      	ldrb	r3, [r7, #3]
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4d2:	2b80      	cmp	r3, #128	; 0x80
 800e4d4:	d0ef      	beq.n	800e4b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4d6:	4b25      	ldr	r3, [pc, #148]	; (800e56c <xPortStartScheduler+0xec>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f1c3 0307 	rsb	r3, r3, #7
 800e4de:	2b04      	cmp	r3, #4
 800e4e0:	d00c      	beq.n	800e4fc <xPortStartScheduler+0x7c>
	__asm volatile
 800e4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e6:	b672      	cpsid	i
 800e4e8:	f383 8811 	msr	BASEPRI, r3
 800e4ec:	f3bf 8f6f 	isb	sy
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	b662      	cpsie	i
 800e4f6:	60bb      	str	r3, [r7, #8]
}
 800e4f8:	bf00      	nop
 800e4fa:	e7fe      	b.n	800e4fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4fc:	4b1b      	ldr	r3, [pc, #108]	; (800e56c <xPortStartScheduler+0xec>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	021b      	lsls	r3, r3, #8
 800e502:	4a1a      	ldr	r2, [pc, #104]	; (800e56c <xPortStartScheduler+0xec>)
 800e504:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e506:	4b19      	ldr	r3, [pc, #100]	; (800e56c <xPortStartScheduler+0xec>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e50e:	4a17      	ldr	r2, [pc, #92]	; (800e56c <xPortStartScheduler+0xec>)
 800e510:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	b2da      	uxtb	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e51a:	4b15      	ldr	r3, [pc, #84]	; (800e570 <xPortStartScheduler+0xf0>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a14      	ldr	r2, [pc, #80]	; (800e570 <xPortStartScheduler+0xf0>)
 800e520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e524:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e526:	4b12      	ldr	r3, [pc, #72]	; (800e570 <xPortStartScheduler+0xf0>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a11      	ldr	r2, [pc, #68]	; (800e570 <xPortStartScheduler+0xf0>)
 800e52c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e530:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e532:	f000 f8dd 	bl	800e6f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e536:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <xPortStartScheduler+0xf4>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e53c:	f000 f8fc 	bl	800e738 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e540:	4b0d      	ldr	r3, [pc, #52]	; (800e578 <xPortStartScheduler+0xf8>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a0c      	ldr	r2, [pc, #48]	; (800e578 <xPortStartScheduler+0xf8>)
 800e546:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e54a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e54c:	f7ff ff84 	bl	800e458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e550:	f7fe fe6c 	bl	800d22c <vTaskSwitchContext>
	prvTaskExitError();
 800e554:	f7ff ff38 	bl	800e3c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	e000e400 	.word	0xe000e400
 800e568:	200015ac 	.word	0x200015ac
 800e56c:	200015b0 	.word	0x200015b0
 800e570:	e000ed20 	.word	0xe000ed20
 800e574:	20000010 	.word	0x20000010
 800e578:	e000ef34 	.word	0xe000ef34

0800e57c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	b672      	cpsid	i
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	b662      	cpsie	i
 800e596:	607b      	str	r3, [r7, #4]
}
 800e598:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e59a:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <vPortEnterCritical+0x60>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	4a0e      	ldr	r2, [pc, #56]	; (800e5dc <vPortEnterCritical+0x60>)
 800e5a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5a4:	4b0d      	ldr	r3, [pc, #52]	; (800e5dc <vPortEnterCritical+0x60>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d111      	bne.n	800e5d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5ac:	4b0c      	ldr	r3, [pc, #48]	; (800e5e0 <vPortEnterCritical+0x64>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00c      	beq.n	800e5d0 <vPortEnterCritical+0x54>
	__asm volatile
 800e5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ba:	b672      	cpsid	i
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	b662      	cpsie	i
 800e5ca:	603b      	str	r3, [r7, #0]
}
 800e5cc:	bf00      	nop
 800e5ce:	e7fe      	b.n	800e5ce <vPortEnterCritical+0x52>
	}
}
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	20000010 	.word	0x20000010
 800e5e0:	e000ed04 	.word	0xe000ed04

0800e5e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5ea:	4b13      	ldr	r3, [pc, #76]	; (800e638 <vPortExitCritical+0x54>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10c      	bne.n	800e60c <vPortExitCritical+0x28>
	__asm volatile
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	b672      	cpsid	i
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	b662      	cpsie	i
 800e606:	607b      	str	r3, [r7, #4]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e60c:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <vPortExitCritical+0x54>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	3b01      	subs	r3, #1
 800e612:	4a09      	ldr	r2, [pc, #36]	; (800e638 <vPortExitCritical+0x54>)
 800e614:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e616:	4b08      	ldr	r3, [pc, #32]	; (800e638 <vPortExitCritical+0x54>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d105      	bne.n	800e62a <vPortExitCritical+0x46>
 800e61e:	2300      	movs	r3, #0
 800e620:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	f383 8811 	msr	BASEPRI, r3
}
 800e628:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e62a:	bf00      	nop
 800e62c:	370c      	adds	r7, #12
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	20000010 	.word	0x20000010
 800e63c:	00000000 	.word	0x00000000

0800e640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e640:	f3ef 8009 	mrs	r0, PSP
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	4b15      	ldr	r3, [pc, #84]	; (800e6a0 <pxCurrentTCBConst>)
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	f01e 0f10 	tst.w	lr, #16
 800e650:	bf08      	it	eq
 800e652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65a:	6010      	str	r0, [r2, #0]
 800e65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e660:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e664:	b672      	cpsid	i
 800e666:	f380 8811 	msr	BASEPRI, r0
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	b662      	cpsie	i
 800e674:	f7fe fdda 	bl	800d22c <vTaskSwitchContext>
 800e678:	f04f 0000 	mov.w	r0, #0
 800e67c:	f380 8811 	msr	BASEPRI, r0
 800e680:	bc09      	pop	{r0, r3}
 800e682:	6819      	ldr	r1, [r3, #0]
 800e684:	6808      	ldr	r0, [r1, #0]
 800e686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68a:	f01e 0f10 	tst.w	lr, #16
 800e68e:	bf08      	it	eq
 800e690:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e694:	f380 8809 	msr	PSP, r0
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop

0800e6a0 <pxCurrentTCBConst>:
 800e6a0:	20000f80 	.word	0x20000f80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6a4:	bf00      	nop
 800e6a6:	bf00      	nop

0800e6a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	b672      	cpsid	i
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	b662      	cpsie	i
 800e6c2:	607b      	str	r3, [r7, #4]
}
 800e6c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6c6:	f7fe fcf5 	bl	800d0b4 <xTaskIncrementTick>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d003      	beq.n	800e6d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6d0:	4b06      	ldr	r3, [pc, #24]	; (800e6ec <SysTick_Handler+0x44>)
 800e6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	2300      	movs	r3, #0
 800e6da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	f383 8811 	msr	BASEPRI, r3
}
 800e6e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	e000ed04 	.word	0xe000ed04

0800e6f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6f4:	4b0b      	ldr	r3, [pc, #44]	; (800e724 <vPortSetupTimerInterrupt+0x34>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6fa:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <vPortSetupTimerInterrupt+0x38>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e700:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <vPortSetupTimerInterrupt+0x3c>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a0a      	ldr	r2, [pc, #40]	; (800e730 <vPortSetupTimerInterrupt+0x40>)
 800e706:	fba2 2303 	umull	r2, r3, r2, r3
 800e70a:	099b      	lsrs	r3, r3, #6
 800e70c:	4a09      	ldr	r2, [pc, #36]	; (800e734 <vPortSetupTimerInterrupt+0x44>)
 800e70e:	3b01      	subs	r3, #1
 800e710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e712:	4b04      	ldr	r3, [pc, #16]	; (800e724 <vPortSetupTimerInterrupt+0x34>)
 800e714:	2207      	movs	r2, #7
 800e716:	601a      	str	r2, [r3, #0]
}
 800e718:	bf00      	nop
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	e000e010 	.word	0xe000e010
 800e728:	e000e018 	.word	0xe000e018
 800e72c:	20000004 	.word	0x20000004
 800e730:	10624dd3 	.word	0x10624dd3
 800e734:	e000e014 	.word	0xe000e014

0800e738 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e738:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e748 <vPortEnableVFP+0x10>
 800e73c:	6801      	ldr	r1, [r0, #0]
 800e73e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e742:	6001      	str	r1, [r0, #0]
 800e744:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e746:	bf00      	nop
 800e748:	e000ed88 	.word	0xe000ed88

0800e74c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e752:	f3ef 8305 	mrs	r3, IPSR
 800e756:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2b0f      	cmp	r3, #15
 800e75c:	d916      	bls.n	800e78c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e75e:	4a19      	ldr	r2, [pc, #100]	; (800e7c4 <vPortValidateInterruptPriority+0x78>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4413      	add	r3, r2
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e768:	4b17      	ldr	r3, [pc, #92]	; (800e7c8 <vPortValidateInterruptPriority+0x7c>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	7afa      	ldrb	r2, [r7, #11]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d20c      	bcs.n	800e78c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	b672      	cpsid	i
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	b662      	cpsie	i
 800e786:	607b      	str	r3, [r7, #4]
}
 800e788:	bf00      	nop
 800e78a:	e7fe      	b.n	800e78a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e78c:	4b0f      	ldr	r3, [pc, #60]	; (800e7cc <vPortValidateInterruptPriority+0x80>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e794:	4b0e      	ldr	r3, [pc, #56]	; (800e7d0 <vPortValidateInterruptPriority+0x84>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d90c      	bls.n	800e7b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a0:	b672      	cpsid	i
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	b662      	cpsie	i
 800e7b0:	603b      	str	r3, [r7, #0]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <vPortValidateInterruptPriority+0x68>
	}
 800e7b6:	bf00      	nop
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	e000e3f0 	.word	0xe000e3f0
 800e7c8:	200015ac 	.word	0x200015ac
 800e7cc:	e000ed0c 	.word	0xe000ed0c
 800e7d0:	200015b0 	.word	0x200015b0

0800e7d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b08a      	sub	sp, #40	; 0x28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7e0:	f7fe fb98 	bl	800cf14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7e4:	4b5b      	ldr	r3, [pc, #364]	; (800e954 <pvPortMalloc+0x180>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d101      	bne.n	800e7f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7ec:	f000 f91a 	bl	800ea24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7f0:	4b59      	ldr	r3, [pc, #356]	; (800e958 <pvPortMalloc+0x184>)
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f040 8092 	bne.w	800e922 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d01f      	beq.n	800e844 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e804:	2208      	movs	r2, #8
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f003 0307 	and.w	r3, r3, #7
 800e812:	2b00      	cmp	r3, #0
 800e814:	d016      	beq.n	800e844 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f023 0307 	bic.w	r3, r3, #7
 800e81c:	3308      	adds	r3, #8
 800e81e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f003 0307 	and.w	r3, r3, #7
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00c      	beq.n	800e844 <pvPortMalloc+0x70>
	__asm volatile
 800e82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82e:	b672      	cpsid	i
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	b662      	cpsie	i
 800e83e:	617b      	str	r3, [r7, #20]
}
 800e840:	bf00      	nop
 800e842:	e7fe      	b.n	800e842 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d06b      	beq.n	800e922 <pvPortMalloc+0x14e>
 800e84a:	4b44      	ldr	r3, [pc, #272]	; (800e95c <pvPortMalloc+0x188>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	429a      	cmp	r2, r3
 800e852:	d866      	bhi.n	800e922 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e854:	4b42      	ldr	r3, [pc, #264]	; (800e960 <pvPortMalloc+0x18c>)
 800e856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e858:	4b41      	ldr	r3, [pc, #260]	; (800e960 <pvPortMalloc+0x18c>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e85e:	e004      	b.n	800e86a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d903      	bls.n	800e87c <pvPortMalloc+0xa8>
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1f1      	bne.n	800e860 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e87c:	4b35      	ldr	r3, [pc, #212]	; (800e954 <pvPortMalloc+0x180>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e882:	429a      	cmp	r2, r3
 800e884:	d04d      	beq.n	800e922 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2208      	movs	r2, #8
 800e88c:	4413      	add	r3, r2
 800e88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	6a3b      	ldr	r3, [r7, #32]
 800e896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	1ad2      	subs	r2, r2, r3
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	005b      	lsls	r3, r3, #1
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d921      	bls.n	800e8ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00c      	beq.n	800e8d4 <pvPortMalloc+0x100>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	b672      	cpsid	i
 800e8c0:	f383 8811 	msr	BASEPRI, r3
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	b662      	cpsie	i
 800e8ce:	613b      	str	r3, [r7, #16]
}
 800e8d0:	bf00      	nop
 800e8d2:	e7fe      	b.n	800e8d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	1ad2      	subs	r2, r2, r3
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8e6:	69b8      	ldr	r0, [r7, #24]
 800e8e8:	f000 f8fe 	bl	800eae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8ec:	4b1b      	ldr	r3, [pc, #108]	; (800e95c <pvPortMalloc+0x188>)
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	4a19      	ldr	r2, [pc, #100]	; (800e95c <pvPortMalloc+0x188>)
 800e8f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8fa:	4b18      	ldr	r3, [pc, #96]	; (800e95c <pvPortMalloc+0x188>)
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	4b19      	ldr	r3, [pc, #100]	; (800e964 <pvPortMalloc+0x190>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d203      	bcs.n	800e90e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <pvPortMalloc+0x188>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a16      	ldr	r2, [pc, #88]	; (800e964 <pvPortMalloc+0x190>)
 800e90c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e910:	685a      	ldr	r2, [r3, #4]
 800e912:	4b11      	ldr	r3, [pc, #68]	; (800e958 <pvPortMalloc+0x184>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	431a      	orrs	r2, r3
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	2200      	movs	r2, #0
 800e920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e922:	f7fe fb05 	bl	800cf30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	f003 0307 	and.w	r3, r3, #7
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00c      	beq.n	800e94a <pvPortMalloc+0x176>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e934:	b672      	cpsid	i
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	b662      	cpsie	i
 800e944:	60fb      	str	r3, [r7, #12]
}
 800e946:	bf00      	nop
 800e948:	e7fe      	b.n	800e948 <pvPortMalloc+0x174>
	return pvReturn;
 800e94a:	69fb      	ldr	r3, [r7, #28]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3728      	adds	r7, #40	; 0x28
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	20009e74 	.word	0x20009e74
 800e958:	20009e80 	.word	0x20009e80
 800e95c:	20009e78 	.word	0x20009e78
 800e960:	20009e6c 	.word	0x20009e6c
 800e964:	20009e7c 	.word	0x20009e7c

0800e968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d04c      	beq.n	800ea14 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e97a:	2308      	movs	r3, #8
 800e97c:	425b      	negs	r3, r3
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	4413      	add	r3, r2
 800e982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	685a      	ldr	r2, [r3, #4]
 800e98c:	4b23      	ldr	r3, [pc, #140]	; (800ea1c <vPortFree+0xb4>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4013      	ands	r3, r2
 800e992:	2b00      	cmp	r3, #0
 800e994:	d10c      	bne.n	800e9b0 <vPortFree+0x48>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99a:	b672      	cpsid	i
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	b662      	cpsie	i
 800e9aa:	60fb      	str	r3, [r7, #12]
}
 800e9ac:	bf00      	nop
 800e9ae:	e7fe      	b.n	800e9ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00c      	beq.n	800e9d2 <vPortFree+0x6a>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	b672      	cpsid	i
 800e9be:	f383 8811 	msr	BASEPRI, r3
 800e9c2:	f3bf 8f6f 	isb	sy
 800e9c6:	f3bf 8f4f 	dsb	sy
 800e9ca:	b662      	cpsie	i
 800e9cc:	60bb      	str	r3, [r7, #8]
}
 800e9ce:	bf00      	nop
 800e9d0:	e7fe      	b.n	800e9d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <vPortFree+0xb4>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4013      	ands	r3, r2
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d019      	beq.n	800ea14 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d115      	bne.n	800ea14 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	685a      	ldr	r2, [r3, #4]
 800e9ec:	4b0b      	ldr	r3, [pc, #44]	; (800ea1c <vPortFree+0xb4>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	43db      	mvns	r3, r3
 800e9f2:	401a      	ands	r2, r3
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9f8:	f7fe fa8c 	bl	800cf14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	685a      	ldr	r2, [r3, #4]
 800ea00:	4b07      	ldr	r3, [pc, #28]	; (800ea20 <vPortFree+0xb8>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4413      	add	r3, r2
 800ea06:	4a06      	ldr	r2, [pc, #24]	; (800ea20 <vPortFree+0xb8>)
 800ea08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea0a:	6938      	ldr	r0, [r7, #16]
 800ea0c:	f000 f86c 	bl	800eae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ea10:	f7fe fa8e 	bl	800cf30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea14:	bf00      	nop
 800ea16:	3718      	adds	r7, #24
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20009e80 	.word	0x20009e80
 800ea20:	20009e78 	.word	0x20009e78

0800ea24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea2a:	f648 03b8 	movw	r3, #35000	; 0x88b8
 800ea2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea30:	4b27      	ldr	r3, [pc, #156]	; (800ead0 <prvHeapInit+0xac>)
 800ea32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f003 0307 	and.w	r3, r3, #7
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00c      	beq.n	800ea58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	3307      	adds	r3, #7
 800ea42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f023 0307 	bic.w	r3, r3, #7
 800ea4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	4a1f      	ldr	r2, [pc, #124]	; (800ead0 <prvHeapInit+0xac>)
 800ea54:	4413      	add	r3, r2
 800ea56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea5c:	4a1d      	ldr	r2, [pc, #116]	; (800ead4 <prvHeapInit+0xb0>)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea62:	4b1c      	ldr	r3, [pc, #112]	; (800ead4 <prvHeapInit+0xb0>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea70:	2208      	movs	r2, #8
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	1a9b      	subs	r3, r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 0307 	bic.w	r3, r3, #7
 800ea7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4a15      	ldr	r2, [pc, #84]	; (800ead8 <prvHeapInit+0xb4>)
 800ea84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea86:	4b14      	ldr	r3, [pc, #80]	; (800ead8 <prvHeapInit+0xb4>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea8e:	4b12      	ldr	r3, [pc, #72]	; (800ead8 <prvHeapInit+0xb4>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	1ad2      	subs	r2, r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eaa4:	4b0c      	ldr	r3, [pc, #48]	; (800ead8 <prvHeapInit+0xb4>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	4a0a      	ldr	r2, [pc, #40]	; (800eadc <prvHeapInit+0xb8>)
 800eab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	4a09      	ldr	r2, [pc, #36]	; (800eae0 <prvHeapInit+0xbc>)
 800eaba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eabc:	4b09      	ldr	r3, [pc, #36]	; (800eae4 <prvHeapInit+0xc0>)
 800eabe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eac2:	601a      	str	r2, [r3, #0]
}
 800eac4:	bf00      	nop
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	200015b4 	.word	0x200015b4
 800ead4:	20009e6c 	.word	0x20009e6c
 800ead8:	20009e74 	.word	0x20009e74
 800eadc:	20009e7c 	.word	0x20009e7c
 800eae0:	20009e78 	.word	0x20009e78
 800eae4:	20009e80 	.word	0x20009e80

0800eae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eaf0:	4b28      	ldr	r3, [pc, #160]	; (800eb94 <prvInsertBlockIntoFreeList+0xac>)
 800eaf2:	60fb      	str	r3, [r7, #12]
 800eaf4:	e002      	b.n	800eafc <prvInsertBlockIntoFreeList+0x14>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	60fb      	str	r3, [r7, #12]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d8f7      	bhi.n	800eaf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	4413      	add	r3, r2
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d108      	bne.n	800eb2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	685a      	ldr	r2, [r3, #4]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	441a      	add	r2, r3
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	441a      	add	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d118      	bne.n	800eb70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	4b15      	ldr	r3, [pc, #84]	; (800eb98 <prvInsertBlockIntoFreeList+0xb0>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d00d      	beq.n	800eb66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	685a      	ldr	r2, [r3, #4]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	441a      	add	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	e008      	b.n	800eb78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb66:	4b0c      	ldr	r3, [pc, #48]	; (800eb98 <prvInsertBlockIntoFreeList+0xb0>)
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	601a      	str	r2, [r3, #0]
 800eb6e:	e003      	b.n	800eb78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d002      	beq.n	800eb86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb86:	bf00      	nop
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	20009e6c 	.word	0x20009e6c
 800eb98:	20009e74 	.word	0x20009e74

0800eb9c <atoi>:
 800eb9c:	220a      	movs	r2, #10
 800eb9e:	2100      	movs	r1, #0
 800eba0:	f000 b92e 	b.w	800ee00 <strtol>

0800eba4 <__errno>:
 800eba4:	4b01      	ldr	r3, [pc, #4]	; (800ebac <__errno+0x8>)
 800eba6:	6818      	ldr	r0, [r3, #0]
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20000014 	.word	0x20000014

0800ebb0 <__libc_init_array>:
 800ebb0:	b570      	push	{r4, r5, r6, lr}
 800ebb2:	4d0d      	ldr	r5, [pc, #52]	; (800ebe8 <__libc_init_array+0x38>)
 800ebb4:	4c0d      	ldr	r4, [pc, #52]	; (800ebec <__libc_init_array+0x3c>)
 800ebb6:	1b64      	subs	r4, r4, r5
 800ebb8:	10a4      	asrs	r4, r4, #2
 800ebba:	2600      	movs	r6, #0
 800ebbc:	42a6      	cmp	r6, r4
 800ebbe:	d109      	bne.n	800ebd4 <__libc_init_array+0x24>
 800ebc0:	4d0b      	ldr	r5, [pc, #44]	; (800ebf0 <__libc_init_array+0x40>)
 800ebc2:	4c0c      	ldr	r4, [pc, #48]	; (800ebf4 <__libc_init_array+0x44>)
 800ebc4:	f000 f97e 	bl	800eec4 <_init>
 800ebc8:	1b64      	subs	r4, r4, r5
 800ebca:	10a4      	asrs	r4, r4, #2
 800ebcc:	2600      	movs	r6, #0
 800ebce:	42a6      	cmp	r6, r4
 800ebd0:	d105      	bne.n	800ebde <__libc_init_array+0x2e>
 800ebd2:	bd70      	pop	{r4, r5, r6, pc}
 800ebd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebd8:	4798      	blx	r3
 800ebda:	3601      	adds	r6, #1
 800ebdc:	e7ee      	b.n	800ebbc <__libc_init_array+0xc>
 800ebde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebe2:	4798      	blx	r3
 800ebe4:	3601      	adds	r6, #1
 800ebe6:	e7f2      	b.n	800ebce <__libc_init_array+0x1e>
 800ebe8:	0800f9ec 	.word	0x0800f9ec
 800ebec:	0800f9ec 	.word	0x0800f9ec
 800ebf0:	0800f9ec 	.word	0x0800f9ec
 800ebf4:	0800f9f0 	.word	0x0800f9f0

0800ebf8 <__retarget_lock_acquire_recursive>:
 800ebf8:	4770      	bx	lr

0800ebfa <__retarget_lock_release_recursive>:
 800ebfa:	4770      	bx	lr

0800ebfc <memcpy>:
 800ebfc:	440a      	add	r2, r1
 800ebfe:	4291      	cmp	r1, r2
 800ec00:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec04:	d100      	bne.n	800ec08 <memcpy+0xc>
 800ec06:	4770      	bx	lr
 800ec08:	b510      	push	{r4, lr}
 800ec0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec12:	4291      	cmp	r1, r2
 800ec14:	d1f9      	bne.n	800ec0a <memcpy+0xe>
 800ec16:	bd10      	pop	{r4, pc}

0800ec18 <memset>:
 800ec18:	4402      	add	r2, r0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d100      	bne.n	800ec22 <memset+0xa>
 800ec20:	4770      	bx	lr
 800ec22:	f803 1b01 	strb.w	r1, [r3], #1
 800ec26:	e7f9      	b.n	800ec1c <memset+0x4>

0800ec28 <cleanup_glue>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	6809      	ldr	r1, [r1, #0]
 800ec2e:	4605      	mov	r5, r0
 800ec30:	b109      	cbz	r1, 800ec36 <cleanup_glue+0xe>
 800ec32:	f7ff fff9 	bl	800ec28 <cleanup_glue>
 800ec36:	4621      	mov	r1, r4
 800ec38:	4628      	mov	r0, r5
 800ec3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec3e:	f000 b8f5 	b.w	800ee2c <_free_r>
	...

0800ec44 <_reclaim_reent>:
 800ec44:	4b2c      	ldr	r3, [pc, #176]	; (800ecf8 <_reclaim_reent+0xb4>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4283      	cmp	r3, r0
 800ec4a:	b570      	push	{r4, r5, r6, lr}
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	d051      	beq.n	800ecf4 <_reclaim_reent+0xb0>
 800ec50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ec52:	b143      	cbz	r3, 800ec66 <_reclaim_reent+0x22>
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d14a      	bne.n	800ecf0 <_reclaim_reent+0xac>
 800ec5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec5c:	6819      	ldr	r1, [r3, #0]
 800ec5e:	b111      	cbz	r1, 800ec66 <_reclaim_reent+0x22>
 800ec60:	4620      	mov	r0, r4
 800ec62:	f000 f8e3 	bl	800ee2c <_free_r>
 800ec66:	6961      	ldr	r1, [r4, #20]
 800ec68:	b111      	cbz	r1, 800ec70 <_reclaim_reent+0x2c>
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 f8de 	bl	800ee2c <_free_r>
 800ec70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec72:	b111      	cbz	r1, 800ec7a <_reclaim_reent+0x36>
 800ec74:	4620      	mov	r0, r4
 800ec76:	f000 f8d9 	bl	800ee2c <_free_r>
 800ec7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec7c:	b111      	cbz	r1, 800ec84 <_reclaim_reent+0x40>
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f000 f8d4 	bl	800ee2c <_free_r>
 800ec84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec86:	b111      	cbz	r1, 800ec8e <_reclaim_reent+0x4a>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f000 f8cf 	bl	800ee2c <_free_r>
 800ec8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec90:	b111      	cbz	r1, 800ec98 <_reclaim_reent+0x54>
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 f8ca 	bl	800ee2c <_free_r>
 800ec98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec9a:	b111      	cbz	r1, 800eca2 <_reclaim_reent+0x5e>
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f000 f8c5 	bl	800ee2c <_free_r>
 800eca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eca4:	b111      	cbz	r1, 800ecac <_reclaim_reent+0x68>
 800eca6:	4620      	mov	r0, r4
 800eca8:	f000 f8c0 	bl	800ee2c <_free_r>
 800ecac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecae:	b111      	cbz	r1, 800ecb6 <_reclaim_reent+0x72>
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f000 f8bb 	bl	800ee2c <_free_r>
 800ecb6:	69a3      	ldr	r3, [r4, #24]
 800ecb8:	b1e3      	cbz	r3, 800ecf4 <_reclaim_reent+0xb0>
 800ecba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	4798      	blx	r3
 800ecc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ecc2:	b1b9      	cbz	r1, 800ecf4 <_reclaim_reent+0xb0>
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecca:	f7ff bfad 	b.w	800ec28 <cleanup_glue>
 800ecce:	5949      	ldr	r1, [r1, r5]
 800ecd0:	b941      	cbnz	r1, 800ece4 <_reclaim_reent+0xa0>
 800ecd2:	3504      	adds	r5, #4
 800ecd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecd6:	2d80      	cmp	r5, #128	; 0x80
 800ecd8:	68d9      	ldr	r1, [r3, #12]
 800ecda:	d1f8      	bne.n	800ecce <_reclaim_reent+0x8a>
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 f8a5 	bl	800ee2c <_free_r>
 800ece2:	e7ba      	b.n	800ec5a <_reclaim_reent+0x16>
 800ece4:	680e      	ldr	r6, [r1, #0]
 800ece6:	4620      	mov	r0, r4
 800ece8:	f000 f8a0 	bl	800ee2c <_free_r>
 800ecec:	4631      	mov	r1, r6
 800ecee:	e7ef      	b.n	800ecd0 <_reclaim_reent+0x8c>
 800ecf0:	2500      	movs	r5, #0
 800ecf2:	e7ef      	b.n	800ecd4 <_reclaim_reent+0x90>
 800ecf4:	bd70      	pop	{r4, r5, r6, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20000014 	.word	0x20000014

0800ecfc <_strtol_l.constprop.0>:
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed02:	d001      	beq.n	800ed08 <_strtol_l.constprop.0+0xc>
 800ed04:	2b24      	cmp	r3, #36	; 0x24
 800ed06:	d906      	bls.n	800ed16 <_strtol_l.constprop.0+0x1a>
 800ed08:	f7ff ff4c 	bl	800eba4 <__errno>
 800ed0c:	2316      	movs	r3, #22
 800ed0e:	6003      	str	r3, [r0, #0]
 800ed10:	2000      	movs	r0, #0
 800ed12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800edfc <_strtol_l.constprop.0+0x100>
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	462e      	mov	r6, r5
 800ed1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed22:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ed26:	f017 0708 	ands.w	r7, r7, #8
 800ed2a:	d1f7      	bne.n	800ed1c <_strtol_l.constprop.0+0x20>
 800ed2c:	2c2d      	cmp	r4, #45	; 0x2d
 800ed2e:	d132      	bne.n	800ed96 <_strtol_l.constprop.0+0x9a>
 800ed30:	782c      	ldrb	r4, [r5, #0]
 800ed32:	2701      	movs	r7, #1
 800ed34:	1cb5      	adds	r5, r6, #2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d05b      	beq.n	800edf2 <_strtol_l.constprop.0+0xf6>
 800ed3a:	2b10      	cmp	r3, #16
 800ed3c:	d109      	bne.n	800ed52 <_strtol_l.constprop.0+0x56>
 800ed3e:	2c30      	cmp	r4, #48	; 0x30
 800ed40:	d107      	bne.n	800ed52 <_strtol_l.constprop.0+0x56>
 800ed42:	782c      	ldrb	r4, [r5, #0]
 800ed44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ed48:	2c58      	cmp	r4, #88	; 0x58
 800ed4a:	d14d      	bne.n	800ede8 <_strtol_l.constprop.0+0xec>
 800ed4c:	786c      	ldrb	r4, [r5, #1]
 800ed4e:	2310      	movs	r3, #16
 800ed50:	3502      	adds	r5, #2
 800ed52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ed56:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed5a:	f04f 0c00 	mov.w	ip, #0
 800ed5e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ed62:	4666      	mov	r6, ip
 800ed64:	fb03 8a19 	mls	sl, r3, r9, r8
 800ed68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ed6c:	f1be 0f09 	cmp.w	lr, #9
 800ed70:	d816      	bhi.n	800eda0 <_strtol_l.constprop.0+0xa4>
 800ed72:	4674      	mov	r4, lr
 800ed74:	42a3      	cmp	r3, r4
 800ed76:	dd24      	ble.n	800edc2 <_strtol_l.constprop.0+0xc6>
 800ed78:	f1bc 0f00 	cmp.w	ip, #0
 800ed7c:	db1e      	blt.n	800edbc <_strtol_l.constprop.0+0xc0>
 800ed7e:	45b1      	cmp	r9, r6
 800ed80:	d31c      	bcc.n	800edbc <_strtol_l.constprop.0+0xc0>
 800ed82:	d101      	bne.n	800ed88 <_strtol_l.constprop.0+0x8c>
 800ed84:	45a2      	cmp	sl, r4
 800ed86:	db19      	blt.n	800edbc <_strtol_l.constprop.0+0xc0>
 800ed88:	fb06 4603 	mla	r6, r6, r3, r4
 800ed8c:	f04f 0c01 	mov.w	ip, #1
 800ed90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed94:	e7e8      	b.n	800ed68 <_strtol_l.constprop.0+0x6c>
 800ed96:	2c2b      	cmp	r4, #43	; 0x2b
 800ed98:	bf04      	itt	eq
 800ed9a:	782c      	ldrbeq	r4, [r5, #0]
 800ed9c:	1cb5      	addeq	r5, r6, #2
 800ed9e:	e7ca      	b.n	800ed36 <_strtol_l.constprop.0+0x3a>
 800eda0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800eda4:	f1be 0f19 	cmp.w	lr, #25
 800eda8:	d801      	bhi.n	800edae <_strtol_l.constprop.0+0xb2>
 800edaa:	3c37      	subs	r4, #55	; 0x37
 800edac:	e7e2      	b.n	800ed74 <_strtol_l.constprop.0+0x78>
 800edae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800edb2:	f1be 0f19 	cmp.w	lr, #25
 800edb6:	d804      	bhi.n	800edc2 <_strtol_l.constprop.0+0xc6>
 800edb8:	3c57      	subs	r4, #87	; 0x57
 800edba:	e7db      	b.n	800ed74 <_strtol_l.constprop.0+0x78>
 800edbc:	f04f 3cff 	mov.w	ip, #4294967295
 800edc0:	e7e6      	b.n	800ed90 <_strtol_l.constprop.0+0x94>
 800edc2:	f1bc 0f00 	cmp.w	ip, #0
 800edc6:	da05      	bge.n	800edd4 <_strtol_l.constprop.0+0xd8>
 800edc8:	2322      	movs	r3, #34	; 0x22
 800edca:	6003      	str	r3, [r0, #0]
 800edcc:	4646      	mov	r6, r8
 800edce:	b942      	cbnz	r2, 800ede2 <_strtol_l.constprop.0+0xe6>
 800edd0:	4630      	mov	r0, r6
 800edd2:	e79e      	b.n	800ed12 <_strtol_l.constprop.0+0x16>
 800edd4:	b107      	cbz	r7, 800edd8 <_strtol_l.constprop.0+0xdc>
 800edd6:	4276      	negs	r6, r6
 800edd8:	2a00      	cmp	r2, #0
 800edda:	d0f9      	beq.n	800edd0 <_strtol_l.constprop.0+0xd4>
 800eddc:	f1bc 0f00 	cmp.w	ip, #0
 800ede0:	d000      	beq.n	800ede4 <_strtol_l.constprop.0+0xe8>
 800ede2:	1e69      	subs	r1, r5, #1
 800ede4:	6011      	str	r1, [r2, #0]
 800ede6:	e7f3      	b.n	800edd0 <_strtol_l.constprop.0+0xd4>
 800ede8:	2430      	movs	r4, #48	; 0x30
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1b1      	bne.n	800ed52 <_strtol_l.constprop.0+0x56>
 800edee:	2308      	movs	r3, #8
 800edf0:	e7af      	b.n	800ed52 <_strtol_l.constprop.0+0x56>
 800edf2:	2c30      	cmp	r4, #48	; 0x30
 800edf4:	d0a5      	beq.n	800ed42 <_strtol_l.constprop.0+0x46>
 800edf6:	230a      	movs	r3, #10
 800edf8:	e7ab      	b.n	800ed52 <_strtol_l.constprop.0+0x56>
 800edfa:	bf00      	nop
 800edfc:	0800f8e1 	.word	0x0800f8e1

0800ee00 <strtol>:
 800ee00:	4613      	mov	r3, r2
 800ee02:	460a      	mov	r2, r1
 800ee04:	4601      	mov	r1, r0
 800ee06:	4802      	ldr	r0, [pc, #8]	; (800ee10 <strtol+0x10>)
 800ee08:	6800      	ldr	r0, [r0, #0]
 800ee0a:	f7ff bf77 	b.w	800ecfc <_strtol_l.constprop.0>
 800ee0e:	bf00      	nop
 800ee10:	20000014 	.word	0x20000014

0800ee14 <__malloc_lock>:
 800ee14:	4801      	ldr	r0, [pc, #4]	; (800ee1c <__malloc_lock+0x8>)
 800ee16:	f7ff beef 	b.w	800ebf8 <__retarget_lock_acquire_recursive>
 800ee1a:	bf00      	nop
 800ee1c:	20009e84 	.word	0x20009e84

0800ee20 <__malloc_unlock>:
 800ee20:	4801      	ldr	r0, [pc, #4]	; (800ee28 <__malloc_unlock+0x8>)
 800ee22:	f7ff beea 	b.w	800ebfa <__retarget_lock_release_recursive>
 800ee26:	bf00      	nop
 800ee28:	20009e84 	.word	0x20009e84

0800ee2c <_free_r>:
 800ee2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee2e:	2900      	cmp	r1, #0
 800ee30:	d044      	beq.n	800eebc <_free_r+0x90>
 800ee32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee36:	9001      	str	r0, [sp, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f1a1 0404 	sub.w	r4, r1, #4
 800ee3e:	bfb8      	it	lt
 800ee40:	18e4      	addlt	r4, r4, r3
 800ee42:	f7ff ffe7 	bl	800ee14 <__malloc_lock>
 800ee46:	4a1e      	ldr	r2, [pc, #120]	; (800eec0 <_free_r+0x94>)
 800ee48:	9801      	ldr	r0, [sp, #4]
 800ee4a:	6813      	ldr	r3, [r2, #0]
 800ee4c:	b933      	cbnz	r3, 800ee5c <_free_r+0x30>
 800ee4e:	6063      	str	r3, [r4, #4]
 800ee50:	6014      	str	r4, [r2, #0]
 800ee52:	b003      	add	sp, #12
 800ee54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee58:	f7ff bfe2 	b.w	800ee20 <__malloc_unlock>
 800ee5c:	42a3      	cmp	r3, r4
 800ee5e:	d908      	bls.n	800ee72 <_free_r+0x46>
 800ee60:	6825      	ldr	r5, [r4, #0]
 800ee62:	1961      	adds	r1, r4, r5
 800ee64:	428b      	cmp	r3, r1
 800ee66:	bf01      	itttt	eq
 800ee68:	6819      	ldreq	r1, [r3, #0]
 800ee6a:	685b      	ldreq	r3, [r3, #4]
 800ee6c:	1949      	addeq	r1, r1, r5
 800ee6e:	6021      	streq	r1, [r4, #0]
 800ee70:	e7ed      	b.n	800ee4e <_free_r+0x22>
 800ee72:	461a      	mov	r2, r3
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	b10b      	cbz	r3, 800ee7c <_free_r+0x50>
 800ee78:	42a3      	cmp	r3, r4
 800ee7a:	d9fa      	bls.n	800ee72 <_free_r+0x46>
 800ee7c:	6811      	ldr	r1, [r2, #0]
 800ee7e:	1855      	adds	r5, r2, r1
 800ee80:	42a5      	cmp	r5, r4
 800ee82:	d10b      	bne.n	800ee9c <_free_r+0x70>
 800ee84:	6824      	ldr	r4, [r4, #0]
 800ee86:	4421      	add	r1, r4
 800ee88:	1854      	adds	r4, r2, r1
 800ee8a:	42a3      	cmp	r3, r4
 800ee8c:	6011      	str	r1, [r2, #0]
 800ee8e:	d1e0      	bne.n	800ee52 <_free_r+0x26>
 800ee90:	681c      	ldr	r4, [r3, #0]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	6053      	str	r3, [r2, #4]
 800ee96:	4421      	add	r1, r4
 800ee98:	6011      	str	r1, [r2, #0]
 800ee9a:	e7da      	b.n	800ee52 <_free_r+0x26>
 800ee9c:	d902      	bls.n	800eea4 <_free_r+0x78>
 800ee9e:	230c      	movs	r3, #12
 800eea0:	6003      	str	r3, [r0, #0]
 800eea2:	e7d6      	b.n	800ee52 <_free_r+0x26>
 800eea4:	6825      	ldr	r5, [r4, #0]
 800eea6:	1961      	adds	r1, r4, r5
 800eea8:	428b      	cmp	r3, r1
 800eeaa:	bf04      	itt	eq
 800eeac:	6819      	ldreq	r1, [r3, #0]
 800eeae:	685b      	ldreq	r3, [r3, #4]
 800eeb0:	6063      	str	r3, [r4, #4]
 800eeb2:	bf04      	itt	eq
 800eeb4:	1949      	addeq	r1, r1, r5
 800eeb6:	6021      	streq	r1, [r4, #0]
 800eeb8:	6054      	str	r4, [r2, #4]
 800eeba:	e7ca      	b.n	800ee52 <_free_r+0x26>
 800eebc:	b003      	add	sp, #12
 800eebe:	bd30      	pop	{r4, r5, pc}
 800eec0:	20009e88 	.word	0x20009e88

0800eec4 <_init>:
 800eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec6:	bf00      	nop
 800eec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeca:	bc08      	pop	{r3}
 800eecc:	469e      	mov	lr, r3
 800eece:	4770      	bx	lr

0800eed0 <_fini>:
 800eed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed2:	bf00      	nop
 800eed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eed6:	bc08      	pop	{r3}
 800eed8:	469e      	mov	lr, r3
 800eeda:	4770      	bx	lr
