
MCU-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcd0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800dea0  0800dea0  0001dea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e0  0800e6e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e0  0800e6e0  0001e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6e8  0800e6e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e8  0800e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ec  0800e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009230  20000078  0800e768  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200092a8  0800e768  000292a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026025  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b27  00000000  00000000  000460cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0004abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  0004c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0ee  00000000  00000000  0004e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b90  00000000  00000000  00078296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdfe3  00000000  00000000  0009ae26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198e09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000792c  00000000  00000000  00198e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de88 	.word	0x0800de88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800de88 	.word	0x0800de88

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b974 	b.w	8000e4c <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468e      	mov	lr, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14d      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	d969      	bls.n	8000c64 <__udivmoddi4+0xe8>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b152      	cbz	r2, 8000bac <__udivmoddi4+0x30>
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	f1c2 0120 	rsb	r1, r2, #32
 8000b9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba6:	ea41 0e03 	orr.w	lr, r1, r3
 8000baa:	4094      	lsls	r4, r2
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	0c21      	lsrs	r1, r4, #16
 8000bb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb6:	fa1f f78c 	uxth.w	r7, ip
 8000bba:	fb08 e316 	mls	r3, r8, r6, lr
 8000bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc2:	fb06 f107 	mul.w	r1, r6, r7
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 811f 	bcs.w	8000e14 <__udivmoddi4+0x298>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 811c 	bls.w	8000e14 <__udivmoddi4+0x298>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 f707 	mul.w	r7, r0, r7
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x92>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	f080 810a 	bcs.w	8000e18 <__udivmoddi4+0x29c>
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	f240 8107 	bls.w	8000e18 <__udivmoddi4+0x29c>
 8000c0a:	4464      	add	r4, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	1be4      	subs	r4, r4, r7
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa4>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xc2>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80ef 	beq.w	8000e0e <__udivmoddi4+0x292>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x160>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd4>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80f9 	bhi.w	8000e42 <__udivmoddi4+0x2c6>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	469e      	mov	lr, r3
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa4>
 8000c5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xec>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 8092 	bne.w	8000d96 <__udivmoddi4+0x21a>
 8000c72:	eba1 010c 	sub.w	r1, r1, ip
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2601      	movs	r6, #1
 8000c80:	0c20      	lsrs	r0, r4, #16
 8000c82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c86:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8e:	fb0e f003 	mul.w	r0, lr, r3
 8000c92:	4288      	cmp	r0, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x12c>
 8000c96:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x12a>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2c0>
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x156>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x154>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2ca>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x9a>
 8000cdc:	f1c6 0720 	rsb	r7, r6, #32
 8000ce0:	40b3      	lsls	r3, r6
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa20 f407 	lsr.w	r4, r0, r7
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	40f9      	lsrs	r1, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fb09 1118 	mls	r1, r9, r8, r1
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	4288      	cmp	r0, r1
 8000d16:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b8>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2bc>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2bc>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	458e      	cmp	lr, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1e2>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2b4>
 8000d56:	458e      	cmp	lr, r1
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2b4>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d62:	fba0 9402 	umull	r9, r4, r0, r2
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	42a1      	cmp	r1, r4
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46a6      	mov	lr, r4
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x2a4>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x2a0>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x212>
 8000d76:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d82:	fa22 f306 	lsr.w	r3, r2, r6
 8000d86:	40f1      	lsrs	r1, r6
 8000d88:	431f      	orrs	r7, r3
 8000d8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	f1c2 0320 	rsb	r3, r2, #32
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
 8000da4:	4091      	lsls	r1, r2
 8000da6:	4301      	orrs	r1, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db4:	fb07 3610 	mls	r6, r7, r0, r3
 8000db8:	0c0b      	lsrs	r3, r1, #16
 8000dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x260>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	b289      	uxth	r1, r1
 8000de0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de4:	fb07 3316 	mls	r3, r7, r6, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb06 f30e 	mul.w	r3, r6, lr
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x28a>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000e02:	3e02      	subs	r6, #2
 8000e04:	4461      	add	r1, ip
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0x104>
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e705      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e3      	b.n	8000be0 <__udivmoddi4+0x64>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6f8      	b.n	8000c0e <__udivmoddi4+0x92>
 8000e1c:	454b      	cmp	r3, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f8>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f8>
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x28a>
 8000e30:	4620      	mov	r0, r4
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1e2>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b8>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x12c>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e709      	b.n	8000c5a <__udivmoddi4+0xde>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x156>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	f200 809a 	bhi.w	8000f98 <Set_Resolution_A4988+0x148>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <Set_Resolution_A4988+0x1c>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e81 	.word	0x08000e81
 8000e70:	08000eb9 	.word	0x08000eb9
 8000e74:	08000ef1 	.word	0x08000ef1
 8000e78:	08000f29 	.word	0x08000f29
 8000e7c:	08000f61 	.word	0x08000f61
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69d8      	ldr	r0, [r3, #28]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f004 faba 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a18      	ldr	r0, [r3, #32]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f004 fab2 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f004 faaa 	bl	8005404 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000eb6:	e08b      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69d8      	ldr	r0, [r3, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f004 fa9e 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a18      	ldr	r0, [r3, #32]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f004 fa96 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f004 fa8e 	bl	8005404 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000eee:	e06f      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69d8      	ldr	r0, [r3, #28]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	f004 fa82 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a18      	ldr	r0, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f004 fa7a 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f004 fa72 	bl	8005404 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f26:	e053      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69d8      	ldr	r0, [r3, #28]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f004 fa66 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a18      	ldr	r0, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f40:	2201      	movs	r2, #1
 8000f42:	4619      	mov	r1, r3
 8000f44:	f004 fa5e 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	f004 fa56 	bl	8005404 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f5e:	e037      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69d8      	ldr	r0, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f004 fa4a 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a18      	ldr	r0, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f004 fa42 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f004 fa3a 	bl	8005404 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2210      	movs	r2, #16
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000f96:	e01b      	b.n	8000fd0 <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69d8      	ldr	r0, [r3, #28]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 fa2e 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a18      	ldr	r0, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f004 fa26 	bl	8005404 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 fa1e 	bl	8005404 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2210      	movs	r2, #16
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <Set_Direction_A4988+0x18>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d009      	beq.n	8001002 <Set_Direction_A4988+0x2a>
 8000fee:	e011      	b.n	8001014 <Set_Direction_A4988+0x3c>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6958      	ldr	r0, [r3, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	8b1b      	ldrh	r3, [r3, #24]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f004 fa02 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 8001000:	e011      	b.n	8001026 <Set_Direction_A4988+0x4e>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6958      	ldr	r0, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	8b1b      	ldrh	r3, [r3, #24]
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	f004 f9f9 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 8001012:	e008      	b.n	8001026 <Set_Direction_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6958      	ldr	r0, [r3, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8b1b      	ldrh	r3, [r3, #24]
 800101c:	2201      	movs	r2, #1
 800101e:	4619      	mov	r1, r3
 8001020:	f004 f9f0 	bl	8005404 <HAL_GPIO_WritePin>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d003      	beq.n	8001046 <Enable_A4988+0x18>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d009      	beq.n	8001058 <Enable_A4988+0x2a>
 8001044:	e011      	b.n	800106a <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	f004 f9d7 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 8001056:	e011      	b.n	800107c <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f004 f9ce 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 8001068:	e008      	b.n	800107c <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f004 f9c5 	bl	8005404 <HAL_GPIO_WritePin>
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d003      	beq.n	800109c <Reset_A4988+0x18>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d00a      	beq.n	80010b0 <Reset_A4988+0x2c>
 800109a:	e013      	b.n	80010c4 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f004 f9ab 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 80010ae:	e013      	b.n	80010d8 <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	f004 f9a1 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 80010c2:	e009      	b.n	80010d8 <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f004 f997 	bl	8005404 <HAL_GPIO_WritePin>
	}
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d003      	beq.n	80010f8 <Sleep_A4988+0x18>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d00a      	beq.n	800110c <Sleep_A4988+0x2c>
 80010f6:	e013      	b.n	8001120 <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f004 f97d 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 800110a:	e013      	b.n	8001134 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f004 f973 	bl	8005404 <HAL_GPIO_WritePin>
			break;
 800111e:	e009      	b.n	8001134 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f004 f969 	bl	8005404 <HAL_GPIO_WritePin>
	}
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Init_A4988>:
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
void Init_A4988(A4988_Drive* drive){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	4618      	mov	r0, r3
 800114a:	f006 f8df 	bl	800730c <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 800114e:	2102      	movs	r1, #2
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fe7d 	bl	8000e50 <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff3d 	bl	8000fd8 <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 800115e:	2101      	movs	r1, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff64 	bl	800102e <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 8001166:	2101      	movs	r1, #1
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff8b 	bl	8001084 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 800116e:	2102      	movs	r1, #2
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffb5 	bl	80010e0 <Sleep_A4988>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <GFX_SetFont+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000094 	.word	0x20000094

080011a0 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <GFX_SetFontSize+0x16>
		size = size_t;
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <GFX_SetFontSize+0x24>)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	7013      	strb	r3, [r2, #0]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000

080011c8 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	4613      	mov	r3, r2
 80011dc:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b7e      	cmp	r3, #126	; 0x7e
 80011e2:	f200 80a3 	bhi.w	800132c <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80011e6:	2300      	movs	r3, #0
 80011e8:	75fb      	strb	r3, [r7, #23]
 80011ea:	e096      	b.n	800131a <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80011ec:	4b51      	ldr	r3, [pc, #324]	; (8001334 <GFX_DrawChar+0x16c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3b20      	subs	r3, #32
 80011f4:	494f      	ldr	r1, [pc, #316]	; (8001334 <GFX_DrawChar+0x16c>)
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	3101      	adds	r1, #1
 80011fa:	7809      	ldrb	r1, [r1, #0]
 80011fc:	fb03 f101 	mul.w	r1, r3, r1
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	440b      	add	r3, r1
 8001204:	3302      	adds	r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800120c:	2300      	movs	r3, #0
 800120e:	757b      	strb	r3, [r7, #21]
 8001210:	e078      	b.n	8001304 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d032      	beq.n	8001282 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 800121c:	4b46      	ldr	r3, [pc, #280]	; (8001338 <GFX_DrawChar+0x170>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d113      	bne.n	800124c <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	b29a      	uxth	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4413      	add	r3, r2
 800122e:	b29b      	uxth	r3, r3
 8001230:	b218      	sxth	r0, r3
 8001232:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001236:	b29a      	uxth	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b29b      	uxth	r3, r3
 8001240:	b21b      	sxth	r3, r3
 8001242:	79ba      	ldrb	r2, [r7, #6]
 8001244:	4619      	mov	r1, r3
 8001246:	f000 fa2f 	bl	80016a8 <SSD1306_DrawPixel>
 800124a:	e052      	b.n	80012f2 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <GFX_DrawChar+0x170>)
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	fb03 f202 	mul.w	r2, r3, r2
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	18d0      	adds	r0, r2, r3
 800125a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <GFX_DrawChar+0x170>)
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	18d1      	adds	r1, r2, r3
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <GFX_DrawChar+0x170>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b31      	ldr	r3, [pc, #196]	; (8001338 <GFX_DrawChar+0x170>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b29c      	uxth	r4, r3
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4623      	mov	r3, r4
 800127c:	f000 f9bd 	bl	80015fa <GFX_DrawFillRectangle>
 8001280:	e037      	b.n	80012f2 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001282:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001286:	2b00      	cmp	r3, #0
 8001288:	d133      	bne.n	80012f2 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <GFX_DrawChar+0x170>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d114      	bne.n	80012bc <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b218      	sxth	r0, r3
 80012a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	f000 f9f7 	bl	80016a8 <SSD1306_DrawPixel>
 80012ba:	e01a      	b.n	80012f2 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <GFX_DrawChar+0x170>)
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	fb03 f202 	mul.w	r2, r3, r2
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	18d0      	adds	r0, r2, r3
 80012ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <GFX_DrawChar+0x170>)
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	18d1      	adds	r1, r2, r3
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <GFX_DrawChar+0x170>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <GFX_DrawChar+0x170>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b29c      	uxth	r4, r3
 80012e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4623      	mov	r3, r4
 80012ee:	f000 f984 	bl	80015fa <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80012f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	757b      	strb	r3, [r7, #21]
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	75bb      	strb	r3, [r7, #22]
 8001304:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <GFX_DrawChar+0x16c>)
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	4293      	cmp	r3, r2
 8001310:	f6ff af7f 	blt.w	8001212 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	3301      	adds	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <GFX_DrawChar+0x16c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	7dfa      	ldrb	r2, [r7, #23]
 8001324:	429a      	cmp	r2, r3
 8001326:	f4ff af61 	bcc.w	80011ec <GFX_DrawChar+0x24>
 800132a:	e000      	b.n	800132e <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 800132c:	bf00      	nop
            }
        }
    }
}
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000094 	.word	0x20000094
 8001338:	20000000 	.word	0x20000000

0800133c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001354:	e03e      	b.n	80013d4 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001356:	78f9      	ldrb	r1, [r7, #3]
 8001358:	7cfa      	ldrb	r2, [r7, #19]
 800135a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	460b      	mov	r3, r1
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff ff2f 	bl	80011c8 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <GFX_DrawString+0xb0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <GFX_DrawString+0xb4>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	3301      	adds	r3, #1
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d120      	bne.n	80013ce <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 800138c:	2300      	movs	r3, #0
 800138e:	74bb      	strb	r3, [r7, #18]
 8001390:	e012      	b.n	80013b8 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	b218      	sxth	r0, r3
 800139c:	7cbb      	ldrb	r3, [r7, #18]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f000 f97b 	bl	80016a8 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80013b2:	7cbb      	ldrb	r3, [r7, #18]
 80013b4:	3301      	adds	r3, #1
 80013b6:	74bb      	strb	r3, [r7, #18]
 80013b8:	7cba      	ldrb	r2, [r7, #18]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <GFX_DrawString+0xb0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <GFX_DrawString+0xb4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbe1      	blt.n	8001392 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ba      	bne.n	8001356 <GFX_DrawString+0x1a>
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000094 	.word	0x20000094
 80013f0:	20000000 	.word	0x20000000

080013f4 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800140c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1acb      	subs	r3, r1, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	bfb8      	it	lt
 800141a:	425b      	neglt	r3, r3
 800141c:	429a      	cmp	r2, r3
 800141e:	bfcc      	ite	gt
 8001420:	2301      	movgt	r3, #1
 8001422:	2300      	movle	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001428:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dd0b      	ble.n	8001468 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	b29b      	uxth	r3, r3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	bfb8      	it	lt
 8001480:	425b      	neglt	r3, r3
 8001482:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001484:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da00      	bge.n	800148e <GFX_WriteLine+0x9a>
 800148c:	3301      	adds	r3, #1
 800148e:	105b      	asrs	r3, r3, #1
 8001490:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	da02      	bge.n	80014a0 <GFX_WriteLine+0xac>
	        ystep = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800149e:	e030      	b.n	8001502 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 80014a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80014a6:	e02c      	b.n	8001502 <GFX_WriteLine+0x10e>
	        if (steep) {
 80014a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	b211      	sxth	r1, r2
 80014b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f8f3 	bl	80016a8 <SSD1306_DrawPixel>
 80014c2:	e008      	b.n	80014d6 <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	b211      	sxth	r1, r2
 80014cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f8e9 	bl	80016a8 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80014d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80014d8:	8abb      	ldrh	r3, [r7, #20]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80014e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da09      	bge.n	80014fc <GFX_WriteLine+0x108>
	            y_start += ystep;
 80014e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80014f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80014f4:	8afb      	ldrh	r3, [r7, #22]
 80014f6:	4413      	add	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	ddce      	ble.n	80014a8 <GFX_WriteLine+0xb4>
	        }
	    }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3730      	adds	r7, #48	; 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ff5d 	bl	80013f4 <GFX_WriteLine>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af02      	add	r7, sp, #8
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ff47 	bl	80013f4 <GFX_WriteLine>
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b088      	sub	sp, #32
 8001572:	af02      	add	r7, sp, #8
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	d114      	bne.n	80015ae <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	dd05      	ble.n	8001598 <GFX_DrawLine+0x2a>
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff ffb4 	bl	8001514 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80015ac:	e021      	b.n	80015f2 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d114      	bne.n	80015e0 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dd05      	ble.n	80015ca <GFX_DrawLine+0x5c>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff ffb2 	bl	8001542 <GFX_DrawFastHLine>
}
 80015de:	e008      	b.n	80015f2 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80015e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff ff01 	bl	80013f4 <GFX_WriteLine>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	4611      	mov	r1, r2
 8001606:	461a      	mov	r2, r3
 8001608:	460b      	mov	r3, r1
 800160a:	80fb      	strh	r3, [r7, #6]
 800160c:	4613      	mov	r3, r2
 800160e:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e009      	b.n	800162a <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001616:	88ba      	ldrh	r2, [r7, #4]
 8001618:	f897 3020 	ldrb.w	r3, [r7, #32]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff78 	bl	8001514 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	88fa      	ldrh	r2, [r7, #6]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbef      	blt.n	8001616 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af04      	add	r7, sp, #16
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <SSD1306_Command+0x30>)
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	2200      	movs	r2, #0
 8001660:	2178      	movs	r1, #120	; 0x78
 8001662:	f003 ff93 	bl	800558c <HAL_I2C_Mem_Write>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000098 	.word	0x20000098

08001674 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <SSD1306_Data+0x30>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2301      	movs	r3, #1
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	2178      	movs	r1, #120	; 0x78
 8001698:	f003 ff78 	bl	800558c <HAL_I2C_Mem_Write>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000098 	.word	0x20000098

080016a8 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
 80016b2:	460b      	mov	r3, r1
 80016b4:	80bb      	strh	r3, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db79      	blt.n	80017b6 <SSD1306_DrawPixel+0x10e>
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	2b7f      	cmp	r3, #127	; 0x7f
 80016c8:	dc75      	bgt.n	80017b6 <SSD1306_DrawPixel+0x10e>
 80016ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db71      	blt.n	80017b6 <SSD1306_DrawPixel+0x10e>
 80016d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016d6:	2b3f      	cmp	r3, #63	; 0x3f
 80016d8:	dc6d      	bgt.n	80017b6 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d049      	beq.n	8001774 <SSD1306_DrawPixel+0xcc>
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	dc69      	bgt.n	80017b8 <SSD1306_DrawPixel+0x110>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d022      	beq.n	800172e <SSD1306_DrawPixel+0x86>
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d165      	bne.n	80017b8 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80016ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da00      	bge.n	80016fa <SSD1306_DrawPixel+0x52>
 80016f8:	3307      	adds	r3, #7
 80016fa:	10db      	asrs	r3, r3, #3
 80016fc:	b218      	sxth	r0, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	4413      	add	r3, r2
 8001704:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <SSD1306_DrawPixel+0x11c>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	b25a      	sxtb	r2, r3
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b259      	sxtb	r1, r3
 800171c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001720:	4603      	mov	r3, r0
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	4413      	add	r3, r2
 8001726:	b2c9      	uxtb	r1, r1
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <SSD1306_DrawPixel+0x11c>)
 800172a:	54d1      	strb	r1, [r2, r3]
      break;
 800172c:	e044      	b.n	80017b8 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800172e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001732:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	da00      	bge.n	800173c <SSD1306_DrawPixel+0x94>
 800173a:	3307      	adds	r3, #7
 800173c:	10db      	asrs	r3, r3, #3
 800173e:	b218      	sxth	r0, r3
 8001740:	4603      	mov	r3, r0
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	4413      	add	r3, r2
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <SSD1306_DrawPixel+0x11c>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	b25a      	sxtb	r2, r3
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	b25b      	sxtb	r3, r3
 800175e:	4013      	ands	r3, r2
 8001760:	b259      	sxtb	r1, r3
 8001762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001766:	4603      	mov	r3, r0
 8001768:	01db      	lsls	r3, r3, #7
 800176a:	4413      	add	r3, r2
 800176c:	b2c9      	uxtb	r1, r1
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <SSD1306_DrawPixel+0x11c>)
 8001770:	54d1      	strb	r1, [r2, r3]
      break;
 8001772:	e021      	b.n	80017b8 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001774:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001778:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	da00      	bge.n	8001782 <SSD1306_DrawPixel+0xda>
 8001780:	3307      	adds	r3, #7
 8001782:	10db      	asrs	r3, r3, #3
 8001784:	b218      	sxth	r0, r3
 8001786:	4603      	mov	r3, r0
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	4413      	add	r3, r2
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <SSD1306_DrawPixel+0x11c>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	b25a      	sxtb	r2, r3
 8001792:	88bb      	ldrh	r3, [r7, #4]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	2101      	movs	r1, #1
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	4053      	eors	r3, r2
 80017a2:	b259      	sxtb	r1, r3
 80017a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017a8:	4603      	mov	r3, r0
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	4413      	add	r3, r2
 80017ae:	b2c9      	uxtb	r1, r1
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <SSD1306_DrawPixel+0x11c>)
 80017b2:	54d1      	strb	r1, [r2, r3]
      break;
 80017b4:	e000      	b.n	80017b8 <SSD1306_DrawPixel+0x110>
	  return;
 80017b6:	bf00      	nop
    }
}
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000009c 	.word	0x2000009c

080017c8 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <SSD1306_Clear+0x22>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10d      	bne.n	80017f8 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	21ff      	movs	r1, #255	; 0xff
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <SSD1306_Clear+0x38>)
 80017e4:	f00c fa86 	bl	800dcf4 <memset>
		break;
 80017e8:	e006      	b.n	80017f8 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80017ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ee:	2100      	movs	r1, #0
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <SSD1306_Clear+0x38>)
 80017f2:	f00c fa7f 	bl	800dcf4 <memset>
		break;
 80017f6:	bf00      	nop
	}
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000009c 	.word	0x2000009c

08001804 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001808:	2022      	movs	r0, #34	; 0x22
 800180a:	f7ff ff19 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff ff16 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001814:	20ff      	movs	r0, #255	; 0xff
 8001816:	f7ff ff13 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800181a:	2021      	movs	r0, #33	; 0x21
 800181c:	f7ff ff10 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff ff0d 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001826:	207f      	movs	r0, #127	; 0x7f
 8001828:	f7ff ff0a 	bl	8001640 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800182c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <SSD1306_Display+0x38>)
 8001832:	f7ff ff1f 	bl	8001674 <SSD1306_Data>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000009c 	.word	0x2000009c

08001840 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001848:	4a28      	ldr	r2, [pc, #160]	; (80018ec <SSD1306_Init+0xac>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 800184e:	20ae      	movs	r0, #174	; 0xae
 8001850:	f7ff fef6 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001854:	20d5      	movs	r0, #213	; 0xd5
 8001856:	f7ff fef3 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0x80);
 800185a:	2080      	movs	r0, #128	; 0x80
 800185c:	f7ff fef0 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001860:	203f      	movs	r0, #63	; 0x3f
 8001862:	f7ff feed 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001866:	20d3      	movs	r0, #211	; 0xd3
 8001868:	f7ff feea 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0x00);
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fee7 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8001872:	2040      	movs	r0, #64	; 0x40
 8001874:	f7ff fee4 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001878:	208d      	movs	r0, #141	; 0x8d
 800187a:	f7ff fee1 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0x14);
 800187e:	2014      	movs	r0, #20
 8001880:	f7ff fede 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001884:	2020      	movs	r0, #32
 8001886:	f7ff fedb 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fed8 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001890:	20a1      	movs	r0, #161	; 0xa1
 8001892:	f7ff fed5 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001896:	20c8      	movs	r0, #200	; 0xc8
 8001898:	f7ff fed2 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 800189c:	20da      	movs	r0, #218	; 0xda
 800189e:	f7ff fecf 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0x12);
 80018a2:	2012      	movs	r0, #18
 80018a4:	f7ff fecc 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80018a8:	2081      	movs	r0, #129	; 0x81
 80018aa:	f7ff fec9 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80018ae:	20ff      	movs	r0, #255	; 0xff
 80018b0:	f7ff fec6 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80018b4:	20d9      	movs	r0, #217	; 0xd9
 80018b6:	f7ff fec3 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80018ba:	20f1      	movs	r0, #241	; 0xf1
 80018bc:	f7ff fec0 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80018c0:	20db      	movs	r0, #219	; 0xdb
 80018c2:	f7ff febd 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(0x40);
 80018c6:	2040      	movs	r0, #64	; 0x40
 80018c8:	f7ff feba 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80018cc:	20a4      	movs	r0, #164	; 0xa4
 80018ce:	f7ff feb7 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80018d2:	20a6      	movs	r0, #166	; 0xa6
 80018d4:	f7ff feb4 	bl	8001640 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80018d8:	202e      	movs	r0, #46	; 0x2e
 80018da:	f7ff feb1 	bl	8001640 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80018de:	20af      	movs	r0, #175	; 0xaf
 80018e0:	f7ff feae 	bl	8001640 <SSD1306_Command>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000098 	.word	0x20000098

080018f0 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	b29b      	uxth	r3, r3
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b299      	uxth	r1, r3
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2301      	movs	r3, #1
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	1c7b      	adds	r3, r7, #1
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2302      	movs	r3, #2
 8001920:	f003 fe34 	bl	800558c <HAL_I2C_Mem_Write>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	729a      	strb	r2, [r3, #10]
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af04      	add	r7, sp, #16
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8001944:	883b      	ldrh	r3, [r7, #0]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	733b      	strb	r3, [r7, #12]
 8001954:	7bbb      	ldrb	r3, [r7, #14]
 8001956:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	b29b      	uxth	r3, r3
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b299      	uxth	r1, r3
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	2302      	movs	r3, #2
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2302      	movs	r3, #2
 800197a:	f003 fe07 	bl	800558c <HAL_I2C_Mem_Write>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	729a      	strb	r2, [r3, #10]
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 800198e:	b580      	push	{r7, lr}
 8001990:	b088      	sub	sp, #32
 8001992:	af04      	add	r7, sp, #16
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	791b      	ldrb	r3, [r3, #4]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	b299      	uxth	r1, r3
 80019a8:	887a      	ldrh	r2, [r7, #2]
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	f107 030f 	add.w	r3, r7, #15
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	f003 fefa 	bl	80057b4 <HAL_I2C_Mem_Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	729a      	strb	r2, [r3, #10]
	return value;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af04      	add	r7, sp, #16
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 80019de:	2300      	movs	r3, #0
 80019e0:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	b299      	uxth	r1, r3
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2302      	movs	r3, #2
 8001a04:	f003 fed6 	bl	80057b4 <HAL_I2C_Mem_Read>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8001a10:	7b7b      	ldrb	r3, [r7, #13]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	7b3b      	ldrb	r3, [r7, #12]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	81fb      	strh	r3, [r7, #14]
	return value_;
 8001a20:	89fb      	ldrh	r3, [r7, #14]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2229      	movs	r2, #41	; 0x29
 8001a3e:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a52:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 8001a5a:	2124      	movs	r1, #36	; 0x24
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff96 	bl	800198e <readReg>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 8001a6a:	2116      	movs	r1, #22
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff8e 	bl	800198e <readReg>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f040 80a9 	bne.w	8001bcc <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f240 2107 	movw	r1, #519	; 0x207
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff32 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff2c 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2196      	movs	r1, #150	; 0x96
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff27 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 8001aa2:	22fd      	movs	r2, #253	; 0xfd
 8001aa4:	2197      	movs	r1, #151	; 0x97
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff22 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 8001aac:	2201      	movs	r2, #1
 8001aae:	21e3      	movs	r1, #227	; 0xe3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff1d 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	21e4      	movs	r1, #228	; 0xe4
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff18 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	21e5      	movs	r1, #229	; 0xe5
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff13 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 8001aca:	2201      	movs	r2, #1
 8001acc:	21e6      	movs	r1, #230	; 0xe6
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff0e 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	21e7      	movs	r1, #231	; 0xe7
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff09 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 8001ade:	2202      	movs	r2, #2
 8001ae0:	21f5      	movs	r1, #245	; 0xf5
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff04 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 8001ae8:	2205      	movs	r2, #5
 8001aea:	21d9      	movs	r1, #217	; 0xd9
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff feff 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8001af2:	22ce      	movs	r2, #206	; 0xce
 8001af4:	21db      	movs	r1, #219	; 0xdb
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fefa 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 8001afc:	2203      	movs	r2, #3
 8001afe:	21dc      	movs	r1, #220	; 0xdc
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fef5 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 8001b06:	22f8      	movs	r2, #248	; 0xf8
 8001b08:	21dd      	movs	r1, #221	; 0xdd
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fef0 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8001b10:	2200      	movs	r2, #0
 8001b12:	219f      	movs	r1, #159	; 0x9f
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff feeb 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 8001b1a:	223c      	movs	r2, #60	; 0x3c
 8001b1c:	21a3      	movs	r1, #163	; 0xa3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fee6 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8001b24:	2200      	movs	r2, #0
 8001b26:	21b7      	movs	r1, #183	; 0xb7
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fee1 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 8001b2e:	223c      	movs	r2, #60	; 0x3c
 8001b30:	21bb      	movs	r1, #187	; 0xbb
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fedc 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 8001b38:	2209      	movs	r2, #9
 8001b3a:	21b2      	movs	r1, #178	; 0xb2
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fed7 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8001b42:	2209      	movs	r2, #9
 8001b44:	21ca      	movs	r1, #202	; 0xca
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fed2 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fecc 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 8001b58:	2217      	movs	r2, #23
 8001b5a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fec6 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fec0 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 8001b70:	2205      	movs	r2, #5
 8001b72:	21ff      	movs	r1, #255	; 0xff
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff febb 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 8001b7a:	2205      	movs	r2, #5
 8001b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff feb5 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 8001b86:	2205      	movs	r2, #5
 8001b88:	f240 1199 	movw	r1, #409	; 0x199
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff feaf 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 8001b92:	221b      	movs	r2, #27
 8001b94:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fea9 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 8001b9e:	223e      	movs	r2, #62	; 0x3e
 8001ba0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fea3 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 8001baa:	221f      	movs	r2, #31
 8001bac:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fe9d 	bl	80018f0 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2130      	movs	r1, #48	; 0x30
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fe98 	bl	80018f0 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2116      	movs	r1, #22
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fe93 	bl	80018f0 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 8001bca:	e021      	b.n	8001c10 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 8001bcc:	2196      	movs	r1, #150	; 0x96
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff feff 	bl	80019d2 <readReg16Bit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 8001bd8:	2254      	movs	r2, #84	; 0x54
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d103      	bne.n	8001be8 <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2203      	movs	r2, #3
 8001be4:	715a      	strb	r2, [r3, #5]
 8001be6:	e00a      	b.n	8001bfe <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 8001be8:	227f      	movs	r2, #127	; 0x7f
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d103      	bne.n	8001bf8 <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	715a      	strb	r2, [r3, #5]
 8001bf6:	e002      	b.n	8001bfe <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	799a      	ldrb	r2, [r3, #6]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	795b      	ldrb	r3, [r3, #5]
 8001c06:	fb12 f303 	smulbb	r3, r2, r3
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	719a      	strb	r2, [r3, #6]
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8001c24:	2314      	movs	r3, #20
 8001c26:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d043      	beq.n	8001cb6 <setScaling_VL6180X+0x9e>
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d840      	bhi.n	8001cb6 <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	795b      	ldrb	r3, [r3, #5]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <setScaling_VL6180X+0xa8>)
 8001c42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c46:	461a      	mov	r2, r3
 8001c48:	2196      	movs	r1, #150	; 0x96
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fe72 	bl	8001934 <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	799a      	ldrb	r2, [r3, #6]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	795b      	ldrb	r3, [r3, #5]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2124      	movs	r1, #36	; 0x24
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fe44 	bl	80018f0 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	795b      	ldrb	r3, [r3, #5]
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	2121      	movs	r1, #33	; 0x21
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fe39 	bl	80018f0 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 8001c7e:	212d      	movs	r1, #45	; 0x2d
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fe84 	bl	800198e <readReg>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 8001c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	b25a      	sxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	795b      	ldrb	r3, [r3, #5]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	212d      	movs	r1, #45	; 0x2d
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fe1e 	bl	80018f0 <writeReg>
 8001cb4:	e000      	b.n	8001cb8 <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8001cb6:	bf00      	nop
}
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800e21c 	.word	0x0800e21c

08001cc4 <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 8001ccc:	f003 f86e 	bl	8004dac <HAL_GetTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8001cd4:	e010      	b.n	8001cf8 <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	891b      	ldrh	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <readRangeContinuous_VL6180X+0x34>
 8001cde:	f003 f865 	bl	8004dac <HAL_GetTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	8912      	ldrh	r2, [r2, #8]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	dd01      	ble.n	8001cf8 <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 8001cf4:	23ff      	movs	r3, #255	; 0xff
 8001cf6:	e014      	b.n	8001d22 <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8001cf8:	214f      	movs	r1, #79	; 0x4f
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fe47 	bl	800198e <readReg>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0e5      	beq.n	8001cd6 <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 8001d0a:	2162      	movs	r1, #98	; 0x62
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fe3e 	bl	800198e <readReg>
 8001d12:	4603      	mov	r3, r0
 8001d14:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2115      	movs	r1, #21
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fde8 	bl	80018f0 <writeReg>
  return range;
 8001d20:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2118      	movs	r1, #24
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fdda 	bl	80018f0 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ffc1 	bl	8001cc4 <readRangeContinuous_VL6180X>
 8001d42:	4603      	mov	r3, r0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 8001d54:	2230      	movs	r2, #48	; 0x30
 8001d56:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fdc8 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 8001d60:	2246      	movs	r2, #70	; 0x46
 8001d62:	213f      	movs	r1, #63	; 0x3f
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fdc3 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 8001d6a:	22ff      	movs	r2, #255	; 0xff
 8001d6c:	2131      	movs	r1, #49	; 0x31
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fdbe 	bl	80018f0 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 8001d74:	2263      	movs	r2, #99	; 0x63
 8001d76:	2140      	movs	r1, #64	; 0x40
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fddb 	bl	8001934 <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	212e      	movs	r1, #46	; 0x2e
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fdb4 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 8001d88:	2209      	movs	r2, #9
 8001d8a:	211b      	movs	r1, #27
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fdaf 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 8001d92:	2231      	movs	r2, #49	; 0x31
 8001d94:	213e      	movs	r1, #62	; 0x3e
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fdaa 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 8001d9c:	2224      	movs	r2, #36	; 0x24
 8001d9e:	2114      	movs	r1, #20
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fda5 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 8001da6:	2231      	movs	r2, #49	; 0x31
 8001da8:	211c      	movs	r1, #28
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fda0 	bl	80018f0 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	f240 21a3 	movw	r1, #675	; 0x2a3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fd9a 	bl	80018f0 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff2a 	bl	8001c18 <setScaling_VL6180X>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	795b      	ldrb	r3, [r3, #5]
 8001dd8:	b29c      	uxth	r4, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa5 	bl	8001d2a <readRangeSingle_VL6180X>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	fb14 f303 	smulbb	r3, r4, r3
 8001de8:	b29b      	uxth	r3, r3
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}
	...

08001df4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8001df8:	485b      	ldr	r0, [pc, #364]	; (8001f68 <MX_FREERTOS_Init+0x174>)
 8001dfa:	f008 f8a9 	bl	8009f50 <osMutexNew>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <MX_FREERTOS_Init+0x178>)
 8001e02:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 8001e04:	485a      	ldr	r0, [pc, #360]	; (8001f70 <MX_FREERTOS_Init+0x17c>)
 8001e06:	f008 f8a3 	bl	8009f50 <osMutexNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a59      	ldr	r2, [pc, #356]	; (8001f74 <MX_FREERTOS_Init+0x180>)
 8001e0e:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C4 */
  MutexI2C4Handle = osMutexNew(&MutexI2C4_attributes);
 8001e10:	4859      	ldr	r0, [pc, #356]	; (8001f78 <MX_FREERTOS_Init+0x184>)
 8001e12:	f008 f89d 	bl	8009f50 <osMutexNew>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <MX_FREERTOS_Init+0x188>)
 8001e1a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SyringeInfoOLEDSemaphore */
  SyringeInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoOLEDSemaphore_attributes);
 8001e1c:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <MX_FREERTOS_Init+0x18c>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2001      	movs	r0, #1
 8001e22:	f008 f9dd 	bl	800a1e0 <osSemaphoreNew>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <MX_FREERTOS_Init+0x190>)
 8001e2a:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoOLEDSemaphore */
  NeedleInfoOLEDSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoOLEDSemaphore_attributes);
 8001e2c:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <MX_FREERTOS_Init+0x194>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	2001      	movs	r0, #1
 8001e32:	f008 f9d5 	bl	800a1e0 <osSemaphoreNew>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <MX_FREERTOS_Init+0x198>)
 8001e3a:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureInfoCommunicationSemaphore */
  TemperatureInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &TemperatureInfoCommunicationSemaphore_attributes);
 8001e3c:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <MX_FREERTOS_Init+0x19c>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	2001      	movs	r0, #1
 8001e42:	f008 f9cd 	bl	800a1e0 <osSemaphoreNew>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <MX_FREERTOS_Init+0x1a0>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoCommunicationSemaphore */
  SyringeInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &SyringeInfoCommunicationSemaphore_attributes);
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <MX_FREERTOS_Init+0x1a4>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2001      	movs	r0, #1
 8001e52:	f008 f9c5 	bl	800a1e0 <osSemaphoreNew>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <MX_FREERTOS_Init+0x1a8>)
 8001e5a:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoCommunicationSemaphore */
  NeedleInfoCommunicationSemaphoreHandle = osSemaphoreNew(1, 1, &NeedleInfoCommunicationSemaphore_attributes);
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <MX_FREERTOS_Init+0x1ac>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	2001      	movs	r0, #1
 8001e62:	f008 f9bd 	bl	800a1e0 <osSemaphoreNew>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <MX_FREERTOS_Init+0x1b0>)
 8001e6a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SyringeInfoTimerOLED */
  SyringeInfoTimerOLEDHandle = osTimerNew(SyringeInfoTimerOLEDCallback, osTimerPeriodic, NULL, &SyringeInfoTimerOLED_attributes);
 8001e6c:	4b4e      	ldr	r3, [pc, #312]	; (8001fa8 <MX_FREERTOS_Init+0x1b4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2101      	movs	r1, #1
 8001e72:	484e      	ldr	r0, [pc, #312]	; (8001fac <MX_FREERTOS_Init+0x1b8>)
 8001e74:	f007 ffa8 	bl	8009dc8 <osTimerNew>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <MX_FREERTOS_Init+0x1bc>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerOLED */
  NeedleInfoTimerOLEDHandle = osTimerNew(NeedleInfoTimerOLEDCallback, osTimerPeriodic, NULL, &NeedleInfoTimerOLED_attributes);
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <MX_FREERTOS_Init+0x1c0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	2101      	movs	r1, #1
 8001e84:	484c      	ldr	r0, [pc, #304]	; (8001fb8 <MX_FREERTOS_Init+0x1c4>)
 8001e86:	f007 ff9f 	bl	8009dc8 <osTimerNew>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	; (8001fbc <MX_FREERTOS_Init+0x1c8>)
 8001e8e:	6013      	str	r3, [r2, #0]

  /* creation of SyringeInfoTimerCommunication */
  SyringeInfoTimerCommunicationHandle = osTimerNew(SyringeInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &SyringeInfoTimerCommunication_attributes);
 8001e90:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <MX_FREERTOS_Init+0x1cc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	484b      	ldr	r0, [pc, #300]	; (8001fc4 <MX_FREERTOS_Init+0x1d0>)
 8001e98:	f007 ff96 	bl	8009dc8 <osTimerNew>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <MX_FREERTOS_Init+0x1d4>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* creation of NeedleInfoTimerCommunication */
  NeedleInfoTimerCommunicationHandle = osTimerNew(NeedleInfoTimerCommunicationCallback, osTimerPeriodic, NULL, &NeedleInfoTimerCommunication_attributes);
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <MX_FREERTOS_Init+0x1d8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4849      	ldr	r0, [pc, #292]	; (8001fd0 <MX_FREERTOS_Init+0x1dc>)
 8001eaa:	f007 ff8d 	bl	8009dc8 <osTimerNew>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <MX_FREERTOS_Init+0x1e0>)
 8001eb2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSyringeInfoOLED */
  QueueSyringeInfoOLEDHandle = osMessageQueueNew (8, sizeof(Syringe_info), &QueueSyringeInfoOLED_attributes);
 8001eb4:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <MX_FREERTOS_Init+0x1e4>)
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	2008      	movs	r0, #8
 8001eba:	f008 faeb 	bl	800a494 <osMessageQueueNew>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <MX_FREERTOS_Init+0x1e8>)
 8001ec2:	6013      	str	r3, [r2, #0]

  /* creation of QueueSyringeInfoCommunication */
  QueueSyringeInfoCommunicationHandle = osMessageQueueNew (2, sizeof(Syringe_info), &QueueSyringeInfoCommunication_attributes);
 8001ec4:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <MX_FREERTOS_Init+0x1ec>)
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f008 fae3 	bl	800a494 <osMessageQueueNew>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a44      	ldr	r2, [pc, #272]	; (8001fe4 <MX_FREERTOS_Init+0x1f0>)
 8001ed2:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoOLED */
  QueueNeedleInfoOLEDHandle = osMessageQueueNew (8, sizeof(Needle_info), &QueueNeedleInfoOLED_attributes);
 8001ed4:	4a44      	ldr	r2, [pc, #272]	; (8001fe8 <MX_FREERTOS_Init+0x1f4>)
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	2008      	movs	r0, #8
 8001eda:	f008 fadb 	bl	800a494 <osMessageQueueNew>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a42      	ldr	r2, [pc, #264]	; (8001fec <MX_FREERTOS_Init+0x1f8>)
 8001ee2:	6013      	str	r3, [r2, #0]

  /* creation of QueueNeedleInfoCommunication */
  QueueNeedleInfoCommunicationHandle = osMessageQueueNew (4, sizeof(Needle_info), &QueueNeedleInfoCommunication_attributes);
 8001ee4:	4a42      	ldr	r2, [pc, #264]	; (8001ff0 <MX_FREERTOS_Init+0x1fc>)
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	2004      	movs	r0, #4
 8001eea:	f008 fad3 	bl	800a494 <osMessageQueueNew>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <MX_FREERTOS_Init+0x200>)
 8001ef2:	6013      	str	r3, [r2, #0]

  /* creation of QueueTemperatureCommunication */
  QueueTemperatureCommunicationHandle = osMessageQueueNew (4, sizeof(Temperature_info), &QueueTemperatureCommunication_attributes);
 8001ef4:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <MX_FREERTOS_Init+0x204>)
 8001ef6:	2108      	movs	r1, #8
 8001ef8:	2004      	movs	r0, #4
 8001efa:	f008 facb 	bl	800a494 <osMessageQueueNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <MX_FREERTOS_Init+0x208>)
 8001f02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeatTast */
  HeartBeatTastHandle = osThreadNew(StartHeartBeatTast, NULL, &HeartBeatTast_attributes);
 8001f04:	4a3e      	ldr	r2, [pc, #248]	; (8002000 <MX_FREERTOS_Init+0x20c>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	483e      	ldr	r0, [pc, #248]	; (8002004 <MX_FREERTOS_Init+0x210>)
 8001f0a:	f007 fe73 	bl	8009bf4 <osThreadNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a3d      	ldr	r2, [pc, #244]	; (8002008 <MX_FREERTOS_Init+0x214>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* creation of SyringeControlT */
  SyringeControlTHandle = osThreadNew(StartSyringeControlTask, NULL, &SyringeControlT_attributes);
 8001f14:	4a3d      	ldr	r2, [pc, #244]	; (800200c <MX_FREERTOS_Init+0x218>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	483d      	ldr	r0, [pc, #244]	; (8002010 <MX_FREERTOS_Init+0x21c>)
 8001f1a:	f007 fe6b 	bl	8009bf4 <osThreadNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <MX_FREERTOS_Init+0x220>)
 8001f22:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8001f24:	4a3c      	ldr	r2, [pc, #240]	; (8002018 <MX_FREERTOS_Init+0x224>)
 8001f26:	2100      	movs	r1, #0
 8001f28:	483c      	ldr	r0, [pc, #240]	; (800201c <MX_FREERTOS_Init+0x228>)
 8001f2a:	f007 fe63 	bl	8009bf4 <osThreadNew>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <MX_FREERTOS_Init+0x22c>)
 8001f32:	6013      	str	r3, [r2, #0]

  /* creation of NeedleControlTa */
  NeedleControlTaHandle = osThreadNew(StartNeedleControlTask, NULL, &NeedleControlTa_attributes);
 8001f34:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <MX_FREERTOS_Init+0x230>)
 8001f36:	2100      	movs	r1, #0
 8001f38:	483b      	ldr	r0, [pc, #236]	; (8002028 <MX_FREERTOS_Init+0x234>)
 8001f3a:	f007 fe5b 	bl	8009bf4 <osThreadNew>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a3a      	ldr	r2, [pc, #232]	; (800202c <MX_FREERTOS_Init+0x238>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);
 8001f44:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <MX_FREERTOS_Init+0x23c>)
 8001f46:	2100      	movs	r1, #0
 8001f48:	483a      	ldr	r0, [pc, #232]	; (8002034 <MX_FREERTOS_Init+0x240>)
 8001f4a:	f007 fe53 	bl	8009bf4 <osThreadNew>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a39      	ldr	r2, [pc, #228]	; (8002038 <MX_FREERTOS_Init+0x244>)
 8001f52:	6013      	str	r3, [r2, #0]

  /* creation of TemperatureTask */
  TemperatureTaskHandle = osThreadNew(StartTemperatureTask, NULL, &TemperatureTask_attributes);
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <MX_FREERTOS_Init+0x248>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	4839      	ldr	r0, [pc, #228]	; (8002040 <MX_FREERTOS_Init+0x24c>)
 8001f5a:	f007 fe4b 	bl	8009bf4 <osThreadNew>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a38      	ldr	r2, [pc, #224]	; (8002044 <MX_FREERTOS_Init+0x250>)
 8001f62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	0800e594 	.word	0x0800e594
 8001f6c:	200004dc 	.word	0x200004dc
 8001f70:	0800e5a4 	.word	0x0800e5a4
 8001f74:	200004e0 	.word	0x200004e0
 8001f78:	0800e5b4 	.word	0x0800e5b4
 8001f7c:	200004e4 	.word	0x200004e4
 8001f80:	0800e5c4 	.word	0x0800e5c4
 8001f84:	200004e8 	.word	0x200004e8
 8001f88:	0800e5d4 	.word	0x0800e5d4
 8001f8c:	200004ec 	.word	0x200004ec
 8001f90:	0800e5e4 	.word	0x0800e5e4
 8001f94:	200004f0 	.word	0x200004f0
 8001f98:	0800e5f4 	.word	0x0800e5f4
 8001f9c:	200004f4 	.word	0x200004f4
 8001fa0:	0800e604 	.word	0x0800e604
 8001fa4:	200004f8 	.word	0x200004f8
 8001fa8:	0800e554 	.word	0x0800e554
 8001fac:	0800262d 	.word	0x0800262d
 8001fb0:	200004cc 	.word	0x200004cc
 8001fb4:	0800e564 	.word	0x0800e564
 8001fb8:	0800264d 	.word	0x0800264d
 8001fbc:	200004d0 	.word	0x200004d0
 8001fc0:	0800e574 	.word	0x0800e574
 8001fc4:	0800266d 	.word	0x0800266d
 8001fc8:	200004d4 	.word	0x200004d4
 8001fcc:	0800e584 	.word	0x0800e584
 8001fd0:	0800268d 	.word	0x0800268d
 8001fd4:	200004d8 	.word	0x200004d8
 8001fd8:	0800e4dc 	.word	0x0800e4dc
 8001fdc:	200004b8 	.word	0x200004b8
 8001fe0:	0800e4f4 	.word	0x0800e4f4
 8001fe4:	200004bc 	.word	0x200004bc
 8001fe8:	0800e50c 	.word	0x0800e50c
 8001fec:	200004c0 	.word	0x200004c0
 8001ff0:	0800e524 	.word	0x0800e524
 8001ff4:	200004c4 	.word	0x200004c4
 8001ff8:	0800e53c 	.word	0x0800e53c
 8001ffc:	200004c8 	.word	0x200004c8
 8002000:	0800e404 	.word	0x0800e404
 8002004:	08002049 	.word	0x08002049
 8002008:	200004a0 	.word	0x200004a0
 800200c:	0800e428 	.word	0x0800e428
 8002010:	08002081 	.word	0x08002081
 8002014:	200004a4 	.word	0x200004a4
 8002018:	0800e44c 	.word	0x0800e44c
 800201c:	080021f1 	.word	0x080021f1
 8002020:	200004a8 	.word	0x200004a8
 8002024:	0800e470 	.word	0x0800e470
 8002028:	080023c1 	.word	0x080023c1
 800202c:	200004ac 	.word	0x200004ac
 8002030:	0800e494 	.word	0x0800e494
 8002034:	08002531 	.word	0x08002531
 8002038:	200004b0 	.word	0x200004b0
 800203c:	0800e4b8 	.word	0x0800e4b8
 8002040:	08002601 	.word	0x08002601
 8002044:	200004b4 	.word	0x200004b4

08002048 <StartHeartBeatTast>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBeatTast */
void StartHeartBeatTast(void *argument)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBeatTast */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002050:	2101      	movs	r1, #1
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <StartHeartBeatTast+0x30>)
 8002054:	f003 f9ef 	bl	8005436 <HAL_GPIO_TogglePin>
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8002058:	f007 fdc2 	bl	8009be0 <osKernelGetTickFreq>
 800205c:	4603      	mov	r3, r0
 800205e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <StartHeartBeatTast+0x34>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	4618      	mov	r0, r3
 8002070:	f007 fe66 	bl	8009d40 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002074:	e7ec      	b.n	8002050 <StartHeartBeatTast+0x8>
 8002076:	bf00      	nop
 8002078:	40020400 	.word	0x40020400
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <StartSyringeControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSyringeControlTask */
void StartSyringeControlTask(void *argument)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b09d      	sub	sp, #116	; 0x74
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSyringeControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Syringe = {	.NAME = "SYRINGE",
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <StartSyringeControlTask+0x148>)
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	4611      	mov	r1, r2
 8002090:	2258      	movs	r2, #88	; 0x58
 8002092:	4618      	mov	r0, r3
 8002094:	f00b fe20 	bl	800dcd8 <memcpy>
	//
	Syringe_info _Syringe_info;
	//
	// Initialization
	//
	Init_A4988(&Syringe); // Drive initialization
 8002098:	f107 0318 	add.w	r3, r7, #24
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f84d 	bl	800113c <Init_A4988>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <StartSyringeControlTask+0x14c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f04f 31ff 	mov.w	r1, #4294967295
 80020aa:	4618      	mov	r0, r3
 80020ac:	f007 ffea 	bl	800a084 <osMutexAcquire>
	VL6180X_Init(&Syringe_sensor, &hi2c4); // Sensor initialization
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4946      	ldr	r1, [pc, #280]	; (80021d0 <StartSyringeControlTask+0x150>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fcb7 	bl	8001a2a <VL6180X_Init>
	configureDefault_VL6180X(&Syringe_sensor); // Sensor initialization
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fe43 	bl	8001d4c <configureDefault_VL6180X>
	osMutexRelease(MutexI2C4Handle);
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <StartSyringeControlTask+0x14c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f008 f838 	bl	800a140 <osMutexRelease>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <StartSyringeControlTask+0x14c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	4618      	mov	r0, r3
 80020da:	f007 ffd3 	bl	800a084 <osMutexAcquire>
	_Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Initial measurement
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe72 	bl	8001dcc <readRangeSingleMillimeters_VL6180X>
 80020e8:	4603      	mov	r3, r0
 80020ea:	813b      	strh	r3, [r7, #8]
	_Syringe_info.Set_distance_syringe = _Syringe_info.MEASURE_Syringe;
 80020ec:	893b      	ldrh	r3, [r7, #8]
 80020ee:	817b      	strh	r3, [r7, #10]
	osMutexRelease(MutexI2C4Handle);
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <StartSyringeControlTask+0x14c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f008 f823 	bl	800a140 <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(SyringeInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 80020fa:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <StartSyringeControlTask+0x154>)
 80020fc:	681c      	ldr	r4, [r3, #0]
 80020fe:	f007 fd6f 	bl	8009be0 <osKernelGetTickFreq>
 8002102:	4603      	mov	r3, r0
 8002104:	f240 2226 	movw	r2, #550	; 0x226
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <StartSyringeControlTask+0x158>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	4619      	mov	r1, r3
 8002116:	4620      	mov	r0, r4
 8002118:	f007 feda 	bl	8009ed0 <osTimerStart>
	osTimerStart(SyringeInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <StartSyringeControlTask+0x15c>)
 800211e:	681c      	ldr	r4, [r3, #0]
 8002120:	f007 fd5e 	bl	8009be0 <osKernelGetTickFreq>
 8002124:	4603      	mov	r3, r0
 8002126:	f240 2226 	movw	r2, #550	; 0x226
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <StartSyringeControlTask+0x158>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	4619      	mov	r1, r3
 8002138:	4620      	mov	r0, r4
 800213a:	f007 fec9 	bl	8009ed0 <osTimerStart>
	  	  // TODO

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <StartSyringeControlTask+0x14c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 31ff 	mov.w	r1, #4294967295
 8002146:	4618      	mov	r0, r3
 8002148:	f007 ff9c 	bl	800a084 <osMutexAcquire>
	  _Syringe_info.MEASURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fe3b 	bl	8001dcc <readRangeSingleMillimeters_VL6180X>
 8002156:	4603      	mov	r3, r0
 8002158:	813b      	strh	r3, [r7, #8]
	  osMutexRelease(MutexI2C4Handle);
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <StartSyringeControlTask+0x14c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f007 ffee 	bl	800a140 <osMutexRelease>

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(SyringeInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <StartSyringeControlTask+0x160>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f008 f8d4 	bl	800a318 <osSemaphoreAcquire>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <StartSyringeControlTask+0x108>
		  osMessageQueuePut(QueueSyringeInfoCommunicationHandle, &_Syringe_info, 0, osWaitForever);
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <StartSyringeControlTask+0x164>)
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	f107 0108 	add.w	r1, r7, #8
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	2200      	movs	r2, #0
 8002184:	f008 fa0c 	bl	800a5a0 <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(SyringeInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <StartSyringeControlTask+0x168>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f008 f8c2 	bl	800a318 <osSemaphoreAcquire>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <StartSyringeControlTask+0x12c>
	  		osMessageQueuePut(QueueSyringeInfoOLEDHandle, &_Syringe_info, 0, osWaitForever);
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <StartSyringeControlTask+0x16c>)
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	f107 0108 	add.w	r1, r7, #8
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	2200      	movs	r2, #0
 80021a8:	f008 f9fa 	bl	800a5a0 <osMessageQueuePut>
	  // Control algorithm
	  //
	  // TODO implement

	  // Time interval
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 80021ac:	f007 fd18 	bl	8009be0 <osKernelGetTickFreq>
 80021b0:	4603      	mov	r3, r0
 80021b2:	22c8      	movs	r2, #200	; 0xc8
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <StartSyringeControlTask+0x158>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	4618      	mov	r0, r3
 80021c2:	f007 fdbd 	bl	8009d40 <osDelay>
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 80021c6:	e7ba      	b.n	800213e <StartSyringeControlTask+0xbe>
 80021c8:	0800e0bc 	.word	0x0800e0bc
 80021cc:	200004e4 	.word	0x200004e4
 80021d0:	20000548 	.word	0x20000548
 80021d4:	200004cc 	.word	0x200004cc
 80021d8:	10624dd3 	.word	0x10624dd3
 80021dc:	200004d4 	.word	0x200004d4
 80021e0:	200004f4 	.word	0x200004f4
 80021e4:	200004bc 	.word	0x200004bc
 80021e8:	200004e8 	.word	0x200004e8
 80021ec:	200004b8 	.word	0x200004b8

080021f0 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLEDTask */
	// Variables
	char Message_OLED[32]; // Message buffer
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	_Needle_info.Set_distance_needle = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	817b      	strh	r3, [r7, #10]
	_Needle_info.MEASURE_Needle = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	813b      	strh	r3, [r7, #8]
	_Syringe_info.Set_distance_syringe = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	81fb      	strh	r3, [r7, #14]
	_Syringe_info.MEASURE_Syringe = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	81bb      	strh	r3, [r7, #12]
	// Screen initialization
	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002208:	4b63      	ldr	r3, [pc, #396]	; (8002398 <StartOLEDTask+0x1a8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	4618      	mov	r0, r3
 8002212:	f007 ff37 	bl	800a084 <osMutexAcquire>
	SSD1306_Init(&hi2c4);
 8002216:	4861      	ldr	r0, [pc, #388]	; (800239c <StartOLEDTask+0x1ac>)
 8002218:	f7ff fb12 	bl	8001840 <SSD1306_Init>
	osMutexRelease(MutexI2C4Handle);
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <StartOLEDTask+0x1a8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f007 ff8d 	bl	800a140 <osMutexRelease>

	GFX_SetFont(font_8x5);
 8002226:	485e      	ldr	r0, [pc, #376]	; (80023a0 <StartOLEDTask+0x1b0>)
 8002228:	f7fe ffaa 	bl	8001180 <GFX_SetFont>
	GFX_SetFontSize(1);
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe ffb7 	bl	80011a0 <GFX_SetFontSize>

	SSD1306_Clear(BLACK);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff fac8 	bl	80017c8 <SSD1306_Clear>

	osMutexAcquire(MutexI2C4Handle, osWaitForever);
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <StartOLEDTask+0x1a8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	4618      	mov	r0, r3
 8002242:	f007 ff1f 	bl	800a084 <osMutexAcquire>
	SSD1306_Display();
 8002246:	f7ff fadd 	bl	8001804 <SSD1306_Display>
	osMutexRelease(MutexI2C4Handle);
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <StartOLEDTask+0x1a8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f007 ff76 	bl	800a140 <osMutexRelease>
  {
	  //
	  // Get data from queues
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <StartOLEDTask+0x1b4>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	f107 010c 	add.w	r1, r7, #12
 800225c:	2300      	movs	r3, #0
 800225e:	2200      	movs	r2, #0
 8002260:	f008 fa12 	bl	800a688 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoOLEDHandle, &_Needle_info, NULL, 0);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <StartOLEDTask+0x1b8>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	f107 0108 	add.w	r1, r7, #8
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	f008 fa0a 	bl	800a688 <osMessageQueueGet>

	  //
	  // Make message
	  //
	  SSD1306_Clear(BLACK);
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff faa7 	bl	80017c8 <SSD1306_Clear>
	  sprintf(Message_OLED, "Needle position");
 800227a:	f107 0310 	add.w	r3, r7, #16
 800227e:	494b      	ldr	r1, [pc, #300]	; (80023ac <StartOLEDTask+0x1bc>)
 8002280:	4618      	mov	r0, r3
 8002282:	f002 f991 	bl	80045a8 <sprintf_>
	  GFX_DrawString(20, 0, Message_OLED, WHITE, 0);
 8002286:	f107 0210 	add.w	r2, r7, #16
 800228a:	2300      	movs	r3, #0
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2301      	movs	r3, #1
 8002290:	2100      	movs	r1, #0
 8002292:	2014      	movs	r0, #20
 8002294:	f7ff f852 	bl	800133c <GFX_DrawString>
	  GFX_DrawLine(0, 9, 128, 9, WHITE);
 8002298:	2301      	movs	r3, #1
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2309      	movs	r3, #9
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	2109      	movs	r1, #9
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff f963 	bl	800156e <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Needle_info.Set_distance_needle); //Set_distance_needle
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	493f      	ldr	r1, [pc, #252]	; (80023b0 <StartOLEDTask+0x1c0>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 f978 	bl	80045a8 <sprintf_>
	  GFX_DrawString(0, 12, Message_OLED, WHITE, 0);
 80022b8:	f107 0210 	add.w	r2, r7, #16
 80022bc:	2300      	movs	r3, #0
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	210c      	movs	r1, #12
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff f839 	bl	800133c <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Needle_info.MEASURE_Needle); //MEASURE_Needle
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	461a      	mov	r2, r3
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	4938      	ldr	r1, [pc, #224]	; (80023b4 <StartOLEDTask+0x1c4>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 f967 	bl	80045a8 <sprintf_>
	  GFX_DrawString(0, 22, Message_OLED, WHITE, 0);
 80022da:	f107 0210 	add.w	r2, r7, #16
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2301      	movs	r3, #1
 80022e4:	2116      	movs	r1, #22
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7ff f828 	bl	800133c <GFX_DrawString>
	  sprintf(Message_OLED, "Syringe position");
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4931      	ldr	r1, [pc, #196]	; (80023b8 <StartOLEDTask+0x1c8>)
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 f958 	bl	80045a8 <sprintf_>
	  GFX_DrawString(15, 32, Message_OLED, WHITE, 0);
 80022f8:	f107 0210 	add.w	r2, r7, #16
 80022fc:	2300      	movs	r3, #0
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	2120      	movs	r1, #32
 8002304:	200f      	movs	r0, #15
 8002306:	f7ff f819 	bl	800133c <GFX_DrawString>
	  GFX_DrawLine(0, 41, 128, 41, WHITE);
 800230a:	2301      	movs	r3, #1
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2329      	movs	r3, #41	; 0x29
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	2129      	movs	r1, #41	; 0x29
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff f92a 	bl	800156e <GFX_DrawLine>
	  sprintf(Message_OLED, "Set: %d mm", _Syringe_info.Set_distance_syringe); //Set_distance_syringe
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	461a      	mov	r2, r3
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4923      	ldr	r1, [pc, #140]	; (80023b0 <StartOLEDTask+0x1c0>)
 8002324:	4618      	mov	r0, r3
 8002326:	f002 f93f 	bl	80045a8 <sprintf_>
	  GFX_DrawString(0, 44, Message_OLED, WHITE, 0);
 800232a:	f107 0210 	add.w	r2, r7, #16
 800232e:	2300      	movs	r3, #0
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff f800 	bl	800133c <GFX_DrawString>
	  sprintf(Message_OLED, "Measure: %d mm", _Syringe_info.MEASURE_Syringe); //MEASURE_Syringe
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	491b      	ldr	r1, [pc, #108]	; (80023b4 <StartOLEDTask+0x1c4>)
 8002346:	4618      	mov	r0, r3
 8002348:	f002 f92e 	bl	80045a8 <sprintf_>
	  GFX_DrawString(0, 54, Message_OLED, WHITE, 0);
 800234c:	f107 0210 	add.w	r2, r7, #16
 8002350:	2300      	movs	r3, #0
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2301      	movs	r3, #1
 8002356:	2136      	movs	r1, #54	; 0x36
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe ffef 	bl	800133c <GFX_DrawString>

	  // Display
	  osMutexAcquire(MutexI2C4Handle, osWaitForever);
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <StartOLEDTask+0x1a8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f04f 31ff 	mov.w	r1, #4294967295
 8002366:	4618      	mov	r0, r3
 8002368:	f007 fe8c 	bl	800a084 <osMutexAcquire>
	  SSD1306_Display();
 800236c:	f7ff fa4a 	bl	8001804 <SSD1306_Display>
	  osMutexRelease(MutexI2C4Handle);
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <StartOLEDTask+0x1a8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f007 fee3 	bl	800a140 <osMutexRelease>

	  // Time interval
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
 800237a:	f007 fc31 	bl	8009be0 <osKernelGetTickFreq>
 800237e:	4603      	mov	r3, r0
 8002380:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <StartOLEDTask+0x1cc>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	4618      	mov	r0, r3
 8002392:	f007 fcd5 	bl	8009d40 <osDelay>
	  osMessageQueueGet(QueueSyringeInfoOLEDHandle, &_Syringe_info, NULL, 0);
 8002396:	e75d      	b.n	8002254 <StartOLEDTask+0x64>
 8002398:	200004e4 	.word	0x200004e4
 800239c:	20000548 	.word	0x20000548
 80023a0:	0800e224 	.word	0x0800e224
 80023a4:	200004b8 	.word	0x200004b8
 80023a8:	200004c0 	.word	0x200004c0
 80023ac:	0800e114 	.word	0x0800e114
 80023b0:	0800e124 	.word	0x0800e124
 80023b4:	0800e130 	.word	0x0800e130
 80023b8:	0800e140 	.word	0x0800e140
 80023bc:	10624dd3 	.word	0x10624dd3

080023c0 <StartNeedleControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNeedleControlTask */
void StartNeedleControlTask(void *argument)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b09d      	sub	sp, #116	; 0x74
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNeedleControlTask */
	//
	// Motor controllers
	//
	A4988_Drive Needle = {	.NAME = "NEEDLE",
 80023c8:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <StartNeedleControlTask+0x148>)
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	4611      	mov	r1, r2
 80023d0:	2258      	movs	r2, #88	; 0x58
 80023d2:	4618      	mov	r0, r3
 80023d4:	f00b fc80 	bl	800dcd8 <memcpy>
	//
	Needle_info _Needle_info;
	//
	// Initialization
	//
	Init_A4988(&Needle); // Drive initialization
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fead 	bl	800113c <Init_A4988>

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80023e2:	4b4a      	ldr	r3, [pc, #296]	; (800250c <StartNeedleControlTask+0x14c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ea:	4618      	mov	r0, r3
 80023ec:	f007 fe4a 	bl	800a084 <osMutexAcquire>
	VL6180X_Init(&Needle_sensor, &hi2c2); // Sensor initialization
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	4946      	ldr	r1, [pc, #280]	; (8002510 <StartNeedleControlTask+0x150>)
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fb17 	bl	8001a2a <VL6180X_Init>
	configureDefault_VL6180X(&Needle_sensor); // Sensor initialization
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fca3 	bl	8001d4c <configureDefault_VL6180X>
	osMutexRelease(MutexI2C2Handle);
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <StartNeedleControlTask+0x14c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f007 fe98 	bl	800a140 <osMutexRelease>

	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002410:	4b3e      	ldr	r3, [pc, #248]	; (800250c <StartNeedleControlTask+0x14c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	4618      	mov	r0, r3
 800241a:	f007 fe33 	bl	800a084 <osMutexAcquire>
	_Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Initial measurement
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fcd2 	bl	8001dcc <readRangeSingleMillimeters_VL6180X>
 8002428:	4603      	mov	r3, r0
 800242a:	813b      	strh	r3, [r7, #8]
	_Needle_info.Set_distance_needle = _Needle_info.MEASURE_Needle;
 800242c:	893b      	ldrh	r3, [r7, #8]
 800242e:	817b      	strh	r3, [r7, #10]
	osMutexRelease(MutexI2C2Handle);
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <StartNeedleControlTask+0x14c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f007 fe83 	bl	800a140 <osMutexRelease>

	//
	// Timers
	//
	osTimerStart(NeedleInfoTimerOLEDHandle, (550 * osKernelGetTickFreq()) / 1000 ); // OLED Timer
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <StartNeedleControlTask+0x154>)
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	f007 fbcf 	bl	8009be0 <osKernelGetTickFreq>
 8002442:	4603      	mov	r3, r0
 8002444:	f240 2226 	movw	r2, #550	; 0x226
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	4a32      	ldr	r2, [pc, #200]	; (8002518 <StartNeedleControlTask+0x158>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	4619      	mov	r1, r3
 8002456:	4620      	mov	r0, r4
 8002458:	f007 fd3a 	bl	8009ed0 <osTimerStart>
	osTimerStart(NeedleInfoTimerCommunicationHandle, (550 * osKernelGetTickFreq()) / 1000 ); // Communication Timer
 800245c:	4b2f      	ldr	r3, [pc, #188]	; (800251c <StartNeedleControlTask+0x15c>)
 800245e:	681c      	ldr	r4, [r3, #0]
 8002460:	f007 fbbe 	bl	8009be0 <osKernelGetTickFreq>
 8002464:	4603      	mov	r3, r0
 8002466:	f240 2226 	movw	r2, #550	; 0x226
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <StartNeedleControlTask+0x158>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	4619      	mov	r1, r3
 8002478:	4620      	mov	r0, r4
 800247a:	f007 fd29 	bl	8009ed0 <osTimerStart>
	  	  	  // TODO

	  //
	  // Read measurement from sensor
	  //
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <StartNeedleControlTask+0x14c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f04f 31ff 	mov.w	r1, #4294967295
 8002486:	4618      	mov	r0, r3
 8002488:	f007 fdfc 	bl	800a084 <osMutexAcquire>
	  _Needle_info.MEASURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Measurement
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fc9b 	bl	8001dcc <readRangeSingleMillimeters_VL6180X>
 8002496:	4603      	mov	r3, r0
 8002498:	813b      	strh	r3, [r7, #8]
	  osMutexRelease(MutexI2C2Handle);
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <StartNeedleControlTask+0x14c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f007 fe4e 	bl	800a140 <osMutexRelease>

	  //
	  // Send data to queue
	  //
	  if (osOK == osSemaphoreAcquire(NeedleInfoCommunicationSemaphoreHandle, 0)){ // Send to communication
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <StartNeedleControlTask+0x160>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f007 ff34 	bl	800a318 <osSemaphoreAcquire>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <StartNeedleControlTask+0x108>
		  osMessageQueuePut(QueueNeedleInfoCommunicationHandle, &_Needle_info, 0, osWaitForever);
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <StartNeedleControlTask+0x164>)
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f107 0108 	add.w	r1, r7, #8
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	2200      	movs	r2, #0
 80024c4:	f008 f86c 	bl	800a5a0 <osMessageQueuePut>
	  }
	  if (osOK == osSemaphoreAcquire(NeedleInfoOLEDSemaphoreHandle, 0)) { // Send to OLED
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <StartNeedleControlTask+0x168>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 ff22 	bl	800a318 <osSemaphoreAcquire>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <StartNeedleControlTask+0x12c>
		  osMessageQueuePut(QueueNeedleInfoOLEDHandle, &_Needle_info, 0, osWaitForever);
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <StartNeedleControlTask+0x16c>)
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f107 0108 	add.w	r1, r7, #8
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	2200      	movs	r2, #0
 80024e8:	f008 f85a 	bl	800a5a0 <osMessageQueuePut>
	  // Control algorithm
	  //
	  	  // TODO implement

	  // Time interval
	  osDelay((200 * osKernelGetTickFreq()) / 1000);
 80024ec:	f007 fb78 	bl	8009be0 <osKernelGetTickFreq>
 80024f0:	4603      	mov	r3, r0
 80024f2:	22c8      	movs	r2, #200	; 0xc8
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	4a07      	ldr	r2, [pc, #28]	; (8002518 <StartNeedleControlTask+0x158>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	4618      	mov	r0, r3
 8002502:	f007 fc1d 	bl	8009d40 <osDelay>
	  osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002506:	e7ba      	b.n	800247e <StartNeedleControlTask+0xbe>
 8002508:	0800e154 	.word	0x0800e154
 800250c:	200004e0 	.word	0x200004e0
 8002510:	200004fc 	.word	0x200004fc
 8002514:	200004d0 	.word	0x200004d0
 8002518:	10624dd3 	.word	0x10624dd3
 800251c:	200004d8 	.word	0x200004d8
 8002520:	200004f8 	.word	0x200004f8
 8002524:	200004c4 	.word	0x200004c4
 8002528:	200004ec 	.word	0x200004ec
 800252c:	200004c0 	.word	0x200004c0

08002530 <StartCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
 8002530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002534:	b08c      	sub	sp, #48	; 0x30
 8002536:	af06      	add	r7, sp, #24
 8002538:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicationTask */
	//Receive data

	HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 800253a:	2204      	movs	r2, #4
 800253c:	4929      	ldr	r1, [pc, #164]	; (80025e4 <StartCommunicationTask+0xb4>)
 800253e:	482a      	ldr	r0, [pc, #168]	; (80025e8 <StartCommunicationTask+0xb8>)
 8002540:	f006 f8dd 	bl	80086fe <HAL_UART_Receive_IT>

	// Info data initialization
	Syringe_info _Syringe_info;
	Needle_info _Needle_info;
	Temperature_info _Temperature_info;
	_Needle_info.Set_distance_needle = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	827b      	strh	r3, [r7, #18]
	_Needle_info.MEASURE_Needle = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	823b      	strh	r3, [r7, #16]
	_Syringe_info.Set_distance_syringe = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	82fb      	strh	r3, [r7, #22]
	_Syringe_info.MEASURE_Syringe = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	82bb      	strh	r3, [r7, #20]
	_Temperature_info.Fan_info = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	733b      	strb	r3, [r7, #12]
	_Temperature_info.Temperature = 0;
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
  {
	  //
	  // Get data
	  //
	  // Get data from Syringe info queue
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <StartCommunicationTask+0xbc>)
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	f107 0114 	add.w	r1, r7, #20
 8002566:	2300      	movs	r3, #0
 8002568:	2200      	movs	r2, #0
 800256a:	f008 f88d 	bl	800a688 <osMessageQueueGet>
	  // Get data from Needle info queue
	  osMessageQueueGet(QueueNeedleInfoCommunicationHandle, &_Needle_info, NULL, 0);
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <StartCommunicationTask+0xc0>)
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	f107 0110 	add.w	r1, r7, #16
 8002576:	2300      	movs	r3, #0
 8002578:	2200      	movs	r2, #0
 800257a:	f008 f885 	bl	800a688 <osMessageQueueGet>
	  // Get data from Temperature info queue
	  osMessageQueueGet(QueueTemperatureCommunicationHandle, &_Temperature_info, NULL, 0);
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <StartCommunicationTask+0xc4>)
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f107 0108 	add.w	r1, r7, #8
 8002586:	2300      	movs	r3, #0
 8002588:	2200      	movs	r2, #0
 800258a:	f008 f87d 	bl	800a688 <osMessageQueueGet>

	  //
	  // Send message
	  //
	  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 800258e:	8a3b      	ldrh	r3, [r7, #16]
 8002590:	461d      	mov	r5, r3
			  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002592:	8abb      	ldrh	r3, [r7, #20]
	  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002594:	461e      	mov	r6, r3
			  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 8002596:	8a7b      	ldrh	r3, [r7, #18]
	  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 8002598:	4698      	mov	r8, r3
			  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 800259a:	8afb      	ldrh	r3, [r7, #22]
	  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 800259c:	461c      	mov	r4, r3
			  _Syringe_info.MEASURE_Syringe,_Needle_info.Set_distance_needle,_Syringe_info.Set_distance_syringe,_Temperature_info.Temperature,
 800259e:	68bb      	ldr	r3, [r7, #8]
	  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff99 	bl	80004d8 <__aeabi_f2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
			  _Temperature_info.Fan_info,0);
 80025aa:	7b39      	ldrb	r1, [r7, #12]
	  printf("{\"NP\":%d,\"SP\":%d,\"NS\":%d,\"SS\":%d,\"TM\":%.1f,\"FN\":%d,\"ST\":%d}\n\r",_Needle_info.MEASURE_Needle,
 80025ac:	4608      	mov	r0, r1
 80025ae:	2100      	movs	r1, #0
 80025b0:	9105      	str	r1, [sp, #20]
 80025b2:	9004      	str	r0, [sp, #16]
 80025b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025b8:	9400      	str	r4, [sp, #0]
 80025ba:	4643      	mov	r3, r8
 80025bc:	4632      	mov	r2, r6
 80025be:	4629      	mov	r1, r5
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <StartCommunicationTask+0xc8>)
 80025c2:	f001 ffd5 	bl	8004570 <printf_>

	  // Time interval
	  osDelay((500 * osKernelGetTickFreq()) / 1000);
 80025c6:	f007 fb0b 	bl	8009be0 <osKernelGetTickFreq>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	4a09      	ldr	r2, [pc, #36]	; (80025fc <StartCommunicationTask+0xcc>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	4618      	mov	r0, r3
 80025de:	f007 fbaf 	bl	8009d40 <osDelay>
	  osMessageQueueGet(QueueSyringeInfoCommunicationHandle, &_Syringe_info, NULL, 0);
 80025e2:	e7bc      	b.n	800255e <StartCommunicationTask+0x2e>
 80025e4:	2000049c 	.word	0x2000049c
 80025e8:	20000710 	.word	0x20000710
 80025ec:	200004bc 	.word	0x200004bc
 80025f0:	200004c4 	.word	0x200004c4
 80025f4:	200004c8 	.word	0x200004c8
 80025f8:	0800e1ac 	.word	0x0800e1ac
 80025fc:	10624dd3 	.word	0x10624dd3

08002600 <StartTemperatureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemperatureTask */
void StartTemperatureTask(void *argument)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemperatureTask */
  /* Infinite loop */
  for(;;)
  {
	  // Time interval
	  osDelay((1000 * osKernelGetTickFreq()) / 1000);
 8002608:	f007 faea 	bl	8009be0 <osKernelGetTickFreq>
 800260c:	4603      	mov	r3, r0
 800260e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a04      	ldr	r2, [pc, #16]	; (8002628 <StartTemperatureTask+0x28>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	4618      	mov	r0, r3
 8002620:	f007 fb8e 	bl	8009d40 <osDelay>
 8002624:	e7f0      	b.n	8002608 <StartTemperatureTask+0x8>
 8002626:	bf00      	nop
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <SyringeInfoTimerOLEDCallback>:
  /* USER CODE END StartTemperatureTask */
}

/* SyringeInfoTimerOLEDCallback function */
void SyringeInfoTimerOLEDCallback(void *argument)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerOLEDCallback */
	osSemaphoreRelease(SyringeInfoOLEDSemaphoreHandle);
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SyringeInfoTimerOLEDCallback+0x1c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f007 fed3 	bl	800a3e4 <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerOLEDCallback */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200004e8 	.word	0x200004e8

0800264c <NeedleInfoTimerOLEDCallback>:

/* NeedleInfoTimerOLEDCallback function */
void NeedleInfoTimerOLEDCallback(void *argument)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerOLEDCallback */
	osSemaphoreRelease(NeedleInfoOLEDSemaphoreHandle);
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <NeedleInfoTimerOLEDCallback+0x1c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f007 fec3 	bl	800a3e4 <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerOLEDCallback */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200004ec 	.word	0x200004ec

0800266c <SyringeInfoTimerCommunicationCallback>:

/* SyringeInfoTimerCommunicationCallback function */
void SyringeInfoTimerCommunicationCallback(void *argument)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SyringeInfoTimerCommunicationCallback */
	osSemaphoreRelease(SyringeInfoCommunicationSemaphoreHandle);
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <SyringeInfoTimerCommunicationCallback+0x1c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f007 feb3 	bl	800a3e4 <osSemaphoreRelease>
  /* USER CODE END SyringeInfoTimerCommunicationCallback */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200004f4 	.word	0x200004f4

0800268c <NeedleInfoTimerCommunicationCallback>:

/* NeedleInfoTimerCommunicationCallback function */
void NeedleInfoTimerCommunicationCallback(void *argument)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeedleInfoTimerCommunicationCallback */
	osSemaphoreRelease(NeedleInfoCommunicationSemaphoreHandle);
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <NeedleInfoTimerCommunicationCallback+0x1c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f007 fea3 	bl	800a3e4 <osSemaphoreRelease>
  /* USER CODE END NeedleInfoTimerCommunicationCallback */
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200004f8 	.word	0x200004f8

080026ac <_putchar>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <_putchar+0x38>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f04f 31ff 	mov.w	r1, #4294967295
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 fce0 	bl	800a084 <osMutexAcquire>
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 1000);
 80026c4:	1df9      	adds	r1, r7, #7
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	2201      	movs	r2, #1
 80026cc:	4806      	ldr	r0, [pc, #24]	; (80026e8 <_putchar+0x3c>)
 80026ce:	f005 ff83 	bl	80085d8 <HAL_UART_Transmit>
	osMutexRelease(MutexPrintfHandle);
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <_putchar+0x38>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f007 fd32 	bl	800a140 <osMutexRelease>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200004dc 	.word	0x200004dc
 80026e8:	20000710 	.word	0x20000710

080026ec <HAL_UART_RxCpltCallback>:
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_UART_RxCpltCallback+0x30>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d109      	bne.n	8002712 <HAL_UART_RxCpltCallback+0x26>
	{
		// Start of handling message
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80026fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002702:	4807      	ldr	r0, [pc, #28]	; (8002720 <HAL_UART_RxCpltCallback+0x34>)
 8002704:	f002 fe97 	bl	8005436 <HAL_GPIO_TogglePin>
		// Handling the message
		//
			// TODO implement

		// Listening setup
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 4);
 8002708:	2204      	movs	r2, #4
 800270a:	4906      	ldr	r1, [pc, #24]	; (8002724 <HAL_UART_RxCpltCallback+0x38>)
 800270c:	4806      	ldr	r0, [pc, #24]	; (8002728 <HAL_UART_RxCpltCallback+0x3c>)
 800270e:	f005 fff6 	bl	80086fe <HAL_UART_Receive_IT>
	}
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40004800 	.word	0x40004800
 8002720:	40020400 	.word	0x40020400
 8002724:	2000049c 	.word	0x2000049c
 8002728:	20000710 	.word	0x20000710

0800272c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08e      	sub	sp, #56	; 0x38
 8002730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002742:	4b79      	ldr	r3, [pc, #484]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a78      	ldr	r2, [pc, #480]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <MX_GPIO_Init+0x1fc>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a72      	ldr	r2, [pc, #456]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002760:	f043 0320 	orr.w	r3, r3, #32
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b70      	ldr	r3, [pc, #448]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <MX_GPIO_Init+0x1fc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a66      	ldr	r2, [pc, #408]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b64      	ldr	r3, [pc, #400]	; (8002928 <MX_GPIO_Init+0x1fc>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a5a      	ldr	r2, [pc, #360]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027c0:	f043 0310 	orr.w	r3, r3, #16
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b58      	ldr	r3, [pc, #352]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	4b55      	ldr	r3, [pc, #340]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a54      	ldr	r2, [pc, #336]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b52      	ldr	r3, [pc, #328]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a4e      	ldr	r2, [pc, #312]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <MX_GPIO_Init+0x1fc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	21e0      	movs	r1, #224	; 0xe0
 8002806:	4849      	ldr	r0, [pc, #292]	; (800292c <MX_GPIO_Init+0x200>)
 8002808:	f002 fdfc 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 800280c:	2200      	movs	r2, #0
 800280e:	f644 7181 	movw	r1, #20353	; 0x4f81
 8002812:	4847      	ldr	r0, [pc, #284]	; (8002930 <MX_GPIO_Init+0x204>)
 8002814:	f002 fdf6 	bl	8005404 <HAL_GPIO_WritePin>
                          |LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002818:	2200      	movs	r2, #0
 800281a:	f24d 4180 	movw	r1, #54400	; 0xd480
 800281e:	4845      	ldr	r0, [pc, #276]	; (8002934 <MX_GPIO_Init+0x208>)
 8002820:	f002 fdf0 	bl	8005404 <HAL_GPIO_WritePin>
                          |MS2_NEEDLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800282a:	4843      	ldr	r0, [pc, #268]	; (8002938 <MX_GPIO_Init+0x20c>)
 800282c:	f002 fdea 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	2140      	movs	r1, #64	; 0x40
 8002834:	4841      	ldr	r0, [pc, #260]	; (800293c <MX_GPIO_Init+0x210>)
 8002836:	f002 fde5 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284e:	4619      	mov	r1, r3
 8002850:	483b      	ldr	r0, [pc, #236]	; (8002940 <MX_GPIO_Init+0x214>)
 8002852:	f002 fc2b 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin;
 8002856:	23e0      	movs	r3, #224	; 0xe0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002862:	2302      	movs	r3, #2
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286a:	4619      	mov	r1, r3
 800286c:	482f      	ldr	r0, [pc, #188]	; (800292c <MX_GPIO_Init+0x200>)
 800286e:	f002 fc1d 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002872:	f244 0381 	movw	r3, #16513	; 0x4081
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002878:	2301      	movs	r3, #1
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002888:	4619      	mov	r1, r3
 800288a:	4829      	ldr	r0, [pc, #164]	; (8002930 <MX_GPIO_Init+0x204>)
 800288c:	f002 fc0e 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002890:	f24d 4380 	movw	r3, #54400	; 0xd480
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
                          |MS2_NEEDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800289e:	2302      	movs	r3, #2
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	4822      	ldr	r0, [pc, #136]	; (8002934 <MX_GPIO_Init+0x208>)
 80028aa:	f002 fbff 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin;
 80028ae:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028bc:	2302      	movs	r3, #2
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	481a      	ldr	r0, [pc, #104]	; (8002930 <MX_GPIO_Init+0x204>)
 80028c8:	f002 fbf0 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin;
 80028cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028da:	2302      	movs	r3, #2
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	4619      	mov	r1, r3
 80028e4:	4814      	ldr	r0, [pc, #80]	; (8002938 <MX_GPIO_Init+0x20c>)
 80028e6:	f002 fbe1 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ee:	2301      	movs	r3, #1
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fe:	4619      	mov	r1, r3
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <MX_GPIO_Init+0x210>)
 8002902:	f002 fbd3 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	4808      	ldr	r0, [pc, #32]	; (800293c <MX_GPIO_Init+0x210>)
 800291a:	f002 fbc7 	bl	80050ac <HAL_GPIO_Init>

}
 800291e:	bf00      	nop
 8002920:	3738      	adds	r7, #56	; 0x38
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40021000 	.word	0x40021000
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021800 	.word	0x40021800
 8002940:	40020800 	.word	0x40020800

08002944 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_I2C2_Init+0x74>)
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <MX_I2C2_Init+0x78>)
 800294c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <MX_I2C2_Init+0x7c>)
 8002952:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_I2C2_Init+0x74>)
 800295c:	2201      	movs	r2, #1
 800295e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_I2C2_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_I2C2_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002980:	f002 fd74 	bl	800546c <HAL_I2C_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800298a:	f000 f999 	bl	8002cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800298e:	2100      	movs	r1, #0
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <MX_I2C2_Init+0x74>)
 8002992:	f003 facf 	bl	8005f34 <HAL_I2CEx_ConfigAnalogFilter>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800299c:	f000 f990 	bl	8002cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029a0:	2100      	movs	r1, #0
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_I2C2_Init+0x74>)
 80029a4:	f003 fb11 	bl	8005fca <HAL_I2CEx_ConfigDigitalFilter>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80029ae:	f000 f987 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200004fc 	.word	0x200004fc
 80029bc:	40005800 	.word	0x40005800
 80029c0:	00301739 	.word	0x00301739

080029c4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <MX_I2C4_Init+0x78>)
 80029cc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00301739;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <MX_I2C4_Init+0x7c>)
 80029d2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029dc:	2201      	movs	r2, #1
 80029de:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <MX_I2C4_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80029fe:	480e      	ldr	r0, [pc, #56]	; (8002a38 <MX_I2C4_Init+0x74>)
 8002a00:	f002 fd34 	bl	800546c <HAL_I2C_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002a0a:	f000 f959 	bl	8002cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4809      	ldr	r0, [pc, #36]	; (8002a38 <MX_I2C4_Init+0x74>)
 8002a12:	f003 fa8f 	bl	8005f34 <HAL_I2CEx_ConfigAnalogFilter>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002a1c:	f000 f950 	bl	8002cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002a20:	2100      	movs	r1, #0
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_I2C4_Init+0x74>)
 8002a24:	f003 fad1 	bl	8005fca <HAL_I2CEx_ConfigDigitalFilter>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002a2e:	f000 f947 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000548 	.word	0x20000548
 8002a3c:	40006000 	.word	0x40006000
 8002a40:	00301739 	.word	0x00301739

08002a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0ac      	sub	sp, #176	; 0xb0
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a5c:	f107 0318 	add.w	r3, r7, #24
 8002a60:	2284      	movs	r2, #132	; 0x84
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00b f945 	bl	800dcf4 <memset>
  if(i2cHandle->Instance==I2C2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a44      	ldr	r2, [pc, #272]	; (8002b80 <HAL_I2C_MspInit+0x13c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d13d      	bne.n	8002af0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a80:	f107 0318 	add.w	r3, r7, #24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fff9 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002a90:	f000 f916 	bl	8002cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa0:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aac:	2303      	movs	r3, #3
 8002aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab2:	2312      	movs	r3, #18
 8002ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ace:	4619      	mov	r1, r3
 8002ad0:	482d      	ldr	r0, [pc, #180]	; (8002b88 <HAL_I2C_MspInit+0x144>)
 8002ad2:	f002 faeb 	bl	80050ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8002aee:	e042      	b.n	8002b76 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <HAL_I2C_MspInit+0x148>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d13d      	bne.n	8002b76 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 ffb6 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002b16:	f000 f8d3 	bl	8002cc0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002b20:	f043 0320 	orr.w	r3, r3, #32
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b56:	4619      	mov	r1, r3
 8002b58:	480b      	ldr	r0, [pc, #44]	; (8002b88 <HAL_I2C_MspInit+0x144>)
 8002b5a:	f002 faa7 	bl	80050ac <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_I2C_MspInit+0x140>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
}
 8002b76:	bf00      	nop
 8002b78:	37b0      	adds	r7, #176	; 0xb0
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40005800 	.word	0x40005800
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40006000 	.word	0x40006000

08002b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b94:	f002 f8e9 	bl	8004d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b98:	f000 f818 	bl	8002bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b9c:	f7ff fdc6 	bl	800272c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002ba0:	f002 f822 	bl	8004be8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8002ba4:	f7ff fece 	bl	8002944 <MX_I2C2_Init>
  MX_I2C4_Init();
 8002ba8:	f7ff ff0c 	bl	80029c4 <MX_I2C4_Init>
  MX_TIM2_Init();
 8002bac:	f001 fdd4 	bl	8004758 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bb0:	f001 fe4a 	bl	8004848 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bb4:	f001 fe98 	bl	80048e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002bb8:	f001 ff0e 	bl	80049d8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002bbc:	f006 ffa6 	bl	8009b0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002bc0:	f7ff f918 	bl	8001df4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bc4:	f006 ffd6 	bl	8009b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <main+0x38>
	...

08002bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b094      	sub	sp, #80	; 0x50
 8002bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bd2:	f107 0320 	add.w	r3, r7, #32
 8002bd6:	2230      	movs	r2, #48	; 0x30
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00b f88a 	bl	800dcf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bf0:	f003 fa38 	bl	8006064 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <SystemClock_Config+0xc8>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <SystemClock_Config+0xc8>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <SystemClock_Config+0xc8>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <SystemClock_Config+0xcc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c14:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <SystemClock_Config+0xcc>)
 8002c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <SystemClock_Config+0xcc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c32:	2302      	movs	r3, #2
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c40:	2348      	movs	r3, #72	; 0x48
 8002c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c44:	2302      	movs	r3, #2
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c4c:	f107 0320 	add.w	r3, r7, #32
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fa17 	bl	8006084 <HAL_RCC_OscConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c5c:	f000 f830 	bl	8002cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c60:	230f      	movs	r3, #15
 8002c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c64:	2302      	movs	r3, #2
 8002c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fca5 	bl	80065cc <HAL_RCC_ClockConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c88:	f000 f81a 	bl	8002cc0 <Error_Handler>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3750      	adds	r7, #80	; 0x50
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cae:	f002 f869 	bl	8004d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40002000 	.word	0x40002000

08002cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
}
 8002cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <Error_Handler+0x8>

08002cca <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d204      	bcs.n	8002cec <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	701a      	strb	r2, [r3, #0]
  }
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <_out_char+0x1e>
    _putchar(character);
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fcbd 	bl	80026ac <_putchar>
  }
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	e002      	b.n	8002d50 <_strnlen_s+0x16>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <_strnlen_s+0x28>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	603a      	str	r2, [r7, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f3      	bne.n	8002d4a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	1ad3      	subs	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b2f      	cmp	r3, #47	; 0x2f
 8002d82:	d904      	bls.n	8002d8e <_is_digit+0x1a>
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b39      	cmp	r3, #57	; 0x39
 8002d88:	d801      	bhi.n	8002d8e <_is_digit+0x1a>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <_is_digit+0x1c>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002dae:	e00e      	b.n	8002dce <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c59      	adds	r1, r3, #1
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4403      	add	r3, r0
 8002dca:	3b30      	subs	r3, #48	; 0x30
 8002dcc:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ffcd 	bl	8002d74 <_is_digit>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e7      	bne.n	8002db0 <_atoi+0xe>
  }
  return i;
 8002de0:	68fb      	ldr	r3, [r7, #12]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002dea:	b590      	push	{r4, r7, lr}
 8002dec:	b087      	sub	sp, #28
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d125      	bne.n	8002e52 <_out_rev+0x68>
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d120      	bne.n	8002e52 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e00a      	b.n	8002e2c <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	1c53      	adds	r3, r2, #1
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	68fc      	ldr	r4, [r7, #12]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	2020      	movs	r0, #32
 8002e24:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d3f0      	bcc.n	8002e16 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002e34:	e00d      	b.n	8002e52 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	4413      	add	r3, r2
 8002e42:	7818      	ldrb	r0, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	1c53      	adds	r3, r2, #1
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	68fc      	ldr	r4, [r7, #12]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	47a0      	blx	r4
  while (len) {
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ee      	bne.n	8002e36 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002e62:	e007      	b.n	8002e74 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	1c53      	adds	r3, r2, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	68fc      	ldr	r4, [r7, #12]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	2020      	movs	r0, #32
 8002e72:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f1      	bhi.n	8002e64 <_out_rev+0x7a>
    }
  }

  return idx;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b088      	sub	sp, #32
 8002e8e:	af04      	add	r7, sp, #16
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d136      	bne.n	8002f10 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <_ntoa_format+0x50>
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <_ntoa_format+0x50>
 8002eb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <_ntoa_format+0x3a>
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <_ntoa_format+0x50>
      width--;
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002eca:	e006      	b.n	8002eda <_ntoa_format+0x50>
      buf[len++] = '0';
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2230      	movs	r2, #48	; 0x30
 8002ed8:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d20a      	bcs.n	8002ef8 <_ntoa_format+0x6e>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	2b1f      	cmp	r3, #31
 8002ee6:	d9f1      	bls.n	8002ecc <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ee8:	e006      	b.n	8002ef8 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	61fa      	str	r2, [r7, #28]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	2230      	movs	r2, #48	; 0x30
 8002ef6:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <_ntoa_format+0x86>
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d202      	bcs.n	8002f10 <_ntoa_format+0x86>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b1f      	cmp	r3, #31
 8002f0e:	d9ec      	bls.n	8002eea <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d058      	beq.n	8002fcc <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d116      	bne.n	8002f52 <_ntoa_format+0xc8>
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d013      	beq.n	8002f52 <_ntoa_format+0xc8>
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d003      	beq.n	8002f3a <_ntoa_format+0xb0>
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10b      	bne.n	8002f52 <_ntoa_format+0xc8>
      len--;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <_ntoa_format+0xc8>
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d102      	bne.n	8002f52 <_ntoa_format+0xc8>
        len--;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d10f      	bne.n	8002f78 <_ntoa_format+0xee>
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <_ntoa_format+0xee>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b1f      	cmp	r3, #31
 8002f66:	d807      	bhi.n	8002f78 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	61fa      	str	r2, [r7, #28]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	2278      	movs	r2, #120	; 0x78
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e01f      	b.n	8002fb8 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d10f      	bne.n	8002f9e <_ntoa_format+0x114>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <_ntoa_format+0x114>
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b1f      	cmp	r3, #31
 8002f8c:	d807      	bhi.n	8002f9e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	61fa      	str	r2, [r7, #28]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	2258      	movs	r2, #88	; 0x58
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e00c      	b.n	8002fb8 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d109      	bne.n	8002fb8 <_ntoa_format+0x12e>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	d806      	bhi.n	8002fb8 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	61fa      	str	r2, [r7, #28]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	2262      	movs	r2, #98	; 0x62
 8002fb6:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b1f      	cmp	r3, #31
 8002fbc:	d806      	bhi.n	8002fcc <_ntoa_format+0x142>
      buf[len++] = '0';
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	61fa      	str	r2, [r7, #28]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2230      	movs	r2, #48	; 0x30
 8002fca:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b1f      	cmp	r3, #31
 8002fd0:	d824      	bhi.n	800301c <_ntoa_format+0x192>
    if (negative) {
 8002fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <_ntoa_format+0x160>
      buf[len++] = '-';
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	61fa      	str	r2, [r7, #28]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	222d      	movs	r2, #45	; 0x2d
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	e018      	b.n	800301c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	61fa      	str	r2, [r7, #28]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	222b      	movs	r2, #43	; 0x2b
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e00b      	b.n	800301c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <_ntoa_format+0x192>
      buf[len++] = ' ';
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	61fa      	str	r2, [r7, #28]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	2220      	movs	r2, #32
 800301a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	9303      	str	r3, [sp, #12]
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	9302      	str	r3, [sp, #8]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff fed9 	bl	8002dea <_out_rev>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b096      	sub	sp, #88	; 0x58
 8003046:	af08      	add	r7, sp, #32
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	f023 0310 	bic.w	r3, r3, #16
 8003060:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <_ntoa_long+0x30>
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d032      	beq.n	80030d8 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003076:	fbb3 f2f2 	udiv	r2, r3, r2
 800307a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800307c:	fb01 f202 	mul.w	r2, r1, r2
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800308a:	2b09      	cmp	r3, #9
 800308c:	d804      	bhi.n	8003098 <_ntoa_long+0x56>
 800308e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003092:	3330      	adds	r3, #48	; 0x30
 8003094:	b2da      	uxtb	r2, r3
 8003096:	e00d      	b.n	80030b4 <_ntoa_long+0x72>
 8003098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <_ntoa_long+0x64>
 80030a2:	2241      	movs	r2, #65	; 0x41
 80030a4:	e000      	b.n	80030a8 <_ntoa_long+0x66>
 80030a6:	2261      	movs	r2, #97	; 0x61
 80030a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030ac:	4413      	add	r3, r2
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3b0a      	subs	r3, #10
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	1c59      	adds	r1, r3, #1
 80030b8:	6379      	str	r1, [r7, #52]	; 0x34
 80030ba:	3338      	adds	r3, #56	; 0x38
 80030bc:	443b      	add	r3, r7
 80030be:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80030c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80030cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <_ntoa_long+0x96>
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	2b1f      	cmp	r3, #31
 80030d6:	d9cc      	bls.n	8003072 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80030d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030da:	9306      	str	r3, [sp, #24]
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e2:	9304      	str	r3, [sp, #16]
 80030e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e6:	9303      	str	r3, [sp, #12]
 80030e8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff fec3 	bl	8002e8a <_ntoa_format>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3738      	adds	r7, #56	; 0x38
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b096      	sub	sp, #88	; 0x58
 8003112:	af08      	add	r7, sp, #32
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003120:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003124:	4313      	orrs	r3, r2
 8003126:	d103      	bne.n	8003130 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312a:	f023 0310 	bic.w	r3, r3, #16
 800312e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <_ntoa_long_long+0x34>
 800313a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800313e:	4313      	orrs	r3, r2
 8003140:	d037      	beq.n	80031b2 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003142:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003146:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800314a:	f7fd fcff 	bl	8000b4c <__aeabi_uldivmod>
 800314e:	4613      	mov	r3, r2
 8003150:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003158:	2b09      	cmp	r3, #9
 800315a:	d804      	bhi.n	8003166 <_ntoa_long_long+0x58>
 800315c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003160:	3330      	adds	r3, #48	; 0x30
 8003162:	b2da      	uxtb	r2, r3
 8003164:	e00d      	b.n	8003182 <_ntoa_long_long+0x74>
 8003166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <_ntoa_long_long+0x66>
 8003170:	2241      	movs	r2, #65	; 0x41
 8003172:	e000      	b.n	8003176 <_ntoa_long_long+0x68>
 8003174:	2261      	movs	r2, #97	; 0x61
 8003176:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800317a:	4413      	add	r3, r2
 800317c:	b2db      	uxtb	r3, r3
 800317e:	3b0a      	subs	r3, #10
 8003180:	b2da      	uxtb	r2, r3
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003184:	1c59      	adds	r1, r3, #1
 8003186:	6379      	str	r1, [r7, #52]	; 0x34
 8003188:	3338      	adds	r3, #56	; 0x38
 800318a:	443b      	add	r3, r7
 800318c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003194:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003198:	f7fd fcd8 	bl	8000b4c <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80031a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031a8:	4313      	orrs	r3, r2
 80031aa:	d002      	beq.n	80031b2 <_ntoa_long_long+0xa4>
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ae:	2b1f      	cmp	r3, #31
 80031b0:	d9c7      	bls.n	8003142 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80031b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b6:	9206      	str	r2, [sp, #24]
 80031b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031ba:	9205      	str	r2, [sp, #20]
 80031bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031be:	9204      	str	r2, [sp, #16]
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff fe56 	bl	8002e8a <_ntoa_format>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3738      	adds	r7, #56	; 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b09d      	sub	sp, #116	; 0x74
 80031ec:	af04      	add	r7, sp, #16
 80031ee:	6178      	str	r0, [r7, #20]
 80031f0:	6139      	str	r1, [r7, #16]
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800320a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800320e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003212:	f7fd fc21 	bl	8000a58 <__aeabi_dcmpeq>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10f      	bne.n	800323c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800321c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800321e:	9303      	str	r3, [sp, #12]
 8003220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003222:	9302      	str	r3, [sp, #8]
 8003224:	2303      	movs	r3, #3
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	4ba7      	ldr	r3, [pc, #668]	; (80034c8 <_ftoa+0x2e0>)
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	6939      	ldr	r1, [r7, #16]
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff fdd9 	bl	8002dea <_out_rev>
 8003238:	4603      	mov	r3, r0
 800323a:	e222      	b.n	8003682 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003248:	f7fd fc10 	bl	8000a6c <__aeabi_dcmplt>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00f      	beq.n	8003272 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	2304      	movs	r3, #4
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	4b9b      	ldr	r3, [pc, #620]	; (80034cc <_ftoa+0x2e4>)
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	6939      	ldr	r1, [r7, #16]
 8003268:	6978      	ldr	r0, [r7, #20]
 800326a:	f7ff fdbe 	bl	8002dea <_out_rev>
 800326e:	4603      	mov	r3, r0
 8003270:	e207      	b.n	8003682 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	4b96      	ldr	r3, [pc, #600]	; (80034d0 <_ftoa+0x2e8>)
 8003278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800327c:	f7fd fc14 	bl	8000aa8 <__aeabi_dcmpgt>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01d      	beq.n	80032c2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <_ftoa+0xac>
 8003290:	4b90      	ldr	r3, [pc, #576]	; (80034d4 <_ftoa+0x2ec>)
 8003292:	e000      	b.n	8003296 <_ftoa+0xae>
 8003294:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <_ftoa+0x2f0>)
 8003296:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003298:	f002 0204 	and.w	r2, r2, #4
 800329c:	2a00      	cmp	r2, #0
 800329e:	d001      	beq.n	80032a4 <_ftoa+0xbc>
 80032a0:	2204      	movs	r2, #4
 80032a2:	e000      	b.n	80032a6 <_ftoa+0xbe>
 80032a4:	2203      	movs	r2, #3
 80032a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80032a8:	9103      	str	r1, [sp, #12]
 80032aa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80032ac:	9102      	str	r1, [sp, #8]
 80032ae:	9201      	str	r2, [sp, #4]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	6939      	ldr	r1, [r7, #16]
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7ff fd96 	bl	8002dea <_out_rev>
 80032be:	4603      	mov	r3, r0
 80032c0:	e1df      	b.n	8003682 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80032c2:	a37d      	add	r3, pc, #500	; (adr r3, 80034b8 <_ftoa+0x2d0>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032cc:	f7fd fbec 	bl	8000aa8 <__aeabi_dcmpgt>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <_ftoa+0x102>
 80032d6:	a37a      	add	r3, pc, #488	; (adr r3, 80034c0 <_ftoa+0x2d8>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e0:	f7fd fbc4 	bl	8000a6c <__aeabi_dcmplt>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00f      	beq.n	800330a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80032ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	ed97 0b00 	vldr	d0, [r7]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	6939      	ldr	r1, [r7, #16]
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f000 f9c9 	bl	8003698 <_etoa>
 8003306:	4603      	mov	r3, r0
 8003308:	e1bb      	b.n	8003682 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800331c:	f7fd fba6 	bl	8000a6c <__aeabi_dcmplt>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00e      	beq.n	8003344 <_ftoa+0x15c>
    negative = true;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800332c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003330:	f04f 0000 	mov.w	r0, #0
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	f7fc ff6e 	bl	8000218 <__aeabi_dsub>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800334e:	2306      	movs	r3, #6
 8003350:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003352:	e00a      	b.n	800336a <_ftoa+0x182>
    buf[len++] = '0';
 8003354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	65fa      	str	r2, [r7, #92]	; 0x5c
 800335a:	3360      	adds	r3, #96	; 0x60
 800335c:	443b      	add	r3, r7
 800335e:	2230      	movs	r2, #48	; 0x30
 8003360:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003366:	3b01      	subs	r3, #1
 8003368:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	2b1f      	cmp	r3, #31
 800336e:	d802      	bhi.n	8003376 <_ftoa+0x18e>
 8003370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003372:	2b09      	cmp	r3, #9
 8003374:	d8ee      	bhi.n	8003354 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800337a:	f7fd fb9f 	bl	8000abc <__aeabi_d2iz>
 800337e:	4603      	mov	r3, r0
 8003380:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003382:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003384:	f7fd f896 	bl	80004b4 <__aeabi_i2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003390:	f7fc ff42 	bl	8000218 <__aeabi_dsub>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <_ftoa+0x2f4>)
 800339e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f8ee 	bl	8000588 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80033b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033b8:	f7fd fba8 	bl	8000b0c <__aeabi_d2uiz>
 80033bc:	4603      	mov	r3, r0
 80033be:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80033c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80033c2:	f7fd f867 	bl	8000494 <__aeabi_ui2d>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033ce:	f7fc ff23 	bl	8000218 <__aeabi_dsub>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <_ftoa+0x2f8>)
 80033e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80033e4:	f7fd fb60 	bl	8000aa8 <__aeabi_dcmpgt>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <_ftoa+0x234>
    ++frac;
 80033ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f0:	3301      	adds	r3, #1
 80033f2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80033f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80033f6:	f7fd f84d 	bl	8000494 <__aeabi_ui2d>
 80033fa:	4a38      	ldr	r2, [pc, #224]	; (80034dc <_ftoa+0x2f4>)
 80033fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd fb45 	bl	8000a94 <__aeabi_dcmpge>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01a      	beq.n	8003446 <_ftoa+0x25e>
      frac = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	3301      	adds	r3, #1
 8003418:	657b      	str	r3, [r7, #84]	; 0x54
 800341a:	e014      	b.n	8003446 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <_ftoa+0x2f8>)
 8003422:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003426:	f7fd fb21 	bl	8000a6c <__aeabi_dcmplt>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <_ftoa+0x258>
 8003436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003442:	3301      	adds	r3, #1
 8003444:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003448:	2b00      	cmp	r3, #0
 800344a:	d14b      	bne.n	80034e4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800344c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800344e:	f7fd f831 	bl	80004b4 <__aeabi_i2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800345a:	f7fc fedd 	bl	8000218 <__aeabi_dsub>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003466:	2301      	movs	r3, #1
 8003468:	461c      	mov	r4, r3
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <_ftoa+0x2f8>)
 8003470:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003474:	f7fd fafa 	bl	8000a6c <__aeabi_dcmplt>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <_ftoa+0x29a>
 800347e:	2300      	movs	r3, #0
 8003480:	461c      	mov	r4, r3
 8003482:	b2e3      	uxtb	r3, r4
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <_ftoa+0x2ba>
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <_ftoa+0x2f8>)
 8003494:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003498:	f7fd fb06 	bl	8000aa8 <__aeabi_dcmpgt>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d064      	beq.n	800356c <_ftoa+0x384>
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8081 	beq.w	80035b0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80034ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b0:	3301      	adds	r3, #1
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
 80034b4:	e07c      	b.n	80035b0 <_ftoa+0x3c8>
 80034b6:	bf00      	nop
 80034b8:	00000000 	.word	0x00000000
 80034bc:	41cdcd65 	.word	0x41cdcd65
 80034c0:	00000000 	.word	0x00000000
 80034c4:	c1cdcd65 	.word	0xc1cdcd65
 80034c8:	0800e1ec 	.word	0x0800e1ec
 80034cc:	0800e1f0 	.word	0x0800e1f0
 80034d0:	7fefffff 	.word	0x7fefffff
 80034d4:	0800e1f8 	.word	0x0800e1f8
 80034d8:	0800e200 	.word	0x0800e200
 80034dc:	0800e618 	.word	0x0800e618
 80034e0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80034e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80034e8:	e01f      	b.n	800352a <_ftoa+0x342>
      --count;
 80034ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ec:	3b01      	subs	r3, #1
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80034f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <_ftoa+0x4a4>)
 80034f4:	fba3 2301 	umull	r2, r3, r3, r1
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	1aca      	subs	r2, r1, r3
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003508:	1c59      	adds	r1, r3, #1
 800350a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800350c:	3230      	adds	r2, #48	; 0x30
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	3360      	adds	r3, #96	; 0x60
 8003512:	443b      	add	r3, r7
 8003514:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351a:	4a5c      	ldr	r2, [pc, #368]	; (800368c <_ftoa+0x4a4>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	653b      	str	r3, [r7, #80]	; 0x50
 8003524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800352a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352c:	2b1f      	cmp	r3, #31
 800352e:	d9dc      	bls.n	80034ea <_ftoa+0x302>
 8003530:	e009      	b.n	8003546 <_ftoa+0x35e>
        break;
 8003532:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003534:	e007      	b.n	8003546 <_ftoa+0x35e>
      buf[len++] = '0';
 8003536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800353c:	3360      	adds	r3, #96	; 0x60
 800353e:	443b      	add	r3, r7
 8003540:	2230      	movs	r2, #48	; 0x30
 8003542:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003548:	2b1f      	cmp	r3, #31
 800354a:	d804      	bhi.n	8003556 <_ftoa+0x36e>
 800354c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003558:	2b1f      	cmp	r3, #31
 800355a:	d829      	bhi.n	80035b0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800355c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003562:	3360      	adds	r3, #96	; 0x60
 8003564:	443b      	add	r3, r7
 8003566:	222e      	movs	r2, #46	; 0x2e
 8003568:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800356c:	e020      	b.n	80035b0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800356e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003570:	4b47      	ldr	r3, [pc, #284]	; (8003690 <_ftoa+0x4a8>)
 8003572:	fb83 1302 	smull	r1, r3, r3, r2
 8003576:	1099      	asrs	r1, r3, #2
 8003578:	17d3      	asrs	r3, r2, #31
 800357a:	1ac9      	subs	r1, r1, r3
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	1ad1      	subs	r1, r2, r3
 8003586:	b2ca      	uxtb	r2, r1
 8003588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800358e:	3230      	adds	r2, #48	; 0x30
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	3360      	adds	r3, #96	; 0x60
 8003594:	443b      	add	r3, r7
 8003596:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <_ftoa+0x4a8>)
 800359e:	fb82 1203 	smull	r1, r2, r2, r3
 80035a2:	1092      	asrs	r2, r2, #2
 80035a4:	17db      	asrs	r3, r3, #31
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	657b      	str	r3, [r7, #84]	; 0x54
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b2:	2b1f      	cmp	r3, #31
 80035b4:	d9db      	bls.n	800356e <_ftoa+0x386>
 80035b6:	e000      	b.n	80035ba <_ftoa+0x3d2>
      break;
 80035b8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80035ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d123      	bne.n	800360c <_ftoa+0x424>
 80035c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80035ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d014      	beq.n	80035fe <_ftoa+0x416>
 80035d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <_ftoa+0x3fe>
 80035dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <_ftoa+0x416>
      width--;
 80035e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e8:	3b01      	subs	r3, #1
 80035ea:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035ec:	e007      	b.n	80035fe <_ftoa+0x416>
      buf[len++] = '0';
 80035ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035f4:	3360      	adds	r3, #96	; 0x60
 80035f6:	443b      	add	r3, r7
 80035f8:	2230      	movs	r2, #48	; 0x30
 80035fa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003602:	429a      	cmp	r2, r3
 8003604:	d202      	bcs.n	800360c <_ftoa+0x424>
 8003606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003608:	2b1f      	cmp	r3, #31
 800360a:	d9f0      	bls.n	80035ee <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800360c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360e:	2b1f      	cmp	r3, #31
 8003610:	d827      	bhi.n	8003662 <_ftoa+0x47a>
    if (negative) {
 8003612:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <_ftoa+0x444>
      buf[len++] = '-';
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	443b      	add	r3, r7
 8003624:	222d      	movs	r2, #45	; 0x2d
 8003626:	f803 2c48 	strb.w	r2, [r3, #-72]
 800362a:	e01a      	b.n	8003662 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800362c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	443b      	add	r3, r7
 8003640:	222b      	movs	r2, #43	; 0x2b
 8003642:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003646:	e00c      	b.n	8003662 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	443b      	add	r3, r7
 800365c:	2220      	movs	r2, #32
 800365e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003664:	9303      	str	r3, [sp, #12]
 8003666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003668:	9302      	str	r3, [sp, #8]
 800366a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	f107 0318 	add.w	r3, r7, #24
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6939      	ldr	r1, [r7, #16]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff fbb5 	bl	8002dea <_out_rev>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3764      	adds	r7, #100	; 0x64
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop
 800368c:	cccccccd 	.word	0xcccccccd
 8003690:	66666667 	.word	0x66666667
 8003694:	00000000 	.word	0x00000000

08003698 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	b09f      	sub	sp, #124	; 0x7c
 800369e:	af06      	add	r7, sp, #24
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24
 80036a2:	6239      	str	r1, [r7, #32]
 80036a4:	61fa      	str	r2, [r7, #28]
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80036ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036b4:	f7fd f9d0 	bl	8000a58 <__aeabi_dcmpeq>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d014      	beq.n	80036e8 <_etoa+0x50>
 80036be:	f04f 32ff 	mov.w	r2, #4294967295
 80036c2:	4bc1      	ldr	r3, [pc, #772]	; (80039c8 <_etoa+0x330>)
 80036c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036c8:	f7fd f9ee 	bl	8000aa8 <__aeabi_dcmpgt>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <_etoa+0x50>
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80036da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036de:	f7fd f9c5 	bl	8000a6c <__aeabi_dcmplt>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d012      	beq.n	800370e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80036e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	ed97 0b04 	vldr	d0, [r7, #16]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003706:	f7ff fd6f 	bl	80031e8 <_ftoa>
 800370a:	4603      	mov	r3, r0
 800370c:	e23f      	b.n	8003b8e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800370e:	2301      	movs	r3, #1
 8003710:	461e      	mov	r6, r3
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800371e:	f7fd f9a5 	bl	8000a6c <__aeabi_dcmplt>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <_etoa+0x94>
 8003728:	2300      	movs	r3, #0
 800372a:	461e      	mov	r6, r3
 800372c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003730:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003734:	2b00      	cmp	r3, #0
 8003736:	d009      	beq.n	800374c <_etoa+0xb4>
    value = -value;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	ed97 7b00 	vldr	d7, [r7]
 8003748:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800374c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003758:	2306      	movs	r3, #6
 800375a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800375e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003762:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	0d0a      	lsrs	r2, r1, #20
 8003774:	2300      	movs	r3, #0
 8003776:	4613      	mov	r3, r2
 8003778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003786:	4690      	mov	r8, r2
 8003788:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800378c:	4644      	mov	r4, r8
 800378e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003792:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003796:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800379a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800379c:	f7fc fe8a 	bl	80004b4 <__aeabi_i2d>
 80037a0:	a37d      	add	r3, pc, #500	; (adr r3, 8003998 <_etoa+0x300>)
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f7fc feef 	bl	8000588 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	a37b      	add	r3, pc, #492	; (adr r3, 80039a0 <_etoa+0x308>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc fd30 	bl	800021c <__adddf3>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4b7f      	ldr	r3, [pc, #508]	; (80039cc <_etoa+0x334>)
 80037ce:	f7fc fd23 	bl	8000218 <__aeabi_dsub>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	a373      	add	r3, pc, #460	; (adr r3, 80039a8 <_etoa+0x310>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fc fed2 	bl	8000588 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4620      	mov	r0, r4
 80037ea:	4629      	mov	r1, r5
 80037ec:	f7fc fd16 	bl	800021c <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7fd f960 	bl	8000abc <__aeabi_d2iz>
 80037fc:	4603      	mov	r3, r0
 80037fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003800:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003802:	f7fc fe57 	bl	80004b4 <__aeabi_i2d>
 8003806:	a36a      	add	r3, pc, #424	; (adr r3, 80039b0 <_etoa+0x318>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc febc 	bl	8000588 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <_etoa+0x338>)
 800381e:	f7fc fcfd 	bl	800021c <__adddf3>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f7fd f947 	bl	8000abc <__aeabi_d2iz>
 800382e:	4603      	mov	r3, r0
 8003830:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003832:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003834:	f7fc fe3e 	bl	80004b4 <__aeabi_i2d>
 8003838:	a35f      	add	r3, pc, #380	; (adr r3, 80039b8 <_etoa+0x320>)
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f7fc fea3 	bl	8000588 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4614      	mov	r4, r2
 8003848:	461d      	mov	r5, r3
 800384a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800384c:	f7fc fe32 	bl	80004b4 <__aeabi_i2d>
 8003850:	a35b      	add	r3, pc, #364	; (adr r3, 80039c0 <_etoa+0x328>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f7fc fe97 	bl	8000588 <__aeabi_dmul>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4620      	mov	r0, r4
 8003860:	4629      	mov	r1, r5
 8003862:	f7fc fcd9 	bl	8000218 <__aeabi_dsub>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800386e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003876:	f7fc fe87 	bl	8000588 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003888:	17da      	asrs	r2, r3, #31
 800388a:	469a      	mov	sl, r3
 800388c:	4693      	mov	fp, r2
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800389a:	2200      	movs	r2, #0
 800389c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80038a0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80038a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	f7fc fcb6 	bl	800021c <__adddf3>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4690      	mov	r8, r2
 80038b6:	4699      	mov	r9, r3
 80038b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038c4:	f7fc fca8 	bl	8000218 <__aeabi_dsub>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4692      	mov	sl, r2
 80038ce:	469b      	mov	fp, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <_etoa+0x33c>)
 80038d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80038da:	f7fc ff7f 	bl	80007dc <__aeabi_ddiv>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <_etoa+0x340>)
 80038ec:	f7fc fc96 	bl	800021c <__adddf3>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80038f8:	f7fc ff70 	bl	80007dc <__aeabi_ddiv>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	4b34      	ldr	r3, [pc, #208]	; (80039dc <_etoa+0x344>)
 800390a:	f7fc fc87 	bl	800021c <__adddf3>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003916:	f7fc ff61 	bl	80007dc <__aeabi_ddiv>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4650      	mov	r0, sl
 8003920:	4659      	mov	r1, fp
 8003922:	f7fc fc7b 	bl	800021c <__adddf3>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4640      	mov	r0, r8
 800392c:	4649      	mov	r1, r9
 800392e:	f7fc ff55 	bl	80007dc <__aeabi_ddiv>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <_etoa+0x348>)
 8003940:	f7fc fc6c 	bl	800021c <__adddf3>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fe1c 	bl	8000588 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800395c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003960:	f7fd f884 	bl	8000a6c <__aeabi_dcmplt>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <_etoa+0x2ee>
    expval--;
 800396a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396c:	3b01      	subs	r3, #1
 800396e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8003970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <_etoa+0x340>)
 800397a:	f7fc ff2f 	bl	80007dc <__aeabi_ddiv>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003988:	2b63      	cmp	r3, #99	; 0x63
 800398a:	dc2b      	bgt.n	80039e4 <_etoa+0x34c>
 800398c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003992:	db27      	blt.n	80039e4 <_etoa+0x34c>
 8003994:	2304      	movs	r3, #4
 8003996:	e026      	b.n	80039e6 <_etoa+0x34e>
 8003998:	509f79fb 	.word	0x509f79fb
 800399c:	3fd34413 	.word	0x3fd34413
 80039a0:	8b60c8b3 	.word	0x8b60c8b3
 80039a4:	3fc68a28 	.word	0x3fc68a28
 80039a8:	636f4361 	.word	0x636f4361
 80039ac:	3fd287a7 	.word	0x3fd287a7
 80039b0:	0979a371 	.word	0x0979a371
 80039b4:	400a934f 	.word	0x400a934f
 80039b8:	bbb55516 	.word	0xbbb55516
 80039bc:	40026bb1 	.word	0x40026bb1
 80039c0:	fefa39ef 	.word	0xfefa39ef
 80039c4:	3fe62e42 	.word	0x3fe62e42
 80039c8:	7fefffff 	.word	0x7fefffff
 80039cc:	3ff80000 	.word	0x3ff80000
 80039d0:	3fe00000 	.word	0x3fe00000
 80039d4:	402c0000 	.word	0x402c0000
 80039d8:	40240000 	.word	0x40240000
 80039dc:	40180000 	.word	0x40180000
 80039e0:	3ff00000 	.word	0x3ff00000
 80039e4:	2305      	movs	r3, #5
 80039e6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80039e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03d      	beq.n	8003a70 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80039f4:	a368      	add	r3, pc, #416	; (adr r3, 8003b98 <_etoa+0x500>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039fe:	f7fd f849 	bl	8000a94 <__aeabi_dcmpge>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <_etoa+0x3ba>
 8003a08:	a365      	add	r3, pc, #404	; (adr r3, 8003ba0 <_etoa+0x508>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a12:	f7fd f82b 	bl	8000a6c <__aeabi_dcmplt>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8003a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	da07      	bge.n	8003a36 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8003a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a34:	e002      	b.n	8003a3c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a50:	e00e      	b.n	8003a70 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <_etoa+0x3d8>
 8003a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <_etoa+0x3d8>
        --prec;
 8003a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8003a76:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d904      	bls.n	8003a8a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	657b      	str	r3, [r7, #84]	; 0x54
 8003a88:	e001      	b.n	8003a8e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <_etoa+0x40c>
 8003a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8003aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <_etoa+0x426>
    value /= conv.F;
 8003aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ab2:	f7fc fe93 	bl	80007dc <__aeabi_ddiv>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003ac2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <_etoa+0x440>
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e003      	b.n	8003ae0 <_etoa+0x448>
 8003ad8:	ed97 7b04 	vldr	d7, [r7, #16]
 8003adc:	ed87 7b02 	vstr	d7, [r7, #8]
 8003ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	ed97 0b02 	vldr	d0, [r7, #8]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	6a39      	ldr	r1, [r7, #32]
 8003afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b00:	f7ff fb72 	bl	80031e8 <_ftoa>
 8003b04:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8003b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03f      	beq.n	8003b8c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <_etoa+0x484>
 8003b18:	2045      	movs	r0, #69	; 0x45
 8003b1a:	e000      	b.n	8003b1e <_etoa+0x486>
 8003b1c:	2065      	movs	r0, #101	; 0x65
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	1c53      	adds	r3, r2, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfb8      	it	lt
 8003b32:	425b      	neglt	r3, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b38:	0fdb      	lsrs	r3, r3, #31
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	2105      	movs	r1, #5
 8003b42:	9105      	str	r1, [sp, #20]
 8003b44:	9204      	str	r2, [sp, #16]
 8003b46:	2200      	movs	r2, #0
 8003b48:	9203      	str	r2, [sp, #12]
 8003b4a:	220a      	movs	r2, #10
 8003b4c:	9202      	str	r2, [sp, #8]
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	9000      	str	r0, [sp, #0]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b5a:	f7ff fa72 	bl	8003042 <_ntoa_long>
 8003b5e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00f      	beq.n	8003b8c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003b6c:	e007      	b.n	8003b7e <_etoa+0x4e6>
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	1c53      	adds	r3, r2, #1
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	2020      	movs	r0, #32
 8003b7c:	47a0      	blx	r4
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d8f0      	bhi.n	8003b6e <_etoa+0x4d6>
    }
  }
  return idx;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3764      	adds	r7, #100	; 0x64
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b98:	eb1c432d 	.word	0xeb1c432d
 8003b9c:	3f1a36e2 	.word	0x3f1a36e2
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	412e8480 	.word	0x412e8480

08003ba8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	b0a3      	sub	sp, #140	; 0x8c
 8003bae:	af0a      	add	r7, sp, #40	; 0x28
 8003bb0:	6178      	str	r0, [r7, #20]
 8003bb2:	6139      	str	r1, [r7, #16]
 8003bb4:	60fa      	str	r2, [r7, #12]
 8003bb6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 84be 	bne.w	8004540 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8003bc4:	4ba3      	ldr	r3, [pc, #652]	; (8003e54 <_vsnprintf+0x2ac>)
 8003bc6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003bc8:	f000 bcba 	b.w	8004540 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b25      	cmp	r3, #37	; 0x25
 8003bd2:	d00d      	beq.n	8003bf0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	7818      	ldrb	r0, [r3, #0]
 8003bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bda:	1c53      	adds	r3, r2, #1
 8003bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bde:	697c      	ldr	r4, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6939      	ldr	r1, [r7, #16]
 8003be4:	47a0      	blx	r4
      format++;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3301      	adds	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
      continue;
 8003bec:	f000 bca8 	b.w	8004540 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	3b20      	subs	r3, #32
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d857      	bhi.n	8003cb4 <_vsnprintf+0x10c>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <_vsnprintf+0x64>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c8d 	.word	0x08003c8d
 8003c10:	08003cb5 	.word	0x08003cb5
 8003c14:	08003cb5 	.word	0x08003cb5
 8003c18:	08003ca1 	.word	0x08003ca1
 8003c1c:	08003cb5 	.word	0x08003cb5
 8003c20:	08003cb5 	.word	0x08003cb5
 8003c24:	08003cb5 	.word	0x08003cb5
 8003c28:	08003cb5 	.word	0x08003cb5
 8003c2c:	08003cb5 	.word	0x08003cb5
 8003c30:	08003cb5 	.word	0x08003cb5
 8003c34:	08003cb5 	.word	0x08003cb5
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003cb5 	.word	0x08003cb5
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003cb5 	.word	0x08003cb5
 8003c48:	08003cb5 	.word	0x08003cb5
 8003c4c:	08003c51 	.word	0x08003c51
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	2301      	movs	r3, #1
 8003c60:	653b      	str	r3, [r7, #80]	; 0x50
 8003c62:	e02a      	b.n	8003cba <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c66:	f043 0302 	orr.w	r3, r3, #2
 8003c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	2301      	movs	r3, #1
 8003c74:	653b      	str	r3, [r7, #80]	; 0x50
 8003c76:	e020      	b.n	8003cba <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7a:	f043 0304 	orr.w	r3, r3, #4
 8003c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3301      	adds	r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	2301      	movs	r3, #1
 8003c88:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8a:	e016      	b.n	8003cba <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c9e:	e00c      	b.n	8003cba <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca2:	f043 0310 	orr.w	r3, r3, #16
 8003ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb2:	e002      	b.n	8003cba <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb8:	bf00      	nop
      }
    } while (n);
 8003cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d19c      	bne.n	8003bfa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f853 	bl	8002d74 <_is_digit>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f862 	bl	8002da2 <_atoi>
 8003cde:	65b8      	str	r0, [r7, #88]	; 0x58
 8003ce0:	e01a      	b.n	8003d18 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce8:	d116      	bne.n	8003d18 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da07      	bge.n	8003d0e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	425b      	negs	r3, r3
 8003d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d0c:	e001      	b.n	8003d12 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b2e      	cmp	r3, #46	; 0x2e
 8003d22:	d127      	bne.n	8003d74 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f81c 	bl	8002d74 <_is_digit>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f82b 	bl	8002da2 <_atoi>
 8003d4c:	6578      	str	r0, [r7, #84]	; 0x54
 8003d4e:	e011      	b.n	8003d74 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b2a      	cmp	r3, #42	; 0x2a
 8003d56:	d10d      	bne.n	8003d74 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003d6c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	3b68      	subs	r3, #104	; 0x68
 8003d7a:	2b12      	cmp	r3, #18
 8003d7c:	d866      	bhi.n	8003e4c <_vsnprintf+0x2a4>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <_vsnprintf+0x1dc>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003df7 	.word	0x08003df7
 8003d88:	08003e4d 	.word	0x08003e4d
 8003d8c:	08003e2d 	.word	0x08003e2d
 8003d90:	08003e4d 	.word	0x08003e4d
 8003d94:	08003dd1 	.word	0x08003dd1
 8003d98:	08003e4d 	.word	0x08003e4d
 8003d9c:	08003e4d 	.word	0x08003e4d
 8003da0:	08003e4d 	.word	0x08003e4d
 8003da4:	08003e4d 	.word	0x08003e4d
 8003da8:	08003e4d 	.word	0x08003e4d
 8003dac:	08003e4d 	.word	0x08003e4d
 8003db0:	08003e4d 	.word	0x08003e4d
 8003db4:	08003e1d 	.word	0x08003e1d
 8003db8:	08003e4d 	.word	0x08003e4d
 8003dbc:	08003e4d 	.word	0x08003e4d
 8003dc0:	08003e4d 	.word	0x08003e4d
 8003dc4:	08003e4d 	.word	0x08003e4d
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003e3d 	.word	0x08003e3d
      case 'l' :
        flags |= FLAGS_LONG;
 8003dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b6c      	cmp	r3, #108	; 0x6c
 8003de4:	d134      	bne.n	8003e50 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003df4:	e02c      	b.n	8003e50 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b68      	cmp	r3, #104	; 0x68
 8003e0a:	d125      	bne.n	8003e58 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e12:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003e1a:	e01d      	b.n	8003e58 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
        break;
 8003e2a:	e016      	b.n	8003e5a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e32:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
        break;
 8003e3a:	e00e      	b.n	8003e5a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e42:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
        break;
 8003e4a:	e006      	b.n	8003e5a <_vsnprintf+0x2b2>
      default :
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e004      	b.n	8003e5a <_vsnprintf+0x2b2>
        break;
 8003e50:	bf00      	nop
 8003e52:	e002      	b.n	8003e5a <_vsnprintf+0x2b2>
 8003e54:	08002cf9 	.word	0x08002cf9
        break;
 8003e58:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	3b25      	subs	r3, #37	; 0x25
 8003e60:	2b53      	cmp	r3, #83	; 0x53
 8003e62:	f200 8360 	bhi.w	8004526 <_vsnprintf+0x97e>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <_vsnprintf+0x2c4>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	0800450f 	.word	0x0800450f
 8003e70:	08004527 	.word	0x08004527
 8003e74:	08004527 	.word	0x08004527
 8003e78:	08004527 	.word	0x08004527
 8003e7c:	08004527 	.word	0x08004527
 8003e80:	08004527 	.word	0x08004527
 8003e84:	08004527 	.word	0x08004527
 8003e88:	08004527 	.word	0x08004527
 8003e8c:	08004527 	.word	0x08004527
 8003e90:	08004527 	.word	0x08004527
 8003e94:	08004527 	.word	0x08004527
 8003e98:	08004527 	.word	0x08004527
 8003e9c:	08004527 	.word	0x08004527
 8003ea0:	08004527 	.word	0x08004527
 8003ea4:	08004527 	.word	0x08004527
 8003ea8:	08004527 	.word	0x08004527
 8003eac:	08004527 	.word	0x08004527
 8003eb0:	08004527 	.word	0x08004527
 8003eb4:	08004527 	.word	0x08004527
 8003eb8:	08004527 	.word	0x08004527
 8003ebc:	08004527 	.word	0x08004527
 8003ec0:	08004527 	.word	0x08004527
 8003ec4:	08004527 	.word	0x08004527
 8003ec8:	08004527 	.word	0x08004527
 8003ecc:	08004527 	.word	0x08004527
 8003ed0:	08004527 	.word	0x08004527
 8003ed4:	08004527 	.word	0x08004527
 8003ed8:	08004527 	.word	0x08004527
 8003edc:	08004527 	.word	0x08004527
 8003ee0:	08004527 	.word	0x08004527
 8003ee4:	08004527 	.word	0x08004527
 8003ee8:	08004527 	.word	0x08004527
 8003eec:	080042c3 	.word	0x080042c3
 8003ef0:	08004273 	.word	0x08004273
 8003ef4:	080042c3 	.word	0x080042c3
 8003ef8:	08004527 	.word	0x08004527
 8003efc:	08004527 	.word	0x08004527
 8003f00:	08004527 	.word	0x08004527
 8003f04:	08004527 	.word	0x08004527
 8003f08:	08004527 	.word	0x08004527
 8003f0c:	08004527 	.word	0x08004527
 8003f10:	08004527 	.word	0x08004527
 8003f14:	08004527 	.word	0x08004527
 8003f18:	08004527 	.word	0x08004527
 8003f1c:	08004527 	.word	0x08004527
 8003f20:	08004527 	.word	0x08004527
 8003f24:	08004527 	.word	0x08004527
 8003f28:	08004527 	.word	0x08004527
 8003f2c:	08004527 	.word	0x08004527
 8003f30:	08004527 	.word	0x08004527
 8003f34:	08004527 	.word	0x08004527
 8003f38:	08003fbd 	.word	0x08003fbd
 8003f3c:	08004527 	.word	0x08004527
 8003f40:	08004527 	.word	0x08004527
 8003f44:	08004527 	.word	0x08004527
 8003f48:	08004527 	.word	0x08004527
 8003f4c:	08004527 	.word	0x08004527
 8003f50:	08004527 	.word	0x08004527
 8003f54:	08004527 	.word	0x08004527
 8003f58:	08004527 	.word	0x08004527
 8003f5c:	08004527 	.word	0x08004527
 8003f60:	08003fbd 	.word	0x08003fbd
 8003f64:	08004333 	.word	0x08004333
 8003f68:	08003fbd 	.word	0x08003fbd
 8003f6c:	080042c3 	.word	0x080042c3
 8003f70:	08004273 	.word	0x08004273
 8003f74:	080042c3 	.word	0x080042c3
 8003f78:	08004527 	.word	0x08004527
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08004527 	.word	0x08004527
 8003f84:	08004527 	.word	0x08004527
 8003f88:	08004527 	.word	0x08004527
 8003f8c:	08004527 	.word	0x08004527
 8003f90:	08004527 	.word	0x08004527
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08004473 	.word	0x08004473
 8003f9c:	08004527 	.word	0x08004527
 8003fa0:	08004527 	.word	0x08004527
 8003fa4:	080043ab 	.word	0x080043ab
 8003fa8:	08004527 	.word	0x08004527
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08004527 	.word	0x08004527
 8003fb4:	08004527 	.word	0x08004527
 8003fb8:	08003fbd 	.word	0x08003fbd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b78      	cmp	r3, #120	; 0x78
 8003fc2:	d003      	beq.n	8003fcc <_vsnprintf+0x424>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b58      	cmp	r3, #88	; 0x58
 8003fca:	d102      	bne.n	8003fd2 <_vsnprintf+0x42a>
          base = 16U;
 8003fcc:	2310      	movs	r3, #16
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd0:	e013      	b.n	8003ffa <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b6f      	cmp	r3, #111	; 0x6f
 8003fd8:	d102      	bne.n	8003fe0 <_vsnprintf+0x438>
          base =  8U;
 8003fda:	2308      	movs	r3, #8
 8003fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fde:	e00c      	b.n	8003ffa <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b62      	cmp	r3, #98	; 0x62
 8003fe6:	d102      	bne.n	8003fee <_vsnprintf+0x446>
          base =  2U;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fec:	e005      	b.n	8003ffa <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003fee:	230a      	movs	r3, #10
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b58      	cmp	r3, #88	; 0x58
 8004000:	d103      	bne.n	800400a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8004002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004004:	f043 0320 	orr.w	r3, r3, #32
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b69      	cmp	r3, #105	; 0x69
 8004010:	d007      	beq.n	8004022 <_vsnprintf+0x47a>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d003      	beq.n	8004022 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	f023 030c 	bic.w	r3, r3, #12
 8004020:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800402c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b69      	cmp	r3, #105	; 0x69
 800403a:	d004      	beq.n	8004046 <_vsnprintf+0x49e>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b64      	cmp	r3, #100	; 0x64
 8004042:	f040 8098 	bne.w	8004176 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404c:	2b00      	cmp	r3, #0
 800404e:	d031      	beq.n	80040b4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004054:	3307      	adds	r3, #7
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	f103 0208 	add.w	r2, r3, #8
 800405e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800406a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da06      	bge.n	8004080 <_vsnprintf+0x4d8>
 8004072:	2100      	movs	r1, #0
 8004074:	f1d2 0800 	rsbs	r8, r2, #0
 8004078:	eb61 0903 	sbc.w	r9, r1, r3
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	69f9      	ldr	r1, [r7, #28]
 8004082:	0fc9      	lsrs	r1, r1, #31
 8004084:	b2c9      	uxtb	r1, r1
 8004086:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004088:	2400      	movs	r4, #0
 800408a:	4682      	mov	sl, r0
 800408c:	46a3      	mov	fp, r4
 800408e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004090:	9008      	str	r0, [sp, #32]
 8004092:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004094:	9007      	str	r0, [sp, #28]
 8004096:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004098:	9006      	str	r0, [sp, #24]
 800409a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800409e:	9102      	str	r1, [sp, #8]
 80040a0:	e9cd 2300 	strd	r2, r3, [sp]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a8:	6939      	ldr	r1, [r7, #16]
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff f82f 	bl	800310e <_ntoa_long_long>
 80040b0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80040b2:	e0da      	b.n	800426a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80040b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d020      	beq.n	8004100 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80040be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	425b      	neglt	r3, r3
 80040d4:	4619      	mov	r1, r3
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	0fdb      	lsrs	r3, r3, #31
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040de:	9205      	str	r2, [sp, #20]
 80040e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040e2:	9204      	str	r2, [sp, #16]
 80040e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040e6:	9203      	str	r2, [sp, #12]
 80040e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ea:	9202      	str	r2, [sp, #8]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	9100      	str	r1, [sp, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f4:	6939      	ldr	r1, [r7, #16]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7fe ffa3 	bl	8003042 <_ntoa_long>
 80040fc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80040fe:	e0b4      	b.n	800426a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <_vsnprintf+0x572>
 800410a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	e012      	b.n	8004140 <_vsnprintf+0x598>
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <_vsnprintf+0x58c>
 8004124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	b21b      	sxth	r3, r3
 8004132:	e005      	b.n	8004140 <_vsnprintf+0x598>
 8004134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	bfb8      	it	lt
 8004148:	425b      	neglt	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	0fdb      	lsrs	r3, r3, #31
 8004150:	b2db      	uxtb	r3, r3
 8004152:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004154:	9205      	str	r2, [sp, #20]
 8004156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004158:	9204      	str	r2, [sp, #16]
 800415a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800415c:	9203      	str	r2, [sp, #12]
 800415e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004160:	9202      	str	r2, [sp, #8]
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	9100      	str	r1, [sp, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800416a:	6939      	ldr	r1, [r7, #16]
 800416c:	6978      	ldr	r0, [r7, #20]
 800416e:	f7fe ff68 	bl	8003042 <_ntoa_long>
 8004172:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004174:	e079      	b.n	800426a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417c:	2b00      	cmp	r3, #0
 800417e:	d022      	beq.n	80041c6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004184:	3307      	adds	r3, #7
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	f103 0208 	add.w	r2, r3, #8
 800418e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004198:	2000      	movs	r0, #0
 800419a:	460d      	mov	r5, r1
 800419c:	4606      	mov	r6, r0
 800419e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041a0:	9108      	str	r1, [sp, #32]
 80041a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041a4:	9107      	str	r1, [sp, #28]
 80041a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a8:	9106      	str	r1, [sp, #24]
 80041aa:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80041ae:	2100      	movs	r1, #0
 80041b0:	9102      	str	r1, [sp, #8]
 80041b2:	e9cd 2300 	strd	r2, r3, [sp]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ba:	6939      	ldr	r1, [r7, #16]
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f7fe ffa6 	bl	800310e <_ntoa_long_long>
 80041c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80041c4:	e051      	b.n	800426a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80041c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d018      	beq.n	8004202 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80041d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041de:	9205      	str	r2, [sp, #20]
 80041e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e2:	9204      	str	r2, [sp, #16]
 80041e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041e6:	9203      	str	r2, [sp, #12]
 80041e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ea:	9202      	str	r2, [sp, #8]
 80041ec:	2200      	movs	r2, #0
 80041ee:	9201      	str	r2, [sp, #4]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f6:	6939      	ldr	r1, [r7, #16]
 80041f8:	6978      	ldr	r0, [r7, #20]
 80041fa:	f7fe ff22 	bl	8003042 <_ntoa_long>
 80041fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004200:	e033      	b.n	800426a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <_vsnprintf+0x674>
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004210:	1d1a      	adds	r2, r3, #4
 8004212:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e012      	b.n	8004242 <_vsnprintf+0x69a>
 800421c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <_vsnprintf+0x68e>
 8004226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	e005      	b.n	8004242 <_vsnprintf+0x69a>
 8004236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	2300      	movs	r3, #0
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	f7fe feed 	bl	8003042 <_ntoa_long>
 8004268:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3301      	adds	r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
        break;
 8004270:	e166      	b.n	8004540 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b46      	cmp	r3, #70	; 0x46
 8004278:	d103      	bne.n	8004282 <_vsnprintf+0x6da>
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	f043 0320 	orr.w	r3, r3, #32
 8004280:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004286:	3307      	adds	r3, #7
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	f103 0208 	add.w	r2, r3, #8
 8004290:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004294:	ed93 7b00 	vldr	d7, [r3]
 8004298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429a:	9302      	str	r3, [sp, #8]
 800429c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	eeb0 0a47 	vmov.f32	s0, s14
 80042a8:	eef0 0a67 	vmov.f32	s1, s15
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042b0:	6939      	ldr	r1, [r7, #16]
 80042b2:	6978      	ldr	r0, [r7, #20]
 80042b4:	f7fe ff98 	bl	80031e8 <_ftoa>
 80042b8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3301      	adds	r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
        break;
 80042c0:	e13e      	b.n	8004540 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b67      	cmp	r3, #103	; 0x67
 80042c8:	d003      	beq.n	80042d2 <_vsnprintf+0x72a>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b47      	cmp	r3, #71	; 0x47
 80042d0:	d103      	bne.n	80042da <_vsnprintf+0x732>
 80042d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b45      	cmp	r3, #69	; 0x45
 80042e0:	d003      	beq.n	80042ea <_vsnprintf+0x742>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b47      	cmp	r3, #71	; 0x47
 80042e8:	d103      	bne.n	80042f2 <_vsnprintf+0x74a>
 80042ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ec:	f043 0320 	orr.w	r3, r3, #32
 80042f0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80042f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f6:	3307      	adds	r3, #7
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	f103 0208 	add.w	r2, r3, #8
 8004300:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004304:	ed93 7b00 	vldr	d7, [r3]
 8004308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430a:	9302      	str	r3, [sp, #8]
 800430c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	eeb0 0a47 	vmov.f32	s0, s14
 8004318:	eef0 0a67 	vmov.f32	s1, s15
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004320:	6939      	ldr	r1, [r7, #16]
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff f9b8 	bl	8003698 <_etoa>
 8004328:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3301      	adds	r3, #1
 800432e:	60bb      	str	r3, [r7, #8]
        break;
 8004330:	e106      	b.n	8004540 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004332:	2301      	movs	r3, #1
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10e      	bne.n	800435e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8004340:	e007      	b.n	8004352 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8004342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004344:	1c53      	adds	r3, r2, #1
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004348:	697c      	ldr	r4, [r7, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6939      	ldr	r1, [r7, #16]
 800434e:	2020      	movs	r0, #32
 8004350:	47a0      	blx	r4
          while (l++ < width) {
 8004352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	647a      	str	r2, [r7, #68]	; 0x44
 8004358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800435a:	429a      	cmp	r2, r3
 800435c:	d8f1      	bhi.n	8004342 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800435e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b2d8      	uxtb	r0, r3
 800436c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800436e:	1c53      	adds	r3, r2, #1
 8004370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004372:	697c      	ldr	r4, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6939      	ldr	r1, [r7, #16]
 8004378:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <_vsnprintf+0x7fa>
          while (l++ < width) {
 8004384:	e007      	b.n	8004396 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8004386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004388:	1c53      	adds	r3, r2, #1
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	697c      	ldr	r4, [r7, #20]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6939      	ldr	r1, [r7, #16]
 8004392:	2020      	movs	r0, #32
 8004394:	47a0      	blx	r4
          while (l++ < width) {
 8004396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	647a      	str	r2, [r7, #68]	; 0x44
 800439c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800439e:	429a      	cmp	r2, r3
 80043a0:	d8f1      	bhi.n	8004386 <_vsnprintf+0x7de>
          }
        }
        format++;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60bb      	str	r3, [r7, #8]
        break;
 80043a8:	e0ca      	b.n	8004540 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80043aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80043b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <_vsnprintf+0x81a>
 80043be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c0:	e001      	b.n	80043c6 <_vsnprintf+0x81e>
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
 80043c6:	4619      	mov	r1, r3
 80043c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80043ca:	f7fe fcb6 	bl	8002d3a <_strnlen_s>
 80043ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80043d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 80043da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043de:	4293      	cmp	r3, r2
 80043e0:	bf28      	it	cs
 80043e2:	4613      	movcs	r3, r2
 80043e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80043e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11a      	bne.n	8004426 <_vsnprintf+0x87e>
          while (l++ < width) {
 80043f0:	e007      	b.n	8004402 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 80043f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f4:	1c53      	adds	r3, r2, #1
 80043f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f8:	697c      	ldr	r4, [r7, #20]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6939      	ldr	r1, [r7, #16]
 80043fe:	2020      	movs	r0, #32
 8004400:	47a0      	blx	r4
          while (l++ < width) {
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800440a:	429a      	cmp	r2, r3
 800440c:	d8f1      	bhi.n	80043f2 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800440e:	e00a      	b.n	8004426 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8004410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	643a      	str	r2, [r7, #64]	; 0x40
 8004416:	7818      	ldrb	r0, [r3, #0]
 8004418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800441a:	1c53      	adds	r3, r2, #1
 800441c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800441e:	697c      	ldr	r4, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <_vsnprintf+0x89a>
 800442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0eb      	beq.n	8004410 <_vsnprintf+0x868>
 8004438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	657a      	str	r2, [r7, #84]	; 0x54
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e6      	bne.n	8004410 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <_vsnprintf+0x8c2>
          while (l++ < width) {
 800444c:	e007      	b.n	800445e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800444e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004450:	1c53      	adds	r3, r2, #1
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	697c      	ldr	r4, [r7, #20]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6939      	ldr	r1, [r7, #16]
 800445a:	2020      	movs	r0, #32
 800445c:	47a0      	blx	r4
          while (l++ < width) {
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004466:	429a      	cmp	r2, r3
 8004468:	d8f1      	bhi.n	800444e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3301      	adds	r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
        break;
 8004470:	e066      	b.n	8004540 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004472:	2308      	movs	r3, #8
 8004474:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800447c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800447e:	2300      	movs	r3, #0
 8004480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004488:	2b00      	cmp	r3, #0
 800448a:	d023      	beq.n	80044d4 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800448c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004490:	1d1a      	adds	r2, r3, #4
 8004492:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	603a      	str	r2, [r7, #0]
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	9308      	str	r3, [sp, #32]
 80044a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a6:	9307      	str	r3, [sp, #28]
 80044a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044aa:	9306      	str	r3, [sp, #24]
 80044ac:	f04f 0210 	mov.w	r2, #16
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044b8:	2300      	movs	r3, #0
 80044ba:	9302      	str	r3, [sp, #8]
 80044bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80044c0:	e9cd 3400 	strd	r3, r4, [sp]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c8:	6939      	ldr	r1, [r7, #16]
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f7fe fe1f 	bl	800310e <_ntoa_long_long>
 80044d0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80044d2:	e018      	b.n	8004506 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d8:	1d1a      	adds	r2, r3, #4
 80044da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e4:	9305      	str	r3, [sp, #20]
 80044e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ec:	9303      	str	r3, [sp, #12]
 80044ee:	2310      	movs	r3, #16
 80044f0:	9302      	str	r3, [sp, #8]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	6978      	ldr	r0, [r7, #20]
 8004500:	f7fe fd9f 	bl	8003042 <_ntoa_long>
 8004504:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
        break;
 800450c:	e018      	b.n	8004540 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800450e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004510:	1c53      	adds	r3, r2, #1
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004514:	697c      	ldr	r4, [r7, #20]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6939      	ldr	r1, [r7, #16]
 800451a:	2025      	movs	r0, #37	; 0x25
 800451c:	47a0      	blx	r4
        format++;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3301      	adds	r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
        break;
 8004524:	e00c      	b.n	8004540 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	7818      	ldrb	r0, [r3, #0]
 800452a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800452c:	1c53      	adds	r3, r2, #1
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004530:	697c      	ldr	r4, [r7, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	47a0      	blx	r4
        format++;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3301      	adds	r3, #1
 800453c:	60bb      	str	r3, [r7, #8]
        break;
 800453e:	bf00      	nop
  while (*format)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f47f ab41 	bne.w	8003bcc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800454a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	429a      	cmp	r2, r3
 8004550:	d302      	bcc.n	8004558 <_vsnprintf+0x9b0>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	e000      	b.n	800455a <_vsnprintf+0x9b2>
 8004558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455a:	697c      	ldr	r4, [r7, #20]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6939      	ldr	r1, [r7, #16]
 8004560:	2000      	movs	r0, #0
 8004562:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004566:	4618      	mov	r0, r3
 8004568:	3764      	adds	r7, #100	; 0x64
 800456a:	46bd      	mov	sp, r7
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004570 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004570:	b40f      	push	{r0, r1, r2, r3}
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004578:	f107 031c 	add.w	r3, r7, #28
 800457c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800457e:	1d39      	adds	r1, r7, #4
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f04f 32ff 	mov.w	r2, #4294967295
 800458a:	4806      	ldr	r0, [pc, #24]	; (80045a4 <printf_+0x34>)
 800458c:	f7ff fb0c 	bl	8003ba8 <_vsnprintf>
 8004590:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004592:	68fb      	ldr	r3, [r7, #12]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459e:	b004      	add	sp, #16
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	08002d15 	.word	0x08002d15

080045a8 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80045a8:	b40e      	push	{r1, r2, r3}
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b087      	sub	sp, #28
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80045b2:	f107 0320 	add.w	r3, r7, #32
 80045b6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f04f 32ff 	mov.w	r2, #4294967295
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4805      	ldr	r0, [pc, #20]	; (80045dc <sprintf_+0x34>)
 80045c6:	f7ff faef 	bl	8003ba8 <_vsnprintf>
 80045ca:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d8:	b003      	add	sp, #12
 80045da:	4770      	bx	lr
 80045dc:	08002ccb 	.word	0x08002ccb

080045e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_MspInit+0x4c>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <HAL_MspInit+0x4c>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_MspInit+0x4c>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_MspInit+0x4c>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <HAL_MspInit+0x4c>)
 8004604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004608:	6453      	str	r3, [r2, #68]	; 0x44
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_MspInit+0x4c>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	210f      	movs	r1, #15
 800461a:	f06f 0001 	mvn.w	r0, #1
 800461e:	f000 fc89 	bl	8004f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800

08004630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	; 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004640:	2200      	movs	r2, #0
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	202d      	movs	r0, #45	; 0x2d
 8004646:	f000 fc75 	bl	8004f34 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800464a:	202d      	movs	r0, #45	; 0x2d
 800464c:	f000 fc8e 	bl	8004f6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004650:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <HAL_InitTick+0xa0>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_InitTick+0xa0>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6413      	str	r3, [r2, #64]	; 0x40
 800465c:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <HAL_InitTick+0xa0>)
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004668:	f107 0210 	add.w	r2, r7, #16
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f002 f9d0 	bl	8006a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004678:	f002 f9a6 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 800467c:	4603      	mov	r3, r0
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <HAL_InitTick+0xa4>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	0c9b      	lsrs	r3, r3, #18
 800468c:	3b01      	subs	r3, #1
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_InitTick+0xa8>)
 8004692:	4a12      	ldr	r2, [pc, #72]	; (80046dc <HAL_InitTick+0xac>)
 8004694:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_InitTick+0xa8>)
 8004698:	f240 32e7 	movw	r2, #999	; 0x3e7
 800469c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <HAL_InitTick+0xa8>)
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_InitTick+0xa8>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_InitTick+0xa8>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80046b0:	4809      	ldr	r0, [pc, #36]	; (80046d8 <HAL_InitTick+0xa8>)
 80046b2:	f002 fdd3 	bl	800725c <HAL_TIM_Base_Init>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80046bc:	4806      	ldr	r0, [pc, #24]	; (80046d8 <HAL_InitTick+0xa8>)
 80046be:	f002 fe25 	bl	800730c <HAL_TIM_Base_Start_IT>
 80046c2:	4603      	mov	r3, r0
 80046c4:	e000      	b.n	80046c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3730      	adds	r7, #48	; 0x30
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	20000594 	.word	0x20000594
 80046dc:	40002000 	.word	0x40002000

080046e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <NMI_Handler+0x4>

080046e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ea:	e7fe      	b.n	80046ea <HardFault_Handler+0x4>

080046ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <MemManage_Handler+0x4>

080046f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046f2:	b480      	push	{r7}
 80046f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046f6:	e7fe      	b.n	80046f6 <BusFault_Handler+0x4>

080046f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046fc:	e7fe      	b.n	80046fc <UsageFault_Handler+0x4>

080046fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004710:	4802      	ldr	r0, [pc, #8]	; (800471c <USART3_IRQHandler+0x10>)
 8004712:	f004 f843 	bl	800879c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000710 	.word	0x20000710

08004720 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004724:	4802      	ldr	r0, [pc, #8]	; (8004730 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004726:	f002 feca 	bl	80074be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800472a:	bf00      	nop
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000594 	.word	0x20000594

08004734 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <SystemInit+0x20>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <SystemInit+0x20>)
 8004740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	; 0x38
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800475e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800476c:	f107 031c 	add.w	r3, r7, #28
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004778:	463b      	mov	r3, r7
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	609a      	str	r2, [r3, #8]
 8004782:	60da      	str	r2, [r3, #12]
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	615a      	str	r2, [r3, #20]
 8004788:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800478a:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <MX_TIM2_Init+0xec>)
 800478c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004790:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8004792:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <MX_TIM2_Init+0xec>)
 8004794:	2247      	movs	r2, #71	; 0x47
 8004796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004798:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <MX_TIM2_Init+0xec>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800479e:	4b29      	ldr	r3, [pc, #164]	; (8004844 <MX_TIM2_Init+0xec>)
 80047a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <MX_TIM2_Init+0xec>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <MX_TIM2_Init+0xec>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047b2:	4824      	ldr	r0, [pc, #144]	; (8004844 <MX_TIM2_Init+0xec>)
 80047b4:	f002 fd52 	bl	800725c <HAL_TIM_Base_Init>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80047be:	f7fe fa7f 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047cc:	4619      	mov	r1, r3
 80047ce:	481d      	ldr	r0, [pc, #116]	; (8004844 <MX_TIM2_Init+0xec>)
 80047d0:	f003 f8a8 	bl	8007924 <HAL_TIM_ConfigClockSource>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80047da:	f7fe fa71 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80047de:	4819      	ldr	r0, [pc, #100]	; (8004844 <MX_TIM2_Init+0xec>)
 80047e0:	f002 fe0c 	bl	80073fc <HAL_TIM_PWM_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80047ea:	f7fe fa69 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80047ee:	2320      	movs	r3, #32
 80047f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047f6:	f107 031c 	add.w	r3, r7, #28
 80047fa:	4619      	mov	r1, r3
 80047fc:	4811      	ldr	r0, [pc, #68]	; (8004844 <MX_TIM2_Init+0xec>)
 80047fe:	f003 fdf1 	bl	80083e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004808:	f7fe fa5a 	bl	8002cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800480c:	2360      	movs	r3, #96	; 0x60
 800480e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8004810:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004814:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800481e:	463b      	mov	r3, r7
 8004820:	2200      	movs	r2, #0
 8004822:	4619      	mov	r1, r3
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <MX_TIM2_Init+0xec>)
 8004826:	f002 ff69 	bl	80076fc <HAL_TIM_PWM_ConfigChannel>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004830:	f7fe fa46 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004834:	4803      	ldr	r0, [pc, #12]	; (8004844 <MX_TIM2_Init+0xec>)
 8004836:	f000 f979 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 800483a:	bf00      	nop
 800483c:	3738      	adds	r7, #56	; 0x38
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200005e0 	.word	0x200005e0

08004848 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800484e:	f107 030c 	add.w	r3, r7, #12
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	60da      	str	r2, [r3, #12]
 800485c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800485e:	463b      	mov	r3, r7
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <MX_TIM3_Init+0x98>)
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <MX_TIM3_Init+0x9c>)
 800486c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <MX_TIM3_Init+0x98>)
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <MX_TIM3_Init+0x98>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <MX_TIM3_Init+0x98>)
 800487c:	2200      	movs	r2, #0
 800487e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <MX_TIM3_Init+0x98>)
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004886:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <MX_TIM3_Init+0x98>)
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800488c:	4814      	ldr	r0, [pc, #80]	; (80048e0 <MX_TIM3_Init+0x98>)
 800488e:	f002 fce5 	bl	800725c <HAL_TIM_Base_Init>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004898:	f7fe fa12 	bl	8002cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800489c:	2307      	movs	r3, #7
 800489e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80048a0:	2310      	movs	r3, #16
 80048a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	4619      	mov	r1, r3
 80048aa:	480d      	ldr	r0, [pc, #52]	; (80048e0 <MX_TIM3_Init+0x98>)
 80048ac:	f003 f904 	bl	8007ab8 <HAL_TIM_SlaveConfigSynchro>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80048b6:	f7fe fa03 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048ba:	2300      	movs	r3, #0
 80048bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048c2:	463b      	mov	r3, r7
 80048c4:	4619      	mov	r1, r3
 80048c6:	4806      	ldr	r0, [pc, #24]	; (80048e0 <MX_TIM3_Init+0x98>)
 80048c8:	f003 fd8c 	bl	80083e4 <HAL_TIMEx_MasterConfigSynchronization>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80048d2:	f7fe f9f5 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80048d6:	bf00      	nop
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000062c 	.word	0x2000062c
 80048e4:	40000400 	.word	0x40000400

080048e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	609a      	str	r2, [r3, #8]
 80048fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004908:	463b      	mov	r3, r7
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	609a      	str	r2, [r3, #8]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	611a      	str	r2, [r3, #16]
 8004916:	615a      	str	r2, [r3, #20]
 8004918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800491a:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <MX_TIM4_Init+0xe8>)
 800491c:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <MX_TIM4_Init+0xec>)
 800491e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8004920:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <MX_TIM4_Init+0xe8>)
 8004922:	2247      	movs	r2, #71	; 0x47
 8004924:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <MX_TIM4_Init+0xe8>)
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800492c:	4b28      	ldr	r3, [pc, #160]	; (80049d0 <MX_TIM4_Init+0xe8>)
 800492e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004932:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004934:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <MX_TIM4_Init+0xe8>)
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800493a:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <MX_TIM4_Init+0xe8>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004940:	4823      	ldr	r0, [pc, #140]	; (80049d0 <MX_TIM4_Init+0xe8>)
 8004942:	f002 fc8b 	bl	800725c <HAL_TIM_Base_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800494c:	f7fe f9b8 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800495a:	4619      	mov	r1, r3
 800495c:	481c      	ldr	r0, [pc, #112]	; (80049d0 <MX_TIM4_Init+0xe8>)
 800495e:	f002 ffe1 	bl	8007924 <HAL_TIM_ConfigClockSource>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004968:	f7fe f9aa 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800496c:	4818      	ldr	r0, [pc, #96]	; (80049d0 <MX_TIM4_Init+0xe8>)
 800496e:	f002 fd45 	bl	80073fc <HAL_TIM_PWM_Init>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004978:	f7fe f9a2 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800497c:	2320      	movs	r3, #32
 800497e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	4619      	mov	r1, r3
 800498a:	4811      	ldr	r0, [pc, #68]	; (80049d0 <MX_TIM4_Init+0xe8>)
 800498c:	f003 fd2a 	bl	80083e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004996:	f7fe f993 	bl	8002cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800499a:	2360      	movs	r3, #96	; 0x60
 800499c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 800499e:	f240 13f3 	movw	r3, #499	; 0x1f3
 80049a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049ac:	463b      	mov	r3, r7
 80049ae:	2200      	movs	r2, #0
 80049b0:	4619      	mov	r1, r3
 80049b2:	4807      	ldr	r0, [pc, #28]	; (80049d0 <MX_TIM4_Init+0xe8>)
 80049b4:	f002 fea2 	bl	80076fc <HAL_TIM_PWM_ConfigChannel>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80049be:	f7fe f97f 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80049c2:	4803      	ldr	r0, [pc, #12]	; (80049d0 <MX_TIM4_Init+0xe8>)
 80049c4:	f000 f8b2 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 80049c8:	bf00      	nop
 80049ca:	3738      	adds	r7, #56	; 0x38
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000678 	.word	0x20000678
 80049d4:	40000800 	.word	0x40000800

080049d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	60da      	str	r2, [r3, #12]
 80049ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ee:	463b      	mov	r3, r7
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <MX_TIM5_Init+0x98>)
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <MX_TIM5_Init+0x9c>)
 80049fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004a1c:	4814      	ldr	r0, [pc, #80]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a1e:	f002 fc1d 	bl	800725c <HAL_TIM_Base_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004a28:	f7fe f94a 	bl	8002cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004a2c:	2307      	movs	r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8004a30:	2320      	movs	r3, #32
 8004a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4619      	mov	r1, r3
 8004a3a:	480d      	ldr	r0, [pc, #52]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a3c:	f003 f83c 	bl	8007ab8 <HAL_TIM_SlaveConfigSynchro>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8004a46:	f7fe f93b 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004a52:	463b      	mov	r3, r7
 8004a54:	4619      	mov	r1, r3
 8004a56:	4806      	ldr	r0, [pc, #24]	; (8004a70 <MX_TIM5_Init+0x98>)
 8004a58:	f003 fcc4 	bl	80083e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8004a62:	f7fe f92d 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004a66:	bf00      	nop
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200006c4 	.word	0x200006c4
 8004a74:	40000c00 	.word	0x40000c00

08004a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004aa2:	e034      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_TIM_Base_MspInit+0xa8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d10c      	bne.n	8004ac8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
}
 8004ac6:	e022      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <HAL_TIM_Base_MspInit+0xac>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10c      	bne.n	8004aec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	e010      	b.n	8004b0e <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM5)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <HAL_TIM_Base_MspInit+0xb0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10b      	bne.n	8004b0e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004afc:	f043 0308 	orr.w	r3, r3, #8
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_TIM_Base_MspInit+0xa4>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00

08004b2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d11d      	bne.n	8004b8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <HAL_TIM_MspPostInit+0xac>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <HAL_TIM_MspPostInit+0xac>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5a:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <HAL_TIM_MspPostInit+0xac>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_SYRINGE_Pin;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b74:	2300      	movs	r3, #0
 8004b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SYRINGE_GPIO_Port, &GPIO_InitStruct);
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	4619      	mov	r1, r3
 8004b82:	4816      	ldr	r0, [pc, #88]	; (8004bdc <HAL_TIM_MspPostInit+0xb0>)
 8004b84:	f000 fa92 	bl	80050ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004b88:	e021      	b.n	8004bce <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <HAL_TIM_MspPostInit+0xb4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d11c      	bne.n	8004bce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_TIM_MspPostInit+0xac>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <HAL_TIM_MspPostInit+0xac>)
 8004b9a:	f043 0308 	orr.w	r3, r3, #8
 8004b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <HAL_TIM_MspPostInit+0xac>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_NEEDLE_Pin;
 8004bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_NEEDLE_GPIO_Port, &GPIO_InitStruct);
 8004bc2:	f107 0314 	add.w	r3, r7, #20
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4806      	ldr	r0, [pc, #24]	; (8004be4 <HAL_TIM_MspPostInit+0xb8>)
 8004bca:	f000 fa6f 	bl	80050ac <HAL_GPIO_Init>
}
 8004bce:	bf00      	nop
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40020000 	.word	0x40020000
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40020c00 	.word	0x40020c00

08004be8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <MX_USART3_UART_Init+0x5c>)
 8004bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c0e:	220c      	movs	r2, #12
 8004c10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004c2a:	4805      	ldr	r0, [pc, #20]	; (8004c40 <MX_USART3_UART_Init+0x58>)
 8004c2c:	f003 fc86 	bl	800853c <HAL_UART_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004c36:	f7fe f843 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000710 	.word	0x20000710
 8004c44:	40004800 	.word	0x40004800

08004c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b0aa      	sub	sp, #168	; 0xa8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c60:	f107 0310 	add.w	r3, r7, #16
 8004c64:	2284      	movs	r2, #132	; 0x84
 8004c66:	2100      	movs	r1, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f009 f843 	bl	800dcf4 <memset>
  if(uartHandle->Instance==USART3)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <HAL_UART_MspInit+0xc4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d144      	bne.n	8004d02 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c82:	f107 0310 	add.w	r3, r7, #16
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 fef8 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c92:	f7fe f815 	bl	8002cc0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <HAL_UART_MspInit+0xc8>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <HAL_UART_MspInit+0xc8>)
 8004c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_UART_MspInit+0xc8>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cae:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <HAL_UART_MspInit+0xc8>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <HAL_UART_MspInit+0xc8>)
 8004cb4:	f043 0308 	orr.w	r3, r3, #8
 8004cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <HAL_UART_MspInit+0xc8>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ce0:	2307      	movs	r3, #7
 8004ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ce6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004cea:	4619      	mov	r1, r3
 8004cec:	4809      	ldr	r0, [pc, #36]	; (8004d14 <HAL_UART_MspInit+0xcc>)
 8004cee:	f000 f9dd 	bl	80050ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2105      	movs	r1, #5
 8004cf6:	2027      	movs	r0, #39	; 0x27
 8004cf8:	f000 f91c 	bl	8004f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004cfc:	2027      	movs	r0, #39	; 0x27
 8004cfe:	f000 f935 	bl	8004f6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004d02:	bf00      	nop
 8004d04:	37a8      	adds	r7, #168	; 0xa8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40004800 	.word	0x40004800
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40020c00 	.word	0x40020c00

08004d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d1c:	480d      	ldr	r0, [pc, #52]	; (8004d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d1e:	490e      	ldr	r1, [pc, #56]	; (8004d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d20:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d24:	e002      	b.n	8004d2c <LoopCopyDataInit>

08004d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d2a:	3304      	adds	r3, #4

08004d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d30:	d3f9      	bcc.n	8004d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d32:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d34:	4c0b      	ldr	r4, [pc, #44]	; (8004d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d38:	e001      	b.n	8004d3e <LoopFillZerobss>

08004d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d3c:	3204      	adds	r2, #4

08004d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d40:	d3fb      	bcc.n	8004d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d42:	f7ff fcf7 	bl	8004734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d46:	f008 ffa1 	bl	800dc8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d4a:	f7fd ff21 	bl	8002b90 <main>
  bx  lr    
 8004d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004d5c:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 8004d60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004d64:	200092a8 	.word	0x200092a8

08004d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d68:	e7fe      	b.n	8004d68 <ADC_IRQHandler>

08004d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d6e:	2003      	movs	r0, #3
 8004d70:	f000 f8d5 	bl	8004f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d74:	200f      	movs	r0, #15
 8004d76:	f7ff fc5b 	bl	8004630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d7a:	f7ff fc31 	bl	80045e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_IncTick+0x20>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_IncTick+0x24>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4413      	add	r3, r2
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <HAL_IncTick+0x24>)
 8004d96:	6013      	str	r3, [r2, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	20000794 	.word	0x20000794

08004dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return uwTick;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <HAL_GetTick+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000794 	.word	0x20000794

08004dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <__NVIC_SetPriorityGrouping+0x40>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df2:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <__NVIC_SetPriorityGrouping+0x40>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60d3      	str	r3, [r2, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00
 8004e08:	05fa0000 	.word	0x05fa0000

08004e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <__NVIC_GetPriorityGrouping+0x18>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 0307 	and.w	r3, r3, #7
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db0b      	blt.n	8004e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	f003 021f 	and.w	r2, r3, #31
 8004e40:	4907      	ldr	r1, [pc, #28]	; (8004e60 <__NVIC_EnableIRQ+0x38>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2001      	movs	r0, #1
 8004e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e100 	.word	0xe000e100

08004e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db0a      	blt.n	8004e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	490c      	ldr	r1, [pc, #48]	; (8004eb0 <__NVIC_SetPriority+0x4c>)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	440b      	add	r3, r1
 8004e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e8c:	e00a      	b.n	8004ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4908      	ldr	r1, [pc, #32]	; (8004eb4 <__NVIC_SetPriority+0x50>)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	0112      	lsls	r2, r2, #4
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	761a      	strb	r2, [r3, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000e100 	.word	0xe000e100
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f1c3 0307 	rsb	r3, r3, #7
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf28      	it	cs
 8004ed6:	2304      	movcs	r3, #4
 8004ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d902      	bls.n	8004ee8 <NVIC_EncodePriority+0x30>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	3b03      	subs	r3, #3
 8004ee6:	e000      	b.n	8004eea <NVIC_EncodePriority+0x32>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	401a      	ands	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f00:	f04f 31ff 	mov.w	r1, #4294967295
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	43d9      	mvns	r1, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	4313      	orrs	r3, r2
         );
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3724      	adds	r7, #36	; 0x24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff4c 	bl	8004dc4 <__NVIC_SetPriorityGrouping>
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f46:	f7ff ff61 	bl	8004e0c <__NVIC_GetPriorityGrouping>
 8004f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6978      	ldr	r0, [r7, #20]
 8004f52:	f7ff ffb1 	bl	8004eb8 <NVIC_EncodePriority>
 8004f56:	4602      	mov	r2, r0
 8004f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff80 	bl	8004e64 <__NVIC_SetPriority>
}
 8004f64:	bf00      	nop
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff ff54 	bl	8004e28 <__NVIC_EnableIRQ>
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f96:	f7ff ff09 	bl	8004dac <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d008      	beq.n	8004fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e052      	b.n	8005060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0216 	bic.w	r2, r2, #22
 8004fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <HAL_DMA_Abort+0x62>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0208 	bic.w	r2, r2, #8
 8004ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800500a:	e013      	b.n	8005034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800500c:	f7ff fece 	bl	8004dac <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b05      	cmp	r3, #5
 8005018:	d90c      	bls.n	8005034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2203      	movs	r2, #3
 8005024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e015      	b.n	8005060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e4      	bne.n	800500c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	223f      	movs	r2, #63	; 0x3f
 8005048:	409a      	lsls	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d004      	beq.n	8005086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e00c      	b.n	80050a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2205      	movs	r2, #5
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e175      	b.n	80053b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050cc:	2201      	movs	r2, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	f040 8164 	bne.w	80053b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d005      	beq.n	8005102 <HAL_GPIO_Init+0x56>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d130      	bne.n	8005164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2203      	movs	r2, #3
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005138:	2201      	movs	r2, #1
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 0201 	and.w	r2, r3, #1
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d017      	beq.n	80051a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2203      	movs	r2, #3
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d123      	bne.n	80051f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	08da      	lsrs	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3208      	adds	r2, #8
 80051b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	220f      	movs	r2, #15
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	08da      	lsrs	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3208      	adds	r2, #8
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	2203      	movs	r2, #3
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0203 	and.w	r2, r3, #3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80be 	beq.w	80053b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005236:	4b66      	ldr	r3, [pc, #408]	; (80053d0 <HAL_GPIO_Init+0x324>)
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	4a65      	ldr	r2, [pc, #404]	; (80053d0 <HAL_GPIO_Init+0x324>)
 800523c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005240:	6453      	str	r3, [r2, #68]	; 0x44
 8005242:	4b63      	ldr	r3, [pc, #396]	; (80053d0 <HAL_GPIO_Init+0x324>)
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800524e:	4a61      	ldr	r2, [pc, #388]	; (80053d4 <HAL_GPIO_Init+0x328>)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	3302      	adds	r3, #2
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a58      	ldr	r2, [pc, #352]	; (80053d8 <HAL_GPIO_Init+0x32c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d037      	beq.n	80052ea <HAL_GPIO_Init+0x23e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a57      	ldr	r2, [pc, #348]	; (80053dc <HAL_GPIO_Init+0x330>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d031      	beq.n	80052e6 <HAL_GPIO_Init+0x23a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_GPIO_Init+0x334>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d02b      	beq.n	80052e2 <HAL_GPIO_Init+0x236>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a55      	ldr	r2, [pc, #340]	; (80053e4 <HAL_GPIO_Init+0x338>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d025      	beq.n	80052de <HAL_GPIO_Init+0x232>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a54      	ldr	r2, [pc, #336]	; (80053e8 <HAL_GPIO_Init+0x33c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01f      	beq.n	80052da <HAL_GPIO_Init+0x22e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a53      	ldr	r2, [pc, #332]	; (80053ec <HAL_GPIO_Init+0x340>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d019      	beq.n	80052d6 <HAL_GPIO_Init+0x22a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <HAL_GPIO_Init+0x344>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_GPIO_Init+0x226>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a51      	ldr	r2, [pc, #324]	; (80053f4 <HAL_GPIO_Init+0x348>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00d      	beq.n	80052ce <HAL_GPIO_Init+0x222>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a50      	ldr	r2, [pc, #320]	; (80053f8 <HAL_GPIO_Init+0x34c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <HAL_GPIO_Init+0x21e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4f      	ldr	r2, [pc, #316]	; (80053fc <HAL_GPIO_Init+0x350>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_GPIO_Init+0x21a>
 80052c2:	2309      	movs	r3, #9
 80052c4:	e012      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052c6:	230a      	movs	r3, #10
 80052c8:	e010      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ca:	2308      	movs	r3, #8
 80052cc:	e00e      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ce:	2307      	movs	r3, #7
 80052d0:	e00c      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052d2:	2306      	movs	r3, #6
 80052d4:	e00a      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052d6:	2305      	movs	r3, #5
 80052d8:	e008      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052da:	2304      	movs	r3, #4
 80052dc:	e006      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052de:	2303      	movs	r3, #3
 80052e0:	e004      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e002      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ea:	2300      	movs	r3, #0
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f002 0203 	and.w	r2, r2, #3
 80052f2:	0092      	lsls	r2, r2, #2
 80052f4:	4093      	lsls	r3, r2
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052fc:	4935      	ldr	r1, [pc, #212]	; (80053d4 <HAL_GPIO_Init+0x328>)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	089b      	lsrs	r3, r3, #2
 8005302:	3302      	adds	r3, #2
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800530a:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <HAL_GPIO_Init+0x354>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800532e:	4a34      	ldr	r2, [pc, #208]	; (8005400 <HAL_GPIO_Init+0x354>)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_GPIO_Init+0x354>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005358:	4a29      	ldr	r2, [pc, #164]	; (8005400 <HAL_GPIO_Init+0x354>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_GPIO_Init+0x354>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005382:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_GPIO_Init+0x354>)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_GPIO_Init+0x354>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <HAL_GPIO_Init+0x354>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	f67f ae86 	bls.w	80050cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40013800 	.word	0x40013800
 80053d8:	40020000 	.word	0x40020000
 80053dc:	40020400 	.word	0x40020400
 80053e0:	40020800 	.word	0x40020800
 80053e4:	40020c00 	.word	0x40020c00
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40021400 	.word	0x40021400
 80053f0:	40021800 	.word	0x40021800
 80053f4:	40021c00 	.word	0x40021c00
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40022400 	.word	0x40022400
 8005400:	40013c00 	.word	0x40013c00

08005404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	807b      	strh	r3, [r7, #2]
 8005410:	4613      	mov	r3, r2
 8005412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005414:	787b      	ldrb	r3, [r7, #1]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541a:	887a      	ldrh	r2, [r7, #2]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005420:	e003      	b.n	800542a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005422:	887b      	ldrh	r3, [r7, #2]
 8005424:	041a      	lsls	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	619a      	str	r2, [r3, #24]
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005448:	887a      	ldrh	r2, [r7, #2]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	041a      	lsls	r2, r3, #16
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	43d9      	mvns	r1, r3
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	400b      	ands	r3, r1
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	619a      	str	r2, [r3, #24]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e07f      	b.n	800557e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fd fad6 	bl	8002a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2224      	movs	r2, #36	; 0x24
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d107      	bne.n	80054e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	e006      	b.n	80054f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d104      	bne.n	8005506 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6859      	ldr	r1, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <HAL_I2C_Init+0x11c>)
 8005512:	430b      	orrs	r3, r1
 8005514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69d9      	ldr	r1, [r3, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	02008000 	.word	0x02008000

0800558c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	4608      	mov	r0, r1
 8005596:	4611      	mov	r1, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4603      	mov	r3, r0
 800559c:	817b      	strh	r3, [r7, #10]
 800559e:	460b      	mov	r3, r1
 80055a0:	813b      	strh	r3, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	f040 80f9 	bne.w	80057a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x34>
 80055ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0ed      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_I2C_Mem_Write+0x4e>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e0e6      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055e2:	f7ff fbe3 	bl	8004dac <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2319      	movs	r3, #25
 80055ee:	2201      	movs	r2, #1
 80055f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fac3 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0d1      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2221      	movs	r2, #33	; 0x21
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2240      	movs	r2, #64	; 0x40
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800562c:	88f8      	ldrh	r0, [r7, #6]
 800562e:	893a      	ldrh	r2, [r7, #8]
 8005630:	8979      	ldrh	r1, [r7, #10]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4603      	mov	r3, r0
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f9d3 	bl	80059e8 <I2C_RequestMemoryWrite>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0a9      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2bff      	cmp	r3, #255	; 0xff
 800565c:	d90e      	bls.n	800567c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005668:	b2da      	uxtb	r2, r3
 800566a:	8979      	ldrh	r1, [r7, #10]
 800566c:	2300      	movs	r3, #0
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fc2b 	bl	8005ed0 <I2C_TransferConfig>
 800567a:	e00f      	b.n	800569c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	b2da      	uxtb	r2, r3
 800568c:	8979      	ldrh	r1, [r7, #10]
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fc1a 	bl	8005ed0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 faad 	bl	8005c00 <I2C_WaitOnTXISFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e07b      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d034      	beq.n	8005754 <HAL_I2C_Mem_Write+0x1c8>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d130      	bne.n	8005754 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	2200      	movs	r2, #0
 80056fa:	2180      	movs	r1, #128	; 0x80
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fa3f 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e04d      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2bff      	cmp	r3, #255	; 0xff
 8005714:	d90e      	bls.n	8005734 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	22ff      	movs	r2, #255	; 0xff
 800571a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005720:	b2da      	uxtb	r2, r3
 8005722:	8979      	ldrh	r1, [r7, #10]
 8005724:	2300      	movs	r3, #0
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fbcf 	bl	8005ed0 <I2C_TransferConfig>
 8005732:	e00f      	b.n	8005754 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005742:	b2da      	uxtb	r2, r3
 8005744:	8979      	ldrh	r1, [r7, #10]
 8005746:	2300      	movs	r3, #0
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fbbe 	bl	8005ed0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d19e      	bne.n	800569c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fa8c 	bl	8005c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e01a      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2220      	movs	r2, #32
 8005778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_I2C_Mem_Write+0x224>)
 8005786:	400b      	ands	r3, r1
 8005788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e000      	b.n	80057a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	fe00e800 	.word	0xfe00e800

080057b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	461a      	mov	r2, r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	817b      	strh	r3, [r7, #10]
 80057c6:	460b      	mov	r3, r1
 80057c8:	813b      	strh	r3, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	f040 80fd 	bne.w	80059d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_I2C_Mem_Read+0x34>
 80057e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d105      	bne.n	80057f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0f1      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_I2C_Mem_Read+0x4e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ea      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800580a:	f7ff facf 	bl	8004dac <HAL_GetTick>
 800580e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2319      	movs	r3, #25
 8005816:	2201      	movs	r2, #1
 8005818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f9af 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0d5      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2222      	movs	r2, #34	; 0x22
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2240      	movs	r2, #64	; 0x40
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800584c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005854:	88f8      	ldrh	r0, [r7, #6]
 8005856:	893a      	ldrh	r2, [r7, #8]
 8005858:	8979      	ldrh	r1, [r7, #10]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	4603      	mov	r3, r0
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f913 	bl	8005a90 <I2C_RequestMemoryRead>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0ad      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2bff      	cmp	r3, #255	; 0xff
 8005884:	d90e      	bls.n	80058a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005890:	b2da      	uxtb	r2, r3
 8005892:	8979      	ldrh	r1, [r7, #10]
 8005894:	4b52      	ldr	r3, [pc, #328]	; (80059e0 <HAL_I2C_Mem_Read+0x22c>)
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fb17 	bl	8005ed0 <I2C_TransferConfig>
 80058a2:	e00f      	b.n	80058c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	8979      	ldrh	r1, [r7, #10]
 80058b6:	4b4a      	ldr	r3, [pc, #296]	; (80059e0 <HAL_I2C_Mem_Read+0x22c>)
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fb06 	bl	8005ed0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	2200      	movs	r2, #0
 80058cc:	2104      	movs	r1, #4
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f956 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e07c      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d034      	beq.n	8005984 <HAL_I2C_Mem_Read+0x1d0>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d130      	bne.n	8005984 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2200      	movs	r2, #0
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f927 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04d      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2bff      	cmp	r3, #255	; 0xff
 8005944:	d90e      	bls.n	8005964 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	; 0xff
 800594a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fab7 	bl	8005ed0 <I2C_TransferConfig>
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	2300      	movs	r3, #0
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 faa6 	bl	8005ed0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d19a      	bne.n	80058c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f974 	bl	8005c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e01a      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2220      	movs	r2, #32
 80059a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_I2C_Mem_Read+0x230>)
 80059b6:	400b      	ands	r3, r1
 80059b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	80002400 	.word	0x80002400
 80059e4:	fe00e800 	.word	0xfe00e800

080059e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	817b      	strh	r3, [r7, #10]
 80059fa:	460b      	mov	r3, r1
 80059fc:	813b      	strh	r3, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	8979      	ldrh	r1, [r7, #10]
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <I2C_RequestMemoryWrite+0xa4>)
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fa5d 	bl	8005ed0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	69b9      	ldr	r1, [r7, #24]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f8f0 	bl	8005c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e02c      	b.n	8005a84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a30:	893b      	ldrh	r3, [r7, #8]
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	629a      	str	r2, [r3, #40]	; 0x28
 8005a3a:	e015      	b.n	8005a68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a3c:	893b      	ldrh	r3, [r7, #8]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f8d6 	bl	8005c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e012      	b.n	8005a84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a5e:	893b      	ldrh	r3, [r7, #8]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f884 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	80002000 	.word	0x80002000

08005a90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	4608      	mov	r0, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	817b      	strh	r3, [r7, #10]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	813b      	strh	r3, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	8979      	ldrh	r1, [r7, #10]
 8005ab0:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <I2C_RequestMemoryRead+0xa4>)
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa0a 	bl	8005ed0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	69b9      	ldr	r1, [r7, #24]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f89d 	bl	8005c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e02c      	b.n	8005b2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad6:	893b      	ldrh	r3, [r7, #8]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	629a      	str	r2, [r3, #40]	; 0x28
 8005ae0:	e015      	b.n	8005b0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ae2:	893b      	ldrh	r3, [r7, #8]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	69b9      	ldr	r1, [r7, #24]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f883 	bl	8005c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e012      	b.n	8005b2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b04:	893b      	ldrh	r3, [r7, #8]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2200      	movs	r2, #0
 8005b16:	2140      	movs	r1, #64	; 0x40
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f831 	bl	8005b80 <I2C_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	80002000 	.word	0x80002000

08005b38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d103      	bne.n	8005b56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d007      	beq.n	8005b74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	619a      	str	r2, [r3, #24]
  }
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b90:	e022      	b.n	8005bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d01e      	beq.n	8005bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7ff f907 	bl	8004dac <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d113      	bne.n	8005bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e00f      	b.n	8005bf8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4013      	ands	r3, r2
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d0cd      	beq.n	8005b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c0c:	e02c      	b.n	8005c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f870 	bl	8005cf8 <I2C_IsErrorOccurred>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e02a      	b.n	8005c78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d01e      	beq.n	8005c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7ff f8bf 	bl	8004dac <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d113      	bne.n	8005c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e007      	b.n	8005c78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d1cb      	bne.n	8005c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c8c:	e028      	b.n	8005ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f830 	bl	8005cf8 <I2C_IsErrorOccurred>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e026      	b.n	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7ff f883 	bl	8004dac <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e007      	b.n	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d1cf      	bne.n	8005c8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d075      	beq.n	8005e10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d2c:	e056      	b.n	8005ddc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d052      	beq.n	8005ddc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d36:	f7ff f839 	bl	8004dac <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d302      	bcc.n	8005d4c <I2C_IsErrorOccurred+0x54>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d147      	bne.n	8005ddc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6e:	d12e      	bne.n	8005dce <I2C_IsErrorOccurred+0xd6>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d76:	d02a      	beq.n	8005dce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d027      	beq.n	8005dce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d8c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d8e:	f7ff f80d 	bl	8004dac <HAL_GetTick>
 8005d92:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d94:	e01b      	b.n	8005dce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d96:	f7ff f809 	bl	8004dac <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b19      	cmp	r3, #25
 8005da2:	d914      	bls.n	8005dce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d1dc      	bne.n	8005d96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d003      	beq.n	8005df2 <I2C_IsErrorOccurred+0xfa>
 8005dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d09d      	beq.n	8005d2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	f043 0308 	orr.w	r3, r3, #8
 8005e4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f043 0302 	orr.w	r3, r3, #2
 8005e6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01c      	beq.n	8005ec0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff fe56 	bl	8005b38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6859      	ldr	r1, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <I2C_IsErrorOccurred+0x1d4>)
 8005e98:	400b      	ands	r3, r1
 8005e9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3728      	adds	r7, #40	; 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	fe00e800 	.word	0xfe00e800

08005ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	817b      	strh	r3, [r7, #10]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ee8:	7a7b      	ldrb	r3, [r7, #9]
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ef0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005efe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	0d5b      	lsrs	r3, r3, #21
 8005f0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f0e:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <I2C_TransferConfig+0x60>)
 8005f10:	430b      	orrs	r3, r1
 8005f12:	43db      	mvns	r3, r3
 8005f14:	ea02 0103 	and.w	r1, r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	03ff63ff 	.word	0x03ff63ff

08005f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d138      	bne.n	8005fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e032      	b.n	8005fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d139      	bne.n	8006054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e033      	b.n	8006056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2224      	movs	r2, #36	; 0x24
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800601c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800606e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006072:	6013      	str	r3, [r2, #0]
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40007000 	.word	0x40007000

08006084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e291      	b.n	80065be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8087 	beq.w	80061b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060a8:	4b96      	ldr	r3, [pc, #600]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d00c      	beq.n	80060ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b4:	4b93      	ldr	r3, [pc, #588]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d112      	bne.n	80060e6 <HAL_RCC_OscConfig+0x62>
 80060c0:	4b90      	ldr	r3, [pc, #576]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060cc:	d10b      	bne.n	80060e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ce:	4b8d      	ldr	r3, [pc, #564]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d06c      	beq.n	80061b4 <HAL_RCC_OscConfig+0x130>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d168      	bne.n	80061b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e26b      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ee:	d106      	bne.n	80060fe <HAL_RCC_OscConfig+0x7a>
 80060f0:	4b84      	ldr	r3, [pc, #528]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a83      	ldr	r2, [pc, #524]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e02e      	b.n	800615c <HAL_RCC_OscConfig+0xd8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10c      	bne.n	8006120 <HAL_RCC_OscConfig+0x9c>
 8006106:	4b7f      	ldr	r3, [pc, #508]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7e      	ldr	r2, [pc, #504]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4b7c      	ldr	r3, [pc, #496]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a7b      	ldr	r2, [pc, #492]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e01d      	b.n	800615c <HAL_RCC_OscConfig+0xd8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006128:	d10c      	bne.n	8006144 <HAL_RCC_OscConfig+0xc0>
 800612a:	4b76      	ldr	r3, [pc, #472]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a75      	ldr	r2, [pc, #468]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4b73      	ldr	r3, [pc, #460]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a72      	ldr	r2, [pc, #456]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800613c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e00b      	b.n	800615c <HAL_RCC_OscConfig+0xd8>
 8006144:	4b6f      	ldr	r3, [pc, #444]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a6e      	ldr	r2, [pc, #440]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800614a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4b6c      	ldr	r3, [pc, #432]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a6b      	ldr	r2, [pc, #428]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800615a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d013      	beq.n	800618c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006164:	f7fe fe22 	bl	8004dac <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800616c:	f7fe fe1e 	bl	8004dac <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b64      	cmp	r3, #100	; 0x64
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e21f      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800617e:	4b61      	ldr	r3, [pc, #388]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0f0      	beq.n	800616c <HAL_RCC_OscConfig+0xe8>
 800618a:	e014      	b.n	80061b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fe fe0e 	bl	8004dac <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006194:	f7fe fe0a 	bl	8004dac <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	; 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e20b      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061a6:	4b57      	ldr	r3, [pc, #348]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x110>
 80061b2:	e000      	b.n	80061b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d069      	beq.n	8006296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061c2:	4b50      	ldr	r3, [pc, #320]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ce:	4b4d      	ldr	r3, [pc, #308]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d11c      	bne.n	8006214 <HAL_RCC_OscConfig+0x190>
 80061da:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e6:	4b47      	ldr	r3, [pc, #284]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_RCC_OscConfig+0x17a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d001      	beq.n	80061fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e1df      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fe:	4b41      	ldr	r3, [pc, #260]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	493d      	ldr	r1, [pc, #244]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800620e:	4313      	orrs	r3, r2
 8006210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006212:	e040      	b.n	8006296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d023      	beq.n	8006264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800621c:	4b39      	ldr	r3, [pc, #228]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a38      	ldr	r2, [pc, #224]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fe fdc0 	bl	8004dac <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006230:	f7fe fdbc 	bl	8004dac <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e1bd      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006242:	4b30      	ldr	r3, [pc, #192]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624e:	4b2d      	ldr	r3, [pc, #180]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4929      	ldr	r1, [pc, #164]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800625e:	4313      	orrs	r3, r2
 8006260:	600b      	str	r3, [r1, #0]
 8006262:	e018      	b.n	8006296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006264:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a26      	ldr	r2, [pc, #152]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fe fd9c 	bl	8004dac <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006278:	f7fe fd98 	bl	8004dac <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e199      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628a:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d038      	beq.n	8006314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d019      	beq.n	80062de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062aa:	4b16      	ldr	r3, [pc, #88]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b6:	f7fe fd79 	bl	8004dac <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062be:	f7fe fd75 	bl	8004dac <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e176      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x23a>
 80062dc:	e01a      	b.n	8006314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e2:	4a08      	ldr	r2, [pc, #32]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ea:	f7fe fd5f 	bl	8004dac <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f0:	e00a      	b.n	8006308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f2:	f7fe fd5b 	bl	8004dac <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d903      	bls.n	8006308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e15c      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
 8006304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	4b91      	ldr	r3, [pc, #580]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800630a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ee      	bne.n	80062f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80a4 	beq.w	800646a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006322:	4b8b      	ldr	r3, [pc, #556]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10d      	bne.n	800634a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800632e:	4b88      	ldr	r3, [pc, #544]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	4a87      	ldr	r2, [pc, #540]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006338:	6413      	str	r3, [r2, #64]	; 0x40
 800633a:	4b85      	ldr	r3, [pc, #532]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006342:	60bb      	str	r3, [r7, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006346:	2301      	movs	r3, #1
 8006348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800634a:	4b82      	ldr	r3, [pc, #520]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d118      	bne.n	8006388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006356:	4b7f      	ldr	r3, [pc, #508]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a7e      	ldr	r2, [pc, #504]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 800635c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006362:	f7fe fd23 	bl	8004dac <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636a:	f7fe fd1f 	bl	8004dac <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b64      	cmp	r3, #100	; 0x64
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e120      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637c:	4b75      	ldr	r3, [pc, #468]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d106      	bne.n	800639e <HAL_RCC_OscConfig+0x31a>
 8006390:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	4a6e      	ldr	r2, [pc, #440]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6713      	str	r3, [r2, #112]	; 0x70
 800639c:	e02d      	b.n	80063fa <HAL_RCC_OscConfig+0x376>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <HAL_RCC_OscConfig+0x33c>
 80063a6:	4b6a      	ldr	r3, [pc, #424]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	4a69      	ldr	r2, [pc, #420]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	6713      	str	r3, [r2, #112]	; 0x70
 80063b2:	4b67      	ldr	r3, [pc, #412]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	4a66      	ldr	r2, [pc, #408]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063b8:	f023 0304 	bic.w	r3, r3, #4
 80063bc:	6713      	str	r3, [r2, #112]	; 0x70
 80063be:	e01c      	b.n	80063fa <HAL_RCC_OscConfig+0x376>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	d10c      	bne.n	80063e2 <HAL_RCC_OscConfig+0x35e>
 80063c8:	4b61      	ldr	r3, [pc, #388]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a60      	ldr	r2, [pc, #384]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063ce:	f043 0304 	orr.w	r3, r3, #4
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
 80063d4:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4a5d      	ldr	r2, [pc, #372]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	6713      	str	r3, [r2, #112]	; 0x70
 80063e0:	e00b      	b.n	80063fa <HAL_RCC_OscConfig+0x376>
 80063e2:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a5a      	ldr	r2, [pc, #360]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
 80063ee:	4b58      	ldr	r3, [pc, #352]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	4a57      	ldr	r2, [pc, #348]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063f4:	f023 0304 	bic.w	r3, r3, #4
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d015      	beq.n	800642e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006402:	f7fe fcd3 	bl	8004dac <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006408:	e00a      	b.n	8006420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640a:	f7fe fccf 	bl	8004dac <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f241 3288 	movw	r2, #5000	; 0x1388
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e0ce      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006420:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0ee      	beq.n	800640a <HAL_RCC_OscConfig+0x386>
 800642c:	e014      	b.n	8006458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642e:	f7fe fcbd 	bl	8004dac <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006434:	e00a      	b.n	800644c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fe fcb9 	bl	8004dac <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0b8      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644c:	4b40      	ldr	r3, [pc, #256]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ee      	bne.n	8006436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800645e:	4b3c      	ldr	r3, [pc, #240]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	4a3b      	ldr	r2, [pc, #236]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80a4 	beq.w	80065bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006474:	4b36      	ldr	r3, [pc, #216]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	2b08      	cmp	r3, #8
 800647e:	d06b      	beq.n	8006558 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d149      	bne.n	800651c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006488:	4b31      	ldr	r3, [pc, #196]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a30      	ldr	r2, [pc, #192]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fe fc8a 	bl	8004dac <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800649c:	f7fe fc86 	bl	8004dac <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e087      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ae:	4b28      	ldr	r3, [pc, #160]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	4313      	orrs	r3, r2
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fe fc5a 	bl	8004dac <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fe fc56 	bl	8004dac <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e057      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x478>
 800651a:	e04f      	b.n	80065bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a0b      	ldr	r2, [pc, #44]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fe fc40 	bl	8004dac <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fe fc3c 	bl	8004dac <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e03d      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x4ac>
 800654e:	e035      	b.n	80065bc <HAL_RCC_OscConfig+0x538>
 8006550:	40023800 	.word	0x40023800
 8006554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x544>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d028      	beq.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d121      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d11a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800658e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006590:	4293      	cmp	r3, r2
 8006592:	d111      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	3b01      	subs	r3, #1
 80065a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d107      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800

080065cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0d0      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e4:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d910      	bls.n	8006614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f2:	4b67      	ldr	r3, [pc, #412]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 020f 	bic.w	r2, r3, #15
 80065fa:	4965      	ldr	r1, [pc, #404]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006602:	4b63      	ldr	r3, [pc, #396]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0b8      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800662c:	4b59      	ldr	r3, [pc, #356]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4a58      	ldr	r2, [pc, #352]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006644:	4b53      	ldr	r3, [pc, #332]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4a52      	ldr	r2, [pc, #328]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800664a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800664e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006650:	4b50      	ldr	r3, [pc, #320]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	494d      	ldr	r1, [pc, #308]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d040      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d107      	bne.n	8006686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006676:	4b47      	ldr	r3, [pc, #284]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d115      	bne.n	80066ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e07f      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d107      	bne.n	800669e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668e:	4b41      	ldr	r3, [pc, #260]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e073      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669e:	4b3d      	ldr	r3, [pc, #244]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e06b      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ae:	4b39      	ldr	r3, [pc, #228]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f023 0203 	bic.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4936      	ldr	r1, [pc, #216]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c0:	f7fe fb74 	bl	8004dac <HAL_GetTick>
 80066c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	e00a      	b.n	80066de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c8:	f7fe fb70 	bl	8004dac <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e053      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066de:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 020c 	and.w	r2, r3, #12
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d1eb      	bne.n	80066c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066f0:	4b27      	ldr	r3, [pc, #156]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d210      	bcs.n	8006720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fe:	4b24      	ldr	r3, [pc, #144]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 020f 	bic.w	r2, r3, #15
 8006706:	4922      	ldr	r1, [pc, #136]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e032      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4916      	ldr	r1, [pc, #88]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	490e      	ldr	r1, [pc, #56]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800675e:	f000 f821 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8006762:	4602      	mov	r2, r0
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	490a      	ldr	r1, [pc, #40]	; (8006798 <HAL_RCC_ClockConfig+0x1cc>)
 8006770:	5ccb      	ldrb	r3, [r1, r3]
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <HAL_RCC_ClockConfig+0x1d0>)
 8006778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <HAL_RCC_ClockConfig+0x1d4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f7fd ff56 	bl	8004630 <HAL_InitTick>

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023c00 	.word	0x40023c00
 8006794:	40023800 	.word	0x40023800
 8006798:	0800e668 	.word	0x0800e668
 800679c:	20000004 	.word	0x20000004
 80067a0:	20000008 	.word	0x20000008

080067a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a8:	b094      	sub	sp, #80	; 0x50
 80067aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	647b      	str	r3, [r7, #68]	; 0x44
 80067b0:	2300      	movs	r3, #0
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b4:	2300      	movs	r3, #0
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067bc:	4b79      	ldr	r3, [pc, #484]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 030c 	and.w	r3, r3, #12
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d00d      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x40>
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	f200 80e1 	bhi.w	8006990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x34>
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d003      	beq.n	80067de <HAL_RCC_GetSysClockFreq+0x3a>
 80067d6:	e0db      	b.n	8006990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d8:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067dc:	e0db      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067de:	4b73      	ldr	r3, [pc, #460]	; (80069ac <HAL_RCC_GetSysClockFreq+0x208>)
 80067e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067e2:	e0d8      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e4:	4b6f      	ldr	r3, [pc, #444]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067ee:	4b6d      	ldr	r3, [pc, #436]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d063      	beq.n	80068c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fa:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	099b      	lsrs	r3, r3, #6
 8006800:	2200      	movs	r2, #0
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
 8006804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680c:	633b      	str	r3, [r7, #48]	; 0x30
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
 8006812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	f04f 0000 	mov.w	r0, #0
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	0159      	lsls	r1, r3, #5
 8006824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006828:	0150      	lsls	r0, r2, #5
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4621      	mov	r1, r4
 8006830:	1a51      	subs	r1, r2, r1
 8006832:	6139      	str	r1, [r7, #16]
 8006834:	4629      	mov	r1, r5
 8006836:	eb63 0301 	sbc.w	r3, r3, r1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006848:	4659      	mov	r1, fp
 800684a:	018b      	lsls	r3, r1, #6
 800684c:	4651      	mov	r1, sl
 800684e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006852:	4651      	mov	r1, sl
 8006854:	018a      	lsls	r2, r1, #6
 8006856:	4651      	mov	r1, sl
 8006858:	ebb2 0801 	subs.w	r8, r2, r1
 800685c:	4659      	mov	r1, fp
 800685e:	eb63 0901 	sbc.w	r9, r3, r1
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006876:	4690      	mov	r8, r2
 8006878:	4699      	mov	r9, r3
 800687a:	4623      	mov	r3, r4
 800687c:	eb18 0303 	adds.w	r3, r8, r3
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	462b      	mov	r3, r5
 8006884:	eb49 0303 	adc.w	r3, r9, r3
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006896:	4629      	mov	r1, r5
 8006898:	024b      	lsls	r3, r1, #9
 800689a:	4621      	mov	r1, r4
 800689c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068a0:	4621      	mov	r1, r4
 80068a2:	024a      	lsls	r2, r1, #9
 80068a4:	4610      	mov	r0, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068aa:	2200      	movs	r2, #0
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068b4:	f7fa f94a 	bl	8000b4c <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4613      	mov	r3, r2
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c0:	e058      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068c2:	4b38      	ldr	r3, [pc, #224]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	099b      	lsrs	r3, r3, #6
 80068c8:	2200      	movs	r2, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	4611      	mov	r1, r2
 80068ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068d2:	623b      	str	r3, [r7, #32]
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	f04f 0000 	mov.w	r0, #0
 80068e4:	f04f 0100 	mov.w	r1, #0
 80068e8:	0159      	lsls	r1, r3, #5
 80068ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ee:	0150      	lsls	r0, r2, #5
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4641      	mov	r1, r8
 80068f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068fa:	4649      	mov	r1, r9
 80068fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800690c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006914:	ebb2 040a 	subs.w	r4, r2, sl
 8006918:	eb63 050b 	sbc.w	r5, r3, fp
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	00eb      	lsls	r3, r5, #3
 8006926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800692a:	00e2      	lsls	r2, r4, #3
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	4643      	mov	r3, r8
 8006932:	18e3      	adds	r3, r4, r3
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	464b      	mov	r3, r9
 8006938:	eb45 0303 	adc.w	r3, r5, r3
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800694a:	4629      	mov	r1, r5
 800694c:	028b      	lsls	r3, r1, #10
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006954:	4621      	mov	r1, r4
 8006956:	028a      	lsls	r2, r1, #10
 8006958:	4610      	mov	r0, r2
 800695a:	4619      	mov	r1, r3
 800695c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695e:	2200      	movs	r2, #0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	61fa      	str	r2, [r7, #28]
 8006964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006968:	f7fa f8f0 	bl	8000b4c <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	0c1b      	lsrs	r3, r3, #16
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	3301      	adds	r3, #1
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006988:	fbb2 f3f3 	udiv	r3, r2, r3
 800698c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800698e:	e002      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006998:	4618      	mov	r0, r3
 800699a:	3750      	adds	r7, #80	; 0x50
 800699c:	46bd      	mov	sp, r7
 800699e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069a2:	bf00      	nop
 80069a4:	40023800 	.word	0x40023800
 80069a8:	00f42400 	.word	0x00f42400
 80069ac:	007a1200 	.word	0x007a1200

080069b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b4:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b6:	681b      	ldr	r3, [r3, #0]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000004 	.word	0x20000004

080069c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069cc:	f7ff fff0 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	0a9b      	lsrs	r3, r3, #10
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	4903      	ldr	r1, [pc, #12]	; (80069ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80069de:	5ccb      	ldrb	r3, [r1, r3]
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40023800 	.word	0x40023800
 80069ec:	0800e678 	.word	0x0800e678

080069f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069f4:	f7ff ffdc 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	0b5b      	lsrs	r3, r3, #13
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	4903      	ldr	r1, [pc, #12]	; (8006a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a06:	5ccb      	ldrb	r3, [r1, r3]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40023800 	.word	0x40023800
 8006a14:	0800e678 	.word	0x0800e678

08006a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	220f      	movs	r2, #15
 8006a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0203 	and.w	r2, r3, #3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	08db      	lsrs	r3, r3, #3
 8006a52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <HAL_RCC_GetClockConfig+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 020f 	and.w	r2, r3, #15
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	601a      	str	r2, [r3, #0]
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40023c00 	.word	0x40023c00

08006a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d012      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006aa4:	4b69      	ldr	r3, [pc, #420]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a68      	ldr	r2, [pc, #416]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006aae:	6093      	str	r3, [r2, #8]
 8006ab0:	4b66      	ldr	r3, [pc, #408]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab8:	4964      	ldr	r1, [pc, #400]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d017      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ad6:	4b5d      	ldr	r3, [pc, #372]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006adc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae4:	4959      	ldr	r1, [pc, #356]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af4:	d101      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006af6:	2301      	movs	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b02:	2301      	movs	r3, #1
 8006b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d017      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b12:	4b4e      	ldr	r3, [pc, #312]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	494a      	ldr	r1, [pc, #296]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b30:	d101      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b32:	2301      	movs	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 808b 	beq.w	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b60:	4b3a      	ldr	r3, [pc, #232]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	4a39      	ldr	r2, [pc, #228]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6c:	4b37      	ldr	r3, [pc, #220]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b78:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a34      	ldr	r2, [pc, #208]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b84:	f7fe f912 	bl	8004dac <HAL_GetTick>
 8006b88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b8c:	f7fe f90e 	bl	8004dac <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b64      	cmp	r3, #100	; 0x64
 8006b98:	d901      	bls.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e357      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b9e:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006baa:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d035      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d02e      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc8:	4b20      	ldr	r3, [pc, #128]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a1d      	ldr	r2, [pc, #116]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bde:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a1a      	ldr	r2, [pc, #104]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006bea:	4a18      	ldr	r2, [pc, #96]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bf0:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d114      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfc:	f7fe f8d6 	bl	8004dac <HAL_GetTick>
 8006c00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c02:	e00a      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c04:	f7fe f8d2 	bl	8004dac <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e319      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0ee      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c32:	d111      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c42:	400b      	ands	r3, r1
 8006c44:	4901      	ldr	r1, [pc, #4]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	608b      	str	r3, [r1, #8]
 8006c4a:	e00b      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40007000 	.word	0x40007000
 8006c54:	0ffffcff 	.word	0x0ffffcff
 8006c58:	4baa      	ldr	r3, [pc, #680]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4aa9      	ldr	r2, [pc, #676]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c62:	6093      	str	r3, [r2, #8]
 8006c64:	4ba7      	ldr	r3, [pc, #668]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c70:	49a4      	ldr	r1, [pc, #656]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c82:	4ba0      	ldr	r3, [pc, #640]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c88:	4a9e      	ldr	r2, [pc, #632]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c92:	4b9c      	ldr	r3, [pc, #624]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	4999      	ldr	r1, [pc, #612]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cb0:	4b94      	ldr	r3, [pc, #592]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbe:	4991      	ldr	r1, [pc, #580]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cd2:	4b8c      	ldr	r3, [pc, #560]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce0:	4988      	ldr	r1, [pc, #544]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cf4:	4b83      	ldr	r3, [pc, #524]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d02:	4980      	ldr	r1, [pc, #512]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d16:	4b7b      	ldr	r3, [pc, #492]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	4977      	ldr	r1, [pc, #476]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d38:	4b72      	ldr	r3, [pc, #456]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	f023 0203 	bic.w	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	496f      	ldr	r1, [pc, #444]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d5a:	4b6a      	ldr	r3, [pc, #424]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f023 020c 	bic.w	r2, r3, #12
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d68:	4966      	ldr	r1, [pc, #408]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d7c:	4b61      	ldr	r3, [pc, #388]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8a:	495e      	ldr	r1, [pc, #376]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d9e:	4b59      	ldr	r3, [pc, #356]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	4955      	ldr	r1, [pc, #340]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006dc0:	4b50      	ldr	r3, [pc, #320]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	494d      	ldr	r1, [pc, #308]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006de2:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	4944      	ldr	r1, [pc, #272]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e04:	4b3f      	ldr	r3, [pc, #252]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e12:	493c      	ldr	r1, [pc, #240]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e26:	4b37      	ldr	r3, [pc, #220]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	4933      	ldr	r1, [pc, #204]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e48:	4b2e      	ldr	r3, [pc, #184]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e56:	492b      	ldr	r1, [pc, #172]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e6a:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e78:	4922      	ldr	r1, [pc, #136]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e88:	d101      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eaa:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb8:	4912      	ldr	r1, [pc, #72]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006edc:	4909      	ldr	r1, [pc, #36]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d006      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80d9 	beq.w	80070aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ef8:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a01      	ldr	r2, [pc, #4]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f02:	e001      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006f04:	40023800 	.word	0x40023800
 8006f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0a:	f7fd ff4f 	bl	8004dac <HAL_GetTick>
 8006f0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f10:	e008      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f12:	f7fd ff4b 	bl	8004dac <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b64      	cmp	r3, #100	; 0x64
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e194      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f24:	4b6c      	ldr	r3, [pc, #432]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f0      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d021      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11d      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f44:	4b64      	ldr	r3, [pc, #400]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f52:	4b61      	ldr	r3, [pc, #388]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f58:	0e1b      	lsrs	r3, r3, #24
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	019a      	lsls	r2, r3, #6
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	071b      	lsls	r3, r3, #28
 8006f78:	4957      	ldr	r1, [pc, #348]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d00a      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d02e      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006faa:	d129      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fac:	4b4a      	ldr	r3, [pc, #296]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb2:	0c1b      	lsrs	r3, r3, #16
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fba:	4b47      	ldr	r3, [pc, #284]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc0:	0f1b      	lsrs	r3, r3, #28
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	019a      	lsls	r2, r3, #6
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	061b      	lsls	r3, r3, #24
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	071b      	lsls	r3, r3, #28
 8006fe0:	493d      	ldr	r1, [pc, #244]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fe8:	4b3b      	ldr	r3, [pc, #236]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fee:	f023 021f 	bic.w	r2, r3, #31
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4937      	ldr	r1, [pc, #220]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01d      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800700c:	4b32      	ldr	r3, [pc, #200]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800700e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007012:	0e1b      	lsrs	r3, r3, #24
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800701a:	4b2f      	ldr	r3, [pc, #188]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800701c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007020:	0f1b      	lsrs	r3, r3, #28
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	019a      	lsls	r2, r3, #6
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	431a      	orrs	r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	061b      	lsls	r3, r3, #24
 800703a:	431a      	orrs	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	071b      	lsls	r3, r3, #28
 8007040:	4925      	ldr	r1, [pc, #148]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d011      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	019a      	lsls	r2, r3, #6
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	071b      	lsls	r3, r3, #28
 8007070:	4919      	ldr	r1, [pc, #100]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007078:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800707e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007084:	f7fd fe92 	bl	8004dac <HAL_GetTick>
 8007088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800708a:	e008      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800708c:	f7fd fe8e 	bl	8004dac <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	; 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e0d7      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f040 80cd 	bne.w	800724c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070be:	f7fd fe75 	bl	8004dac <HAL_GetTick>
 80070c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070c4:	e00a      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070c6:	f7fd fe71 	bl	8004dac <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b64      	cmp	r3, #100	; 0x64
 80070d2:	d903      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e0ba      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80070d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070dc:	4b5e      	ldr	r3, [pc, #376]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e8:	d0ed      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d009      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007106:	2b00      	cmp	r3, #0
 8007108:	d02e      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d12a      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007112:	4b51      	ldr	r3, [pc, #324]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007120:	4b4d      	ldr	r3, [pc, #308]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007126:	0f1b      	lsrs	r3, r3, #28
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	019a      	lsls	r2, r3, #6
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	061b      	lsls	r3, r3, #24
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	071b      	lsls	r3, r3, #28
 8007146:	4944      	ldr	r1, [pc, #272]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007148:	4313      	orrs	r3, r2
 800714a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800714e:	4b42      	ldr	r3, [pc, #264]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007154:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	3b01      	subs	r3, #1
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	493d      	ldr	r1, [pc, #244]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d022      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717c:	d11d      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800717e:	4b36      	ldr	r3, [pc, #216]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007184:	0e1b      	lsrs	r3, r3, #24
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800718c:	4b32      	ldr	r3, [pc, #200]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	019a      	lsls	r2, r3, #6
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	431a      	orrs	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	071b      	lsls	r3, r3, #28
 80071b2:	4929      	ldr	r1, [pc, #164]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d028      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071c6:	4b24      	ldr	r3, [pc, #144]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071cc:	0e1b      	lsrs	r3, r3, #24
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071d4:	4b20      	ldr	r3, [pc, #128]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	019a      	lsls	r2, r3, #6
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	431a      	orrs	r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	061b      	lsls	r3, r3, #24
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	071b      	lsls	r3, r3, #28
 80071fa:	4917      	ldr	r1, [pc, #92]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007202:	4b15      	ldr	r3, [pc, #84]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	4911      	ldr	r1, [pc, #68]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a0e      	ldr	r2, [pc, #56]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800721e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007224:	f7fd fdc2 	bl	8004dac <HAL_GetTick>
 8007228:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800722a:	e008      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800722c:	f7fd fdbe 	bl	8004dac <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b64      	cmp	r3, #100	; 0x64
 8007238:	d901      	bls.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e007      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800723e:	4b06      	ldr	r3, [pc, #24]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724a:	d1ef      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40023800 	.word	0x40023800

0800725c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e049      	b.n	8007302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fd fbf8 	bl	8004a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f000 fc76 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d001      	beq.n	8007324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e054      	b.n	80073ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a26      	ldr	r2, [pc, #152]	; (80073dc <HAL_TIM_Base_Start_IT+0xd0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d022      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800734e:	d01d      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d018      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d013      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00e      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <HAL_TIM_Base_Start_IT+0xe0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_TIM_Base_Start_IT+0x80>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d115      	bne.n	80073b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <HAL_TIM_Base_Start_IT+0xec>)
 8007394:	4013      	ands	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b06      	cmp	r3, #6
 800739c:	d015      	beq.n	80073ca <HAL_TIM_Base_Start_IT+0xbe>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a4:	d011      	beq.n	80073ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	e008      	b.n	80073ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e000      	b.n	80073cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40000c00 	.word	0x40000c00
 80073ec:	40010400 	.word	0x40010400
 80073f0:	40014000 	.word	0x40014000
 80073f4:	40001800 	.word	0x40001800
 80073f8:	00010007 	.word	0x00010007

080073fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e049      	b.n	80074a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f841 	bl	80074aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f000 fba6 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d122      	bne.n	800751a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d11b      	bne.n	800751a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f06f 0202 	mvn.w	r2, #2
 80074ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f003 0303 	and.w	r3, r3, #3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb25 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 8007506:	e005      	b.n	8007514 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb17 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb28 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b04      	cmp	r3, #4
 8007526:	d122      	bne.n	800756e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b04      	cmp	r3, #4
 8007534:	d11b      	bne.n	800756e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f06f 0204 	mvn.w	r2, #4
 800753e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fafb 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 800755a:	e005      	b.n	8007568 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 faed 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fafe 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b08      	cmp	r3, #8
 800757a:	d122      	bne.n	80075c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b08      	cmp	r3, #8
 8007588:	d11b      	bne.n	80075c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f06f 0208 	mvn.w	r2, #8
 8007592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2204      	movs	r2, #4
 8007598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fad1 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 80075ae:	e005      	b.n	80075bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fac3 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fad4 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d122      	bne.n	8007616 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	2b10      	cmp	r3, #16
 80075dc:	d11b      	bne.n	8007616 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f06f 0210 	mvn.w	r2, #16
 80075e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2208      	movs	r2, #8
 80075ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 faa7 	bl	8007b50 <HAL_TIM_IC_CaptureCallback>
 8007602:	e005      	b.n	8007610 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa99 	bl	8007b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 faaa 	bl	8007b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d10e      	bne.n	8007642 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d107      	bne.n	8007642 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f06f 0201 	mvn.w	r2, #1
 800763a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fb fb2d 	bl	8002c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d10e      	bne.n	800766e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765a:	2b80      	cmp	r3, #128	; 0x80
 800765c:	d107      	bne.n	800766e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 ff53 	bl	8008514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767c:	d10e      	bne.n	800769c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007688:	2b80      	cmp	r3, #128	; 0x80
 800768a:	d107      	bne.n	800769c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 ff46 	bl	8008528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b40      	cmp	r3, #64	; 0x40
 80076a8:	d10e      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d107      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa58 	bl	8007b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d10e      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	d107      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0220 	mvn.w	r2, #32
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 ff06 	bl	8008500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007716:	2302      	movs	r3, #2
 8007718:	e0ff      	b.n	800791a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b14      	cmp	r3, #20
 8007726:	f200 80f0 	bhi.w	800790a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007785 	.word	0x08007785
 8007734:	0800790b 	.word	0x0800790b
 8007738:	0800790b 	.word	0x0800790b
 800773c:	0800790b 	.word	0x0800790b
 8007740:	080077c5 	.word	0x080077c5
 8007744:	0800790b 	.word	0x0800790b
 8007748:	0800790b 	.word	0x0800790b
 800774c:	0800790b 	.word	0x0800790b
 8007750:	08007807 	.word	0x08007807
 8007754:	0800790b 	.word	0x0800790b
 8007758:	0800790b 	.word	0x0800790b
 800775c:	0800790b 	.word	0x0800790b
 8007760:	08007847 	.word	0x08007847
 8007764:	0800790b 	.word	0x0800790b
 8007768:	0800790b 	.word	0x0800790b
 800776c:	0800790b 	.word	0x0800790b
 8007770:	08007889 	.word	0x08007889
 8007774:	0800790b 	.word	0x0800790b
 8007778:	0800790b 	.word	0x0800790b
 800777c:	0800790b 	.word	0x0800790b
 8007780:	080078c9 	.word	0x080078c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fa9e 	bl	8007ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0208 	orr.w	r2, r2, #8
 800779e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0204 	bic.w	r2, r2, #4
 80077ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6999      	ldr	r1, [r3, #24]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	619a      	str	r2, [r3, #24]
      break;
 80077c2:	e0a5      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 faf0 	bl	8007db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6999      	ldr	r1, [r3, #24]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	021a      	lsls	r2, r3, #8
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	619a      	str	r2, [r3, #24]
      break;
 8007804:	e084      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fb47 	bl	8007ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0208 	orr.w	r2, r2, #8
 8007820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69da      	ldr	r2, [r3, #28]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0204 	bic.w	r2, r2, #4
 8007830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69d9      	ldr	r1, [r3, #28]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	61da      	str	r2, [r3, #28]
      break;
 8007844:	e064      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fb9d 	bl	8007f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69d9      	ldr	r1, [r3, #28]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	021a      	lsls	r2, r3, #8
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	61da      	str	r2, [r3, #28]
      break;
 8007886:	e043      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fbd4 	bl	800803c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0208 	orr.w	r2, r2, #8
 80078a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0204 	bic.w	r2, r2, #4
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078c6:	e023      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fc06 	bl	80080e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	021a      	lsls	r2, r3, #8
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007908:	e002      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
      break;
 800790e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop

08007924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIM_ConfigClockSource+0x1c>
 800793c:	2302      	movs	r3, #2
 800793e:	e0b4      	b.n	8007aaa <HAL_TIM_ConfigClockSource+0x186>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	4b56      	ldr	r3, [pc, #344]	; (8007ab4 <HAL_TIM_ConfigClockSource+0x190>)
 800795c:	4013      	ands	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007978:	d03e      	beq.n	80079f8 <HAL_TIM_ConfigClockSource+0xd4>
 800797a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800797e:	f200 8087 	bhi.w	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 8007982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007986:	f000 8086 	beq.w	8007a96 <HAL_TIM_ConfigClockSource+0x172>
 800798a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798e:	d87f      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b70      	cmp	r3, #112	; 0x70
 8007992:	d01a      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0xa6>
 8007994:	2b70      	cmp	r3, #112	; 0x70
 8007996:	d87b      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 8007998:	2b60      	cmp	r3, #96	; 0x60
 800799a:	d050      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x11a>
 800799c:	2b60      	cmp	r3, #96	; 0x60
 800799e:	d877      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 80079a0:	2b50      	cmp	r3, #80	; 0x50
 80079a2:	d03c      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0xfa>
 80079a4:	2b50      	cmp	r3, #80	; 0x50
 80079a6:	d873      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	d058      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x13a>
 80079ac:	2b40      	cmp	r3, #64	; 0x40
 80079ae:	d86f      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b30      	cmp	r3, #48	; 0x30
 80079b2:	d064      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x15a>
 80079b4:	2b30      	cmp	r3, #48	; 0x30
 80079b6:	d86b      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d060      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x15a>
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d867      	bhi.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d05c      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x15a>
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d05a      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x15a>
 80079c8:	e062      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6899      	ldr	r1, [r3, #8]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f000 fce3 	bl	80083a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	609a      	str	r2, [r3, #8]
      break;
 80079f6:	e04f      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6899      	ldr	r1, [r3, #8]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f000 fccc 	bl	80083a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a1a:	609a      	str	r2, [r3, #8]
      break;
 8007a1c:	e03c      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6859      	ldr	r1, [r3, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f000 fc40 	bl	80082b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2150      	movs	r1, #80	; 0x50
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fc99 	bl	800836e <TIM_ITRx_SetConfig>
      break;
 8007a3c:	e02c      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f000 fc5f 	bl	800830e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2160      	movs	r1, #96	; 0x60
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fc89 	bl	800836e <TIM_ITRx_SetConfig>
      break;
 8007a5c:	e01c      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 fc20 	bl	80082b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2140      	movs	r1, #64	; 0x40
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fc79 	bl	800836e <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e00c      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f000 fc70 	bl	800836e <TIM_ITRx_SetConfig>
      break;
 8007a8e:	e003      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
      break;
 8007a94:	e000      	b.n	8007a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	fffeff88 	.word	0xfffeff88

08007ab8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e031      	b.n	8007b34 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fb50 	bl	8008188 <TIM_SlaveTimer_SetConfig>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e018      	b.n	8007b34 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b10:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b20:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a40      	ldr	r2, [pc, #256]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d00f      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3d      	ldr	r2, [pc, #244]	; (8007ca4 <TIM_Base_SetConfig+0x118>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00b      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3c      	ldr	r2, [pc, #240]	; (8007ca8 <TIM_Base_SetConfig+0x11c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d007      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3b      	ldr	r2, [pc, #236]	; (8007cac <TIM_Base_SetConfig+0x120>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3a      	ldr	r2, [pc, #232]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d108      	bne.n	8007bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d02b      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bec:	d027      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2c      	ldr	r2, [pc, #176]	; (8007ca4 <TIM_Base_SetConfig+0x118>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d023      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2b      	ldr	r2, [pc, #172]	; (8007ca8 <TIM_Base_SetConfig+0x11c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01f      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2a      	ldr	r2, [pc, #168]	; (8007cac <TIM_Base_SetConfig+0x120>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01b      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d017      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a28      	ldr	r2, [pc, #160]	; (8007cb4 <TIM_Base_SetConfig+0x128>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <TIM_Base_SetConfig+0x12c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00f      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a26      	ldr	r2, [pc, #152]	; (8007cbc <TIM_Base_SetConfig+0x130>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00b      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a25      	ldr	r2, [pc, #148]	; (8007cc0 <TIM_Base_SetConfig+0x134>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d007      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a24      	ldr	r2, [pc, #144]	; (8007cc4 <TIM_Base_SetConfig+0x138>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a23      	ldr	r2, [pc, #140]	; (8007cc8 <TIM_Base_SetConfig+0x13c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d108      	bne.n	8007c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_Base_SetConfig+0xf8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a0c      	ldr	r2, [pc, #48]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d103      	bne.n	8007c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	615a      	str	r2, [r3, #20]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40000400 	.word	0x40000400
 8007ca8:	40000800 	.word	0x40000800
 8007cac:	40000c00 	.word	0x40000c00
 8007cb0:	40010400 	.word	0x40010400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800
 8007cc0:	40001800 	.word	0x40001800
 8007cc4:	40001c00 	.word	0x40001c00
 8007cc8:	40002000 	.word	0x40002000

08007ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f023 0201 	bic.w	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <TIM_OC1_SetConfig+0xd8>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f023 0302 	bic.w	r3, r3, #2
 8007d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a21      	ldr	r2, [pc, #132]	; (8007da8 <TIM_OC1_SetConfig+0xdc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d003      	beq.n	8007d30 <TIM_OC1_SetConfig+0x64>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a20      	ldr	r2, [pc, #128]	; (8007dac <TIM_OC1_SetConfig+0xe0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d10c      	bne.n	8007d4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0308 	bic.w	r3, r3, #8
 8007d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 0304 	bic.w	r3, r3, #4
 8007d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <TIM_OC1_SetConfig+0xdc>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d003      	beq.n	8007d5a <TIM_OC1_SetConfig+0x8e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <TIM_OC1_SetConfig+0xe0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d111      	bne.n	8007d7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	621a      	str	r2, [r3, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	fffeff8f 	.word	0xfffeff8f
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40010400 	.word	0x40010400

08007db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f023 0210 	bic.w	r2, r3, #16
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <TIM_OC2_SetConfig+0xe4>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0320 	bic.w	r3, r3, #32
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a23      	ldr	r2, [pc, #140]	; (8007e98 <TIM_OC2_SetConfig+0xe8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC2_SetConfig+0x68>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <TIM_OC2_SetConfig+0xec>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d10d      	bne.n	8007e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <TIM_OC2_SetConfig+0xe8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC2_SetConfig+0x94>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <TIM_OC2_SetConfig+0xec>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d113      	bne.n	8007e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	feff8fff 	.word	0xfeff8fff
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40010400 	.word	0x40010400

08007ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4b2d      	ldr	r3, [pc, #180]	; (8007f80 <TIM_OC3_SetConfig+0xe0>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <TIM_OC3_SetConfig+0xe4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC3_SetConfig+0x66>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a21      	ldr	r2, [pc, #132]	; (8007f88 <TIM_OC3_SetConfig+0xe8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10d      	bne.n	8007f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a17      	ldr	r2, [pc, #92]	; (8007f84 <TIM_OC3_SetConfig+0xe4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <TIM_OC3_SetConfig+0x92>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <TIM_OC3_SetConfig+0xe8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d113      	bne.n	8007f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	fffeff8f 	.word	0xfffeff8f
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400

08007f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4b1e      	ldr	r3, [pc, #120]	; (8008030 <TIM_OC4_SetConfig+0xa4>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	031b      	lsls	r3, r3, #12
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <TIM_OC4_SetConfig+0xa8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC4_SetConfig+0x68>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a12      	ldr	r2, [pc, #72]	; (8008038 <TIM_OC4_SetConfig+0xac>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d109      	bne.n	8008008 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	019b      	lsls	r3, r3, #6
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	feff8fff 	.word	0xfeff8fff
 8008034:	40010000 	.word	0x40010000
 8008038:	40010400 	.word	0x40010400

0800803c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <TIM_OC5_SetConfig+0x98>)
 8008068:	4013      	ands	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800807c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a12      	ldr	r2, [pc, #72]	; (80080d8 <TIM_OC5_SetConfig+0x9c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <TIM_OC5_SetConfig+0x5e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a11      	ldr	r2, [pc, #68]	; (80080dc <TIM_OC5_SetConfig+0xa0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d109      	bne.n	80080ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	621a      	str	r2, [r3, #32]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	fffeff8f 	.word	0xfffeff8f
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40010400 	.word	0x40010400

080080e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4b1c      	ldr	r3, [pc, #112]	; (800817c <TIM_OC6_SetConfig+0x9c>)
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	051b      	lsls	r3, r3, #20
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a13      	ldr	r2, [pc, #76]	; (8008180 <TIM_OC6_SetConfig+0xa0>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_OC6_SetConfig+0x60>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a12      	ldr	r2, [pc, #72]	; (8008184 <TIM_OC6_SetConfig+0xa4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d109      	bne.n	8008154 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	029b      	lsls	r3, r3, #10
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	feff8fff 	.word	0xfeff8fff
 8008180:	40010000 	.word	0x40010000
 8008184:	40010400 	.word	0x40010400

08008188 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4b3e      	ldr	r3, [pc, #248]	; (80082ac <TIM_SlaveTimer_SetConfig+0x124>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b70      	cmp	r3, #112	; 0x70
 80081d0:	d01a      	beq.n	8008208 <TIM_SlaveTimer_SetConfig+0x80>
 80081d2:	2b70      	cmp	r3, #112	; 0x70
 80081d4:	d860      	bhi.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
 80081d6:	2b60      	cmp	r3, #96	; 0x60
 80081d8:	d054      	beq.n	8008284 <TIM_SlaveTimer_SetConfig+0xfc>
 80081da:	2b60      	cmp	r3, #96	; 0x60
 80081dc:	d85c      	bhi.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
 80081de:	2b50      	cmp	r3, #80	; 0x50
 80081e0:	d046      	beq.n	8008270 <TIM_SlaveTimer_SetConfig+0xe8>
 80081e2:	2b50      	cmp	r3, #80	; 0x50
 80081e4:	d858      	bhi.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d019      	beq.n	800821e <TIM_SlaveTimer_SetConfig+0x96>
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d854      	bhi.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
 80081ee:	2b30      	cmp	r3, #48	; 0x30
 80081f0:	d055      	beq.n	800829e <TIM_SlaveTimer_SetConfig+0x116>
 80081f2:	2b30      	cmp	r3, #48	; 0x30
 80081f4:	d850      	bhi.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d051      	beq.n	800829e <TIM_SlaveTimer_SetConfig+0x116>
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d84c      	bhi.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d04d      	beq.n	800829e <TIM_SlaveTimer_SetConfig+0x116>
 8008202:	2b10      	cmp	r3, #16
 8008204:	d04b      	beq.n	800829e <TIM_SlaveTimer_SetConfig+0x116>
 8008206:	e047      	b.n	8008298 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68d9      	ldr	r1, [r3, #12]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f000 f8c4 	bl	80083a4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800821c:	e040      	b.n	80082a0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b05      	cmp	r3, #5
 8008224:	d101      	bne.n	800822a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e03b      	b.n	80082a2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6a1a      	ldr	r2, [r3, #32]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008250:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	4313      	orrs	r3, r2
 800825c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	621a      	str	r2, [r3, #32]
      break;
 800826e:	e017      	b.n	80082a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6899      	ldr	r1, [r3, #8]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	461a      	mov	r2, r3
 800827e:	f000 f817 	bl	80082b0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008282:	e00d      	b.n	80082a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6899      	ldr	r1, [r3, #8]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	461a      	mov	r2, r3
 8008292:	f000 f83c 	bl	800830e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008296:	e003      	b.n	80082a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
      break;
 800829c:	e000      	b.n	80082a0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800829e:	bf00      	nop
  }

  return status;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	fffefff8 	.word	0xfffefff8

080082b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f023 0201 	bic.w	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f023 030a 	bic.w	r3, r3, #10
 80082ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	f023 0210 	bic.w	r2, r3, #16
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	031b      	lsls	r3, r3, #12
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800834a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	011b      	lsls	r3, r3, #4
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	621a      	str	r2, [r3, #32]
}
 8008362:	bf00      	nop
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	f043 0307 	orr.w	r3, r3, #7
 8008390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	609a      	str	r2, [r3, #8]
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	021a      	lsls	r2, r3, #8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083f8:	2302      	movs	r3, #2
 80083fa:	e06d      	b.n	80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a30      	ldr	r2, [pc, #192]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2f      	ldr	r2, [pc, #188]	; (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d108      	bne.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008436:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008448:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a20      	ldr	r2, [pc, #128]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d022      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846e:	d01d      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d018      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a1c      	ldr	r2, [pc, #112]	; (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d013      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1a      	ldr	r2, [pc, #104]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00e      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a16      	ldr	r2, [pc, #88]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d004      	beq.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a15      	ldr	r2, [pc, #84]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d10c      	bne.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40000400 	.word	0x40000400
 80084f0:	40000800 	.word	0x40000800
 80084f4:	40000c00 	.word	0x40000c00
 80084f8:	40014000 	.word	0x40014000
 80084fc:	40001800 	.word	0x40001800

08008500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e040      	b.n	80085d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fc fb72 	bl	8004c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2224      	movs	r2, #36	; 0x24
 8008568:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0201 	bic.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fbf8 	bl	8008d70 <UART_SetConfig>
 8008580:	4603      	mov	r3, r0
 8008582:	2b01      	cmp	r3, #1
 8008584:	d101      	bne.n	800858a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e022      	b.n	80085d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fe50 	bl	8009238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fed7 	bl	800937c <UART_CheckIdleState>
 80085ce:	4603      	mov	r3, r0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	; 0x28
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	f040 8081 	bne.w	80086f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_UART_Transmit+0x26>
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e079      	b.n	80086f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_UART_Transmit+0x38>
 800860c:	2302      	movs	r3, #2
 800860e:	e072      	b.n	80086f6 <HAL_UART_Transmit+0x11e>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2221      	movs	r2, #33	; 0x21
 8008624:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008626:	f7fc fbc1 	bl	8004dac <HAL_GetTick>
 800862a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	88fa      	ldrh	r2, [r7, #6]
 8008630:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	88fa      	ldrh	r2, [r7, #6]
 8008638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008644:	d108      	bne.n	8008658 <HAL_UART_Transmit+0x80>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d104      	bne.n	8008658 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	61bb      	str	r3, [r7, #24]
 8008656:	e003      	b.n	8008660 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008668:	e02c      	b.n	80086c4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2200      	movs	r2, #0
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 feb4 	bl	80093e2 <UART_WaitOnFlagUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e038      	b.n	80086f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	3302      	adds	r3, #2
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e007      	b.n	80086b2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3301      	adds	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1cc      	bne.n	800866a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2200      	movs	r2, #0
 80086d8:	2140      	movs	r1, #64	; 0x40
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 fe81 	bl	80093e2 <UART_WaitOnFlagUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e005      	b.n	80086f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	e000      	b.n	80086f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80086f4:	2302      	movs	r3, #2
  }
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b08a      	sub	sp, #40	; 0x28
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	4613      	mov	r3, r2
 800870a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008710:	2b20      	cmp	r3, #32
 8008712:	d13d      	bne.n	8008790 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_UART_Receive_IT+0x22>
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e036      	b.n	8008792 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_UART_Receive_IT+0x34>
 800872e:	2302      	movs	r3, #2
 8008730:	e02f      	b.n	8008792 <HAL_UART_Receive_IT+0x94>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d018      	beq.n	8008780 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	613b      	str	r3, [r7, #16]
   return(result);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	69f9      	ldr	r1, [r7, #28]
 8008772:	6a3a      	ldr	r2, [r7, #32]
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	61bb      	str	r3, [r7, #24]
   return(result);
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e6      	bne.n	800874e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	461a      	mov	r2, r3
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fef0 	bl	800956c <UART_Start_Receive_IT>
 800878c:	4603      	mov	r3, r0
 800878e:	e000      	b.n	8008792 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008790:	2302      	movs	r3, #2
  }
}
 8008792:	4618      	mov	r0, r3
 8008794:	3728      	adds	r7, #40	; 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b0ba      	sub	sp, #232	; 0xe8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80087c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80087ca:	4013      	ands	r3, r2
 80087cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80087d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d115      	bne.n	8008804 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00f      	beq.n	8008804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 828f 	beq.w	8008d18 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
      }
      return;
 8008802:	e289      	b.n	8008d18 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8117 	beq.w	8008a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800880e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800881a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800881e:	4b85      	ldr	r3, [pc, #532]	; (8008a34 <HAL_UART_IRQHandler+0x298>)
 8008820:	4013      	ands	r3, r2
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 810a 	beq.w	8008a3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d011      	beq.n	8008858 <HAL_UART_IRQHandler+0xbc>
 8008834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2201      	movs	r2, #1
 8008846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800884e:	f043 0201 	orr.w	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d011      	beq.n	8008888 <HAL_UART_IRQHandler+0xec>
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2202      	movs	r2, #2
 8008876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800887e:	f043 0204 	orr.w	r2, r3, #4
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d011      	beq.n	80088b8 <HAL_UART_IRQHandler+0x11c>
 8008894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2204      	movs	r2, #4
 80088a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ae:	f043 0202 	orr.w	r2, r3, #2
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d017      	beq.n	80088f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d105      	bne.n	80088dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2208      	movs	r2, #8
 80088e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ea:	f043 0208 	orr.w	r2, r3, #8
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d012      	beq.n	8008926 <HAL_UART_IRQHandler+0x18a>
 8008900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00c      	beq.n	8008926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800891c:	f043 0220 	orr.w	r2, r3, #32
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 81f5 	beq.w	8008d1c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00d      	beq.n	800895a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800893e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d005      	beq.n	800897e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04f      	beq.n	8008a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 febe 	bl	8009700 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	d141      	bne.n	8008a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3308      	adds	r3, #8
 80089ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d9      	bne.n	8008992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d013      	beq.n	8008a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ea:	4a13      	ldr	r2, [pc, #76]	; (8008a38 <HAL_UART_IRQHandler+0x29c>)
 80089ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fc fb38 	bl	8005068 <HAL_DMA_Abort_IT>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d017      	beq.n	8008a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	e00f      	b.n	8008a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f998 	bl	8008d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	e00b      	b.n	8008a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f994 	bl	8008d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	e007      	b.n	8008a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f990 	bl	8008d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008a2c:	e176      	b.n	8008d1c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2e:	bf00      	nop
    return;
 8008a30:	e174      	b.n	8008d1c <HAL_UART_IRQHandler+0x580>
 8008a32:	bf00      	nop
 8008a34:	04000120 	.word	0x04000120
 8008a38:	080097c7 	.word	0x080097c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	f040 8144 	bne.w	8008cce <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4a:	f003 0310 	and.w	r3, r3, #16
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 813d 	beq.w	8008cce <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8136 	beq.w	8008cce <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2210      	movs	r2, #16
 8008a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	f040 80b2 	bne.w	8008bde <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8148 	beq.w	8008d20 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	f080 8140 	bcs.w	8008d20 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab4:	f000 8085 	beq.w	8008bc2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ae6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1da      	bne.n	8008ab8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e1      	bne.n	8008b02 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e3      	bne.n	8008b3e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b92:	f023 0310 	bic.w	r3, r3, #16
 8008b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ba4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ba6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e4      	bne.n	8008b82 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fc f9e3 	bl	8004f88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8be 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bdc:	e0a0      	b.n	8008d20 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 8092 	beq.w	8008d24 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 808d 	beq.w	8008d24 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e4      	bne.n	8008c0a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3308      	adds	r3, #8
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	f023 0301 	bic.w	r3, r3, #1
 8008c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c64:	633a      	str	r2, [r7, #48]	; 0x30
 8008c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e3      	bne.n	8008c40 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cac:	61fb      	str	r3, [r7, #28]
 8008cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f846 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ccc:	e02a      	b.n	8008d24 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00e      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01c      	beq.n	8008d28 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
    }
    return;
 8008cf6:	e017      	b.n	8008d28 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d012      	beq.n	8008d2a <HAL_UART_IRQHandler+0x58e>
 8008d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fd6e 	bl	80097f2 <UART_EndTransmit_IT>
    return;
 8008d16:	e008      	b.n	8008d2a <HAL_UART_IRQHandler+0x58e>
      return;
 8008d18:	bf00      	nop
 8008d1a:	e006      	b.n	8008d2a <HAL_UART_IRQHandler+0x58e>
    return;
 8008d1c:	bf00      	nop
 8008d1e:	e004      	b.n	8008d2a <HAL_UART_IRQHandler+0x58e>
      return;
 8008d20:	bf00      	nop
 8008d22:	e002      	b.n	8008d2a <HAL_UART_IRQHandler+0x58e>
      return;
 8008d24:	bf00      	nop
 8008d26:	e000      	b.n	8008d2a <HAL_UART_IRQHandler+0x58e>
    return;
 8008d28:	bf00      	nop
  }

}
 8008d2a:	37e8      	adds	r7, #232	; 0xe8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4ba6      	ldr	r3, [pc, #664]	; (8009034 <UART_SetConfig+0x2c4>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a94      	ldr	r2, [pc, #592]	; (8009038 <UART_SetConfig+0x2c8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d120      	bne.n	8008e2e <UART_SetConfig+0xbe>
 8008dec:	4b93      	ldr	r3, [pc, #588]	; (800903c <UART_SetConfig+0x2cc>)
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d816      	bhi.n	8008e28 <UART_SetConfig+0xb8>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <UART_SetConfig+0x90>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e1d 	.word	0x08008e1d
 8008e08:	08008e17 	.word	0x08008e17
 8008e0c:	08008e23 	.word	0x08008e23
 8008e10:	2301      	movs	r3, #1
 8008e12:	77fb      	strb	r3, [r7, #31]
 8008e14:	e150      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e16:	2302      	movs	r3, #2
 8008e18:	77fb      	strb	r3, [r7, #31]
 8008e1a:	e14d      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	77fb      	strb	r3, [r7, #31]
 8008e20:	e14a      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e22:	2308      	movs	r3, #8
 8008e24:	77fb      	strb	r3, [r7, #31]
 8008e26:	e147      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e28:	2310      	movs	r3, #16
 8008e2a:	77fb      	strb	r3, [r7, #31]
 8008e2c:	e144      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a83      	ldr	r2, [pc, #524]	; (8009040 <UART_SetConfig+0x2d0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d132      	bne.n	8008e9e <UART_SetConfig+0x12e>
 8008e38:	4b80      	ldr	r3, [pc, #512]	; (800903c <UART_SetConfig+0x2cc>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3e:	f003 030c 	and.w	r3, r3, #12
 8008e42:	2b0c      	cmp	r3, #12
 8008e44:	d828      	bhi.n	8008e98 <UART_SetConfig+0x128>
 8008e46:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <UART_SetConfig+0xdc>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008e81 	.word	0x08008e81
 8008e50:	08008e99 	.word	0x08008e99
 8008e54:	08008e99 	.word	0x08008e99
 8008e58:	08008e99 	.word	0x08008e99
 8008e5c:	08008e8d 	.word	0x08008e8d
 8008e60:	08008e99 	.word	0x08008e99
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008e99 	.word	0x08008e99
 8008e6c:	08008e87 	.word	0x08008e87
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008e93 	.word	0x08008e93
 8008e80:	2300      	movs	r3, #0
 8008e82:	77fb      	strb	r3, [r7, #31]
 8008e84:	e118      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e86:	2302      	movs	r3, #2
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e115      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	77fb      	strb	r3, [r7, #31]
 8008e90:	e112      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e92:	2308      	movs	r3, #8
 8008e94:	77fb      	strb	r3, [r7, #31]
 8008e96:	e10f      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	77fb      	strb	r3, [r7, #31]
 8008e9c:	e10c      	b.n	80090b8 <UART_SetConfig+0x348>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a68      	ldr	r2, [pc, #416]	; (8009044 <UART_SetConfig+0x2d4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d120      	bne.n	8008eea <UART_SetConfig+0x17a>
 8008ea8:	4b64      	ldr	r3, [pc, #400]	; (800903c <UART_SetConfig+0x2cc>)
 8008eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008eb2:	2b30      	cmp	r3, #48	; 0x30
 8008eb4:	d013      	beq.n	8008ede <UART_SetConfig+0x16e>
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	d814      	bhi.n	8008ee4 <UART_SetConfig+0x174>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d009      	beq.n	8008ed2 <UART_SetConfig+0x162>
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d810      	bhi.n	8008ee4 <UART_SetConfig+0x174>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <UART_SetConfig+0x15c>
 8008ec6:	2b10      	cmp	r3, #16
 8008ec8:	d006      	beq.n	8008ed8 <UART_SetConfig+0x168>
 8008eca:	e00b      	b.n	8008ee4 <UART_SetConfig+0x174>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	77fb      	strb	r3, [r7, #31]
 8008ed0:	e0f2      	b.n	80090b8 <UART_SetConfig+0x348>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e0ef      	b.n	80090b8 <UART_SetConfig+0x348>
 8008ed8:	2304      	movs	r3, #4
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e0ec      	b.n	80090b8 <UART_SetConfig+0x348>
 8008ede:	2308      	movs	r3, #8
 8008ee0:	77fb      	strb	r3, [r7, #31]
 8008ee2:	e0e9      	b.n	80090b8 <UART_SetConfig+0x348>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	77fb      	strb	r3, [r7, #31]
 8008ee8:	e0e6      	b.n	80090b8 <UART_SetConfig+0x348>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a56      	ldr	r2, [pc, #344]	; (8009048 <UART_SetConfig+0x2d8>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d120      	bne.n	8008f36 <UART_SetConfig+0x1c6>
 8008ef4:	4b51      	ldr	r3, [pc, #324]	; (800903c <UART_SetConfig+0x2cc>)
 8008ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008efe:	2bc0      	cmp	r3, #192	; 0xc0
 8008f00:	d013      	beq.n	8008f2a <UART_SetConfig+0x1ba>
 8008f02:	2bc0      	cmp	r3, #192	; 0xc0
 8008f04:	d814      	bhi.n	8008f30 <UART_SetConfig+0x1c0>
 8008f06:	2b80      	cmp	r3, #128	; 0x80
 8008f08:	d009      	beq.n	8008f1e <UART_SetConfig+0x1ae>
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	d810      	bhi.n	8008f30 <UART_SetConfig+0x1c0>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <UART_SetConfig+0x1a8>
 8008f12:	2b40      	cmp	r3, #64	; 0x40
 8008f14:	d006      	beq.n	8008f24 <UART_SetConfig+0x1b4>
 8008f16:	e00b      	b.n	8008f30 <UART_SetConfig+0x1c0>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	77fb      	strb	r3, [r7, #31]
 8008f1c:	e0cc      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	77fb      	strb	r3, [r7, #31]
 8008f22:	e0c9      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f24:	2304      	movs	r3, #4
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e0c6      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	77fb      	strb	r3, [r7, #31]
 8008f2e:	e0c3      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f30:	2310      	movs	r3, #16
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e0c0      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a44      	ldr	r2, [pc, #272]	; (800904c <UART_SetConfig+0x2dc>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d125      	bne.n	8008f8c <UART_SetConfig+0x21c>
 8008f40:	4b3e      	ldr	r3, [pc, #248]	; (800903c <UART_SetConfig+0x2cc>)
 8008f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f4e:	d017      	beq.n	8008f80 <UART_SetConfig+0x210>
 8008f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f54:	d817      	bhi.n	8008f86 <UART_SetConfig+0x216>
 8008f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f5a:	d00b      	beq.n	8008f74 <UART_SetConfig+0x204>
 8008f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f60:	d811      	bhi.n	8008f86 <UART_SetConfig+0x216>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <UART_SetConfig+0x1fe>
 8008f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6a:	d006      	beq.n	8008f7a <UART_SetConfig+0x20a>
 8008f6c:	e00b      	b.n	8008f86 <UART_SetConfig+0x216>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e0a1      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f74:	2302      	movs	r3, #2
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e09e      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	77fb      	strb	r3, [r7, #31]
 8008f7e:	e09b      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f80:	2308      	movs	r3, #8
 8008f82:	77fb      	strb	r3, [r7, #31]
 8008f84:	e098      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f86:	2310      	movs	r3, #16
 8008f88:	77fb      	strb	r3, [r7, #31]
 8008f8a:	e095      	b.n	80090b8 <UART_SetConfig+0x348>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a2f      	ldr	r2, [pc, #188]	; (8009050 <UART_SetConfig+0x2e0>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d125      	bne.n	8008fe2 <UART_SetConfig+0x272>
 8008f96:	4b29      	ldr	r3, [pc, #164]	; (800903c <UART_SetConfig+0x2cc>)
 8008f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fa4:	d017      	beq.n	8008fd6 <UART_SetConfig+0x266>
 8008fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008faa:	d817      	bhi.n	8008fdc <UART_SetConfig+0x26c>
 8008fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fb0:	d00b      	beq.n	8008fca <UART_SetConfig+0x25a>
 8008fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fb6:	d811      	bhi.n	8008fdc <UART_SetConfig+0x26c>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <UART_SetConfig+0x254>
 8008fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fc0:	d006      	beq.n	8008fd0 <UART_SetConfig+0x260>
 8008fc2:	e00b      	b.n	8008fdc <UART_SetConfig+0x26c>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	e076      	b.n	80090b8 <UART_SetConfig+0x348>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	77fb      	strb	r3, [r7, #31]
 8008fce:	e073      	b.n	80090b8 <UART_SetConfig+0x348>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	77fb      	strb	r3, [r7, #31]
 8008fd4:	e070      	b.n	80090b8 <UART_SetConfig+0x348>
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	77fb      	strb	r3, [r7, #31]
 8008fda:	e06d      	b.n	80090b8 <UART_SetConfig+0x348>
 8008fdc:	2310      	movs	r3, #16
 8008fde:	77fb      	strb	r3, [r7, #31]
 8008fe0:	e06a      	b.n	80090b8 <UART_SetConfig+0x348>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a1b      	ldr	r2, [pc, #108]	; (8009054 <UART_SetConfig+0x2e4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d138      	bne.n	800905e <UART_SetConfig+0x2ee>
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <UART_SetConfig+0x2cc>)
 8008fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008ff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ffa:	d017      	beq.n	800902c <UART_SetConfig+0x2bc>
 8008ffc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009000:	d82a      	bhi.n	8009058 <UART_SetConfig+0x2e8>
 8009002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009006:	d00b      	beq.n	8009020 <UART_SetConfig+0x2b0>
 8009008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900c:	d824      	bhi.n	8009058 <UART_SetConfig+0x2e8>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <UART_SetConfig+0x2aa>
 8009012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009016:	d006      	beq.n	8009026 <UART_SetConfig+0x2b6>
 8009018:	e01e      	b.n	8009058 <UART_SetConfig+0x2e8>
 800901a:	2300      	movs	r3, #0
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e04b      	b.n	80090b8 <UART_SetConfig+0x348>
 8009020:	2302      	movs	r3, #2
 8009022:	77fb      	strb	r3, [r7, #31]
 8009024:	e048      	b.n	80090b8 <UART_SetConfig+0x348>
 8009026:	2304      	movs	r3, #4
 8009028:	77fb      	strb	r3, [r7, #31]
 800902a:	e045      	b.n	80090b8 <UART_SetConfig+0x348>
 800902c:	2308      	movs	r3, #8
 800902e:	77fb      	strb	r3, [r7, #31]
 8009030:	e042      	b.n	80090b8 <UART_SetConfig+0x348>
 8009032:	bf00      	nop
 8009034:	efff69f3 	.word	0xefff69f3
 8009038:	40011000 	.word	0x40011000
 800903c:	40023800 	.word	0x40023800
 8009040:	40004400 	.word	0x40004400
 8009044:	40004800 	.word	0x40004800
 8009048:	40004c00 	.word	0x40004c00
 800904c:	40005000 	.word	0x40005000
 8009050:	40011400 	.word	0x40011400
 8009054:	40007800 	.word	0x40007800
 8009058:	2310      	movs	r3, #16
 800905a:	77fb      	strb	r3, [r7, #31]
 800905c:	e02c      	b.n	80090b8 <UART_SetConfig+0x348>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a72      	ldr	r2, [pc, #456]	; (800922c <UART_SetConfig+0x4bc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d125      	bne.n	80090b4 <UART_SetConfig+0x344>
 8009068:	4b71      	ldr	r3, [pc, #452]	; (8009230 <UART_SetConfig+0x4c0>)
 800906a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800906e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009072:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009076:	d017      	beq.n	80090a8 <UART_SetConfig+0x338>
 8009078:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800907c:	d817      	bhi.n	80090ae <UART_SetConfig+0x33e>
 800907e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009082:	d00b      	beq.n	800909c <UART_SetConfig+0x32c>
 8009084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009088:	d811      	bhi.n	80090ae <UART_SetConfig+0x33e>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <UART_SetConfig+0x326>
 800908e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009092:	d006      	beq.n	80090a2 <UART_SetConfig+0x332>
 8009094:	e00b      	b.n	80090ae <UART_SetConfig+0x33e>
 8009096:	2300      	movs	r3, #0
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e00d      	b.n	80090b8 <UART_SetConfig+0x348>
 800909c:	2302      	movs	r3, #2
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e00a      	b.n	80090b8 <UART_SetConfig+0x348>
 80090a2:	2304      	movs	r3, #4
 80090a4:	77fb      	strb	r3, [r7, #31]
 80090a6:	e007      	b.n	80090b8 <UART_SetConfig+0x348>
 80090a8:	2308      	movs	r3, #8
 80090aa:	77fb      	strb	r3, [r7, #31]
 80090ac:	e004      	b.n	80090b8 <UART_SetConfig+0x348>
 80090ae:	2310      	movs	r3, #16
 80090b0:	77fb      	strb	r3, [r7, #31]
 80090b2:	e001      	b.n	80090b8 <UART_SetConfig+0x348>
 80090b4:	2310      	movs	r3, #16
 80090b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c0:	d15b      	bne.n	800917a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80090c2:	7ffb      	ldrb	r3, [r7, #31]
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d828      	bhi.n	800911a <UART_SetConfig+0x3aa>
 80090c8:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <UART_SetConfig+0x360>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	080090f5 	.word	0x080090f5
 80090d4:	080090fd 	.word	0x080090fd
 80090d8:	08009105 	.word	0x08009105
 80090dc:	0800911b 	.word	0x0800911b
 80090e0:	0800910b 	.word	0x0800910b
 80090e4:	0800911b 	.word	0x0800911b
 80090e8:	0800911b 	.word	0x0800911b
 80090ec:	0800911b 	.word	0x0800911b
 80090f0:	08009113 	.word	0x08009113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090f4:	f7fd fc68 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 80090f8:	61b8      	str	r0, [r7, #24]
        break;
 80090fa:	e013      	b.n	8009124 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090fc:	f7fd fc78 	bl	80069f0 <HAL_RCC_GetPCLK2Freq>
 8009100:	61b8      	str	r0, [r7, #24]
        break;
 8009102:	e00f      	b.n	8009124 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009104:	4b4b      	ldr	r3, [pc, #300]	; (8009234 <UART_SetConfig+0x4c4>)
 8009106:	61bb      	str	r3, [r7, #24]
        break;
 8009108:	e00c      	b.n	8009124 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800910a:	f7fd fb4b 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 800910e:	61b8      	str	r0, [r7, #24]
        break;
 8009110:	e008      	b.n	8009124 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009116:	61bb      	str	r3, [r7, #24]
        break;
 8009118:	e004      	b.n	8009124 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	77bb      	strb	r3, [r7, #30]
        break;
 8009122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d074      	beq.n	8009214 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	005a      	lsls	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	fbb2 f3f3 	udiv	r3, r2, r3
 800913e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b0f      	cmp	r3, #15
 8009144:	d916      	bls.n	8009174 <UART_SetConfig+0x404>
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800914c:	d212      	bcs.n	8009174 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	b29b      	uxth	r3, r3
 8009152:	f023 030f 	bic.w	r3, r3, #15
 8009156:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	b29b      	uxth	r3, r3
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	b29a      	uxth	r2, r3
 8009164:	89fb      	ldrh	r3, [r7, #14]
 8009166:	4313      	orrs	r3, r2
 8009168:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	89fa      	ldrh	r2, [r7, #14]
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e04f      	b.n	8009214 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	77bb      	strb	r3, [r7, #30]
 8009178:	e04c      	b.n	8009214 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800917a:	7ffb      	ldrb	r3, [r7, #31]
 800917c:	2b08      	cmp	r3, #8
 800917e:	d828      	bhi.n	80091d2 <UART_SetConfig+0x462>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <UART_SetConfig+0x418>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091b5 	.word	0x080091b5
 8009190:	080091bd 	.word	0x080091bd
 8009194:	080091d3 	.word	0x080091d3
 8009198:	080091c3 	.word	0x080091c3
 800919c:	080091d3 	.word	0x080091d3
 80091a0:	080091d3 	.word	0x080091d3
 80091a4:	080091d3 	.word	0x080091d3
 80091a8:	080091cb 	.word	0x080091cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091ac:	f7fd fc0c 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 80091b0:	61b8      	str	r0, [r7, #24]
        break;
 80091b2:	e013      	b.n	80091dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091b4:	f7fd fc1c 	bl	80069f0 <HAL_RCC_GetPCLK2Freq>
 80091b8:	61b8      	str	r0, [r7, #24]
        break;
 80091ba:	e00f      	b.n	80091dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091bc:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <UART_SetConfig+0x4c4>)
 80091be:	61bb      	str	r3, [r7, #24]
        break;
 80091c0:	e00c      	b.n	80091dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091c2:	f7fd faef 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 80091c6:	61b8      	str	r0, [r7, #24]
        break;
 80091c8:	e008      	b.n	80091dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ce:	61bb      	str	r3, [r7, #24]
        break;
 80091d0:	e004      	b.n	80091dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	77bb      	strb	r3, [r7, #30]
        break;
 80091da:	bf00      	nop
    }

    if (pclk != 0U)
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	085a      	lsrs	r2, r3, #1
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	441a      	add	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b0f      	cmp	r3, #15
 80091fa:	d909      	bls.n	8009210 <UART_SetConfig+0x4a0>
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009202:	d205      	bcs.n	8009210 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60da      	str	r2, [r3, #12]
 800920e:	e001      	b.n	8009214 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009220:	7fbb      	ldrb	r3, [r7, #30]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40007c00 	.word	0x40007c00
 8009230:	40023800 	.word	0x40023800
 8009234:	00f42400 	.word	0x00f42400

08009238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	f003 0308 	and.w	r3, r3, #8
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01a      	beq.n	800934e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009336:	d10a      	bne.n	800934e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	605a      	str	r2, [r3, #4]
  }
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af02      	add	r7, sp, #8
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800938c:	f7fb fd0e 	bl	8004dac <HAL_GetTick>
 8009390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b08      	cmp	r3, #8
 800939e:	d10e      	bne.n	80093be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f817 	bl	80093e2 <UART_WaitOnFlagUntilTimeout>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e00d      	b.n	80093da <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b09c      	sub	sp, #112	; 0x70
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f2:	e0a5      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	f000 80a1 	beq.w	8009540 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fe:	f7fb fcd5 	bl	8004dac <HAL_GetTick>
 8009402:	4602      	mov	r2, r0
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800940a:	429a      	cmp	r2, r3
 800940c:	d302      	bcc.n	8009414 <UART_WaitOnFlagUntilTimeout+0x32>
 800940e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009410:	2b00      	cmp	r3, #0
 8009412:	d13e      	bne.n	8009492 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009428:	667b      	str	r3, [r7, #100]	; 0x64
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e6      	bne.n	8009414 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	663b      	str	r3, [r7, #96]	; 0x60
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3308      	adds	r3, #8
 8009464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009466:	64ba      	str	r2, [r7, #72]	; 0x48
 8009468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800946c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e5      	bne.n	8009446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2220      	movs	r2, #32
 8009484:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e067      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d04f      	beq.n	8009540 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ae:	d147      	bne.n	8009540 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
 80094da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e6      	bne.n	80094ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3308      	adds	r3, #8
 80094f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	613b      	str	r3, [r7, #16]
   return(result);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	66bb      	str	r3, [r7, #104]	; 0x68
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3308      	adds	r3, #8
 800950a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800950c:	623a      	str	r2, [r7, #32]
 800950e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	69f9      	ldr	r1, [r7, #28]
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	61bb      	str	r3, [r7, #24]
   return(result);
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e5      	bne.n	80094ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2220      	movs	r2, #32
 8009530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e010      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69da      	ldr	r2, [r3, #28]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4013      	ands	r3, r2
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	429a      	cmp	r2, r3
 800955c:	f43f af4a 	beq.w	80093f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3770      	adds	r7, #112	; 0x70
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800956c:	b480      	push	{r7}
 800956e:	b097      	sub	sp, #92	; 0x5c
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	88fa      	ldrh	r2, [r7, #6]
 8009584:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	88fa      	ldrh	r2, [r7, #6]
 800958c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959e:	d10e      	bne.n	80095be <UART_Start_Receive_IT+0x52>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d105      	bne.n	80095b4 <UART_Start_Receive_IT+0x48>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80095ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80095b2:	e02d      	b.n	8009610 <UART_Start_Receive_IT+0xa4>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	22ff      	movs	r2, #255	; 0xff
 80095b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80095bc:	e028      	b.n	8009610 <UART_Start_Receive_IT+0xa4>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10d      	bne.n	80095e2 <UART_Start_Receive_IT+0x76>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <UART_Start_Receive_IT+0x6c>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	22ff      	movs	r2, #255	; 0xff
 80095d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80095d6:	e01b      	b.n	8009610 <UART_Start_Receive_IT+0xa4>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	227f      	movs	r2, #127	; 0x7f
 80095dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80095e0:	e016      	b.n	8009610 <UART_Start_Receive_IT+0xa4>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ea:	d10d      	bne.n	8009608 <UART_Start_Receive_IT+0x9c>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <UART_Start_Receive_IT+0x92>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	227f      	movs	r2, #127	; 0x7f
 80095f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80095fc:	e008      	b.n	8009610 <UART_Start_Receive_IT+0xa4>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	223f      	movs	r2, #63	; 0x3f
 8009602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009606:	e003      	b.n	8009610 <UART_Start_Receive_IT+0xa4>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2222      	movs	r2, #34	; 0x22
 800961c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	657b      	str	r3, [r7, #84]	; 0x54
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800963e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009640:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800964c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e5      	bne.n	800961e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965a:	d107      	bne.n	800966c <UART_Start_Receive_IT+0x100>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d103      	bne.n	800966c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a24      	ldr	r2, [pc, #144]	; (80096f8 <UART_Start_Receive_IT+0x18c>)
 8009668:	665a      	str	r2, [r3, #100]	; 0x64
 800966a:	e002      	b.n	8009672 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a23      	ldr	r2, [pc, #140]	; (80096fc <UART_Start_Receive_IT+0x190>)
 8009670:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d019      	beq.n	80096b6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a0:	637b      	str	r3, [r7, #52]	; 0x34
 80096a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e6      	bne.n	8009682 <UART_Start_Receive_IT+0x116>
 80096b4:	e018      	b.n	80096e8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	613b      	str	r3, [r7, #16]
   return(result);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f043 0320 	orr.w	r3, r3, #32
 80096ca:	653b      	str	r3, [r7, #80]	; 0x50
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d4:	623b      	str	r3, [r7, #32]
 80096d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	69f9      	ldr	r1, [r7, #28]
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e6      	bne.n	80096b6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	375c      	adds	r7, #92	; 0x5c
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	080099a3 	.word	0x080099a3
 80096fc:	08009847 	.word	0x08009847

08009700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b095      	sub	sp, #84	; 0x54
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800971c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009726:	643b      	str	r3, [r7, #64]	; 0x40
 8009728:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800972c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e6      	bne.n	8009708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	61fb      	str	r3, [r7, #28]
   return(result);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	64bb      	str	r3, [r7, #72]	; 0x48
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800975a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e5      	bne.n	800973a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009772:	2b01      	cmp	r3, #1
 8009774:	d118      	bne.n	80097a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	e853 3f00 	ldrex	r3, [r3]
 8009782:	60bb      	str	r3, [r7, #8]
   return(result);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f023 0310 	bic.w	r3, r3, #16
 800978a:	647b      	str	r3, [r7, #68]	; 0x44
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009794:	61bb      	str	r3, [r7, #24]
 8009796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6979      	ldr	r1, [r7, #20]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	613b      	str	r3, [r7, #16]
   return(result);
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e6      	bne.n	8009776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2220      	movs	r2, #32
 80097ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80097ba:	bf00      	nop
 80097bc:	3754      	adds	r7, #84	; 0x54
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7ff faad 	bl	8008d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b088      	sub	sp, #32
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	60bb      	str	r3, [r7, #8]
   return(result);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980e:	61fb      	str	r3, [r7, #28]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	61bb      	str	r3, [r7, #24]
 800981a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	613b      	str	r3, [r7, #16]
   return(result);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff fa79 	bl	8008d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800983e:	bf00      	nop
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b096      	sub	sp, #88	; 0x58
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009854:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800985c:	2b22      	cmp	r3, #34	; 0x22
 800985e:	f040 8094 	bne.w	800998a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800986c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009870:	b2d9      	uxtb	r1, r3
 8009872:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009876:	b2da      	uxtb	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987c:	400a      	ands	r2, r1
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d177      	bne.n	800999a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098be:	653b      	str	r3, [r7, #80]	; 0x50
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c8:	647b      	str	r3, [r7, #68]	; 0x44
 80098ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e6      	bne.n	80098aa <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3308      	adds	r3, #8
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	623b      	str	r3, [r7, #32]
   return(result);
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	f023 0301 	bic.w	r3, r3, #1
 80098f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098fc:	633a      	str	r2, [r7, #48]	; 0x30
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e5      	bne.n	80098dc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2220      	movs	r2, #32
 8009914:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009920:	2b01      	cmp	r3, #1
 8009922:	d12e      	bne.n	8009982 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	e853 3f00 	ldrex	r3, [r3]
 8009936:	60fb      	str	r3, [r7, #12]
   return(result);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0310 	bic.w	r3, r3, #16
 800993e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009948:	61fb      	str	r3, [r7, #28]
 800994a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994c:	69b9      	ldr	r1, [r7, #24]
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	e841 2300 	strex	r3, r2, [r1]
 8009954:	617b      	str	r3, [r7, #20]
   return(result);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e6      	bne.n	800992a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b10      	cmp	r3, #16
 8009968:	d103      	bne.n	8009972 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2210      	movs	r2, #16
 8009970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff f9ec 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009980:	e00b      	b.n	800999a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7f8 feb2 	bl	80026ec <HAL_UART_RxCpltCallback>
}
 8009988:	e007      	b.n	800999a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0208 	orr.w	r2, r2, #8
 8009998:	619a      	str	r2, [r3, #24]
}
 800999a:	bf00      	nop
 800999c:	3758      	adds	r7, #88	; 0x58
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b096      	sub	sp, #88	; 0x58
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b8:	2b22      	cmp	r3, #34	; 0x22
 80099ba:	f040 8094 	bne.w	8009ae6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80099ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80099d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099d6:	4013      	ands	r3, r2
 80099d8:	b29a      	uxth	r2, r3
 80099da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	1c9a      	adds	r2, r3, #2
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d177      	bne.n	8009af6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40
 8009a26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e6      	bne.n	8009a06 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3308      	adds	r3, #8
 8009a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e5      	bne.n	8009a38 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2220      	movs	r2, #32
 8009a70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d12e      	bne.n	8009ade <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f023 0310 	bic.w	r3, r3, #16
 8009a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6979      	ldr	r1, [r7, #20]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f003 0310 	and.w	r3, r3, #16
 8009ac2:	2b10      	cmp	r3, #16
 8009ac4:	d103      	bne.n	8009ace <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2210      	movs	r2, #16
 8009acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff f93e 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009adc:	e00b      	b.n	8009af6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7f8 fe04 	bl	80026ec <HAL_UART_RxCpltCallback>
}
 8009ae4:	e007      	b.n	8009af6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0208 	orr.w	r2, r2, #8
 8009af4:	619a      	str	r2, [r3, #24]
}
 8009af6:	bf00      	nop
 8009af8:	3758      	adds	r7, #88	; 0x58
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009afe:	b480      	push	{r7}
 8009b00:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009b02:	bf00      	nop
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b12:	f3ef 8305 	mrs	r3, IPSR
 8009b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10f      	bne.n	8009b3e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b22:	607b      	str	r3, [r7, #4]
  return(result);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <osKernelInitialize+0x3a>
 8009b36:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <osKernelInitialize+0x64>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d103      	bne.n	8009b46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009b3e:	f06f 0305 	mvn.w	r3, #5
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	e00c      	b.n	8009b60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b46:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <osKernelInitialize+0x64>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d105      	bne.n	8009b5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b4e:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <osKernelInitialize+0x64>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	e002      	b.n	8009b60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	20000798 	.word	0x20000798

08009b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b7a:	f3ef 8305 	mrs	r3, IPSR
 8009b7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10f      	bne.n	8009ba6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b86:	f3ef 8310 	mrs	r3, PRIMASK
 8009b8a:	607b      	str	r3, [r7, #4]
  return(result);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b92:	f3ef 8311 	mrs	r3, BASEPRI
 8009b96:	603b      	str	r3, [r7, #0]
  return(result);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d007      	beq.n	8009bae <osKernelStart+0x3a>
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <osKernelStart+0x68>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d103      	bne.n	8009bae <osKernelStart+0x3a>
    stat = osErrorISR;
 8009ba6:	f06f 0305 	mvn.w	r3, #5
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	e010      	b.n	8009bd0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009bae:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <osKernelStart+0x68>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d109      	bne.n	8009bca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009bb6:	f7ff ffa2 	bl	8009afe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009bba:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <osKernelStart+0x68>)
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009bc0:	f002 f9c2 	bl	800bf48 <vTaskStartScheduler>
      stat = osOK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	e002      	b.n	8009bd0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009bca:	f04f 33ff 	mov.w	r3, #4294967295
 8009bce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000798 	.word	0x20000798

08009be0 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
	...

08009bf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b090      	sub	sp, #64	; 0x40
 8009bf8:	af04      	add	r7, sp, #16
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c04:	f3ef 8305 	mrs	r3, IPSR
 8009c08:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f040 808f 	bne.w	8009d30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c12:	f3ef 8310 	mrs	r3, PRIMASK
 8009c16:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8009c22:	617b      	str	r3, [r7, #20]
  return(result);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <osThreadNew+0x3e>
 8009c2a:	4b44      	ldr	r3, [pc, #272]	; (8009d3c <osThreadNew+0x148>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d07e      	beq.n	8009d30 <osThreadNew+0x13c>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d07b      	beq.n	8009d30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009c38:	2380      	movs	r3, #128	; 0x80
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009c3c:	2318      	movs	r3, #24
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009c44:	f04f 33ff 	mov.w	r3, #4294967295
 8009c48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d045      	beq.n	8009cdc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <osThreadNew+0x6a>
        name = attr->name;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d008      	beq.n	8009c84 <osThreadNew+0x90>
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	2b38      	cmp	r3, #56	; 0x38
 8009c76:	d805      	bhi.n	8009c84 <osThreadNew+0x90>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <osThreadNew+0x94>
        return (NULL);
 8009c84:	2300      	movs	r3, #0
 8009c86:	e054      	b.n	8009d32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	089b      	lsrs	r3, r3, #2
 8009c96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00e      	beq.n	8009cbe <osThreadNew+0xca>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2bbb      	cmp	r3, #187	; 0xbb
 8009ca6:	d90a      	bls.n	8009cbe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <osThreadNew+0xca>
        mem = 1;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	623b      	str	r3, [r7, #32]
 8009cbc:	e010      	b.n	8009ce0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10c      	bne.n	8009ce0 <osThreadNew+0xec>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d108      	bne.n	8009ce0 <osThreadNew+0xec>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d104      	bne.n	8009ce0 <osThreadNew+0xec>
          mem = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	623b      	str	r3, [r7, #32]
 8009cda:	e001      	b.n	8009ce0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d110      	bne.n	8009d08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cee:	9202      	str	r2, [sp, #8]
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f001 ff2d 	bl	800bb5c <xTaskCreateStatic>
 8009d02:	4603      	mov	r3, r0
 8009d04:	613b      	str	r3, [r7, #16]
 8009d06:	e013      	b.n	8009d30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d110      	bne.n	8009d30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	f107 0310 	add.w	r3, r7, #16
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f001 ff7e 	bl	800bc22 <xTaskCreate>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d001      	beq.n	8009d30 <osThreadNew+0x13c>
          hTask = NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d30:	693b      	ldr	r3, [r7, #16]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3730      	adds	r7, #48	; 0x30
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000798 	.word	0x20000798

08009d40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d48:	f3ef 8305 	mrs	r3, IPSR
 8009d4c:	613b      	str	r3, [r7, #16]
  return(result);
 8009d4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10f      	bne.n	8009d74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d54:	f3ef 8310 	mrs	r3, PRIMASK
 8009d58:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d60:	f3ef 8311 	mrs	r3, BASEPRI
 8009d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <osDelay+0x3c>
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <osDelay+0x58>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d103      	bne.n	8009d7c <osDelay+0x3c>
    stat = osErrorISR;
 8009d74:	f06f 0305 	mvn.w	r3, #5
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	e007      	b.n	8009d8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f002 f8a8 	bl	800bedc <vTaskDelay>
    }
  }

  return (stat);
 8009d8c:	697b      	ldr	r3, [r7, #20]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000798 	.word	0x20000798

08009d9c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f003 fb33 	bl	800d410 <pvTimerGetTimerID>
 8009daa:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <TimerCallback+0x22>
    callb->func (callb->arg);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	6852      	ldr	r2, [r2, #4]
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4798      	blx	r3
  }
}
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08e      	sub	sp, #56	; 0x38
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	607a      	str	r2, [r7, #4]
 8009dd2:	603b      	str	r3, [r7, #0]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ddc:	f3ef 8305 	mrs	r3, IPSR
 8009de0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009de2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d16a      	bne.n	8009ebe <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dec:	617b      	str	r3, [r7, #20]
  return(result);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d105      	bne.n	8009e00 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009df4:	f3ef 8311 	mrs	r3, BASEPRI
 8009df8:	613b      	str	r3, [r7, #16]
  return(result);
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <osTimerNew+0x40>
 8009e00:	4b31      	ldr	r3, [pc, #196]	; (8009ec8 <osTimerNew+0x100>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d05a      	beq.n	8009ebe <osTimerNew+0xf6>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d057      	beq.n	8009ebe <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009e0e:	2008      	movs	r0, #8
 8009e10:	f003 fd58 	bl	800d8c4 <pvPortMalloc>
 8009e14:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d050      	beq.n	8009ebe <osTimerNew+0xf6>
      callb->func = func;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <osTimerNew+0x6c>
        reload = pdFALSE;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
 8009e32:	e001      	b.n	8009e38 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8009e38:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3c:	623b      	str	r3, [r7, #32]
      name = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d01c      	beq.n	8009e82 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <osTimerNew+0x8e>
          name = attr->name;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d006      	beq.n	8009e6c <osTimerNew+0xa4>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	2b2b      	cmp	r3, #43	; 0x2b
 8009e64:	d902      	bls.n	8009e6c <osTimerNew+0xa4>
          mem = 1;
 8009e66:	2301      	movs	r3, #1
 8009e68:	623b      	str	r3, [r7, #32]
 8009e6a:	e00c      	b.n	8009e86 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d108      	bne.n	8009e86 <osTimerNew+0xbe>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d104      	bne.n	8009e86 <osTimerNew+0xbe>
            mem = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	623b      	str	r3, [r7, #32]
 8009e80:	e001      	b.n	8009e86 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d10c      	bne.n	8009ea6 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	4b0e      	ldr	r3, [pc, #56]	; (8009ecc <osTimerNew+0x104>)
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e9e:	f002 ff26 	bl	800ccee <xTimerCreateStatic>
 8009ea2:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ea4:	e00b      	b.n	8009ebe <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009eac:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <osTimerNew+0x104>)
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb8:	f002 fef8 	bl	800ccac <xTimerCreate>
 8009ebc:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3730      	adds	r7, #48	; 0x30
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20000798 	.word	0x20000798
 8009ecc:	08009d9d 	.word	0x08009d9d

08009ed0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08a      	sub	sp, #40	; 0x28
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ede:	f3ef 8305 	mrs	r3, IPSR
 8009ee2:	617b      	str	r3, [r7, #20]
  return(result);
 8009ee4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10f      	bne.n	8009f0a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eea:	f3ef 8310 	mrs	r3, PRIMASK
 8009eee:	613b      	str	r3, [r7, #16]
  return(result);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d105      	bne.n	8009f02 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8009efa:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d007      	beq.n	8009f12 <osTimerStart+0x42>
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <osTimerStart+0x7c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d103      	bne.n	8009f12 <osTimerStart+0x42>
    stat = osErrorISR;
 8009f0a:	f06f 0305 	mvn.w	r3, #5
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e017      	b.n	8009f42 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d103      	bne.n	8009f20 <osTimerStart+0x50>
    stat = osErrorParameter;
 8009f18:	f06f 0303 	mvn.w	r3, #3
 8009f1c:	61fb      	str	r3, [r7, #28]
 8009f1e:	e010      	b.n	8009f42 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009f20:	2300      	movs	r3, #0
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	2300      	movs	r3, #0
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	2104      	movs	r1, #4
 8009f2a:	69b8      	ldr	r0, [r7, #24]
 8009f2c:	f002 ff5e 	bl	800cdec <xTimerGenericCommand>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d102      	bne.n	8009f3c <osTimerStart+0x6c>
      stat = osOK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
 8009f3a:	e002      	b.n	8009f42 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8009f3c:	f06f 0302 	mvn.w	r3, #2
 8009f40:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009f42:	69fb      	ldr	r3, [r7, #28]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3720      	adds	r7, #32
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000798 	.word	0x20000798

08009f50 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f5c:	f3ef 8305 	mrs	r3, IPSR
 8009f60:	613b      	str	r3, [r7, #16]
  return(result);
 8009f62:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 8085 	bne.w	800a074 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d105      	bne.n	8009f82 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f76:	f3ef 8311 	mrs	r3, BASEPRI
 8009f7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <osMutexNew+0x3a>
 8009f82:	4b3f      	ldr	r3, [pc, #252]	; (800a080 <osMutexNew+0x130>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d074      	beq.n	800a074 <osMutexNew+0x124>
    if (attr != NULL) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	623b      	str	r3, [r7, #32]
 8009f96:	e001      	b.n	8009f9c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <osMutexNew+0x5c>
      rmtx = 1U;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	61fb      	str	r3, [r7, #28]
 8009faa:	e001      	b.n	8009fb0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	f003 0308 	and.w	r3, r3, #8
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d15c      	bne.n	800a074 <osMutexNew+0x124>
      mem = -1;
 8009fba:	f04f 33ff 	mov.w	r3, #4294967295
 8009fbe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d015      	beq.n	8009ff2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <osMutexNew+0x8c>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b4f      	cmp	r3, #79	; 0x4f
 8009fd4:	d902      	bls.n	8009fdc <osMutexNew+0x8c>
          mem = 1;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	61bb      	str	r3, [r7, #24]
 8009fda:	e00c      	b.n	8009ff6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d108      	bne.n	8009ff6 <osMutexNew+0xa6>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d104      	bne.n	8009ff6 <osMutexNew+0xa6>
            mem = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	e001      	b.n	8009ff6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d112      	bne.n	800a022 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	4619      	mov	r1, r3
 800a008:	2004      	movs	r0, #4
 800a00a:	f000 fe1a 	bl	800ac42 <xQueueCreateMutexStatic>
 800a00e:	6278      	str	r0, [r7, #36]	; 0x24
 800a010:	e016      	b.n	800a040 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	4619      	mov	r1, r3
 800a018:	2001      	movs	r0, #1
 800a01a:	f000 fe12 	bl	800ac42 <xQueueCreateMutexStatic>
 800a01e:	6278      	str	r0, [r7, #36]	; 0x24
 800a020:	e00e      	b.n	800a040 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10b      	bne.n	800a040 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d004      	beq.n	800a038 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a02e:	2004      	movs	r0, #4
 800a030:	f000 fdef 	bl	800ac12 <xQueueCreateMutex>
 800a034:	6278      	str	r0, [r7, #36]	; 0x24
 800a036:	e003      	b.n	800a040 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a038:	2001      	movs	r0, #1
 800a03a:	f000 fdea 	bl	800ac12 <xQueueCreateMutex>
 800a03e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00c      	beq.n	800a060 <osMutexNew+0x110>
        if (attr != NULL) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <osMutexNew+0x104>
          name = attr->name;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	e001      	b.n	800a058 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a058:	6979      	ldr	r1, [r7, #20]
 800a05a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a05c:	f001 fcf6 	bl	800ba4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <osMutexNew+0x124>
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	f043 0301 	orr.w	r3, r3, #1
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a076:	4618      	mov	r0, r3
 800a078:	3728      	adds	r7, #40	; 0x28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000798 	.word	0x20000798

0800a084 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f023 0301 	bic.w	r3, r3, #1
 800a094:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a2:	f3ef 8305 	mrs	r3, IPSR
 800a0a6:	613b      	str	r3, [r7, #16]
  return(result);
 800a0a8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10f      	bne.n	800a0ce <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0ba:	f3ef 8311 	mrs	r3, BASEPRI
 800a0be:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <osMutexAcquire+0x52>
 800a0c6:	4b1d      	ldr	r3, [pc, #116]	; (800a13c <osMutexAcquire+0xb8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d103      	bne.n	800a0d6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800a0ce:	f06f 0305 	mvn.w	r3, #5
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	e02c      	b.n	800a130 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d103      	bne.n	800a0e4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800a0dc:	f06f 0303 	mvn.w	r3, #3
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e025      	b.n	800a130 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d011      	beq.n	800a10e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	69b8      	ldr	r0, [r7, #24]
 800a0ee:	f000 fdf9 	bl	800ace4 <xQueueTakeMutexRecursive>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d01b      	beq.n	800a130 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800a0fe:	f06f 0301 	mvn.w	r3, #1
 800a102:	61fb      	str	r3, [r7, #28]
 800a104:	e014      	b.n	800a130 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a106:	f06f 0302 	mvn.w	r3, #2
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	e010      	b.n	800a130 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	69b8      	ldr	r0, [r7, #24]
 800a112:	f001 f9b3 	bl	800b47c <xQueueSemaphoreTake>
 800a116:	4603      	mov	r3, r0
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d009      	beq.n	800a130 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800a122:	f06f 0301 	mvn.w	r3, #1
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e002      	b.n	800a130 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a12a:	f06f 0302 	mvn.w	r3, #2
 800a12e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a130:	69fb      	ldr	r3, [r7, #28]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000798 	.word	0x20000798

0800a140 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15c:	f3ef 8305 	mrs	r3, IPSR
 800a160:	613b      	str	r3, [r7, #16]
  return(result);
 800a162:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10f      	bne.n	800a188 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a168:	f3ef 8310 	mrs	r3, PRIMASK
 800a16c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d105      	bne.n	800a180 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a174:	f3ef 8311 	mrs	r3, BASEPRI
 800a178:	60bb      	str	r3, [r7, #8]
  return(result);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <osMutexRelease+0x50>
 800a180:	4b16      	ldr	r3, [pc, #88]	; (800a1dc <osMutexRelease+0x9c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d103      	bne.n	800a190 <osMutexRelease+0x50>
    stat = osErrorISR;
 800a188:	f06f 0305 	mvn.w	r3, #5
 800a18c:	61fb      	str	r3, [r7, #28]
 800a18e:	e01f      	b.n	800a1d0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800a196:	f06f 0303 	mvn.w	r3, #3
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	e018      	b.n	800a1d0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d009      	beq.n	800a1b8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a1a4:	69b8      	ldr	r0, [r7, #24]
 800a1a6:	f000 fd67 	bl	800ac78 <xQueueGiveMutexRecursive>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d00f      	beq.n	800a1d0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a1b0:	f06f 0302 	mvn.w	r3, #2
 800a1b4:	61fb      	str	r3, [r7, #28]
 800a1b6:	e00b      	b.n	800a1d0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	69b8      	ldr	r0, [r7, #24]
 800a1c0:	f000 fe3a 	bl	800ae38 <xQueueGenericSend>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d002      	beq.n	800a1d0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800a1ca:	f06f 0302 	mvn.w	r3, #2
 800a1ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a1d0:	69fb      	ldr	r3, [r7, #28]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000798 	.word	0x20000798

0800a1e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	; 0x30
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f0:	f3ef 8305 	mrs	r3, IPSR
 800a1f4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f040 8086 	bne.w	800a30a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a202:	617b      	str	r3, [r7, #20]
  return(result);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d105      	bne.n	800a216 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a20a:	f3ef 8311 	mrs	r3, BASEPRI
 800a20e:	613b      	str	r3, [r7, #16]
  return(result);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <osSemaphoreNew+0x3e>
 800a216:	4b3f      	ldr	r3, [pc, #252]	; (800a314 <osSemaphoreNew+0x134>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d075      	beq.n	800a30a <osSemaphoreNew+0x12a>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d072      	beq.n	800a30a <osSemaphoreNew+0x12a>
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d86e      	bhi.n	800a30a <osSemaphoreNew+0x12a>
    mem = -1;
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295
 800a230:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d015      	beq.n	800a264 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d006      	beq.n	800a24e <osSemaphoreNew+0x6e>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b4f      	cmp	r3, #79	; 0x4f
 800a246:	d902      	bls.n	800a24e <osSemaphoreNew+0x6e>
        mem = 1;
 800a248:	2301      	movs	r3, #1
 800a24a:	623b      	str	r3, [r7, #32]
 800a24c:	e00c      	b.n	800a268 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d108      	bne.n	800a268 <osSemaphoreNew+0x88>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d104      	bne.n	800a268 <osSemaphoreNew+0x88>
          mem = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	623b      	str	r3, [r7, #32]
 800a262:	e001      	b.n	800a268 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26e:	d04c      	beq.n	800a30a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d128      	bne.n	800a2c8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10a      	bne.n	800a292 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2203      	movs	r2, #3
 800a282:	9200      	str	r2, [sp, #0]
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	2001      	movs	r0, #1
 800a28a:	f000 fbc1 	bl	800aa10 <xQueueGenericCreateStatic>
 800a28e:	6278      	str	r0, [r7, #36]	; 0x24
 800a290:	e005      	b.n	800a29e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a292:	2203      	movs	r2, #3
 800a294:	2100      	movs	r1, #0
 800a296:	2001      	movs	r0, #1
 800a298:	f000 fc3c 	bl	800ab14 <xQueueGenericCreate>
 800a29c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d022      	beq.n	800a2ea <osSemaphoreNew+0x10a>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01f      	beq.n	800a2ea <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2b2:	f000 fdc1 	bl	800ae38 <xQueueGenericSend>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d016      	beq.n	800a2ea <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2be:	f001 fa77 	bl	800b7b0 <vQueueDelete>
            hSemaphore = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c6:	e010      	b.n	800a2ea <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d108      	bne.n	800a2e0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 fd3c 	bl	800ad54 <xQueueCreateCountingSemaphoreStatic>
 800a2dc:	6278      	str	r0, [r7, #36]	; 0x24
 800a2de:	e004      	b.n	800a2ea <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fd71 	bl	800adca <xQueueCreateCountingSemaphore>
 800a2e8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00c      	beq.n	800a30a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <osSemaphoreNew+0x11e>
          name = attr->name;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	61fb      	str	r3, [r7, #28]
 800a2fc:	e001      	b.n	800a302 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a302:	69f9      	ldr	r1, [r7, #28]
 800a304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a306:	f001 fba1 	bl	800ba4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3728      	adds	r7, #40	; 0x28
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20000798 	.word	0x20000798

0800a318 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a326:	2300      	movs	r3, #0
 800a328:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d103      	bne.n	800a338 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a330:	f06f 0303 	mvn.w	r3, #3
 800a334:	61fb      	str	r3, [r7, #28]
 800a336:	e04b      	b.n	800a3d0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a338:	f3ef 8305 	mrs	r3, IPSR
 800a33c:	617b      	str	r3, [r7, #20]
  return(result);
 800a33e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10f      	bne.n	800a364 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a344:	f3ef 8310 	mrs	r3, PRIMASK
 800a348:	613b      	str	r3, [r7, #16]
  return(result);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d105      	bne.n	800a35c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a350:	f3ef 8311 	mrs	r3, BASEPRI
 800a354:	60fb      	str	r3, [r7, #12]
  return(result);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d026      	beq.n	800a3aa <osSemaphoreAcquire+0x92>
 800a35c:	4b1f      	ldr	r3, [pc, #124]	; (800a3dc <osSemaphoreAcquire+0xc4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d122      	bne.n	800a3aa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a36a:	f06f 0303 	mvn.w	r3, #3
 800a36e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a370:	e02d      	b.n	800a3ce <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a372:	2300      	movs	r3, #0
 800a374:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a376:	f107 0308 	add.w	r3, r7, #8
 800a37a:	461a      	mov	r2, r3
 800a37c:	2100      	movs	r1, #0
 800a37e:	69b8      	ldr	r0, [r7, #24]
 800a380:	f001 f990 	bl	800b6a4 <xQueueReceiveFromISR>
 800a384:	4603      	mov	r3, r0
 800a386:	2b01      	cmp	r3, #1
 800a388:	d003      	beq.n	800a392 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a38a:	f06f 0302 	mvn.w	r3, #2
 800a38e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a390:	e01d      	b.n	800a3ce <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01a      	beq.n	800a3ce <osSemaphoreAcquire+0xb6>
 800a398:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <osSemaphoreAcquire+0xc8>)
 800a39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a3a8:	e011      	b.n	800a3ce <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	69b8      	ldr	r0, [r7, #24]
 800a3ae:	f001 f865 	bl	800b47c <xQueueSemaphoreTake>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d00b      	beq.n	800a3d0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a3be:	f06f 0301 	mvn.w	r3, #1
 800a3c2:	61fb      	str	r3, [r7, #28]
 800a3c4:	e004      	b.n	800a3d0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a3c6:	f06f 0302 	mvn.w	r3, #2
 800a3ca:	61fb      	str	r3, [r7, #28]
 800a3cc:	e000      	b.n	800a3d0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a3ce:	bf00      	nop
      }
    }
  }

  return (stat);
 800a3d0:	69fb      	ldr	r3, [r7, #28]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000798 	.word	0x20000798
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d103      	bne.n	800a402 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a3fa:	f06f 0303 	mvn.w	r3, #3
 800a3fe:	61fb      	str	r3, [r7, #28]
 800a400:	e03e      	b.n	800a480 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a402:	f3ef 8305 	mrs	r3, IPSR
 800a406:	617b      	str	r3, [r7, #20]
  return(result);
 800a408:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10f      	bne.n	800a42e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a40e:	f3ef 8310 	mrs	r3, PRIMASK
 800a412:	613b      	str	r3, [r7, #16]
  return(result);
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d105      	bne.n	800a426 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a41a:	f3ef 8311 	mrs	r3, BASEPRI
 800a41e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01e      	beq.n	800a464 <osSemaphoreRelease+0x80>
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <osSemaphoreRelease+0xa8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d11a      	bne.n	800a464 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	4619      	mov	r1, r3
 800a438:	69b8      	ldr	r0, [r7, #24]
 800a43a:	f000 fea3 	bl	800b184 <xQueueGiveFromISR>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b01      	cmp	r3, #1
 800a442:	d003      	beq.n	800a44c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a444:	f06f 0302 	mvn.w	r3, #2
 800a448:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a44a:	e018      	b.n	800a47e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d015      	beq.n	800a47e <osSemaphoreRelease+0x9a>
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <osSemaphoreRelease+0xac>)
 800a454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a462:	e00c      	b.n	800a47e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a464:	2300      	movs	r3, #0
 800a466:	2200      	movs	r2, #0
 800a468:	2100      	movs	r1, #0
 800a46a:	69b8      	ldr	r0, [r7, #24]
 800a46c:	f000 fce4 	bl	800ae38 <xQueueGenericSend>
 800a470:	4603      	mov	r3, r0
 800a472:	2b01      	cmp	r3, #1
 800a474:	d004      	beq.n	800a480 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a476:	f06f 0302 	mvn.w	r3, #2
 800a47a:	61fb      	str	r3, [r7, #28]
 800a47c:	e000      	b.n	800a480 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a47e:	bf00      	nop
    }
  }

  return (stat);
 800a480:	69fb      	ldr	r3, [r7, #28]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3720      	adds	r7, #32
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000798 	.word	0x20000798
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b08c      	sub	sp, #48	; 0x30
 800a498:	af02      	add	r7, sp, #8
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4a4:	f3ef 8305 	mrs	r3, IPSR
 800a4a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a4aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d16f      	bne.n	800a590 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4b4:	617b      	str	r3, [r7, #20]
  return(result);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d105      	bne.n	800a4c8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4bc:	f3ef 8311 	mrs	r3, BASEPRI
 800a4c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <osMessageQueueNew+0x3c>
 800a4c8:	4b34      	ldr	r3, [pc, #208]	; (800a59c <osMessageQueueNew+0x108>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d05f      	beq.n	800a590 <osMessageQueueNew+0xfc>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d05c      	beq.n	800a590 <osMessageQueueNew+0xfc>
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d059      	beq.n	800a590 <osMessageQueueNew+0xfc>
    mem = -1;
 800a4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d029      	beq.n	800a53c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d012      	beq.n	800a516 <osMessageQueueNew+0x82>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	2b4f      	cmp	r3, #79	; 0x4f
 800a4f6:	d90e      	bls.n	800a516 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	695a      	ldr	r2, [r3, #20]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	fb01 f303 	mul.w	r3, r1, r3
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d302      	bcc.n	800a516 <osMessageQueueNew+0x82>
        mem = 1;
 800a510:	2301      	movs	r3, #1
 800a512:	623b      	str	r3, [r7, #32]
 800a514:	e014      	b.n	800a540 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d110      	bne.n	800a540 <osMessageQueueNew+0xac>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10c      	bne.n	800a540 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d108      	bne.n	800a540 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d104      	bne.n	800a540 <osMessageQueueNew+0xac>
          mem = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	623b      	str	r3, [r7, #32]
 800a53a:	e001      	b.n	800a540 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d10b      	bne.n	800a55e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691a      	ldr	r2, [r3, #16]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	2100      	movs	r1, #0
 800a550:	9100      	str	r1, [sp, #0]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fa5b 	bl	800aa10 <xQueueGenericCreateStatic>
 800a55a:	6278      	str	r0, [r7, #36]	; 0x24
 800a55c:	e008      	b.n	800a570 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d105      	bne.n	800a570 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a564:	2200      	movs	r2, #0
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fad3 	bl	800ab14 <xQueueGenericCreate>
 800a56e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00c      	beq.n	800a590 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	61fb      	str	r3, [r7, #28]
 800a582:	e001      	b.n	800a588 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a588:	69f9      	ldr	r1, [r7, #28]
 800a58a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a58c:	f001 fa5e 	bl	800ba4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a592:	4618      	mov	r0, r3
 800a594:	3728      	adds	r7, #40	; 0x28
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	20000798 	.word	0x20000798

0800a5a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5b8:	f3ef 8305 	mrs	r3, IPSR
 800a5bc:	61fb      	str	r3, [r7, #28]
  return(result);
 800a5be:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10f      	bne.n	800a5e4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d105      	bne.n	800a5dc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5d0:	f3ef 8311 	mrs	r3, BASEPRI
 800a5d4:	617b      	str	r3, [r7, #20]
  return(result);
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d02c      	beq.n	800a636 <osMessageQueuePut+0x96>
 800a5dc:	4b28      	ldr	r3, [pc, #160]	; (800a680 <osMessageQueuePut+0xe0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d128      	bne.n	800a636 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <osMessageQueuePut+0x56>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <osMessageQueuePut+0x56>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a5f6:	f06f 0303 	mvn.w	r3, #3
 800a5fa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5fc:	e039      	b.n	800a672 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a602:	f107 0210 	add.w	r2, r7, #16
 800a606:	2300      	movs	r3, #0
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	6a38      	ldr	r0, [r7, #32]
 800a60c:	f000 fd1a 	bl	800b044 <xQueueGenericSendFromISR>
 800a610:	4603      	mov	r3, r0
 800a612:	2b01      	cmp	r3, #1
 800a614:	d003      	beq.n	800a61e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a616:	f06f 0302 	mvn.w	r3, #2
 800a61a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a61c:	e029      	b.n	800a672 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d026      	beq.n	800a672 <osMessageQueuePut+0xd2>
 800a624:	4b17      	ldr	r3, [pc, #92]	; (800a684 <osMessageQueuePut+0xe4>)
 800a626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a634:	e01d      	b.n	800a672 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <osMessageQueuePut+0xa2>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a642:	f06f 0303 	mvn.w	r3, #3
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
 800a648:	e014      	b.n	800a674 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a64a:	2300      	movs	r3, #0
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	6a38      	ldr	r0, [r7, #32]
 800a652:	f000 fbf1 	bl	800ae38 <xQueueGenericSend>
 800a656:	4603      	mov	r3, r0
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d00b      	beq.n	800a674 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a662:	f06f 0301 	mvn.w	r3, #1
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
 800a668:	e004      	b.n	800a674 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a66a:	f06f 0302 	mvn.w	r3, #2
 800a66e:	627b      	str	r3, [r7, #36]	; 0x24
 800a670:	e000      	b.n	800a674 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a672:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a676:	4618      	mov	r0, r3
 800a678:	3728      	adds	r7, #40	; 0x28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000798 	.word	0x20000798
 800a684:	e000ed04 	.word	0xe000ed04

0800a688 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a69e:	f3ef 8305 	mrs	r3, IPSR
 800a6a2:	61fb      	str	r3, [r7, #28]
  return(result);
 800a6a4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10f      	bne.n	800a6ca <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ae:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a6ba:	617b      	str	r3, [r7, #20]
  return(result);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d02c      	beq.n	800a71c <osMessageQueueGet+0x94>
 800a6c2:	4b28      	ldr	r3, [pc, #160]	; (800a764 <osMessageQueueGet+0xdc>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d128      	bne.n	800a71c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <osMessageQueueGet+0x54>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <osMessageQueueGet+0x54>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a6dc:	f06f 0303 	mvn.w	r3, #3
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6e2:	e038      	b.n	800a756 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a6e8:	f107 0310 	add.w	r3, r7, #16
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	68b9      	ldr	r1, [r7, #8]
 800a6f0:	6a38      	ldr	r0, [r7, #32]
 800a6f2:	f000 ffd7 	bl	800b6a4 <xQueueReceiveFromISR>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d003      	beq.n	800a704 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a6fc:	f06f 0302 	mvn.w	r3, #2
 800a700:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a702:	e028      	b.n	800a756 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d025      	beq.n	800a756 <osMessageQueueGet+0xce>
 800a70a:	4b17      	ldr	r3, [pc, #92]	; (800a768 <osMessageQueueGet+0xe0>)
 800a70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a71a:	e01c      	b.n	800a756 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d002      	beq.n	800a728 <osMessageQueueGet+0xa0>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d103      	bne.n	800a730 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a728:	f06f 0303 	mvn.w	r3, #3
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
 800a72e:	e013      	b.n	800a758 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	6a38      	ldr	r0, [r7, #32]
 800a736:	f000 fdbb 	bl	800b2b0 <xQueueReceive>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d00b      	beq.n	800a758 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a746:	f06f 0301 	mvn.w	r3, #1
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
 800a74c:	e004      	b.n	800a758 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a74e:	f06f 0302 	mvn.w	r3, #2
 800a752:	627b      	str	r3, [r7, #36]	; 0x24
 800a754:	e000      	b.n	800a758 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a756:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3728      	adds	r7, #40	; 0x28
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20000798 	.word	0x20000798
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4a07      	ldr	r2, [pc, #28]	; (800a798 <vApplicationGetIdleTaskMemory+0x2c>)
 800a77c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	4a06      	ldr	r2, [pc, #24]	; (800a79c <vApplicationGetIdleTaskMemory+0x30>)
 800a782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2280      	movs	r2, #128	; 0x80
 800a788:	601a      	str	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	2000079c 	.word	0x2000079c
 800a79c:	20000858 	.word	0x20000858

0800a7a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4a07      	ldr	r2, [pc, #28]	; (800a7cc <vApplicationGetTimerTaskMemory+0x2c>)
 800a7b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	4a06      	ldr	r2, [pc, #24]	; (800a7d0 <vApplicationGetTimerTaskMemory+0x30>)
 800a7b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7be:	601a      	str	r2, [r3, #0]
}
 800a7c0:	bf00      	nop
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	20000a58 	.word	0x20000a58
 800a7d0:	20000b14 	.word	0x20000b14

0800a7d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f103 0208 	add.w	r2, r3, #8
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f103 0208 	add.w	r2, r3, #8
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f103 0208 	add.w	r2, r3, #8
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a82e:	b480      	push	{r7}
 800a830:	b085      	sub	sp, #20
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	601a      	str	r2, [r3, #0]
}
 800a86a:	bf00      	nop
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a876:	b480      	push	{r7}
 800a878:	b085      	sub	sp, #20
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d103      	bne.n	800a896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e00c      	b.n	800a8b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3308      	adds	r3, #8
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	e002      	b.n	800a8a4 <vListInsert+0x2e>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d2f6      	bcs.n	800a89e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	601a      	str	r2, [r3, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6892      	ldr	r2, [r2, #8]
 800a8fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	6852      	ldr	r2, [r2, #4]
 800a908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d103      	bne.n	800a91c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	1e5a      	subs	r2, r3, #1
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10c      	bne.n	800a96a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	b672      	cpsid	i
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	b662      	cpsie	i
 800a964:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a96a:	f002 fe7f 	bl	800d66c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a976:	68f9      	ldr	r1, [r7, #12]
 800a978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a97a:	fb01 f303 	mul.w	r3, r1, r3
 800a97e:	441a      	add	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	3b01      	subs	r3, #1
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	441a      	add	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	22ff      	movs	r2, #255	; 0xff
 800a9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	22ff      	movs	r2, #255	; 0xff
 800a9b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d114      	bne.n	800a9ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01a      	beq.n	800a9fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3310      	adds	r3, #16
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 fd63 	bl	800c498 <xTaskRemoveFromEventList>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d012      	beq.n	800a9fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <xQueueGenericReset+0xd0>)
 800a9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	e009      	b.n	800a9fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3310      	adds	r3, #16
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff fef0 	bl	800a7d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	3324      	adds	r3, #36	; 0x24
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff feeb 	bl	800a7d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9fe:	f002 fe69 	bl	800d6d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa02:	2301      	movs	r3, #1
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08e      	sub	sp, #56	; 0x38
 800aa14:	af02      	add	r7, sp, #8
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10c      	bne.n	800aa3e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	b672      	cpsid	i
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	b662      	cpsie	i
 800aa38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa3a:	bf00      	nop
 800aa3c:	e7fe      	b.n	800aa3c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10c      	bne.n	800aa5e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	b672      	cpsid	i
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	b662      	cpsie	i
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <xQueueGenericCreateStatic+0x5a>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <xQueueGenericCreateStatic+0x5e>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <xQueueGenericCreateStatic+0x60>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10c      	bne.n	800aa8e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	b672      	cpsid	i
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	b662      	cpsie	i
 800aa88:	623b      	str	r3, [r7, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <xQueueGenericCreateStatic+0x8a>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <xQueueGenericCreateStatic+0x8e>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <xQueueGenericCreateStatic+0x90>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10c      	bne.n	800aabe <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	b672      	cpsid	i
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	b662      	cpsie	i
 800aab8:	61fb      	str	r3, [r7, #28]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aabe:	2350      	movs	r3, #80	; 0x50
 800aac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b50      	cmp	r3, #80	; 0x50
 800aac6:	d00c      	beq.n	800aae2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	61bb      	str	r3, [r7, #24]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aae2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00d      	beq.n	800ab0a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aaf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 f847 	bl	800ab98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3730      	adds	r7, #48	; 0x30
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08a      	sub	sp, #40	; 0x28
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10c      	bne.n	800ab42 <xQueueGenericCreate+0x2e>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	b672      	cpsid	i
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	b662      	cpsie	i
 800ab3c:	613b      	str	r3, [r7, #16]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	61fb      	str	r3, [r7, #28]
 800ab4c:	e004      	b.n	800ab58 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
 800ab56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	3350      	adds	r3, #80	; 0x50
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 feb1 	bl	800d8c4 <pvPortMalloc>
 800ab62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d011      	beq.n	800ab8e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	3350      	adds	r3, #80	; 0x50
 800ab72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab7c:	79fa      	ldrb	r2, [r7, #7]
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	4613      	mov	r3, r2
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 f805 	bl	800ab98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab8e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3720      	adds	r7, #32
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	e002      	b.n	800abba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800abc6:	2101      	movs	r1, #1
 800abc8:	69b8      	ldr	r0, [r7, #24]
 800abca:	f7ff feb7 	bl	800a93c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	78fa      	ldrb	r2, [r7, #3]
 800abd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800abfe:	2300      	movs	r3, #0
 800ac00:	2200      	movs	r2, #0
 800ac02:	2100      	movs	r1, #0
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f917 	bl	800ae38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b086      	sub	sp, #24
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	4603      	mov	r3, r0
 800ac1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6939      	ldr	r1, [r7, #16]
 800ac2a:	6978      	ldr	r0, [r7, #20]
 800ac2c:	f7ff ff72 	bl	800ab14 <xQueueGenericCreate>
 800ac30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f7ff ffd3 	bl	800abde <prvInitialiseMutex>

		return xNewQueue;
 800ac38:	68fb      	ldr	r3, [r7, #12]
	}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af02      	add	r7, sp, #8
 800ac48:	4603      	mov	r3, r0
 800ac4a:	6039      	str	r1, [r7, #0]
 800ac4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	617b      	str	r3, [r7, #20]
 800ac52:	2300      	movs	r3, #0
 800ac54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	6939      	ldr	r1, [r7, #16]
 800ac60:	6978      	ldr	r0, [r7, #20]
 800ac62:	f7ff fed5 	bl	800aa10 <xQueueGenericCreateStatic>
 800ac66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ffb8 	bl	800abde <prvInitialiseMutex>

		return xNewQueue;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
	}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10c      	bne.n	800aca4 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	b672      	cpsid	i
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	b662      	cpsie	i
 800ac9e:	60fb      	str	r3, [r7, #12]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	689c      	ldr	r4, [r3, #8]
 800aca8:	f001 fdc0 	bl	800c82c <xTaskGetCurrentTaskHandle>
 800acac:	4603      	mov	r3, r0
 800acae:	429c      	cmp	r4, r3
 800acb0:	d111      	bne.n	800acd6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	1e5a      	subs	r2, r3, #1
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d105      	bne.n	800acd0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800acc4:	2300      	movs	r3, #0
 800acc6:	2200      	movs	r2, #0
 800acc8:	2100      	movs	r1, #0
 800acca:	6938      	ldr	r0, [r7, #16]
 800accc:	f000 f8b4 	bl	800ae38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800acd0:	2301      	movs	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	e001      	b.n	800acda <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800acda:	697b      	ldr	r3, [r7, #20]
	}
 800acdc:	4618      	mov	r0, r3
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}

0800ace4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10c      	bne.n	800ad12 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	b672      	cpsid	i
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	b662      	cpsie	i
 800ad0c:	60fb      	str	r3, [r7, #12]
}
 800ad0e:	bf00      	nop
 800ad10:	e7fe      	b.n	800ad10 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	689c      	ldr	r4, [r3, #8]
 800ad16:	f001 fd89 	bl	800c82c <xTaskGetCurrentTaskHandle>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d107      	bne.n	800ad30 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	e00c      	b.n	800ad4a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6938      	ldr	r0, [r7, #16]
 800ad34:	f000 fba2 	bl	800b47c <xQueueSemaphoreTake>
 800ad38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ad4a:	697b      	ldr	r3, [r7, #20]
	}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd90      	pop	{r4, r7, pc}

0800ad54 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08a      	sub	sp, #40	; 0x28
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10c      	bne.n	800ad80 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	b672      	cpsid	i
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	b662      	cpsie	i
 800ad7a:	61bb      	str	r3, [r7, #24]
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d90c      	bls.n	800ada2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	b672      	cpsid	i
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	b662      	cpsie	i
 800ad9c:	617b      	str	r3, [r7, #20]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ada2:	2302      	movs	r3, #2
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	2100      	movs	r1, #0
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7ff fe2f 	bl	800aa10 <xQueueGenericCreateStatic>
 800adb2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d002      	beq.n	800adc0 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800adc0:	69fb      	ldr	r3, [r7, #28]
	}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b086      	sub	sp, #24
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10c      	bne.n	800adf4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	b672      	cpsid	i
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	b662      	cpsie	i
 800adee:	613b      	str	r3, [r7, #16]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d90c      	bls.n	800ae16 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	b672      	cpsid	i
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	b662      	cpsie	i
 800ae10:	60fb      	str	r3, [r7, #12]
}
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae16:	2202      	movs	r2, #2
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff fe7a 	bl	800ab14 <xQueueGenericCreate>
 800ae20:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ae2e:	697b      	ldr	r3, [r7, #20]
	}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08e      	sub	sp, #56	; 0x38
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
 800ae44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae46:	2300      	movs	r3, #0
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10c      	bne.n	800ae6e <xQueueGenericSend+0x36>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	b672      	cpsid	i
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	b662      	cpsie	i
 800ae68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae6a:	bf00      	nop
 800ae6c:	e7fe      	b.n	800ae6c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d103      	bne.n	800ae7c <xQueueGenericSend+0x44>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <xQueueGenericSend+0x48>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e000      	b.n	800ae82 <xQueueGenericSend+0x4a>
 800ae80:	2300      	movs	r3, #0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10c      	bne.n	800aea0 <xQueueGenericSend+0x68>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	b672      	cpsid	i
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	b662      	cpsie	i
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d103      	bne.n	800aeae <xQueueGenericSend+0x76>
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <xQueueGenericSend+0x7a>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <xQueueGenericSend+0x7c>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10c      	bne.n	800aed2 <xQueueGenericSend+0x9a>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	b672      	cpsid	i
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	b662      	cpsie	i
 800aecc:	623b      	str	r3, [r7, #32]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aed2:	f001 fcbb 	bl	800c84c <xTaskGetSchedulerState>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <xQueueGenericSend+0xaa>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <xQueueGenericSend+0xae>
 800aee2:	2301      	movs	r3, #1
 800aee4:	e000      	b.n	800aee8 <xQueueGenericSend+0xb0>
 800aee6:	2300      	movs	r3, #0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10c      	bne.n	800af06 <xQueueGenericSend+0xce>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	b672      	cpsid	i
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	b662      	cpsie	i
 800af00:	61fb      	str	r3, [r7, #28]
}
 800af02:	bf00      	nop
 800af04:	e7fe      	b.n	800af04 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af06:	f002 fbb1 	bl	800d66c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af12:	429a      	cmp	r2, r3
 800af14:	d302      	bcc.n	800af1c <xQueueGenericSend+0xe4>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d129      	bne.n	800af70 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af22:	f000 fc82 	bl	800b82a <prvCopyDataToQueue>
 800af26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d010      	beq.n	800af52 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	3324      	adds	r3, #36	; 0x24
 800af34:	4618      	mov	r0, r3
 800af36:	f001 faaf 	bl	800c498 <xTaskRemoveFromEventList>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d013      	beq.n	800af68 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af40:	4b3f      	ldr	r3, [pc, #252]	; (800b040 <xQueueGenericSend+0x208>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	e00a      	b.n	800af68 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af54:	2b00      	cmp	r3, #0
 800af56:	d007      	beq.n	800af68 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af58:	4b39      	ldr	r3, [pc, #228]	; (800b040 <xQueueGenericSend+0x208>)
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af68:	f002 fbb4 	bl	800d6d4 <vPortExitCritical>
				return pdPASS;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e063      	b.n	800b038 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d103      	bne.n	800af7e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af76:	f002 fbad 	bl	800d6d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	e05c      	b.n	800b038 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af84:	f107 0314 	add.w	r3, r7, #20
 800af88:	4618      	mov	r0, r3
 800af8a:	f001 faeb 	bl	800c564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af8e:	2301      	movs	r3, #1
 800af90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af92:	f002 fb9f 	bl	800d6d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af96:	f001 f84b 	bl	800c030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af9a:	f002 fb67 	bl	800d66c <vPortEnterCritical>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa4:	b25b      	sxtb	r3, r3
 800afa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afaa:	d103      	bne.n	800afb4 <xQueueGenericSend+0x17c>
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afba:	b25b      	sxtb	r3, r3
 800afbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc0:	d103      	bne.n	800afca <xQueueGenericSend+0x192>
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afca:	f002 fb83 	bl	800d6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afce:	1d3a      	adds	r2, r7, #4
 800afd0:	f107 0314 	add.w	r3, r7, #20
 800afd4:	4611      	mov	r1, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f001 fada 	bl	800c590 <xTaskCheckForTimeOut>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d124      	bne.n	800b02c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe4:	f000 fd19 	bl	800ba1a <prvIsQueueFull>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d018      	beq.n	800b020 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	3310      	adds	r3, #16
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 f9fa 	bl	800c3f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800affc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affe:	f000 fca4 	bl	800b94a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b002:	f001 f823 	bl	800c04c <xTaskResumeAll>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f47f af7c 	bne.w	800af06 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b00e:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <xQueueGenericSend+0x208>)
 800b010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	e772      	b.n	800af06 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b022:	f000 fc92 	bl	800b94a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b026:	f001 f811 	bl	800c04c <xTaskResumeAll>
 800b02a:	e76c      	b.n	800af06 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b02e:	f000 fc8c 	bl	800b94a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b032:	f001 f80b 	bl	800c04c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b036:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3738      	adds	r7, #56	; 0x38
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	e000ed04 	.word	0xe000ed04

0800b044 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08e      	sub	sp, #56	; 0x38
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10c      	bne.n	800b076 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	b672      	cpsid	i
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	b662      	cpsie	i
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d103      	bne.n	800b084 <xQueueGenericSendFromISR+0x40>
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <xQueueGenericSendFromISR+0x44>
 800b084:	2301      	movs	r3, #1
 800b086:	e000      	b.n	800b08a <xQueueGenericSendFromISR+0x46>
 800b088:	2300      	movs	r3, #0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10c      	bne.n	800b0a8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	b672      	cpsid	i
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	b662      	cpsie	i
 800b0a2:	623b      	str	r3, [r7, #32]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d103      	bne.n	800b0b6 <xQueueGenericSendFromISR+0x72>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <xQueueGenericSendFromISR+0x76>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e000      	b.n	800b0bc <xQueueGenericSendFromISR+0x78>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10c      	bne.n	800b0da <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	b672      	cpsid	i
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	b662      	cpsie	i
 800b0d4:	61fb      	str	r3, [r7, #28]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0da:	f002 fbaf 	bl	800d83c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0de:	f3ef 8211 	mrs	r2, BASEPRI
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	b672      	cpsid	i
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	b662      	cpsie	i
 800b0f6:	61ba      	str	r2, [r7, #24]
 800b0f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b106:	429a      	cmp	r2, r3
 800b108:	d302      	bcc.n	800b110 <xQueueGenericSendFromISR+0xcc>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d12c      	bne.n	800b16a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b120:	f000 fb83 	bl	800b82a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b124:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12c:	d112      	bne.n	800b154 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	d016      	beq.n	800b164 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	3324      	adds	r3, #36	; 0x24
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 f9ac 	bl	800c498 <xTaskRemoveFromEventList>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00e      	beq.n	800b164 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	e007      	b.n	800b164 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b158:	3301      	adds	r3, #1
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	b25a      	sxtb	r2, r3
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b164:	2301      	movs	r3, #1
 800b166:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b168:	e001      	b.n	800b16e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	637b      	str	r3, [r7, #52]	; 0x34
 800b16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b170:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3738      	adds	r7, #56	; 0x38
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b08e      	sub	sp, #56	; 0x38
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10c      	bne.n	800b1b2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	b672      	cpsid	i
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	b662      	cpsie	i
 800b1ac:	623b      	str	r3, [r7, #32]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00c      	beq.n	800b1d4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	b672      	cpsid	i
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	b662      	cpsie	i
 800b1ce:	61fb      	str	r3, [r7, #28]
}
 800b1d0:	bf00      	nop
 800b1d2:	e7fe      	b.n	800b1d2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d103      	bne.n	800b1e4 <xQueueGiveFromISR+0x60>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <xQueueGiveFromISR+0x64>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e000      	b.n	800b1ea <xQueueGiveFromISR+0x66>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10c      	bne.n	800b208 <xQueueGiveFromISR+0x84>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	b672      	cpsid	i
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	b662      	cpsie	i
 800b202:	61bb      	str	r3, [r7, #24]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b208:	f002 fb18 	bl	800d83c <vPortValidateInterruptPriority>
	__asm volatile
 800b20c:	f3ef 8211 	mrs	r2, BASEPRI
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	b672      	cpsid	i
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	b662      	cpsie	i
 800b224:	617a      	str	r2, [r7, #20]
 800b226:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b228:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b22a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b238:	429a      	cmp	r2, r3
 800b23a:	d22b      	bcs.n	800b294 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b24e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b256:	d112      	bne.n	800b27e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d016      	beq.n	800b28e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	3324      	adds	r3, #36	; 0x24
 800b264:	4618      	mov	r0, r3
 800b266:	f001 f917 	bl	800c498 <xTaskRemoveFromEventList>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00e      	beq.n	800b28e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2201      	movs	r2, #1
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	e007      	b.n	800b28e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b282:	3301      	adds	r3, #1
 800b284:	b2db      	uxtb	r3, r3
 800b286:	b25a      	sxtb	r2, r3
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b28e:	2301      	movs	r3, #1
 800b290:	637b      	str	r3, [r7, #52]	; 0x34
 800b292:	e001      	b.n	800b298 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b294:	2300      	movs	r3, #0
 800b296:	637b      	str	r3, [r7, #52]	; 0x34
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f383 8811 	msr	BASEPRI, r3
}
 800b2a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3738      	adds	r7, #56	; 0x38
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08c      	sub	sp, #48	; 0x30
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10c      	bne.n	800b2e4 <xQueueReceive+0x34>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	b672      	cpsid	i
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	b662      	cpsie	i
 800b2de:	623b      	str	r3, [r7, #32]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d103      	bne.n	800b2f2 <xQueueReceive+0x42>
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <xQueueReceive+0x46>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <xQueueReceive+0x48>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10c      	bne.n	800b316 <xQueueReceive+0x66>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	b672      	cpsid	i
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	b662      	cpsie	i
 800b310:	61fb      	str	r3, [r7, #28]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b316:	f001 fa99 	bl	800c84c <xTaskGetSchedulerState>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d102      	bne.n	800b326 <xQueueReceive+0x76>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <xQueueReceive+0x7a>
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <xQueueReceive+0x7c>
 800b32a:	2300      	movs	r3, #0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10c      	bne.n	800b34a <xQueueReceive+0x9a>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	b672      	cpsid	i
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	b662      	cpsie	i
 800b344:	61bb      	str	r3, [r7, #24]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b34a:	f002 f98f 	bl	800d66c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b352:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d01f      	beq.n	800b39a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b35e:	f000 face 	bl	800b8fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	1e5a      	subs	r2, r3, #1
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00f      	beq.n	800b392 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	3310      	adds	r3, #16
 800b376:	4618      	mov	r0, r3
 800b378:	f001 f88e 	bl	800c498 <xTaskRemoveFromEventList>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d007      	beq.n	800b392 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b382:	4b3d      	ldr	r3, [pc, #244]	; (800b478 <xQueueReceive+0x1c8>)
 800b384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b392:	f002 f99f 	bl	800d6d4 <vPortExitCritical>
				return pdPASS;
 800b396:	2301      	movs	r3, #1
 800b398:	e069      	b.n	800b46e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d103      	bne.n	800b3a8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3a0:	f002 f998 	bl	800d6d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	e062      	b.n	800b46e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3ae:	f107 0310 	add.w	r3, r7, #16
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f001 f8d6 	bl	800c564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3bc:	f002 f98a 	bl	800d6d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3c0:	f000 fe36 	bl	800c030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3c4:	f002 f952 	bl	800d66c <vPortEnterCritical>
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3ce:	b25b      	sxtb	r3, r3
 800b3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d4:	d103      	bne.n	800b3de <xQueueReceive+0x12e>
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3e4:	b25b      	sxtb	r3, r3
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ea:	d103      	bne.n	800b3f4 <xQueueReceive+0x144>
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3f4:	f002 f96e 	bl	800d6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3f8:	1d3a      	adds	r2, r7, #4
 800b3fa:	f107 0310 	add.w	r3, r7, #16
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f001 f8c5 	bl	800c590 <xTaskCheckForTimeOut>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d123      	bne.n	800b454 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b40c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40e:	f000 faee 	bl	800b9ee <prvIsQueueEmpty>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d017      	beq.n	800b448 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	3324      	adds	r3, #36	; 0x24
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	4611      	mov	r1, r2
 800b420:	4618      	mov	r0, r3
 800b422:	f000 ffe5 	bl	800c3f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b428:	f000 fa8f 	bl	800b94a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b42c:	f000 fe0e 	bl	800c04c <xTaskResumeAll>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d189      	bne.n	800b34a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b436:	4b10      	ldr	r3, [pc, #64]	; (800b478 <xQueueReceive+0x1c8>)
 800b438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	e780      	b.n	800b34a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44a:	f000 fa7e 	bl	800b94a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b44e:	f000 fdfd 	bl	800c04c <xTaskResumeAll>
 800b452:	e77a      	b.n	800b34a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b456:	f000 fa78 	bl	800b94a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b45a:	f000 fdf7 	bl	800c04c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b45e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b460:	f000 fac5 	bl	800b9ee <prvIsQueueEmpty>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	f43f af6f 	beq.w	800b34a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b46c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3730      	adds	r7, #48	; 0x30
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b08e      	sub	sp, #56	; 0x38
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b486:	2300      	movs	r3, #0
 800b488:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b48e:	2300      	movs	r3, #0
 800b490:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10c      	bne.n	800b4b2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	b672      	cpsid	i
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	b662      	cpsie	i
 800b4ac:	623b      	str	r3, [r7, #32]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00c      	beq.n	800b4d4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	b672      	cpsid	i
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	b662      	cpsie	i
 800b4ce:	61fb      	str	r3, [r7, #28]
}
 800b4d0:	bf00      	nop
 800b4d2:	e7fe      	b.n	800b4d2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4d4:	f001 f9ba 	bl	800c84c <xTaskGetSchedulerState>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d102      	bne.n	800b4e4 <xQueueSemaphoreTake+0x68>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <xQueueSemaphoreTake+0x6c>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <xQueueSemaphoreTake+0x6e>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10c      	bne.n	800b508 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	b672      	cpsid	i
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	b662      	cpsie	i
 800b502:	61bb      	str	r3, [r7, #24]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b508:	f002 f8b0 	bl	800d66c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b510:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	2b00      	cmp	r3, #0
 800b516:	d024      	beq.n	800b562 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	1e5a      	subs	r2, r3, #1
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d104      	bne.n	800b532 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b528:	f001 fb0e 	bl	800cb48 <pvTaskIncrementMutexHeldCount>
 800b52c:	4602      	mov	r2, r0
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00f      	beq.n	800b55a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	3310      	adds	r3, #16
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 ffaa 	bl	800c498 <xTaskRemoveFromEventList>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b54a:	4b55      	ldr	r3, [pc, #340]	; (800b6a0 <xQueueSemaphoreTake+0x224>)
 800b54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b55a:	f002 f8bb 	bl	800d6d4 <vPortExitCritical>
				return pdPASS;
 800b55e:	2301      	movs	r3, #1
 800b560:	e099      	b.n	800b696 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d113      	bne.n	800b590 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00c      	beq.n	800b588 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	b672      	cpsid	i
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	b662      	cpsie	i
 800b582:	617b      	str	r3, [r7, #20]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b588:	f002 f8a4 	bl	800d6d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e082      	b.n	800b696 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b596:	f107 030c 	add.w	r3, r7, #12
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 ffe2 	bl	800c564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5a4:	f002 f896 	bl	800d6d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5a8:	f000 fd42 	bl	800c030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ac:	f002 f85e 	bl	800d66c <vPortEnterCritical>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5b6:	b25b      	sxtb	r3, r3
 800b5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5bc:	d103      	bne.n	800b5c6 <xQueueSemaphoreTake+0x14a>
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5cc:	b25b      	sxtb	r3, r3
 800b5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d2:	d103      	bne.n	800b5dc <xQueueSemaphoreTake+0x160>
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5dc:	f002 f87a 	bl	800d6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5e0:	463a      	mov	r2, r7
 800b5e2:	f107 030c 	add.w	r3, r7, #12
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 ffd1 	bl	800c590 <xTaskCheckForTimeOut>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d132      	bne.n	800b65a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f6:	f000 f9fa 	bl	800b9ee <prvIsQueueEmpty>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d026      	beq.n	800b64e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d109      	bne.n	800b61c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b608:	f002 f830 	bl	800d66c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	4618      	mov	r0, r3
 800b612:	f001 f939 	bl	800c888 <xTaskPriorityInherit>
 800b616:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b618:	f002 f85c 	bl	800d6d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61e:	3324      	adds	r3, #36	; 0x24
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	4611      	mov	r1, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fee3 	bl	800c3f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b62a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b62c:	f000 f98d 	bl	800b94a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b630:	f000 fd0c 	bl	800c04c <xTaskResumeAll>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	f47f af66 	bne.w	800b508 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b63c:	4b18      	ldr	r3, [pc, #96]	; (800b6a0 <xQueueSemaphoreTake+0x224>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	e75c      	b.n	800b508 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b650:	f000 f97b 	bl	800b94a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b654:	f000 fcfa 	bl	800c04c <xTaskResumeAll>
 800b658:	e756      	b.n	800b508 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b65a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b65c:	f000 f975 	bl	800b94a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b660:	f000 fcf4 	bl	800c04c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b666:	f000 f9c2 	bl	800b9ee <prvIsQueueEmpty>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f43f af4b 	beq.w	800b508 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00d      	beq.n	800b694 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b678:	f001 fff8 	bl	800d66c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b67c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b67e:	f000 f8bc 	bl	800b7fa <prvGetDisinheritPriorityAfterTimeout>
 800b682:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f001 f9d6 	bl	800ca3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b690:	f002 f820 	bl	800d6d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b696:	4618      	mov	r0, r3
 800b698:	3738      	adds	r7, #56	; 0x38
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	e000ed04 	.word	0xe000ed04

0800b6a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08e      	sub	sp, #56	; 0x38
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10c      	bne.n	800b6d4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6be:	b672      	cpsid	i
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	b662      	cpsie	i
 800b6ce:	623b      	str	r3, [r7, #32]
}
 800b6d0:	bf00      	nop
 800b6d2:	e7fe      	b.n	800b6d2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <xQueueReceiveFromISR+0x3e>
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <xQueueReceiveFromISR+0x42>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e000      	b.n	800b6e8 <xQueueReceiveFromISR+0x44>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10c      	bne.n	800b706 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	b672      	cpsid	i
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	b662      	cpsie	i
 800b700:	61fb      	str	r3, [r7, #28]
}
 800b702:	bf00      	nop
 800b704:	e7fe      	b.n	800b704 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b706:	f002 f899 	bl	800d83c <vPortValidateInterruptPriority>
	__asm volatile
 800b70a:	f3ef 8211 	mrs	r2, BASEPRI
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	b672      	cpsid	i
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	b662      	cpsie	i
 800b722:	61ba      	str	r2, [r7, #24]
 800b724:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b726:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b728:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	2b00      	cmp	r3, #0
 800b734:	d02f      	beq.n	800b796 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b744:	f000 f8db 	bl	800b8fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	1e5a      	subs	r2, r3, #1
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d112      	bne.n	800b780 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d016      	beq.n	800b790 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	3310      	adds	r3, #16
 800b766:	4618      	mov	r0, r3
 800b768:	f000 fe96 	bl	800c498 <xTaskRemoveFromEventList>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00e      	beq.n	800b790 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00b      	beq.n	800b790 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	e007      	b.n	800b790 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b784:	3301      	adds	r3, #1
 800b786:	b2db      	uxtb	r3, r3
 800b788:	b25a      	sxtb	r2, r3
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b790:	2301      	movs	r3, #1
 800b792:	637b      	str	r3, [r7, #52]	; 0x34
 800b794:	e001      	b.n	800b79a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b796:	2300      	movs	r3, #0
 800b798:	637b      	str	r3, [r7, #52]	; 0x34
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	f383 8811 	msr	BASEPRI, r3
}
 800b7a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3738      	adds	r7, #56	; 0x38
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10c      	bne.n	800b7dc <vQueueDelete+0x2c>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	b672      	cpsid	i
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	b662      	cpsie	i
 800b7d6:	60bb      	str	r3, [r7, #8]
}
 800b7d8:	bf00      	nop
 800b7da:	e7fe      	b.n	800b7da <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f95f 	bl	800baa0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f002 f933 	bl	800da58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b7f2:	bf00      	nop
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e001      	b.n	800b81c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b81c:	68fb      	ldr	r3, [r7, #12]
	}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b086      	sub	sp, #24
 800b82e:	af00      	add	r7, sp, #0
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10d      	bne.n	800b864 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d14d      	bne.n	800b8ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	4618      	mov	r0, r3
 800b856:	f001 f87f 	bl	800c958 <xTaskPriorityDisinherit>
 800b85a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	609a      	str	r2, [r3, #8]
 800b862:	e043      	b.n	800b8ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d119      	bne.n	800b89e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6858      	ldr	r0, [r3, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b872:	461a      	mov	r2, r3
 800b874:	68b9      	ldr	r1, [r7, #8]
 800b876:	f002 fa2f 	bl	800dcd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	685a      	ldr	r2, [r3, #4]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b882:	441a      	add	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	429a      	cmp	r2, r3
 800b892:	d32b      	bcc.n	800b8ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	605a      	str	r2, [r3, #4]
 800b89c:	e026      	b.n	800b8ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	68d8      	ldr	r0, [r3, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	68b9      	ldr	r1, [r7, #8]
 800b8aa:	f002 fa15 	bl	800dcd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b6:	425b      	negs	r3, r3
 800b8b8:	441a      	add	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68da      	ldr	r2, [r3, #12]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d207      	bcs.n	800b8da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d2:	425b      	negs	r3, r3
 800b8d4:	441a      	add	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d105      	bne.n	800b8ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b8f4:	697b      	ldr	r3, [r7, #20]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d018      	beq.n	800b942 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b918:	441a      	add	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68da      	ldr	r2, [r3, #12]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	429a      	cmp	r2, r3
 800b928:	d303      	bcc.n	800b932 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68d9      	ldr	r1, [r3, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	461a      	mov	r2, r3
 800b93c:	6838      	ldr	r0, [r7, #0]
 800b93e:	f002 f9cb 	bl	800dcd8 <memcpy>
	}
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b952:	f001 fe8b 	bl	800d66c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b95c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b95e:	e011      	b.n	800b984 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	d012      	beq.n	800b98e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3324      	adds	r3, #36	; 0x24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f000 fd93 	bl	800c498 <xTaskRemoveFromEventList>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b978:	f000 fe70 	bl	800c65c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	3b01      	subs	r3, #1
 800b980:	b2db      	uxtb	r3, r3
 800b982:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	dce9      	bgt.n	800b960 <prvUnlockQueue+0x16>
 800b98c:	e000      	b.n	800b990 <prvUnlockQueue+0x46>
					break;
 800b98e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	22ff      	movs	r2, #255	; 0xff
 800b994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b998:	f001 fe9c 	bl	800d6d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b99c:	f001 fe66 	bl	800d66c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9a8:	e011      	b.n	800b9ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d012      	beq.n	800b9d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3310      	adds	r3, #16
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fd6e 	bl	800c498 <xTaskRemoveFromEventList>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9c2:	f000 fe4b 	bl	800c65c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dce9      	bgt.n	800b9aa <prvUnlockQueue+0x60>
 800b9d6:	e000      	b.n	800b9da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	22ff      	movs	r2, #255	; 0xff
 800b9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b9e2:	f001 fe77 	bl	800d6d4 <vPortExitCritical>
}
 800b9e6:	bf00      	nop
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9f6:	f001 fe39 	bl	800d66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d102      	bne.n	800ba08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba02:	2301      	movs	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]
 800ba06:	e001      	b.n	800ba0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba0c:	f001 fe62 	bl	800d6d4 <vPortExitCritical>

	return xReturn;
 800ba10:	68fb      	ldr	r3, [r7, #12]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba22:	f001 fe23 	bl	800d66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d102      	bne.n	800ba38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba32:	2301      	movs	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	e001      	b.n	800ba3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba3c:	f001 fe4a 	bl	800d6d4 <vPortExitCritical>

	return xReturn;
 800ba40:	68fb      	ldr	r3, [r7, #12]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	e014      	b.n	800ba86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba5c:	4a0f      	ldr	r2, [pc, #60]	; (800ba9c <vQueueAddToRegistry+0x50>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10b      	bne.n	800ba80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba68:	490c      	ldr	r1, [pc, #48]	; (800ba9c <vQueueAddToRegistry+0x50>)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba72:	4a0a      	ldr	r2, [pc, #40]	; (800ba9c <vQueueAddToRegistry+0x50>)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	4413      	add	r3, r2
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba7e:	e006      	b.n	800ba8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3301      	adds	r3, #1
 800ba84:	60fb      	str	r3, [r7, #12]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b07      	cmp	r3, #7
 800ba8a:	d9e7      	bls.n	800ba5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20000f14 	.word	0x20000f14

0800baa0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	e016      	b.n	800badc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800baae:	4a10      	ldr	r2, [pc, #64]	; (800baf0 <vQueueUnregisterQueue+0x50>)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4413      	add	r3, r2
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	429a      	cmp	r2, r3
 800babc:	d10b      	bne.n	800bad6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800babe:	4a0c      	ldr	r2, [pc, #48]	; (800baf0 <vQueueUnregisterQueue+0x50>)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2100      	movs	r1, #0
 800bac4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bac8:	4a09      	ldr	r2, [pc, #36]	; (800baf0 <vQueueUnregisterQueue+0x50>)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	4413      	add	r3, r2
 800bad0:	2200      	movs	r2, #0
 800bad2:	605a      	str	r2, [r3, #4]
				break;
 800bad4:	e006      	b.n	800bae4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3301      	adds	r3, #1
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b07      	cmp	r3, #7
 800bae0:	d9e5      	bls.n	800baae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bae2:	bf00      	nop
 800bae4:	bf00      	nop
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	20000f14 	.word	0x20000f14

0800baf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb04:	f001 fdb2 	bl	800d66c <vPortEnterCritical>
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb0e:	b25b      	sxtb	r3, r3
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb14:	d103      	bne.n	800bb1e <vQueueWaitForMessageRestricted+0x2a>
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb24:	b25b      	sxtb	r3, r3
 800bb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2a:	d103      	bne.n	800bb34 <vQueueWaitForMessageRestricted+0x40>
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb34:	f001 fdce 	bl	800d6d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d106      	bne.n	800bb4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	3324      	adds	r3, #36	; 0x24
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fc77 	bl	800c43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb4e:	6978      	ldr	r0, [r7, #20]
 800bb50:	f7ff fefb 	bl	800b94a <prvUnlockQueue>
	}
 800bb54:	bf00      	nop
 800bb56:	3718      	adds	r7, #24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08e      	sub	sp, #56	; 0x38
 800bb60:	af04      	add	r7, sp, #16
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10c      	bne.n	800bb8a <xTaskCreateStatic+0x2e>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	b672      	cpsid	i
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	b662      	cpsie	i
 800bb84:	623b      	str	r3, [r7, #32]
}
 800bb86:	bf00      	nop
 800bb88:	e7fe      	b.n	800bb88 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10c      	bne.n	800bbaa <xTaskCreateStatic+0x4e>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	b672      	cpsid	i
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	b662      	cpsie	i
 800bba4:	61fb      	str	r3, [r7, #28]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbaa:	23bc      	movs	r3, #188	; 0xbc
 800bbac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2bbc      	cmp	r3, #188	; 0xbc
 800bbb2:	d00c      	beq.n	800bbce <xTaskCreateStatic+0x72>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	b672      	cpsid	i
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	b662      	cpsie	i
 800bbc8:	61bb      	str	r3, [r7, #24]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01e      	beq.n	800bc14 <xTaskCreateStatic+0xb8>
 800bbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01b      	beq.n	800bc14 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	2202      	movs	r2, #2
 800bbea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbee:	2300      	movs	r3, #0
 800bbf0:	9303      	str	r3, [sp, #12]
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	9302      	str	r3, [sp, #8]
 800bbf6:	f107 0314 	add.w	r3, r7, #20
 800bbfa:	9301      	str	r3, [sp, #4]
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 f850 	bl	800bcac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc0e:	f000 f8f5 	bl	800bdfc <prvAddNewTaskToReadyList>
 800bc12:	e001      	b.n	800bc18 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc18:	697b      	ldr	r3, [r7, #20]
	}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3728      	adds	r7, #40	; 0x28
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b08c      	sub	sp, #48	; 0x30
 800bc26:	af04      	add	r7, sp, #16
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	603b      	str	r3, [r7, #0]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 fe44 	bl	800d8c4 <pvPortMalloc>
 800bc3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00e      	beq.n	800bc62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc44:	20bc      	movs	r0, #188	; 0xbc
 800bc46:	f001 fe3d 	bl	800d8c4 <pvPortMalloc>
 800bc4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	631a      	str	r2, [r3, #48]	; 0x30
 800bc58:	e005      	b.n	800bc66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc5a:	6978      	ldr	r0, [r7, #20]
 800bc5c:	f001 fefc 	bl	800da58 <vPortFree>
 800bc60:	e001      	b.n	800bc66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d017      	beq.n	800bc9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc74:	88fa      	ldrh	r2, [r7, #6]
 800bc76:	2300      	movs	r3, #0
 800bc78:	9303      	str	r3, [sp, #12]
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	9302      	str	r3, [sp, #8]
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	68b9      	ldr	r1, [r7, #8]
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 f80e 	bl	800bcac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc90:	69f8      	ldr	r0, [r7, #28]
 800bc92:	f000 f8b3 	bl	800bdfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc96:	2301      	movs	r3, #1
 800bc98:	61bb      	str	r3, [r7, #24]
 800bc9a:	e002      	b.n	800bca2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bca2:	69bb      	ldr	r3, [r7, #24]
	}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3720      	adds	r7, #32
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	21a5      	movs	r1, #165	; 0xa5
 800bcc6:	f002 f815 	bl	800dcf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bcd4:	440b      	add	r3, r1
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	f023 0307 	bic.w	r3, r3, #7
 800bce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00c      	beq.n	800bd08 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	b672      	cpsid	i
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	b662      	cpsie	i
 800bd02:	617b      	str	r3, [r7, #20]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d01f      	beq.n	800bd4e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	e012      	b.n	800bd3a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	4413      	add	r3, r2
 800bd1a:	7819      	ldrb	r1, [r3, #0]
 800bd1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	4413      	add	r3, r2
 800bd22:	3334      	adds	r3, #52	; 0x34
 800bd24:	460a      	mov	r2, r1
 800bd26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d006      	beq.n	800bd42 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	3301      	adds	r3, #1
 800bd38:	61fb      	str	r3, [r7, #28]
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	2b0f      	cmp	r3, #15
 800bd3e:	d9e9      	bls.n	800bd14 <prvInitialiseNewTask+0x68>
 800bd40:	e000      	b.n	800bd44 <prvInitialiseNewTask+0x98>
			{
				break;
 800bd42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd4c:	e003      	b.n	800bd56 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	2b37      	cmp	r3, #55	; 0x37
 800bd5a:	d901      	bls.n	800bd60 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd5c:	2337      	movs	r3, #55	; 0x37
 800bd5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6e:	2200      	movs	r2, #0
 800bd70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	3304      	adds	r3, #4
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fd4c 	bl	800a814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7e:	3318      	adds	r3, #24
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fd47 	bl	800a814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	2200      	movs	r2, #0
 800bda8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	3354      	adds	r3, #84	; 0x54
 800bdb0:	2260      	movs	r2, #96	; 0x60
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f001 ff9d 	bl	800dcf4 <memset>
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	4a0c      	ldr	r2, [pc, #48]	; (800bdf0 <prvInitialiseNewTask+0x144>)
 800bdbe:	659a      	str	r2, [r3, #88]	; 0x58
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	4a0c      	ldr	r2, [pc, #48]	; (800bdf4 <prvInitialiseNewTask+0x148>)
 800bdc4:	65da      	str	r2, [r3, #92]	; 0x5c
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	4a0b      	ldr	r2, [pc, #44]	; (800bdf8 <prvInitialiseNewTask+0x14c>)
 800bdca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	69b8      	ldr	r0, [r7, #24]
 800bdd2:	f001 fb3f 	bl	800d454 <pxPortInitialiseStack>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d002      	beq.n	800bde8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bde8:	bf00      	nop
 800bdea:	3720      	adds	r7, #32
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	0800e6a0 	.word	0x0800e6a0
 800bdf4:	0800e6c0 	.word	0x0800e6c0
 800bdf8:	0800e680 	.word	0x0800e680

0800bdfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be04:	f001 fc32 	bl	800d66c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be08:	4b2d      	ldr	r3, [pc, #180]	; (800bec0 <prvAddNewTaskToReadyList+0xc4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	4a2c      	ldr	r2, [pc, #176]	; (800bec0 <prvAddNewTaskToReadyList+0xc4>)
 800be10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be12:	4b2c      	ldr	r3, [pc, #176]	; (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be1a:	4a2a      	ldr	r2, [pc, #168]	; (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be20:	4b27      	ldr	r3, [pc, #156]	; (800bec0 <prvAddNewTaskToReadyList+0xc4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d110      	bne.n	800be4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be28:	f000 fc3c 	bl	800c6a4 <prvInitialiseTaskLists>
 800be2c:	e00d      	b.n	800be4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be2e:	4b26      	ldr	r3, [pc, #152]	; (800bec8 <prvAddNewTaskToReadyList+0xcc>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be36:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	429a      	cmp	r2, r3
 800be42:	d802      	bhi.n	800be4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be44:	4a1f      	ldr	r2, [pc, #124]	; (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be4a:	4b20      	ldr	r3, [pc, #128]	; (800becc <prvAddNewTaskToReadyList+0xd0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3301      	adds	r3, #1
 800be50:	4a1e      	ldr	r2, [pc, #120]	; (800becc <prvAddNewTaskToReadyList+0xd0>)
 800be52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be54:	4b1d      	ldr	r3, [pc, #116]	; (800becc <prvAddNewTaskToReadyList+0xd0>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be60:	4b1b      	ldr	r3, [pc, #108]	; (800bed0 <prvAddNewTaskToReadyList+0xd4>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d903      	bls.n	800be70 <prvAddNewTaskToReadyList+0x74>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	4a18      	ldr	r2, [pc, #96]	; (800bed0 <prvAddNewTaskToReadyList+0xd4>)
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be74:	4613      	mov	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4a15      	ldr	r2, [pc, #84]	; (800bed4 <prvAddNewTaskToReadyList+0xd8>)
 800be7e:	441a      	add	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3304      	adds	r3, #4
 800be84:	4619      	mov	r1, r3
 800be86:	4610      	mov	r0, r2
 800be88:	f7fe fcd1 	bl	800a82e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be8c:	f001 fc22 	bl	800d6d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be90:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <prvAddNewTaskToReadyList+0xcc>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00e      	beq.n	800beb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <prvAddNewTaskToReadyList+0xc8>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d207      	bcs.n	800beb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bea6:	4b0c      	ldr	r3, [pc, #48]	; (800bed8 <prvAddNewTaskToReadyList+0xdc>)
 800bea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beb6:	bf00      	nop
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20001428 	.word	0x20001428
 800bec4:	20000f54 	.word	0x20000f54
 800bec8:	20001434 	.word	0x20001434
 800becc:	20001444 	.word	0x20001444
 800bed0:	20001430 	.word	0x20001430
 800bed4:	20000f58 	.word	0x20000f58
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bee4:	2300      	movs	r3, #0
 800bee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d019      	beq.n	800bf22 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beee:	4b14      	ldr	r3, [pc, #80]	; (800bf40 <vTaskDelay+0x64>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00c      	beq.n	800bf10 <vTaskDelay+0x34>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befa:	b672      	cpsid	i
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	b662      	cpsie	i
 800bf0a:	60bb      	str	r3, [r7, #8]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bf10:	f000 f88e 	bl	800c030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf14:	2100      	movs	r1, #0
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fe2a 	bl	800cb70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf1c:	f000 f896 	bl	800c04c <xTaskResumeAll>
 800bf20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d107      	bne.n	800bf38 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <vTaskDelay+0x68>)
 800bf2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	20001450 	.word	0x20001450
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	; 0x28
 800bf4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf56:	463a      	mov	r2, r7
 800bf58:	1d39      	adds	r1, r7, #4
 800bf5a:	f107 0308 	add.w	r3, r7, #8
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fc04 	bl	800a76c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	9202      	str	r2, [sp, #8]
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	2300      	movs	r3, #0
 800bf74:	460a      	mov	r2, r1
 800bf76:	4926      	ldr	r1, [pc, #152]	; (800c010 <vTaskStartScheduler+0xc8>)
 800bf78:	4826      	ldr	r0, [pc, #152]	; (800c014 <vTaskStartScheduler+0xcc>)
 800bf7a:	f7ff fdef 	bl	800bb5c <xTaskCreateStatic>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	4a25      	ldr	r2, [pc, #148]	; (800c018 <vTaskStartScheduler+0xd0>)
 800bf82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf84:	4b24      	ldr	r3, [pc, #144]	; (800c018 <vTaskStartScheduler+0xd0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	e001      	b.n	800bf96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d102      	bne.n	800bfa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf9c:	f000 fe3c 	bl	800cc18 <xTimerCreateTimerTask>
 800bfa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d11d      	bne.n	800bfe4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	b672      	cpsid	i
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	b662      	cpsie	i
 800bfbc:	613b      	str	r3, [r7, #16]
}
 800bfbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfc0:	4b16      	ldr	r3, [pc, #88]	; (800c01c <vTaskStartScheduler+0xd4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3354      	adds	r3, #84	; 0x54
 800bfc6:	4a16      	ldr	r2, [pc, #88]	; (800c020 <vTaskStartScheduler+0xd8>)
 800bfc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfca:	4b16      	ldr	r3, [pc, #88]	; (800c024 <vTaskStartScheduler+0xdc>)
 800bfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <vTaskStartScheduler+0xe0>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfd8:	4b14      	ldr	r3, [pc, #80]	; (800c02c <vTaskStartScheduler+0xe4>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfde:	f001 fac7 	bl	800d570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfe2:	e010      	b.n	800c006 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfea:	d10c      	bne.n	800c006 <vTaskStartScheduler+0xbe>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	b672      	cpsid	i
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	b662      	cpsie	i
 800c000:	60fb      	str	r3, [r7, #12]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <vTaskStartScheduler+0xbc>
}
 800c006:	bf00      	nop
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	0800e204 	.word	0x0800e204
 800c014:	0800c675 	.word	0x0800c675
 800c018:	2000144c 	.word	0x2000144c
 800c01c:	20000f54 	.word	0x20000f54
 800c020:	20000014 	.word	0x20000014
 800c024:	20001448 	.word	0x20001448
 800c028:	20001434 	.word	0x20001434
 800c02c:	2000142c 	.word	0x2000142c

0800c030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c030:	b480      	push	{r7}
 800c032:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c034:	4b04      	ldr	r3, [pc, #16]	; (800c048 <vTaskSuspendAll+0x18>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	4a03      	ldr	r2, [pc, #12]	; (800c048 <vTaskSuspendAll+0x18>)
 800c03c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c03e:	bf00      	nop
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	20001450 	.word	0x20001450

0800c04c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c05a:	4b43      	ldr	r3, [pc, #268]	; (800c168 <xTaskResumeAll+0x11c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10c      	bne.n	800c07c <xTaskResumeAll+0x30>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	b672      	cpsid	i
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	b662      	cpsie	i
 800c076:	603b      	str	r3, [r7, #0]
}
 800c078:	bf00      	nop
 800c07a:	e7fe      	b.n	800c07a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c07c:	f001 faf6 	bl	800d66c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c080:	4b39      	ldr	r3, [pc, #228]	; (800c168 <xTaskResumeAll+0x11c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3b01      	subs	r3, #1
 800c086:	4a38      	ldr	r2, [pc, #224]	; (800c168 <xTaskResumeAll+0x11c>)
 800c088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c08a:	4b37      	ldr	r3, [pc, #220]	; (800c168 <xTaskResumeAll+0x11c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d162      	bne.n	800c158 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c092:	4b36      	ldr	r3, [pc, #216]	; (800c16c <xTaskResumeAll+0x120>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d05e      	beq.n	800c158 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c09a:	e02f      	b.n	800c0fc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09c:	4b34      	ldr	r3, [pc, #208]	; (800c170 <xTaskResumeAll+0x124>)
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3318      	adds	r3, #24
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe fc1d 	bl	800a8e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fc18 	bl	800a8e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0bc:	4b2d      	ldr	r3, [pc, #180]	; (800c174 <xTaskResumeAll+0x128>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d903      	bls.n	800c0cc <xTaskResumeAll+0x80>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c8:	4a2a      	ldr	r2, [pc, #168]	; (800c174 <xTaskResumeAll+0x128>)
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4a27      	ldr	r2, [pc, #156]	; (800c178 <xTaskResumeAll+0x12c>)
 800c0da:	441a      	add	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	f7fe fba3 	bl	800a82e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ec:	4b23      	ldr	r3, [pc, #140]	; (800c17c <xTaskResumeAll+0x130>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d302      	bcc.n	800c0fc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c0f6:	4b22      	ldr	r3, [pc, #136]	; (800c180 <xTaskResumeAll+0x134>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0fc:	4b1c      	ldr	r3, [pc, #112]	; (800c170 <xTaskResumeAll+0x124>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1cb      	bne.n	800c09c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c10a:	f000 fb6f 	bl	800c7ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c10e:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <xTaskResumeAll+0x138>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d010      	beq.n	800c13c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c11a:	f000 f847 	bl	800c1ac <xTaskIncrementTick>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c124:	4b16      	ldr	r3, [pc, #88]	; (800c180 <xTaskResumeAll+0x134>)
 800c126:	2201      	movs	r2, #1
 800c128:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1f1      	bne.n	800c11a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c136:	4b13      	ldr	r3, [pc, #76]	; (800c184 <xTaskResumeAll+0x138>)
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c13c:	4b10      	ldr	r3, [pc, #64]	; (800c180 <xTaskResumeAll+0x134>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d009      	beq.n	800c158 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c144:	2301      	movs	r3, #1
 800c146:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c148:	4b0f      	ldr	r3, [pc, #60]	; (800c188 <xTaskResumeAll+0x13c>)
 800c14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c158:	f001 fabc 	bl	800d6d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c15c:	68bb      	ldr	r3, [r7, #8]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20001450 	.word	0x20001450
 800c16c:	20001428 	.word	0x20001428
 800c170:	200013e8 	.word	0x200013e8
 800c174:	20001430 	.word	0x20001430
 800c178:	20000f58 	.word	0x20000f58
 800c17c:	20000f54 	.word	0x20000f54
 800c180:	2000143c 	.word	0x2000143c
 800c184:	20001438 	.word	0x20001438
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c192:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <xTaskGetTickCount+0x1c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c198:	687b      	ldr	r3, [r7, #4]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	2000142c 	.word	0x2000142c

0800c1ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1b6:	4b50      	ldr	r3, [pc, #320]	; (800c2f8 <xTaskIncrementTick+0x14c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f040 808b 	bne.w	800c2d6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1c0:	4b4e      	ldr	r3, [pc, #312]	; (800c2fc <xTaskIncrementTick+0x150>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1c8:	4a4c      	ldr	r2, [pc, #304]	; (800c2fc <xTaskIncrementTick+0x150>)
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d122      	bne.n	800c21a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1d4:	4b4a      	ldr	r3, [pc, #296]	; (800c300 <xTaskIncrementTick+0x154>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00c      	beq.n	800c1f8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	b672      	cpsid	i
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	b662      	cpsie	i
 800c1f2:	603b      	str	r3, [r7, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <xTaskIncrementTick+0x4a>
 800c1f8:	4b41      	ldr	r3, [pc, #260]	; (800c300 <xTaskIncrementTick+0x154>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	4b41      	ldr	r3, [pc, #260]	; (800c304 <xTaskIncrementTick+0x158>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a3f      	ldr	r2, [pc, #252]	; (800c300 <xTaskIncrementTick+0x154>)
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	4a3f      	ldr	r2, [pc, #252]	; (800c304 <xTaskIncrementTick+0x158>)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	4b3e      	ldr	r3, [pc, #248]	; (800c308 <xTaskIncrementTick+0x15c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3301      	adds	r3, #1
 800c212:	4a3d      	ldr	r2, [pc, #244]	; (800c308 <xTaskIncrementTick+0x15c>)
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	f000 fae9 	bl	800c7ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c21a:	4b3c      	ldr	r3, [pc, #240]	; (800c30c <xTaskIncrementTick+0x160>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	429a      	cmp	r2, r3
 800c222:	d349      	bcc.n	800c2b8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <xTaskIncrementTick+0x154>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d104      	bne.n	800c238 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c22e:	4b37      	ldr	r3, [pc, #220]	; (800c30c <xTaskIncrementTick+0x160>)
 800c230:	f04f 32ff 	mov.w	r2, #4294967295
 800c234:	601a      	str	r2, [r3, #0]
					break;
 800c236:	e03f      	b.n	800c2b8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c238:	4b31      	ldr	r3, [pc, #196]	; (800c300 <xTaskIncrementTick+0x154>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d203      	bcs.n	800c258 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c250:	4a2e      	ldr	r2, [pc, #184]	; (800c30c <xTaskIncrementTick+0x160>)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c256:	e02f      	b.n	800c2b8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	3304      	adds	r3, #4
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fe fb43 	bl	800a8e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c266:	2b00      	cmp	r3, #0
 800c268:	d004      	beq.n	800c274 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	3318      	adds	r3, #24
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fb3a 	bl	800a8e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c278:	4b25      	ldr	r3, [pc, #148]	; (800c310 <xTaskIncrementTick+0x164>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d903      	bls.n	800c288 <xTaskIncrementTick+0xdc>
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	4a22      	ldr	r2, [pc, #136]	; (800c310 <xTaskIncrementTick+0x164>)
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4a1f      	ldr	r2, [pc, #124]	; (800c314 <xTaskIncrementTick+0x168>)
 800c296:	441a      	add	r2, r3
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	3304      	adds	r3, #4
 800c29c:	4619      	mov	r1, r3
 800c29e:	4610      	mov	r0, r2
 800c2a0:	f7fe fac5 	bl	800a82e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a8:	4b1b      	ldr	r3, [pc, #108]	; (800c318 <xTaskIncrementTick+0x16c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d3b8      	bcc.n	800c224 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2b6:	e7b5      	b.n	800c224 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2b8:	4b17      	ldr	r3, [pc, #92]	; (800c318 <xTaskIncrementTick+0x16c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2be:	4915      	ldr	r1, [pc, #84]	; (800c314 <xTaskIncrementTick+0x168>)
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	440b      	add	r3, r1
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d907      	bls.n	800c2e0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	e004      	b.n	800c2e0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <xTaskIncrementTick+0x170>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	4a0f      	ldr	r2, [pc, #60]	; (800c31c <xTaskIncrementTick+0x170>)
 800c2de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <xTaskIncrementTick+0x174>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c2ec:	697b      	ldr	r3, [r7, #20]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20001450 	.word	0x20001450
 800c2fc:	2000142c 	.word	0x2000142c
 800c300:	200013e0 	.word	0x200013e0
 800c304:	200013e4 	.word	0x200013e4
 800c308:	20001440 	.word	0x20001440
 800c30c:	20001448 	.word	0x20001448
 800c310:	20001430 	.word	0x20001430
 800c314:	20000f58 	.word	0x20000f58
 800c318:	20000f54 	.word	0x20000f54
 800c31c:	20001438 	.word	0x20001438
 800c320:	2000143c 	.word	0x2000143c

0800c324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c32a:	4b2b      	ldr	r3, [pc, #172]	; (800c3d8 <vTaskSwitchContext+0xb4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c332:	4b2a      	ldr	r3, [pc, #168]	; (800c3dc <vTaskSwitchContext+0xb8>)
 800c334:	2201      	movs	r2, #1
 800c336:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c338:	e048      	b.n	800c3cc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800c33a:	4b28      	ldr	r3, [pc, #160]	; (800c3dc <vTaskSwitchContext+0xb8>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c340:	4b27      	ldr	r3, [pc, #156]	; (800c3e0 <vTaskSwitchContext+0xbc>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	e012      	b.n	800c36e <vTaskSwitchContext+0x4a>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10c      	bne.n	800c368 <vTaskSwitchContext+0x44>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	b672      	cpsid	i
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	b662      	cpsie	i
 800c362:	607b      	str	r3, [r7, #4]
}
 800c364:	bf00      	nop
 800c366:	e7fe      	b.n	800c366 <vTaskSwitchContext+0x42>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	60fb      	str	r3, [r7, #12]
 800c36e:	491d      	ldr	r1, [pc, #116]	; (800c3e4 <vTaskSwitchContext+0xc0>)
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4613      	mov	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4413      	add	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	440b      	add	r3, r1
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0e2      	beq.n	800c348 <vTaskSwitchContext+0x24>
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	4613      	mov	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4413      	add	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4a15      	ldr	r2, [pc, #84]	; (800c3e4 <vTaskSwitchContext+0xc0>)
 800c38e:	4413      	add	r3, r2
 800c390:	60bb      	str	r3, [r7, #8]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	605a      	str	r2, [r3, #4]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d104      	bne.n	800c3b2 <vTaskSwitchContext+0x8e>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	605a      	str	r2, [r3, #4]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	4a0b      	ldr	r2, [pc, #44]	; (800c3e8 <vTaskSwitchContext+0xc4>)
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	4a08      	ldr	r2, [pc, #32]	; (800c3e0 <vTaskSwitchContext+0xbc>)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3c2:	4b09      	ldr	r3, [pc, #36]	; (800c3e8 <vTaskSwitchContext+0xc4>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3354      	adds	r3, #84	; 0x54
 800c3c8:	4a08      	ldr	r2, [pc, #32]	; (800c3ec <vTaskSwitchContext+0xc8>)
 800c3ca:	6013      	str	r3, [r2, #0]
}
 800c3cc:	bf00      	nop
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	20001450 	.word	0x20001450
 800c3dc:	2000143c 	.word	0x2000143c
 800c3e0:	20001430 	.word	0x20001430
 800c3e4:	20000f58 	.word	0x20000f58
 800c3e8:	20000f54 	.word	0x20000f54
 800c3ec:	20000014 	.word	0x20000014

0800c3f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10c      	bne.n	800c41a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	b672      	cpsid	i
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	b662      	cpsie	i
 800c414:	60fb      	str	r3, [r7, #12]
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c41a:	4b07      	ldr	r3, [pc, #28]	; (800c438 <vTaskPlaceOnEventList+0x48>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3318      	adds	r3, #24
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7fe fa27 	bl	800a876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c428:	2101      	movs	r1, #1
 800c42a:	6838      	ldr	r0, [r7, #0]
 800c42c:	f000 fba0 	bl	800cb70 <prvAddCurrentTaskToDelayedList>
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20000f54 	.word	0x20000f54

0800c43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10c      	bne.n	800c468 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	b672      	cpsid	i
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	b662      	cpsie	i
 800c462:	617b      	str	r3, [r7, #20]
}
 800c464:	bf00      	nop
 800c466:	e7fe      	b.n	800c466 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c468:	4b0a      	ldr	r3, [pc, #40]	; (800c494 <vTaskPlaceOnEventListRestricted+0x58>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3318      	adds	r3, #24
 800c46e:	4619      	mov	r1, r3
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f7fe f9dc 	bl	800a82e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c47c:	f04f 33ff 	mov.w	r3, #4294967295
 800c480:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	68b8      	ldr	r0, [r7, #8]
 800c486:	f000 fb73 	bl	800cb70 <prvAddCurrentTaskToDelayedList>
	}
 800c48a:	bf00      	nop
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20000f54 	.word	0x20000f54

0800c498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10c      	bne.n	800c4c8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	b672      	cpsid	i
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	b662      	cpsie	i
 800c4c2:	60fb      	str	r3, [r7, #12]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	3318      	adds	r3, #24
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fe fa0b 	bl	800a8e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4d2:	4b1e      	ldr	r3, [pc, #120]	; (800c54c <xTaskRemoveFromEventList+0xb4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d11d      	bne.n	800c516 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe fa02 	bl	800a8e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e8:	4b19      	ldr	r3, [pc, #100]	; (800c550 <xTaskRemoveFromEventList+0xb8>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d903      	bls.n	800c4f8 <xTaskRemoveFromEventList+0x60>
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	4a16      	ldr	r2, [pc, #88]	; (800c550 <xTaskRemoveFromEventList+0xb8>)
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4a13      	ldr	r2, [pc, #76]	; (800c554 <xTaskRemoveFromEventList+0xbc>)
 800c506:	441a      	add	r2, r3
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	4610      	mov	r0, r2
 800c510:	f7fe f98d 	bl	800a82e <vListInsertEnd>
 800c514:	e005      	b.n	800c522 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	3318      	adds	r3, #24
 800c51a:	4619      	mov	r1, r3
 800c51c:	480e      	ldr	r0, [pc, #56]	; (800c558 <xTaskRemoveFromEventList+0xc0>)
 800c51e:	f7fe f986 	bl	800a82e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c526:	4b0d      	ldr	r3, [pc, #52]	; (800c55c <xTaskRemoveFromEventList+0xc4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d905      	bls.n	800c53c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c530:	2301      	movs	r3, #1
 800c532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c534:	4b0a      	ldr	r3, [pc, #40]	; (800c560 <xTaskRemoveFromEventList+0xc8>)
 800c536:	2201      	movs	r2, #1
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	e001      	b.n	800c540 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c540:	697b      	ldr	r3, [r7, #20]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20001450 	.word	0x20001450
 800c550:	20001430 	.word	0x20001430
 800c554:	20000f58 	.word	0x20000f58
 800c558:	200013e8 	.word	0x200013e8
 800c55c:	20000f54 	.word	0x20000f54
 800c560:	2000143c 	.word	0x2000143c

0800c564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c56c:	4b06      	ldr	r3, [pc, #24]	; (800c588 <vTaskInternalSetTimeOutState+0x24>)
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c574:	4b05      	ldr	r3, [pc, #20]	; (800c58c <vTaskInternalSetTimeOutState+0x28>)
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	605a      	str	r2, [r3, #4]
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	20001440 	.word	0x20001440
 800c58c:	2000142c 	.word	0x2000142c

0800c590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b088      	sub	sp, #32
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10c      	bne.n	800c5ba <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	b672      	cpsid	i
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	b662      	cpsie	i
 800c5b4:	613b      	str	r3, [r7, #16]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10c      	bne.n	800c5da <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	b672      	cpsid	i
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	b662      	cpsie	i
 800c5d4:	60fb      	str	r3, [r7, #12]
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c5da:	f001 f847 	bl	800d66c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5de:	4b1d      	ldr	r3, [pc, #116]	; (800c654 <xTaskCheckForTimeOut+0xc4>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	69ba      	ldr	r2, [r7, #24]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f6:	d102      	bne.n	800c5fe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	e023      	b.n	800c646 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	4b15      	ldr	r3, [pc, #84]	; (800c658 <xTaskCheckForTimeOut+0xc8>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	d007      	beq.n	800c61a <xTaskCheckForTimeOut+0x8a>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	429a      	cmp	r2, r3
 800c612:	d302      	bcc.n	800c61a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c614:	2301      	movs	r3, #1
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	e015      	b.n	800c646 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	429a      	cmp	r2, r3
 800c622:	d20b      	bcs.n	800c63c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	1ad2      	subs	r2, r2, r3
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff ff97 	bl	800c564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c636:	2300      	movs	r3, #0
 800c638:	61fb      	str	r3, [r7, #28]
 800c63a:	e004      	b.n	800c646 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c642:	2301      	movs	r3, #1
 800c644:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c646:	f001 f845 	bl	800d6d4 <vPortExitCritical>

	return xReturn;
 800c64a:	69fb      	ldr	r3, [r7, #28]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	2000142c 	.word	0x2000142c
 800c658:	20001440 	.word	0x20001440

0800c65c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c660:	4b03      	ldr	r3, [pc, #12]	; (800c670 <vTaskMissedYield+0x14>)
 800c662:	2201      	movs	r2, #1
 800c664:	601a      	str	r2, [r3, #0]
}
 800c666:	bf00      	nop
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	2000143c 	.word	0x2000143c

0800c674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c67c:	f000 f852 	bl	800c724 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c680:	4b06      	ldr	r3, [pc, #24]	; (800c69c <prvIdleTask+0x28>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d9f9      	bls.n	800c67c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c688:	4b05      	ldr	r3, [pc, #20]	; (800c6a0 <prvIdleTask+0x2c>)
 800c68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c698:	e7f0      	b.n	800c67c <prvIdleTask+0x8>
 800c69a:	bf00      	nop
 800c69c:	20000f58 	.word	0x20000f58
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	607b      	str	r3, [r7, #4]
 800c6ae:	e00c      	b.n	800c6ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4a12      	ldr	r2, [pc, #72]	; (800c704 <prvInitialiseTaskLists+0x60>)
 800c6bc:	4413      	add	r3, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe f888 	bl	800a7d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	607b      	str	r3, [r7, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b37      	cmp	r3, #55	; 0x37
 800c6ce:	d9ef      	bls.n	800c6b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6d0:	480d      	ldr	r0, [pc, #52]	; (800c708 <prvInitialiseTaskLists+0x64>)
 800c6d2:	f7fe f87f 	bl	800a7d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6d6:	480d      	ldr	r0, [pc, #52]	; (800c70c <prvInitialiseTaskLists+0x68>)
 800c6d8:	f7fe f87c 	bl	800a7d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6dc:	480c      	ldr	r0, [pc, #48]	; (800c710 <prvInitialiseTaskLists+0x6c>)
 800c6de:	f7fe f879 	bl	800a7d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6e2:	480c      	ldr	r0, [pc, #48]	; (800c714 <prvInitialiseTaskLists+0x70>)
 800c6e4:	f7fe f876 	bl	800a7d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6e8:	480b      	ldr	r0, [pc, #44]	; (800c718 <prvInitialiseTaskLists+0x74>)
 800c6ea:	f7fe f873 	bl	800a7d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <prvInitialiseTaskLists+0x78>)
 800c6f0:	4a05      	ldr	r2, [pc, #20]	; (800c708 <prvInitialiseTaskLists+0x64>)
 800c6f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6f4:	4b0a      	ldr	r3, [pc, #40]	; (800c720 <prvInitialiseTaskLists+0x7c>)
 800c6f6:	4a05      	ldr	r2, [pc, #20]	; (800c70c <prvInitialiseTaskLists+0x68>)
 800c6f8:	601a      	str	r2, [r3, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20000f58 	.word	0x20000f58
 800c708:	200013b8 	.word	0x200013b8
 800c70c:	200013cc 	.word	0x200013cc
 800c710:	200013e8 	.word	0x200013e8
 800c714:	200013fc 	.word	0x200013fc
 800c718:	20001414 	.word	0x20001414
 800c71c:	200013e0 	.word	0x200013e0
 800c720:	200013e4 	.word	0x200013e4

0800c724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c72a:	e019      	b.n	800c760 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c72c:	f000 ff9e 	bl	800d66c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c730:	4b10      	ldr	r3, [pc, #64]	; (800c774 <prvCheckTasksWaitingTermination+0x50>)
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe f8d3 	bl	800a8e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c742:	4b0d      	ldr	r3, [pc, #52]	; (800c778 <prvCheckTasksWaitingTermination+0x54>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3b01      	subs	r3, #1
 800c748:	4a0b      	ldr	r2, [pc, #44]	; (800c778 <prvCheckTasksWaitingTermination+0x54>)
 800c74a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c74c:	4b0b      	ldr	r3, [pc, #44]	; (800c77c <prvCheckTasksWaitingTermination+0x58>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3b01      	subs	r3, #1
 800c752:	4a0a      	ldr	r2, [pc, #40]	; (800c77c <prvCheckTasksWaitingTermination+0x58>)
 800c754:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c756:	f000 ffbd 	bl	800d6d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f810 	bl	800c780 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c760:	4b06      	ldr	r3, [pc, #24]	; (800c77c <prvCheckTasksWaitingTermination+0x58>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1e1      	bne.n	800c72c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	3708      	adds	r7, #8
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	200013fc 	.word	0x200013fc
 800c778:	20001428 	.word	0x20001428
 800c77c:	20001410 	.word	0x20001410

0800c780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3354      	adds	r3, #84	; 0x54
 800c78c:	4618      	mov	r0, r3
 800c78e:	f001 fac7 	bl	800dd20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d108      	bne.n	800c7ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f001 f959 	bl	800da58 <vPortFree>
				vPortFree( pxTCB );
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f001 f956 	bl	800da58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7ac:	e01a      	b.n	800c7e4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d103      	bne.n	800c7c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 f94d 	bl	800da58 <vPortFree>
	}
 800c7be:	e011      	b.n	800c7e4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d00c      	beq.n	800c7e4 <prvDeleteTCB+0x64>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	b672      	cpsid	i
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	b662      	cpsie	i
 800c7de:	60fb      	str	r3, [r7, #12]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <prvDeleteTCB+0x62>
	}
 800c7e4:	bf00      	nop
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <prvResetNextTaskUnblockTime+0x38>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d104      	bne.n	800c806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <prvResetNextTaskUnblockTime+0x3c>)
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c804:	e008      	b.n	800c818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c806:	4b07      	ldr	r3, [pc, #28]	; (800c824 <prvResetNextTaskUnblockTime+0x38>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	4a04      	ldr	r2, [pc, #16]	; (800c828 <prvResetNextTaskUnblockTime+0x3c>)
 800c816:	6013      	str	r3, [r2, #0]
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	200013e0 	.word	0x200013e0
 800c828:	20001448 	.word	0x20001448

0800c82c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c832:	4b05      	ldr	r3, [pc, #20]	; (800c848 <xTaskGetCurrentTaskHandle+0x1c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c838:	687b      	ldr	r3, [r7, #4]
	}
 800c83a:	4618      	mov	r0, r3
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	20000f54 	.word	0x20000f54

0800c84c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c852:	4b0b      	ldr	r3, [pc, #44]	; (800c880 <xTaskGetSchedulerState+0x34>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d102      	bne.n	800c860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c85a:	2301      	movs	r3, #1
 800c85c:	607b      	str	r3, [r7, #4]
 800c85e:	e008      	b.n	800c872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c860:	4b08      	ldr	r3, [pc, #32]	; (800c884 <xTaskGetSchedulerState+0x38>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d102      	bne.n	800c86e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c868:	2302      	movs	r3, #2
 800c86a:	607b      	str	r3, [r7, #4]
 800c86c:	e001      	b.n	800c872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c86e:	2300      	movs	r3, #0
 800c870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c872:	687b      	ldr	r3, [r7, #4]
	}
 800c874:	4618      	mov	r0, r3
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	20001434 	.word	0x20001434
 800c884:	20001450 	.word	0x20001450

0800c888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d051      	beq.n	800c942 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a2:	4b2a      	ldr	r3, [pc, #168]	; (800c94c <xTaskPriorityInherit+0xc4>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d241      	bcs.n	800c930 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	db06      	blt.n	800c8c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b4:	4b25      	ldr	r3, [pc, #148]	; (800c94c <xTaskPriorityInherit+0xc4>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	6959      	ldr	r1, [r3, #20]
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4a1f      	ldr	r2, [pc, #124]	; (800c950 <xTaskPriorityInherit+0xc8>)
 800c8d4:	4413      	add	r3, r2
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d122      	bne.n	800c920 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe f802 	bl	800a8e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8e4:	4b19      	ldr	r3, [pc, #100]	; (800c94c <xTaskPriorityInherit+0xc4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f2:	4b18      	ldr	r3, [pc, #96]	; (800c954 <xTaskPriorityInherit+0xcc>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d903      	bls.n	800c902 <xTaskPriorityInherit+0x7a>
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fe:	4a15      	ldr	r2, [pc, #84]	; (800c954 <xTaskPriorityInherit+0xcc>)
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c906:	4613      	mov	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4a10      	ldr	r2, [pc, #64]	; (800c950 <xTaskPriorityInherit+0xc8>)
 800c910:	441a      	add	r2, r3
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	3304      	adds	r3, #4
 800c916:	4619      	mov	r1, r3
 800c918:	4610      	mov	r0, r2
 800c91a:	f7fd ff88 	bl	800a82e <vListInsertEnd>
 800c91e:	e004      	b.n	800c92a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <xTaskPriorityInherit+0xc4>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c92a:	2301      	movs	r3, #1
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	e008      	b.n	800c942 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c934:	4b05      	ldr	r3, [pc, #20]	; (800c94c <xTaskPriorityInherit+0xc4>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d201      	bcs.n	800c942 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c93e:	2301      	movs	r3, #1
 800c940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c942:	68fb      	ldr	r3, [r7, #12]
	}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	20000f54 	.word	0x20000f54
 800c950:	20000f58 	.word	0x20000f58
 800c954:	20001430 	.word	0x20001430

0800c958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c964:	2300      	movs	r3, #0
 800c966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d05a      	beq.n	800ca24 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c96e:	4b30      	ldr	r3, [pc, #192]	; (800ca30 <xTaskPriorityDisinherit+0xd8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	429a      	cmp	r2, r3
 800c976:	d00c      	beq.n	800c992 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	b672      	cpsid	i
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	b662      	cpsie	i
 800c98c:	60fb      	str	r3, [r7, #12]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10c      	bne.n	800c9b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	b672      	cpsid	i
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	b662      	cpsie	i
 800c9ae:	60bb      	str	r3, [r7, #8]
}
 800c9b0:	bf00      	nop
 800c9b2:	e7fe      	b.n	800c9b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b8:	1e5a      	subs	r2, r3, #1
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d02c      	beq.n	800ca24 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d128      	bne.n	800ca24 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fd ff86 	bl	800a8e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f4:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <xTaskPriorityDisinherit+0xdc>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d903      	bls.n	800ca04 <xTaskPriorityDisinherit+0xac>
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca00:	4a0c      	ldr	r2, [pc, #48]	; (800ca34 <xTaskPriorityDisinherit+0xdc>)
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca08:	4613      	mov	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	4413      	add	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4a09      	ldr	r2, [pc, #36]	; (800ca38 <xTaskPriorityDisinherit+0xe0>)
 800ca12:	441a      	add	r2, r3
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	3304      	adds	r3, #4
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	f7fd ff07 	bl	800a82e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca20:	2301      	movs	r3, #1
 800ca22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca24:	697b      	ldr	r3, [r7, #20]
	}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	20000f54 	.word	0x20000f54
 800ca34:	20001430 	.word	0x20001430
 800ca38:	20000f58 	.word	0x20000f58

0800ca3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b088      	sub	sp, #32
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d06e      	beq.n	800cb32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10c      	bne.n	800ca76 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	b672      	cpsid	i
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	b662      	cpsie	i
 800ca70:	60fb      	str	r3, [r7, #12]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d902      	bls.n	800ca86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e002      	b.n	800ca8c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	69fa      	ldr	r2, [r7, #28]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d04d      	beq.n	800cb32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d148      	bne.n	800cb32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800caa0:	4b26      	ldr	r3, [pc, #152]	; (800cb3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	69ba      	ldr	r2, [r7, #24]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d10c      	bne.n	800cac4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	b672      	cpsid	i
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	b662      	cpsie	i
 800cabe:	60bb      	str	r3, [r7, #8]
}
 800cac0:	bf00      	nop
 800cac2:	e7fe      	b.n	800cac2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	69fa      	ldr	r2, [r7, #28]
 800cace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	db04      	blt.n	800cae2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	6959      	ldr	r1, [r3, #20]
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4a13      	ldr	r2, [pc, #76]	; (800cb40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800caf2:	4413      	add	r3, r2
 800caf4:	4299      	cmp	r1, r3
 800caf6:	d11c      	bne.n	800cb32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	3304      	adds	r3, #4
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd fef3 	bl	800a8e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb06:	4b0f      	ldr	r3, [pc, #60]	; (800cb44 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d903      	bls.n	800cb16 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb12:	4a0c      	ldr	r2, [pc, #48]	; (800cb44 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4413      	add	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4a07      	ldr	r2, [pc, #28]	; (800cb40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cb24:	441a      	add	r2, r3
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	3304      	adds	r3, #4
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	f7fd fe7e 	bl	800a82e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb32:	bf00      	nop
 800cb34:	3720      	adds	r7, #32
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20000f54 	.word	0x20000f54
 800cb40:	20000f58 	.word	0x20000f58
 800cb44:	20001430 	.word	0x20001430

0800cb48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cb48:	b480      	push	{r7}
 800cb4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cb4c:	4b07      	ldr	r3, [pc, #28]	; (800cb6c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d004      	beq.n	800cb5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb5a:	3201      	adds	r2, #1
 800cb5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cb5e:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb60:	681b      	ldr	r3, [r3, #0]
	}
 800cb62:	4618      	mov	r0, r3
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	20000f54 	.word	0x20000f54

0800cb70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb7a:	4b21      	ldr	r3, [pc, #132]	; (800cc00 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb80:	4b20      	ldr	r3, [pc, #128]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3304      	adds	r3, #4
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fd feae 	bl	800a8e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb92:	d10a      	bne.n	800cbaa <prvAddCurrentTaskToDelayedList+0x3a>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d007      	beq.n	800cbaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb9a:	4b1a      	ldr	r3, [pc, #104]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	4619      	mov	r1, r3
 800cba2:	4819      	ldr	r0, [pc, #100]	; (800cc08 <prvAddCurrentTaskToDelayedList+0x98>)
 800cba4:	f7fd fe43 	bl	800a82e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cba8:	e026      	b.n	800cbf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4413      	add	r3, r2
 800cbb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbb2:	4b14      	ldr	r3, [pc, #80]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d209      	bcs.n	800cbd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbc2:	4b12      	ldr	r3, [pc, #72]	; (800cc0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	4b0f      	ldr	r3, [pc, #60]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	f7fd fe51 	bl	800a876 <vListInsert>
}
 800cbd4:	e010      	b.n	800cbf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd6:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b0a      	ldr	r3, [pc, #40]	; (800cc04 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	f7fd fe47 	bl	800a876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	; (800cc14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d202      	bcs.n	800cbf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cbf2:	4a08      	ldr	r2, [pc, #32]	; (800cc14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	6013      	str	r3, [r2, #0]
}
 800cbf8:	bf00      	nop
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	2000142c 	.word	0x2000142c
 800cc04:	20000f54 	.word	0x20000f54
 800cc08:	20001414 	.word	0x20001414
 800cc0c:	200013e4 	.word	0x200013e4
 800cc10:	200013e0 	.word	0x200013e0
 800cc14:	20001448 	.word	0x20001448

0800cc18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08a      	sub	sp, #40	; 0x28
 800cc1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc22:	f000 fbb5 	bl	800d390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc26:	4b1d      	ldr	r3, [pc, #116]	; (800cc9c <xTimerCreateTimerTask+0x84>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d021      	beq.n	800cc72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc36:	1d3a      	adds	r2, r7, #4
 800cc38:	f107 0108 	add.w	r1, r7, #8
 800cc3c:	f107 030c 	add.w	r3, r7, #12
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fd fdad 	bl	800a7a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc46:	6879      	ldr	r1, [r7, #4]
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	9202      	str	r2, [sp, #8]
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	2302      	movs	r3, #2
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	2300      	movs	r3, #0
 800cc56:	460a      	mov	r2, r1
 800cc58:	4911      	ldr	r1, [pc, #68]	; (800cca0 <xTimerCreateTimerTask+0x88>)
 800cc5a:	4812      	ldr	r0, [pc, #72]	; (800cca4 <xTimerCreateTimerTask+0x8c>)
 800cc5c:	f7fe ff7e 	bl	800bb5c <xTaskCreateStatic>
 800cc60:	4603      	mov	r3, r0
 800cc62:	4a11      	ldr	r2, [pc, #68]	; (800cca8 <xTimerCreateTimerTask+0x90>)
 800cc64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc66:	4b10      	ldr	r3, [pc, #64]	; (800cca8 <xTimerCreateTimerTask+0x90>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10c      	bne.n	800cc92 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	b672      	cpsid	i
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	b662      	cpsie	i
 800cc8c:	613b      	str	r3, [r7, #16]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800cc92:	697b      	ldr	r3, [r7, #20]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20001484 	.word	0x20001484
 800cca0:	0800e20c 	.word	0x0800e20c
 800cca4:	0800cf29 	.word	0x0800cf29
 800cca8:	20001488 	.word	0x20001488

0800ccac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ccba:	202c      	movs	r0, #44	; 0x2c
 800ccbc:	f000 fe02 	bl	800d8c4 <pvPortMalloc>
 800ccc0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00d      	beq.n	800cce4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	9301      	str	r3, [sp, #4]
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	68b9      	ldr	r1, [r7, #8]
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 f847 	bl	800cd72 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cce4:	697b      	ldr	r3, [r7, #20]
	}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b08a      	sub	sp, #40	; 0x28
 800ccf2:	af02      	add	r7, sp, #8
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	60b9      	str	r1, [r7, #8]
 800ccf8:	607a      	str	r2, [r7, #4]
 800ccfa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ccfc:	232c      	movs	r3, #44	; 0x2c
 800ccfe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b2c      	cmp	r3, #44	; 0x2c
 800cd04:	d00c      	beq.n	800cd20 <xTimerCreateStatic+0x32>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	b672      	cpsid	i
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	b662      	cpsie	i
 800cd1a:	61bb      	str	r3, [r7, #24]
}
 800cd1c:	bf00      	nop
 800cd1e:	e7fe      	b.n	800cd1e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10c      	bne.n	800cd42 <xTimerCreateStatic+0x54>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	b672      	cpsid	i
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	b662      	cpsie	i
 800cd3c:	617b      	str	r3, [r7, #20]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00d      	beq.n	800cd68 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	2202      	movs	r2, #2
 800cd50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	68b9      	ldr	r1, [r7, #8]
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 f805 	bl	800cd72 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cd68:	69fb      	ldr	r3, [r7, #28]
	}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b086      	sub	sp, #24
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	607a      	str	r2, [r7, #4]
 800cd7e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10c      	bne.n	800cda0 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	b672      	cpsid	i
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	b662      	cpsie	i
 800cd9a:	617b      	str	r3, [r7, #20]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d01e      	beq.n	800cde4 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cda6:	f000 faf3 	bl	800d390 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	6a3a      	ldr	r2, [r7, #32]
 800cdc0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fd fd24 	bl	800a814 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d008      	beq.n	800cde4 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdd8:	f043 0304 	orr.w	r3, r3, #4
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cde4:	bf00      	nop
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10c      	bne.n	800ce1e <xTimerGenericCommand+0x32>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	b672      	cpsid	i
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	b662      	cpsie	i
 800ce18:	623b      	str	r3, [r7, #32]
}
 800ce1a:	bf00      	nop
 800ce1c:	e7fe      	b.n	800ce1c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <xTimerGenericCommand+0x9c>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d02a      	beq.n	800ce7c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b05      	cmp	r3, #5
 800ce36:	dc18      	bgt.n	800ce6a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce38:	f7ff fd08 	bl	800c84c <xTaskGetSchedulerState>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d109      	bne.n	800ce56 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce42:	4b11      	ldr	r3, [pc, #68]	; (800ce88 <xTimerGenericCommand+0x9c>)
 800ce44:	6818      	ldr	r0, [r3, #0]
 800ce46:	f107 0110 	add.w	r1, r7, #16
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4e:	f7fd fff3 	bl	800ae38 <xQueueGenericSend>
 800ce52:	6278      	str	r0, [r7, #36]	; 0x24
 800ce54:	e012      	b.n	800ce7c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce56:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <xTimerGenericCommand+0x9c>)
 800ce58:	6818      	ldr	r0, [r3, #0]
 800ce5a:	f107 0110 	add.w	r1, r7, #16
 800ce5e:	2300      	movs	r3, #0
 800ce60:	2200      	movs	r2, #0
 800ce62:	f7fd ffe9 	bl	800ae38 <xQueueGenericSend>
 800ce66:	6278      	str	r0, [r7, #36]	; 0x24
 800ce68:	e008      	b.n	800ce7c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce6a:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <xTimerGenericCommand+0x9c>)
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	f107 0110 	add.w	r1, r7, #16
 800ce72:	2300      	movs	r3, #0
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	f7fe f8e5 	bl	800b044 <xQueueGenericSendFromISR>
 800ce7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3728      	adds	r7, #40	; 0x28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20001484 	.word	0x20001484

0800ce8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce96:	4b23      	ldr	r3, [pc, #140]	; (800cf24 <prvProcessExpiredTimer+0x98>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	3304      	adds	r3, #4
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fd fd1f 	bl	800a8e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceb0:	f003 0304 	and.w	r3, r3, #4
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d024      	beq.n	800cf02 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	699a      	ldr	r2, [r3, #24]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	18d1      	adds	r1, r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	6978      	ldr	r0, [r7, #20]
 800cec6:	f000 f8d3 	bl	800d070 <prvInsertTimerInActiveList>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d021      	beq.n	800cf14 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ced0:	2300      	movs	r3, #0
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	2300      	movs	r3, #0
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	2100      	movs	r1, #0
 800ceda:	6978      	ldr	r0, [r7, #20]
 800cedc:	f7ff ff86 	bl	800cdec <xTimerGenericCommand>
 800cee0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d115      	bne.n	800cf14 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	b672      	cpsid	i
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	b662      	cpsie	i
 800cefc:	60fb      	str	r3, [r7, #12]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf08:	f023 0301 	bic.w	r3, r3, #1
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	6a1b      	ldr	r3, [r3, #32]
 800cf18:	6978      	ldr	r0, [r7, #20]
 800cf1a:	4798      	blx	r3
}
 800cf1c:	bf00      	nop
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	2000147c 	.word	0x2000147c

0800cf28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf30:	f107 0308 	add.w	r3, r7, #8
 800cf34:	4618      	mov	r0, r3
 800cf36:	f000 f857 	bl	800cfe8 <prvGetNextExpireTime>
 800cf3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 f803 	bl	800cf4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf46:	f000 f8d5 	bl	800d0f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf4a:	e7f1      	b.n	800cf30 <prvTimerTask+0x8>

0800cf4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf56:	f7ff f86b 	bl	800c030 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf5a:	f107 0308 	add.w	r3, r7, #8
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 f866 	bl	800d030 <prvSampleTimeNow>
 800cf64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d130      	bne.n	800cfce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10a      	bne.n	800cf88 <prvProcessTimerOrBlockTask+0x3c>
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d806      	bhi.n	800cf88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf7a:	f7ff f867 	bl	800c04c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf7e:	68f9      	ldr	r1, [r7, #12]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff ff83 	bl	800ce8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf86:	e024      	b.n	800cfd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d008      	beq.n	800cfa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf8e:	4b13      	ldr	r3, [pc, #76]	; (800cfdc <prvProcessTimerOrBlockTask+0x90>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d101      	bne.n	800cf9c <prvProcessTimerOrBlockTask+0x50>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e000      	b.n	800cf9e <prvProcessTimerOrBlockTask+0x52>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cfa0:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <prvProcessTimerOrBlockTask+0x94>)
 800cfa2:	6818      	ldr	r0, [r3, #0]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	683a      	ldr	r2, [r7, #0]
 800cfac:	4619      	mov	r1, r3
 800cfae:	f7fe fda1 	bl	800baf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cfb2:	f7ff f84b 	bl	800c04c <xTaskResumeAll>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cfbc:	4b09      	ldr	r3, [pc, #36]	; (800cfe4 <prvProcessTimerOrBlockTask+0x98>)
 800cfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	f3bf 8f6f 	isb	sy
}
 800cfcc:	e001      	b.n	800cfd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfce:	f7ff f83d 	bl	800c04c <xTaskResumeAll>
}
 800cfd2:	bf00      	nop
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20001480 	.word	0x20001480
 800cfe0:	20001484 	.word	0x20001484
 800cfe4:	e000ed04 	.word	0xe000ed04

0800cfe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cff0:	4b0e      	ldr	r3, [pc, #56]	; (800d02c <prvGetNextExpireTime+0x44>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <prvGetNextExpireTime+0x16>
 800cffa:	2201      	movs	r2, #1
 800cffc:	e000      	b.n	800d000 <prvGetNextExpireTime+0x18>
 800cffe:	2200      	movs	r2, #0
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d105      	bne.n	800d018 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d00c:	4b07      	ldr	r3, [pc, #28]	; (800d02c <prvGetNextExpireTime+0x44>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e001      	b.n	800d01c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d018:	2300      	movs	r3, #0
 800d01a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d01c:	68fb      	ldr	r3, [r7, #12]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	2000147c 	.word	0x2000147c

0800d030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d038:	f7ff f8a8 	bl	800c18c <xTaskGetTickCount>
 800d03c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d03e:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <prvSampleTimeNow+0x3c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	429a      	cmp	r2, r3
 800d046:	d205      	bcs.n	800d054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d048:	f000 f93c 	bl	800d2c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	e002      	b.n	800d05a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d05a:	4a04      	ldr	r2, [pc, #16]	; (800d06c <prvSampleTimeNow+0x3c>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d060:	68fb      	ldr	r3, [r7, #12]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	2000148c 	.word	0x2000148c

0800d070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d07e:	2300      	movs	r3, #0
 800d080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	429a      	cmp	r2, r3
 800d094:	d812      	bhi.n	800d0bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	1ad2      	subs	r2, r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d302      	bcc.n	800d0aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	e01b      	b.n	800d0e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d0aa:	4b10      	ldr	r3, [pc, #64]	; (800d0ec <prvInsertTimerInActiveList+0x7c>)
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f7fd fbde 	bl	800a876 <vListInsert>
 800d0ba:	e012      	b.n	800d0e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d206      	bcs.n	800d0d2 <prvInsertTimerInActiveList+0x62>
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d302      	bcc.n	800d0d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	617b      	str	r3, [r7, #20]
 800d0d0:	e007      	b.n	800d0e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0d2:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <prvInsertTimerInActiveList+0x80>)
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3304      	adds	r3, #4
 800d0da:	4619      	mov	r1, r3
 800d0dc:	4610      	mov	r0, r2
 800d0de:	f7fd fbca 	bl	800a876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0e2:	697b      	ldr	r3, [r7, #20]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	20001480 	.word	0x20001480
 800d0f0:	2000147c 	.word	0x2000147c

0800d0f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b08e      	sub	sp, #56	; 0x38
 800d0f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0fa:	e0d0      	b.n	800d29e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	da1a      	bge.n	800d138 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d102:	1d3b      	adds	r3, r7, #4
 800d104:	3304      	adds	r3, #4
 800d106:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10c      	bne.n	800d128 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	b672      	cpsid	i
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	b662      	cpsie	i
 800d122:	61fb      	str	r3, [r7, #28]
}
 800d124:	bf00      	nop
 800d126:	e7fe      	b.n	800d126 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d12e:	6850      	ldr	r0, [r2, #4]
 800d130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d132:	6892      	ldr	r2, [r2, #8]
 800d134:	4611      	mov	r1, r2
 800d136:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f2c0 80ae 	blt.w	800d29c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d004      	beq.n	800d156 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	3304      	adds	r3, #4
 800d150:	4618      	mov	r0, r3
 800d152:	f7fd fbc9 	bl	800a8e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d156:	463b      	mov	r3, r7
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff ff69 	bl	800d030 <prvSampleTimeNow>
 800d15e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b09      	cmp	r3, #9
 800d164:	f200 809b 	bhi.w	800d29e <prvProcessReceivedCommands+0x1aa>
 800d168:	a201      	add	r2, pc, #4	; (adr r2, 800d170 <prvProcessReceivedCommands+0x7c>)
 800d16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16e:	bf00      	nop
 800d170:	0800d199 	.word	0x0800d199
 800d174:	0800d199 	.word	0x0800d199
 800d178:	0800d199 	.word	0x0800d199
 800d17c:	0800d211 	.word	0x0800d211
 800d180:	0800d225 	.word	0x0800d225
 800d184:	0800d273 	.word	0x0800d273
 800d188:	0800d199 	.word	0x0800d199
 800d18c:	0800d199 	.word	0x0800d199
 800d190:	0800d211 	.word	0x0800d211
 800d194:	0800d225 	.word	0x0800d225
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	18d1      	adds	r1, r2, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b8:	f7ff ff5a 	bl	800d070 <prvInsertTimerInActiveList>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d06d      	beq.n	800d29e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1d0:	f003 0304 	and.w	r3, r3, #4
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d062      	beq.n	800d29e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	441a      	add	r2, r3
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ea:	f7ff fdff 	bl	800cdec <xTimerGenericCommand>
 800d1ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d153      	bne.n	800d29e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fa:	b672      	cpsid	i
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	b662      	cpsie	i
 800d20a:	61bb      	str	r3, [r7, #24]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d216:	f023 0301 	bic.w	r3, r3, #1
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d222:	e03c      	b.n	800d29e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d22a:	f043 0301 	orr.w	r3, r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10c      	bne.n	800d25e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	b672      	cpsid	i
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	b662      	cpsie	i
 800d258:	617b      	str	r3, [r7, #20]
}
 800d25a:	bf00      	nop
 800d25c:	e7fe      	b.n	800d25c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	699a      	ldr	r2, [r3, #24]
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	18d1      	adds	r1, r2, r3
 800d266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26c:	f7ff ff00 	bl	800d070 <prvInsertTimerInActiveList>
					break;
 800d270:	e015      	b.n	800d29e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d278:	f003 0302 	and.w	r3, r3, #2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d103      	bne.n	800d288 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d282:	f000 fbe9 	bl	800da58 <vPortFree>
 800d286:	e00a      	b.n	800d29e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d28e:	f023 0301 	bic.w	r3, r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d29a:	e000      	b.n	800d29e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d29c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d29e:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <prvProcessReceivedCommands+0x1cc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	1d39      	adds	r1, r7, #4
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe f802 	bl	800b2b0 <xQueueReceive>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f47f af24 	bne.w	800d0fc <prvProcessReceivedCommands+0x8>
	}
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	3730      	adds	r7, #48	; 0x30
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	20001484 	.word	0x20001484

0800d2c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2ca:	e04a      	b.n	800d362 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2cc:	4b2e      	ldr	r3, [pc, #184]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2d6:	4b2c      	ldr	r3, [pc, #176]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fd faff 	bl	800a8e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2f8:	f003 0304 	and.w	r3, r3, #4
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d030      	beq.n	800d362 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4413      	add	r3, r2
 800d308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d90e      	bls.n	800d330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d31e:	4b1a      	ldr	r3, [pc, #104]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3304      	adds	r3, #4
 800d326:	4619      	mov	r1, r3
 800d328:	4610      	mov	r0, r2
 800d32a:	f7fd faa4 	bl	800a876 <vListInsert>
 800d32e:	e018      	b.n	800d362 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d330:	2300      	movs	r3, #0
 800d332:	9300      	str	r3, [sp, #0]
 800d334:	2300      	movs	r3, #0
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	2100      	movs	r1, #0
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7ff fd56 	bl	800cdec <xTimerGenericCommand>
 800d340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10c      	bne.n	800d362 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	b672      	cpsid	i
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	b662      	cpsie	i
 800d35c:	603b      	str	r3, [r7, #0]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d362:	4b09      	ldr	r3, [pc, #36]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d1af      	bne.n	800d2cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d36c:	4b06      	ldr	r3, [pc, #24]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d372:	4b06      	ldr	r3, [pc, #24]	; (800d38c <prvSwitchTimerLists+0xc8>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a04      	ldr	r2, [pc, #16]	; (800d388 <prvSwitchTimerLists+0xc4>)
 800d378:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d37a:	4a04      	ldr	r2, [pc, #16]	; (800d38c <prvSwitchTimerLists+0xc8>)
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	6013      	str	r3, [r2, #0]
}
 800d380:	bf00      	nop
 800d382:	3718      	adds	r7, #24
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	2000147c 	.word	0x2000147c
 800d38c:	20001480 	.word	0x20001480

0800d390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d396:	f000 f969 	bl	800d66c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d39a:	4b15      	ldr	r3, [pc, #84]	; (800d3f0 <prvCheckForValidListAndQueue+0x60>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d120      	bne.n	800d3e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d3a2:	4814      	ldr	r0, [pc, #80]	; (800d3f4 <prvCheckForValidListAndQueue+0x64>)
 800d3a4:	f7fd fa16 	bl	800a7d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d3a8:	4813      	ldr	r0, [pc, #76]	; (800d3f8 <prvCheckForValidListAndQueue+0x68>)
 800d3aa:	f7fd fa13 	bl	800a7d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <prvCheckForValidListAndQueue+0x6c>)
 800d3b0:	4a10      	ldr	r2, [pc, #64]	; (800d3f4 <prvCheckForValidListAndQueue+0x64>)
 800d3b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d3b4:	4b12      	ldr	r3, [pc, #72]	; (800d400 <prvCheckForValidListAndQueue+0x70>)
 800d3b6:	4a10      	ldr	r2, [pc, #64]	; (800d3f8 <prvCheckForValidListAndQueue+0x68>)
 800d3b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	4b11      	ldr	r3, [pc, #68]	; (800d404 <prvCheckForValidListAndQueue+0x74>)
 800d3c0:	4a11      	ldr	r2, [pc, #68]	; (800d408 <prvCheckForValidListAndQueue+0x78>)
 800d3c2:	2110      	movs	r1, #16
 800d3c4:	200a      	movs	r0, #10
 800d3c6:	f7fd fb23 	bl	800aa10 <xQueueGenericCreateStatic>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	4a08      	ldr	r2, [pc, #32]	; (800d3f0 <prvCheckForValidListAndQueue+0x60>)
 800d3ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3d0:	4b07      	ldr	r3, [pc, #28]	; (800d3f0 <prvCheckForValidListAndQueue+0x60>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d005      	beq.n	800d3e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3d8:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <prvCheckForValidListAndQueue+0x60>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	490b      	ldr	r1, [pc, #44]	; (800d40c <prvCheckForValidListAndQueue+0x7c>)
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fb34 	bl	800ba4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3e4:	f000 f976 	bl	800d6d4 <vPortExitCritical>
}
 800d3e8:	bf00      	nop
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20001484 	.word	0x20001484
 800d3f4:	20001454 	.word	0x20001454
 800d3f8:	20001468 	.word	0x20001468
 800d3fc:	2000147c 	.word	0x2000147c
 800d400:	20001480 	.word	0x20001480
 800d404:	20001530 	.word	0x20001530
 800d408:	20001490 	.word	0x20001490
 800d40c:	0800e214 	.word	0x0800e214

0800d410 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10c      	bne.n	800d43c <pvTimerGetTimerID+0x2c>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	b672      	cpsid	i
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	b662      	cpsie	i
 800d436:	60fb      	str	r3, [r7, #12]
}
 800d438:	bf00      	nop
 800d43a:	e7fe      	b.n	800d43a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800d43c:	f000 f916 	bl	800d66c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	69db      	ldr	r3, [r3, #28]
 800d444:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d446:	f000 f945 	bl	800d6d4 <vPortExitCritical>

	return pvReturn;
 800d44a:	693b      	ldr	r3, [r7, #16]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3b04      	subs	r3, #4
 800d464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3b04      	subs	r3, #4
 800d472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f023 0201 	bic.w	r2, r3, #1
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3b04      	subs	r3, #4
 800d482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d484:	4a0c      	ldr	r2, [pc, #48]	; (800d4b8 <pxPortInitialiseStack+0x64>)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3b14      	subs	r3, #20
 800d48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3b04      	subs	r3, #4
 800d49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f06f 0202 	mvn.w	r2, #2
 800d4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3b20      	subs	r3, #32
 800d4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3714      	adds	r7, #20
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	0800d4bd 	.word	0x0800d4bd

0800d4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4c6:	4b14      	ldr	r3, [pc, #80]	; (800d518 <prvTaskExitError+0x5c>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d00c      	beq.n	800d4ea <prvTaskExitError+0x2e>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d4:	b672      	cpsid	i
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	b662      	cpsie	i
 800d4e4:	60fb      	str	r3, [r7, #12]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <prvTaskExitError+0x2c>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	b672      	cpsid	i
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	b662      	cpsie	i
 800d4fe:	60bb      	str	r3, [r7, #8]
}
 800d500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d502:	bf00      	nop
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0fc      	beq.n	800d504 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d50a:	bf00      	nop
 800d50c:	bf00      	nop
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	20000010 	.word	0x20000010
 800d51c:	00000000 	.word	0x00000000

0800d520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d520:	4b07      	ldr	r3, [pc, #28]	; (800d540 <pxCurrentTCBConst2>)
 800d522:	6819      	ldr	r1, [r3, #0]
 800d524:	6808      	ldr	r0, [r1, #0]
 800d526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52a:	f380 8809 	msr	PSP, r0
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f04f 0000 	mov.w	r0, #0
 800d536:	f380 8811 	msr	BASEPRI, r0
 800d53a:	4770      	bx	lr
 800d53c:	f3af 8000 	nop.w

0800d540 <pxCurrentTCBConst2>:
 800d540:	20000f54 	.word	0x20000f54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop

0800d548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d548:	4808      	ldr	r0, [pc, #32]	; (800d56c <prvPortStartFirstTask+0x24>)
 800d54a:	6800      	ldr	r0, [r0, #0]
 800d54c:	6800      	ldr	r0, [r0, #0]
 800d54e:	f380 8808 	msr	MSP, r0
 800d552:	f04f 0000 	mov.w	r0, #0
 800d556:	f380 8814 	msr	CONTROL, r0
 800d55a:	b662      	cpsie	i
 800d55c:	b661      	cpsie	f
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	df00      	svc	0
 800d568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d56a:	bf00      	nop
 800d56c:	e000ed08 	.word	0xe000ed08

0800d570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d576:	4b37      	ldr	r3, [pc, #220]	; (800d654 <xPortStartScheduler+0xe4>)
 800d578:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	22ff      	movs	r2, #255	; 0xff
 800d586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	b2db      	uxtb	r3, r3
 800d594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	4b2f      	ldr	r3, [pc, #188]	; (800d658 <xPortStartScheduler+0xe8>)
 800d59c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d59e:	4b2f      	ldr	r3, [pc, #188]	; (800d65c <xPortStartScheduler+0xec>)
 800d5a0:	2207      	movs	r2, #7
 800d5a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5a4:	e009      	b.n	800d5ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d5a6:	4b2d      	ldr	r3, [pc, #180]	; (800d65c <xPortStartScheduler+0xec>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	4a2b      	ldr	r2, [pc, #172]	; (800d65c <xPortStartScheduler+0xec>)
 800d5ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5b0:	78fb      	ldrb	r3, [r7, #3]
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5c2:	2b80      	cmp	r3, #128	; 0x80
 800d5c4:	d0ef      	beq.n	800d5a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5c6:	4b25      	ldr	r3, [pc, #148]	; (800d65c <xPortStartScheduler+0xec>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f1c3 0307 	rsb	r3, r3, #7
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d00c      	beq.n	800d5ec <xPortStartScheduler+0x7c>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	b672      	cpsid	i
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	b662      	cpsie	i
 800d5e6:	60bb      	str	r3, [r7, #8]
}
 800d5e8:	bf00      	nop
 800d5ea:	e7fe      	b.n	800d5ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5ec:	4b1b      	ldr	r3, [pc, #108]	; (800d65c <xPortStartScheduler+0xec>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	4a1a      	ldr	r2, [pc, #104]	; (800d65c <xPortStartScheduler+0xec>)
 800d5f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5f6:	4b19      	ldr	r3, [pc, #100]	; (800d65c <xPortStartScheduler+0xec>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5fe:	4a17      	ldr	r2, [pc, #92]	; (800d65c <xPortStartScheduler+0xec>)
 800d600:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	b2da      	uxtb	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d60a:	4b15      	ldr	r3, [pc, #84]	; (800d660 <xPortStartScheduler+0xf0>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a14      	ldr	r2, [pc, #80]	; (800d660 <xPortStartScheduler+0xf0>)
 800d610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d614:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d616:	4b12      	ldr	r3, [pc, #72]	; (800d660 <xPortStartScheduler+0xf0>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a11      	ldr	r2, [pc, #68]	; (800d660 <xPortStartScheduler+0xf0>)
 800d61c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d620:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d622:	f000 f8dd 	bl	800d7e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d626:	4b0f      	ldr	r3, [pc, #60]	; (800d664 <xPortStartScheduler+0xf4>)
 800d628:	2200      	movs	r2, #0
 800d62a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d62c:	f000 f8fc 	bl	800d828 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <xPortStartScheduler+0xf8>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a0c      	ldr	r2, [pc, #48]	; (800d668 <xPortStartScheduler+0xf8>)
 800d636:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d63a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d63c:	f7ff ff84 	bl	800d548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d640:	f7fe fe70 	bl	800c324 <vTaskSwitchContext>
	prvTaskExitError();
 800d644:	f7ff ff3a 	bl	800d4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	e000e400 	.word	0xe000e400
 800d658:	20001580 	.word	0x20001580
 800d65c:	20001584 	.word	0x20001584
 800d660:	e000ed20 	.word	0xe000ed20
 800d664:	20000010 	.word	0x20000010
 800d668:	e000ef34 	.word	0xe000ef34

0800d66c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	b672      	cpsid	i
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	b662      	cpsie	i
 800d686:	607b      	str	r3, [r7, #4]
}
 800d688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d68a:	4b10      	ldr	r3, [pc, #64]	; (800d6cc <vPortEnterCritical+0x60>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	3301      	adds	r3, #1
 800d690:	4a0e      	ldr	r2, [pc, #56]	; (800d6cc <vPortEnterCritical+0x60>)
 800d692:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d694:	4b0d      	ldr	r3, [pc, #52]	; (800d6cc <vPortEnterCritical+0x60>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d111      	bne.n	800d6c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d69c:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <vPortEnterCritical+0x64>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00c      	beq.n	800d6c0 <vPortEnterCritical+0x54>
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6aa:	b672      	cpsid	i
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	b662      	cpsie	i
 800d6ba:	603b      	str	r3, [r7, #0]
}
 800d6bc:	bf00      	nop
 800d6be:	e7fe      	b.n	800d6be <vPortEnterCritical+0x52>
	}
}
 800d6c0:	bf00      	nop
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr
 800d6cc:	20000010 	.word	0x20000010
 800d6d0:	e000ed04 	.word	0xe000ed04

0800d6d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6da:	4b13      	ldr	r3, [pc, #76]	; (800d728 <vPortExitCritical+0x54>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10c      	bne.n	800d6fc <vPortExitCritical+0x28>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e6:	b672      	cpsid	i
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	b662      	cpsie	i
 800d6f6:	607b      	str	r3, [r7, #4]
}
 800d6f8:	bf00      	nop
 800d6fa:	e7fe      	b.n	800d6fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	; (800d728 <vPortExitCritical+0x54>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3b01      	subs	r3, #1
 800d702:	4a09      	ldr	r2, [pc, #36]	; (800d728 <vPortExitCritical+0x54>)
 800d704:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d706:	4b08      	ldr	r3, [pc, #32]	; (800d728 <vPortExitCritical+0x54>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d105      	bne.n	800d71a <vPortExitCritical+0x46>
 800d70e:	2300      	movs	r3, #0
 800d710:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	f383 8811 	msr	BASEPRI, r3
}
 800d718:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d71a:	bf00      	nop
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	20000010 	.word	0x20000010
 800d72c:	00000000 	.word	0x00000000

0800d730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d730:	f3ef 8009 	mrs	r0, PSP
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	4b15      	ldr	r3, [pc, #84]	; (800d790 <pxCurrentTCBConst>)
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	f01e 0f10 	tst.w	lr, #16
 800d740:	bf08      	it	eq
 800d742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74a:	6010      	str	r0, [r2, #0]
 800d74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d754:	b672      	cpsid	i
 800d756:	f380 8811 	msr	BASEPRI, r0
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	b662      	cpsie	i
 800d764:	f7fe fdde 	bl	800c324 <vTaskSwitchContext>
 800d768:	f04f 0000 	mov.w	r0, #0
 800d76c:	f380 8811 	msr	BASEPRI, r0
 800d770:	bc09      	pop	{r0, r3}
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	6808      	ldr	r0, [r1, #0]
 800d776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77a:	f01e 0f10 	tst.w	lr, #16
 800d77e:	bf08      	it	eq
 800d780:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d784:	f380 8809 	msr	PSP, r0
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop

0800d790 <pxCurrentTCBConst>:
 800d790:	20000f54 	.word	0x20000f54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop

0800d798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	b672      	cpsid	i
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	b662      	cpsie	i
 800d7b2:	607b      	str	r3, [r7, #4]
}
 800d7b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7b6:	f7fe fcf9 	bl	800c1ac <xTaskIncrementTick>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7c0:	4b06      	ldr	r3, [pc, #24]	; (800d7dc <SysTick_Handler+0x44>)
 800d7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	f383 8811 	msr	BASEPRI, r3
}
 800d7d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	e000ed04 	.word	0xe000ed04

0800d7e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7e4:	4b0b      	ldr	r3, [pc, #44]	; (800d814 <vPortSetupTimerInterrupt+0x34>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7ea:	4b0b      	ldr	r3, [pc, #44]	; (800d818 <vPortSetupTimerInterrupt+0x38>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7f0:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <vPortSetupTimerInterrupt+0x3c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a0a      	ldr	r2, [pc, #40]	; (800d820 <vPortSetupTimerInterrupt+0x40>)
 800d7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7fa:	099b      	lsrs	r3, r3, #6
 800d7fc:	4a09      	ldr	r2, [pc, #36]	; (800d824 <vPortSetupTimerInterrupt+0x44>)
 800d7fe:	3b01      	subs	r3, #1
 800d800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d802:	4b04      	ldr	r3, [pc, #16]	; (800d814 <vPortSetupTimerInterrupt+0x34>)
 800d804:	2207      	movs	r2, #7
 800d806:	601a      	str	r2, [r3, #0]
}
 800d808:	bf00      	nop
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	e000e010 	.word	0xe000e010
 800d818:	e000e018 	.word	0xe000e018
 800d81c:	20000004 	.word	0x20000004
 800d820:	10624dd3 	.word	0x10624dd3
 800d824:	e000e014 	.word	0xe000e014

0800d828 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d828:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d838 <vPortEnableVFP+0x10>
 800d82c:	6801      	ldr	r1, [r0, #0]
 800d82e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d832:	6001      	str	r1, [r0, #0]
 800d834:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d836:	bf00      	nop
 800d838:	e000ed88 	.word	0xe000ed88

0800d83c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d83c:	b480      	push	{r7}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d842:	f3ef 8305 	mrs	r3, IPSR
 800d846:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b0f      	cmp	r3, #15
 800d84c:	d916      	bls.n	800d87c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d84e:	4a19      	ldr	r2, [pc, #100]	; (800d8b4 <vPortValidateInterruptPriority+0x78>)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4413      	add	r3, r2
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d858:	4b17      	ldr	r3, [pc, #92]	; (800d8b8 <vPortValidateInterruptPriority+0x7c>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	7afa      	ldrb	r2, [r7, #11]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d20c      	bcs.n	800d87c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	b672      	cpsid	i
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	b662      	cpsie	i
 800d876:	607b      	str	r3, [r7, #4]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d87c:	4b0f      	ldr	r3, [pc, #60]	; (800d8bc <vPortValidateInterruptPriority+0x80>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d884:	4b0e      	ldr	r3, [pc, #56]	; (800d8c0 <vPortValidateInterruptPriority+0x84>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d90c      	bls.n	800d8a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	b672      	cpsid	i
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	b662      	cpsie	i
 800d8a0:	603b      	str	r3, [r7, #0]
}
 800d8a2:	bf00      	nop
 800d8a4:	e7fe      	b.n	800d8a4 <vPortValidateInterruptPriority+0x68>
	}
 800d8a6:	bf00      	nop
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	e000e3f0 	.word	0xe000e3f0
 800d8b8:	20001580 	.word	0x20001580
 800d8bc:	e000ed0c 	.word	0xe000ed0c
 800d8c0:	20001584 	.word	0x20001584

0800d8c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08a      	sub	sp, #40	; 0x28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8d0:	f7fe fbae 	bl	800c030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8d4:	4b5b      	ldr	r3, [pc, #364]	; (800da44 <pvPortMalloc+0x180>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8dc:	f000 f91a 	bl	800db14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8e0:	4b59      	ldr	r3, [pc, #356]	; (800da48 <pvPortMalloc+0x184>)
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4013      	ands	r3, r2
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f040 8092 	bne.w	800da12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d01f      	beq.n	800d934 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d8f4:	2208      	movs	r2, #8
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f003 0307 	and.w	r3, r3, #7
 800d902:	2b00      	cmp	r3, #0
 800d904:	d016      	beq.n	800d934 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f023 0307 	bic.w	r3, r3, #7
 800d90c:	3308      	adds	r3, #8
 800d90e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f003 0307 	and.w	r3, r3, #7
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00c      	beq.n	800d934 <pvPortMalloc+0x70>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	b672      	cpsid	i
 800d920:	f383 8811 	msr	BASEPRI, r3
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	b662      	cpsie	i
 800d92e:	617b      	str	r3, [r7, #20]
}
 800d930:	bf00      	nop
 800d932:	e7fe      	b.n	800d932 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d06b      	beq.n	800da12 <pvPortMalloc+0x14e>
 800d93a:	4b44      	ldr	r3, [pc, #272]	; (800da4c <pvPortMalloc+0x188>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	429a      	cmp	r2, r3
 800d942:	d866      	bhi.n	800da12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d944:	4b42      	ldr	r3, [pc, #264]	; (800da50 <pvPortMalloc+0x18c>)
 800d946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d948:	4b41      	ldr	r3, [pc, #260]	; (800da50 <pvPortMalloc+0x18c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d94e:	e004      	b.n	800d95a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	429a      	cmp	r2, r3
 800d962:	d903      	bls.n	800d96c <pvPortMalloc+0xa8>
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1f1      	bne.n	800d950 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d96c:	4b35      	ldr	r3, [pc, #212]	; (800da44 <pvPortMalloc+0x180>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d972:	429a      	cmp	r2, r3
 800d974:	d04d      	beq.n	800da12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d976:	6a3b      	ldr	r3, [r7, #32]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2208      	movs	r2, #8
 800d97c:	4413      	add	r3, r2
 800d97e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	1ad2      	subs	r2, r2, r3
 800d990:	2308      	movs	r3, #8
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	429a      	cmp	r2, r3
 800d996:	d921      	bls.n	800d9dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4413      	add	r3, r2
 800d99e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	f003 0307 	and.w	r3, r3, #7
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00c      	beq.n	800d9c4 <pvPortMalloc+0x100>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	b672      	cpsid	i
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	b662      	cpsie	i
 800d9be:	613b      	str	r3, [r7, #16]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	1ad2      	subs	r2, r2, r3
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9d6:	69b8      	ldr	r0, [r7, #24]
 800d9d8:	f000 f8fe 	bl	800dbd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9dc:	4b1b      	ldr	r3, [pc, #108]	; (800da4c <pvPortMalloc+0x188>)
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	4a19      	ldr	r2, [pc, #100]	; (800da4c <pvPortMalloc+0x188>)
 800d9e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9ea:	4b18      	ldr	r3, [pc, #96]	; (800da4c <pvPortMalloc+0x188>)
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	4b19      	ldr	r3, [pc, #100]	; (800da54 <pvPortMalloc+0x190>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d203      	bcs.n	800d9fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9f6:	4b15      	ldr	r3, [pc, #84]	; (800da4c <pvPortMalloc+0x188>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a16      	ldr	r2, [pc, #88]	; (800da54 <pvPortMalloc+0x190>)
 800d9fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	4b11      	ldr	r3, [pc, #68]	; (800da48 <pvPortMalloc+0x184>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	431a      	orrs	r2, r3
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	2200      	movs	r2, #0
 800da10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da12:	f7fe fb1b 	bl	800c04c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	f003 0307 	and.w	r3, r3, #7
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00c      	beq.n	800da3a <pvPortMalloc+0x176>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	b672      	cpsid	i
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	b662      	cpsie	i
 800da34:	60fb      	str	r3, [r7, #12]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <pvPortMalloc+0x174>
	return pvReturn;
 800da3a:	69fb      	ldr	r3, [r7, #28]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3728      	adds	r7, #40	; 0x28
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	20009290 	.word	0x20009290
 800da48:	2000929c 	.word	0x2000929c
 800da4c:	20009294 	.word	0x20009294
 800da50:	20009288 	.word	0x20009288
 800da54:	20009298 	.word	0x20009298

0800da58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d04c      	beq.n	800db04 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da6a:	2308      	movs	r3, #8
 800da6c:	425b      	negs	r3, r3
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	4413      	add	r3, r2
 800da72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	4b23      	ldr	r3, [pc, #140]	; (800db0c <vPortFree+0xb4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4013      	ands	r3, r2
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10c      	bne.n	800daa0 <vPortFree+0x48>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	b672      	cpsid	i
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	b662      	cpsie	i
 800da9a:	60fb      	str	r3, [r7, #12]
}
 800da9c:	bf00      	nop
 800da9e:	e7fe      	b.n	800da9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00c      	beq.n	800dac2 <vPortFree+0x6a>
	__asm volatile
 800daa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daac:	b672      	cpsid	i
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	b662      	cpsie	i
 800dabc:	60bb      	str	r3, [r7, #8]
}
 800dabe:	bf00      	nop
 800dac0:	e7fe      	b.n	800dac0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	4b11      	ldr	r3, [pc, #68]	; (800db0c <vPortFree+0xb4>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4013      	ands	r3, r2
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d019      	beq.n	800db04 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d115      	bne.n	800db04 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <vPortFree+0xb4>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	43db      	mvns	r3, r3
 800dae2:	401a      	ands	r2, r3
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dae8:	f7fe faa2 	bl	800c030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <vPortFree+0xb8>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4413      	add	r3, r2
 800daf6:	4a06      	ldr	r2, [pc, #24]	; (800db10 <vPortFree+0xb8>)
 800daf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dafa:	6938      	ldr	r0, [r7, #16]
 800dafc:	f000 f86c 	bl	800dbd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800db00:	f7fe faa4 	bl	800c04c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db04:	bf00      	nop
 800db06:	3718      	adds	r7, #24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	2000929c 	.word	0x2000929c
 800db10:	20009294 	.word	0x20009294

0800db14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db1a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800db1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db20:	4b27      	ldr	r3, [pc, #156]	; (800dbc0 <prvHeapInit+0xac>)
 800db22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00c      	beq.n	800db48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3307      	adds	r3, #7
 800db32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f023 0307 	bic.w	r3, r3, #7
 800db3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	4a1f      	ldr	r2, [pc, #124]	; (800dbc0 <prvHeapInit+0xac>)
 800db44:	4413      	add	r3, r2
 800db46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db4c:	4a1d      	ldr	r2, [pc, #116]	; (800dbc4 <prvHeapInit+0xb0>)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db52:	4b1c      	ldr	r3, [pc, #112]	; (800dbc4 <prvHeapInit+0xb0>)
 800db54:	2200      	movs	r2, #0
 800db56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68ba      	ldr	r2, [r7, #8]
 800db5c:	4413      	add	r3, r2
 800db5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db60:	2208      	movs	r2, #8
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	1a9b      	subs	r3, r3, r2
 800db66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f023 0307 	bic.w	r3, r3, #7
 800db6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	4a15      	ldr	r2, [pc, #84]	; (800dbc8 <prvHeapInit+0xb4>)
 800db74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db76:	4b14      	ldr	r3, [pc, #80]	; (800dbc8 <prvHeapInit+0xb4>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2200      	movs	r2, #0
 800db7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db7e:	4b12      	ldr	r3, [pc, #72]	; (800dbc8 <prvHeapInit+0xb4>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	1ad2      	subs	r2, r2, r3
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db94:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <prvHeapInit+0xb4>)
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	4a0a      	ldr	r2, [pc, #40]	; (800dbcc <prvHeapInit+0xb8>)
 800dba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	4a09      	ldr	r2, [pc, #36]	; (800dbd0 <prvHeapInit+0xbc>)
 800dbaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dbac:	4b09      	ldr	r3, [pc, #36]	; (800dbd4 <prvHeapInit+0xc0>)
 800dbae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dbb2:	601a      	str	r2, [r3, #0]
}
 800dbb4:	bf00      	nop
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	20001588 	.word	0x20001588
 800dbc4:	20009288 	.word	0x20009288
 800dbc8:	20009290 	.word	0x20009290
 800dbcc:	20009298 	.word	0x20009298
 800dbd0:	20009294 	.word	0x20009294
 800dbd4:	2000929c 	.word	0x2000929c

0800dbd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbe0:	4b28      	ldr	r3, [pc, #160]	; (800dc84 <prvInsertBlockIntoFreeList+0xac>)
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	e002      	b.n	800dbec <prvInsertBlockIntoFreeList+0x14>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	60fb      	str	r3, [r7, #12]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d8f7      	bhi.n	800dbe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	4413      	add	r3, r2
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d108      	bne.n	800dc1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	441a      	add	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	441a      	add	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d118      	bne.n	800dc60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	4b15      	ldr	r3, [pc, #84]	; (800dc88 <prvInsertBlockIntoFreeList+0xb0>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d00d      	beq.n	800dc56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	441a      	add	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	e008      	b.n	800dc68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc56:	4b0c      	ldr	r3, [pc, #48]	; (800dc88 <prvInsertBlockIntoFreeList+0xb0>)
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	e003      	b.n	800dc68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d002      	beq.n	800dc76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	20009288 	.word	0x20009288
 800dc88:	20009290 	.word	0x20009290

0800dc8c <__libc_init_array>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	4d0d      	ldr	r5, [pc, #52]	; (800dcc4 <__libc_init_array+0x38>)
 800dc90:	4c0d      	ldr	r4, [pc, #52]	; (800dcc8 <__libc_init_array+0x3c>)
 800dc92:	1b64      	subs	r4, r4, r5
 800dc94:	10a4      	asrs	r4, r4, #2
 800dc96:	2600      	movs	r6, #0
 800dc98:	42a6      	cmp	r6, r4
 800dc9a:	d109      	bne.n	800dcb0 <__libc_init_array+0x24>
 800dc9c:	4d0b      	ldr	r5, [pc, #44]	; (800dccc <__libc_init_array+0x40>)
 800dc9e:	4c0c      	ldr	r4, [pc, #48]	; (800dcd0 <__libc_init_array+0x44>)
 800dca0:	f000 f8f2 	bl	800de88 <_init>
 800dca4:	1b64      	subs	r4, r4, r5
 800dca6:	10a4      	asrs	r4, r4, #2
 800dca8:	2600      	movs	r6, #0
 800dcaa:	42a6      	cmp	r6, r4
 800dcac:	d105      	bne.n	800dcba <__libc_init_array+0x2e>
 800dcae:	bd70      	pop	{r4, r5, r6, pc}
 800dcb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb4:	4798      	blx	r3
 800dcb6:	3601      	adds	r6, #1
 800dcb8:	e7ee      	b.n	800dc98 <__libc_init_array+0xc>
 800dcba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcbe:	4798      	blx	r3
 800dcc0:	3601      	adds	r6, #1
 800dcc2:	e7f2      	b.n	800dcaa <__libc_init_array+0x1e>
 800dcc4:	0800e6e8 	.word	0x0800e6e8
 800dcc8:	0800e6e8 	.word	0x0800e6e8
 800dccc:	0800e6e8 	.word	0x0800e6e8
 800dcd0:	0800e6ec 	.word	0x0800e6ec

0800dcd4 <__retarget_lock_acquire_recursive>:
 800dcd4:	4770      	bx	lr

0800dcd6 <__retarget_lock_release_recursive>:
 800dcd6:	4770      	bx	lr

0800dcd8 <memcpy>:
 800dcd8:	440a      	add	r2, r1
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dce0:	d100      	bne.n	800dce4 <memcpy+0xc>
 800dce2:	4770      	bx	lr
 800dce4:	b510      	push	{r4, lr}
 800dce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcee:	4291      	cmp	r1, r2
 800dcf0:	d1f9      	bne.n	800dce6 <memcpy+0xe>
 800dcf2:	bd10      	pop	{r4, pc}

0800dcf4 <memset>:
 800dcf4:	4402      	add	r2, r0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d100      	bne.n	800dcfe <memset+0xa>
 800dcfc:	4770      	bx	lr
 800dcfe:	f803 1b01 	strb.w	r1, [r3], #1
 800dd02:	e7f9      	b.n	800dcf8 <memset+0x4>

0800dd04 <cleanup_glue>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	460c      	mov	r4, r1
 800dd08:	6809      	ldr	r1, [r1, #0]
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	b109      	cbz	r1, 800dd12 <cleanup_glue+0xe>
 800dd0e:	f7ff fff9 	bl	800dd04 <cleanup_glue>
 800dd12:	4621      	mov	r1, r4
 800dd14:	4628      	mov	r0, r5
 800dd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd1a:	f000 b869 	b.w	800ddf0 <_free_r>
	...

0800dd20 <_reclaim_reent>:
 800dd20:	4b2c      	ldr	r3, [pc, #176]	; (800ddd4 <_reclaim_reent+0xb4>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4283      	cmp	r3, r0
 800dd26:	b570      	push	{r4, r5, r6, lr}
 800dd28:	4604      	mov	r4, r0
 800dd2a:	d051      	beq.n	800ddd0 <_reclaim_reent+0xb0>
 800dd2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dd2e:	b143      	cbz	r3, 800dd42 <_reclaim_reent+0x22>
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d14a      	bne.n	800ddcc <_reclaim_reent+0xac>
 800dd36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd38:	6819      	ldr	r1, [r3, #0]
 800dd3a:	b111      	cbz	r1, 800dd42 <_reclaim_reent+0x22>
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 f857 	bl	800ddf0 <_free_r>
 800dd42:	6961      	ldr	r1, [r4, #20]
 800dd44:	b111      	cbz	r1, 800dd4c <_reclaim_reent+0x2c>
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 f852 	bl	800ddf0 <_free_r>
 800dd4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd4e:	b111      	cbz	r1, 800dd56 <_reclaim_reent+0x36>
 800dd50:	4620      	mov	r0, r4
 800dd52:	f000 f84d 	bl	800ddf0 <_free_r>
 800dd56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd58:	b111      	cbz	r1, 800dd60 <_reclaim_reent+0x40>
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f000 f848 	bl	800ddf0 <_free_r>
 800dd60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dd62:	b111      	cbz	r1, 800dd6a <_reclaim_reent+0x4a>
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 f843 	bl	800ddf0 <_free_r>
 800dd6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dd6c:	b111      	cbz	r1, 800dd74 <_reclaim_reent+0x54>
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f000 f83e 	bl	800ddf0 <_free_r>
 800dd74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dd76:	b111      	cbz	r1, 800dd7e <_reclaim_reent+0x5e>
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 f839 	bl	800ddf0 <_free_r>
 800dd7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dd80:	b111      	cbz	r1, 800dd88 <_reclaim_reent+0x68>
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 f834 	bl	800ddf0 <_free_r>
 800dd88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd8a:	b111      	cbz	r1, 800dd92 <_reclaim_reent+0x72>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f000 f82f 	bl	800ddf0 <_free_r>
 800dd92:	69a3      	ldr	r3, [r4, #24]
 800dd94:	b1e3      	cbz	r3, 800ddd0 <_reclaim_reent+0xb0>
 800dd96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd98:	4620      	mov	r0, r4
 800dd9a:	4798      	blx	r3
 800dd9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dd9e:	b1b9      	cbz	r1, 800ddd0 <_reclaim_reent+0xb0>
 800dda0:	4620      	mov	r0, r4
 800dda2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dda6:	f7ff bfad 	b.w	800dd04 <cleanup_glue>
 800ddaa:	5949      	ldr	r1, [r1, r5]
 800ddac:	b941      	cbnz	r1, 800ddc0 <_reclaim_reent+0xa0>
 800ddae:	3504      	adds	r5, #4
 800ddb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddb2:	2d80      	cmp	r5, #128	; 0x80
 800ddb4:	68d9      	ldr	r1, [r3, #12]
 800ddb6:	d1f8      	bne.n	800ddaa <_reclaim_reent+0x8a>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 f819 	bl	800ddf0 <_free_r>
 800ddbe:	e7ba      	b.n	800dd36 <_reclaim_reent+0x16>
 800ddc0:	680e      	ldr	r6, [r1, #0]
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 f814 	bl	800ddf0 <_free_r>
 800ddc8:	4631      	mov	r1, r6
 800ddca:	e7ef      	b.n	800ddac <_reclaim_reent+0x8c>
 800ddcc:	2500      	movs	r5, #0
 800ddce:	e7ef      	b.n	800ddb0 <_reclaim_reent+0x90>
 800ddd0:	bd70      	pop	{r4, r5, r6, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000014 	.word	0x20000014

0800ddd8 <__malloc_lock>:
 800ddd8:	4801      	ldr	r0, [pc, #4]	; (800dde0 <__malloc_lock+0x8>)
 800ddda:	f7ff bf7b 	b.w	800dcd4 <__retarget_lock_acquire_recursive>
 800ddde:	bf00      	nop
 800dde0:	200092a0 	.word	0x200092a0

0800dde4 <__malloc_unlock>:
 800dde4:	4801      	ldr	r0, [pc, #4]	; (800ddec <__malloc_unlock+0x8>)
 800dde6:	f7ff bf76 	b.w	800dcd6 <__retarget_lock_release_recursive>
 800ddea:	bf00      	nop
 800ddec:	200092a0 	.word	0x200092a0

0800ddf0 <_free_r>:
 800ddf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddf2:	2900      	cmp	r1, #0
 800ddf4:	d044      	beq.n	800de80 <_free_r+0x90>
 800ddf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddfa:	9001      	str	r0, [sp, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f1a1 0404 	sub.w	r4, r1, #4
 800de02:	bfb8      	it	lt
 800de04:	18e4      	addlt	r4, r4, r3
 800de06:	f7ff ffe7 	bl	800ddd8 <__malloc_lock>
 800de0a:	4a1e      	ldr	r2, [pc, #120]	; (800de84 <_free_r+0x94>)
 800de0c:	9801      	ldr	r0, [sp, #4]
 800de0e:	6813      	ldr	r3, [r2, #0]
 800de10:	b933      	cbnz	r3, 800de20 <_free_r+0x30>
 800de12:	6063      	str	r3, [r4, #4]
 800de14:	6014      	str	r4, [r2, #0]
 800de16:	b003      	add	sp, #12
 800de18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de1c:	f7ff bfe2 	b.w	800dde4 <__malloc_unlock>
 800de20:	42a3      	cmp	r3, r4
 800de22:	d908      	bls.n	800de36 <_free_r+0x46>
 800de24:	6825      	ldr	r5, [r4, #0]
 800de26:	1961      	adds	r1, r4, r5
 800de28:	428b      	cmp	r3, r1
 800de2a:	bf01      	itttt	eq
 800de2c:	6819      	ldreq	r1, [r3, #0]
 800de2e:	685b      	ldreq	r3, [r3, #4]
 800de30:	1949      	addeq	r1, r1, r5
 800de32:	6021      	streq	r1, [r4, #0]
 800de34:	e7ed      	b.n	800de12 <_free_r+0x22>
 800de36:	461a      	mov	r2, r3
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	b10b      	cbz	r3, 800de40 <_free_r+0x50>
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	d9fa      	bls.n	800de36 <_free_r+0x46>
 800de40:	6811      	ldr	r1, [r2, #0]
 800de42:	1855      	adds	r5, r2, r1
 800de44:	42a5      	cmp	r5, r4
 800de46:	d10b      	bne.n	800de60 <_free_r+0x70>
 800de48:	6824      	ldr	r4, [r4, #0]
 800de4a:	4421      	add	r1, r4
 800de4c:	1854      	adds	r4, r2, r1
 800de4e:	42a3      	cmp	r3, r4
 800de50:	6011      	str	r1, [r2, #0]
 800de52:	d1e0      	bne.n	800de16 <_free_r+0x26>
 800de54:	681c      	ldr	r4, [r3, #0]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	6053      	str	r3, [r2, #4]
 800de5a:	4421      	add	r1, r4
 800de5c:	6011      	str	r1, [r2, #0]
 800de5e:	e7da      	b.n	800de16 <_free_r+0x26>
 800de60:	d902      	bls.n	800de68 <_free_r+0x78>
 800de62:	230c      	movs	r3, #12
 800de64:	6003      	str	r3, [r0, #0]
 800de66:	e7d6      	b.n	800de16 <_free_r+0x26>
 800de68:	6825      	ldr	r5, [r4, #0]
 800de6a:	1961      	adds	r1, r4, r5
 800de6c:	428b      	cmp	r3, r1
 800de6e:	bf04      	itt	eq
 800de70:	6819      	ldreq	r1, [r3, #0]
 800de72:	685b      	ldreq	r3, [r3, #4]
 800de74:	6063      	str	r3, [r4, #4]
 800de76:	bf04      	itt	eq
 800de78:	1949      	addeq	r1, r1, r5
 800de7a:	6021      	streq	r1, [r4, #0]
 800de7c:	6054      	str	r4, [r2, #4]
 800de7e:	e7ca      	b.n	800de16 <_free_r+0x26>
 800de80:	b003      	add	sp, #12
 800de82:	bd30      	pop	{r4, r5, pc}
 800de84:	200092a4 	.word	0x200092a4

0800de88 <_init>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr

0800de94 <_fini>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	bf00      	nop
 800de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9a:	bc08      	pop	{r3}
 800de9c:	469e      	mov	lr, r3
 800de9e:	4770      	bx	lr
