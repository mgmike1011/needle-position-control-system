
MCU-program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800be08  0800be08  0001be08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3fc  0800c3fc  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3fc  0800c3fc  0001c3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c404  0800c404  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c404  0800c404  0001c404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c408  0800c408  0001c408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800c40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000294  0800c6a0  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ab4  0800c6a0  00020ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019af2  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352c  00000000  00000000  00039db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0003d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e4f  00000000  00000000  0003fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a40a  00000000  00000000  000688d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f52db  00000000  00000000  00082ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177fbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006718  00000000  00000000  0017800c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000294 	.word	0x20000294
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bdec 	.word	0x0800bdec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000298 	.word	0x20000298
 800020c:	0800bdec 	.word	0x0800bdec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9bf 	b.w	8000f88 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Set_Resolution_A4988>:
 */
#include "A4988_Drive.h"
#include "math.h"
#include "main.h"
#include "stm32f7xx_hal.h"
void Set_Resolution_A4988(A4988_Drive* drive, int resolution){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	//	Setting the resolution of the driver.
	//	@param resolution: Resolution.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(resolution){
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	f200 809a 	bhi.w	80010d4 <Set_Resolution_A4988+0x148>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <Set_Resolution_A4988+0x1c>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fbd 	.word	0x08000fbd
 8000fac:	08000ff5 	.word	0x08000ff5
 8000fb0:	0800102d 	.word	0x0800102d
 8000fb4:	08001065 	.word	0x08001065
 8000fb8:	0800109d 	.word	0x0800109d
		case FULL_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69d8      	ldr	r0, [r3, #28]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f003 fa9c 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a18      	ldr	r0, [r3, #32]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f003 fa94 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f003 fa8c 	bl	8004504 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 1;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8000ff2:	e08b      	b.n	800110c <Set_Resolution_A4988+0x180>
		case HALF_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69d8      	ldr	r0, [r3, #28]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	f003 fa80 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_RESET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a18      	ldr	r0, [r3, #32]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	f003 fa78 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800101c:	2200      	movs	r2, #0
 800101e:	4619      	mov	r1, r3
 8001020:	f003 fa70 	bl	8004504 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 2;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800102a:	e06f      	b.n	800110c <Set_Resolution_A4988+0x180>
		case QUARTER_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_RESET);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69d8      	ldr	r0, [r3, #28]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	f003 fa64 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a18      	ldr	r0, [r3, #32]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	f003 fa5c 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	f003 fa54 	bl	8004504 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 4;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2204      	movs	r2, #4
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8001062:	e053      	b.n	800110c <Set_Resolution_A4988+0x180>
		case ONE_EIGHTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69d8      	ldr	r0, [r3, #28]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	f003 fa48 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a18      	ldr	r0, [r3, #32]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	f003 fa40 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	f003 fa38 	bl	8004504 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 8;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2208      	movs	r2, #8
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800109a:	e037      	b.n	800110c <Set_Resolution_A4988+0x180>
		case ONE_SIXTEENTH_STEP:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69d8      	ldr	r0, [r3, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	f003 fa2c 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a18      	ldr	r0, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f003 fa24 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80010c4:	2201      	movs	r2, #1
 80010c6:	4619      	mov	r1, r3
 80010c8:	f003 fa1c 	bl	8004504 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2210      	movs	r2, #16
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80010d2:	e01b      	b.n	800110c <Set_Resolution_A4988+0x180>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_MS1), drive->PIN_MS1, GPIO_PIN_SET);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69d8      	ldr	r0, [r3, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	f003 fa10 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS2), drive->PIN_MS2, GPIO_PIN_SET);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a18      	ldr	r0, [r3, #32]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	f003 fa08 	bl	8004504 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(*&(drive->PORT_MS3), drive->PIN_MS3, GPIO_PIN_SET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f003 fa00 	bl	8004504 <HAL_GPIO_WritePin>
			drive->RESOLUTION = 16;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2210      	movs	r2, #16
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Set_Direction_A4988>:
void Set_Direction_A4988(A4988_Drive* drive, int direction){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	//	Setting the direction of rotation.
	//	@param direction: 1 - Right, 2 - Left, default - Right.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(direction){
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d003      	beq.n	800112c <Set_Direction_A4988+0x18>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d00c      	beq.n	8001144 <Set_Direction_A4988+0x30>
 800112a:	e017      	b.n	800115c <Set_Direction_A4988+0x48>
		case 1:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6958      	ldr	r0, [r3, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	8b1b      	ldrh	r3, [r3, #24]
 8001134:	2201      	movs	r2, #1
 8001136:	4619      	mov	r1, r3
 8001138:	f003 f9e4 	bl	8004504 <HAL_GPIO_WritePin>
			drive->Current_Direction = RIGHT_DIR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	769a      	strb	r2, [r3, #26]
			break;
 8001142:	e017      	b.n	8001174 <Set_Direction_A4988+0x60>
		case 2:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_RESET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6958      	ldr	r0, [r3, #20]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8b1b      	ldrh	r3, [r3, #24]
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	f003 f9d8 	bl	8004504 <HAL_GPIO_WritePin>
			drive->Current_Direction = LEFT_DIR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	769a      	strb	r2, [r3, #26]
			break;
 800115a:	e00b      	b.n	8001174 <Set_Direction_A4988+0x60>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_DIR), drive->PIN_DIR, GPIO_PIN_SET);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6958      	ldr	r0, [r3, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	8b1b      	ldrh	r3, [r3, #24]
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	f003 f9cc 	bl	8004504 <HAL_GPIO_WritePin>
			drive->Current_Direction = RIGHT_DIR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	769a      	strb	r2, [r3, #26]
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Enable_A4988>:
void Enable_A4988(A4988_Drive* drive, int signal){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	//	Enable controler.
	//	@param signal: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(signal){
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d003      	beq.n	8001194 <Enable_A4988+0x18>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d009      	beq.n	80011a6 <Enable_A4988+0x2a>
 8001192:	e011      	b.n	80011b8 <Enable_A4988+0x3c>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_RESET);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	f003 f9b0 	bl	8004504 <HAL_GPIO_WritePin>
			break;
 80011a4:	e011      	b.n	80011ca <Enable_A4988+0x4e>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f003 f9a7 	bl	8004504 <HAL_GPIO_WritePin>
			break;
 80011b6:	e008      	b.n	80011ca <Enable_A4988+0x4e>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_ENABLE), drive->PIN_ENABLE, GPIO_PIN_SET);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80011c0:	2201      	movs	r2, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	f003 f99e 	bl	8004504 <HAL_GPIO_WritePin>
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <Reset_A4988>:
void Reset_A4988(A4988_Drive* drive, int reset){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	//	Reset controler.
	//	@param reset: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(reset){
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d003      	beq.n	80011ea <Reset_A4988+0x18>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d00a      	beq.n	80011fe <Reset_A4988+0x2c>
 80011e8:	e013      	b.n	8001212 <Reset_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_SET);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	f003 f984 	bl	8004504 <HAL_GPIO_WritePin>
			break;
 80011fc:	e013      	b.n	8001226 <Reset_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f003 f97a 	bl	8004504 <HAL_GPIO_WritePin>
			break;
 8001210:	e009      	b.n	8001226 <Reset_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_RESET), drive->PIN_RESET, GPIO_PIN_RESET);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	f003 f970 	bl	8004504 <HAL_GPIO_WritePin>
	}
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <Sleep_A4988>:
void Sleep_A4988(A4988_Drive* drive, int sleep){
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
	//	Enable sleep mode.
	//	@param sleep: ENABLE_DRIVE - 1, DISABLE_DRIVE - 2, default - disable.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	switch(sleep){
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d003      	beq.n	8001246 <Sleep_A4988+0x18>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d00a      	beq.n	800125a <Sleep_A4988+0x2c>
 8001244:	e013      	b.n	800126e <Sleep_A4988+0x40>
		case ENABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_SET);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	f003 f956 	bl	8004504 <HAL_GPIO_WritePin>
			break;
 8001258:	e013      	b.n	8001282 <Sleep_A4988+0x54>
		case DISABLE_DRIVE:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	f003 f94c 	bl	8004504 <HAL_GPIO_WritePin>
			break;
 800126c:	e009      	b.n	8001282 <Sleep_A4988+0x54>
		default:
			HAL_GPIO_WritePin(*&(drive->PORT_SLEEP), drive->PIN_SLEEP, GPIO_PIN_RESET);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	f003 f942 	bl	8004504 <HAL_GPIO_WritePin>
	}
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <Calculate_Steps_A4988>:
int Calculate_Steps_A4988(A4988_Drive* drive, float angle){
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	ed87 0a00 	vstr	s0, [r7]
	// @param angle: Angle.
	// @param resolution: Set resolution.
	// @param drive: Pointer to structure.
	// @return: Number of steps.
	//
	int steps = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
	float r_s,x_s;
	r_s = 360/((float)(drive->STEPS));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001308 <Calculate_Steps_A4988+0x7c>
 80012ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b0:	edc7 7a04 	vstr	s15, [r7, #16]
	x_s = r_s/((float)(drive->RESOLUTION));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	edd7 6a04 	vldr	s13, [r7, #16]
 80012c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]
	steps = (int)round(angle/x_s);
 80012cc:	ed97 7a00 	vldr	s14, [r7]
 80012d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012d8:	ee16 0a90 	vmov	r0, s13
 80012dc:	f7ff f954 	bl	8000588 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	ec43 2b10 	vmov	d0, r2, r3
 80012e8:	f00a fd3a 	bl	800bd60 <round>
 80012ec:	ec53 2b10 	vmov	r2, r3, d0
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc50 	bl	8000b98 <__aeabi_d2iz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	617b      	str	r3, [r7, #20]
	return steps;
 80012fc:	697b      	ldr	r3, [r7, #20]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	43b40000 	.word	0x43b40000

0800130c <Rotate_A4988>:
void Rotate_A4988(A4988_Drive* drive, float angle){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	ed87 0a00 	vstr	s0, [r7]
	//	Rotates the motor by a given angle.
	//	@param angle: Desired angle to rotate.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	int steps = Calculate_Steps_A4988(drive, angle);
 8001318:	ed97 0a00 	vldr	s0, [r7]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffb5 	bl	800128c <Calculate_Steps_A4988>
 8001322:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(drive->TIM_STEP,steps);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	60da      	str	r2, [r3, #12]
	Sleep_A4988(drive, ENABLE_DRIVE);
 8001336:	2101      	movs	r1, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff78 	bl	800122e <Sleep_A4988>
	HAL_TIM_PWM_Start(drive->TIM_STEP, drive->TIM_STEP_CHANNEL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f005 f933 	bl	80065b4 <HAL_TIM_PWM_Start>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <Rotate_mm_A4988>:
void Rotate_mm_A4988(A4988_Drive* drive, float distance){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	ed87 0a00 	vstr	s0, [r7]
	//	Rotates the motor by a given distance in mm.
	//	@param distance: Distance in mm.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	float step_res_ = 360/(float)(drive->STEPS);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80013a8 <Rotate_mm_A4988+0x50>
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	edc7 7a03 	vstr	s15, [r7, #12]
	float angle = (distance*step_res_)/((float)(drive->STEP_mm_RESOLUTION));
 800137c:	ed97 7a00 	vldr	s14, [r7]
 8001380:	edd7 7a03 	vldr	s15, [r7, #12]
 8001384:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed93 7a04 	vldr	s14, [r3, #16]
 800138e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001392:	edc7 7a02 	vstr	s15, [r7, #8]
	Rotate_A4988(drive, angle);
 8001396:	ed97 0a02 	vldr	s0, [r7, #8]
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb6 	bl	800130c <Rotate_A4988>
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	43b40000 	.word	0x43b40000

080013ac <Init_A4988>:
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL, pulse_val);
	}else{
		__HAL_TIM_SET_COMPARE(drive->TIM_STEP, drive->TIM_STEP_CHANNEL,0);
	}
}
void Init_A4988(A4988_Drive* drive){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	//
	//	Initialize the drive.
	//	@param drive: Pointer to structure.
	//	@return: none
	//
	HAL_TIM_Base_Start_IT(drive->TIM_COUNTER_SLAVE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fff3 	bl	80063a4 <HAL_TIM_Base_Start_IT>
	Set_Resolution_A4988(drive, HALF_STEP);
 80013be:	2102      	movs	r1, #2
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fde3 	bl	8000f8c <Set_Resolution_A4988>
	Set_Direction_A4988(drive, RIGHT_DIR);
 80013c6:	2101      	movs	r1, #1
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fea3 	bl	8001114 <Set_Direction_A4988>
	Enable_A4988(drive, ENABLE_DRIVE);
 80013ce:	2101      	movs	r1, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fed3 	bl	800117c <Enable_A4988>
	Reset_A4988(drive, ENABLE_DRIVE);
 80013d6:	2101      	movs	r1, #1
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fefa 	bl	80011d2 <Reset_A4988>
	Sleep_A4988(drive, DISABLE_DRIVE);
 80013de:	2102      	movs	r1, #2
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff24 	bl	800122e <Sleep_A4988>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <BMP280_Read8+0x38>)
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	b29a      	uxth	r2, r3
 8001406:	230a      	movs	r3, #10
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f107 030f 	add.w	r3, r7, #15
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	21ec      	movs	r1, #236	; 0xec
 8001418:	f003 fa4a 	bl	80048b0 <HAL_I2C_Mem_Read>
  return tmp;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002b0 	.word	0x200002b0

0800142c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af04      	add	r7, sp, #16
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <BMP280_Read16+0x40>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	b29a      	uxth	r2, r3
 800143e:	230a      	movs	r3, #10
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2302      	movs	r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	21ec      	movs	r1, #236	; 0xec
 8001450:	f003 fa2e 	bl	80048b0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001454:	7b3b      	ldrb	r3, [r7, #12]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002b0 	.word	0x200002b0

08001470 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ffd5 	bl	800142c <BMP280_Read16>
 8001482:	4603      	mov	r3, r0
 8001484:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	b29b      	uxth	r3, r3
 800148c:	b21a      	sxth	r2, r3
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	b29b      	uxth	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <BMP280_Write8+0x34>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	230a      	movs	r3, #10
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	1dbb      	adds	r3, r7, #6
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	21ec      	movs	r1, #236	; 0xec
 80014cc:	f003 f8dc 	bl	8004688 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200002b0 	.word	0x200002b0

080014dc <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af04      	add	r7, sp, #16
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <BMP280_Read24+0x40>)
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	230a      	movs	r3, #10
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	2303      	movs	r3, #3
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	21ec      	movs	r1, #236	; 0xec
 8001500:	f003 f9d6 	bl	80048b0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	4313      	orrs	r3, r2
 800150e:	7bba      	ldrb	r2, [r7, #14]
 8001510:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002b0 	.word	0x200002b0

08001520 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	70fb      	strb	r3, [r7, #3]
 8001532:	460b      	mov	r3, r1
 8001534:	70bb      	strb	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <BMP280_Init+0x13c>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d901      	bls.n	800154a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001546:	2303      	movs	r3, #3
 8001548:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800154a:	4a45      	ldr	r2, [pc, #276]	; (8001660 <BMP280_Init+0x140>)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001556:	2300      	movs	r3, #0
 8001558:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	2b05      	cmp	r3, #5
 800155e:	d901      	bls.n	8001564 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001560:	2305      	movs	r3, #5
 8001562:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001564:	4a3f      	ldr	r2, [pc, #252]	; (8001664 <BMP280_Init+0x144>)
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d901      	bls.n	8001574 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001570:	2305      	movs	r3, #5
 8001572:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001574:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <BMP280_Init+0x148>)
 8001576:	78bb      	ldrb	r3, [r7, #2]
 8001578:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800157a:	bf00      	nop
 800157c:	20d0      	movs	r0, #208	; 0xd0
 800157e:	f7ff ff37 	bl	80013f0 <BMP280_Read8>
 8001582:	4603      	mov	r3, r0
 8001584:	2b58      	cmp	r3, #88	; 0x58
 8001586:	d1f9      	bne.n	800157c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001588:	2088      	movs	r0, #136	; 0x88
 800158a:	f7ff ff71 	bl	8001470 <BMP280_Read16LE>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b36      	ldr	r3, [pc, #216]	; (800166c <BMP280_Init+0x14c>)
 8001594:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001596:	208a      	movs	r0, #138	; 0x8a
 8001598:	f7ff ff6a 	bl	8001470 <BMP280_Read16LE>
 800159c:	4603      	mov	r3, r0
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <BMP280_Init+0x150>)
 80015a2:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80015a4:	208c      	movs	r0, #140	; 0x8c
 80015a6:	f7ff ff63 	bl	8001470 <BMP280_Read16LE>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <BMP280_Init+0x154>)
 80015b0:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80015b2:	208e      	movs	r0, #142	; 0x8e
 80015b4:	f7ff ff5c 	bl	8001470 <BMP280_Read16LE>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <BMP280_Init+0x158>)
 80015be:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80015c0:	2090      	movs	r0, #144	; 0x90
 80015c2:	f7ff ff55 	bl	8001470 <BMP280_Read16LE>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <BMP280_Init+0x15c>)
 80015cc:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80015ce:	2092      	movs	r0, #146	; 0x92
 80015d0:	f7ff ff4e 	bl	8001470 <BMP280_Read16LE>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <BMP280_Init+0x160>)
 80015da:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80015dc:	2094      	movs	r0, #148	; 0x94
 80015de:	f7ff ff47 	bl	8001470 <BMP280_Read16LE>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b27      	ldr	r3, [pc, #156]	; (8001684 <BMP280_Init+0x164>)
 80015e8:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80015ea:	2096      	movs	r0, #150	; 0x96
 80015ec:	f7ff ff40 	bl	8001470 <BMP280_Read16LE>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <BMP280_Init+0x168>)
 80015f6:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80015f8:	2098      	movs	r0, #152	; 0x98
 80015fa:	f7ff ff39 	bl	8001470 <BMP280_Read16LE>
 80015fe:	4603      	mov	r3, r0
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <BMP280_Init+0x16c>)
 8001604:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001606:	209a      	movs	r0, #154	; 0x9a
 8001608:	f7ff ff32 	bl	8001470 <BMP280_Read16LE>
 800160c:	4603      	mov	r3, r0
 800160e:	b21a      	sxth	r2, r3
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <BMP280_Init+0x170>)
 8001612:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001614:	209c      	movs	r0, #156	; 0x9c
 8001616:	f7ff ff2b 	bl	8001470 <BMP280_Read16LE>
 800161a:	4603      	mov	r3, r0
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <BMP280_Init+0x174>)
 8001620:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001622:	209e      	movs	r0, #158	; 0x9e
 8001624:	f7ff ff24 	bl	8001470 <BMP280_Read16LE>
 8001628:	4603      	mov	r3, r0
 800162a:	b21a      	sxth	r2, r3
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <BMP280_Init+0x178>)
 800162e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	b25a      	sxtb	r2, r3
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b25b      	sxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b25a      	sxtb	r2, r3
 8001640:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	20f4      	movs	r0, #244	; 0xf4
 800164e:	f7ff ff29 	bl	80014a4 <BMP280_Write8>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002b0 	.word	0x200002b0
 8001660:	200002b6 	.word	0x200002b6
 8001664:	200002b4 	.word	0x200002b4
 8001668:	200002b5 	.word	0x200002b5
 800166c:	200002cc 	.word	0x200002cc
 8001670:	200002b8 	.word	0x200002b8
 8001674:	200002ba 	.word	0x200002ba
 8001678:	200002ce 	.word	0x200002ce
 800167c:	200002bc 	.word	0x200002bc
 8001680:	200002be 	.word	0x200002be
 8001684:	200002c0 	.word	0x200002c0
 8001688:	200002c2 	.word	0x200002c2
 800168c:	200002c4 	.word	0x200002c4
 8001690:	200002c6 	.word	0x200002c6
 8001694:	200002c8 	.word	0x200002c8
 8001698:	200002ca 	.word	0x200002ca

0800169c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <BMP280_ReadTemperature+0xfc>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d16d      	bne.n	8001786 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80016aa:	20f4      	movs	r0, #244	; 0xf4
 80016ac:	f7ff fea0 	bl	80013f0 <BMP280_Read8>
 80016b0:	4603      	mov	r3, r0
 80016b2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	4619      	mov	r1, r3
 80016c8:	20f4      	movs	r0, #244	; 0xf4
 80016ca:	f7ff feeb 	bl	80014a4 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80016ce:	20f4      	movs	r0, #244	; 0xf4
 80016d0:	f7ff fe8e 	bl	80013f0 <BMP280_Read8>
 80016d4:	4603      	mov	r3, r0
 80016d6:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80016d8:	7dbb      	ldrb	r3, [r7, #22]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d14f      	bne.n	8001786 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80016e6:	20f4      	movs	r0, #244	; 0xf4
 80016e8:	f7ff fe82 	bl	80013f0 <BMP280_Read8>
 80016ec:	4603      	mov	r3, r0
 80016ee:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80016f0:	7dbb      	ldrb	r3, [r7, #22]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80016f8:	7dbb      	ldrb	r3, [r7, #22]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d000      	beq.n	8001700 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80016fe:	e7f2      	b.n	80016e6 <BMP280_ReadTemperature+0x4a>
				  break;
 8001700:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001702:	20fa      	movs	r0, #250	; 0xfa
 8001704:	f7ff feea 	bl	80014dc <BMP280_Read24>
 8001708:	4603      	mov	r3, r0
 800170a:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	111b      	asrs	r3, r3, #4
 8001710:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	10da      	asrs	r2, r3, #3
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <BMP280_ReadTemperature+0x100>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <BMP280_ReadTemperature+0x104>)
 8001720:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	12db      	asrs	r3, r3, #11
 800172a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	111b      	asrs	r3, r3, #4
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <BMP280_ReadTemperature+0x100>)
 8001732:	8812      	ldrh	r2, [r2, #0]
 8001734:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	1112      	asrs	r2, r2, #4
 800173a:	4918      	ldr	r1, [pc, #96]	; (800179c <BMP280_ReadTemperature+0x100>)
 800173c:	8809      	ldrh	r1, [r1, #0]
 800173e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001740:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001744:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <BMP280_ReadTemperature+0x108>)
 8001748:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800174c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001750:	139b      	asrs	r3, r3, #14
 8001752:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <BMP280_ReadTemperature+0x10c>)
 800175c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <BMP280_ReadTemperature+0x10c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3380      	adds	r3, #128	; 0x80
 800176a:	121b      	asrs	r3, r3, #8
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001778:	edd7 7a01 	vldr	s15, [r7, #4]
 800177c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80017ac <BMP280_ReadTemperature+0x110>
 8001780:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001784:	e001      	b.n	800178a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001786:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80017b0 <BMP280_ReadTemperature+0x114>
}
 800178a:	eef0 7a47 	vmov.f32	s15, s14
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002b6 	.word	0x200002b6
 800179c:	200002cc 	.word	0x200002cc
 80017a0:	200002b8 	.word	0x200002b8
 80017a4:	200002ba 	.word	0x200002ba
 80017a8:	200002d0 	.word	0x200002d0
 80017ac:	42c80000 	.word	0x42c80000
 80017b0:	c2c60000 	.word	0xc2c60000

080017b4 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80017b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b8:	b0cc      	sub	sp, #304	; 0x130
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80017c0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80017c4:	f7ff ff6a 	bl	800169c <BMP280_ReadTemperature>
 80017c8:	eef0 7a40 	vmov.f32	s15, s0
 80017cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017d0:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80017d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001aac <BMP280_ReadTemperatureAndPressure+0x2f8>
 80017e0:	eef4 7a47 	vcmp.f32	s15, s14
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	d101      	bne.n	80017ee <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80017ea:	23ff      	movs	r3, #255	; 0xff
 80017ec:	e2bf      	b.n	8001d6e <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80017ee:	20f7      	movs	r0, #247	; 0xf7
 80017f0:	f7ff fe74 	bl	80014dc <BMP280_Read24>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 80017fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017fe:	111b      	asrs	r3, r3, #4
 8001800:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001804:	4baa      	ldr	r3, [pc, #680]	; (8001ab0 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800180e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001812:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001816:	460b      	mov	r3, r1
 8001818:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 800181c:	64bb      	str	r3, [r7, #72]	; 0x48
 800181e:	4613      	mov	r3, r2
 8001820:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001826:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800182a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800182e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001836:	fb03 f102 	mul.w	r1, r3, r2
 800183a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800183e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	18ca      	adds	r2, r1, r3
 8001848:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800184c:	fba3 4503 	umull	r4, r5, r3, r3
 8001850:	1953      	adds	r3, r2, r5
 8001852:	461d      	mov	r5, r3
 8001854:	4b97      	ldr	r3, [pc, #604]	; (8001ab4 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	b21b      	sxth	r3, r3
 800185c:	17da      	asrs	r2, r3, #31
 800185e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001862:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001866:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800186a:	4603      	mov	r3, r0
 800186c:	fb03 f205 	mul.w	r2, r3, r5
 8001870:	460b      	mov	r3, r1
 8001872:	fb04 f303 	mul.w	r3, r4, r3
 8001876:	4413      	add	r3, r2
 8001878:	4602      	mov	r2, r0
 800187a:	fba4 8902 	umull	r8, r9, r4, r2
 800187e:	444b      	add	r3, r9
 8001880:	4699      	mov	r9, r3
 8001882:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001886:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <BMP280_ReadTemperatureAndPressure+0x304>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	b21b      	sxth	r3, r3
 8001892:	17da      	asrs	r2, r3, #31
 8001894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001898:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800189c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018a0:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80018a4:	462a      	mov	r2, r5
 80018a6:	fb02 f203 	mul.w	r2, r2, r3
 80018aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018ae:	4621      	mov	r1, r4
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	441a      	add	r2, r3
 80018b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018ba:	4621      	mov	r1, r4
 80018bc:	fba3 ab01 	umull	sl, fp, r3, r1
 80018c0:	eb02 030b 	add.w	r3, r2, fp
 80018c4:	469b      	mov	fp, r3
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80018d2:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80018d6:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80018da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018de:	1814      	adds	r4, r2, r0
 80018e0:	643c      	str	r4, [r7, #64]	; 0x40
 80018e2:	414b      	adcs	r3, r1
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
 80018e6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80018ea:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <BMP280_ReadTemperatureAndPressure+0x308>)
 80018f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	17da      	asrs	r2, r3, #31
 80018f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018fc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800190c:	00d9      	lsls	r1, r3, #3
 800190e:	2000      	movs	r0, #0
 8001910:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001914:	1814      	adds	r4, r2, r0
 8001916:	63bc      	str	r4, [r7, #56]	; 0x38
 8001918:	414b      	adcs	r3, r1
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001920:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001924:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001928:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800192c:	fb03 f102 	mul.w	r1, r3, r2
 8001930:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001934:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	18ca      	adds	r2, r1, r3
 800193e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001942:	fba3 1303 	umull	r1, r3, r3, r3
 8001946:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800194a:	460b      	mov	r3, r1
 800194c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <BMP280_ReadTemperatureAndPressure+0x30c>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	b21b      	sxth	r3, r3
 8001962:	17da      	asrs	r2, r3, #31
 8001964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001968:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800196c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001970:	462b      	mov	r3, r5
 8001972:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001976:	4642      	mov	r2, r8
 8001978:	fb02 f203 	mul.w	r2, r2, r3
 800197c:	464b      	mov	r3, r9
 800197e:	4621      	mov	r1, r4
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	4622      	mov	r2, r4
 8001988:	4641      	mov	r1, r8
 800198a:	fba2 1201 	umull	r1, r2, r2, r1
 800198e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001992:	460a      	mov	r2, r1
 8001994:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001998:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800199c:	4413      	add	r3, r2
 800199e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80019ae:	4623      	mov	r3, r4
 80019b0:	0a18      	lsrs	r0, r3, #8
 80019b2:	462b      	mov	r3, r5
 80019b4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019b8:	462b      	mov	r3, r5
 80019ba:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <BMP280_ReadTemperatureAndPressure+0x310>)
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	17da      	asrs	r2, r3, #31
 80019c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80019ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80019d6:	464a      	mov	r2, r9
 80019d8:	fb02 f203 	mul.w	r2, r2, r3
 80019dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019e0:	4644      	mov	r4, r8
 80019e2:	fb04 f303 	mul.w	r3, r4, r3
 80019e6:	441a      	add	r2, r3
 80019e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019ec:	4644      	mov	r4, r8
 80019ee:	fba3 4304 	umull	r4, r3, r3, r4
 80019f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019f6:	4623      	mov	r3, r4
 80019f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80019fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001a12:	464c      	mov	r4, r9
 8001a14:	0323      	lsls	r3, r4, #12
 8001a16:	4644      	mov	r4, r8
 8001a18:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001a20:	1884      	adds	r4, r0, r2
 8001a22:	633c      	str	r4, [r7, #48]	; 0x30
 8001a24:	eb41 0303 	adc.w	r3, r1, r3
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a2e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001a32:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a36:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a3a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001a3e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001a52:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001a56:	462b      	mov	r3, r5
 8001a58:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	fb02 f203 	mul.w	r2, r2, r3
 8001a62:	464b      	mov	r3, r9
 8001a64:	4621      	mov	r1, r4
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	4641      	mov	r1, r8
 8001a70:	fba2 1201 	umull	r1, r2, r2, r1
 8001a74:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001a78:	460a      	mov	r2, r1
 8001a7a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001a7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a82:	4413      	add	r3, r2
 8001a84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001a94:	4629      	mov	r1, r5
 8001a96:	104a      	asrs	r2, r1, #1
 8001a98:	4629      	mov	r1, r5
 8001a9a:	17cb      	asrs	r3, r1, #31
 8001a9c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001aa0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	d111      	bne.n	8001acc <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e160      	b.n	8001d6e <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001aac:	c2c60000 	.word	0xc2c60000
 8001ab0:	200002d0 	.word	0x200002d0
 8001ab4:	200002c4 	.word	0x200002c4
 8001ab8:	200002c2 	.word	0x200002c2
 8001abc:	200002c0 	.word	0x200002c0
 8001ac0:	200002be 	.word	0x200002be
 8001ac4:	200002bc 	.word	0x200002bc
 8001ac8:	200002ce 	.word	0x200002ce
	  }
	  p = 1048576 - adc_P;
 8001acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ad0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ada:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001ade:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ae6:	105b      	asrs	r3, r3, #1
 8001ae8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001aec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001af6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001afa:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001afe:	4621      	mov	r1, r4
 8001b00:	1a89      	subs	r1, r1, r2
 8001b02:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001b06:	4629      	mov	r1, r5
 8001b08:	eb61 0303 	sbc.w	r3, r1, r3
 8001b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b10:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001b14:	4622      	mov	r2, r4
 8001b16:	462b      	mov	r3, r5
 8001b18:	1891      	adds	r1, r2, r2
 8001b1a:	6239      	str	r1, [r7, #32]
 8001b1c:	415b      	adcs	r3, r3
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b24:	4621      	mov	r1, r4
 8001b26:	1851      	adds	r1, r2, r1
 8001b28:	61b9      	str	r1, [r7, #24]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	414b      	adcs	r3, r1
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	018b      	lsls	r3, r1, #6
 8001b40:	4641      	mov	r1, r8
 8001b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b46:	4641      	mov	r1, r8
 8001b48:	018a      	lsls	r2, r1, #6
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	1889      	adds	r1, r1, r2
 8001b4e:	6139      	str	r1, [r7, #16]
 8001b50:	4649      	mov	r1, r9
 8001b52:	eb43 0101 	adc.w	r1, r3, r1
 8001b56:	6179      	str	r1, [r7, #20]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b64:	4649      	mov	r1, r9
 8001b66:	008b      	lsls	r3, r1, #2
 8001b68:	4641      	mov	r1, r8
 8001b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b6e:	4641      	mov	r1, r8
 8001b70:	008a      	lsls	r2, r1, #2
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	4622      	mov	r2, r4
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	462a      	mov	r2, r5
 8001b82:	eb42 0303 	adc.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b94:	4649      	mov	r1, r9
 8001b96:	008b      	lsls	r3, r1, #2
 8001b98:	4641      	mov	r1, r8
 8001b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	008a      	lsls	r2, r1, #2
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4622      	mov	r2, r4
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bae:	462b      	mov	r3, r5
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	eb42 0303 	adc.w	r3, r2, r3
 8001bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bb8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bbc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bc0:	f7ff f812 	bl	8000be8 <__aeabi_ldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	17da      	asrs	r2, r3, #31
 8001bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8001bd8:	677a      	str	r2, [r7, #116]	; 0x74
 8001bda:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0b50      	lsrs	r0, r2, #13
 8001be8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bec:	1359      	asrs	r1, r3, #13
 8001bee:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001bf2:	462b      	mov	r3, r5
 8001bf4:	fb00 f203 	mul.w	r2, r0, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	fb03 f301 	mul.w	r3, r3, r1
 8001bfe:	4413      	add	r3, r2
 8001c00:	4622      	mov	r2, r4
 8001c02:	fba2 1200 	umull	r1, r2, r2, r0
 8001c06:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001c10:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001c14:	4413      	add	r3, r2
 8001c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c1a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0b50      	lsrs	r0, r2, #13
 8001c28:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c2c:	1359      	asrs	r1, r3, #13
 8001c2e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001c32:	462b      	mov	r3, r5
 8001c34:	fb00 f203 	mul.w	r2, r0, r3
 8001c38:	4623      	mov	r3, r4
 8001c3a:	fb03 f301 	mul.w	r3, r3, r1
 8001c3e:	4413      	add	r3, r2
 8001c40:	4622      	mov	r2, r4
 8001c42:	fba2 1200 	umull	r1, r2, r2, r0
 8001c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c4a:	460a      	mov	r2, r1
 8001c4c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c54:	4413      	add	r3, r2
 8001c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c66:	4621      	mov	r1, r4
 8001c68:	0e4a      	lsrs	r2, r1, #25
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001c70:	4629      	mov	r1, r5
 8001c72:	164b      	asrs	r3, r1, #25
 8001c74:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001c78:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	17da      	asrs	r2, r3, #31
 8001c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c8a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001c8e:	462a      	mov	r2, r5
 8001c90:	fb02 f203 	mul.w	r2, r2, r3
 8001c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c98:	4621      	mov	r1, r4
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	fba2 1201 	umull	r1, r2, r2, r1
 8001caa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cae:	460a      	mov	r2, r1
 8001cb0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001cb4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001cb8:	4413      	add	r3, r2
 8001cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001cca:	4621      	mov	r1, r4
 8001ccc:	0cca      	lsrs	r2, r1, #19
 8001cce:	4629      	mov	r1, r5
 8001cd0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	14cb      	asrs	r3, r1, #19
 8001cd8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001cdc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001ce0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ce4:	1884      	adds	r4, r0, r2
 8001ce6:	663c      	str	r4, [r7, #96]	; 0x60
 8001ce8:	eb41 0303 	adc.w	r3, r1, r3
 8001cec:	667b      	str	r3, [r7, #100]	; 0x64
 8001cee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cf2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	1889      	adds	r1, r1, r2
 8001cfa:	65b9      	str	r1, [r7, #88]	; 0x58
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb43 0101 	adc.w	r1, r3, r1
 8001d02:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001d10:	4623      	mov	r3, r4
 8001d12:	0a18      	lsrs	r0, r3, #8
 8001d14:	462b      	mov	r3, r5
 8001d16:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d1a:	462b      	mov	r3, r5
 8001d1c:	1219      	asrs	r1, r3, #8
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	17da      	asrs	r2, r3, #31
 8001d28:	653b      	str	r3, [r7, #80]	; 0x50
 8001d2a:	657a      	str	r2, [r7, #84]	; 0x54
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d38:	464c      	mov	r4, r9
 8001d3a:	0123      	lsls	r3, r4, #4
 8001d3c:	4644      	mov	r4, r8
 8001d3e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d42:	4644      	mov	r4, r8
 8001d44:	0122      	lsls	r2, r4, #4
 8001d46:	1884      	adds	r4, r0, r2
 8001d48:	603c      	str	r4, [r7, #0]
 8001d4a:	eb41 0303 	adc.w	r3, r1, r3
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d54:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001d58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da00      	bge.n	8001d62 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001d60:	33ff      	adds	r3, #255	; 0xff
 8001d62:	121b      	asrs	r3, r3, #8
 8001d64:	461a      	mov	r2, r3
 8001d66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d6a:	601a      	str	r2, [r3, #0]

	  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200002ca 	.word	0x200002ca
 8001d80:	200002c8 	.word	0x200002c8
 8001d84:	200002c6 	.word	0x200002c6

08001d88 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <GFX_SetFont+0x1c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	200002d4 	.word	0x200002d4

08001da8 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <GFX_SetFontSize+0x16>
		size = size_t;
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <GFX_SetFontSize+0x24>)
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	7013      	strb	r3, [r2, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	460b      	mov	r3, r1
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	4613      	mov	r3, r2
 8001de4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b7e      	cmp	r3, #126	; 0x7e
 8001dea:	f200 80a3 	bhi.w	8001f34 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
 8001df2:	e096      	b.n	8001f22 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <GFX_DrawChar+0x16c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	3b20      	subs	r3, #32
 8001dfc:	494f      	ldr	r1, [pc, #316]	; (8001f3c <GFX_DrawChar+0x16c>)
 8001dfe:	6809      	ldr	r1, [r1, #0]
 8001e00:	3101      	adds	r1, #1
 8001e02:	7809      	ldrb	r1, [r1, #0]
 8001e04:	fb03 f101 	mul.w	r1, r3, r1
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001e14:	2300      	movs	r3, #0
 8001e16:	757b      	strb	r3, [r7, #21]
 8001e18:	e078      	b.n	8001f0c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8001e1a:	7dbb      	ldrb	r3, [r7, #22]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d032      	beq.n	8001e8a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <GFX_DrawChar+0x170>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d113      	bne.n	8001e54 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b218      	sxth	r0, r3
 8001e3a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	79ba      	ldrb	r2, [r7, #6]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f000 f9d3 	bl	80021f8 <SSD1306_DrawPixel>
 8001e52:	e052      	b.n	8001efa <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	; (8001f40 <GFX_DrawChar+0x170>)
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	18d0      	adds	r0, r2, r3
 8001e62:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e66:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <GFX_DrawChar+0x170>)
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	fb03 f202 	mul.w	r2, r3, r2
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	18d1      	adds	r1, r2, r3
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <GFX_DrawChar+0x170>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <GFX_DrawChar+0x170>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29c      	uxth	r4, r3
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4623      	mov	r3, r4
 8001e84:	f000 f961 	bl	800214a <GFX_DrawFillRectangle>
 8001e88:	e037      	b.n	8001efa <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d133      	bne.n	8001efa <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <GFX_DrawChar+0x170>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d114      	bne.n	8001ec4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b218      	sxth	r0, r3
 8001ea8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f000 f99b 	bl	80021f8 <SSD1306_DrawPixel>
 8001ec2:	e01a      	b.n	8001efa <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <GFX_DrawChar+0x170>)
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	fb03 f202 	mul.w	r2, r3, r2
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	18d0      	adds	r0, r2, r3
 8001ed2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001ed6:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <GFX_DrawChar+0x170>)
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	fb03 f202 	mul.w	r2, r3, r2
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	18d1      	adds	r1, r2, r3
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <GFX_DrawChar+0x170>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <GFX_DrawChar+0x170>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b29c      	uxth	r4, r3
 8001eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	f000 f928 	bl	800214a <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001efa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	757b      	strb	r3, [r7, #21]
 8001f06:	7dbb      	ldrb	r3, [r7, #22]
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	75bb      	strb	r3, [r7, #22]
 8001f0c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <GFX_DrawChar+0x16c>)
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	4293      	cmp	r3, r2
 8001f18:	f6ff af7f 	blt.w	8001e1a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <GFX_DrawChar+0x16c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	7dfa      	ldrb	r2, [r7, #23]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f4ff af61 	bcc.w	8001df4 <GFX_DrawChar+0x24>
 8001f32:	e000      	b.n	8001f36 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001f34:	bf00      	nop
            }
        }
    }
}
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	200002d4 	.word	0x200002d4
 8001f40:	20000000 	.word	0x20000000

08001f44 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001f5c:	e03e      	b.n	8001fdc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001f5e:	78f9      	ldrb	r1, [r7, #3]
 8001f60:	7cfa      	ldrb	r2, [r7, #19]
 8001f62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	6978      	ldr	r0, [r7, #20]
 8001f6e:	f7ff ff2f 	bl	8001dd0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <GFX_DrawString+0xb0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <GFX_DrawString+0xb4>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001f8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d120      	bne.n	8001fd6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	74bb      	strb	r3, [r7, #18]
 8001f98:	e012      	b.n	8001fc0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b218      	sxth	r0, r3
 8001fa4:	7cbb      	ldrb	r3, [r7, #18]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f000 f91f 	bl	80021f8 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001fba:	7cbb      	ldrb	r3, [r7, #18]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	74bb      	strb	r3, [r7, #18]
 8001fc0:	7cba      	ldrb	r2, [r7, #18]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <GFX_DrawString+0xb0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <GFX_DrawString+0xb4>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbe1      	blt.n	8001f9a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ba      	bne.n	8001f5e <GFX_DrawString+0x1a>
	}
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200002d4 	.word	0x200002d4
 8001ff8:	20000000 	.word	0x20000000

08001ffc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002014:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1acb      	subs	r3, r1, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	bfb8      	it	lt
 8002022:	425b      	neglt	r3, r3
 8002024:	429a      	cmp	r2, r3
 8002026:	bfcc      	ite	gt
 8002028:	2301      	movgt	r3, #1
 800202a:	2300      	movle	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8002030:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dd0b      	ble.n	8002070 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	b29b      	uxth	r3, r3
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	bfb8      	it	lt
 8002088:	425b      	neglt	r3, r3
 800208a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800208c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da00      	bge.n	8002096 <GFX_WriteLine+0x9a>
 8002094:	3301      	adds	r3, #1
 8002096:	105b      	asrs	r3, r3, #1
 8002098:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	da02      	bge.n	80020a8 <GFX_WriteLine+0xac>
	        ystep = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020a6:	e030      	b.n	800210a <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 80020a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80020ae:	e02c      	b.n	800210a <GFX_WriteLine+0x10e>
	        if (steep) {
 80020b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	b211      	sxth	r1, r2
 80020c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f897 	bl	80021f8 <SSD1306_DrawPixel>
 80020ca:	e008      	b.n	80020de <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	b211      	sxth	r1, r2
 80020d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f88d 	bl	80021f8 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80020de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020e0:	8abb      	ldrh	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80020e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da09      	bge.n	8002104 <GFX_WriteLine+0x108>
	            y_start += ystep;
 80020f0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80020fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020fc:	8afb      	ldrh	r3, [r7, #22]
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3301      	adds	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	ddce      	ble.n	80020b0 <GFX_WriteLine+0xb4>
	        }
	    }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	; 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ff5d 	bl	8001ffc <GFX_WriteLine>
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	4613      	mov	r3, r2
 800215e:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e009      	b.n	800217a <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8002166:	88ba      	ldrh	r2, [r7, #4]
 8002168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ffd4 	bl	800211c <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbef      	blt.n	8002166 <GFX_DrawFillRectangle+0x1c>
    }

}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af04      	add	r7, sp, #16
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <SSD1306_Command+0x30>)
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	2301      	movs	r3, #1
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	2200      	movs	r2, #0
 80021b0:	2178      	movs	r1, #120	; 0x78
 80021b2:	f002 fa69 	bl	8004688 <HAL_I2C_Mem_Write>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200002d8 	.word	0x200002d8

080021c4 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af04      	add	r7, sp, #16
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <SSD1306_Data+0x30>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	2240      	movs	r2, #64	; 0x40
 80021e6:	2178      	movs	r1, #120	; 0x78
 80021e8:	f002 fa4e 	bl	8004688 <HAL_I2C_Mem_Write>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200002d8 	.word	0x200002d8

080021f8 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
 8002202:	460b      	mov	r3, r1
 8002204:	80bb      	strh	r3, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800220a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db79      	blt.n	8002306 <SSD1306_DrawPixel+0x10e>
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	2b7f      	cmp	r3, #127	; 0x7f
 8002218:	dc75      	bgt.n	8002306 <SSD1306_DrawPixel+0x10e>
 800221a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db71      	blt.n	8002306 <SSD1306_DrawPixel+0x10e>
 8002222:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002226:	2b3f      	cmp	r3, #63	; 0x3f
 8002228:	dc6d      	bgt.n	8002306 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d049      	beq.n	80022c4 <SSD1306_DrawPixel+0xcc>
 8002230:	2b02      	cmp	r3, #2
 8002232:	dc69      	bgt.n	8002308 <SSD1306_DrawPixel+0x110>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d022      	beq.n	800227e <SSD1306_DrawPixel+0x86>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d165      	bne.n	8002308 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800223c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002240:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	da00      	bge.n	800224a <SSD1306_DrawPixel+0x52>
 8002248:	3307      	adds	r3, #7
 800224a:	10db      	asrs	r3, r3, #3
 800224c:	b218      	sxth	r0, r3
 800224e:	4603      	mov	r3, r0
 8002250:	01db      	lsls	r3, r3, #7
 8002252:	4413      	add	r3, r2
 8002254:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <SSD1306_DrawPixel+0x11c>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	b25a      	sxtb	r2, r3
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	b25b      	sxtb	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	b259      	sxtb	r1, r3
 800226c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002270:	4603      	mov	r3, r0
 8002272:	01db      	lsls	r3, r3, #7
 8002274:	4413      	add	r3, r2
 8002276:	b2c9      	uxtb	r1, r1
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <SSD1306_DrawPixel+0x11c>)
 800227a:	54d1      	strb	r1, [r2, r3]
      break;
 800227c:	e044      	b.n	8002308 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800227e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002282:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da00      	bge.n	800228c <SSD1306_DrawPixel+0x94>
 800228a:	3307      	adds	r3, #7
 800228c:	10db      	asrs	r3, r3, #3
 800228e:	b218      	sxth	r0, r3
 8002290:	4603      	mov	r3, r0
 8002292:	01db      	lsls	r3, r3, #7
 8002294:	4413      	add	r3, r2
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <SSD1306_DrawPixel+0x11c>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	b25a      	sxtb	r2, r3
 800229c:	88bb      	ldrh	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	4013      	ands	r3, r2
 80022b0:	b259      	sxtb	r1, r3
 80022b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022b6:	4603      	mov	r3, r0
 80022b8:	01db      	lsls	r3, r3, #7
 80022ba:	4413      	add	r3, r2
 80022bc:	b2c9      	uxtb	r1, r1
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <SSD1306_DrawPixel+0x11c>)
 80022c0:	54d1      	strb	r1, [r2, r3]
      break;
 80022c2:	e021      	b.n	8002308 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80022c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da00      	bge.n	80022d2 <SSD1306_DrawPixel+0xda>
 80022d0:	3307      	adds	r3, #7
 80022d2:	10db      	asrs	r3, r3, #3
 80022d4:	b218      	sxth	r0, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	01db      	lsls	r3, r3, #7
 80022da:	4413      	add	r3, r2
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <SSD1306_DrawPixel+0x11c>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	b25a      	sxtb	r2, r3
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	4053      	eors	r3, r2
 80022f2:	b259      	sxtb	r1, r3
 80022f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022f8:	4603      	mov	r3, r0
 80022fa:	01db      	lsls	r3, r3, #7
 80022fc:	4413      	add	r3, r2
 80022fe:	b2c9      	uxtb	r1, r1
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <SSD1306_DrawPixel+0x11c>)
 8002302:	54d1      	strb	r1, [r2, r3]
      break;
 8002304:	e000      	b.n	8002308 <SSD1306_DrawPixel+0x110>
	  return;
 8002306:	bf00      	nop
    }
}
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200002dc 	.word	0x200002dc

08002318 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <SSD1306_Clear+0x22>
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10d      	bne.n	8002348 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 800232c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002330:	21ff      	movs	r1, #255	; 0xff
 8002332:	4807      	ldr	r0, [pc, #28]	; (8002350 <SSD1306_Clear+0x38>)
 8002334:	f006 fe2a 	bl	8008f8c <memset>
		break;
 8002338:	e006      	b.n	8002348 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800233a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233e:	2100      	movs	r1, #0
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <SSD1306_Clear+0x38>)
 8002342:	f006 fe23 	bl	8008f8c <memset>
		break;
 8002346:	bf00      	nop
	}
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200002dc 	.word	0x200002dc

08002354 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8002358:	2022      	movs	r0, #34	; 0x22
 800235a:	f7ff ff19 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff ff16 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8002364:	20ff      	movs	r0, #255	; 0xff
 8002366:	f7ff ff13 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800236a:	2021      	movs	r0, #33	; 0x21
 800236c:	f7ff ff10 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ff0d 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8002376:	207f      	movs	r0, #127	; 0x7f
 8002378:	f7ff ff0a 	bl	8002190 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800237c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <SSD1306_Display+0x38>)
 8002382:	f7ff ff1f 	bl	80021c4 <SSD1306_Data>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200002dc 	.word	0x200002dc

08002390 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <SSD1306_Init+0xac>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 800239e:	20ae      	movs	r0, #174	; 0xae
 80023a0:	f7ff fef6 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80023a4:	20d5      	movs	r0, #213	; 0xd5
 80023a6:	f7ff fef3 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0x80);
 80023aa:	2080      	movs	r0, #128	; 0x80
 80023ac:	f7ff fef0 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80023b0:	203f      	movs	r0, #63	; 0x3f
 80023b2:	f7ff feed 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80023b6:	20d3      	movs	r0, #211	; 0xd3
 80023b8:	f7ff feea 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fee7 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80023c2:	2040      	movs	r0, #64	; 0x40
 80023c4:	f7ff fee4 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80023c8:	208d      	movs	r0, #141	; 0x8d
 80023ca:	f7ff fee1 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0x14);
 80023ce:	2014      	movs	r0, #20
 80023d0:	f7ff fede 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80023d4:	2020      	movs	r0, #32
 80023d6:	f7ff fedb 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80023da:	2000      	movs	r0, #0
 80023dc:	f7ff fed8 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80023e0:	20a1      	movs	r0, #161	; 0xa1
 80023e2:	f7ff fed5 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80023e6:	20c8      	movs	r0, #200	; 0xc8
 80023e8:	f7ff fed2 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80023ec:	20da      	movs	r0, #218	; 0xda
 80023ee:	f7ff fecf 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0x12);
 80023f2:	2012      	movs	r0, #18
 80023f4:	f7ff fecc 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80023f8:	2081      	movs	r0, #129	; 0x81
 80023fa:	f7ff fec9 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80023fe:	20ff      	movs	r0, #255	; 0xff
 8002400:	f7ff fec6 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8002404:	20d9      	movs	r0, #217	; 0xd9
 8002406:	f7ff fec3 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800240a:	20f1      	movs	r0, #241	; 0xf1
 800240c:	f7ff fec0 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8002410:	20db      	movs	r0, #219	; 0xdb
 8002412:	f7ff febd 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(0x40);
 8002416:	2040      	movs	r0, #64	; 0x40
 8002418:	f7ff feba 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 800241c:	20a4      	movs	r0, #164	; 0xa4
 800241e:	f7ff feb7 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8002422:	20a6      	movs	r0, #166	; 0xa6
 8002424:	f7ff feb4 	bl	8002190 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8002428:	202e      	movs	r0, #46	; 0x2e
 800242a:	f7ff feb1 	bl	8002190 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 800242e:	20af      	movs	r0, #175	; 0xaf
 8002430:	f7ff feae 	bl	8002190 <SSD1306_Command>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002d8 	.word	0x200002d8

08002440 <writeReg>:
 */
#include "VL6180X.h"
//
// Write to register functions
//
void writeReg(VL6180X_* VL6180x,uint16_t reg, uint8_t value){
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af04      	add	r7, sp, #16
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	791b      	ldrb	r3, [r3, #4]
 8002458:	b29b      	uxth	r3, r3
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	b299      	uxth	r1, r3
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	2301      	movs	r3, #1
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	1c7b      	adds	r3, r7, #1
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2302      	movs	r3, #2
 8002470:	f002 f90a 	bl	8004688 <HAL_I2C_Mem_Write>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	729a      	strb	r2, [r3, #10]
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <writeReg16Bit>:

void writeReg16Bit(VL6180X_* VL6180x, uint16_t reg, uint16_t value){
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af04      	add	r7, sp, #16
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	803b      	strh	r3, [r7, #0]
	uint8_t partA = (uint8_t)((value & 0xFF00) >> 8);
 8002494:	883b      	ldrh	r3, [r7, #0]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	b29b      	uxth	r3, r3
 800249a:	73fb      	strb	r3, [r7, #15]
	uint8_t partB = (uint8_t)(value & 0x00FF);
 800249c:	883b      	ldrh	r3, [r7, #0]
 800249e:	73bb      	strb	r3, [r7, #14]
	uint8_t m[]= {partA,partB};
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	733b      	strb	r3, [r7, #12]
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	737b      	strb	r3, [r7, #13]
	VL6180x->last_status = HAL_I2C_Mem_Write(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, m, 2, 1000);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	791b      	ldrb	r3, [r3, #4]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	b299      	uxth	r1, r3
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2302      	movs	r3, #2
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2302      	movs	r3, #2
 80024ca:	f002 f8dd 	bl	8004688 <HAL_I2C_Mem_Write>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	729a      	strb	r2, [r3, #10]
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <readReg>:
//
// Read from register functions
//
uint8_t readReg(VL6180X_* VL6180x, uint16_t reg){
 80024de:	b580      	push	{r7, lr}
 80024e0:	b088      	sub	sp, #32
 80024e2:	af04      	add	r7, sp, #16
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
	uint8_t value;
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, &value, 1, 1000);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	791b      	ldrb	r3, [r3, #4]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	b299      	uxth	r1, r3
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2301      	movs	r3, #1
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	f107 030f 	add.w	r3, r7, #15
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2302      	movs	r3, #2
 800250c:	f002 f9d0 	bl	80048b0 <HAL_I2C_Mem_Read>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	729a      	strb	r2, [r3, #10]
	return value;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <readReg16Bit>:

uint16_t readReg16Bit(VL6180X_* VL6180x, uint16_t reg){
 8002522:	b580      	push	{r7, lr}
 8002524:	b088      	sub	sp, #32
 8002526:	af04      	add	r7, sp, #16
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]
	uint8_t value[2]={0};
 800252e:	2300      	movs	r3, #0
 8002530:	81bb      	strh	r3, [r7, #12]
	VL6180x->last_status = HAL_I2C_Mem_Read(VL6180x->i2cHandle, (VL6180x->address)<<1, reg, 2, value, 2, 1000);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	b29b      	uxth	r3, r3
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	b299      	uxth	r1, r3
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	2302      	movs	r3, #2
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2302      	movs	r3, #2
 8002554:	f002 f9ac 	bl	80048b0 <HAL_I2C_Mem_Read>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	729a      	strb	r2, [r3, #10]
	uint16_t value_ = ((uint16_t)value[1]<<8)|value[0];
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	b21a      	sxth	r2, r3
 8002566:	7b3b      	ldrb	r3, [r7, #12]
 8002568:	b21b      	sxth	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b21b      	sxth	r3, r3
 800256e:	81fb      	strh	r3, [r7, #14]
	return value_;
 8002570:	89fb      	ldrh	r3, [r7, #14]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <VL6180X_Init>:

void VL6180X_Init(VL6180X_* VL6180x, I2C_HandleTypeDef* i2cHandle){
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
// Sensor initialization.
// @param VL6180x: Pointer to structure.
// @param i2cHandle: I2C handle.
// @return: none
//
	VL6180x->i2cHandle = i2cHandle;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	601a      	str	r2, [r3, #0]
	VL6180x->address = ADDRESS_DEFAULT_VL6180X;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2229      	movs	r2, #41	; 0x29
 800258e:	711a      	strb	r2, [r3, #4]
	VL6180x->scaling = 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	715a      	strb	r2, [r3, #5]
	VL6180x->ptp_offset = 0;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	719a      	strb	r2, [r3, #6]
	VL6180x->io_timeout = 500;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025a2:	811a      	strh	r2, [r3, #8]
	VL6180x->did_timeout = FALSE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	72da      	strb	r2, [r3, #11]
	VL6180x->ptp_offset = readReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET);
 80025aa:	2124      	movs	r1, #36	; 0x24
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff96 	bl	80024de <readReg>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	719a      	strb	r2, [r3, #6]
	if(readReg(VL6180x, SYSTEM__FRESH_OUT_OF_RESET) == 1){
 80025ba:	2116      	movs	r1, #22
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff8e 	bl	80024de <readReg>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 80a9 	bne.w	800271c <VL6180X_Init+0x1a2>
		VL6180x->scaling = 1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	715a      	strb	r2, [r3, #5]
		writeReg(VL6180x,0x207, 0x01);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f240 2107 	movw	r1, #519	; 0x207
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ff32 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x208, 0x01);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 7102 	mov.w	r1, #520	; 0x208
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff2c 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x096, 0x00);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2196      	movs	r1, #150	; 0x96
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff27 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x097, 0xFD); // RANGE_SCALER = 253
 80025f2:	22fd      	movs	r2, #253	; 0xfd
 80025f4:	2197      	movs	r1, #151	; 0x97
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff22 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0E3, 0x01);
 80025fc:	2201      	movs	r2, #1
 80025fe:	21e3      	movs	r1, #227	; 0xe3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff1d 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0E4, 0x03);
 8002606:	2203      	movs	r2, #3
 8002608:	21e4      	movs	r1, #228	; 0xe4
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff18 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0E5, 0x02);
 8002610:	2202      	movs	r2, #2
 8002612:	21e5      	movs	r1, #229	; 0xe5
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff13 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0E6, 0x01);
 800261a:	2201      	movs	r2, #1
 800261c:	21e6      	movs	r1, #230	; 0xe6
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff0e 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0E7, 0x03);
 8002624:	2203      	movs	r2, #3
 8002626:	21e7      	movs	r1, #231	; 0xe7
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff09 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0F5, 0x02);
 800262e:	2202      	movs	r2, #2
 8002630:	21f5      	movs	r1, #245	; 0xf5
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff04 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0D9, 0x05);
 8002638:	2205      	movs	r2, #5
 800263a:	21d9      	movs	r1, #217	; 0xd9
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff feff 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0DB, 0xCE);
 8002642:	22ce      	movs	r2, #206	; 0xce
 8002644:	21db      	movs	r1, #219	; 0xdb
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fefa 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0DC, 0x03);
 800264c:	2203      	movs	r2, #3
 800264e:	21dc      	movs	r1, #220	; 0xdc
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fef5 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0DD, 0xF8);
 8002656:	22f8      	movs	r2, #248	; 0xf8
 8002658:	21dd      	movs	r1, #221	; 0xdd
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fef0 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x09F, 0x00);
 8002660:	2200      	movs	r2, #0
 8002662:	219f      	movs	r1, #159	; 0x9f
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff feeb 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0A3, 0x3C);
 800266a:	223c      	movs	r2, #60	; 0x3c
 800266c:	21a3      	movs	r1, #163	; 0xa3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fee6 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0B7, 0x00);
 8002674:	2200      	movs	r2, #0
 8002676:	21b7      	movs	r1, #183	; 0xb7
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fee1 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0BB, 0x3C);
 800267e:	223c      	movs	r2, #60	; 0x3c
 8002680:	21bb      	movs	r1, #187	; 0xbb
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fedc 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0B2, 0x09);
 8002688:	2209      	movs	r2, #9
 800268a:	21b2      	movs	r1, #178	; 0xb2
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fed7 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0CA, 0x09);
 8002692:	2209      	movs	r2, #9
 8002694:	21ca      	movs	r1, #202	; 0xca
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fed2 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x198, 0x01);
 800269c:	2201      	movs	r2, #1
 800269e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fecc 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x1B0, 0x17);
 80026a8:	2217      	movs	r2, #23
 80026aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fec6 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x1AD, 0x00);
 80026b4:	2200      	movs	r2, #0
 80026b6:	f240 11ad 	movw	r1, #429	; 0x1ad
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fec0 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x0FF, 0x05);
 80026c0:	2205      	movs	r2, #5
 80026c2:	21ff      	movs	r1, #255	; 0xff
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff febb 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x100, 0x05);
 80026ca:	2205      	movs	r2, #5
 80026cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff feb5 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x199, 0x05);
 80026d6:	2205      	movs	r2, #5
 80026d8:	f240 1199 	movw	r1, #409	; 0x199
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff feaf 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x1A6, 0x1B);
 80026e2:	221b      	movs	r2, #27
 80026e4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fea9 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x1AC, 0x3E);
 80026ee:	223e      	movs	r2, #62	; 0x3e
 80026f0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fea3 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x1A7, 0x1F);
 80026fa:	221f      	movs	r2, #31
 80026fc:	f240 11a7 	movw	r1, #423	; 0x1a7
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fe9d 	bl	8002440 <writeReg>
		    writeReg(VL6180x,0x030, 0x00);
 8002706:	2200      	movs	r2, #0
 8002708:	2130      	movs	r1, #48	; 0x30
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fe98 	bl	8002440 <writeReg>

		    writeReg(VL6180x,SYSTEM__FRESH_OUT_OF_RESET, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2116      	movs	r1, #22
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fe93 	bl	8002440 <writeReg>
		}else{
			VL6180x->scaling = 1;
		}
		VL6180x->ptp_offset *= VL6180x->scaling;
	}
}
 800271a:	e021      	b.n	8002760 <VL6180X_Init+0x1e6>
		uint16_t s = readReg16Bit(VL6180x, RANGE_SCALER);
 800271c:	2196      	movs	r1, #150	; 0x96
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff feff 	bl	8002522 <readReg16Bit>
 8002724:	4603      	mov	r3, r0
 8002726:	81fb      	strh	r3, [r7, #14]
		if(s == ScalerValues[3]){
 8002728:	2254      	movs	r2, #84	; 0x54
 800272a:	89fb      	ldrh	r3, [r7, #14]
 800272c:	4293      	cmp	r3, r2
 800272e:	d103      	bne.n	8002738 <VL6180X_Init+0x1be>
			VL6180x->scaling = 3;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2203      	movs	r2, #3
 8002734:	715a      	strb	r2, [r3, #5]
 8002736:	e00a      	b.n	800274e <VL6180X_Init+0x1d4>
		}else if (s == ScalerValues[2]){
 8002738:	227f      	movs	r2, #127	; 0x7f
 800273a:	89fb      	ldrh	r3, [r7, #14]
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <VL6180X_Init+0x1ce>
			VL6180x->scaling = 2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	715a      	strb	r2, [r3, #5]
 8002746:	e002      	b.n	800274e <VL6180X_Init+0x1d4>
			VL6180x->scaling = 1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	715a      	strb	r2, [r3, #5]
		VL6180x->ptp_offset *= VL6180x->scaling;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	799a      	ldrb	r2, [r3, #6]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	795b      	ldrb	r3, [r3, #5]
 8002756:	fb12 f303 	smulbb	r3, r2, r3
 800275a:	b2da      	uxtb	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	719a      	strb	r2, [r3, #6]
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <setScaling_VL6180X>:

uint8_t getAddress_VL6180X(VL6180X_* VL6180x){
	return VL6180x->address;
}

void setScaling_VL6180X(VL6180X_* VL6180x, uint8_t new_scaling){
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
	uint8_t const DefaultCrosstalkValidHeight = 20;
 8002774:	2314      	movs	r3, #20
 8002776:	73fb      	strb	r3, [r7, #15]
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d043      	beq.n	8002806 <setScaling_VL6180X+0x9e>
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d840      	bhi.n	8002806 <setScaling_VL6180X+0x9e>
	VL6180x->scaling = new_scaling;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	715a      	strb	r2, [r3, #5]
	writeReg16Bit(VL6180x, RANGE_SCALER, ScalerValues[VL6180x->scaling]);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	795b      	ldrb	r3, [r3, #5]
 800278e:	461a      	mov	r2, r3
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <setScaling_VL6180X+0xa8>)
 8002792:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002796:	461a      	mov	r2, r3
 8002798:	2196      	movs	r1, #150	; 0x96
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fe72 	bl	8002484 <writeReg16Bit>
	writeReg(VL6180x, SYSRANGE__PART_TO_PART_RANGE_OFFSET, VL6180x->ptp_offset/VL6180x->scaling);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	799a      	ldrb	r2, [r3, #6]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	795b      	ldrb	r3, [r3, #5]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	2124      	movs	r1, #36	; 0x24
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fe44 	bl	8002440 <writeReg>
	writeReg(VL6180x, SYSRANGE__CROSSTALK_VALID_HEIGHT, DefaultCrosstalkValidHeight/VL6180x->scaling);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	2121      	movs	r1, #33	; 0x21
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fe39 	bl	8002440 <writeReg>
	uint8_t rce = readReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES);
 80027ce:	212d      	movs	r1, #45	; 0x2d
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe84 	bl	80024de <readReg>
 80027d6:	4603      	mov	r3, r0
 80027d8:	73bb      	strb	r3, [r7, #14]
	writeReg(VL6180x,SYSRANGE__RANGE_CHECK_ENABLES, (rce & 0xFE) | (VL6180x->scaling == 1));
 80027da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	b25a      	sxtb	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	795b      	ldrb	r3, [r3, #5]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	212d      	movs	r1, #45	; 0x2d
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fe1e 	bl	8002440 <writeReg>
 8002804:	e000      	b.n	8002808 <setScaling_VL6180X+0xa0>
	if (new_scaling < 1 || new_scaling > 3) { return; }
 8002806:	bf00      	nop
}
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800be24 	.word	0x0800be24

08002814 <readRangeContinuous_VL6180X>:
  writeReg(VL6180x,SYSALS__START, 0x01);
  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
}

uint8_t readRangeContinuous_VL6180X(VL6180X_* VL6180x)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint16_t millis_start = HAL_GetTick();
 800281c:	f001 fb16 	bl	8003e4c <HAL_GetTick>
 8002820:	4603      	mov	r3, r0
 8002822:	81fb      	strh	r3, [r7, #14]
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8002824:	e010      	b.n	8002848 <readRangeContinuous_VL6180X+0x34>
  {
    if (VL6180x->io_timeout > 0 && ((uint16_t)HAL_GetTick() - millis_start) > VL6180x->io_timeout)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	891b      	ldrh	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <readRangeContinuous_VL6180X+0x34>
 800282e:	f001 fb0d 	bl	8003e4c <HAL_GetTick>
 8002832:	4603      	mov	r3, r0
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	8912      	ldrh	r2, [r2, #8]
 8002840:	4293      	cmp	r3, r2
 8002842:	dd01      	ble.n	8002848 <readRangeContinuous_VL6180X+0x34>
    {
      return 255;
 8002844:	23ff      	movs	r3, #255	; 0xff
 8002846:	e014      	b.n	8002872 <readRangeContinuous_VL6180X+0x5e>
  while ((readReg(VL6180x,RESULT__INTERRUPT_STATUS_GPIO) & 0x4) == 0)
 8002848:	214f      	movs	r1, #79	; 0x4f
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fe47 	bl	80024de <readReg>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0e5      	beq.n	8002826 <readRangeContinuous_VL6180X+0x12>
    }
  }
  uint8_t range = readReg(VL6180x,RESULT__RANGE_VAL);
 800285a:	2162      	movs	r1, #98	; 0x62
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fe3e 	bl	80024de <readReg>
 8002862:	4603      	mov	r3, r0
 8002864:	737b      	strb	r3, [r7, #13]
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x01);
 8002866:	2201      	movs	r2, #1
 8002868:	2115      	movs	r1, #21
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fde8 	bl	8002440 <writeReg>
  return range;
 8002870:	7b7b      	ldrb	r3, [r7, #13]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <readRangeSingle_VL6180X>:
  writeReg(VL6180x,SYSTEM__INTERRUPT_CLEAR, 0x02);
  return ambient;
}

uint8_t readRangeSingle_VL6180X(VL6180X_* VL6180x)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  writeReg(VL6180x,SYSRANGE__START, 0x01);
 8002882:	2201      	movs	r2, #1
 8002884:	2118      	movs	r1, #24
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fdda 	bl	8002440 <writeReg>
  return readRangeContinuous_VL6180X(VL6180x);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffc1 	bl	8002814 <readRangeContinuous_VL6180X>
 8002892:	4603      	mov	r3, r0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <configureDefault_VL6180X>:
{
  writeReg(VL6180x,SYSALS__START, 0x01);
  return readAmbientContinuous_VL6180X(VL6180x);
}

void configureDefault_VL6180X(VL6180X_* VL6180x){
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	  writeReg(VL6180x,READOUT__AVERAGING_SAMPLE_PERIOD, 0x30);
 80028a4:	2230      	movs	r2, #48	; 0x30
 80028a6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fdc8 	bl	8002440 <writeReg>
	  writeReg(VL6180x,SYSALS__ANALOGUE_GAIN, 0x46);
 80028b0:	2246      	movs	r2, #70	; 0x46
 80028b2:	213f      	movs	r1, #63	; 0x3f
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fdc3 	bl	8002440 <writeReg>
	  writeReg(VL6180x,SYSRANGE__VHV_REPEAT_RATE, 0xFF);
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	2131      	movs	r1, #49	; 0x31
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fdbe 	bl	8002440 <writeReg>
	  writeReg16Bit(VL6180x,SYSALS__INTEGRATION_PERIOD, 0x0063);
 80028c4:	2263      	movs	r2, #99	; 0x63
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fddb 	bl	8002484 <writeReg16Bit>
	  writeReg(VL6180x,SYSRANGE__VHV_RECALIBRATE, 0x01);
 80028ce:	2201      	movs	r2, #1
 80028d0:	212e      	movs	r1, #46	; 0x2e
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fdb4 	bl	8002440 <writeReg>
	  writeReg(VL6180x,SYSRANGE__INTERMEASUREMENT_PERIOD, 0x09);
 80028d8:	2209      	movs	r2, #9
 80028da:	211b      	movs	r1, #27
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fdaf 	bl	8002440 <writeReg>
	  writeReg(VL6180x,SYSALS__INTERMEASUREMENT_PERIOD, 0x31);
 80028e2:	2231      	movs	r2, #49	; 0x31
 80028e4:	213e      	movs	r1, #62	; 0x3e
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fdaa 	bl	8002440 <writeReg>
	  writeReg(VL6180x,SYSTEM__INTERRUPT_CONFIG_GPIO, 0x24);
 80028ec:	2224      	movs	r2, #36	; 0x24
 80028ee:	2114      	movs	r1, #20
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fda5 	bl	8002440 <writeReg>
	  writeReg(VL6180x,SYSRANGE__MAX_CONVERGENCE_TIME, 0x31);
 80028f6:	2231      	movs	r2, #49	; 0x31
 80028f8:	211c      	movs	r1, #28
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fda0 	bl	8002440 <writeReg>
	  writeReg(VL6180x,INTERLEAVED_MODE__ENABLE, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	f240 21a3 	movw	r1, #675	; 0x2a3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fd9a 	bl	8002440 <writeReg>
	  setScaling_VL6180X(VL6180x,1);
 800290c:	2101      	movs	r1, #1
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff2a 	bl	8002768 <setScaling_VL6180X>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <readRangeSingleMillimeters_VL6180X>:

uint16_t readRangeContinuousMillimeters_VL6180X(VL6180X_* VL6180x){
	return (uint16_t)(VL6180x->scaling)*readRangeContinuous_VL6180X(VL6180x);
}

uint16_t readRangeSingleMillimeters_VL6180X(VL6180X_* VL6180x) {
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	return (uint16_t)(VL6180x->scaling)* readRangeSingle_VL6180X(VL6180x);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	795b      	ldrb	r3, [r3, #5]
 8002928:	b29c      	uxth	r4, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa5 	bl	800287a <readRangeSingle_VL6180X>
 8002930:	4603      	mov	r3, r0
 8002932:	b29b      	uxth	r3, r3
 8002934:	fb14 f303 	smulbb	r3, r4, r3
 8002938:	b29b      	uxth	r3, r3
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
	...

08002944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002978:	f043 0320 	orr.w	r3, r3, #32
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800298a:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a6c      	ldr	r2, [pc, #432]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ea:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029f0:	f043 0308 	orr.w	r3, r3, #8
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a02:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <MX_GPIO_Init+0x1fc>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin, GPIO_PIN_RESET);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	21e0      	movs	r1, #224	; 0xe0
 8002a1e:	4849      	ldr	r0, [pc, #292]	; (8002b44 <MX_GPIO_Init+0x200>)
 8002a20:	f001 fd70 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 8002a24:	2200      	movs	r2, #0
 8002a26:	f644 7181 	movw	r1, #20353	; 0x4f81
 8002a2a:	4847      	ldr	r0, [pc, #284]	; (8002b48 <MX_GPIO_Init+0x204>)
 8002a2c:	f001 fd6a 	bl	8004504 <HAL_GPIO_WritePin>
                          |LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002a30:	2200      	movs	r2, #0
 8002a32:	f24d 4180 	movw	r1, #54400	; 0xd480
 8002a36:	4845      	ldr	r0, [pc, #276]	; (8002b4c <MX_GPIO_Init+0x208>)
 8002a38:	f001 fd64 	bl	8004504 <HAL_GPIO_WritePin>
                          |MS2_NEEDLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002a42:	4843      	ldr	r0, [pc, #268]	; (8002b50 <MX_GPIO_Init+0x20c>)
 8002a44:	f001 fd5e 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	4841      	ldr	r0, [pc, #260]	; (8002b54 <MX_GPIO_Init+0x210>)
 8002a4e:	f001 fd59 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MS1_SYRINGE_Pin|MS2_SYRINGE_Pin|MS3_SYRINGE_Pin;
 8002a52:	23e0      	movs	r3, #224	; 0xe0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	4619      	mov	r1, r3
 8002a68:	4836      	ldr	r0, [pc, #216]	; (8002b44 <MX_GPIO_Init+0x200>)
 8002a6a:	f001 fb9f 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|MS1_NEEDLE_Pin|ENABLE_NEEDLE_Pin|LD3_Pin
 8002a6e:	f644 7381 	movw	r3, #20353	; 0x4f81
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin|DIR_SYRINGE_Pin|ENABLE_SYRINGE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a84:	4619      	mov	r1, r3
 8002a86:	4830      	ldr	r0, [pc, #192]	; (8002b48 <MX_GPIO_Init+0x204>)
 8002a88:	f001 fb90 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIR_NEEDLE_Pin|SLEEP_NEEDLE_Pin|RESET_NEEDLE_Pin|MS3_NEEDLE_Pin
 8002a8c:	f24d 4380 	movw	r3, #54400	; 0xd480
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
                          |MS2_NEEDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a92:	2301      	movs	r3, #1
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4829      	ldr	r0, [pc, #164]	; (8002b4c <MX_GPIO_Init+0x208>)
 8002aa6:	f001 fb81 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = END_STOP_NEEDLE_1_Pin|END_STOP_SYRINGE_1_Pin|END_STOP_SYRINGE_2_Pin|END_STOP_NEEDLE_2_Pin;
 8002aaa:	f44f 532c 	mov.w	r3, #11008	; 0x2b00
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ab0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4822      	ldr	r0, [pc, #136]	; (8002b4c <MX_GPIO_Init+0x208>)
 8002ac2:	f001 fb73 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RESET_SYRINGE_Pin|SLEEP_SYRINGE_Pin;
 8002ac6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	481c      	ldr	r0, [pc, #112]	; (8002b50 <MX_GPIO_Init+0x20c>)
 8002ae0:	f001 fb64 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002ae4:	2340      	movs	r3, #64	; 0x40
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	4816      	ldr	r0, [pc, #88]	; (8002b54 <MX_GPIO_Init+0x210>)
 8002afc:	f001 fb56 	bl	80041ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	4619      	mov	r1, r3
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <MX_GPIO_Init+0x210>)
 8002b14:	f001 fb4a 	bl	80041ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2017      	movs	r0, #23
 8002b1e:	f001 fa7c 	bl	800401a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b22:	2017      	movs	r0, #23
 8002b24:	f001 fa95 	bl	8004052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2028      	movs	r0, #40	; 0x28
 8002b2e:	f001 fa74 	bl	800401a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b32:	2028      	movs	r0, #40	; 0x28
 8002b34:	f001 fa8d 	bl	8004052 <HAL_NVIC_EnableIRQ>

}
 8002b38:	bf00      	nop
 8002b3a:	3738      	adds	r7, #56	; 0x38
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021800 	.word	0x40021800

08002b58 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <MX_I2C2_Init+0x78>)
 8002b60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <MX_I2C2_Init+0x7c>)
 8002b66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b92:	480e      	ldr	r0, [pc, #56]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002b94:	f001 fce8 	bl	8004568 <HAL_I2C_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002b9e:	f000 fbcf 	bl	8003340 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4809      	ldr	r0, [pc, #36]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002ba6:	f002 fa43 	bl	8005030 <HAL_I2CEx_ConfigAnalogFilter>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002bb0:	f000 fbc6 	bl	8003340 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_I2C2_Init+0x74>)
 8002bb8:	f002 fa85 	bl	80050c6 <HAL_I2CEx_ConfigDigitalFilter>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bc2:	f000 fbbd 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200006dc 	.word	0x200006dc
 8002bd0:	40005800 	.word	0x40005800
 8002bd4:	00301739 	.word	0x00301739

08002bd8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <MX_I2C4_Init+0x78>)
 8002be0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00301739;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <MX_I2C4_Init+0x7c>)
 8002be6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002c12:	480e      	ldr	r0, [pc, #56]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002c14:	f001 fca8 	bl	8004568 <HAL_I2C_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002c1e:	f000 fb8f 	bl	8003340 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c22:	2100      	movs	r1, #0
 8002c24:	4809      	ldr	r0, [pc, #36]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002c26:	f002 fa03 	bl	8005030 <HAL_I2CEx_ConfigAnalogFilter>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002c30:	f000 fb86 	bl	8003340 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002c34:	2100      	movs	r1, #0
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_I2C4_Init+0x74>)
 8002c38:	f002 fa45 	bl	80050c6 <HAL_I2CEx_ConfigDigitalFilter>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002c42:	f000 fb7d 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000728 	.word	0x20000728
 8002c50:	40006000 	.word	0x40006000
 8002c54:	00301739 	.word	0x00301739

08002c58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0ac      	sub	sp, #176	; 0xb0
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c70:	f107 0318 	add.w	r3, r7, #24
 8002c74:	2284      	movs	r2, #132	; 0x84
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f006 f987 	bl	8008f8c <memset>
  if(i2cHandle->Instance==I2C2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a44      	ldr	r2, [pc, #272]	; (8002d94 <HAL_I2C_MspInit+0x13c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d13d      	bne.n	8002d04 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c94:	f107 0318 	add.w	r3, r7, #24
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 ff3b 	bl	8005b14 <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002ca4:	f000 fb4c 	bl	8003340 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002cae:	f043 0320 	orr.w	r3, r3, #32
 8002cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb4:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc6:	2312      	movs	r3, #18
 8002cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	482d      	ldr	r0, [pc, #180]	; (8002d9c <HAL_I2C_MspInit+0x144>)
 8002ce6:	f001 fa61 	bl	80041ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8002d02:	e042      	b.n	8002d8a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_I2C_MspInit+0x148>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d13d      	bne.n	8002d8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1a:	f107 0318 	add.w	r3, r7, #24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fef8 	bl	8005b14 <HAL_RCCEx_PeriphCLKConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002d2a:	f000 fb09 	bl	8003340 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4e:	2312      	movs	r3, #18
 8002d50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002d60:	2304      	movs	r3, #4
 8002d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480b      	ldr	r0, [pc, #44]	; (8002d9c <HAL_I2C_MspInit+0x144>)
 8002d6e:	f001 fa1d 	bl	80041ac <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_I2C_MspInit+0x140>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	37b0      	adds	r7, #176	; 0xb0
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40005800 	.word	0x40005800
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40006000 	.word	0x40006000

08002da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002daa:	f000 fffe 	bl	8003daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dae:	f000 f8e1 	bl	8002f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002db2:	f7ff fdc7 	bl	8002944 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002db6:	f000 ff37 	bl	8003c28 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002dba:	f000 fc37 	bl	800362c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002dbe:	f000 fcad 	bl	800371c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002dc2:	f000 fd73 	bl	80038ac <MX_TIM5_Init>
  MX_TIM6_Init();
 8002dc6:	f000 fdc1 	bl	800394c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002dca:	f000 fdf7 	bl	80039bc <MX_TIM7_Init>
  MX_I2C2_Init();
 8002dce:	f7ff fec3 	bl	8002b58 <MX_I2C2_Init>
  MX_I2C4_Init();
 8002dd2:	f7ff ff01 	bl	8002bd8 <MX_I2C4_Init>
  MX_TIM4_Init();
 8002dd6:	f000 fcf1 	bl	80037bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	  // Drive initialization
  Init_A4988(&Syringe);
 8002dda:	484f      	ldr	r0, [pc, #316]	; (8002f18 <main+0x174>)
 8002ddc:	f7fe fae6 	bl	80013ac <Init_A4988>
  Init_A4988(&Needle);
 8002de0:	484e      	ldr	r0, [pc, #312]	; (8002f1c <main+0x178>)
 8002de2:	f7fe fae3 	bl	80013ac <Init_A4988>
  	  // Sensor initialization
  VL6180X_Init(&Syringe_sensor, &hi2c4);
 8002de6:	494e      	ldr	r1, [pc, #312]	; (8002f20 <main+0x17c>)
 8002de8:	484e      	ldr	r0, [pc, #312]	; (8002f24 <main+0x180>)
 8002dea:	f7ff fbc6 	bl	800257a <VL6180X_Init>
  VL6180X_Init(&Needle_sensor, &hi2c2);
 8002dee:	494e      	ldr	r1, [pc, #312]	; (8002f28 <main+0x184>)
 8002df0:	484e      	ldr	r0, [pc, #312]	; (8002f2c <main+0x188>)
 8002df2:	f7ff fbc2 	bl	800257a <VL6180X_Init>
  configureDefault_VL6180X(&Syringe_sensor);
 8002df6:	484b      	ldr	r0, [pc, #300]	; (8002f24 <main+0x180>)
 8002df8:	f7ff fd50 	bl	800289c <configureDefault_VL6180X>
  configureDefault_VL6180X(&Needle_sensor);
 8002dfc:	484b      	ldr	r0, [pc, #300]	; (8002f2c <main+0x188>)
 8002dfe:	f7ff fd4d 	bl	800289c <configureDefault_VL6180X>
  	  // Initial measurement
  MESURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor);
 8002e02:	484a      	ldr	r0, [pc, #296]	; (8002f2c <main+0x188>)
 8002e04:	f7ff fd8a 	bl	800291c <readRangeSingleMillimeters_VL6180X>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <main+0x18c>)
 8002e0e:	801a      	strh	r2, [r3, #0]
  MESURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor);
 8002e10:	4844      	ldr	r0, [pc, #272]	; (8002f24 <main+0x180>)
 8002e12:	f7ff fd83 	bl	800291c <readRangeSingleMillimeters_VL6180X>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <main+0x190>)
 8002e1c:	801a      	strh	r2, [r3, #0]
	  // Control initialization
  if (Control_type == CLOSE_LOOP) {
 8002e1e:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <main+0x194>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d110      	bne.n	8002e48 <main+0xa4>
	  HAL_TIM_Base_Start_IT(&htim6); // Needle - 5Hz
 8002e26:	4845      	ldr	r0, [pc, #276]	; (8002f3c <main+0x198>)
 8002e28:	f003 fabc 	bl	80063a4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7); // Syringe - 5Hz
 8002e2c:	4844      	ldr	r0, [pc, #272]	; (8002f40 <main+0x19c>)
 8002e2e:	f003 fab9 	bl	80063a4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Stop_IT(Syringe.TIM_COUNTER_SLAVE); // Stop counting impulses for syringe
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <main+0x174>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fb2c 	bl	8006494 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(Needle.TIM_COUNTER_SLAVE); // Stop counting impulses for needle
 8002e3c:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <main+0x178>)
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fb27 	bl	8006494 <HAL_TIM_Base_Stop_IT>
 8002e46:	e009      	b.n	8002e5c <main+0xb8>
  }else if (Control_type == OPEN_LOOP) {
 8002e48:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <main+0x194>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <main+0xb8>
	  HAL_TIM_Base_Start_IT(&htim6); // Needle - 5Hz
 8002e50:	483a      	ldr	r0, [pc, #232]	; (8002f3c <main+0x198>)
 8002e52:	f003 faa7 	bl	80063a4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7); // Syringe - 5Hz
 8002e56:	483a      	ldr	r0, [pc, #232]	; (8002f40 <main+0x19c>)
 8002e58:	f003 faa4 	bl	80063a4 <HAL_TIM_Base_Start_IT>
  }
  	  // Temperature sensor initialization
  BMP280_Init(&hi2c2, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE); // TODO Change i2c
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	2101      	movs	r1, #1
 8002e62:	4831      	ldr	r0, [pc, #196]	; (8002f28 <main+0x184>)
 8002e64:	f7fe fb5c 	bl	8001520 <BMP280_Init>
  BMP280_ReadTemperatureAndPressure(&Temperature, &Pressure);
 8002e68:	4936      	ldr	r1, [pc, #216]	; (8002f44 <main+0x1a0>)
 8002e6a:	4837      	ldr	r0, [pc, #220]	; (8002f48 <main+0x1a4>)
 8002e6c:	f7fe fca2 	bl	80017b4 <BMP280_ReadTemperatureAndPressure>
  	  // Communication start
  HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 8);
 8002e70:	2208      	movs	r2, #8
 8002e72:	4936      	ldr	r1, [pc, #216]	; (8002f4c <main+0x1a8>)
 8002e74:	4836      	ldr	r0, [pc, #216]	; (8002f50 <main+0x1ac>)
 8002e76:	f004 fe5e 	bl	8007b36 <HAL_UART_Receive_IT>
  	  // Screen initialization
  SSD1306_Init(&hi2c2); // TODO change i2c
 8002e7a:	482b      	ldr	r0, [pc, #172]	; (8002f28 <main+0x184>)
 8002e7c:	f7ff fa88 	bl	8002390 <SSD1306_Init>
  GFX_SetFont(font_8x5);
 8002e80:	4834      	ldr	r0, [pc, #208]	; (8002f54 <main+0x1b0>)
 8002e82:	f7fe ff81 	bl	8001d88 <GFX_SetFont>
  GFX_SetFontSize(1);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7fe ff8e 	bl	8001da8 <GFX_SetFontSize>
  SSD1306_Clear(BLACK);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7ff fa43 	bl	8002318 <SSD1306_Clear>
  SSD1306_Display();
 8002e92:	f7ff fa5f 	bl	8002354 <SSD1306_Display>
  while (1)
  {
	  //
	  // Screen - displaying the data
	  //
	  if ((HAL_GetTick() - SoftTimer_OLED) > 500) {
 8002e96:	f000 ffd9 	bl	8003e4c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <main+0x1b4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ea6:	d915      	bls.n	8002ed4 <main+0x130>
		  SoftTimer_OLED = HAL_GetTick();
 8002ea8:	f000 ffd0 	bl	8003e4c <HAL_GetTick>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <main+0x1b4>)
 8002eb0:	6013      	str	r3, [r2, #0]
		  SSD1306_Clear(BLACK);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7ff fa30 	bl	8002318 <SSD1306_Clear>
		  sprintf(Message_OLED, "Needle control");
 8002eb8:	4928      	ldr	r1, [pc, #160]	; (8002f5c <main+0x1b8>)
 8002eba:	4829      	ldr	r0, [pc, #164]	; (8002f60 <main+0x1bc>)
 8002ebc:	f006 fcd8 	bl	8009870 <siprintf>
		  GFX_DrawString(0, 0, Message_OLED, WHITE, 0);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <main+0x1bc>)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7ff f83a 	bl	8001f44 <GFX_DrawString>
		  // TODO implement screen
		  SSD1306_Display();
 8002ed0:	f7ff fa40 	bl	8002354 <SSD1306_Display>
	  }
	  //
	  // Communication - sending the data
	  //
	  if ((HAL_GetTick() - SoftTimer_USART)) {
 8002ed4:	f000 ffba 	bl	8003e4c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <main+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d0d9      	beq.n	8002e96 <main+0xf2>
		  SoftTimer_USART = HAL_GetTick();
 8002ee2:	f000 ffb3 	bl	8003e4c <HAL_GetTick>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <main+0x1c0>)
 8002eea:	6013      	str	r3, [r2, #0]
		  // TODO implement communication system
		  length_Buffor_USART = sprintf((char*)Buffor_USART,"{\" \":%.1u}",MESURE_Needle);
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <main+0x18c>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	491c      	ldr	r1, [pc, #112]	; (8002f68 <main+0x1c4>)
 8002ef6:	481d      	ldr	r0, [pc, #116]	; (8002f6c <main+0x1c8>)
 8002ef8:	f006 fcba 	bl	8009870 <siprintf>
 8002efc:	4603      	mov	r3, r0
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <main+0x1cc>)
 8002f02:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, Buffor_USART, length_Buffor_USART, 1000);
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <main+0x1cc>)
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0c:	4917      	ldr	r1, [pc, #92]	; (8002f6c <main+0x1c8>)
 8002f0e:	4810      	ldr	r0, [pc, #64]	; (8002f50 <main+0x1ac>)
 8002f10:	f004 fd7e 	bl	8007a10 <HAL_UART_Transmit>
	  if ((HAL_GetTick() - SoftTimer_OLED) > 500) {
 8002f14:	e7bf      	b.n	8002e96 <main+0xf2>
 8002f16:	bf00      	nop
 8002f18:	20000004 	.word	0x20000004
 8002f1c:	2000005c 	.word	0x2000005c
 8002f20:	20000728 	.word	0x20000728
 8002f24:	20000774 	.word	0x20000774
 8002f28:	200006dc 	.word	0x200006dc
 8002f2c:	20000780 	.word	0x20000780
 8002f30:	2000078c 	.word	0x2000078c
 8002f34:	2000078e 	.word	0x2000078e
 8002f38:	200000b4 	.word	0x200000b4
 8002f3c:	20000984 	.word	0x20000984
 8002f40:	200009d0 	.word	0x200009d0
 8002f44:	2000084c 	.word	0x2000084c
 8002f48:	20000848 	.word	0x20000848
 8002f4c:	20000814 	.word	0x20000814
 8002f50:	20000a1c 	.word	0x20000a1c
 8002f54:	0800be2c 	.word	0x0800be2c
 8002f58:	20000840 	.word	0x20000840
 8002f5c:	0800be08 	.word	0x0800be08
 8002f60:	20000820 	.word	0x20000820
 8002f64:	20000844 	.word	0x20000844
 8002f68:	0800be18 	.word	0x0800be18
 8002f6c:	20000794 	.word	0x20000794
 8002f70:	2000081c 	.word	0x2000081c

08002f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b094      	sub	sp, #80	; 0x50
 8002f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f7a:	f107 0320 	add.w	r3, r7, #32
 8002f7e:	2230      	movs	r2, #48	; 0x30
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f006 f802 	bl	8008f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f98:	f002 f8e2 	bl	8005160 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <SystemClock_Config+0xc8>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a26      	ldr	r2, [pc, #152]	; (800303c <SystemClock_Config+0xc8>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <SystemClock_Config+0xc8>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <SystemClock_Config+0xcc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <SystemClock_Config+0xcc>)
 8002fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <SystemClock_Config+0xcc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002fd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002fe8:	2348      	movs	r3, #72	; 0x48
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff4:	f107 0320 	add.w	r3, r7, #32
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 f8c1 	bl	8005180 <HAL_RCC_OscConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003004:	f000 f99c 	bl	8003340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003008:	230f      	movs	r3, #15
 800300a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	2102      	movs	r1, #2
 8003024:	4618      	mov	r0, r3
 8003026:	f002 fb4f 	bl	80056c8 <HAL_RCC_ClockConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003030:	f000 f986 	bl	8003340 <Error_Handler>
  }
}
 8003034:	bf00      	nop
 8003036:	3750      	adds	r7, #80	; 0x50
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	40007000 	.word	0x40007000

08003044 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//
// TIM callback
//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	//
	// Motor driver callback - open loop control
	//
	if(htim == Syringe.TIM_COUNTER_SLAVE){	// Syringe
 800304c:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d108      	bne.n	8003068 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop syringe
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800305c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fba1 	bl	80067a8 <HAL_TIM_PWM_Stop>
			if (MESURE_Syringe >= Set_distance_syringe) { // TODO check if correct
				HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop syringe
			}
		}
	}
}
 8003066:	e070      	b.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
	else if(htim == Needle.TIM_COUNTER_SLAVE){ // Needle
 8003068:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	d108      	bne.n	8003084 <HAL_TIM_PeriodElapsedCallback+0x40>
		HAL_TIM_PWM_Stop(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	4a38      	ldr	r2, [pc, #224]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003078:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f003 fb93 	bl	80067a8 <HAL_TIM_PWM_Stop>
}
 8003082:	e062      	b.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
	else if (htim->Instance == TIM6) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d12c      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0xa4>
		MESURE_Needle = readRangeSingleMillimeters_VL6180X(&Needle_sensor); // Measurement
 800308e:	4834      	ldr	r0, [pc, #208]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003090:	f7ff fc44 	bl	800291c <readRangeSingleMillimeters_VL6180X>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800309a:	801a      	strh	r2, [r3, #0]
		if (Needle.Current_Direction == FORWARD_NEEDLE) {
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800309e:	7e9b      	ldrb	r3, [r3, #26]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d110      	bne.n	80030c6 <HAL_TIM_PeriodElapsedCallback+0x82>
			if(MESURE_Needle <= Set_distance_needle){ // TODO check if correct
 80030a4:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d84a      	bhi.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
				HAL_TIM_PWM_Stop(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fb72 	bl	80067a8 <HAL_TIM_PWM_Stop>
}
 80030c4:	e041      	b.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
			if(MESURE_Needle >= Set_distance_needle){ // TODO check if correct
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d339      	bcc.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
				HAL_TIM_PWM_Stop(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fb61 	bl	80067a8 <HAL_TIM_PWM_Stop>
}
 80030e6:	e030      	b.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
	else if (htim->Instance == TIM7) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12b      	bne.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
		MESURE_Syringe = readRangeSingleMillimeters_VL6180X(&Syringe_sensor); // Measurement
 80030f2:	481f      	ldr	r0, [pc, #124]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80030f4:	f7ff fc12 	bl	800291c <readRangeSingleMillimeters_VL6180X>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80030fe:	801a      	strh	r2, [r3, #0]
		if (Syringe.Current_Direction == BLOW_SYRINGE) { // TODO check if correct
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003102:	7e9b      	ldrb	r3, [r3, #26]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d110      	bne.n	800312a <HAL_TIM_PeriodElapsedCallback+0xe6>
			if (MESURE_Syringe <= Set_distance_syringe) {
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29a      	uxth	r2, r3
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	429a      	cmp	r2, r3
 8003116:	d818      	bhi.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
				HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop syringe
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800311e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fb40 	bl	80067a8 <HAL_TIM_PWM_Stop>
}
 8003128:	e00f      	b.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
			if (MESURE_Syringe >= Set_distance_syringe) { // TODO check if correct
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29a      	uxth	r2, r3
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	429a      	cmp	r2, r3
 8003138:	d307      	bcc.n	800314a <HAL_TIM_PeriodElapsedCallback+0x106>
				HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop syringe
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003140:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fb2f 	bl	80067a8 <HAL_TIM_PWM_Stop>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000004 	.word	0x20000004
 8003158:	2000005c 	.word	0x2000005c
 800315c:	40001000 	.word	0x40001000
 8003160:	20000780 	.word	0x20000780
 8003164:	2000078c 	.word	0x2000078c
 8003168:	20000790 	.word	0x20000790
 800316c:	40001400 	.word	0x40001400
 8003170:	20000774 	.word	0x20000774
 8003174:	2000078e 	.word	0x2000078e
 8003178:	20000792 	.word	0x20000792

0800317c <HAL_GPIO_EXTI_Callback>:
//
// Safety interlock (limit switch)
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == END_STOP_SYRINGE_1_Pin){ // END STOP Syringe Near Drive
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d126      	bne.n	80031dc <HAL_GPIO_EXTI_Callback+0x60>
		HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop syringe
 800318e:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 8003194:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fb05 	bl	80067a8 <HAL_TIM_PWM_Stop>
		Set_Direction_A4988(&Syringe, LEFT_DIR); // Set different direction
 800319e:	2102      	movs	r1, #2
 80031a0:	4850      	ldr	r0, [pc, #320]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031a2:	f7fd ffb7 	bl	8001114 <Set_Direction_A4988>
		if (Control_type == CLOSE_LOOP) {
 80031a6:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d10b      	bne.n	80031c6 <HAL_GPIO_EXTI_Callback+0x4a>
			Set_distance_syringe = 100; // TODO change
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_GPIO_EXTI_Callback+0x170>)
 80031b0:	2264      	movs	r2, #100	; 0x64
 80031b2:	801a      	strh	r2, [r3, #0]
			HAL_TIM_PWM_Start(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop needle
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 f9f8 	bl	80065b4 <HAL_TIM_PWM_Start>
		} else {
			__HAL_TIM_SetCounter(Needle.TIM_COUNTER_SLAVE, 0); // Reset Counter Needle
			Rotate_mm_A4988(&Needle, 10); // Recoil
		}
	}
}
 80031c4:	e08a      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
			__HAL_TIM_SetCounter(Syringe.TIM_COUNTER_SLAVE, 0); // Reset Counter Syringe
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
			Rotate_mm_A4988(&Syringe, 10); // Recoil
 80031d0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80031d4:	4843      	ldr	r0, [pc, #268]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031d6:	f7fe f8bf 	bl	8001358 <Rotate_mm_A4988>
}
 80031da:	e07f      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
	}else if(GPIO_Pin == END_STOP_SYRINGE_2_Pin){ // END STOP Syringe Near Syringe
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e2:	d126      	bne.n	8003232 <HAL_GPIO_EXTI_Callback+0xb6>
		HAL_TIM_PWM_Stop(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop syringe
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	4a3e      	ldr	r2, [pc, #248]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fada 	bl	80067a8 <HAL_TIM_PWM_Stop>
		Set_Direction_A4988(&Syringe, RIGHT_DIR); // Set different direction
 80031f4:	2101      	movs	r1, #1
 80031f6:	483b      	ldr	r0, [pc, #236]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 80031f8:	f7fd ff8c 	bl	8001114 <Set_Direction_A4988>
		if (Control_type == CLOSE_LOOP) {
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d10b      	bne.n	800321c <HAL_GPIO_EXTI_Callback+0xa0>
			Set_distance_syringe = 10; // TODO change
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_GPIO_EXTI_Callback+0x170>)
 8003206:	220a      	movs	r2, #10
 8003208:	801a      	strh	r2, [r3, #0]
			HAL_TIM_PWM_Start(Syringe.TIM_STEP, Syringe.TIM_STEP_CHANNEL); // Stop needle
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a35      	ldr	r2, [pc, #212]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 8003210:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f003 f9cd 	bl	80065b4 <HAL_TIM_PWM_Start>
}
 800321a:	e05f      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
			__HAL_TIM_SetCounter(Syringe.TIM_COUNTER_SLAVE, 0); // Reset Counter Syringe
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
			Rotate_mm_A4988(&Syringe, 10); // Recoil
 8003226:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800322a:	482e      	ldr	r0, [pc, #184]	; (80032e4 <HAL_GPIO_EXTI_Callback+0x168>)
 800322c:	f7fe f894 	bl	8001358 <Rotate_mm_A4988>
}
 8003230:	e054      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
	}else if(GPIO_Pin == END_STOP_NEEDLE_1_Pin){ // END STOP Needle Near Drive
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003238:	d126      	bne.n	8003288 <HAL_GPIO_EXTI_Callback+0x10c>
		HAL_TIM_PWM_Stop(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003240:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f003 faaf 	bl	80067a8 <HAL_TIM_PWM_Stop>
		Set_Direction_A4988(&Needle, RIGHT_DIR); // Set different direction
 800324a:	2101      	movs	r1, #1
 800324c:	4828      	ldr	r0, [pc, #160]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 800324e:	f7fd ff61 	bl	8001114 <Set_Direction_A4988>
		if (Control_type == CLOSE_LOOP) {
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d10b      	bne.n	8003272 <HAL_GPIO_EXTI_Callback+0xf6>
			Set_distance_needle = 100; // TODO change
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x178>)
 800325c:	2264      	movs	r2, #100	; 0x64
 800325e:	801a      	strh	r2, [r3, #0]
			HAL_TIM_PWM_Start(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f003 f9a2 	bl	80065b4 <HAL_TIM_PWM_Start>
}
 8003270:	e034      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
			__HAL_TIM_SetCounter(Needle.TIM_COUNTER_SLAVE, 0); // Reset Counter Needle
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2200      	movs	r2, #0
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
			Rotate_mm_A4988(&Needle, 10); // Recoil
 800327c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003280:	481b      	ldr	r0, [pc, #108]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003282:	f7fe f869 	bl	8001358 <Rotate_mm_A4988>
}
 8003286:	e029      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
	}else if(GPIO_Pin == END_STOP_NEEDLE_2_Pin){ // END STOP Needle Near Needle
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328e:	d125      	bne.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
		HAL_TIM_PWM_Stop(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 8003296:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f003 fa84 	bl	80067a8 <HAL_TIM_PWM_Stop>
		Set_Direction_A4988(&Needle, LEFT_DIR); // Set different direction
 80032a0:	2102      	movs	r1, #2
 80032a2:	4813      	ldr	r0, [pc, #76]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 80032a4:	f7fd ff36 	bl	8001114 <Set_Direction_A4988>
		if (Control_type == CLOSE_LOOP) {
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_GPIO_EXTI_Callback+0x16c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d10b      	bne.n	80032c8 <HAL_GPIO_EXTI_Callback+0x14c>
			Set_distance_needle = 10; // TODO change
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_GPIO_EXTI_Callback+0x178>)
 80032b2:	220a      	movs	r2, #10
 80032b4:	801a      	strh	r2, [r3, #0]
			HAL_TIM_PWM_Start(Needle.TIM_STEP, Needle.TIM_STEP_CHANNEL); // Stop needle
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 80032bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 f977 	bl	80065b4 <HAL_TIM_PWM_Start>
}
 80032c6:	e009      	b.n	80032dc <HAL_GPIO_EXTI_Callback+0x160>
			__HAL_TIM_SetCounter(Needle.TIM_COUNTER_SLAVE, 0); // Reset Counter Needle
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
			Rotate_mm_A4988(&Needle, 10); // Recoil
 80032d2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80032d6:	4806      	ldr	r0, [pc, #24]	; (80032f0 <HAL_GPIO_EXTI_Callback+0x174>)
 80032d8:	f7fe f83e 	bl	8001358 <Rotate_mm_A4988>
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000004 	.word	0x20000004
 80032e8:	200000b4 	.word	0x200000b4
 80032ec:	20000792 	.word	0x20000792
 80032f0:	2000005c 	.word	0x2000005c
 80032f4:	20000790 	.word	0x20000790

080032f8 <HAL_UART_RxCpltCallback>:
//
// Communication interface
//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_UART_RxCpltCallback+0x38>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10e      	bne.n	8003328 <HAL_UART_RxCpltCallback+0x30>
	{
		// Start of handling message
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800330a:	2201      	movs	r2, #1
 800330c:	2101      	movs	r1, #1
 800330e:	4809      	ldr	r0, [pc, #36]	; (8003334 <HAL_UART_RxCpltCallback+0x3c>)
 8003310:	f001 f8f8 	bl	8004504 <HAL_GPIO_WritePin>
		//
		// Handling the message
		//
			// TODO implement
		// End of handling message
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003314:	2200      	movs	r2, #0
 8003316:	2101      	movs	r1, #1
 8003318:	4806      	ldr	r0, [pc, #24]	; (8003334 <HAL_UART_RxCpltCallback+0x3c>)
 800331a:	f001 f8f3 	bl	8004504 <HAL_GPIO_WritePin>
		// Listening setup
		HAL_UART_Receive_IT(&huart3, Buffor_Rx_USART, 8);
 800331e:	2208      	movs	r2, #8
 8003320:	4905      	ldr	r1, [pc, #20]	; (8003338 <HAL_UART_RxCpltCallback+0x40>)
 8003322:	4806      	ldr	r0, [pc, #24]	; (800333c <HAL_UART_RxCpltCallback+0x44>)
 8003324:	f004 fc07 	bl	8007b36 <HAL_UART_Receive_IT>
	}
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40004800 	.word	0x40004800
 8003334:	40020400 	.word	0x40020400
 8003338:	20000814 	.word	0x20000814
 800333c:	20000a1c 	.word	0x20000a1c

08003340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003348:	e7fe      	b.n	8003348 <Error_Handler+0x8>
	...

0800334c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_MspInit+0x44>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_MspInit+0x44>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_MspInit+0x44>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_MspInit+0x44>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a08      	ldr	r2, [pc, #32]	; (8003390 <HAL_MspInit+0x44>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_MspInit+0x44>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <NMI_Handler+0x4>

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e0:	f000 fd20 	bl	8003e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_1_Pin);
 80033ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033f0:	f001 f8a2 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_1_Pin);
 80033f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033f8:	f001 f89e 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}

08003400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <TIM3_IRQHandler+0x10>)
 8003406:	f003 fa4f 	bl	80068a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200008a0 	.word	0x200008a0

08003414 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <USART3_IRQHandler+0x10>)
 800341a:	f004 fbdb 	bl	8007bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000a1c 	.word	0x20000a1c

08003428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(END_STOP_SYRINGE_2_Pin);
 800342c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003430:	f001 f882 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(END_STOP_NEEDLE_2_Pin);
 8003434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003438:	f001 f87e 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}

08003440 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <TIM5_IRQHandler+0x10>)
 8003446:	f003 fa2f 	bl	80068a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000938 	.word	0x20000938

08003454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <TIM6_DAC_IRQHandler+0x10>)
 800345a:	f003 fa25 	bl	80068a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000984 	.word	0x20000984

08003468 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <TIM7_IRQHandler+0x10>)
 800346e:	f003 fa1b 	bl	80068a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200009d0 	.word	0x200009d0

0800347c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
	return 1;
 8003480:	2301      	movs	r3, #1
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_kill>:

int _kill(int pid, int sig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003496:	f005 fd4f 	bl	8008f38 <__errno>
 800349a:	4603      	mov	r3, r0
 800349c:	2216      	movs	r2, #22
 800349e:	601a      	str	r2, [r3, #0]
	return -1;
 80034a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <_exit>:

void _exit (int status)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ffe7 	bl	800348c <_kill>
	while (1) {}		/* Make sure we hang here */
 80034be:	e7fe      	b.n	80034be <_exit+0x12>

080034c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e00a      	b.n	80034e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034d2:	f3af 8000 	nop.w
 80034d6:	4601      	mov	r1, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	60ba      	str	r2, [r7, #8]
 80034de:	b2ca      	uxtb	r2, r1
 80034e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dbf0      	blt.n	80034d2 <_read+0x12>
	}

return len;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e009      	b.n	8003520 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	60ba      	str	r2, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3301      	adds	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	dbf1      	blt.n	800350c <_write+0x12>
	}
	return len;
 8003528:	687b      	ldr	r3, [r7, #4]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <_close>:

int _close(int file)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
	return -1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800355a:	605a      	str	r2, [r3, #4]
	return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <_isatty>:

int _isatty(int file)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
	return 1;
 8003572:	2301      	movs	r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
	return 0;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <_sbrk+0x5c>)
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <_sbrk+0x60>)
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <_sbrk+0x64>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <_sbrk+0x64>)
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <_sbrk+0x68>)
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <_sbrk+0x64>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d207      	bcs.n	80035dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035cc:	f005 fcb4 	bl	8008f38 <__errno>
 80035d0:	4603      	mov	r3, r0
 80035d2:	220c      	movs	r2, #12
 80035d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	e009      	b.n	80035f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <_sbrk+0x64>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <_sbrk+0x64>)
 80035ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20050000 	.word	0x20050000
 80035fc:	00000400 	.word	0x00000400
 8003600:	20000850 	.word	0x20000850
 8003604:	20000ab8 	.word	0x20000ab8

08003608 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <SystemInit+0x20>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	4a05      	ldr	r2, [pc, #20]	; (8003628 <SystemInit+0x20>)
 8003614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	; 0x38
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003640:	f107 031c 	add.w	r3, r7, #28
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800364c:	463b      	mov	r3, r7
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <MX_TIM2_Init+0xec>)
 8003660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003666:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <MX_TIM2_Init+0xec>)
 8003668:	2247      	movs	r2, #71	; 0x47
 800366a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <MX_TIM2_Init+0xec>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <MX_TIM2_Init+0xec>)
 8003674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <MX_TIM2_Init+0xec>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <MX_TIM2_Init+0xec>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003686:	4824      	ldr	r0, [pc, #144]	; (8003718 <MX_TIM2_Init+0xec>)
 8003688:	f002 fe34 	bl	80062f4 <HAL_TIM_Base_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003692:	f7ff fe55 	bl	8003340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800369c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a0:	4619      	mov	r1, r3
 80036a2:	481d      	ldr	r0, [pc, #116]	; (8003718 <MX_TIM2_Init+0xec>)
 80036a4:	f003 fb34 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80036ae:	f7ff fe47 	bl	8003340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036b2:	4819      	ldr	r0, [pc, #100]	; (8003718 <MX_TIM2_Init+0xec>)
 80036b4:	f002 ff1d 	bl	80064f2 <HAL_TIM_PWM_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80036be:	f7ff fe3f 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036c2:	2320      	movs	r3, #32
 80036c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4619      	mov	r1, r3
 80036d0:	4811      	ldr	r0, [pc, #68]	; (8003718 <MX_TIM2_Init+0xec>)
 80036d2:	f004 f8a3 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80036dc:	f7ff fe30 	bl	8003340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036e0:	2360      	movs	r3, #96	; 0x60
 80036e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 80036e4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80036e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036f2:	463b      	mov	r3, r7
 80036f4:	2200      	movs	r2, #0
 80036f6:	4619      	mov	r1, r3
 80036f8:	4807      	ldr	r0, [pc, #28]	; (8003718 <MX_TIM2_Init+0xec>)
 80036fa:	f003 f9f5 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003704:	f7ff fe1c 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <MX_TIM2_Init+0xec>)
 800370a:	f000 fa2f 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 800370e:	bf00      	nop
 8003710:	3738      	adds	r7, #56	; 0x38
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000854 	.word	0x20000854

0800371c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003722:	f107 030c 	add.w	r3, r7, #12
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003732:	463b      	mov	r3, r7
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <MX_TIM3_Init+0x98>)
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <MX_TIM3_Init+0x9c>)
 8003740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <MX_TIM3_Init+0x98>)
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <MX_TIM3_Init+0x98>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <MX_TIM3_Init+0x98>)
 8003750:	2200      	movs	r2, #0
 8003752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003754:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <MX_TIM3_Init+0x98>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <MX_TIM3_Init+0x98>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003760:	4814      	ldr	r0, [pc, #80]	; (80037b4 <MX_TIM3_Init+0x98>)
 8003762:	f002 fdc7 	bl	80062f4 <HAL_TIM_Base_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800376c:	f7ff fde8 	bl	8003340 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003770:	2307      	movs	r3, #7
 8003772:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8003774:	2310      	movs	r3, #16
 8003776:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4619      	mov	r1, r3
 800377e:	480d      	ldr	r0, [pc, #52]	; (80037b4 <MX_TIM3_Init+0x98>)
 8003780:	f003 fb90 	bl	8006ea4 <HAL_TIM_SlaveConfigSynchro>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800378a:	f7ff fdd9 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003796:	463b      	mov	r3, r7
 8003798:	4619      	mov	r1, r3
 800379a:	4806      	ldr	r0, [pc, #24]	; (80037b4 <MX_TIM3_Init+0x98>)
 800379c:	f004 f83e 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80037a6:	f7ff fdcb 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037aa:	bf00      	nop
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200008a0 	.word	0x200008a0
 80037b8:	40000400 	.word	0x40000400

080037bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08e      	sub	sp, #56	; 0x38
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037dc:	463b      	mov	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	611a      	str	r2, [r3, #16]
 80037ea:	615a      	str	r2, [r3, #20]
 80037ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <MX_TIM4_Init+0xe8>)
 80037f0:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <MX_TIM4_Init+0xec>)
 80037f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <MX_TIM4_Init+0xe8>)
 80037f6:	2247      	movs	r2, #71	; 0x47
 80037f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fa:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <MX_TIM4_Init+0xe8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003802:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003806:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <MX_TIM4_Init+0xe8>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800380e:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003814:	4823      	ldr	r0, [pc, #140]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003816:	f002 fd6d 	bl	80062f4 <HAL_TIM_Base_Init>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003820:	f7ff fd8e 	bl	8003340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800382a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382e:	4619      	mov	r1, r3
 8003830:	481c      	ldr	r0, [pc, #112]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003832:	f003 fa6d 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800383c:	f7ff fd80 	bl	8003340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003840:	4818      	ldr	r0, [pc, #96]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003842:	f002 fe56 	bl	80064f2 <HAL_TIM_PWM_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800384c:	f7ff fd78 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003850:	2320      	movs	r3, #32
 8003852:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	4619      	mov	r1, r3
 800385e:	4811      	ldr	r0, [pc, #68]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003860:	f003 ffdc 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800386a:	f7ff fd69 	bl	8003340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800386e:	2360      	movs	r3, #96	; 0x60
 8003870:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8003872:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003876:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003880:	463b      	mov	r3, r7
 8003882:	2200      	movs	r2, #0
 8003884:	4619      	mov	r1, r3
 8003886:	4807      	ldr	r0, [pc, #28]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003888:	f003 f92e 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003892:	f7ff fd55 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003896:	4803      	ldr	r0, [pc, #12]	; (80038a4 <MX_TIM4_Init+0xe8>)
 8003898:	f000 f968 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 800389c:	bf00      	nop
 800389e:	3738      	adds	r7, #56	; 0x38
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	200008ec 	.word	0x200008ec
 80038a8:	40000800 	.word	0x40000800

080038ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c2:	463b      	mov	r3, r7
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <MX_TIM5_Init+0x98>)
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <MX_TIM5_Init+0x9c>)
 80038d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <MX_TIM5_Init+0x98>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_TIM5_Init+0x98>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <MX_TIM5_Init+0x98>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <MX_TIM5_Init+0x98>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <MX_TIM5_Init+0x98>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038f0:	4814      	ldr	r0, [pc, #80]	; (8003944 <MX_TIM5_Init+0x98>)
 80038f2:	f002 fcff 	bl	80062f4 <HAL_TIM_Base_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80038fc:	f7ff fd20 	bl	8003340 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003900:	2307      	movs	r3, #7
 8003902:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8003904:	2320      	movs	r3, #32
 8003906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4619      	mov	r1, r3
 800390e:	480d      	ldr	r0, [pc, #52]	; (8003944 <MX_TIM5_Init+0x98>)
 8003910:	f003 fac8 	bl	8006ea4 <HAL_TIM_SlaveConfigSynchro>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800391a:	f7ff fd11 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003926:	463b      	mov	r3, r7
 8003928:	4619      	mov	r1, r3
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <MX_TIM5_Init+0x98>)
 800392c:	f003 ff76 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003936:	f7ff fd03 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000938 	.word	0x20000938
 8003948:	40000c00 	.word	0x40000c00

0800394c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800395c:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <MX_TIM6_Init+0x68>)
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <MX_TIM6_Init+0x6c>)
 8003960:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <MX_TIM6_Init+0x68>)
 8003964:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003968:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <MX_TIM6_Init+0x68>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <MX_TIM6_Init+0x68>)
 8003972:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003976:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <MX_TIM6_Init+0x68>)
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800397e:	480d      	ldr	r0, [pc, #52]	; (80039b4 <MX_TIM6_Init+0x68>)
 8003980:	f002 fcb8 	bl	80062f4 <HAL_TIM_Base_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800398a:	f7ff fcd9 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4806      	ldr	r0, [pc, #24]	; (80039b4 <MX_TIM6_Init+0x68>)
 800399c:	f003 ff3e 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80039a6:	f7ff fccb 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000984 	.word	0x20000984
 80039b8:	40001000 	.word	0x40001000

080039bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <MX_TIM7_Init+0x6c>)
 80039d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039d4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80039d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039e2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80039e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039ee:	480d      	ldr	r0, [pc, #52]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039f0:	f002 fc80 	bl	80062f4 <HAL_TIM_Base_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80039fa:	f7ff fca1 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4806      	ldr	r0, [pc, #24]	; (8003a24 <MX_TIM7_Init+0x68>)
 8003a0c:	f003 ff06 	bl	800781c <HAL_TIMEx_MasterConfigSynchronization>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003a16:	f7ff fc93 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200009d0 	.word	0x200009d0
 8003a28:	40001400 	.word	0x40001400

08003a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a3e:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a44      	ldr	r2, [pc, #272]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003a56:	e078      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <HAL_TIM_Base_MspInit+0x12c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d114      	bne.n	8003a8c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a62:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	201d      	movs	r0, #29
 8003a80:	f000 facb 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a84:	201d      	movs	r0, #29
 8003a86:	f000 fae4 	bl	8004052 <HAL_NVIC_EnableIRQ>
}
 8003a8a:	e05e      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a32      	ldr	r2, [pc, #200]	; (8003b5c <HAL_TIM_Base_MspInit+0x130>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10c      	bne.n	8003ab0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a96:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003a9c:	f043 0304 	orr.w	r3, r3, #4
 8003aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
}
 8003aae:	e04c      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM5)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_TIM_Base_MspInit+0x134>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d114      	bne.n	8003ae4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003aba:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2032      	movs	r0, #50	; 0x32
 8003ad8:	f000 fa9f 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003adc:	2032      	movs	r0, #50	; 0x32
 8003ade:	f000 fab8 	bl	8004052 <HAL_NVIC_EnableIRQ>
}
 8003ae2:	e032      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIM_Base_MspInit+0x138>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d114      	bne.n	8003b18 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003aee:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003af4:	f043 0310 	orr.w	r3, r3, #16
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2036      	movs	r0, #54	; 0x36
 8003b0c:	f000 fa85 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b10:	2036      	movs	r0, #54	; 0x36
 8003b12:	f000 fa9e 	bl	8004052 <HAL_NVIC_EnableIRQ>
}
 8003b16:	e018      	b.n	8003b4a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM7)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_TIM_Base_MspInit+0x13c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d113      	bne.n	8003b4a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a0b      	ldr	r2, [pc, #44]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003b28:	f043 0320 	orr.w	r3, r3, #32
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_TIM_Base_MspInit+0x128>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	2037      	movs	r0, #55	; 0x37
 8003b40:	f000 fa6b 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b44:	2037      	movs	r0, #55	; 0x37
 8003b46:	f000 fa84 	bl	8004052 <HAL_NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40001000 	.word	0x40001000
 8003b68:	40001400 	.word	0x40001400

08003b6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d11d      	bne.n	8003bca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_TIM_MspPostInit+0xac>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_TIM_MspPostInit+0xac>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <HAL_TIM_MspPostInit+0xac>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_SYRINGE_Pin;
 8003ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SYRINGE_GPIO_Port, &GPIO_InitStruct);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4816      	ldr	r0, [pc, #88]	; (8003c1c <HAL_TIM_MspPostInit+0xb0>)
 8003bc4:	f000 faf2 	bl	80041ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003bc8:	e021      	b.n	8003c0e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <HAL_TIM_MspPostInit+0xb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d11c      	bne.n	8003c0e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_TIM_MspPostInit+0xac>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <HAL_TIM_MspPostInit+0xac>)
 8003bda:	f043 0308 	orr.w	r3, r3, #8
 8003bde:	6313      	str	r3, [r2, #48]	; 0x30
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_TIM_MspPostInit+0xac>)
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_NEEDLE_Pin;
 8003bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_NEEDLE_GPIO_Port, &GPIO_InitStruct);
 8003c02:	f107 0314 	add.w	r3, r7, #20
 8003c06:	4619      	mov	r1, r3
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <HAL_TIM_MspPostInit+0xb8>)
 8003c0a:	f000 facf 	bl	80041ac <HAL_GPIO_Init>
}
 8003c0e:	bf00      	nop
 8003c10:	3728      	adds	r7, #40	; 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40020c00 	.word	0x40020c00

08003c28 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c2e:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <MX_USART3_UART_Init+0x5c>)
 8003c30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c4e:	220c      	movs	r2, #12
 8003c50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c6a:	4805      	ldr	r0, [pc, #20]	; (8003c80 <MX_USART3_UART_Init+0x58>)
 8003c6c:	f003 fe82 	bl	8007974 <HAL_UART_Init>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003c76:	f7ff fb63 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000a1c 	.word	0x20000a1c
 8003c84:	40004800 	.word	0x40004800

08003c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b0aa      	sub	sp, #168	; 0xa8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	2284      	movs	r2, #132	; 0x84
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f005 f96f 	bl	8008f8c <memset>
  if(uartHandle->Instance==USART3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_UART_MspInit+0xc4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d144      	bne.n	8003d42 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 ff24 	bl	8005b14 <HAL_RCCEx_PeriphCLKConfig>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cd2:	f7ff fb35 	bl	8003340 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_UART_MspInit+0xc8>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_UART_MspInit+0xc8>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_UART_MspInit+0xc8>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_UART_MspInit+0xc8>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <HAL_UART_MspInit+0xc8>)
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <HAL_UART_MspInit+0xc8>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d20:	2307      	movs	r3, #7
 8003d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4809      	ldr	r0, [pc, #36]	; (8003d54 <HAL_UART_MspInit+0xcc>)
 8003d2e:	f000 fa3d 	bl	80041ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	2027      	movs	r0, #39	; 0x27
 8003d38:	f000 f96f 	bl	800401a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d3c:	2027      	movs	r0, #39	; 0x27
 8003d3e:	f000 f988 	bl	8004052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003d42:	bf00      	nop
 8003d44:	37a8      	adds	r7, #168	; 0xa8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40004800 	.word	0x40004800
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40020c00 	.word	0x40020c00

08003d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d5c:	480d      	ldr	r0, [pc, #52]	; (8003d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d5e:	490e      	ldr	r1, [pc, #56]	; (8003d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d60:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d64:	e002      	b.n	8003d6c <LoopCopyDataInit>

08003d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6a:	3304      	adds	r3, #4

08003d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d70:	d3f9      	bcc.n	8003d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d72:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d74:	4c0b      	ldr	r4, [pc, #44]	; (8003da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d78:	e001      	b.n	8003d7e <LoopFillZerobss>

08003d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d7c:	3204      	adds	r2, #4

08003d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d80:	d3fb      	bcc.n	8003d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d82:	f7ff fc41 	bl	8003608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d86:	f005 f8dd 	bl	8008f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d8a:	f7ff f80b 	bl	8002da4 <main>
  bx  lr    
 8003d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d98:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8003d9c:	0800c40c 	.word	0x0800c40c
  ldr r2, =_sbss
 8003da0:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8003da4:	20000ab4 	.word	0x20000ab4

08003da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da8:	e7fe      	b.n	8003da8 <ADC_IRQHandler>

08003daa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dae:	2003      	movs	r0, #3
 8003db0:	f000 f928 	bl	8004004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f000 f805 	bl	8003dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dba:	f7ff fac7 	bl	800334c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_InitTick+0x54>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_InitTick+0x58>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f943 	bl	800406e <HAL_SYSTICK_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e00e      	b.n	8003e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d80a      	bhi.n	8003e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	f000 f90b 	bl	800401a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <HAL_InitTick+0x5c>)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e000      	b.n	8003e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200000b8 	.word	0x200000b8
 8003e1c:	200000c0 	.word	0x200000c0
 8003e20:	200000bc 	.word	0x200000bc

08003e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_IncTick+0x20>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_IncTick+0x24>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <HAL_IncTick+0x24>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	200000c0 	.word	0x200000c0
 8003e48:	20000aa0 	.word	0x20000aa0

08003e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_GetTick+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000aa0 	.word	0x20000aa0

08003e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x40>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e80:	4013      	ands	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e92:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <__NVIC_SetPriorityGrouping+0x40>)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	60d3      	str	r3, [r2, #12]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00
 8003ea8:	05fa0000 	.word	0x05fa0000

08003eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 0307 	and.w	r3, r3, #7
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	db0b      	blt.n	8003ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4907      	ldr	r1, [pc, #28]	; (8003f00 <__NVIC_EnableIRQ+0x38>)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2001      	movs	r0, #1
 8003eea:	fa00 f202 	lsl.w	r2, r0, r2
 8003eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e100 	.word	0xe000e100

08003f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	db0a      	blt.n	8003f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	490c      	ldr	r1, [pc, #48]	; (8003f50 <__NVIC_SetPriority+0x4c>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	440b      	add	r3, r1
 8003f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f2c:	e00a      	b.n	8003f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4908      	ldr	r1, [pc, #32]	; (8003f54 <__NVIC_SetPriority+0x50>)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	3b04      	subs	r3, #4
 8003f3c:	0112      	lsls	r2, r2, #4
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	440b      	add	r3, r1
 8003f42:	761a      	strb	r2, [r3, #24]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000e100 	.word	0xe000e100
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	; 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f1c3 0307 	rsb	r3, r3, #7
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	bf28      	it	cs
 8003f76:	2304      	movcs	r3, #4
 8003f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d902      	bls.n	8003f88 <NVIC_EncodePriority+0x30>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3b03      	subs	r3, #3
 8003f86:	e000      	b.n	8003f8a <NVIC_EncodePriority+0x32>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43da      	mvns	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	4313      	orrs	r3, r2
         );
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3724      	adds	r7, #36	; 0x24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd0:	d301      	bcc.n	8003fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00f      	b.n	8003ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <SysTick_Config+0x40>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fde:	210f      	movs	r1, #15
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	f7ff ff8e 	bl	8003f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <SysTick_Config+0x40>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <SysTick_Config+0x40>)
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	e000e010 	.word	0xe000e010

08004004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff29 	bl	8003e64 <__NVIC_SetPriorityGrouping>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800402c:	f7ff ff3e 	bl	8003eac <__NVIC_GetPriorityGrouping>
 8004030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff8e 	bl	8003f58 <NVIC_EncodePriority>
 800403c:	4602      	mov	r2, r0
 800403e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff5d 	bl	8003f04 <__NVIC_SetPriority>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff31 	bl	8003ec8 <__NVIC_EnableIRQ>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ffa2 	bl	8003fc0 <SysTick_Config>
 800407c:	4603      	mov	r3, r0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7ff feda 	bl	8003e4c <HAL_GetTick>
 8004098:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d008      	beq.n	80040b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2280      	movs	r2, #128	; 0x80
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e052      	b.n	800415e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0216 	bic.w	r2, r2, #22
 80040c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d103      	bne.n	80040e8 <HAL_DMA_Abort+0x62>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0208 	bic.w	r2, r2, #8
 80040f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004108:	e013      	b.n	8004132 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800410a:	f7ff fe9f 	bl	8003e4c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b05      	cmp	r3, #5
 8004116:	d90c      	bls.n	8004132 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2203      	movs	r2, #3
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e015      	b.n	800415e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e4      	bne.n	800410a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	223f      	movs	r2, #63	; 0x3f
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d004      	beq.n	8004184 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e00c      	b.n	800419e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2205      	movs	r2, #5
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e175      	b.n	80044b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041cc:	2201      	movs	r2, #1
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	f040 8164 	bne.w	80044b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d005      	beq.n	8004202 <HAL_GPIO_Init+0x56>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d130      	bne.n	8004264 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2203      	movs	r2, #3
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004238:	2201      	movs	r2, #1
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0201 	and.w	r2, r3, #1
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	2b03      	cmp	r3, #3
 800426e:	d017      	beq.n	80042a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	2203      	movs	r2, #3
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d123      	bne.n	80042f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	08da      	lsrs	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3208      	adds	r2, #8
 80042b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220f      	movs	r2, #15
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	08da      	lsrs	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3208      	adds	r2, #8
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	2203      	movs	r2, #3
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80be 	beq.w	80044b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004336:	4b66      	ldr	r3, [pc, #408]	; (80044d0 <HAL_GPIO_Init+0x324>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a65      	ldr	r2, [pc, #404]	; (80044d0 <HAL_GPIO_Init+0x324>)
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_GPIO_Init+0x324>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800434e:	4a61      	ldr	r2, [pc, #388]	; (80044d4 <HAL_GPIO_Init+0x328>)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	3302      	adds	r3, #2
 8004356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	220f      	movs	r2, #15
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a58      	ldr	r2, [pc, #352]	; (80044d8 <HAL_GPIO_Init+0x32c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d037      	beq.n	80043ea <HAL_GPIO_Init+0x23e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a57      	ldr	r2, [pc, #348]	; (80044dc <HAL_GPIO_Init+0x330>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_GPIO_Init+0x23a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_GPIO_Init+0x334>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02b      	beq.n	80043e2 <HAL_GPIO_Init+0x236>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a55      	ldr	r2, [pc, #340]	; (80044e4 <HAL_GPIO_Init+0x338>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d025      	beq.n	80043de <HAL_GPIO_Init+0x232>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a54      	ldr	r2, [pc, #336]	; (80044e8 <HAL_GPIO_Init+0x33c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <HAL_GPIO_Init+0x22e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a53      	ldr	r2, [pc, #332]	; (80044ec <HAL_GPIO_Init+0x340>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d019      	beq.n	80043d6 <HAL_GPIO_Init+0x22a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_GPIO_Init+0x344>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0x226>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_GPIO_Init+0x348>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_GPIO_Init+0x222>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a50      	ldr	r2, [pc, #320]	; (80044f8 <HAL_GPIO_Init+0x34c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <HAL_GPIO_Init+0x21e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4f      	ldr	r2, [pc, #316]	; (80044fc <HAL_GPIO_Init+0x350>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_GPIO_Init+0x21a>
 80043c2:	2309      	movs	r3, #9
 80043c4:	e012      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043c6:	230a      	movs	r3, #10
 80043c8:	e010      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ca:	2308      	movs	r3, #8
 80043cc:	e00e      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00c      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043d2:	2306      	movs	r3, #6
 80043d4:	e00a      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043d6:	2305      	movs	r3, #5
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043da:	2304      	movs	r3, #4
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x240>
 80043ea:	2300      	movs	r3, #0
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	; (80044d4 <HAL_GPIO_Init+0x328>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_GPIO_Init+0x354>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_GPIO_Init+0x354>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <HAL_GPIO_Init+0x354>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_GPIO_Init+0x354>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <HAL_GPIO_Init+0x354>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	f67f ae86 	bls.w	80041cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3724      	adds	r7, #36	; 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40020000 	.word	0x40020000
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40021400 	.word	0x40021400
 80044f0:	40021800 	.word	0x40021800
 80044f4:	40021c00 	.word	0x40021c00
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40022400 	.word	0x40022400
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004520:	e003      	b.n	800452a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004542:	4b08      	ldr	r3, [pc, #32]	; (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fe10 	bl	800317c <HAL_GPIO_EXTI_Callback>
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07f      	b.n	800467a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe fb62 	bl	8002c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	e006      	b.n	80045f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d104      	bne.n	8004602 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004600:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_I2C_Init+0x11c>)
 800460e:	430b      	orrs	r3, r1
 8004610:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004620:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	02008000 	.word	0x02008000

08004688 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	461a      	mov	r2, r3
 8004696:	4603      	mov	r3, r0
 8004698:	817b      	strh	r3, [r7, #10]
 800469a:	460b      	mov	r3, r1
 800469c:	813b      	strh	r3, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	f040 80f9 	bne.w	80048a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_I2C_Mem_Write+0x34>
 80046b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0ed      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Mem_Write+0x4e>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e0e6      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046de:	f7ff fbb5 	bl	8003e4c <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2319      	movs	r3, #25
 80046ea:	2201      	movs	r2, #1
 80046ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 fac3 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0d1      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2221      	movs	r2, #33	; 0x21
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2240      	movs	r2, #64	; 0x40
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a3a      	ldr	r2, [r7, #32]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004728:	88f8      	ldrh	r0, [r7, #6]
 800472a:	893a      	ldrh	r2, [r7, #8]
 800472c:	8979      	ldrh	r1, [r7, #10]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4603      	mov	r3, r0
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f9d3 	bl	8004ae4 <I2C_RequestMemoryWrite>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0a9      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2bff      	cmp	r3, #255	; 0xff
 8004758:	d90e      	bls.n	8004778 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	22ff      	movs	r2, #255	; 0xff
 800475e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004764:	b2da      	uxtb	r2, r3
 8004766:	8979      	ldrh	r1, [r7, #10]
 8004768:	2300      	movs	r3, #0
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fc2b 	bl	8004fcc <I2C_TransferConfig>
 8004776:	e00f      	b.n	8004798 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	b2da      	uxtb	r2, r3
 8004788:	8979      	ldrh	r1, [r7, #10]
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fc1a 	bl	8004fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 faad 	bl	8004cfc <I2C_WaitOnTXISFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e07b      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d034      	beq.n	8004850 <HAL_I2C_Mem_Write+0x1c8>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d130      	bne.n	8004850 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	2200      	movs	r2, #0
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fa3f 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e04d      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2bff      	cmp	r3, #255	; 0xff
 8004810:	d90e      	bls.n	8004830 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	b2da      	uxtb	r2, r3
 800481e:	8979      	ldrh	r1, [r7, #10]
 8004820:	2300      	movs	r3, #0
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fbcf 	bl	8004fcc <I2C_TransferConfig>
 800482e:	e00f      	b.n	8004850 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	b2da      	uxtb	r2, r3
 8004840:	8979      	ldrh	r1, [r7, #10]
 8004842:	2300      	movs	r3, #0
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fbbe 	bl	8004fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d19e      	bne.n	8004798 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa8c 	bl	8004d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e01a      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2220      	movs	r2, #32
 8004874:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6859      	ldr	r1, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <HAL_I2C_Mem_Write+0x224>)
 8004882:	400b      	ands	r3, r1
 8004884:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e000      	b.n	80048a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	fe00e800 	.word	0xfe00e800

080048b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	461a      	mov	r2, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	817b      	strh	r3, [r7, #10]
 80048c2:	460b      	mov	r3, r1
 80048c4:	813b      	strh	r3, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 80fd 	bne.w	8004ad2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_I2C_Mem_Read+0x34>
 80048de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0f1      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_I2C_Mem_Read+0x4e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0ea      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004906:	f7ff faa1 	bl	8003e4c <HAL_GetTick>
 800490a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2319      	movs	r3, #25
 8004912:	2201      	movs	r2, #1
 8004914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f9af 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d5      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2222      	movs	r2, #34	; 0x22
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004950:	88f8      	ldrh	r0, [r7, #6]
 8004952:	893a      	ldrh	r2, [r7, #8]
 8004954:	8979      	ldrh	r1, [r7, #10]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4603      	mov	r3, r0
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f913 	bl	8004b8c <I2C_RequestMemoryRead>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0ad      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	2bff      	cmp	r3, #255	; 0xff
 8004980:	d90e      	bls.n	80049a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	22ff      	movs	r2, #255	; 0xff
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	b2da      	uxtb	r2, r3
 800498e:	8979      	ldrh	r1, [r7, #10]
 8004990:	4b52      	ldr	r3, [pc, #328]	; (8004adc <HAL_I2C_Mem_Read+0x22c>)
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fb17 	bl	8004fcc <I2C_TransferConfig>
 800499e:	e00f      	b.n	80049c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	8979      	ldrh	r1, [r7, #10]
 80049b2:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <HAL_I2C_Mem_Read+0x22c>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fb06 	bl	8004fcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	2200      	movs	r2, #0
 80049c8:	2104      	movs	r1, #4
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f956 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e07c      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d034      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x1d0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d130      	bne.n	8004a80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	2200      	movs	r2, #0
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f927 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e04d      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2bff      	cmp	r3, #255	; 0xff
 8004a40:	d90e      	bls.n	8004a60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	8979      	ldrh	r1, [r7, #10]
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fab7 	bl	8004fcc <I2C_TransferConfig>
 8004a5e:	e00f      	b.n	8004a80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	8979      	ldrh	r1, [r7, #10]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 faa6 	bl	8004fcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d19a      	bne.n	80049c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f974 	bl	8004d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e01a      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_I2C_Mem_Read+0x230>)
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	80002400 	.word	0x80002400
 8004ae0:	fe00e800 	.word	0xfe00e800

08004ae4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	460b      	mov	r3, r1
 8004af8:	813b      	strh	r3, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <I2C_RequestMemoryWrite+0xa4>)
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fa5d 	bl	8004fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	69b9      	ldr	r1, [r7, #24]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f8f0 	bl	8004cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e02c      	b.n	8004b80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d105      	bne.n	8004b38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2c:	893b      	ldrh	r3, [r7, #8]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
 8004b36:	e015      	b.n	8004b64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b38:	893b      	ldrh	r3, [r7, #8]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	69b9      	ldr	r1, [r7, #24]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f8d6 	bl	8004cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e012      	b.n	8004b80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5a:	893b      	ldrh	r3, [r7, #8]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f884 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	80002000 	.word	0x80002000

08004b8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	4608      	mov	r0, r1
 8004b96:	4611      	mov	r1, r2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	817b      	strh	r3, [r7, #10]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	813b      	strh	r3, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	8979      	ldrh	r1, [r7, #10]
 8004bac:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <I2C_RequestMemoryRead+0xa4>)
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fa0a 	bl	8004fcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	69b9      	ldr	r1, [r7, #24]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f89d 	bl	8004cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e02c      	b.n	8004c26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd2:	893b      	ldrh	r3, [r7, #8]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
 8004bdc:	e015      	b.n	8004c0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bde:	893b      	ldrh	r3, [r7, #8]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	69b9      	ldr	r1, [r7, #24]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f883 	bl	8004cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e012      	b.n	8004c26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f831 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	80002000 	.word	0x80002000

08004c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d103      	bne.n	8004c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d007      	beq.n	8004c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	619a      	str	r2, [r3, #24]
  }
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8c:	e022      	b.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d01e      	beq.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7ff f8d9 	bl	8003e4c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d113      	bne.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f043 0220 	orr.w	r2, r3, #32
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e00f      	b.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d0cd      	beq.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d08:	e02c      	b.n	8004d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f870 	bl	8004df4 <I2C_IsErrorOccurred>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e02a      	b.n	8004d74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d01e      	beq.n	8004d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7ff f891 	bl	8003e4c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d113      	bne.n	8004d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e007      	b.n	8004d74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d1cb      	bne.n	8004d0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d88:	e028      	b.n	8004ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f830 	bl	8004df4 <I2C_IsErrorOccurred>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e026      	b.n	8004dec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7ff f855 	bl	8003e4c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d113      	bne.n	8004ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e007      	b.n	8004dec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d1cf      	bne.n	8004d8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d075      	beq.n	8004f0c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2210      	movs	r2, #16
 8004e26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e28:	e056      	b.n	8004ed8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d052      	beq.n	8004ed8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7ff f80b 	bl	8003e4c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_IsErrorOccurred+0x54>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d147      	bne.n	8004ed8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6a:	d12e      	bne.n	8004eca <I2C_IsErrorOccurred+0xd6>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e72:	d02a      	beq.n	8004eca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d027      	beq.n	8004eca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e88:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e8a:	f7fe ffdf 	bl	8003e4c <HAL_GetTick>
 8004e8e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e90:	e01b      	b.n	8004eca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e92:	f7fe ffdb 	bl	8003e4c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b19      	cmp	r3, #25
 8004e9e:	d914      	bls.n	8004eca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d1dc      	bne.n	8004e92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d003      	beq.n	8004eee <I2C_IsErrorOccurred+0xfa>
 8004ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d09d      	beq.n	8004e2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2220      	movs	r2, #32
 8004efc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01c      	beq.n	8004fbc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fe56 	bl	8004c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <I2C_IsErrorOccurred+0x1d4>)
 8004f94:	400b      	ands	r3, r1
 8004f96:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3728      	adds	r7, #40	; 0x28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	fe00e800 	.word	0xfe00e800

08004fcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	817b      	strh	r3, [r7, #10]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fe4:	7a7b      	ldrb	r3, [r7, #9]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fec:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ffa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	0d5b      	lsrs	r3, r3, #21
 8005006:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <I2C_TransferConfig+0x60>)
 800500c:	430b      	orrs	r3, r1
 800500e:	43db      	mvns	r3, r3
 8005010:	ea02 0103 	and.w	r1, r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	03ff63ff 	.word	0x03ff63ff

08005030 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	d138      	bne.n	80050b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005050:	2302      	movs	r3, #2
 8005052:	e032      	b.n	80050ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005082:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e000      	b.n	80050ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050b8:	2302      	movs	r3, #2
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d139      	bne.n	8005150 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e033      	b.n	8005152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2224      	movs	r2, #36	; 0x24
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005118:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40007000 	.word	0x40007000

08005180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e291      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8087 	beq.w	80052b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a4:	4b96      	ldr	r3, [pc, #600]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d00c      	beq.n	80051ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051b0:	4b93      	ldr	r3, [pc, #588]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d112      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62>
 80051bc:	4b90      	ldr	r3, [pc, #576]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c8:	d10b      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ca:	4b8d      	ldr	r3, [pc, #564]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d06c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x130>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d168      	bne.n	80052b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e26b      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x7a>
 80051ec:	4b84      	ldr	r3, [pc, #528]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a83      	ldr	r2, [pc, #524]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e02e      	b.n	8005258 <HAL_RCC_OscConfig+0xd8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x9c>
 8005202:	4b7f      	ldr	r3, [pc, #508]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7e      	ldr	r2, [pc, #504]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7b      	ldr	r2, [pc, #492]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xd8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0xc0>
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b73      	ldr	r3, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a72      	ldr	r2, [pc, #456]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xd8>
 8005240:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6e      	ldr	r2, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6b      	ldr	r2, [pc, #428]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fe fdf4 	bl	8003e4c <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005268:	f7fe fdf0 	bl	8003e4c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e21f      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xe8>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe fde0 	bl	8003e4c <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005290:	f7fe fddc 	bl	8003e4c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e20b      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x110>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d069      	beq.n	8005392 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052be:	4b50      	ldr	r3, [pc, #320]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ca:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d11c      	bne.n	8005310 <HAL_RCC_OscConfig+0x190>
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCC_OscConfig+0x17a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e1df      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	493d      	ldr	r1, [pc, #244]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800530a:	4313      	orrs	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530e:	e040      	b.n	8005392 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005318:	4b39      	ldr	r3, [pc, #228]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a38      	ldr	r2, [pc, #224]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fe fd92 	bl	8003e4c <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532c:	f7fe fd8e 	bl	8003e4c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1bd      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b2d      	ldr	r3, [pc, #180]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4929      	ldr	r1, [pc, #164]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
 800535e:	e018      	b.n	8005392 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005360:	4b27      	ldr	r3, [pc, #156]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a26      	ldr	r2, [pc, #152]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fe fd6e 	bl	8003e4c <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005374:	f7fe fd6a 	bl	8003e4c <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e199      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005386:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d038      	beq.n	8005410 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d019      	beq.n	80053da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a6:	4b16      	ldr	r3, [pc, #88]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80053a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b2:	f7fe fd4b 	bl	8003e4c <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ba:	f7fe fd47 	bl	8003e4c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e176      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x23a>
 80053d8:	e01a      	b.n	8005410 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <HAL_RCC_OscConfig+0x280>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fe fd31 	bl	8003e4c <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ec:	e00a      	b.n	8005404 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe fd2d 	bl	8003e4c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d903      	bls.n	8005404 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e15c      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
 8005400:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005404:	4b91      	ldr	r3, [pc, #580]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1ee      	bne.n	80053ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80a4 	beq.w	8005566 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541e:	4b8b      	ldr	r3, [pc, #556]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	4a87      	ldr	r2, [pc, #540]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6413      	str	r3, [r2, #64]	; 0x40
 8005436:	4b85      	ldr	r3, [pc, #532]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005442:	2301      	movs	r3, #1
 8005444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005446:	4b82      	ldr	r3, [pc, #520]	; (8005650 <HAL_RCC_OscConfig+0x4d0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d118      	bne.n	8005484 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005452:	4b7f      	ldr	r3, [pc, #508]	; (8005650 <HAL_RCC_OscConfig+0x4d0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7e      	ldr	r2, [pc, #504]	; (8005650 <HAL_RCC_OscConfig+0x4d0>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fe fcf5 	bl	8003e4c <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fe fcf1 	bl	8003e4c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b64      	cmp	r3, #100	; 0x64
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e120      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005478:	4b75      	ldr	r3, [pc, #468]	; (8005650 <HAL_RCC_OscConfig+0x4d0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d106      	bne.n	800549a <HAL_RCC_OscConfig+0x31a>
 800548c:	4b6f      	ldr	r3, [pc, #444]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a6e      	ldr	r2, [pc, #440]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	e02d      	b.n	80054f6 <HAL_RCC_OscConfig+0x376>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x33c>
 80054a2:	4b6a      	ldr	r3, [pc, #424]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4a69      	ldr	r2, [pc, #420]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6713      	str	r3, [r2, #112]	; 0x70
 80054ae:	4b67      	ldr	r3, [pc, #412]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	4a66      	ldr	r2, [pc, #408]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ba:	e01c      	b.n	80054f6 <HAL_RCC_OscConfig+0x376>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d10c      	bne.n	80054de <HAL_RCC_OscConfig+0x35e>
 80054c4:	4b61      	ldr	r3, [pc, #388]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	4a60      	ldr	r2, [pc, #384]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6713      	str	r3, [r2, #112]	; 0x70
 80054d0:	4b5e      	ldr	r3, [pc, #376]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	4a5d      	ldr	r2, [pc, #372]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6713      	str	r3, [r2, #112]	; 0x70
 80054dc:	e00b      	b.n	80054f6 <HAL_RCC_OscConfig+0x376>
 80054de:	4b5b      	ldr	r3, [pc, #364]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	4a5a      	ldr	r2, [pc, #360]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ea:	4b58      	ldr	r3, [pc, #352]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4a57      	ldr	r2, [pc, #348]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80054f0:	f023 0304 	bic.w	r3, r3, #4
 80054f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d015      	beq.n	800552a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fe fca5 	bl	8003e4c <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fe fca1 	bl	8003e4c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0ce      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551c:	4b4b      	ldr	r3, [pc, #300]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ee      	beq.n	8005506 <HAL_RCC_OscConfig+0x386>
 8005528:	e014      	b.n	8005554 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552a:	f7fe fc8f 	bl	8003e4c <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fe fc8b 	bl	8003e4c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e0b8      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005548:	4b40      	ldr	r3, [pc, #256]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ee      	bne.n	8005532 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d105      	bne.n	8005566 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555a:	4b3c      	ldr	r3, [pc, #240]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a3b      	ldr	r2, [pc, #236]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80a4 	beq.w	80056b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b08      	cmp	r3, #8
 800557a:	d06b      	beq.n	8005654 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d149      	bne.n	8005618 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005584:	4b31      	ldr	r3, [pc, #196]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a30      	ldr	r2, [pc, #192]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800558a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800558e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fe fc5c 	bl	8003e4c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fe fc58 	bl	8003e4c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e087      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	3b01      	subs	r3, #1
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	4313      	orrs	r3, r2
 80055dc:	4a1b      	ldr	r2, [pc, #108]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80055de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e4:	4b19      	ldr	r3, [pc, #100]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 80055ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fe fc2c 	bl	8003e4c <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fe fc28 	bl	8003e4c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e057      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0x478>
 8005616:	e04f      	b.n	80056b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a0b      	ldr	r2, [pc, #44]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 800561e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fe fc12 	bl	8003e4c <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562c:	f7fe fc0e 	bl	8003e4c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e03d      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <HAL_RCC_OscConfig+0x4cc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x4ac>
 800564a:	e035      	b.n	80056b8 <HAL_RCC_OscConfig+0x538>
 800564c:	40023800 	.word	0x40023800
 8005650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <HAL_RCC_OscConfig+0x544>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d028      	beq.n	80056b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d121      	bne.n	80056b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d11a      	bne.n	80056b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800568a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800568c:	4293      	cmp	r3, r2
 800568e:	d111      	bne.n	80056b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	3b01      	subs	r3, #1
 800569e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0d0      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4b6a      	ldr	r3, [pc, #424]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d910      	bls.n	8005710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b67      	ldr	r3, [pc, #412]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	4965      	ldr	r1, [pc, #404]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b63      	ldr	r3, [pc, #396]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0b8      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d020      	beq.n	800575e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005728:	4b59      	ldr	r3, [pc, #356]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	4a58      	ldr	r2, [pc, #352]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800572e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a52      	ldr	r2, [pc, #328]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800574a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574c:	4b50      	ldr	r3, [pc, #320]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	494d      	ldr	r1, [pc, #308]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d040      	beq.n	80057ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d115      	bne.n	80057aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e07f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e073      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579a:	4b3d      	ldr	r3, [pc, #244]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06b      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057aa:	4b39      	ldr	r3, [pc, #228]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0203 	bic.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	4936      	ldr	r1, [pc, #216]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057bc:	f7fe fb46 	bl	8003e4c <HAL_GetTick>
 80057c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c2:	e00a      	b.n	80057da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c4:	f7fe fb42 	bl	8003e4c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e053      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057da:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 020c 	and.w	r2, r3, #12
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d1eb      	bne.n	80057c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ec:	4b27      	ldr	r3, [pc, #156]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d210      	bcs.n	800581c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	4922      	ldr	r1, [pc, #136]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_RCC_ClockConfig+0x1c4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e032      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4916      	ldr	r1, [pc, #88]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	490e      	ldr	r1, [pc, #56]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800585a:	f000 f821 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 800585e:	4602      	mov	r2, r0
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_ClockConfig+0x1c8>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	490a      	ldr	r1, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x1cc>)
 800586c:	5ccb      	ldrb	r3, [r1, r3]
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	4a09      	ldr	r2, [pc, #36]	; (8005898 <HAL_RCC_ClockConfig+0x1d0>)
 8005874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_RCC_ClockConfig+0x1d4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe faa2 	bl	8003dc4 <HAL_InitTick>

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40023c00 	.word	0x40023c00
 8005890:	40023800 	.word	0x40023800
 8005894:	0800c00c 	.word	0x0800c00c
 8005898:	200000b8 	.word	0x200000b8
 800589c:	200000bc 	.word	0x200000bc

080058a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a4:	b094      	sub	sp, #80	; 0x50
 80058a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	647b      	str	r3, [r7, #68]	; 0x44
 80058ac:	2300      	movs	r3, #0
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	2300      	movs	r3, #0
 80058b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058b8:	4b79      	ldr	r3, [pc, #484]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d00d      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x40>
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	f200 80e1 	bhi.w	8005a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d003      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0x3a>
 80058d2:	e0db      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b73      	ldr	r3, [pc, #460]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058d8:	e0db      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058da:	4b73      	ldr	r3, [pc, #460]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80058dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058de:	e0d8      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e0:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058ea:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d063      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b6a      	ldr	r3, [pc, #424]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	2200      	movs	r2, #0
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	633b      	str	r3, [r7, #48]	; 0x30
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
 800590e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005912:	4622      	mov	r2, r4
 8005914:	462b      	mov	r3, r5
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	0159      	lsls	r1, r3, #5
 8005920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005924:	0150      	lsls	r0, r2, #5
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4621      	mov	r1, r4
 800592c:	1a51      	subs	r1, r2, r1
 800592e:	6139      	str	r1, [r7, #16]
 8005930:	4629      	mov	r1, r5
 8005932:	eb63 0301 	sbc.w	r3, r3, r1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005944:	4659      	mov	r1, fp
 8005946:	018b      	lsls	r3, r1, #6
 8005948:	4651      	mov	r1, sl
 800594a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800594e:	4651      	mov	r1, sl
 8005950:	018a      	lsls	r2, r1, #6
 8005952:	4651      	mov	r1, sl
 8005954:	ebb2 0801 	subs.w	r8, r2, r1
 8005958:	4659      	mov	r1, fp
 800595a:	eb63 0901 	sbc.w	r9, r3, r1
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005972:	4690      	mov	r8, r2
 8005974:	4699      	mov	r9, r3
 8005976:	4623      	mov	r3, r4
 8005978:	eb18 0303 	adds.w	r3, r8, r3
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	462b      	mov	r3, r5
 8005980:	eb49 0303 	adc.w	r3, r9, r3
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005992:	4629      	mov	r1, r5
 8005994:	024b      	lsls	r3, r1, #9
 8005996:	4621      	mov	r1, r4
 8005998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800599c:	4621      	mov	r1, r4
 800599e:	024a      	lsls	r2, r1, #9
 80059a0:	4610      	mov	r0, r2
 80059a2:	4619      	mov	r1, r3
 80059a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a6:	2200      	movs	r2, #0
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b0:	f7fb f96a 	bl	8000c88 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4613      	mov	r3, r2
 80059ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059bc:	e058      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059be:	4b38      	ldr	r3, [pc, #224]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	2200      	movs	r2, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	4611      	mov	r1, r2
 80059ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	2300      	movs	r3, #0
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
 80059d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	f04f 0000 	mov.w	r0, #0
 80059e0:	f04f 0100 	mov.w	r1, #0
 80059e4:	0159      	lsls	r1, r3, #5
 80059e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ea:	0150      	lsls	r0, r2, #5
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4641      	mov	r1, r8
 80059f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80059f6:	4649      	mov	r1, r9
 80059f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a10:	ebb2 040a 	subs.w	r4, r2, sl
 8005a14:	eb63 050b 	sbc.w	r5, r3, fp
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	00eb      	lsls	r3, r5, #3
 8005a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a26:	00e2      	lsls	r2, r4, #3
 8005a28:	4614      	mov	r4, r2
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	4643      	mov	r3, r8
 8005a2e:	18e3      	adds	r3, r4, r3
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	464b      	mov	r3, r9
 8005a34:	eb45 0303 	adc.w	r3, r5, r3
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a46:	4629      	mov	r1, r5
 8005a48:	028b      	lsls	r3, r1, #10
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a50:	4621      	mov	r1, r4
 8005a52:	028a      	lsls	r2, r1, #10
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	61fa      	str	r2, [r7, #28]
 8005a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a64:	f7fb f910 	bl	8000c88 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a8a:	e002      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3750      	adds	r7, #80	; 0x50
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	007a1200 	.word	0x007a1200

08005aac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	200000b8 	.word	0x200000b8

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac8:	f7ff fff0 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0a9b      	lsrs	r3, r3, #10
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	0800c01c 	.word	0x0800c01c

08005aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005af0:	f7ff ffdc 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0b5b      	lsrs	r3, r3, #13
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	0800c01c 	.word	0x0800c01c

08005b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b3c:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a68      	ldr	r2, [pc, #416]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b46:	6093      	str	r3, [r2, #8]
 8005b48:	4b66      	ldr	r3, [pc, #408]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	4964      	ldr	r1, [pc, #400]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6e:	4b5d      	ldr	r3, [pc, #372]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	4959      	ldr	r1, [pc, #356]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d017      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005baa:	4b4e      	ldr	r3, [pc, #312]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	494a      	ldr	r1, [pc, #296]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc8:	d101      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005be6:	2301      	movs	r3, #1
 8005be8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 808b 	beq.w	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	4b3a      	ldr	r3, [pc, #232]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	4a39      	ldr	r2, [pc, #228]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6413      	str	r3, [r2, #64]	; 0x40
 8005c04:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c10:	4b35      	ldr	r3, [pc, #212]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a34      	ldr	r2, [pc, #208]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1c:	f7fe f916 	bl	8003e4c <HAL_GetTick>
 8005c20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c24:	f7fe f912 	bl	8003e4c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e357      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c42:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d035      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d02e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c60:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c82:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d114      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fe f8da 	bl	8003e4c <HAL_GetTick>
 8005c98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c9c:	f7fe f8d6 	bl	8003e4c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e319      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ee      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cca:	d111      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cd8:	4b04      	ldr	r3, [pc, #16]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cda:	400b      	ands	r3, r1
 8005cdc:	4901      	ldr	r1, [pc, #4]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40007000 	.word	0x40007000
 8005cec:	0ffffcff 	.word	0x0ffffcff
 8005cf0:	4baa      	ldr	r3, [pc, #680]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4aa9      	ldr	r2, [pc, #676]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cfa:	6093      	str	r3, [r2, #8]
 8005cfc:	4ba7      	ldr	r3, [pc, #668]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	49a4      	ldr	r1, [pc, #656]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d1a:	4ba0      	ldr	r3, [pc, #640]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d20:	4a9e      	ldr	r2, [pc, #632]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d2a:	4b9c      	ldr	r3, [pc, #624]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	4999      	ldr	r1, [pc, #612]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d48:	4b94      	ldr	r3, [pc, #592]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d56:	4991      	ldr	r1, [pc, #580]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d6a:	4b8c      	ldr	r3, [pc, #560]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d78:	4988      	ldr	r1, [pc, #544]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d8c:	4b83      	ldr	r3, [pc, #524]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d9a:	4980      	ldr	r1, [pc, #512]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dae:	4b7b      	ldr	r3, [pc, #492]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4977      	ldr	r1, [pc, #476]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dd0:	4b72      	ldr	r3, [pc, #456]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f023 0203 	bic.w	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	496f      	ldr	r1, [pc, #444]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005df2:	4b6a      	ldr	r3, [pc, #424]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df8:	f023 020c 	bic.w	r2, r3, #12
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e00:	4966      	ldr	r1, [pc, #408]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e14:	4b61      	ldr	r3, [pc, #388]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	495e      	ldr	r1, [pc, #376]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e36:	4b59      	ldr	r3, [pc, #356]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	4955      	ldr	r1, [pc, #340]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e58:	4b50      	ldr	r3, [pc, #320]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	494d      	ldr	r1, [pc, #308]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e7a:	4b48      	ldr	r3, [pc, #288]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e88:	4944      	ldr	r1, [pc, #272]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e9c:	4b3f      	ldr	r3, [pc, #252]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	493c      	ldr	r1, [pc, #240]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ebe:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	4933      	ldr	r1, [pc, #204]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ee0:	4b2e      	ldr	r3, [pc, #184]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eee:	492b      	ldr	r1, [pc, #172]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f02:	4b26      	ldr	r3, [pc, #152]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f10:	4922      	ldr	r1, [pc, #136]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f20:	d101      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f32:	2301      	movs	r3, #1
 8005f34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f42:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	4912      	ldr	r1, [pc, #72]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f74:	4909      	ldr	r1, [pc, #36]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d006      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80d9 	beq.w	8006142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a01      	ldr	r2, [pc, #4]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f9a:	e001      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa2:	f7fd ff53 	bl	8003e4c <HAL_GetTick>
 8005fa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005faa:	f7fd ff4f 	bl	8003e4c <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b64      	cmp	r3, #100	; 0x64
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e194      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fbc:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f0      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d021      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11d      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fdc:	4b64      	ldr	r3, [pc, #400]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fea:	4b61      	ldr	r3, [pc, #388]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff0:	0e1b      	lsrs	r3, r3, #24
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	019a      	lsls	r2, r3, #6
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	431a      	orrs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	061b      	lsls	r3, r3, #24
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	071b      	lsls	r3, r3, #28
 8006010:	4957      	ldr	r1, [pc, #348]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800602c:	d00a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006036:	2b00      	cmp	r3, #0
 8006038:	d02e      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006042:	d129      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006044:	4b4a      	ldr	r3, [pc, #296]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006052:	4b47      	ldr	r3, [pc, #284]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006058:	0f1b      	lsrs	r3, r3, #28
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	019a      	lsls	r2, r3, #6
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	061b      	lsls	r3, r3, #24
 8006072:	431a      	orrs	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	071b      	lsls	r3, r3, #28
 8006078:	493d      	ldr	r1, [pc, #244]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006080:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006086:	f023 021f 	bic.w	r2, r3, #31
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	3b01      	subs	r3, #1
 8006090:	4937      	ldr	r1, [pc, #220]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01d      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060a4:	4b32      	ldr	r3, [pc, #200]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060aa:	0e1b      	lsrs	r3, r3, #24
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060b2:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	0f1b      	lsrs	r3, r3, #28
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	019a      	lsls	r2, r3, #6
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	431a      	orrs	r2, r3
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	061b      	lsls	r3, r3, #24
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	071b      	lsls	r3, r3, #28
 80060d8:	4925      	ldr	r1, [pc, #148]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d011      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	019a      	lsls	r2, r3, #6
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	061b      	lsls	r3, r3, #24
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	071b      	lsls	r3, r3, #28
 8006108:	4919      	ldr	r1, [pc, #100]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006110:	4b17      	ldr	r3, [pc, #92]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a16      	ldr	r2, [pc, #88]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800611a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fd fe96 	bl	8003e4c <HAL_GetTick>
 8006120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006124:	f7fd fe92 	bl	8003e4c <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b64      	cmp	r3, #100	; 0x64
 8006130:	d901      	bls.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e0d7      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 80cd 	bne.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006156:	f7fd fe79 	bl	8003e4c <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800615e:	f7fd fe75 	bl	8003e4c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b64      	cmp	r3, #100	; 0x64
 800616a:	d903      	bls.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e0ba      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006170:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006174:	4b5e      	ldr	r3, [pc, #376]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800617c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006180:	d0ed      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02e      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d12a      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061aa:	4b51      	ldr	r3, [pc, #324]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061b8:	4b4d      	ldr	r3, [pc, #308]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	0f1b      	lsrs	r3, r3, #28
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	019a      	lsls	r2, r3, #6
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	431a      	orrs	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	071b      	lsls	r3, r3, #28
 80061de:	4944      	ldr	r1, [pc, #272]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061e6:	4b42      	ldr	r3, [pc, #264]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	3b01      	subs	r3, #1
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	493d      	ldr	r1, [pc, #244]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d022      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006214:	d11d      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006216:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621c:	0e1b      	lsrs	r3, r3, #24
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006224:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	0f1b      	lsrs	r3, r3, #28
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	019a      	lsls	r2, r3, #6
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	431a      	orrs	r2, r3
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	061b      	lsls	r3, r3, #24
 8006244:	431a      	orrs	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	071b      	lsls	r3, r3, #28
 800624a:	4929      	ldr	r1, [pc, #164]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d028      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	0e1b      	lsrs	r3, r3, #24
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	019a      	lsls	r2, r3, #6
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	431a      	orrs	r2, r3
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	071b      	lsls	r3, r3, #28
 8006292:	4917      	ldr	r1, [pc, #92]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800629a:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800629c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	4911      	ldr	r1, [pc, #68]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062b0:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a0e      	ldr	r2, [pc, #56]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fd fdc6 	bl	8003e4c <HAL_GetTick>
 80062c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062c4:	f7fd fdc2 	bl	8003e4c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e007      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e2:	d1ef      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40023800 	.word	0x40023800

080062f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e049      	b.n	800639a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd fb86 	bl	8003a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 fe20 	bl	8006f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d001      	beq.n	80063bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e054      	b.n	8006466 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a26      	ldr	r2, [pc, #152]	; (8006474 <HAL_TIM_Base_Start_IT+0xd0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d01d      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a22      	ldr	r2, [pc, #136]	; (8006478 <HAL_TIM_Base_Start_IT+0xd4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a21      	ldr	r2, [pc, #132]	; (800647c <HAL_TIM_Base_Start_IT+0xd8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <HAL_TIM_Base_Start_IT+0xdc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <HAL_TIM_Base_Start_IT+0xe0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <HAL_TIM_Base_Start_IT+0xe4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_TIM_Base_Start_IT+0xe8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d115      	bne.n	8006450 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	4b19      	ldr	r3, [pc, #100]	; (8006490 <HAL_TIM_Base_Start_IT+0xec>)
 800642c:	4013      	ands	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b06      	cmp	r3, #6
 8006434:	d015      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0xbe>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d011      	beq.n	8006462 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644e:	e008      	b.n	8006462 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e000      	b.n	8006464 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40001800 	.word	0x40001800
 8006490:	00010007 	.word	0x00010007

08006494 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10f      	bne.n	80064dc <HAL_TIM_Base_Stop_IT+0x48>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	f240 4344 	movw	r3, #1092	; 0x444
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_Base_Stop_IT+0x48>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e049      	b.n	8006598 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f841 	bl	80065a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f000 fd21 	bl	8006f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x24>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e03c      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d109      	bne.n	80065f2 <HAL_TIM_PWM_Start+0x3e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	bf14      	ite	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	2300      	moveq	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	e02f      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d109      	bne.n	800660c <HAL_TIM_PWM_Start+0x58>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	bf14      	ite	ne
 8006604:	2301      	movne	r3, #1
 8006606:	2300      	moveq	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	e022      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d109      	bne.n	8006626 <HAL_TIM_PWM_Start+0x72>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	bf14      	ite	ne
 800661e:	2301      	movne	r3, #1
 8006620:	2300      	moveq	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	e015      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b10      	cmp	r3, #16
 800662a:	d109      	bne.n	8006640 <HAL_TIM_PWM_Start+0x8c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e008      	b.n	8006652 <HAL_TIM_PWM_Start+0x9e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e092      	b.n	8006780 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0xb6>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	e023      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xc6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006678:	e01b      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0xd6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006688:	e013      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start+0xe6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006698:	e00b      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b10      	cmp	r3, #16
 800669e:	d104      	bne.n	80066aa <HAL_TIM_PWM_Start+0xf6>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a8:	e003      	b.n	80066b2 <HAL_TIM_PWM_Start+0xfe>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f888 	bl	80077d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a30      	ldr	r2, [pc, #192]	; (8006788 <HAL_TIM_PWM_Start+0x1d4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_TIM_PWM_Start+0x120>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2f      	ldr	r2, [pc, #188]	; (800678c <HAL_TIM_PWM_Start+0x1d8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d101      	bne.n	80066d8 <HAL_TIM_PWM_Start+0x124>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <HAL_TIM_PWM_Start+0x126>
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a25      	ldr	r2, [pc, #148]	; (8006788 <HAL_TIM_PWM_Start+0x1d4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d022      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006700:	d01d      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a22      	ldr	r2, [pc, #136]	; (8006790 <HAL_TIM_PWM_Start+0x1dc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d018      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a20      	ldr	r2, [pc, #128]	; (8006794 <HAL_TIM_PWM_Start+0x1e0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <HAL_TIM_PWM_Start+0x1e4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00e      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a19      	ldr	r2, [pc, #100]	; (800678c <HAL_TIM_PWM_Start+0x1d8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1b      	ldr	r2, [pc, #108]	; (800679c <HAL_TIM_PWM_Start+0x1e8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_TIM_PWM_Start+0x18a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <HAL_TIM_PWM_Start+0x1ec>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d115      	bne.n	800676a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	4b17      	ldr	r3, [pc, #92]	; (80067a4 <HAL_TIM_PWM_Start+0x1f0>)
 8006746:	4013      	ands	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b06      	cmp	r3, #6
 800674e:	d015      	beq.n	800677c <HAL_TIM_PWM_Start+0x1c8>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d011      	beq.n	800677c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0201 	orr.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006768:	e008      	b.n	800677c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e000      	b.n	800677e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00
 800679c:	40014000 	.word	0x40014000
 80067a0:	40001800 	.word	0x40001800
 80067a4:	00010007 	.word	0x00010007

080067a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 f808 	bl	80077d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <HAL_TIM_PWM_Stop+0xf8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIM_PWM_Stop+0x2c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a35      	ldr	r2, [pc, #212]	; (80068a4 <HAL_TIM_PWM_Stop+0xfc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d101      	bne.n	80067d8 <HAL_TIM_PWM_Stop+0x30>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <HAL_TIM_PWM_Stop+0x32>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d017      	beq.n	800680e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10f      	bne.n	800680e <HAL_TIM_PWM_Stop+0x66>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	f240 4344 	movw	r3, #1092	; 0x444
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <HAL_TIM_PWM_Stop+0x66>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800680c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	f241 1311 	movw	r3, #4369	; 0x1111
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <HAL_TIM_PWM_Stop+0x96>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6a1a      	ldr	r2, [r3, #32]
 8006824:	f240 4344 	movw	r3, #1092	; 0x444
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d107      	bne.n	800683e <HAL_TIM_PWM_Stop+0x96>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0201 	bic.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Stop+0xa6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800684c:	e023      	b.n	8006896 <HAL_TIM_PWM_Stop+0xee>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Stop+0xb6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800685c:	e01b      	b.n	8006896 <HAL_TIM_PWM_Stop+0xee>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Stop+0xc6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800686c:	e013      	b.n	8006896 <HAL_TIM_PWM_Stop+0xee>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b0c      	cmp	r3, #12
 8006872:	d104      	bne.n	800687e <HAL_TIM_PWM_Stop+0xd6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800687c:	e00b      	b.n	8006896 <HAL_TIM_PWM_Stop+0xee>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b10      	cmp	r3, #16
 8006882:	d104      	bne.n	800688e <HAL_TIM_PWM_Stop+0xe6>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800688c:	e003      	b.n	8006896 <HAL_TIM_PWM_Stop+0xee>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40010400 	.word	0x40010400

080068a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d122      	bne.n	8006904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d11b      	bne.n	8006904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0202 	mvn.w	r2, #2
 80068d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb26 	bl	8006f3c <HAL_TIM_IC_CaptureCallback>
 80068f0:	e005      	b.n	80068fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb18 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb29 	bl	8006f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d122      	bne.n	8006958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d11b      	bne.n	8006958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0204 	mvn.w	r2, #4
 8006928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fafc 	bl	8006f3c <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 faee 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 faff 	bl	8006f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b08      	cmp	r3, #8
 8006964:	d122      	bne.n	80069ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d11b      	bne.n	80069ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0208 	mvn.w	r2, #8
 800697c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2204      	movs	r2, #4
 8006982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fad2 	bl	8006f3c <HAL_TIM_IC_CaptureCallback>
 8006998:	e005      	b.n	80069a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fac4 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fad5 	bl	8006f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d122      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d11b      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0210 	mvn.w	r2, #16
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2208      	movs	r2, #8
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 faa8 	bl	8006f3c <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa9a 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 faab 	bl	8006f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d10e      	bne.n	8006a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d107      	bne.n	8006a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0201 	mvn.w	r2, #1
 8006a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fc fb0c 	bl	8003044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d10e      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d107      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 ff7a 	bl	800794c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a66:	d10e      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d107      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 ff6d 	bl	8007960 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d10e      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa59 	bl	8006f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d10e      	bne.n	8006ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d107      	bne.n	8006ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f06f 0220 	mvn.w	r2, #32
 8006ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 ff2d 	bl	8007938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0ff      	b.n	8006d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b14      	cmp	r3, #20
 8006b12:	f200 80f0 	bhi.w	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b71 	.word	0x08006b71
 8006b20:	08006cf7 	.word	0x08006cf7
 8006b24:	08006cf7 	.word	0x08006cf7
 8006b28:	08006cf7 	.word	0x08006cf7
 8006b2c:	08006bb1 	.word	0x08006bb1
 8006b30:	08006cf7 	.word	0x08006cf7
 8006b34:	08006cf7 	.word	0x08006cf7
 8006b38:	08006cf7 	.word	0x08006cf7
 8006b3c:	08006bf3 	.word	0x08006bf3
 8006b40:	08006cf7 	.word	0x08006cf7
 8006b44:	08006cf7 	.word	0x08006cf7
 8006b48:	08006cf7 	.word	0x08006cf7
 8006b4c:	08006c33 	.word	0x08006c33
 8006b50:	08006cf7 	.word	0x08006cf7
 8006b54:	08006cf7 	.word	0x08006cf7
 8006b58:	08006cf7 	.word	0x08006cf7
 8006b5c:	08006c75 	.word	0x08006c75
 8006b60:	08006cf7 	.word	0x08006cf7
 8006b64:	08006cf7 	.word	0x08006cf7
 8006b68:	08006cf7 	.word	0x08006cf7
 8006b6c:	08006cb5 	.word	0x08006cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fa9e 	bl	80070b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0208 	orr.w	r2, r2, #8
 8006b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6999      	ldr	r1, [r3, #24]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	619a      	str	r2, [r3, #24]
      break;
 8006bae:	e0a5      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 faf0 	bl	800719c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6999      	ldr	r1, [r3, #24]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	021a      	lsls	r2, r3, #8
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	619a      	str	r2, [r3, #24]
      break;
 8006bf0:	e084      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fb47 	bl	800728c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0208 	orr.w	r2, r2, #8
 8006c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0204 	bic.w	r2, r2, #4
 8006c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69d9      	ldr	r1, [r3, #28]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	691a      	ldr	r2, [r3, #16]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	61da      	str	r2, [r3, #28]
      break;
 8006c30:	e064      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fb9d 	bl	8007378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69d9      	ldr	r1, [r3, #28]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	021a      	lsls	r2, r3, #8
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	61da      	str	r2, [r3, #28]
      break;
 8006c72:	e043      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fbd4 	bl	8007428 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0208 	orr.w	r2, r2, #8
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0204 	bic.w	r2, r2, #4
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cb2:	e023      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fc06 	bl	80074cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	021a      	lsls	r2, r3, #8
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cf4:	e002      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop

08006d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIM_ConfigClockSource+0x1c>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e0b4      	b.n	8006e96 <HAL_TIM_ConfigClockSource+0x186>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	4b56      	ldr	r3, [pc, #344]	; (8006ea0 <HAL_TIM_ConfigClockSource+0x190>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d03e      	beq.n	8006de4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6a:	f200 8087 	bhi.w	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	f000 8086 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x172>
 8006d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7a:	d87f      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d01a      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0xa6>
 8006d80:	2b70      	cmp	r3, #112	; 0x70
 8006d82:	d87b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d050      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x11a>
 8006d88:	2b60      	cmp	r3, #96	; 0x60
 8006d8a:	d877      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b50      	cmp	r3, #80	; 0x50
 8006d8e:	d03c      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0xfa>
 8006d90:	2b50      	cmp	r3, #80	; 0x50
 8006d92:	d873      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d058      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x13a>
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d86f      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d064      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	2b30      	cmp	r3, #48	; 0x30
 8006da2:	d86b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d060      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d867      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d05c      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d05a      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006db4:	e062      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6899      	ldr	r1, [r3, #8]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f000 fce3 	bl	8007790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	609a      	str	r2, [r3, #8]
      break;
 8006de2:	e04f      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6899      	ldr	r1, [r3, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f000 fccc 	bl	8007790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e06:	609a      	str	r2, [r3, #8]
      break;
 8006e08:	e03c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f000 fc40 	bl	800769c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2150      	movs	r1, #80	; 0x50
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fc99 	bl	800775a <TIM_ITRx_SetConfig>
      break;
 8006e28:	e02c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fc5f 	bl	80076fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2160      	movs	r1, #96	; 0x60
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fc89 	bl	800775a <TIM_ITRx_SetConfig>
      break;
 8006e48:	e01c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fc20 	bl	800769c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2140      	movs	r1, #64	; 0x40
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fc79 	bl	800775a <TIM_ITRx_SetConfig>
      break;
 8006e68:	e00c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f000 fc70 	bl	800775a <TIM_ITRx_SetConfig>
      break;
 8006e7a:	e003      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e000      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	fffeff88 	.word	0xfffeff88

08006ea4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_TIM_SlaveConfigSynchro+0x18>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e031      	b.n	8006f20 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fb50 	bl	8007574 <TIM_SlaveTimer_SetConfig>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e018      	b.n	8006f20 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006efc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f0c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a40      	ldr	r2, [pc, #256]	; (800708c <TIM_Base_SetConfig+0x114>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f96:	d00f      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3d      	ldr	r2, [pc, #244]	; (8007090 <TIM_Base_SetConfig+0x118>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3c      	ldr	r2, [pc, #240]	; (8007094 <TIM_Base_SetConfig+0x11c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a3b      	ldr	r2, [pc, #236]	; (8007098 <TIM_Base_SetConfig+0x120>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3a      	ldr	r2, [pc, #232]	; (800709c <TIM_Base_SetConfig+0x124>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	; (800708c <TIM_Base_SetConfig+0x114>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02b      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d027      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2c      	ldr	r2, [pc, #176]	; (8007090 <TIM_Base_SetConfig+0x118>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d023      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2b      	ldr	r2, [pc, #172]	; (8007094 <TIM_Base_SetConfig+0x11c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01f      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2a      	ldr	r2, [pc, #168]	; (8007098 <TIM_Base_SetConfig+0x120>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01b      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a29      	ldr	r2, [pc, #164]	; (800709c <TIM_Base_SetConfig+0x124>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d017      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <TIM_Base_SetConfig+0x128>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a27      	ldr	r2, [pc, #156]	; (80070a4 <TIM_Base_SetConfig+0x12c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00f      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a26      	ldr	r2, [pc, #152]	; (80070a8 <TIM_Base_SetConfig+0x130>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00b      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <TIM_Base_SetConfig+0x134>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a24      	ldr	r2, [pc, #144]	; (80070b0 <TIM_Base_SetConfig+0x138>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <TIM_Base_SetConfig+0x13c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d108      	bne.n	800703c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a0a      	ldr	r2, [pc, #40]	; (800708c <TIM_Base_SetConfig+0x114>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_Base_SetConfig+0xf8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <TIM_Base_SetConfig+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d103      	bne.n	8007078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	615a      	str	r2, [r3, #20]
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40010000 	.word	0x40010000
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40010400 	.word	0x40010400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	40014400 	.word	0x40014400
 80070a8:	40014800 	.word	0x40014800
 80070ac:	40001800 	.word	0x40001800
 80070b0:	40001c00 	.word	0x40001c00
 80070b4:	40002000 	.word	0x40002000

080070b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4b2b      	ldr	r3, [pc, #172]	; (8007190 <TIM_OC1_SetConfig+0xd8>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0302 	bic.w	r3, r3, #2
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <TIM_OC1_SetConfig+0xdc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC1_SetConfig+0x64>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a20      	ldr	r2, [pc, #128]	; (8007198 <TIM_OC1_SetConfig+0xe0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d10c      	bne.n	8007136 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0308 	bic.w	r3, r3, #8
 8007122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f023 0304 	bic.w	r3, r3, #4
 8007134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a16      	ldr	r2, [pc, #88]	; (8007194 <TIM_OC1_SetConfig+0xdc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_OC1_SetConfig+0x8e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a15      	ldr	r2, [pc, #84]	; (8007198 <TIM_OC1_SetConfig+0xe0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d111      	bne.n	800716a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800714c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	fffeff8f 	.word	0xfffeff8f
 8007194:	40010000 	.word	0x40010000
 8007198:	40010400 	.word	0x40010400

0800719c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f023 0210 	bic.w	r2, r3, #16
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <TIM_OC2_SetConfig+0xe4>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0320 	bic.w	r3, r3, #32
 80071e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a23      	ldr	r2, [pc, #140]	; (8007284 <TIM_OC2_SetConfig+0xe8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_OC2_SetConfig+0x68>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a22      	ldr	r2, [pc, #136]	; (8007288 <TIM_OC2_SetConfig+0xec>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d10d      	bne.n	8007220 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a18      	ldr	r2, [pc, #96]	; (8007284 <TIM_OC2_SetConfig+0xe8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_OC2_SetConfig+0x94>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a17      	ldr	r2, [pc, #92]	; (8007288 <TIM_OC2_SetConfig+0xec>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d113      	bne.n	8007258 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800723e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	feff8fff 	.word	0xfeff8fff
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4b2d      	ldr	r3, [pc, #180]	; (800736c <TIM_OC3_SetConfig+0xe0>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a22      	ldr	r2, [pc, #136]	; (8007370 <TIM_OC3_SetConfig+0xe4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d003      	beq.n	80072f2 <TIM_OC3_SetConfig+0x66>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a21      	ldr	r2, [pc, #132]	; (8007374 <TIM_OC3_SetConfig+0xe8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10d      	bne.n	800730e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800730c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a17      	ldr	r2, [pc, #92]	; (8007370 <TIM_OC3_SetConfig+0xe4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d003      	beq.n	800731e <TIM_OC3_SetConfig+0x92>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a16      	ldr	r2, [pc, #88]	; (8007374 <TIM_OC3_SetConfig+0xe8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d113      	bne.n	8007346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800732c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	621a      	str	r2, [r3, #32]
}
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	fffeff8f 	.word	0xfffeff8f
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400

08007378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4b1e      	ldr	r3, [pc, #120]	; (800741c <TIM_OC4_SetConfig+0xa4>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	031b      	lsls	r3, r3, #12
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a13      	ldr	r2, [pc, #76]	; (8007420 <TIM_OC4_SetConfig+0xa8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC4_SetConfig+0x68>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a12      	ldr	r2, [pc, #72]	; (8007424 <TIM_OC4_SetConfig+0xac>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d109      	bne.n	80073f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	019b      	lsls	r3, r3, #6
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	feff8fff 	.word	0xfeff8fff
 8007420:	40010000 	.word	0x40010000
 8007424:	40010400 	.word	0x40010400

08007428 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <TIM_OC5_SetConfig+0x98>)
 8007454:	4013      	ands	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <TIM_OC5_SetConfig+0x9c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d003      	beq.n	8007486 <TIM_OC5_SetConfig+0x5e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <TIM_OC5_SetConfig+0xa0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d109      	bne.n	800749a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	621a      	str	r2, [r3, #32]
}
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	fffeff8f 	.word	0xfffeff8f
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40010400 	.word	0x40010400

080074cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <TIM_OC6_SetConfig+0x9c>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800750e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	051b      	lsls	r3, r3, #20
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a13      	ldr	r2, [pc, #76]	; (800756c <TIM_OC6_SetConfig+0xa0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_OC6_SetConfig+0x60>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a12      	ldr	r2, [pc, #72]	; (8007570 <TIM_OC6_SetConfig+0xa4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d109      	bne.n	8007540 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	029b      	lsls	r3, r3, #10
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	feff8fff 	.word	0xfeff8fff
 800756c:	40010000 	.word	0x40010000
 8007570:	40010400 	.word	0x40010400

08007574 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007590:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4b3e      	ldr	r3, [pc, #248]	; (8007698 <TIM_SlaveTimer_SetConfig+0x124>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2b70      	cmp	r3, #112	; 0x70
 80075bc:	d01a      	beq.n	80075f4 <TIM_SlaveTimer_SetConfig+0x80>
 80075be:	2b70      	cmp	r3, #112	; 0x70
 80075c0:	d860      	bhi.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
 80075c2:	2b60      	cmp	r3, #96	; 0x60
 80075c4:	d054      	beq.n	8007670 <TIM_SlaveTimer_SetConfig+0xfc>
 80075c6:	2b60      	cmp	r3, #96	; 0x60
 80075c8:	d85c      	bhi.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
 80075ca:	2b50      	cmp	r3, #80	; 0x50
 80075cc:	d046      	beq.n	800765c <TIM_SlaveTimer_SetConfig+0xe8>
 80075ce:	2b50      	cmp	r3, #80	; 0x50
 80075d0:	d858      	bhi.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d019      	beq.n	800760a <TIM_SlaveTimer_SetConfig+0x96>
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d854      	bhi.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
 80075da:	2b30      	cmp	r3, #48	; 0x30
 80075dc:	d055      	beq.n	800768a <TIM_SlaveTimer_SetConfig+0x116>
 80075de:	2b30      	cmp	r3, #48	; 0x30
 80075e0:	d850      	bhi.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d051      	beq.n	800768a <TIM_SlaveTimer_SetConfig+0x116>
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d84c      	bhi.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d04d      	beq.n	800768a <TIM_SlaveTimer_SetConfig+0x116>
 80075ee:	2b10      	cmp	r3, #16
 80075f0:	d04b      	beq.n	800768a <TIM_SlaveTimer_SetConfig+0x116>
 80075f2:	e047      	b.n	8007684 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	68d9      	ldr	r1, [r3, #12]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f000 f8c4 	bl	8007790 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007608:	e040      	b.n	800768c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b05      	cmp	r3, #5
 8007610:	d101      	bne.n	8007616 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e03b      	b.n	800768e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0201 	bic.w	r2, r2, #1
 800762c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800763c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	621a      	str	r2, [r3, #32]
      break;
 800765a:	e017      	b.n	800768c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6899      	ldr	r1, [r3, #8]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	461a      	mov	r2, r3
 800766a:	f000 f817 	bl	800769c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800766e:	e00d      	b.n	800768c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	6899      	ldr	r1, [r3, #8]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	461a      	mov	r2, r3
 800767e:	f000 f83c 	bl	80076fa <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007682:	e003      	b.n	800768c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	e000      	b.n	800768c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800768a:	bf00      	nop
  }

  return status;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	fffefff8 	.word	0xfffefff8

0800769c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f023 0201 	bic.w	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f023 030a 	bic.w	r3, r3, #10
 80076d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	621a      	str	r2, [r3, #32]
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b087      	sub	sp, #28
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f023 0210 	bic.w	r2, r3, #16
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	031b      	lsls	r3, r3, #12
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007736:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	f043 0307 	orr.w	r3, r3, #7
 800777c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	609a      	str	r2, [r3, #8]
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	021a      	lsls	r2, r3, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	609a      	str	r2, [r3, #8]
}
 80077c4:	bf00      	nop
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	2201      	movs	r2, #1
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	401a      	ands	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	fa01 f303 	lsl.w	r3, r1, r3
 8007808:	431a      	orrs	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007830:	2302      	movs	r3, #2
 8007832:	e06d      	b.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a30      	ldr	r2, [pc, #192]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a2f      	ldr	r2, [pc, #188]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d108      	bne.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800786e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007880:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a20      	ldr	r2, [pc, #128]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d022      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a6:	d01d      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d018      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d013      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1a      	ldr	r2, [pc, #104]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00e      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d009      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a15      	ldr	r2, [pc, #84]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d10c      	bne.n	80078fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	40010000 	.word	0x40010000
 8007920:	40010400 	.word	0x40010400
 8007924:	40000400 	.word	0x40000400
 8007928:	40000800 	.word	0x40000800
 800792c:	40000c00 	.word	0x40000c00
 8007930:	40014000 	.word	0x40014000
 8007934:	40001800 	.word	0x40001800

08007938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e040      	b.n	8007a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fc f976 	bl	8003c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2224      	movs	r2, #36	; 0x24
 80079a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fbf8 	bl	80081a8 <UART_SetConfig>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e022      	b.n	8007a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fe50 	bl	8008670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fed7 	bl	80087b4 <UART_CheckIdleState>
 8007a06:	4603      	mov	r3, r0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	f040 8081 	bne.w	8007b2c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_UART_Transmit+0x26>
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e079      	b.n	8007b2e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_UART_Transmit+0x38>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e072      	b.n	8007b2e <HAL_UART_Transmit+0x11e>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2221      	movs	r2, #33	; 0x21
 8007a5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a5e:	f7fc f9f5 	bl	8003e4c <HAL_GetTick>
 8007a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7c:	d108      	bne.n	8007a90 <HAL_UART_Transmit+0x80>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d104      	bne.n	8007a90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	e003      	b.n	8007a98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007aa0:	e02c      	b.n	8007afc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2180      	movs	r1, #128	; 0x80
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 feb4 	bl	800881a <UART_WaitOnFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e038      	b.n	8007b2e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10b      	bne.n	8007ada <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ad0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	61bb      	str	r3, [r7, #24]
 8007ad8:	e007      	b.n	8007aea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1cc      	bne.n	8007aa2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2140      	movs	r1, #64	; 0x40
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fe81 	bl	800881a <UART_WaitOnFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e005      	b.n	8007b2e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e000      	b.n	8007b2e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007b2c:	2302      	movs	r3, #2
  }
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3720      	adds	r7, #32
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b08a      	sub	sp, #40	; 0x28
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	4613      	mov	r3, r2
 8007b42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d13d      	bne.n	8007bc8 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_UART_Receive_IT+0x22>
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e036      	b.n	8007bca <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_UART_Receive_IT+0x34>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e02f      	b.n	8007bca <HAL_UART_Receive_IT+0x94>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d018      	beq.n	8007bb8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	613b      	str	r3, [r7, #16]
   return(result);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	623b      	str	r3, [r7, #32]
 8007ba6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	69f9      	ldr	r1, [r7, #28]
 8007baa:	6a3a      	ldr	r2, [r7, #32]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e6      	bne.n	8007b86 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fef0 	bl	80089a4 <UART_Start_Receive_IT>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	e000      	b.n	8007bca <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3728      	adds	r7, #40	; 0x28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b0ba      	sub	sp, #232	; 0xe8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007bfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c02:	4013      	ands	r3, r2
 8007c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d115      	bne.n	8007c3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00f      	beq.n	8007c3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d009      	beq.n	8007c3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 828f 	beq.w	8008150 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
      }
      return;
 8007c3a:	e289      	b.n	8008150 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8117 	beq.w	8007e74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c56:	4b85      	ldr	r3, [pc, #532]	; (8007e6c <HAL_UART_IRQHandler+0x298>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 810a 	beq.w	8007e74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d011      	beq.n	8007c90 <HAL_UART_IRQHandler+0xbc>
 8007c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c86:	f043 0201 	orr.w	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d011      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xec>
 8007c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2202      	movs	r2, #2
 8007cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb6:	f043 0204 	orr.w	r2, r3, #4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d011      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x11c>
 8007ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce6:	f043 0202 	orr.w	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d017      	beq.n	8007d2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d105      	bne.n	8007d14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d22:	f043 0208 	orr.w	r2, r3, #8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <HAL_UART_IRQHandler+0x18a>
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00c      	beq.n	8007d5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d54:	f043 0220 	orr.w	r2, r3, #32
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 81f5 	beq.w	8008154 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b40      	cmp	r3, #64	; 0x40
 8007da8:	d005      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d04f      	beq.n	8007e56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 febe 	bl	8008b38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b40      	cmp	r3, #64	; 0x40
 8007dc8:	d141      	bne.n	8007e4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007df6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1d9      	bne.n	8007dca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d013      	beq.n	8007e46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e22:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <HAL_UART_IRQHandler+0x29c>)
 8007e24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fc f99b 	bl	8004166 <HAL_DMA_Abort_IT>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d017      	beq.n	8007e66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e44:	e00f      	b.n	8007e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f998 	bl	800817c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4c:	e00b      	b.n	8007e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f994 	bl	800817c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	e007      	b.n	8007e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f990 	bl	800817c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007e64:	e176      	b.n	8008154 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e66:	bf00      	nop
    return;
 8007e68:	e174      	b.n	8008154 <HAL_UART_IRQHandler+0x580>
 8007e6a:	bf00      	nop
 8007e6c:	04000120 	.word	0x04000120
 8007e70:	08008bff 	.word	0x08008bff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f040 8144 	bne.w	8008106 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 813d 	beq.w	8008106 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8136 	beq.w	8008106 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	f040 80b2 	bne.w	8008016 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ebe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8148 	beq.w	8008158 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	f080 8140 	bcs.w	8008158 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eec:	f000 8085 	beq.w	8007ffa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1da      	bne.n	8007ef0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e1      	bne.n	8007f3a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e3      	bne.n	8007f76 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e4      	bne.n	8007fba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc f846 	bl	8004086 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008006:	b29b      	uxth	r3, r3
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	b29b      	uxth	r3, r3
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f8be 	bl	8008190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008014:	e0a0      	b.n	8008158 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008022:	b29b      	uxth	r3, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008030:	b29b      	uxth	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8092 	beq.w	800815c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 808d 	beq.w	800815c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008064:	647b      	str	r3, [r7, #68]	; 0x44
 8008066:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800806a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e4      	bne.n	8008042 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3308      	adds	r3, #8
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	623b      	str	r3, [r7, #32]
   return(result);
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3308      	adds	r3, #8
 8008098:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800809c:	633a      	str	r2, [r7, #48]	; 0x30
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e3      	bne.n	8008078 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	69b9      	ldr	r1, [r7, #24]
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	617b      	str	r3, [r7, #20]
   return(result);
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f846 	bl	8008190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008104:	e02a      	b.n	800815c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00e      	beq.n	8008130 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01c      	beq.n	8008160 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
    }
    return;
 800812e:	e017      	b.n	8008160 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d012      	beq.n	8008162 <HAL_UART_IRQHandler+0x58e>
 800813c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fd6e 	bl	8008c2a <UART_EndTransmit_IT>
    return;
 800814e:	e008      	b.n	8008162 <HAL_UART_IRQHandler+0x58e>
      return;
 8008150:	bf00      	nop
 8008152:	e006      	b.n	8008162 <HAL_UART_IRQHandler+0x58e>
    return;
 8008154:	bf00      	nop
 8008156:	e004      	b.n	8008162 <HAL_UART_IRQHandler+0x58e>
      return;
 8008158:	bf00      	nop
 800815a:	e002      	b.n	8008162 <HAL_UART_IRQHandler+0x58e>
      return;
 800815c:	bf00      	nop
 800815e:	e000      	b.n	8008162 <HAL_UART_IRQHandler+0x58e>
    return;
 8008160:	bf00      	nop
  }

}
 8008162:	37e8      	adds	r7, #232	; 0xe8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4ba6      	ldr	r3, [pc, #664]	; (800846c <UART_SetConfig+0x2c4>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	430b      	orrs	r3, r1
 80081de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	430a      	orrs	r2, r1
 8008218:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a94      	ldr	r2, [pc, #592]	; (8008470 <UART_SetConfig+0x2c8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d120      	bne.n	8008266 <UART_SetConfig+0xbe>
 8008224:	4b93      	ldr	r3, [pc, #588]	; (8008474 <UART_SetConfig+0x2cc>)
 8008226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b03      	cmp	r3, #3
 8008230:	d816      	bhi.n	8008260 <UART_SetConfig+0xb8>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <UART_SetConfig+0x90>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008249 	.word	0x08008249
 800823c:	08008255 	.word	0x08008255
 8008240:	0800824f 	.word	0x0800824f
 8008244:	0800825b 	.word	0x0800825b
 8008248:	2301      	movs	r3, #1
 800824a:	77fb      	strb	r3, [r7, #31]
 800824c:	e150      	b.n	80084f0 <UART_SetConfig+0x348>
 800824e:	2302      	movs	r3, #2
 8008250:	77fb      	strb	r3, [r7, #31]
 8008252:	e14d      	b.n	80084f0 <UART_SetConfig+0x348>
 8008254:	2304      	movs	r3, #4
 8008256:	77fb      	strb	r3, [r7, #31]
 8008258:	e14a      	b.n	80084f0 <UART_SetConfig+0x348>
 800825a:	2308      	movs	r3, #8
 800825c:	77fb      	strb	r3, [r7, #31]
 800825e:	e147      	b.n	80084f0 <UART_SetConfig+0x348>
 8008260:	2310      	movs	r3, #16
 8008262:	77fb      	strb	r3, [r7, #31]
 8008264:	e144      	b.n	80084f0 <UART_SetConfig+0x348>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a83      	ldr	r2, [pc, #524]	; (8008478 <UART_SetConfig+0x2d0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d132      	bne.n	80082d6 <UART_SetConfig+0x12e>
 8008270:	4b80      	ldr	r3, [pc, #512]	; (8008474 <UART_SetConfig+0x2cc>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008276:	f003 030c 	and.w	r3, r3, #12
 800827a:	2b0c      	cmp	r3, #12
 800827c:	d828      	bhi.n	80082d0 <UART_SetConfig+0x128>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <UART_SetConfig+0xdc>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082b9 	.word	0x080082b9
 8008288:	080082d1 	.word	0x080082d1
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082c5 	.word	0x080082c5
 8008298:	080082d1 	.word	0x080082d1
 800829c:	080082d1 	.word	0x080082d1
 80082a0:	080082d1 	.word	0x080082d1
 80082a4:	080082bf 	.word	0x080082bf
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082d1 	.word	0x080082d1
 80082b4:	080082cb 	.word	0x080082cb
 80082b8:	2300      	movs	r3, #0
 80082ba:	77fb      	strb	r3, [r7, #31]
 80082bc:	e118      	b.n	80084f0 <UART_SetConfig+0x348>
 80082be:	2302      	movs	r3, #2
 80082c0:	77fb      	strb	r3, [r7, #31]
 80082c2:	e115      	b.n	80084f0 <UART_SetConfig+0x348>
 80082c4:	2304      	movs	r3, #4
 80082c6:	77fb      	strb	r3, [r7, #31]
 80082c8:	e112      	b.n	80084f0 <UART_SetConfig+0x348>
 80082ca:	2308      	movs	r3, #8
 80082cc:	77fb      	strb	r3, [r7, #31]
 80082ce:	e10f      	b.n	80084f0 <UART_SetConfig+0x348>
 80082d0:	2310      	movs	r3, #16
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e10c      	b.n	80084f0 <UART_SetConfig+0x348>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a68      	ldr	r2, [pc, #416]	; (800847c <UART_SetConfig+0x2d4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d120      	bne.n	8008322 <UART_SetConfig+0x17a>
 80082e0:	4b64      	ldr	r3, [pc, #400]	; (8008474 <UART_SetConfig+0x2cc>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082ea:	2b30      	cmp	r3, #48	; 0x30
 80082ec:	d013      	beq.n	8008316 <UART_SetConfig+0x16e>
 80082ee:	2b30      	cmp	r3, #48	; 0x30
 80082f0:	d814      	bhi.n	800831c <UART_SetConfig+0x174>
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d009      	beq.n	800830a <UART_SetConfig+0x162>
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d810      	bhi.n	800831c <UART_SetConfig+0x174>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <UART_SetConfig+0x15c>
 80082fe:	2b10      	cmp	r3, #16
 8008300:	d006      	beq.n	8008310 <UART_SetConfig+0x168>
 8008302:	e00b      	b.n	800831c <UART_SetConfig+0x174>
 8008304:	2300      	movs	r3, #0
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e0f2      	b.n	80084f0 <UART_SetConfig+0x348>
 800830a:	2302      	movs	r3, #2
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e0ef      	b.n	80084f0 <UART_SetConfig+0x348>
 8008310:	2304      	movs	r3, #4
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e0ec      	b.n	80084f0 <UART_SetConfig+0x348>
 8008316:	2308      	movs	r3, #8
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e0e9      	b.n	80084f0 <UART_SetConfig+0x348>
 800831c:	2310      	movs	r3, #16
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e0e6      	b.n	80084f0 <UART_SetConfig+0x348>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a56      	ldr	r2, [pc, #344]	; (8008480 <UART_SetConfig+0x2d8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d120      	bne.n	800836e <UART_SetConfig+0x1c6>
 800832c:	4b51      	ldr	r3, [pc, #324]	; (8008474 <UART_SetConfig+0x2cc>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008336:	2bc0      	cmp	r3, #192	; 0xc0
 8008338:	d013      	beq.n	8008362 <UART_SetConfig+0x1ba>
 800833a:	2bc0      	cmp	r3, #192	; 0xc0
 800833c:	d814      	bhi.n	8008368 <UART_SetConfig+0x1c0>
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d009      	beq.n	8008356 <UART_SetConfig+0x1ae>
 8008342:	2b80      	cmp	r3, #128	; 0x80
 8008344:	d810      	bhi.n	8008368 <UART_SetConfig+0x1c0>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <UART_SetConfig+0x1a8>
 800834a:	2b40      	cmp	r3, #64	; 0x40
 800834c:	d006      	beq.n	800835c <UART_SetConfig+0x1b4>
 800834e:	e00b      	b.n	8008368 <UART_SetConfig+0x1c0>
 8008350:	2300      	movs	r3, #0
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e0cc      	b.n	80084f0 <UART_SetConfig+0x348>
 8008356:	2302      	movs	r3, #2
 8008358:	77fb      	strb	r3, [r7, #31]
 800835a:	e0c9      	b.n	80084f0 <UART_SetConfig+0x348>
 800835c:	2304      	movs	r3, #4
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e0c6      	b.n	80084f0 <UART_SetConfig+0x348>
 8008362:	2308      	movs	r3, #8
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e0c3      	b.n	80084f0 <UART_SetConfig+0x348>
 8008368:	2310      	movs	r3, #16
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	e0c0      	b.n	80084f0 <UART_SetConfig+0x348>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a44      	ldr	r2, [pc, #272]	; (8008484 <UART_SetConfig+0x2dc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d125      	bne.n	80083c4 <UART_SetConfig+0x21c>
 8008378:	4b3e      	ldr	r3, [pc, #248]	; (8008474 <UART_SetConfig+0x2cc>)
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008386:	d017      	beq.n	80083b8 <UART_SetConfig+0x210>
 8008388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800838c:	d817      	bhi.n	80083be <UART_SetConfig+0x216>
 800838e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008392:	d00b      	beq.n	80083ac <UART_SetConfig+0x204>
 8008394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008398:	d811      	bhi.n	80083be <UART_SetConfig+0x216>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <UART_SetConfig+0x1fe>
 800839e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a2:	d006      	beq.n	80083b2 <UART_SetConfig+0x20a>
 80083a4:	e00b      	b.n	80083be <UART_SetConfig+0x216>
 80083a6:	2300      	movs	r3, #0
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	e0a1      	b.n	80084f0 <UART_SetConfig+0x348>
 80083ac:	2302      	movs	r3, #2
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	e09e      	b.n	80084f0 <UART_SetConfig+0x348>
 80083b2:	2304      	movs	r3, #4
 80083b4:	77fb      	strb	r3, [r7, #31]
 80083b6:	e09b      	b.n	80084f0 <UART_SetConfig+0x348>
 80083b8:	2308      	movs	r3, #8
 80083ba:	77fb      	strb	r3, [r7, #31]
 80083bc:	e098      	b.n	80084f0 <UART_SetConfig+0x348>
 80083be:	2310      	movs	r3, #16
 80083c0:	77fb      	strb	r3, [r7, #31]
 80083c2:	e095      	b.n	80084f0 <UART_SetConfig+0x348>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a2f      	ldr	r2, [pc, #188]	; (8008488 <UART_SetConfig+0x2e0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d125      	bne.n	800841a <UART_SetConfig+0x272>
 80083ce:	4b29      	ldr	r3, [pc, #164]	; (8008474 <UART_SetConfig+0x2cc>)
 80083d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083dc:	d017      	beq.n	800840e <UART_SetConfig+0x266>
 80083de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e2:	d817      	bhi.n	8008414 <UART_SetConfig+0x26c>
 80083e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e8:	d00b      	beq.n	8008402 <UART_SetConfig+0x25a>
 80083ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ee:	d811      	bhi.n	8008414 <UART_SetConfig+0x26c>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <UART_SetConfig+0x254>
 80083f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f8:	d006      	beq.n	8008408 <UART_SetConfig+0x260>
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x26c>
 80083fc:	2301      	movs	r3, #1
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e076      	b.n	80084f0 <UART_SetConfig+0x348>
 8008402:	2302      	movs	r3, #2
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e073      	b.n	80084f0 <UART_SetConfig+0x348>
 8008408:	2304      	movs	r3, #4
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e070      	b.n	80084f0 <UART_SetConfig+0x348>
 800840e:	2308      	movs	r3, #8
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e06d      	b.n	80084f0 <UART_SetConfig+0x348>
 8008414:	2310      	movs	r3, #16
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e06a      	b.n	80084f0 <UART_SetConfig+0x348>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a1b      	ldr	r2, [pc, #108]	; (800848c <UART_SetConfig+0x2e4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d138      	bne.n	8008496 <UART_SetConfig+0x2ee>
 8008424:	4b13      	ldr	r3, [pc, #76]	; (8008474 <UART_SetConfig+0x2cc>)
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800842e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008432:	d017      	beq.n	8008464 <UART_SetConfig+0x2bc>
 8008434:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008438:	d82a      	bhi.n	8008490 <UART_SetConfig+0x2e8>
 800843a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800843e:	d00b      	beq.n	8008458 <UART_SetConfig+0x2b0>
 8008440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008444:	d824      	bhi.n	8008490 <UART_SetConfig+0x2e8>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <UART_SetConfig+0x2aa>
 800844a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800844e:	d006      	beq.n	800845e <UART_SetConfig+0x2b6>
 8008450:	e01e      	b.n	8008490 <UART_SetConfig+0x2e8>
 8008452:	2300      	movs	r3, #0
 8008454:	77fb      	strb	r3, [r7, #31]
 8008456:	e04b      	b.n	80084f0 <UART_SetConfig+0x348>
 8008458:	2302      	movs	r3, #2
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e048      	b.n	80084f0 <UART_SetConfig+0x348>
 800845e:	2304      	movs	r3, #4
 8008460:	77fb      	strb	r3, [r7, #31]
 8008462:	e045      	b.n	80084f0 <UART_SetConfig+0x348>
 8008464:	2308      	movs	r3, #8
 8008466:	77fb      	strb	r3, [r7, #31]
 8008468:	e042      	b.n	80084f0 <UART_SetConfig+0x348>
 800846a:	bf00      	nop
 800846c:	efff69f3 	.word	0xefff69f3
 8008470:	40011000 	.word	0x40011000
 8008474:	40023800 	.word	0x40023800
 8008478:	40004400 	.word	0x40004400
 800847c:	40004800 	.word	0x40004800
 8008480:	40004c00 	.word	0x40004c00
 8008484:	40005000 	.word	0x40005000
 8008488:	40011400 	.word	0x40011400
 800848c:	40007800 	.word	0x40007800
 8008490:	2310      	movs	r3, #16
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e02c      	b.n	80084f0 <UART_SetConfig+0x348>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a72      	ldr	r2, [pc, #456]	; (8008664 <UART_SetConfig+0x4bc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d125      	bne.n	80084ec <UART_SetConfig+0x344>
 80084a0:	4b71      	ldr	r3, [pc, #452]	; (8008668 <UART_SetConfig+0x4c0>)
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084ae:	d017      	beq.n	80084e0 <UART_SetConfig+0x338>
 80084b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084b4:	d817      	bhi.n	80084e6 <UART_SetConfig+0x33e>
 80084b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ba:	d00b      	beq.n	80084d4 <UART_SetConfig+0x32c>
 80084bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c0:	d811      	bhi.n	80084e6 <UART_SetConfig+0x33e>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <UART_SetConfig+0x326>
 80084c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084ca:	d006      	beq.n	80084da <UART_SetConfig+0x332>
 80084cc:	e00b      	b.n	80084e6 <UART_SetConfig+0x33e>
 80084ce:	2300      	movs	r3, #0
 80084d0:	77fb      	strb	r3, [r7, #31]
 80084d2:	e00d      	b.n	80084f0 <UART_SetConfig+0x348>
 80084d4:	2302      	movs	r3, #2
 80084d6:	77fb      	strb	r3, [r7, #31]
 80084d8:	e00a      	b.n	80084f0 <UART_SetConfig+0x348>
 80084da:	2304      	movs	r3, #4
 80084dc:	77fb      	strb	r3, [r7, #31]
 80084de:	e007      	b.n	80084f0 <UART_SetConfig+0x348>
 80084e0:	2308      	movs	r3, #8
 80084e2:	77fb      	strb	r3, [r7, #31]
 80084e4:	e004      	b.n	80084f0 <UART_SetConfig+0x348>
 80084e6:	2310      	movs	r3, #16
 80084e8:	77fb      	strb	r3, [r7, #31]
 80084ea:	e001      	b.n	80084f0 <UART_SetConfig+0x348>
 80084ec:	2310      	movs	r3, #16
 80084ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f8:	d15b      	bne.n	80085b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80084fa:	7ffb      	ldrb	r3, [r7, #31]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d828      	bhi.n	8008552 <UART_SetConfig+0x3aa>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <UART_SetConfig+0x360>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	0800852d 	.word	0x0800852d
 800850c:	08008535 	.word	0x08008535
 8008510:	0800853d 	.word	0x0800853d
 8008514:	08008553 	.word	0x08008553
 8008518:	08008543 	.word	0x08008543
 800851c:	08008553 	.word	0x08008553
 8008520:	08008553 	.word	0x08008553
 8008524:	08008553 	.word	0x08008553
 8008528:	0800854b 	.word	0x0800854b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800852c:	f7fd faca 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8008530:	61b8      	str	r0, [r7, #24]
        break;
 8008532:	e013      	b.n	800855c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008534:	f7fd fada 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 8008538:	61b8      	str	r0, [r7, #24]
        break;
 800853a:	e00f      	b.n	800855c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800853c:	4b4b      	ldr	r3, [pc, #300]	; (800866c <UART_SetConfig+0x4c4>)
 800853e:	61bb      	str	r3, [r7, #24]
        break;
 8008540:	e00c      	b.n	800855c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008542:	f7fd f9ad 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8008546:	61b8      	str	r0, [r7, #24]
        break;
 8008548:	e008      	b.n	800855c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800854a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800854e:	61bb      	str	r3, [r7, #24]
        break;
 8008550:	e004      	b.n	800855c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	77bb      	strb	r3, [r7, #30]
        break;
 800855a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d074      	beq.n	800864c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	005a      	lsls	r2, r3, #1
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	441a      	add	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	fbb2 f3f3 	udiv	r3, r2, r3
 8008576:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b0f      	cmp	r3, #15
 800857c:	d916      	bls.n	80085ac <UART_SetConfig+0x404>
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008584:	d212      	bcs.n	80085ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f023 030f 	bic.w	r3, r3, #15
 800858e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	b29a      	uxth	r2, r3
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	4313      	orrs	r3, r2
 80085a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	89fa      	ldrh	r2, [r7, #14]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	e04f      	b.n	800864c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	77bb      	strb	r3, [r7, #30]
 80085b0:	e04c      	b.n	800864c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085b2:	7ffb      	ldrb	r3, [r7, #31]
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d828      	bhi.n	800860a <UART_SetConfig+0x462>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0x418>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	080085ed 	.word	0x080085ed
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	0800860b 	.word	0x0800860b
 80085d0:	080085fb 	.word	0x080085fb
 80085d4:	0800860b 	.word	0x0800860b
 80085d8:	0800860b 	.word	0x0800860b
 80085dc:	0800860b 	.word	0x0800860b
 80085e0:	08008603 	.word	0x08008603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e4:	f7fd fa6e 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 80085e8:	61b8      	str	r0, [r7, #24]
        break;
 80085ea:	e013      	b.n	8008614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7fd fa7e 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 80085f0:	61b8      	str	r0, [r7, #24]
        break;
 80085f2:	e00f      	b.n	8008614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f4:	4b1d      	ldr	r3, [pc, #116]	; (800866c <UART_SetConfig+0x4c4>)
 80085f6:	61bb      	str	r3, [r7, #24]
        break;
 80085f8:	e00c      	b.n	8008614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085fa:	f7fd f951 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 80085fe:	61b8      	str	r0, [r7, #24]
        break;
 8008600:	e008      	b.n	8008614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008606:	61bb      	str	r3, [r7, #24]
        break;
 8008608:	e004      	b.n	8008614 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	77bb      	strb	r3, [r7, #30]
        break;
 8008612:	bf00      	nop
    }

    if (pclk != 0U)
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d018      	beq.n	800864c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	085a      	lsrs	r2, r3, #1
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	441a      	add	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b0f      	cmp	r3, #15
 8008632:	d909      	bls.n	8008648 <UART_SetConfig+0x4a0>
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d205      	bcs.n	8008648 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60da      	str	r2, [r3, #12]
 8008646:	e001      	b.n	800864c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008658:	7fbb      	ldrb	r3, [r7, #30]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40007c00 	.word	0x40007c00
 8008668:	40023800 	.word	0x40023800
 800866c:	00f42400 	.word	0x00f42400

08008670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	f003 0310 	and.w	r3, r3, #16
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01a      	beq.n	8008786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800876e:	d10a      	bne.n	8008786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087c4:	f7fb fb42 	bl	8003e4c <HAL_GetTick>
 80087c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0308 	and.w	r3, r3, #8
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d10e      	bne.n	80087f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f817 	bl	800881a <UART_WaitOnFlagUntilTimeout>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e00d      	b.n	8008812 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b09c      	sub	sp, #112	; 0x70
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	603b      	str	r3, [r7, #0]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800882a:	e0a5      	b.n	8008978 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800882c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800882e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008832:	f000 80a1 	beq.w	8008978 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008836:	f7fb fb09 	bl	8003e4c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008842:	429a      	cmp	r2, r3
 8008844:	d302      	bcc.n	800884c <UART_WaitOnFlagUntilTimeout+0x32>
 8008846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008848:	2b00      	cmp	r3, #0
 800884a:	d13e      	bne.n	80088ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800885a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008860:	667b      	str	r3, [r7, #100]	; 0x64
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800886a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800886c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e6      	bne.n	800884c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3308      	adds	r3, #8
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	663b      	str	r3, [r7, #96]	; 0x60
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3308      	adds	r3, #8
 800889c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800889e:	64ba      	str	r2, [r7, #72]	; 0x48
 80088a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e5      	bne.n	800887e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e067      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d04f      	beq.n	8008978 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088e6:	d147      	bne.n	8008978 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
 8008912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e6      	bne.n	80088f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	613b      	str	r3, [r7, #16]
   return(result);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	66bb      	str	r3, [r7, #104]	; 0x68
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3308      	adds	r3, #8
 8008942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008944:	623a      	str	r2, [r7, #32]
 8008946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	6a3a      	ldr	r2, [r7, #32]
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	61bb      	str	r3, [r7, #24]
   return(result);
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e5      	bne.n	8008924 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2220      	movs	r2, #32
 8008962:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e010      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	69da      	ldr	r2, [r3, #28]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4013      	ands	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	bf0c      	ite	eq
 8008988:	2301      	moveq	r3, #1
 800898a:	2300      	movne	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	429a      	cmp	r2, r3
 8008994:	f43f af4a 	beq.w	800882c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3770      	adds	r7, #112	; 0x70
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b097      	sub	sp, #92	; 0x5c
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d6:	d10e      	bne.n	80089f6 <UART_Start_Receive_IT+0x52>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d105      	bne.n	80089ec <UART_Start_Receive_IT+0x48>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ea:	e02d      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	22ff      	movs	r2, #255	; 0xff
 80089f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089f4:	e028      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10d      	bne.n	8008a1a <UART_Start_Receive_IT+0x76>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <UART_Start_Receive_IT+0x6c>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a0e:	e01b      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	227f      	movs	r2, #127	; 0x7f
 8008a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a18:	e016      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a22:	d10d      	bne.n	8008a40 <UART_Start_Receive_IT+0x9c>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <UART_Start_Receive_IT+0x92>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	227f      	movs	r2, #127	; 0x7f
 8008a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a34:	e008      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	223f      	movs	r2, #63	; 0x3f
 8008a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a3e:	e003      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2222      	movs	r2, #34	; 0x22
 8008a54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a76:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e5      	bne.n	8008a56 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d107      	bne.n	8008aa4 <UART_Start_Receive_IT+0x100>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4a24      	ldr	r2, [pc, #144]	; (8008b30 <UART_Start_Receive_IT+0x18c>)
 8008aa0:	665a      	str	r2, [r3, #100]	; 0x64
 8008aa2:	e002      	b.n	8008aaa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <UART_Start_Receive_IT+0x190>)
 8008aa8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d019      	beq.n	8008aee <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ada:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e6      	bne.n	8008aba <UART_Start_Receive_IT+0x116>
 8008aec:	e018      	b.n	8008b20 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	613b      	str	r3, [r7, #16]
   return(result);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f043 0320 	orr.w	r3, r3, #32
 8008b02:	653b      	str	r3, [r7, #80]	; 0x50
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b0c:	623b      	str	r3, [r7, #32]
 8008b0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	69f9      	ldr	r1, [r7, #28]
 8008b12:	6a3a      	ldr	r2, [r7, #32]
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	375c      	adds	r7, #92	; 0x5c
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	08008ddb 	.word	0x08008ddb
 8008b34:	08008c7f 	.word	0x08008c7f

08008b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b095      	sub	sp, #84	; 0x54
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e6      	bne.n	8008b40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d118      	bne.n	8008be0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bcc:	61bb      	str	r3, [r7, #24]
 8008bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6979      	ldr	r1, [r7, #20]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008bf2:	bf00      	nop
 8008bf4:	3754      	adds	r7, #84	; 0x54
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff faad 	bl	800817c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b088      	sub	sp, #32
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	6979      	ldr	r1, [r7, #20]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e6      	bne.n	8008c32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff fa79 	bl	8008168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c76:	bf00      	nop
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b096      	sub	sp, #88	; 0x58
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c94:	2b22      	cmp	r3, #34	; 0x22
 8008c96:	f040 8094 	bne.w	8008dc2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ca4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008ca8:	b2d9      	uxtb	r1, r3
 8008caa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb4:	400a      	ands	r2, r1
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d177      	bne.n	8008dd2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d00:	647b      	str	r3, [r7, #68]	; 0x44
 8008d02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e6      	bne.n	8008ce2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	623b      	str	r3, [r7, #32]
   return(result);
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	f023 0301 	bic.w	r3, r3, #1
 8008d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d34:	633a      	str	r2, [r7, #48]	; 0x30
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e5      	bne.n	8008d14 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d12e      	bne.n	8008dba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0310 	bic.w	r3, r3, #16
 8008d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	69b9      	ldr	r1, [r7, #24]
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e6      	bne.n	8008d62 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d103      	bne.n	8008daa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2210      	movs	r2, #16
 8008da8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff f9ec 	bl	8008190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008db8:	e00b      	b.n	8008dd2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fa fa9c 	bl	80032f8 <HAL_UART_RxCpltCallback>
}
 8008dc0:	e007      	b.n	8008dd2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f042 0208 	orr.w	r2, r2, #8
 8008dd0:	619a      	str	r2, [r3, #24]
}
 8008dd2:	bf00      	nop
 8008dd4:	3758      	adds	r7, #88	; 0x58
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b096      	sub	sp, #88	; 0x58
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008de8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df0:	2b22      	cmp	r3, #34	; 0x22
 8008df2:	f040 8094 	bne.w	8008f1e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e04:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e06:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e0e:	4013      	ands	r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d177      	bne.n	8008f2e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e46:	e853 3f00 	ldrex	r3, [r3]
 8008e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e6      	bne.n	8008e3e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f023 0301 	bic.w	r3, r3, #1
 8008e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e5      	bne.n	8008e70 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d12e      	bne.n	8008f16 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f023 0310 	bic.w	r3, r3, #16
 8008ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	6979      	ldr	r1, [r7, #20]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e6      	bne.n	8008ebe <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	d103      	bne.n	8008f06 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2210      	movs	r2, #16
 8008f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff f93e 	bl	8008190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f14:	e00b      	b.n	8008f2e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fa f9ee 	bl	80032f8 <HAL_UART_RxCpltCallback>
}
 8008f1c:	e007      	b.n	8008f2e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	699a      	ldr	r2, [r3, #24]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0208 	orr.w	r2, r2, #8
 8008f2c:	619a      	str	r2, [r3, #24]
}
 8008f2e:	bf00      	nop
 8008f30:	3758      	adds	r7, #88	; 0x58
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <__errno>:
 8008f38:	4b01      	ldr	r3, [pc, #4]	; (8008f40 <__errno+0x8>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	200000c4 	.word	0x200000c4

08008f44 <__libc_init_array>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4d0d      	ldr	r5, [pc, #52]	; (8008f7c <__libc_init_array+0x38>)
 8008f48:	4c0d      	ldr	r4, [pc, #52]	; (8008f80 <__libc_init_array+0x3c>)
 8008f4a:	1b64      	subs	r4, r4, r5
 8008f4c:	10a4      	asrs	r4, r4, #2
 8008f4e:	2600      	movs	r6, #0
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	d109      	bne.n	8008f68 <__libc_init_array+0x24>
 8008f54:	4d0b      	ldr	r5, [pc, #44]	; (8008f84 <__libc_init_array+0x40>)
 8008f56:	4c0c      	ldr	r4, [pc, #48]	; (8008f88 <__libc_init_array+0x44>)
 8008f58:	f002 ff48 	bl	800bdec <_init>
 8008f5c:	1b64      	subs	r4, r4, r5
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	2600      	movs	r6, #0
 8008f62:	42a6      	cmp	r6, r4
 8008f64:	d105      	bne.n	8008f72 <__libc_init_array+0x2e>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6c:	4798      	blx	r3
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7ee      	b.n	8008f50 <__libc_init_array+0xc>
 8008f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f76:	4798      	blx	r3
 8008f78:	3601      	adds	r6, #1
 8008f7a:	e7f2      	b.n	8008f62 <__libc_init_array+0x1e>
 8008f7c:	0800c404 	.word	0x0800c404
 8008f80:	0800c404 	.word	0x0800c404
 8008f84:	0800c404 	.word	0x0800c404
 8008f88:	0800c408 	.word	0x0800c408

08008f8c <memset>:
 8008f8c:	4402      	add	r2, r0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d100      	bne.n	8008f96 <memset+0xa>
 8008f94:	4770      	bx	lr
 8008f96:	f803 1b01 	strb.w	r1, [r3], #1
 8008f9a:	e7f9      	b.n	8008f90 <memset+0x4>

08008f9c <__cvt>:
 8008f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	ec55 4b10 	vmov	r4, r5, d0
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	4619      	mov	r1, r3
 8008faa:	462b      	mov	r3, r5
 8008fac:	bfbb      	ittet	lt
 8008fae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fb2:	461d      	movlt	r5, r3
 8008fb4:	2300      	movge	r3, #0
 8008fb6:	232d      	movlt	r3, #45	; 0x2d
 8008fb8:	700b      	strb	r3, [r1, #0]
 8008fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	f023 0820 	bic.w	r8, r3, #32
 8008fc6:	bfbc      	itt	lt
 8008fc8:	4622      	movlt	r2, r4
 8008fca:	4614      	movlt	r4, r2
 8008fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fd0:	d005      	beq.n	8008fde <__cvt+0x42>
 8008fd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fd6:	d100      	bne.n	8008fda <__cvt+0x3e>
 8008fd8:	3601      	adds	r6, #1
 8008fda:	2102      	movs	r1, #2
 8008fdc:	e000      	b.n	8008fe0 <__cvt+0x44>
 8008fde:	2103      	movs	r1, #3
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	ab02      	add	r3, sp, #8
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	ec45 4b10 	vmov	d0, r4, r5
 8008fec:	4653      	mov	r3, sl
 8008fee:	4632      	mov	r2, r6
 8008ff0:	f000 fcea 	bl	80099c8 <_dtoa_r>
 8008ff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	d102      	bne.n	8009002 <__cvt+0x66>
 8008ffc:	f019 0f01 	tst.w	r9, #1
 8009000:	d022      	beq.n	8009048 <__cvt+0xac>
 8009002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009006:	eb07 0906 	add.w	r9, r7, r6
 800900a:	d110      	bne.n	800902e <__cvt+0x92>
 800900c:	783b      	ldrb	r3, [r7, #0]
 800900e:	2b30      	cmp	r3, #48	; 0x30
 8009010:	d10a      	bne.n	8009028 <__cvt+0x8c>
 8009012:	2200      	movs	r2, #0
 8009014:	2300      	movs	r3, #0
 8009016:	4620      	mov	r0, r4
 8009018:	4629      	mov	r1, r5
 800901a:	f7f7 fd75 	bl	8000b08 <__aeabi_dcmpeq>
 800901e:	b918      	cbnz	r0, 8009028 <__cvt+0x8c>
 8009020:	f1c6 0601 	rsb	r6, r6, #1
 8009024:	f8ca 6000 	str.w	r6, [sl]
 8009028:	f8da 3000 	ldr.w	r3, [sl]
 800902c:	4499      	add	r9, r3
 800902e:	2200      	movs	r2, #0
 8009030:	2300      	movs	r3, #0
 8009032:	4620      	mov	r0, r4
 8009034:	4629      	mov	r1, r5
 8009036:	f7f7 fd67 	bl	8000b08 <__aeabi_dcmpeq>
 800903a:	b108      	cbz	r0, 8009040 <__cvt+0xa4>
 800903c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009040:	2230      	movs	r2, #48	; 0x30
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	454b      	cmp	r3, r9
 8009046:	d307      	bcc.n	8009058 <__cvt+0xbc>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800904c:	1bdb      	subs	r3, r3, r7
 800904e:	4638      	mov	r0, r7
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	b004      	add	sp, #16
 8009054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009058:	1c59      	adds	r1, r3, #1
 800905a:	9103      	str	r1, [sp, #12]
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e7f0      	b.n	8009042 <__cvt+0xa6>

08009060 <__exponent>:
 8009060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009062:	4603      	mov	r3, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	bfb8      	it	lt
 8009068:	4249      	neglt	r1, r1
 800906a:	f803 2b02 	strb.w	r2, [r3], #2
 800906e:	bfb4      	ite	lt
 8009070:	222d      	movlt	r2, #45	; 0x2d
 8009072:	222b      	movge	r2, #43	; 0x2b
 8009074:	2909      	cmp	r1, #9
 8009076:	7042      	strb	r2, [r0, #1]
 8009078:	dd2a      	ble.n	80090d0 <__exponent+0x70>
 800907a:	f10d 0407 	add.w	r4, sp, #7
 800907e:	46a4      	mov	ip, r4
 8009080:	270a      	movs	r7, #10
 8009082:	46a6      	mov	lr, r4
 8009084:	460a      	mov	r2, r1
 8009086:	fb91 f6f7 	sdiv	r6, r1, r7
 800908a:	fb07 1516 	mls	r5, r7, r6, r1
 800908e:	3530      	adds	r5, #48	; 0x30
 8009090:	2a63      	cmp	r2, #99	; 0x63
 8009092:	f104 34ff 	add.w	r4, r4, #4294967295
 8009096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800909a:	4631      	mov	r1, r6
 800909c:	dcf1      	bgt.n	8009082 <__exponent+0x22>
 800909e:	3130      	adds	r1, #48	; 0x30
 80090a0:	f1ae 0502 	sub.w	r5, lr, #2
 80090a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090a8:	1c44      	adds	r4, r0, #1
 80090aa:	4629      	mov	r1, r5
 80090ac:	4561      	cmp	r1, ip
 80090ae:	d30a      	bcc.n	80090c6 <__exponent+0x66>
 80090b0:	f10d 0209 	add.w	r2, sp, #9
 80090b4:	eba2 020e 	sub.w	r2, r2, lr
 80090b8:	4565      	cmp	r5, ip
 80090ba:	bf88      	it	hi
 80090bc:	2200      	movhi	r2, #0
 80090be:	4413      	add	r3, r2
 80090c0:	1a18      	subs	r0, r3, r0
 80090c2:	b003      	add	sp, #12
 80090c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090ce:	e7ed      	b.n	80090ac <__exponent+0x4c>
 80090d0:	2330      	movs	r3, #48	; 0x30
 80090d2:	3130      	adds	r1, #48	; 0x30
 80090d4:	7083      	strb	r3, [r0, #2]
 80090d6:	70c1      	strb	r1, [r0, #3]
 80090d8:	1d03      	adds	r3, r0, #4
 80090da:	e7f1      	b.n	80090c0 <__exponent+0x60>

080090dc <_printf_float>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	ed2d 8b02 	vpush	{d8}
 80090e4:	b08d      	sub	sp, #52	; 0x34
 80090e6:	460c      	mov	r4, r1
 80090e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090ec:	4616      	mov	r6, r2
 80090ee:	461f      	mov	r7, r3
 80090f0:	4605      	mov	r5, r0
 80090f2:	f001 fa57 	bl	800a5a4 <_localeconv_r>
 80090f6:	f8d0 a000 	ldr.w	sl, [r0]
 80090fa:	4650      	mov	r0, sl
 80090fc:	f7f7 f888 	bl	8000210 <strlen>
 8009100:	2300      	movs	r3, #0
 8009102:	930a      	str	r3, [sp, #40]	; 0x28
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	9305      	str	r3, [sp, #20]
 8009108:	f8d8 3000 	ldr.w	r3, [r8]
 800910c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009110:	3307      	adds	r3, #7
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	f103 0208 	add.w	r2, r3, #8
 800911a:	f8c8 2000 	str.w	r2, [r8]
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800912a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	f8cd 8018 	str.w	r8, [sp, #24]
 8009134:	ee08 0a10 	vmov	s16, r0
 8009138:	4b9f      	ldr	r3, [pc, #636]	; (80093b8 <_printf_float+0x2dc>)
 800913a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800913e:	f04f 32ff 	mov.w	r2, #4294967295
 8009142:	f7f7 fd13 	bl	8000b6c <__aeabi_dcmpun>
 8009146:	bb88      	cbnz	r0, 80091ac <_printf_float+0xd0>
 8009148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800914c:	4b9a      	ldr	r3, [pc, #616]	; (80093b8 <_printf_float+0x2dc>)
 800914e:	f04f 32ff 	mov.w	r2, #4294967295
 8009152:	f7f7 fced 	bl	8000b30 <__aeabi_dcmple>
 8009156:	bb48      	cbnz	r0, 80091ac <_printf_float+0xd0>
 8009158:	2200      	movs	r2, #0
 800915a:	2300      	movs	r3, #0
 800915c:	4640      	mov	r0, r8
 800915e:	4649      	mov	r1, r9
 8009160:	f7f7 fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8009164:	b110      	cbz	r0, 800916c <_printf_float+0x90>
 8009166:	232d      	movs	r3, #45	; 0x2d
 8009168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800916c:	4b93      	ldr	r3, [pc, #588]	; (80093bc <_printf_float+0x2e0>)
 800916e:	4894      	ldr	r0, [pc, #592]	; (80093c0 <_printf_float+0x2e4>)
 8009170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009174:	bf94      	ite	ls
 8009176:	4698      	movls	r8, r3
 8009178:	4680      	movhi	r8, r0
 800917a:	2303      	movs	r3, #3
 800917c:	6123      	str	r3, [r4, #16]
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	f023 0204 	bic.w	r2, r3, #4
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	f04f 0900 	mov.w	r9, #0
 800918a:	9700      	str	r7, [sp, #0]
 800918c:	4633      	mov	r3, r6
 800918e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009190:	4621      	mov	r1, r4
 8009192:	4628      	mov	r0, r5
 8009194:	f000 f9d8 	bl	8009548 <_printf_common>
 8009198:	3001      	adds	r0, #1
 800919a:	f040 8090 	bne.w	80092be <_printf_float+0x1e2>
 800919e:	f04f 30ff 	mov.w	r0, #4294967295
 80091a2:	b00d      	add	sp, #52	; 0x34
 80091a4:	ecbd 8b02 	vpop	{d8}
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	4642      	mov	r2, r8
 80091ae:	464b      	mov	r3, r9
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 fcda 	bl	8000b6c <__aeabi_dcmpun>
 80091b8:	b140      	cbz	r0, 80091cc <_printf_float+0xf0>
 80091ba:	464b      	mov	r3, r9
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bfbc      	itt	lt
 80091c0:	232d      	movlt	r3, #45	; 0x2d
 80091c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091c6:	487f      	ldr	r0, [pc, #508]	; (80093c4 <_printf_float+0x2e8>)
 80091c8:	4b7f      	ldr	r3, [pc, #508]	; (80093c8 <_printf_float+0x2ec>)
 80091ca:	e7d1      	b.n	8009170 <_printf_float+0x94>
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091d2:	9206      	str	r2, [sp, #24]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	d13f      	bne.n	8009258 <_printf_float+0x17c>
 80091d8:	2306      	movs	r3, #6
 80091da:	6063      	str	r3, [r4, #4]
 80091dc:	9b05      	ldr	r3, [sp, #20]
 80091de:	6861      	ldr	r1, [r4, #4]
 80091e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091e4:	2300      	movs	r3, #0
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	ab0a      	add	r3, sp, #40	; 0x28
 80091ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ee:	ab09      	add	r3, sp, #36	; 0x24
 80091f0:	ec49 8b10 	vmov	d0, r8, r9
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	6022      	str	r2, [r4, #0]
 80091f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091fc:	4628      	mov	r0, r5
 80091fe:	f7ff fecd 	bl	8008f9c <__cvt>
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009206:	2b47      	cmp	r3, #71	; 0x47
 8009208:	4680      	mov	r8, r0
 800920a:	d108      	bne.n	800921e <_printf_float+0x142>
 800920c:	1cc8      	adds	r0, r1, #3
 800920e:	db02      	blt.n	8009216 <_printf_float+0x13a>
 8009210:	6863      	ldr	r3, [r4, #4]
 8009212:	4299      	cmp	r1, r3
 8009214:	dd41      	ble.n	800929a <_printf_float+0x1be>
 8009216:	f1ab 0b02 	sub.w	fp, fp, #2
 800921a:	fa5f fb8b 	uxtb.w	fp, fp
 800921e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009222:	d820      	bhi.n	8009266 <_printf_float+0x18a>
 8009224:	3901      	subs	r1, #1
 8009226:	465a      	mov	r2, fp
 8009228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800922c:	9109      	str	r1, [sp, #36]	; 0x24
 800922e:	f7ff ff17 	bl	8009060 <__exponent>
 8009232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009234:	1813      	adds	r3, r2, r0
 8009236:	2a01      	cmp	r2, #1
 8009238:	4681      	mov	r9, r0
 800923a:	6123      	str	r3, [r4, #16]
 800923c:	dc02      	bgt.n	8009244 <_printf_float+0x168>
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	07d2      	lsls	r2, r2, #31
 8009242:	d501      	bpl.n	8009248 <_printf_float+0x16c>
 8009244:	3301      	adds	r3, #1
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800924c:	2b00      	cmp	r3, #0
 800924e:	d09c      	beq.n	800918a <_printf_float+0xae>
 8009250:	232d      	movs	r3, #45	; 0x2d
 8009252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009256:	e798      	b.n	800918a <_printf_float+0xae>
 8009258:	9a06      	ldr	r2, [sp, #24]
 800925a:	2a47      	cmp	r2, #71	; 0x47
 800925c:	d1be      	bne.n	80091dc <_printf_float+0x100>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1bc      	bne.n	80091dc <_printf_float+0x100>
 8009262:	2301      	movs	r3, #1
 8009264:	e7b9      	b.n	80091da <_printf_float+0xfe>
 8009266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800926a:	d118      	bne.n	800929e <_printf_float+0x1c2>
 800926c:	2900      	cmp	r1, #0
 800926e:	6863      	ldr	r3, [r4, #4]
 8009270:	dd0b      	ble.n	800928a <_printf_float+0x1ae>
 8009272:	6121      	str	r1, [r4, #16]
 8009274:	b913      	cbnz	r3, 800927c <_printf_float+0x1a0>
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	07d0      	lsls	r0, r2, #31
 800927a:	d502      	bpl.n	8009282 <_printf_float+0x1a6>
 800927c:	3301      	adds	r3, #1
 800927e:	440b      	add	r3, r1
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	65a1      	str	r1, [r4, #88]	; 0x58
 8009284:	f04f 0900 	mov.w	r9, #0
 8009288:	e7de      	b.n	8009248 <_printf_float+0x16c>
 800928a:	b913      	cbnz	r3, 8009292 <_printf_float+0x1b6>
 800928c:	6822      	ldr	r2, [r4, #0]
 800928e:	07d2      	lsls	r2, r2, #31
 8009290:	d501      	bpl.n	8009296 <_printf_float+0x1ba>
 8009292:	3302      	adds	r3, #2
 8009294:	e7f4      	b.n	8009280 <_printf_float+0x1a4>
 8009296:	2301      	movs	r3, #1
 8009298:	e7f2      	b.n	8009280 <_printf_float+0x1a4>
 800929a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a0:	4299      	cmp	r1, r3
 80092a2:	db05      	blt.n	80092b0 <_printf_float+0x1d4>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	6121      	str	r1, [r4, #16]
 80092a8:	07d8      	lsls	r0, r3, #31
 80092aa:	d5ea      	bpl.n	8009282 <_printf_float+0x1a6>
 80092ac:	1c4b      	adds	r3, r1, #1
 80092ae:	e7e7      	b.n	8009280 <_printf_float+0x1a4>
 80092b0:	2900      	cmp	r1, #0
 80092b2:	bfd4      	ite	le
 80092b4:	f1c1 0202 	rsble	r2, r1, #2
 80092b8:	2201      	movgt	r2, #1
 80092ba:	4413      	add	r3, r2
 80092bc:	e7e0      	b.n	8009280 <_printf_float+0x1a4>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	055a      	lsls	r2, r3, #21
 80092c2:	d407      	bmi.n	80092d4 <_printf_float+0x1f8>
 80092c4:	6923      	ldr	r3, [r4, #16]
 80092c6:	4642      	mov	r2, r8
 80092c8:	4631      	mov	r1, r6
 80092ca:	4628      	mov	r0, r5
 80092cc:	47b8      	blx	r7
 80092ce:	3001      	adds	r0, #1
 80092d0:	d12c      	bne.n	800932c <_printf_float+0x250>
 80092d2:	e764      	b.n	800919e <_printf_float+0xc2>
 80092d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092d8:	f240 80e0 	bls.w	800949c <_printf_float+0x3c0>
 80092dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092e0:	2200      	movs	r2, #0
 80092e2:	2300      	movs	r3, #0
 80092e4:	f7f7 fc10 	bl	8000b08 <__aeabi_dcmpeq>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d034      	beq.n	8009356 <_printf_float+0x27a>
 80092ec:	4a37      	ldr	r2, [pc, #220]	; (80093cc <_printf_float+0x2f0>)
 80092ee:	2301      	movs	r3, #1
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	f43f af51 	beq.w	800919e <_printf_float+0xc2>
 80092fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009300:	429a      	cmp	r2, r3
 8009302:	db02      	blt.n	800930a <_printf_float+0x22e>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	07d8      	lsls	r0, r3, #31
 8009308:	d510      	bpl.n	800932c <_printf_float+0x250>
 800930a:	ee18 3a10 	vmov	r3, s16
 800930e:	4652      	mov	r2, sl
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af41 	beq.w	800919e <_printf_float+0xc2>
 800931c:	f04f 0800 	mov.w	r8, #0
 8009320:	f104 091a 	add.w	r9, r4, #26
 8009324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009326:	3b01      	subs	r3, #1
 8009328:	4543      	cmp	r3, r8
 800932a:	dc09      	bgt.n	8009340 <_printf_float+0x264>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	079b      	lsls	r3, r3, #30
 8009330:	f100 8105 	bmi.w	800953e <_printf_float+0x462>
 8009334:	68e0      	ldr	r0, [r4, #12]
 8009336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009338:	4298      	cmp	r0, r3
 800933a:	bfb8      	it	lt
 800933c:	4618      	movlt	r0, r3
 800933e:	e730      	b.n	80091a2 <_printf_float+0xc6>
 8009340:	2301      	movs	r3, #1
 8009342:	464a      	mov	r2, r9
 8009344:	4631      	mov	r1, r6
 8009346:	4628      	mov	r0, r5
 8009348:	47b8      	blx	r7
 800934a:	3001      	adds	r0, #1
 800934c:	f43f af27 	beq.w	800919e <_printf_float+0xc2>
 8009350:	f108 0801 	add.w	r8, r8, #1
 8009354:	e7e6      	b.n	8009324 <_printf_float+0x248>
 8009356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	dc39      	bgt.n	80093d0 <_printf_float+0x2f4>
 800935c:	4a1b      	ldr	r2, [pc, #108]	; (80093cc <_printf_float+0x2f0>)
 800935e:	2301      	movs	r3, #1
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f af19 	beq.w	800919e <_printf_float+0xc2>
 800936c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009370:	4313      	orrs	r3, r2
 8009372:	d102      	bne.n	800937a <_printf_float+0x29e>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	d5d8      	bpl.n	800932c <_printf_float+0x250>
 800937a:	ee18 3a10 	vmov	r3, s16
 800937e:	4652      	mov	r2, sl
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af09 	beq.w	800919e <_printf_float+0xc2>
 800938c:	f04f 0900 	mov.w	r9, #0
 8009390:	f104 0a1a 	add.w	sl, r4, #26
 8009394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009396:	425b      	negs	r3, r3
 8009398:	454b      	cmp	r3, r9
 800939a:	dc01      	bgt.n	80093a0 <_printf_float+0x2c4>
 800939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939e:	e792      	b.n	80092c6 <_printf_float+0x1ea>
 80093a0:	2301      	movs	r3, #1
 80093a2:	4652      	mov	r2, sl
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f aef7 	beq.w	800919e <_printf_float+0xc2>
 80093b0:	f109 0901 	add.w	r9, r9, #1
 80093b4:	e7ee      	b.n	8009394 <_printf_float+0x2b8>
 80093b6:	bf00      	nop
 80093b8:	7fefffff 	.word	0x7fefffff
 80093bc:	0800c028 	.word	0x0800c028
 80093c0:	0800c02c 	.word	0x0800c02c
 80093c4:	0800c034 	.word	0x0800c034
 80093c8:	0800c030 	.word	0x0800c030
 80093cc:	0800c038 	.word	0x0800c038
 80093d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093d4:	429a      	cmp	r2, r3
 80093d6:	bfa8      	it	ge
 80093d8:	461a      	movge	r2, r3
 80093da:	2a00      	cmp	r2, #0
 80093dc:	4691      	mov	r9, r2
 80093de:	dc37      	bgt.n	8009450 <_printf_float+0x374>
 80093e0:	f04f 0b00 	mov.w	fp, #0
 80093e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e8:	f104 021a 	add.w	r2, r4, #26
 80093ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ee:	9305      	str	r3, [sp, #20]
 80093f0:	eba3 0309 	sub.w	r3, r3, r9
 80093f4:	455b      	cmp	r3, fp
 80093f6:	dc33      	bgt.n	8009460 <_printf_float+0x384>
 80093f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093fc:	429a      	cmp	r2, r3
 80093fe:	db3b      	blt.n	8009478 <_printf_float+0x39c>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	07da      	lsls	r2, r3, #31
 8009404:	d438      	bmi.n	8009478 <_printf_float+0x39c>
 8009406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009408:	9a05      	ldr	r2, [sp, #20]
 800940a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800940c:	1a9a      	subs	r2, r3, r2
 800940e:	eba3 0901 	sub.w	r9, r3, r1
 8009412:	4591      	cmp	r9, r2
 8009414:	bfa8      	it	ge
 8009416:	4691      	movge	r9, r2
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	dc35      	bgt.n	800948a <_printf_float+0x3ae>
 800941e:	f04f 0800 	mov.w	r8, #0
 8009422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009426:	f104 0a1a 	add.w	sl, r4, #26
 800942a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	eba3 0309 	sub.w	r3, r3, r9
 8009434:	4543      	cmp	r3, r8
 8009436:	f77f af79 	ble.w	800932c <_printf_float+0x250>
 800943a:	2301      	movs	r3, #1
 800943c:	4652      	mov	r2, sl
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	f43f aeaa 	beq.w	800919e <_printf_float+0xc2>
 800944a:	f108 0801 	add.w	r8, r8, #1
 800944e:	e7ec      	b.n	800942a <_printf_float+0x34e>
 8009450:	4613      	mov	r3, r2
 8009452:	4631      	mov	r1, r6
 8009454:	4642      	mov	r2, r8
 8009456:	4628      	mov	r0, r5
 8009458:	47b8      	blx	r7
 800945a:	3001      	adds	r0, #1
 800945c:	d1c0      	bne.n	80093e0 <_printf_float+0x304>
 800945e:	e69e      	b.n	800919e <_printf_float+0xc2>
 8009460:	2301      	movs	r3, #1
 8009462:	4631      	mov	r1, r6
 8009464:	4628      	mov	r0, r5
 8009466:	9205      	str	r2, [sp, #20]
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	f43f ae97 	beq.w	800919e <_printf_float+0xc2>
 8009470:	9a05      	ldr	r2, [sp, #20]
 8009472:	f10b 0b01 	add.w	fp, fp, #1
 8009476:	e7b9      	b.n	80093ec <_printf_float+0x310>
 8009478:	ee18 3a10 	vmov	r3, s16
 800947c:	4652      	mov	r2, sl
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	d1be      	bne.n	8009406 <_printf_float+0x32a>
 8009488:	e689      	b.n	800919e <_printf_float+0xc2>
 800948a:	9a05      	ldr	r2, [sp, #20]
 800948c:	464b      	mov	r3, r9
 800948e:	4442      	add	r2, r8
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	d1c1      	bne.n	800941e <_printf_float+0x342>
 800949a:	e680      	b.n	800919e <_printf_float+0xc2>
 800949c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949e:	2a01      	cmp	r2, #1
 80094a0:	dc01      	bgt.n	80094a6 <_printf_float+0x3ca>
 80094a2:	07db      	lsls	r3, r3, #31
 80094a4:	d538      	bpl.n	8009518 <_printf_float+0x43c>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4642      	mov	r2, r8
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f ae74 	beq.w	800919e <_printf_float+0xc2>
 80094b6:	ee18 3a10 	vmov	r3, s16
 80094ba:	4652      	mov	r2, sl
 80094bc:	4631      	mov	r1, r6
 80094be:	4628      	mov	r0, r5
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	f43f ae6b 	beq.w	800919e <_printf_float+0xc2>
 80094c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094cc:	2200      	movs	r2, #0
 80094ce:	2300      	movs	r3, #0
 80094d0:	f7f7 fb1a 	bl	8000b08 <__aeabi_dcmpeq>
 80094d4:	b9d8      	cbnz	r0, 800950e <_printf_float+0x432>
 80094d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d8:	f108 0201 	add.w	r2, r8, #1
 80094dc:	3b01      	subs	r3, #1
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d10e      	bne.n	8009506 <_printf_float+0x42a>
 80094e8:	e659      	b.n	800919e <_printf_float+0xc2>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4652      	mov	r2, sl
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae52 	beq.w	800919e <_printf_float+0xc2>
 80094fa:	f108 0801 	add.w	r8, r8, #1
 80094fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009500:	3b01      	subs	r3, #1
 8009502:	4543      	cmp	r3, r8
 8009504:	dcf1      	bgt.n	80094ea <_printf_float+0x40e>
 8009506:	464b      	mov	r3, r9
 8009508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800950c:	e6dc      	b.n	80092c8 <_printf_float+0x1ec>
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	f104 0a1a 	add.w	sl, r4, #26
 8009516:	e7f2      	b.n	80094fe <_printf_float+0x422>
 8009518:	2301      	movs	r3, #1
 800951a:	4642      	mov	r2, r8
 800951c:	e7df      	b.n	80094de <_printf_float+0x402>
 800951e:	2301      	movs	r3, #1
 8009520:	464a      	mov	r2, r9
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f ae38 	beq.w	800919e <_printf_float+0xc2>
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	68e3      	ldr	r3, [r4, #12]
 8009534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009536:	1a5b      	subs	r3, r3, r1
 8009538:	4543      	cmp	r3, r8
 800953a:	dcf0      	bgt.n	800951e <_printf_float+0x442>
 800953c:	e6fa      	b.n	8009334 <_printf_float+0x258>
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	f104 0919 	add.w	r9, r4, #25
 8009546:	e7f4      	b.n	8009532 <_printf_float+0x456>

08009548 <_printf_common>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	4616      	mov	r6, r2
 800954e:	4699      	mov	r9, r3
 8009550:	688a      	ldr	r2, [r1, #8]
 8009552:	690b      	ldr	r3, [r1, #16]
 8009554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009558:	4293      	cmp	r3, r2
 800955a:	bfb8      	it	lt
 800955c:	4613      	movlt	r3, r2
 800955e:	6033      	str	r3, [r6, #0]
 8009560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009564:	4607      	mov	r7, r0
 8009566:	460c      	mov	r4, r1
 8009568:	b10a      	cbz	r2, 800956e <_printf_common+0x26>
 800956a:	3301      	adds	r3, #1
 800956c:	6033      	str	r3, [r6, #0]
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	0699      	lsls	r1, r3, #26
 8009572:	bf42      	ittt	mi
 8009574:	6833      	ldrmi	r3, [r6, #0]
 8009576:	3302      	addmi	r3, #2
 8009578:	6033      	strmi	r3, [r6, #0]
 800957a:	6825      	ldr	r5, [r4, #0]
 800957c:	f015 0506 	ands.w	r5, r5, #6
 8009580:	d106      	bne.n	8009590 <_printf_common+0x48>
 8009582:	f104 0a19 	add.w	sl, r4, #25
 8009586:	68e3      	ldr	r3, [r4, #12]
 8009588:	6832      	ldr	r2, [r6, #0]
 800958a:	1a9b      	subs	r3, r3, r2
 800958c:	42ab      	cmp	r3, r5
 800958e:	dc26      	bgt.n	80095de <_printf_common+0x96>
 8009590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009594:	1e13      	subs	r3, r2, #0
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	bf18      	it	ne
 800959a:	2301      	movne	r3, #1
 800959c:	0692      	lsls	r2, r2, #26
 800959e:	d42b      	bmi.n	80095f8 <_printf_common+0xb0>
 80095a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095a4:	4649      	mov	r1, r9
 80095a6:	4638      	mov	r0, r7
 80095a8:	47c0      	blx	r8
 80095aa:	3001      	adds	r0, #1
 80095ac:	d01e      	beq.n	80095ec <_printf_common+0xa4>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	68e5      	ldr	r5, [r4, #12]
 80095b2:	6832      	ldr	r2, [r6, #0]
 80095b4:	f003 0306 	and.w	r3, r3, #6
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	bf08      	it	eq
 80095bc:	1aad      	subeq	r5, r5, r2
 80095be:	68a3      	ldr	r3, [r4, #8]
 80095c0:	6922      	ldr	r2, [r4, #16]
 80095c2:	bf0c      	ite	eq
 80095c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095c8:	2500      	movne	r5, #0
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bfc4      	itt	gt
 80095ce:	1a9b      	subgt	r3, r3, r2
 80095d0:	18ed      	addgt	r5, r5, r3
 80095d2:	2600      	movs	r6, #0
 80095d4:	341a      	adds	r4, #26
 80095d6:	42b5      	cmp	r5, r6
 80095d8:	d11a      	bne.n	8009610 <_printf_common+0xc8>
 80095da:	2000      	movs	r0, #0
 80095dc:	e008      	b.n	80095f0 <_printf_common+0xa8>
 80095de:	2301      	movs	r3, #1
 80095e0:	4652      	mov	r2, sl
 80095e2:	4649      	mov	r1, r9
 80095e4:	4638      	mov	r0, r7
 80095e6:	47c0      	blx	r8
 80095e8:	3001      	adds	r0, #1
 80095ea:	d103      	bne.n	80095f4 <_printf_common+0xac>
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f4:	3501      	adds	r5, #1
 80095f6:	e7c6      	b.n	8009586 <_printf_common+0x3e>
 80095f8:	18e1      	adds	r1, r4, r3
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	2030      	movs	r0, #48	; 0x30
 80095fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009602:	4422      	add	r2, r4
 8009604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800960c:	3302      	adds	r3, #2
 800960e:	e7c7      	b.n	80095a0 <_printf_common+0x58>
 8009610:	2301      	movs	r3, #1
 8009612:	4622      	mov	r2, r4
 8009614:	4649      	mov	r1, r9
 8009616:	4638      	mov	r0, r7
 8009618:	47c0      	blx	r8
 800961a:	3001      	adds	r0, #1
 800961c:	d0e6      	beq.n	80095ec <_printf_common+0xa4>
 800961e:	3601      	adds	r6, #1
 8009620:	e7d9      	b.n	80095d6 <_printf_common+0x8e>
	...

08009624 <_printf_i>:
 8009624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009628:	7e0f      	ldrb	r7, [r1, #24]
 800962a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800962c:	2f78      	cmp	r7, #120	; 0x78
 800962e:	4691      	mov	r9, r2
 8009630:	4680      	mov	r8, r0
 8009632:	460c      	mov	r4, r1
 8009634:	469a      	mov	sl, r3
 8009636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800963a:	d807      	bhi.n	800964c <_printf_i+0x28>
 800963c:	2f62      	cmp	r7, #98	; 0x62
 800963e:	d80a      	bhi.n	8009656 <_printf_i+0x32>
 8009640:	2f00      	cmp	r7, #0
 8009642:	f000 80d8 	beq.w	80097f6 <_printf_i+0x1d2>
 8009646:	2f58      	cmp	r7, #88	; 0x58
 8009648:	f000 80a3 	beq.w	8009792 <_printf_i+0x16e>
 800964c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009654:	e03a      	b.n	80096cc <_printf_i+0xa8>
 8009656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800965a:	2b15      	cmp	r3, #21
 800965c:	d8f6      	bhi.n	800964c <_printf_i+0x28>
 800965e:	a101      	add	r1, pc, #4	; (adr r1, 8009664 <_printf_i+0x40>)
 8009660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009664:	080096bd 	.word	0x080096bd
 8009668:	080096d1 	.word	0x080096d1
 800966c:	0800964d 	.word	0x0800964d
 8009670:	0800964d 	.word	0x0800964d
 8009674:	0800964d 	.word	0x0800964d
 8009678:	0800964d 	.word	0x0800964d
 800967c:	080096d1 	.word	0x080096d1
 8009680:	0800964d 	.word	0x0800964d
 8009684:	0800964d 	.word	0x0800964d
 8009688:	0800964d 	.word	0x0800964d
 800968c:	0800964d 	.word	0x0800964d
 8009690:	080097dd 	.word	0x080097dd
 8009694:	08009701 	.word	0x08009701
 8009698:	080097bf 	.word	0x080097bf
 800969c:	0800964d 	.word	0x0800964d
 80096a0:	0800964d 	.word	0x0800964d
 80096a4:	080097ff 	.word	0x080097ff
 80096a8:	0800964d 	.word	0x0800964d
 80096ac:	08009701 	.word	0x08009701
 80096b0:	0800964d 	.word	0x0800964d
 80096b4:	0800964d 	.word	0x0800964d
 80096b8:	080097c7 	.word	0x080097c7
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	602a      	str	r2, [r5, #0]
 80096c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096cc:	2301      	movs	r3, #1
 80096ce:	e0a3      	b.n	8009818 <_printf_i+0x1f4>
 80096d0:	6820      	ldr	r0, [r4, #0]
 80096d2:	6829      	ldr	r1, [r5, #0]
 80096d4:	0606      	lsls	r6, r0, #24
 80096d6:	f101 0304 	add.w	r3, r1, #4
 80096da:	d50a      	bpl.n	80096f2 <_printf_i+0xce>
 80096dc:	680e      	ldr	r6, [r1, #0]
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	2e00      	cmp	r6, #0
 80096e2:	da03      	bge.n	80096ec <_printf_i+0xc8>
 80096e4:	232d      	movs	r3, #45	; 0x2d
 80096e6:	4276      	negs	r6, r6
 80096e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ec:	485e      	ldr	r0, [pc, #376]	; (8009868 <_printf_i+0x244>)
 80096ee:	230a      	movs	r3, #10
 80096f0:	e019      	b.n	8009726 <_printf_i+0x102>
 80096f2:	680e      	ldr	r6, [r1, #0]
 80096f4:	602b      	str	r3, [r5, #0]
 80096f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096fa:	bf18      	it	ne
 80096fc:	b236      	sxthne	r6, r6
 80096fe:	e7ef      	b.n	80096e0 <_printf_i+0xbc>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	1d19      	adds	r1, r3, #4
 8009706:	6029      	str	r1, [r5, #0]
 8009708:	0601      	lsls	r1, r0, #24
 800970a:	d501      	bpl.n	8009710 <_printf_i+0xec>
 800970c:	681e      	ldr	r6, [r3, #0]
 800970e:	e002      	b.n	8009716 <_printf_i+0xf2>
 8009710:	0646      	lsls	r6, r0, #25
 8009712:	d5fb      	bpl.n	800970c <_printf_i+0xe8>
 8009714:	881e      	ldrh	r6, [r3, #0]
 8009716:	4854      	ldr	r0, [pc, #336]	; (8009868 <_printf_i+0x244>)
 8009718:	2f6f      	cmp	r7, #111	; 0x6f
 800971a:	bf0c      	ite	eq
 800971c:	2308      	moveq	r3, #8
 800971e:	230a      	movne	r3, #10
 8009720:	2100      	movs	r1, #0
 8009722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009726:	6865      	ldr	r5, [r4, #4]
 8009728:	60a5      	str	r5, [r4, #8]
 800972a:	2d00      	cmp	r5, #0
 800972c:	bfa2      	ittt	ge
 800972e:	6821      	ldrge	r1, [r4, #0]
 8009730:	f021 0104 	bicge.w	r1, r1, #4
 8009734:	6021      	strge	r1, [r4, #0]
 8009736:	b90e      	cbnz	r6, 800973c <_printf_i+0x118>
 8009738:	2d00      	cmp	r5, #0
 800973a:	d04d      	beq.n	80097d8 <_printf_i+0x1b4>
 800973c:	4615      	mov	r5, r2
 800973e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009742:	fb03 6711 	mls	r7, r3, r1, r6
 8009746:	5dc7      	ldrb	r7, [r0, r7]
 8009748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800974c:	4637      	mov	r7, r6
 800974e:	42bb      	cmp	r3, r7
 8009750:	460e      	mov	r6, r1
 8009752:	d9f4      	bls.n	800973e <_printf_i+0x11a>
 8009754:	2b08      	cmp	r3, #8
 8009756:	d10b      	bne.n	8009770 <_printf_i+0x14c>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	07de      	lsls	r6, r3, #31
 800975c:	d508      	bpl.n	8009770 <_printf_i+0x14c>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6861      	ldr	r1, [r4, #4]
 8009762:	4299      	cmp	r1, r3
 8009764:	bfde      	ittt	le
 8009766:	2330      	movle	r3, #48	; 0x30
 8009768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800976c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009770:	1b52      	subs	r2, r2, r5
 8009772:	6122      	str	r2, [r4, #16]
 8009774:	f8cd a000 	str.w	sl, [sp]
 8009778:	464b      	mov	r3, r9
 800977a:	aa03      	add	r2, sp, #12
 800977c:	4621      	mov	r1, r4
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fee2 	bl	8009548 <_printf_common>
 8009784:	3001      	adds	r0, #1
 8009786:	d14c      	bne.n	8009822 <_printf_i+0x1fe>
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	b004      	add	sp, #16
 800978e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009792:	4835      	ldr	r0, [pc, #212]	; (8009868 <_printf_i+0x244>)
 8009794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009798:	6829      	ldr	r1, [r5, #0]
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	f851 6b04 	ldr.w	r6, [r1], #4
 80097a0:	6029      	str	r1, [r5, #0]
 80097a2:	061d      	lsls	r5, r3, #24
 80097a4:	d514      	bpl.n	80097d0 <_printf_i+0x1ac>
 80097a6:	07df      	lsls	r7, r3, #31
 80097a8:	bf44      	itt	mi
 80097aa:	f043 0320 	orrmi.w	r3, r3, #32
 80097ae:	6023      	strmi	r3, [r4, #0]
 80097b0:	b91e      	cbnz	r6, 80097ba <_printf_i+0x196>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	f023 0320 	bic.w	r3, r3, #32
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	2310      	movs	r3, #16
 80097bc:	e7b0      	b.n	8009720 <_printf_i+0xfc>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f043 0320 	orr.w	r3, r3, #32
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	2378      	movs	r3, #120	; 0x78
 80097c8:	4828      	ldr	r0, [pc, #160]	; (800986c <_printf_i+0x248>)
 80097ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ce:	e7e3      	b.n	8009798 <_printf_i+0x174>
 80097d0:	0659      	lsls	r1, r3, #25
 80097d2:	bf48      	it	mi
 80097d4:	b2b6      	uxthmi	r6, r6
 80097d6:	e7e6      	b.n	80097a6 <_printf_i+0x182>
 80097d8:	4615      	mov	r5, r2
 80097da:	e7bb      	b.n	8009754 <_printf_i+0x130>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	6826      	ldr	r6, [r4, #0]
 80097e0:	6961      	ldr	r1, [r4, #20]
 80097e2:	1d18      	adds	r0, r3, #4
 80097e4:	6028      	str	r0, [r5, #0]
 80097e6:	0635      	lsls	r5, r6, #24
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	d501      	bpl.n	80097f0 <_printf_i+0x1cc>
 80097ec:	6019      	str	r1, [r3, #0]
 80097ee:	e002      	b.n	80097f6 <_printf_i+0x1d2>
 80097f0:	0670      	lsls	r0, r6, #25
 80097f2:	d5fb      	bpl.n	80097ec <_printf_i+0x1c8>
 80097f4:	8019      	strh	r1, [r3, #0]
 80097f6:	2300      	movs	r3, #0
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	4615      	mov	r5, r2
 80097fc:	e7ba      	b.n	8009774 <_printf_i+0x150>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	1d1a      	adds	r2, r3, #4
 8009802:	602a      	str	r2, [r5, #0]
 8009804:	681d      	ldr	r5, [r3, #0]
 8009806:	6862      	ldr	r2, [r4, #4]
 8009808:	2100      	movs	r1, #0
 800980a:	4628      	mov	r0, r5
 800980c:	f7f6 fd08 	bl	8000220 <memchr>
 8009810:	b108      	cbz	r0, 8009816 <_printf_i+0x1f2>
 8009812:	1b40      	subs	r0, r0, r5
 8009814:	6060      	str	r0, [r4, #4]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	6123      	str	r3, [r4, #16]
 800981a:	2300      	movs	r3, #0
 800981c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009820:	e7a8      	b.n	8009774 <_printf_i+0x150>
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	462a      	mov	r2, r5
 8009826:	4649      	mov	r1, r9
 8009828:	4640      	mov	r0, r8
 800982a:	47d0      	blx	sl
 800982c:	3001      	adds	r0, #1
 800982e:	d0ab      	beq.n	8009788 <_printf_i+0x164>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	079b      	lsls	r3, r3, #30
 8009834:	d413      	bmi.n	800985e <_printf_i+0x23a>
 8009836:	68e0      	ldr	r0, [r4, #12]
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	4298      	cmp	r0, r3
 800983c:	bfb8      	it	lt
 800983e:	4618      	movlt	r0, r3
 8009840:	e7a4      	b.n	800978c <_printf_i+0x168>
 8009842:	2301      	movs	r3, #1
 8009844:	4632      	mov	r2, r6
 8009846:	4649      	mov	r1, r9
 8009848:	4640      	mov	r0, r8
 800984a:	47d0      	blx	sl
 800984c:	3001      	adds	r0, #1
 800984e:	d09b      	beq.n	8009788 <_printf_i+0x164>
 8009850:	3501      	adds	r5, #1
 8009852:	68e3      	ldr	r3, [r4, #12]
 8009854:	9903      	ldr	r1, [sp, #12]
 8009856:	1a5b      	subs	r3, r3, r1
 8009858:	42ab      	cmp	r3, r5
 800985a:	dcf2      	bgt.n	8009842 <_printf_i+0x21e>
 800985c:	e7eb      	b.n	8009836 <_printf_i+0x212>
 800985e:	2500      	movs	r5, #0
 8009860:	f104 0619 	add.w	r6, r4, #25
 8009864:	e7f5      	b.n	8009852 <_printf_i+0x22e>
 8009866:	bf00      	nop
 8009868:	0800c03a 	.word	0x0800c03a
 800986c:	0800c04b 	.word	0x0800c04b

08009870 <siprintf>:
 8009870:	b40e      	push	{r1, r2, r3}
 8009872:	b500      	push	{lr}
 8009874:	b09c      	sub	sp, #112	; 0x70
 8009876:	ab1d      	add	r3, sp, #116	; 0x74
 8009878:	9002      	str	r0, [sp, #8]
 800987a:	9006      	str	r0, [sp, #24]
 800987c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009880:	4809      	ldr	r0, [pc, #36]	; (80098a8 <siprintf+0x38>)
 8009882:	9107      	str	r1, [sp, #28]
 8009884:	9104      	str	r1, [sp, #16]
 8009886:	4909      	ldr	r1, [pc, #36]	; (80098ac <siprintf+0x3c>)
 8009888:	f853 2b04 	ldr.w	r2, [r3], #4
 800988c:	9105      	str	r1, [sp, #20]
 800988e:	6800      	ldr	r0, [r0, #0]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	a902      	add	r1, sp, #8
 8009894:	f001 fb76 	bl	800af84 <_svfiprintf_r>
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	b01c      	add	sp, #112	; 0x70
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	200000c4 	.word	0x200000c4
 80098ac:	ffff0208 	.word	0xffff0208

080098b0 <quorem>:
 80098b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	6903      	ldr	r3, [r0, #16]
 80098b6:	690c      	ldr	r4, [r1, #16]
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	4607      	mov	r7, r0
 80098bc:	f2c0 8081 	blt.w	80099c2 <quorem+0x112>
 80098c0:	3c01      	subs	r4, #1
 80098c2:	f101 0814 	add.w	r8, r1, #20
 80098c6:	f100 0514 	add.w	r5, r0, #20
 80098ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098d8:	3301      	adds	r3, #1
 80098da:	429a      	cmp	r2, r3
 80098dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80098e8:	d331      	bcc.n	800994e <quorem+0x9e>
 80098ea:	f04f 0e00 	mov.w	lr, #0
 80098ee:	4640      	mov	r0, r8
 80098f0:	46ac      	mov	ip, r5
 80098f2:	46f2      	mov	sl, lr
 80098f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80098f8:	b293      	uxth	r3, r2
 80098fa:	fb06 e303 	mla	r3, r6, r3, lr
 80098fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009902:	b29b      	uxth	r3, r3
 8009904:	ebaa 0303 	sub.w	r3, sl, r3
 8009908:	f8dc a000 	ldr.w	sl, [ip]
 800990c:	0c12      	lsrs	r2, r2, #16
 800990e:	fa13 f38a 	uxtah	r3, r3, sl
 8009912:	fb06 e202 	mla	r2, r6, r2, lr
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	9b00      	ldr	r3, [sp, #0]
 800991a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800991e:	b292      	uxth	r2, r2
 8009920:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009928:	f8bd 3000 	ldrh.w	r3, [sp]
 800992c:	4581      	cmp	r9, r0
 800992e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009932:	f84c 3b04 	str.w	r3, [ip], #4
 8009936:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800993a:	d2db      	bcs.n	80098f4 <quorem+0x44>
 800993c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009940:	b92b      	cbnz	r3, 800994e <quorem+0x9e>
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	3b04      	subs	r3, #4
 8009946:	429d      	cmp	r5, r3
 8009948:	461a      	mov	r2, r3
 800994a:	d32e      	bcc.n	80099aa <quorem+0xfa>
 800994c:	613c      	str	r4, [r7, #16]
 800994e:	4638      	mov	r0, r7
 8009950:	f001 f8c4 	bl	800aadc <__mcmp>
 8009954:	2800      	cmp	r0, #0
 8009956:	db24      	blt.n	80099a2 <quorem+0xf2>
 8009958:	3601      	adds	r6, #1
 800995a:	4628      	mov	r0, r5
 800995c:	f04f 0c00 	mov.w	ip, #0
 8009960:	f858 2b04 	ldr.w	r2, [r8], #4
 8009964:	f8d0 e000 	ldr.w	lr, [r0]
 8009968:	b293      	uxth	r3, r2
 800996a:	ebac 0303 	sub.w	r3, ip, r3
 800996e:	0c12      	lsrs	r2, r2, #16
 8009970:	fa13 f38e 	uxtah	r3, r3, lr
 8009974:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800997c:	b29b      	uxth	r3, r3
 800997e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009982:	45c1      	cmp	r9, r8
 8009984:	f840 3b04 	str.w	r3, [r0], #4
 8009988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800998c:	d2e8      	bcs.n	8009960 <quorem+0xb0>
 800998e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009996:	b922      	cbnz	r2, 80099a2 <quorem+0xf2>
 8009998:	3b04      	subs	r3, #4
 800999a:	429d      	cmp	r5, r3
 800999c:	461a      	mov	r2, r3
 800999e:	d30a      	bcc.n	80099b6 <quorem+0x106>
 80099a0:	613c      	str	r4, [r7, #16]
 80099a2:	4630      	mov	r0, r6
 80099a4:	b003      	add	sp, #12
 80099a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099aa:	6812      	ldr	r2, [r2, #0]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	d1cc      	bne.n	800994c <quorem+0x9c>
 80099b2:	3c01      	subs	r4, #1
 80099b4:	e7c7      	b.n	8009946 <quorem+0x96>
 80099b6:	6812      	ldr	r2, [r2, #0]
 80099b8:	3b04      	subs	r3, #4
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	d1f0      	bne.n	80099a0 <quorem+0xf0>
 80099be:	3c01      	subs	r4, #1
 80099c0:	e7eb      	b.n	800999a <quorem+0xea>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e7ee      	b.n	80099a4 <quorem+0xf4>
	...

080099c8 <_dtoa_r>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	ed2d 8b04 	vpush	{d8-d9}
 80099d0:	ec57 6b10 	vmov	r6, r7, d0
 80099d4:	b093      	sub	sp, #76	; 0x4c
 80099d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099dc:	9106      	str	r1, [sp, #24]
 80099de:	ee10 aa10 	vmov	sl, s0
 80099e2:	4604      	mov	r4, r0
 80099e4:	9209      	str	r2, [sp, #36]	; 0x24
 80099e6:	930c      	str	r3, [sp, #48]	; 0x30
 80099e8:	46bb      	mov	fp, r7
 80099ea:	b975      	cbnz	r5, 8009a0a <_dtoa_r+0x42>
 80099ec:	2010      	movs	r0, #16
 80099ee:	f000 fddd 	bl	800a5ac <malloc>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6260      	str	r0, [r4, #36]	; 0x24
 80099f6:	b920      	cbnz	r0, 8009a02 <_dtoa_r+0x3a>
 80099f8:	4ba7      	ldr	r3, [pc, #668]	; (8009c98 <_dtoa_r+0x2d0>)
 80099fa:	21ea      	movs	r1, #234	; 0xea
 80099fc:	48a7      	ldr	r0, [pc, #668]	; (8009c9c <_dtoa_r+0x2d4>)
 80099fe:	f001 fbd1 	bl	800b1a4 <__assert_func>
 8009a02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a06:	6005      	str	r5, [r0, #0]
 8009a08:	60c5      	str	r5, [r0, #12]
 8009a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a0c:	6819      	ldr	r1, [r3, #0]
 8009a0e:	b151      	cbz	r1, 8009a26 <_dtoa_r+0x5e>
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	604a      	str	r2, [r1, #4]
 8009a14:	2301      	movs	r3, #1
 8009a16:	4093      	lsls	r3, r2
 8009a18:	608b      	str	r3, [r1, #8]
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 fe1c 	bl	800a658 <_Bfree>
 8009a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	1e3b      	subs	r3, r7, #0
 8009a28:	bfaa      	itet	ge
 8009a2a:	2300      	movge	r3, #0
 8009a2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a30:	f8c8 3000 	strge.w	r3, [r8]
 8009a34:	4b9a      	ldr	r3, [pc, #616]	; (8009ca0 <_dtoa_r+0x2d8>)
 8009a36:	bfbc      	itt	lt
 8009a38:	2201      	movlt	r2, #1
 8009a3a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a3e:	ea33 030b 	bics.w	r3, r3, fp
 8009a42:	d11b      	bne.n	8009a7c <_dtoa_r+0xb4>
 8009a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a46:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a50:	4333      	orrs	r3, r6
 8009a52:	f000 8592 	beq.w	800a57a <_dtoa_r+0xbb2>
 8009a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a58:	b963      	cbnz	r3, 8009a74 <_dtoa_r+0xac>
 8009a5a:	4b92      	ldr	r3, [pc, #584]	; (8009ca4 <_dtoa_r+0x2dc>)
 8009a5c:	e022      	b.n	8009aa4 <_dtoa_r+0xdc>
 8009a5e:	4b92      	ldr	r3, [pc, #584]	; (8009ca8 <_dtoa_r+0x2e0>)
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	3308      	adds	r3, #8
 8009a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	9801      	ldr	r0, [sp, #4]
 8009a6a:	b013      	add	sp, #76	; 0x4c
 8009a6c:	ecbd 8b04 	vpop	{d8-d9}
 8009a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a74:	4b8b      	ldr	r3, [pc, #556]	; (8009ca4 <_dtoa_r+0x2dc>)
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	3303      	adds	r3, #3
 8009a7a:	e7f3      	b.n	8009a64 <_dtoa_r+0x9c>
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4650      	mov	r0, sl
 8009a82:	4659      	mov	r1, fp
 8009a84:	f7f7 f840 	bl	8000b08 <__aeabi_dcmpeq>
 8009a88:	ec4b ab19 	vmov	d9, sl, fp
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	b158      	cbz	r0, 8009aa8 <_dtoa_r+0xe0>
 8009a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a92:	2301      	movs	r3, #1
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 856b 	beq.w	800a574 <_dtoa_r+0xbac>
 8009a9e:	4883      	ldr	r0, [pc, #524]	; (8009cac <_dtoa_r+0x2e4>)
 8009aa0:	6018      	str	r0, [r3, #0]
 8009aa2:	1e43      	subs	r3, r0, #1
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	e7df      	b.n	8009a68 <_dtoa_r+0xa0>
 8009aa8:	ec4b ab10 	vmov	d0, sl, fp
 8009aac:	aa10      	add	r2, sp, #64	; 0x40
 8009aae:	a911      	add	r1, sp, #68	; 0x44
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f001 f8b9 	bl	800ac28 <__d2b>
 8009ab6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009aba:	ee08 0a10 	vmov	s16, r0
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	f000 8084 	beq.w	8009bcc <_dtoa_r+0x204>
 8009ac4:	ee19 3a90 	vmov	r3, s19
 8009ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009acc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ad0:	4656      	mov	r6, sl
 8009ad2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ada:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ade:	4b74      	ldr	r3, [pc, #464]	; (8009cb0 <_dtoa_r+0x2e8>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 fbef 	bl	80002c8 <__aeabi_dsub>
 8009aea:	a365      	add	r3, pc, #404	; (adr r3, 8009c80 <_dtoa_r+0x2b8>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fda2 	bl	8000638 <__aeabi_dmul>
 8009af4:	a364      	add	r3, pc, #400	; (adr r3, 8009c88 <_dtoa_r+0x2c0>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fbe7 	bl	80002cc <__adddf3>
 8009afe:	4606      	mov	r6, r0
 8009b00:	4628      	mov	r0, r5
 8009b02:	460f      	mov	r7, r1
 8009b04:	f7f6 fd2e 	bl	8000564 <__aeabi_i2d>
 8009b08:	a361      	add	r3, pc, #388	; (adr r3, 8009c90 <_dtoa_r+0x2c8>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fd93 	bl	8000638 <__aeabi_dmul>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 fbd7 	bl	80002cc <__adddf3>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460f      	mov	r7, r1
 8009b22:	f7f7 f839 	bl	8000b98 <__aeabi_d2iz>
 8009b26:	2200      	movs	r2, #0
 8009b28:	9000      	str	r0, [sp, #0]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	4639      	mov	r1, r7
 8009b30:	f7f6 fff4 	bl	8000b1c <__aeabi_dcmplt>
 8009b34:	b150      	cbz	r0, 8009b4c <_dtoa_r+0x184>
 8009b36:	9800      	ldr	r0, [sp, #0]
 8009b38:	f7f6 fd14 	bl	8000564 <__aeabi_i2d>
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	f7f6 ffe2 	bl	8000b08 <__aeabi_dcmpeq>
 8009b44:	b910      	cbnz	r0, 8009b4c <_dtoa_r+0x184>
 8009b46:	9b00      	ldr	r3, [sp, #0]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	9b00      	ldr	r3, [sp, #0]
 8009b4e:	2b16      	cmp	r3, #22
 8009b50:	d85a      	bhi.n	8009c08 <_dtoa_r+0x240>
 8009b52:	9a00      	ldr	r2, [sp, #0]
 8009b54:	4b57      	ldr	r3, [pc, #348]	; (8009cb4 <_dtoa_r+0x2ec>)
 8009b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	ec51 0b19 	vmov	r0, r1, d9
 8009b62:	f7f6 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d050      	beq.n	8009c0c <_dtoa_r+0x244>
 8009b6a:	9b00      	ldr	r3, [sp, #0]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	2300      	movs	r3, #0
 8009b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b76:	1b5d      	subs	r5, r3, r5
 8009b78:	1e6b      	subs	r3, r5, #1
 8009b7a:	9305      	str	r3, [sp, #20]
 8009b7c:	bf45      	ittet	mi
 8009b7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b82:	9304      	strmi	r3, [sp, #16]
 8009b84:	2300      	movpl	r3, #0
 8009b86:	2300      	movmi	r3, #0
 8009b88:	bf4c      	ite	mi
 8009b8a:	9305      	strmi	r3, [sp, #20]
 8009b8c:	9304      	strpl	r3, [sp, #16]
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	db3d      	blt.n	8009c10 <_dtoa_r+0x248>
 8009b94:	9b05      	ldr	r3, [sp, #20]
 8009b96:	9a00      	ldr	r2, [sp, #0]
 8009b98:	920a      	str	r2, [sp, #40]	; 0x28
 8009b9a:	4413      	add	r3, r2
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9307      	str	r3, [sp, #28]
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	f200 8089 	bhi.w	8009cbc <_dtoa_r+0x2f4>
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	bfc4      	itt	gt
 8009bae:	3b04      	subgt	r3, #4
 8009bb0:	9306      	strgt	r3, [sp, #24]
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	f1a3 0302 	sub.w	r3, r3, #2
 8009bb8:	bfcc      	ite	gt
 8009bba:	2500      	movgt	r5, #0
 8009bbc:	2501      	movle	r5, #1
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	f200 8087 	bhi.w	8009cd2 <_dtoa_r+0x30a>
 8009bc4:	e8df f003 	tbb	[pc, r3]
 8009bc8:	59383a2d 	.word	0x59383a2d
 8009bcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009bd0:	441d      	add	r5, r3
 8009bd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	bfc1      	itttt	gt
 8009bda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009be2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009be6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bea:	bfda      	itte	le
 8009bec:	f1c3 0320 	rsble	r3, r3, #32
 8009bf0:	fa06 f003 	lslle.w	r0, r6, r3
 8009bf4:	4318      	orrgt	r0, r3
 8009bf6:	f7f6 fca5 	bl	8000544 <__aeabi_ui2d>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c02:	3d01      	subs	r5, #1
 8009c04:	930e      	str	r3, [sp, #56]	; 0x38
 8009c06:	e76a      	b.n	8009ade <_dtoa_r+0x116>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7b2      	b.n	8009b72 <_dtoa_r+0x1aa>
 8009c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c0e:	e7b1      	b.n	8009b74 <_dtoa_r+0x1ac>
 8009c10:	9b04      	ldr	r3, [sp, #16]
 8009c12:	9a00      	ldr	r2, [sp, #0]
 8009c14:	1a9b      	subs	r3, r3, r2
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	4253      	negs	r3, r2
 8009c1a:	9307      	str	r3, [sp, #28]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c20:	e7bf      	b.n	8009ba2 <_dtoa_r+0x1da>
 8009c22:	2300      	movs	r3, #0
 8009c24:	9308      	str	r3, [sp, #32]
 8009c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dc55      	bgt.n	8009cd8 <_dtoa_r+0x310>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c32:	461a      	mov	r2, r3
 8009c34:	9209      	str	r2, [sp, #36]	; 0x24
 8009c36:	e00c      	b.n	8009c52 <_dtoa_r+0x28a>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e7f3      	b.n	8009c24 <_dtoa_r+0x25c>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c40:	9308      	str	r3, [sp, #32]
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	4413      	add	r3, r2
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	9303      	str	r3, [sp, #12]
 8009c4e:	bfb8      	it	lt
 8009c50:	2301      	movlt	r3, #1
 8009c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c54:	2200      	movs	r2, #0
 8009c56:	6042      	str	r2, [r0, #4]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	f102 0614 	add.w	r6, r2, #20
 8009c5e:	429e      	cmp	r6, r3
 8009c60:	6841      	ldr	r1, [r0, #4]
 8009c62:	d93d      	bls.n	8009ce0 <_dtoa_r+0x318>
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fcb7 	bl	800a5d8 <_Balloc>
 8009c6a:	9001      	str	r0, [sp, #4]
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d13b      	bne.n	8009ce8 <_dtoa_r+0x320>
 8009c70:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <_dtoa_r+0x2f0>)
 8009c72:	4602      	mov	r2, r0
 8009c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c78:	e6c0      	b.n	80099fc <_dtoa_r+0x34>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e7df      	b.n	8009c3e <_dtoa_r+0x276>
 8009c7e:	bf00      	nop
 8009c80:	636f4361 	.word	0x636f4361
 8009c84:	3fd287a7 	.word	0x3fd287a7
 8009c88:	8b60c8b3 	.word	0x8b60c8b3
 8009c8c:	3fc68a28 	.word	0x3fc68a28
 8009c90:	509f79fb 	.word	0x509f79fb
 8009c94:	3fd34413 	.word	0x3fd34413
 8009c98:	0800c069 	.word	0x0800c069
 8009c9c:	0800c080 	.word	0x0800c080
 8009ca0:	7ff00000 	.word	0x7ff00000
 8009ca4:	0800c065 	.word	0x0800c065
 8009ca8:	0800c05c 	.word	0x0800c05c
 8009cac:	0800c039 	.word	0x0800c039
 8009cb0:	3ff80000 	.word	0x3ff80000
 8009cb4:	0800c170 	.word	0x0800c170
 8009cb8:	0800c0db 	.word	0x0800c0db
 8009cbc:	2501      	movs	r5, #1
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9306      	str	r3, [sp, #24]
 8009cc2:	9508      	str	r5, [sp, #32]
 8009cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2312      	movs	r3, #18
 8009cd0:	e7b0      	b.n	8009c34 <_dtoa_r+0x26c>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	9308      	str	r3, [sp, #32]
 8009cd6:	e7f5      	b.n	8009cc4 <_dtoa_r+0x2fc>
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cde:	e7b8      	b.n	8009c52 <_dtoa_r+0x28a>
 8009ce0:	3101      	adds	r1, #1
 8009ce2:	6041      	str	r1, [r0, #4]
 8009ce4:	0052      	lsls	r2, r2, #1
 8009ce6:	e7b8      	b.n	8009c5a <_dtoa_r+0x292>
 8009ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cea:	9a01      	ldr	r2, [sp, #4]
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	2b0e      	cmp	r3, #14
 8009cf2:	f200 809d 	bhi.w	8009e30 <_dtoa_r+0x468>
 8009cf6:	2d00      	cmp	r5, #0
 8009cf8:	f000 809a 	beq.w	8009e30 <_dtoa_r+0x468>
 8009cfc:	9b00      	ldr	r3, [sp, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd32      	ble.n	8009d68 <_dtoa_r+0x3a0>
 8009d02:	4ab7      	ldr	r2, [pc, #732]	; (8009fe0 <_dtoa_r+0x618>)
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	05d8      	lsls	r0, r3, #23
 8009d14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d18:	d516      	bpl.n	8009d48 <_dtoa_r+0x380>
 8009d1a:	4bb2      	ldr	r3, [pc, #712]	; (8009fe4 <_dtoa_r+0x61c>)
 8009d1c:	ec51 0b19 	vmov	r0, r1, d9
 8009d20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d24:	f7f6 fdb2 	bl	800088c <__aeabi_ddiv>
 8009d28:	f007 070f 	and.w	r7, r7, #15
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	468b      	mov	fp, r1
 8009d30:	2503      	movs	r5, #3
 8009d32:	4eac      	ldr	r6, [pc, #688]	; (8009fe4 <_dtoa_r+0x61c>)
 8009d34:	b957      	cbnz	r7, 8009d4c <_dtoa_r+0x384>
 8009d36:	4642      	mov	r2, r8
 8009d38:	464b      	mov	r3, r9
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	f7f6 fda5 	bl	800088c <__aeabi_ddiv>
 8009d42:	4682      	mov	sl, r0
 8009d44:	468b      	mov	fp, r1
 8009d46:	e028      	b.n	8009d9a <_dtoa_r+0x3d2>
 8009d48:	2502      	movs	r5, #2
 8009d4a:	e7f2      	b.n	8009d32 <_dtoa_r+0x36a>
 8009d4c:	07f9      	lsls	r1, r7, #31
 8009d4e:	d508      	bpl.n	8009d62 <_dtoa_r+0x39a>
 8009d50:	4640      	mov	r0, r8
 8009d52:	4649      	mov	r1, r9
 8009d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d58:	f7f6 fc6e 	bl	8000638 <__aeabi_dmul>
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	4680      	mov	r8, r0
 8009d60:	4689      	mov	r9, r1
 8009d62:	107f      	asrs	r7, r7, #1
 8009d64:	3608      	adds	r6, #8
 8009d66:	e7e5      	b.n	8009d34 <_dtoa_r+0x36c>
 8009d68:	f000 809b 	beq.w	8009ea2 <_dtoa_r+0x4da>
 8009d6c:	9b00      	ldr	r3, [sp, #0]
 8009d6e:	4f9d      	ldr	r7, [pc, #628]	; (8009fe4 <_dtoa_r+0x61c>)
 8009d70:	425e      	negs	r6, r3
 8009d72:	4b9b      	ldr	r3, [pc, #620]	; (8009fe0 <_dtoa_r+0x618>)
 8009d74:	f006 020f 	and.w	r2, r6, #15
 8009d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	ec51 0b19 	vmov	r0, r1, d9
 8009d84:	f7f6 fc58 	bl	8000638 <__aeabi_dmul>
 8009d88:	1136      	asrs	r6, r6, #4
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	468b      	mov	fp, r1
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2502      	movs	r5, #2
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	d17a      	bne.n	8009e8c <_dtoa_r+0x4c4>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1d3      	bne.n	8009d42 <_dtoa_r+0x37a>
 8009d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 8082 	beq.w	8009ea6 <_dtoa_r+0x4de>
 8009da2:	4b91      	ldr	r3, [pc, #580]	; (8009fe8 <_dtoa_r+0x620>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4650      	mov	r0, sl
 8009da8:	4659      	mov	r1, fp
 8009daa:	f7f6 feb7 	bl	8000b1c <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d079      	beq.n	8009ea6 <_dtoa_r+0x4de>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d076      	beq.n	8009ea6 <_dtoa_r+0x4de>
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dd36      	ble.n	8009e2c <_dtoa_r+0x464>
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	4659      	mov	r1, fp
 8009dc4:	1e5f      	subs	r7, r3, #1
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4b88      	ldr	r3, [pc, #544]	; (8009fec <_dtoa_r+0x624>)
 8009dca:	f7f6 fc35 	bl	8000638 <__aeabi_dmul>
 8009dce:	9e02      	ldr	r6, [sp, #8]
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	468b      	mov	fp, r1
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7f6 fbc4 	bl	8000564 <__aeabi_i2d>
 8009ddc:	4652      	mov	r2, sl
 8009dde:	465b      	mov	r3, fp
 8009de0:	f7f6 fc2a 	bl	8000638 <__aeabi_dmul>
 8009de4:	4b82      	ldr	r3, [pc, #520]	; (8009ff0 <_dtoa_r+0x628>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	f7f6 fa70 	bl	80002cc <__adddf3>
 8009dec:	46d0      	mov	r8, sl
 8009dee:	46d9      	mov	r9, fp
 8009df0:	4682      	mov	sl, r0
 8009df2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	d158      	bne.n	8009eac <_dtoa_r+0x4e4>
 8009dfa:	4b7e      	ldr	r3, [pc, #504]	; (8009ff4 <_dtoa_r+0x62c>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4640      	mov	r0, r8
 8009e00:	4649      	mov	r1, r9
 8009e02:	f7f6 fa61 	bl	80002c8 <__aeabi_dsub>
 8009e06:	4652      	mov	r2, sl
 8009e08:	465b      	mov	r3, fp
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	4689      	mov	r9, r1
 8009e0e:	f7f6 fea3 	bl	8000b58 <__aeabi_dcmpgt>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f040 8295 	bne.w	800a342 <_dtoa_r+0x97a>
 8009e18:	4652      	mov	r2, sl
 8009e1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e1e:	4640      	mov	r0, r8
 8009e20:	4649      	mov	r1, r9
 8009e22:	f7f6 fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f040 8289 	bne.w	800a33e <_dtoa_r+0x976>
 8009e2c:	ec5b ab19 	vmov	sl, fp, d9
 8009e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f2c0 8148 	blt.w	800a0c8 <_dtoa_r+0x700>
 8009e38:	9a00      	ldr	r2, [sp, #0]
 8009e3a:	2a0e      	cmp	r2, #14
 8009e3c:	f300 8144 	bgt.w	800a0c8 <_dtoa_r+0x700>
 8009e40:	4b67      	ldr	r3, [pc, #412]	; (8009fe0 <_dtoa_r+0x618>)
 8009e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f280 80d5 	bge.w	8009ffc <_dtoa_r+0x634>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f300 80d1 	bgt.w	8009ffc <_dtoa_r+0x634>
 8009e5a:	f040 826f 	bne.w	800a33c <_dtoa_r+0x974>
 8009e5e:	4b65      	ldr	r3, [pc, #404]	; (8009ff4 <_dtoa_r+0x62c>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 fbe7 	bl	8000638 <__aeabi_dmul>
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	465b      	mov	r3, fp
 8009e6e:	f7f6 fe69 	bl	8000b44 <__aeabi_dcmpge>
 8009e72:	9e03      	ldr	r6, [sp, #12]
 8009e74:	4637      	mov	r7, r6
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f040 8245 	bne.w	800a306 <_dtoa_r+0x93e>
 8009e7c:	9d01      	ldr	r5, [sp, #4]
 8009e7e:	2331      	movs	r3, #49	; 0x31
 8009e80:	f805 3b01 	strb.w	r3, [r5], #1
 8009e84:	9b00      	ldr	r3, [sp, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	e240      	b.n	800a30e <_dtoa_r+0x946>
 8009e8c:	07f2      	lsls	r2, r6, #31
 8009e8e:	d505      	bpl.n	8009e9c <_dtoa_r+0x4d4>
 8009e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e94:	f7f6 fbd0 	bl	8000638 <__aeabi_dmul>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	1076      	asrs	r6, r6, #1
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	e777      	b.n	8009d92 <_dtoa_r+0x3ca>
 8009ea2:	2502      	movs	r5, #2
 8009ea4:	e779      	b.n	8009d9a <_dtoa_r+0x3d2>
 8009ea6:	9f00      	ldr	r7, [sp, #0]
 8009ea8:	9e03      	ldr	r6, [sp, #12]
 8009eaa:	e794      	b.n	8009dd6 <_dtoa_r+0x40e>
 8009eac:	9901      	ldr	r1, [sp, #4]
 8009eae:	4b4c      	ldr	r3, [pc, #304]	; (8009fe0 <_dtoa_r+0x618>)
 8009eb0:	4431      	add	r1, r6
 8009eb2:	910d      	str	r1, [sp, #52]	; 0x34
 8009eb4:	9908      	ldr	r1, [sp, #32]
 8009eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ebe:	2900      	cmp	r1, #0
 8009ec0:	d043      	beq.n	8009f4a <_dtoa_r+0x582>
 8009ec2:	494d      	ldr	r1, [pc, #308]	; (8009ff8 <_dtoa_r+0x630>)
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f7f6 fce1 	bl	800088c <__aeabi_ddiv>
 8009eca:	4652      	mov	r2, sl
 8009ecc:	465b      	mov	r3, fp
 8009ece:	f7f6 f9fb 	bl	80002c8 <__aeabi_dsub>
 8009ed2:	9d01      	ldr	r5, [sp, #4]
 8009ed4:	4682      	mov	sl, r0
 8009ed6:	468b      	mov	fp, r1
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4640      	mov	r0, r8
 8009edc:	f7f6 fe5c 	bl	8000b98 <__aeabi_d2iz>
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	f7f6 fb3f 	bl	8000564 <__aeabi_i2d>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	f7f6 f9eb 	bl	80002c8 <__aeabi_dsub>
 8009ef2:	3630      	adds	r6, #48	; 0x30
 8009ef4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ef8:	4652      	mov	r2, sl
 8009efa:	465b      	mov	r3, fp
 8009efc:	4680      	mov	r8, r0
 8009efe:	4689      	mov	r9, r1
 8009f00:	f7f6 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d163      	bne.n	8009fd0 <_dtoa_r+0x608>
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	4936      	ldr	r1, [pc, #216]	; (8009fe8 <_dtoa_r+0x620>)
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f7f6 f9da 	bl	80002c8 <__aeabi_dsub>
 8009f14:	4652      	mov	r2, sl
 8009f16:	465b      	mov	r3, fp
 8009f18:	f7f6 fe00 	bl	8000b1c <__aeabi_dcmplt>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f040 80b5 	bne.w	800a08c <_dtoa_r+0x6c4>
 8009f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f24:	429d      	cmp	r5, r3
 8009f26:	d081      	beq.n	8009e2c <_dtoa_r+0x464>
 8009f28:	4b30      	ldr	r3, [pc, #192]	; (8009fec <_dtoa_r+0x624>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4650      	mov	r0, sl
 8009f2e:	4659      	mov	r1, fp
 8009f30:	f7f6 fb82 	bl	8000638 <__aeabi_dmul>
 8009f34:	4b2d      	ldr	r3, [pc, #180]	; (8009fec <_dtoa_r+0x624>)
 8009f36:	4682      	mov	sl, r0
 8009f38:	468b      	mov	fp, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f7f6 fb7a 	bl	8000638 <__aeabi_dmul>
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	e7c6      	b.n	8009ed8 <_dtoa_r+0x510>
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	f7f6 fb73 	bl	8000638 <__aeabi_dmul>
 8009f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f54:	9d01      	ldr	r5, [sp, #4]
 8009f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f58:	4682      	mov	sl, r0
 8009f5a:	468b      	mov	fp, r1
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7f6 fe1a 	bl	8000b98 <__aeabi_d2iz>
 8009f64:	4606      	mov	r6, r0
 8009f66:	f7f6 fafd 	bl	8000564 <__aeabi_i2d>
 8009f6a:	3630      	adds	r6, #48	; 0x30
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4640      	mov	r0, r8
 8009f72:	4649      	mov	r1, r9
 8009f74:	f7f6 f9a8 	bl	80002c8 <__aeabi_dsub>
 8009f78:	f805 6b01 	strb.w	r6, [r5], #1
 8009f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	4680      	mov	r8, r0
 8009f82:	4689      	mov	r9, r1
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	d124      	bne.n	8009fd4 <_dtoa_r+0x60c>
 8009f8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <_dtoa_r+0x630>)
 8009f8c:	4650      	mov	r0, sl
 8009f8e:	4659      	mov	r1, fp
 8009f90:	f7f6 f99c 	bl	80002cc <__adddf3>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	f7f6 fddc 	bl	8000b58 <__aeabi_dcmpgt>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d173      	bne.n	800a08c <_dtoa_r+0x6c4>
 8009fa4:	4652      	mov	r2, sl
 8009fa6:	465b      	mov	r3, fp
 8009fa8:	4913      	ldr	r1, [pc, #76]	; (8009ff8 <_dtoa_r+0x630>)
 8009faa:	2000      	movs	r0, #0
 8009fac:	f7f6 f98c 	bl	80002c8 <__aeabi_dsub>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	f7f6 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f43f af35 	beq.w	8009e2c <_dtoa_r+0x464>
 8009fc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fc4:	1e6b      	subs	r3, r5, #1
 8009fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fcc:	2b30      	cmp	r3, #48	; 0x30
 8009fce:	d0f8      	beq.n	8009fc2 <_dtoa_r+0x5fa>
 8009fd0:	9700      	str	r7, [sp, #0]
 8009fd2:	e049      	b.n	800a068 <_dtoa_r+0x6a0>
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <_dtoa_r+0x624>)
 8009fd6:	f7f6 fb2f 	bl	8000638 <__aeabi_dmul>
 8009fda:	4680      	mov	r8, r0
 8009fdc:	4689      	mov	r9, r1
 8009fde:	e7bd      	b.n	8009f5c <_dtoa_r+0x594>
 8009fe0:	0800c170 	.word	0x0800c170
 8009fe4:	0800c148 	.word	0x0800c148
 8009fe8:	3ff00000 	.word	0x3ff00000
 8009fec:	40240000 	.word	0x40240000
 8009ff0:	401c0000 	.word	0x401c0000
 8009ff4:	40140000 	.word	0x40140000
 8009ff8:	3fe00000 	.word	0x3fe00000
 8009ffc:	9d01      	ldr	r5, [sp, #4]
 8009ffe:	4656      	mov	r6, sl
 800a000:	465f      	mov	r7, fp
 800a002:	4642      	mov	r2, r8
 800a004:	464b      	mov	r3, r9
 800a006:	4630      	mov	r0, r6
 800a008:	4639      	mov	r1, r7
 800a00a:	f7f6 fc3f 	bl	800088c <__aeabi_ddiv>
 800a00e:	f7f6 fdc3 	bl	8000b98 <__aeabi_d2iz>
 800a012:	4682      	mov	sl, r0
 800a014:	f7f6 faa6 	bl	8000564 <__aeabi_i2d>
 800a018:	4642      	mov	r2, r8
 800a01a:	464b      	mov	r3, r9
 800a01c:	f7f6 fb0c 	bl	8000638 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a02c:	f7f6 f94c 	bl	80002c8 <__aeabi_dsub>
 800a030:	f805 6b01 	strb.w	r6, [r5], #1
 800a034:	9e01      	ldr	r6, [sp, #4]
 800a036:	9f03      	ldr	r7, [sp, #12]
 800a038:	1bae      	subs	r6, r5, r6
 800a03a:	42b7      	cmp	r7, r6
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	d135      	bne.n	800a0ae <_dtoa_r+0x6e6>
 800a042:	f7f6 f943 	bl	80002cc <__adddf3>
 800a046:	4642      	mov	r2, r8
 800a048:	464b      	mov	r3, r9
 800a04a:	4606      	mov	r6, r0
 800a04c:	460f      	mov	r7, r1
 800a04e:	f7f6 fd83 	bl	8000b58 <__aeabi_dcmpgt>
 800a052:	b9d0      	cbnz	r0, 800a08a <_dtoa_r+0x6c2>
 800a054:	4642      	mov	r2, r8
 800a056:	464b      	mov	r3, r9
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 800a060:	b110      	cbz	r0, 800a068 <_dtoa_r+0x6a0>
 800a062:	f01a 0f01 	tst.w	sl, #1
 800a066:	d110      	bne.n	800a08a <_dtoa_r+0x6c2>
 800a068:	4620      	mov	r0, r4
 800a06a:	ee18 1a10 	vmov	r1, s16
 800a06e:	f000 faf3 	bl	800a658 <_Bfree>
 800a072:	2300      	movs	r3, #0
 800a074:	9800      	ldr	r0, [sp, #0]
 800a076:	702b      	strb	r3, [r5, #0]
 800a078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a07a:	3001      	adds	r0, #1
 800a07c:	6018      	str	r0, [r3, #0]
 800a07e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a080:	2b00      	cmp	r3, #0
 800a082:	f43f acf1 	beq.w	8009a68 <_dtoa_r+0xa0>
 800a086:	601d      	str	r5, [r3, #0]
 800a088:	e4ee      	b.n	8009a68 <_dtoa_r+0xa0>
 800a08a:	9f00      	ldr	r7, [sp, #0]
 800a08c:	462b      	mov	r3, r5
 800a08e:	461d      	mov	r5, r3
 800a090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a094:	2a39      	cmp	r2, #57	; 0x39
 800a096:	d106      	bne.n	800a0a6 <_dtoa_r+0x6de>
 800a098:	9a01      	ldr	r2, [sp, #4]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d1f7      	bne.n	800a08e <_dtoa_r+0x6c6>
 800a09e:	9901      	ldr	r1, [sp, #4]
 800a0a0:	2230      	movs	r2, #48	; 0x30
 800a0a2:	3701      	adds	r7, #1
 800a0a4:	700a      	strb	r2, [r1, #0]
 800a0a6:	781a      	ldrb	r2, [r3, #0]
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e790      	b.n	8009fd0 <_dtoa_r+0x608>
 800a0ae:	4ba6      	ldr	r3, [pc, #664]	; (800a348 <_dtoa_r+0x980>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f7f6 fac1 	bl	8000638 <__aeabi_dmul>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	460f      	mov	r7, r1
 800a0be:	f7f6 fd23 	bl	8000b08 <__aeabi_dcmpeq>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d09d      	beq.n	800a002 <_dtoa_r+0x63a>
 800a0c6:	e7cf      	b.n	800a068 <_dtoa_r+0x6a0>
 800a0c8:	9a08      	ldr	r2, [sp, #32]
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	f000 80d7 	beq.w	800a27e <_dtoa_r+0x8b6>
 800a0d0:	9a06      	ldr	r2, [sp, #24]
 800a0d2:	2a01      	cmp	r2, #1
 800a0d4:	f300 80ba 	bgt.w	800a24c <_dtoa_r+0x884>
 800a0d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0da:	2a00      	cmp	r2, #0
 800a0dc:	f000 80b2 	beq.w	800a244 <_dtoa_r+0x87c>
 800a0e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0e4:	9e07      	ldr	r6, [sp, #28]
 800a0e6:	9d04      	ldr	r5, [sp, #16]
 800a0e8:	9a04      	ldr	r2, [sp, #16]
 800a0ea:	441a      	add	r2, r3
 800a0ec:	9204      	str	r2, [sp, #16]
 800a0ee:	9a05      	ldr	r2, [sp, #20]
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	441a      	add	r2, r3
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	9205      	str	r2, [sp, #20]
 800a0f8:	f000 fb66 	bl	800a7c8 <__i2b>
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	dd0c      	ble.n	800a11c <_dtoa_r+0x754>
 800a102:	9b05      	ldr	r3, [sp, #20]
 800a104:	2b00      	cmp	r3, #0
 800a106:	dd09      	ble.n	800a11c <_dtoa_r+0x754>
 800a108:	42ab      	cmp	r3, r5
 800a10a:	9a04      	ldr	r2, [sp, #16]
 800a10c:	bfa8      	it	ge
 800a10e:	462b      	movge	r3, r5
 800a110:	1ad2      	subs	r2, r2, r3
 800a112:	9204      	str	r2, [sp, #16]
 800a114:	9a05      	ldr	r2, [sp, #20]
 800a116:	1aed      	subs	r5, r5, r3
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	9305      	str	r3, [sp, #20]
 800a11c:	9b07      	ldr	r3, [sp, #28]
 800a11e:	b31b      	cbz	r3, 800a168 <_dtoa_r+0x7a0>
 800a120:	9b08      	ldr	r3, [sp, #32]
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 80af 	beq.w	800a286 <_dtoa_r+0x8be>
 800a128:	2e00      	cmp	r6, #0
 800a12a:	dd13      	ble.n	800a154 <_dtoa_r+0x78c>
 800a12c:	4639      	mov	r1, r7
 800a12e:	4632      	mov	r2, r6
 800a130:	4620      	mov	r0, r4
 800a132:	f000 fc09 	bl	800a948 <__pow5mult>
 800a136:	ee18 2a10 	vmov	r2, s16
 800a13a:	4601      	mov	r1, r0
 800a13c:	4607      	mov	r7, r0
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 fb58 	bl	800a7f4 <__multiply>
 800a144:	ee18 1a10 	vmov	r1, s16
 800a148:	4680      	mov	r8, r0
 800a14a:	4620      	mov	r0, r4
 800a14c:	f000 fa84 	bl	800a658 <_Bfree>
 800a150:	ee08 8a10 	vmov	s16, r8
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	1b9a      	subs	r2, r3, r6
 800a158:	d006      	beq.n	800a168 <_dtoa_r+0x7a0>
 800a15a:	ee18 1a10 	vmov	r1, s16
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 fbf2 	bl	800a948 <__pow5mult>
 800a164:	ee08 0a10 	vmov	s16, r0
 800a168:	2101      	movs	r1, #1
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 fb2c 	bl	800a7c8 <__i2b>
 800a170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	4606      	mov	r6, r0
 800a176:	f340 8088 	ble.w	800a28a <_dtoa_r+0x8c2>
 800a17a:	461a      	mov	r2, r3
 800a17c:	4601      	mov	r1, r0
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fbe2 	bl	800a948 <__pow5mult>
 800a184:	9b06      	ldr	r3, [sp, #24]
 800a186:	2b01      	cmp	r3, #1
 800a188:	4606      	mov	r6, r0
 800a18a:	f340 8081 	ble.w	800a290 <_dtoa_r+0x8c8>
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	6933      	ldr	r3, [r6, #16]
 800a194:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a198:	6918      	ldr	r0, [r3, #16]
 800a19a:	f000 fac5 	bl	800a728 <__hi0bits>
 800a19e:	f1c0 0020 	rsb	r0, r0, #32
 800a1a2:	9b05      	ldr	r3, [sp, #20]
 800a1a4:	4418      	add	r0, r3
 800a1a6:	f010 001f 	ands.w	r0, r0, #31
 800a1aa:	f000 8092 	beq.w	800a2d2 <_dtoa_r+0x90a>
 800a1ae:	f1c0 0320 	rsb	r3, r0, #32
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	f340 808a 	ble.w	800a2cc <_dtoa_r+0x904>
 800a1b8:	f1c0 001c 	rsb	r0, r0, #28
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	4403      	add	r3, r0
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	4403      	add	r3, r0
 800a1c6:	4405      	add	r5, r0
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	9b04      	ldr	r3, [sp, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd07      	ble.n	800a1e0 <_dtoa_r+0x818>
 800a1d0:	ee18 1a10 	vmov	r1, s16
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 fc10 	bl	800a9fc <__lshift>
 800a1dc:	ee08 0a10 	vmov	s16, r0
 800a1e0:	9b05      	ldr	r3, [sp, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	dd05      	ble.n	800a1f2 <_dtoa_r+0x82a>
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 fc06 	bl	800a9fc <__lshift>
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d06e      	beq.n	800a2d6 <_dtoa_r+0x90e>
 800a1f8:	ee18 0a10 	vmov	r0, s16
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	f000 fc6d 	bl	800aadc <__mcmp>
 800a202:	2800      	cmp	r0, #0
 800a204:	da67      	bge.n	800a2d6 <_dtoa_r+0x90e>
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	3b01      	subs	r3, #1
 800a20a:	ee18 1a10 	vmov	r1, s16
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	220a      	movs	r2, #10
 800a212:	2300      	movs	r3, #0
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fa41 	bl	800a69c <__multadd>
 800a21a:	9b08      	ldr	r3, [sp, #32]
 800a21c:	ee08 0a10 	vmov	s16, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 81b1 	beq.w	800a588 <_dtoa_r+0xbc0>
 800a226:	2300      	movs	r3, #0
 800a228:	4639      	mov	r1, r7
 800a22a:	220a      	movs	r2, #10
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fa35 	bl	800a69c <__multadd>
 800a232:	9b02      	ldr	r3, [sp, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	4607      	mov	r7, r0
 800a238:	f300 808e 	bgt.w	800a358 <_dtoa_r+0x990>
 800a23c:	9b06      	ldr	r3, [sp, #24]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	dc51      	bgt.n	800a2e6 <_dtoa_r+0x91e>
 800a242:	e089      	b.n	800a358 <_dtoa_r+0x990>
 800a244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a24a:	e74b      	b.n	800a0e4 <_dtoa_r+0x71c>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	1e5e      	subs	r6, r3, #1
 800a250:	9b07      	ldr	r3, [sp, #28]
 800a252:	42b3      	cmp	r3, r6
 800a254:	bfbf      	itttt	lt
 800a256:	9b07      	ldrlt	r3, [sp, #28]
 800a258:	9607      	strlt	r6, [sp, #28]
 800a25a:	1af2      	sublt	r2, r6, r3
 800a25c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a25e:	bfb6      	itet	lt
 800a260:	189b      	addlt	r3, r3, r2
 800a262:	1b9e      	subge	r6, r3, r6
 800a264:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	bfb8      	it	lt
 800a26a:	2600      	movlt	r6, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bfb7      	itett	lt
 800a270:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a274:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a278:	1a9d      	sublt	r5, r3, r2
 800a27a:	2300      	movlt	r3, #0
 800a27c:	e734      	b.n	800a0e8 <_dtoa_r+0x720>
 800a27e:	9e07      	ldr	r6, [sp, #28]
 800a280:	9d04      	ldr	r5, [sp, #16]
 800a282:	9f08      	ldr	r7, [sp, #32]
 800a284:	e73b      	b.n	800a0fe <_dtoa_r+0x736>
 800a286:	9a07      	ldr	r2, [sp, #28]
 800a288:	e767      	b.n	800a15a <_dtoa_r+0x792>
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	dc18      	bgt.n	800a2c2 <_dtoa_r+0x8fa>
 800a290:	f1ba 0f00 	cmp.w	sl, #0
 800a294:	d115      	bne.n	800a2c2 <_dtoa_r+0x8fa>
 800a296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a29a:	b993      	cbnz	r3, 800a2c2 <_dtoa_r+0x8fa>
 800a29c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2a0:	0d1b      	lsrs	r3, r3, #20
 800a2a2:	051b      	lsls	r3, r3, #20
 800a2a4:	b183      	cbz	r3, 800a2c8 <_dtoa_r+0x900>
 800a2a6:	9b04      	ldr	r3, [sp, #16]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	9b05      	ldr	r3, [sp, #20]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	9305      	str	r3, [sp, #20]
 800a2b2:	f04f 0801 	mov.w	r8, #1
 800a2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f47f af6a 	bne.w	800a192 <_dtoa_r+0x7ca>
 800a2be:	2001      	movs	r0, #1
 800a2c0:	e76f      	b.n	800a1a2 <_dtoa_r+0x7da>
 800a2c2:	f04f 0800 	mov.w	r8, #0
 800a2c6:	e7f6      	b.n	800a2b6 <_dtoa_r+0x8ee>
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	e7f4      	b.n	800a2b6 <_dtoa_r+0x8ee>
 800a2cc:	f43f af7d 	beq.w	800a1ca <_dtoa_r+0x802>
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	301c      	adds	r0, #28
 800a2d4:	e772      	b.n	800a1bc <_dtoa_r+0x7f4>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dc37      	bgt.n	800a34c <_dtoa_r+0x984>
 800a2dc:	9b06      	ldr	r3, [sp, #24]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	dd34      	ble.n	800a34c <_dtoa_r+0x984>
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	9302      	str	r3, [sp, #8]
 800a2e6:	9b02      	ldr	r3, [sp, #8]
 800a2e8:	b96b      	cbnz	r3, 800a306 <_dtoa_r+0x93e>
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 f9d4 	bl	800a69c <__multadd>
 800a2f4:	4601      	mov	r1, r0
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	ee18 0a10 	vmov	r0, s16
 800a2fc:	f000 fbee 	bl	800aadc <__mcmp>
 800a300:	2800      	cmp	r0, #0
 800a302:	f73f adbb 	bgt.w	8009e7c <_dtoa_r+0x4b4>
 800a306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a308:	9d01      	ldr	r5, [sp, #4]
 800a30a:	43db      	mvns	r3, r3
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	f04f 0800 	mov.w	r8, #0
 800a312:	4631      	mov	r1, r6
 800a314:	4620      	mov	r0, r4
 800a316:	f000 f99f 	bl	800a658 <_Bfree>
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	f43f aea4 	beq.w	800a068 <_dtoa_r+0x6a0>
 800a320:	f1b8 0f00 	cmp.w	r8, #0
 800a324:	d005      	beq.n	800a332 <_dtoa_r+0x96a>
 800a326:	45b8      	cmp	r8, r7
 800a328:	d003      	beq.n	800a332 <_dtoa_r+0x96a>
 800a32a:	4641      	mov	r1, r8
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f993 	bl	800a658 <_Bfree>
 800a332:	4639      	mov	r1, r7
 800a334:	4620      	mov	r0, r4
 800a336:	f000 f98f 	bl	800a658 <_Bfree>
 800a33a:	e695      	b.n	800a068 <_dtoa_r+0x6a0>
 800a33c:	2600      	movs	r6, #0
 800a33e:	4637      	mov	r7, r6
 800a340:	e7e1      	b.n	800a306 <_dtoa_r+0x93e>
 800a342:	9700      	str	r7, [sp, #0]
 800a344:	4637      	mov	r7, r6
 800a346:	e599      	b.n	8009e7c <_dtoa_r+0x4b4>
 800a348:	40240000 	.word	0x40240000
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 80ca 	beq.w	800a4e8 <_dtoa_r+0xb20>
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	9302      	str	r3, [sp, #8]
 800a358:	2d00      	cmp	r5, #0
 800a35a:	dd05      	ble.n	800a368 <_dtoa_r+0x9a0>
 800a35c:	4639      	mov	r1, r7
 800a35e:	462a      	mov	r2, r5
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fb4b 	bl	800a9fc <__lshift>
 800a366:	4607      	mov	r7, r0
 800a368:	f1b8 0f00 	cmp.w	r8, #0
 800a36c:	d05b      	beq.n	800a426 <_dtoa_r+0xa5e>
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4620      	mov	r0, r4
 800a372:	f000 f931 	bl	800a5d8 <_Balloc>
 800a376:	4605      	mov	r5, r0
 800a378:	b928      	cbnz	r0, 800a386 <_dtoa_r+0x9be>
 800a37a:	4b87      	ldr	r3, [pc, #540]	; (800a598 <_dtoa_r+0xbd0>)
 800a37c:	4602      	mov	r2, r0
 800a37e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a382:	f7ff bb3b 	b.w	80099fc <_dtoa_r+0x34>
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	3202      	adds	r2, #2
 800a38a:	0092      	lsls	r2, r2, #2
 800a38c:	f107 010c 	add.w	r1, r7, #12
 800a390:	300c      	adds	r0, #12
 800a392:	f000 f913 	bl	800a5bc <memcpy>
 800a396:	2201      	movs	r2, #1
 800a398:	4629      	mov	r1, r5
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fb2e 	bl	800a9fc <__lshift>
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	f103 0901 	add.w	r9, r3, #1
 800a3a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	f00a 0301 	and.w	r3, sl, #1
 800a3b2:	46b8      	mov	r8, r7
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	ee18 0a10 	vmov	r0, s16
 800a3be:	f7ff fa77 	bl	80098b0 <quorem>
 800a3c2:	4641      	mov	r1, r8
 800a3c4:	9002      	str	r0, [sp, #8]
 800a3c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3ca:	ee18 0a10 	vmov	r0, s16
 800a3ce:	f000 fb85 	bl	800aadc <__mcmp>
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	9003      	str	r0, [sp, #12]
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fb9b 	bl	800ab14 <__mdiff>
 800a3de:	68c2      	ldr	r2, [r0, #12]
 800a3e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	bb02      	cbnz	r2, 800a42a <_dtoa_r+0xa62>
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	ee18 0a10 	vmov	r0, s16
 800a3ee:	f000 fb75 	bl	800aadc <__mcmp>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	9207      	str	r2, [sp, #28]
 800a3fa:	f000 f92d 	bl	800a658 <_Bfree>
 800a3fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a402:	ea43 0102 	orr.w	r1, r3, r2
 800a406:	9b04      	ldr	r3, [sp, #16]
 800a408:	430b      	orrs	r3, r1
 800a40a:	464d      	mov	r5, r9
 800a40c:	d10f      	bne.n	800a42e <_dtoa_r+0xa66>
 800a40e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a412:	d02a      	beq.n	800a46a <_dtoa_r+0xaa2>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	dd02      	ble.n	800a420 <_dtoa_r+0xa58>
 800a41a:	9b02      	ldr	r3, [sp, #8]
 800a41c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a420:	f88b a000 	strb.w	sl, [fp]
 800a424:	e775      	b.n	800a312 <_dtoa_r+0x94a>
 800a426:	4638      	mov	r0, r7
 800a428:	e7ba      	b.n	800a3a0 <_dtoa_r+0x9d8>
 800a42a:	2201      	movs	r2, #1
 800a42c:	e7e2      	b.n	800a3f4 <_dtoa_r+0xa2c>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	db04      	blt.n	800a43e <_dtoa_r+0xa76>
 800a434:	9906      	ldr	r1, [sp, #24]
 800a436:	430b      	orrs	r3, r1
 800a438:	9904      	ldr	r1, [sp, #16]
 800a43a:	430b      	orrs	r3, r1
 800a43c:	d122      	bne.n	800a484 <_dtoa_r+0xabc>
 800a43e:	2a00      	cmp	r2, #0
 800a440:	ddee      	ble.n	800a420 <_dtoa_r+0xa58>
 800a442:	ee18 1a10 	vmov	r1, s16
 800a446:	2201      	movs	r2, #1
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fad7 	bl	800a9fc <__lshift>
 800a44e:	4631      	mov	r1, r6
 800a450:	ee08 0a10 	vmov	s16, r0
 800a454:	f000 fb42 	bl	800aadc <__mcmp>
 800a458:	2800      	cmp	r0, #0
 800a45a:	dc03      	bgt.n	800a464 <_dtoa_r+0xa9c>
 800a45c:	d1e0      	bne.n	800a420 <_dtoa_r+0xa58>
 800a45e:	f01a 0f01 	tst.w	sl, #1
 800a462:	d0dd      	beq.n	800a420 <_dtoa_r+0xa58>
 800a464:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a468:	d1d7      	bne.n	800a41a <_dtoa_r+0xa52>
 800a46a:	2339      	movs	r3, #57	; 0x39
 800a46c:	f88b 3000 	strb.w	r3, [fp]
 800a470:	462b      	mov	r3, r5
 800a472:	461d      	mov	r5, r3
 800a474:	3b01      	subs	r3, #1
 800a476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a47a:	2a39      	cmp	r2, #57	; 0x39
 800a47c:	d071      	beq.n	800a562 <_dtoa_r+0xb9a>
 800a47e:	3201      	adds	r2, #1
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	e746      	b.n	800a312 <_dtoa_r+0x94a>
 800a484:	2a00      	cmp	r2, #0
 800a486:	dd07      	ble.n	800a498 <_dtoa_r+0xad0>
 800a488:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a48c:	d0ed      	beq.n	800a46a <_dtoa_r+0xaa2>
 800a48e:	f10a 0301 	add.w	r3, sl, #1
 800a492:	f88b 3000 	strb.w	r3, [fp]
 800a496:	e73c      	b.n	800a312 <_dtoa_r+0x94a>
 800a498:	9b05      	ldr	r3, [sp, #20]
 800a49a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a49e:	4599      	cmp	r9, r3
 800a4a0:	d047      	beq.n	800a532 <_dtoa_r+0xb6a>
 800a4a2:	ee18 1a10 	vmov	r1, s16
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	220a      	movs	r2, #10
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f8f6 	bl	800a69c <__multadd>
 800a4b0:	45b8      	cmp	r8, r7
 800a4b2:	ee08 0a10 	vmov	s16, r0
 800a4b6:	f04f 0300 	mov.w	r3, #0
 800a4ba:	f04f 020a 	mov.w	r2, #10
 800a4be:	4641      	mov	r1, r8
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	d106      	bne.n	800a4d2 <_dtoa_r+0xb0a>
 800a4c4:	f000 f8ea 	bl	800a69c <__multadd>
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	4607      	mov	r7, r0
 800a4cc:	f109 0901 	add.w	r9, r9, #1
 800a4d0:	e772      	b.n	800a3b8 <_dtoa_r+0x9f0>
 800a4d2:	f000 f8e3 	bl	800a69c <__multadd>
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	4680      	mov	r8, r0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	220a      	movs	r2, #10
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f8dc 	bl	800a69c <__multadd>
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	e7f1      	b.n	800a4cc <_dtoa_r+0xb04>
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	9302      	str	r3, [sp, #8]
 800a4ec:	9d01      	ldr	r5, [sp, #4]
 800a4ee:	ee18 0a10 	vmov	r0, s16
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	f7ff f9dc 	bl	80098b0 <quorem>
 800a4f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	f805 ab01 	strb.w	sl, [r5], #1
 800a502:	1aea      	subs	r2, r5, r3
 800a504:	9b02      	ldr	r3, [sp, #8]
 800a506:	4293      	cmp	r3, r2
 800a508:	dd09      	ble.n	800a51e <_dtoa_r+0xb56>
 800a50a:	ee18 1a10 	vmov	r1, s16
 800a50e:	2300      	movs	r3, #0
 800a510:	220a      	movs	r2, #10
 800a512:	4620      	mov	r0, r4
 800a514:	f000 f8c2 	bl	800a69c <__multadd>
 800a518:	ee08 0a10 	vmov	s16, r0
 800a51c:	e7e7      	b.n	800a4ee <_dtoa_r+0xb26>
 800a51e:	9b02      	ldr	r3, [sp, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfc8      	it	gt
 800a524:	461d      	movgt	r5, r3
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	bfd8      	it	le
 800a52a:	2501      	movle	r5, #1
 800a52c:	441d      	add	r5, r3
 800a52e:	f04f 0800 	mov.w	r8, #0
 800a532:	ee18 1a10 	vmov	r1, s16
 800a536:	2201      	movs	r2, #1
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fa5f 	bl	800a9fc <__lshift>
 800a53e:	4631      	mov	r1, r6
 800a540:	ee08 0a10 	vmov	s16, r0
 800a544:	f000 faca 	bl	800aadc <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	dc91      	bgt.n	800a470 <_dtoa_r+0xaa8>
 800a54c:	d102      	bne.n	800a554 <_dtoa_r+0xb8c>
 800a54e:	f01a 0f01 	tst.w	sl, #1
 800a552:	d18d      	bne.n	800a470 <_dtoa_r+0xaa8>
 800a554:	462b      	mov	r3, r5
 800a556:	461d      	mov	r5, r3
 800a558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a55c:	2a30      	cmp	r2, #48	; 0x30
 800a55e:	d0fa      	beq.n	800a556 <_dtoa_r+0xb8e>
 800a560:	e6d7      	b.n	800a312 <_dtoa_r+0x94a>
 800a562:	9a01      	ldr	r2, [sp, #4]
 800a564:	429a      	cmp	r2, r3
 800a566:	d184      	bne.n	800a472 <_dtoa_r+0xaaa>
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	2331      	movs	r3, #49	; 0x31
 800a570:	7013      	strb	r3, [r2, #0]
 800a572:	e6ce      	b.n	800a312 <_dtoa_r+0x94a>
 800a574:	4b09      	ldr	r3, [pc, #36]	; (800a59c <_dtoa_r+0xbd4>)
 800a576:	f7ff ba95 	b.w	8009aa4 <_dtoa_r+0xdc>
 800a57a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f47f aa6e 	bne.w	8009a5e <_dtoa_r+0x96>
 800a582:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <_dtoa_r+0xbd8>)
 800a584:	f7ff ba8e 	b.w	8009aa4 <_dtoa_r+0xdc>
 800a588:	9b02      	ldr	r3, [sp, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	dcae      	bgt.n	800a4ec <_dtoa_r+0xb24>
 800a58e:	9b06      	ldr	r3, [sp, #24]
 800a590:	2b02      	cmp	r3, #2
 800a592:	f73f aea8 	bgt.w	800a2e6 <_dtoa_r+0x91e>
 800a596:	e7a9      	b.n	800a4ec <_dtoa_r+0xb24>
 800a598:	0800c0db 	.word	0x0800c0db
 800a59c:	0800c038 	.word	0x0800c038
 800a5a0:	0800c05c 	.word	0x0800c05c

0800a5a4 <_localeconv_r>:
 800a5a4:	4800      	ldr	r0, [pc, #0]	; (800a5a8 <_localeconv_r+0x4>)
 800a5a6:	4770      	bx	lr
 800a5a8:	20000218 	.word	0x20000218

0800a5ac <malloc>:
 800a5ac:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <malloc+0xc>)
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	f000 bc17 	b.w	800ade4 <_malloc_r>
 800a5b6:	bf00      	nop
 800a5b8:	200000c4 	.word	0x200000c4

0800a5bc <memcpy>:
 800a5bc:	440a      	add	r2, r1
 800a5be:	4291      	cmp	r1, r2
 800a5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5c4:	d100      	bne.n	800a5c8 <memcpy+0xc>
 800a5c6:	4770      	bx	lr
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d2:	4291      	cmp	r1, r2
 800a5d4:	d1f9      	bne.n	800a5ca <memcpy+0xe>
 800a5d6:	bd10      	pop	{r4, pc}

0800a5d8 <_Balloc>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5dc:	4604      	mov	r4, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	b976      	cbnz	r6, 800a600 <_Balloc+0x28>
 800a5e2:	2010      	movs	r0, #16
 800a5e4:	f7ff ffe2 	bl	800a5ac <malloc>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a5ec:	b920      	cbnz	r0, 800a5f8 <_Balloc+0x20>
 800a5ee:	4b18      	ldr	r3, [pc, #96]	; (800a650 <_Balloc+0x78>)
 800a5f0:	4818      	ldr	r0, [pc, #96]	; (800a654 <_Balloc+0x7c>)
 800a5f2:	2166      	movs	r1, #102	; 0x66
 800a5f4:	f000 fdd6 	bl	800b1a4 <__assert_func>
 800a5f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5fc:	6006      	str	r6, [r0, #0]
 800a5fe:	60c6      	str	r6, [r0, #12]
 800a600:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a602:	68f3      	ldr	r3, [r6, #12]
 800a604:	b183      	cbz	r3, 800a628 <_Balloc+0x50>
 800a606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a60e:	b9b8      	cbnz	r0, 800a640 <_Balloc+0x68>
 800a610:	2101      	movs	r1, #1
 800a612:	fa01 f605 	lsl.w	r6, r1, r5
 800a616:	1d72      	adds	r2, r6, #5
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fb60 	bl	800ace0 <_calloc_r>
 800a620:	b160      	cbz	r0, 800a63c <_Balloc+0x64>
 800a622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a626:	e00e      	b.n	800a646 <_Balloc+0x6e>
 800a628:	2221      	movs	r2, #33	; 0x21
 800a62a:	2104      	movs	r1, #4
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fb57 	bl	800ace0 <_calloc_r>
 800a632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a634:	60f0      	str	r0, [r6, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e4      	bne.n	800a606 <_Balloc+0x2e>
 800a63c:	2000      	movs	r0, #0
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	6802      	ldr	r2, [r0, #0]
 800a642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a646:	2300      	movs	r3, #0
 800a648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a64c:	e7f7      	b.n	800a63e <_Balloc+0x66>
 800a64e:	bf00      	nop
 800a650:	0800c069 	.word	0x0800c069
 800a654:	0800c0ec 	.word	0x0800c0ec

0800a658 <_Bfree>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a65c:	4605      	mov	r5, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	b976      	cbnz	r6, 800a680 <_Bfree+0x28>
 800a662:	2010      	movs	r0, #16
 800a664:	f7ff ffa2 	bl	800a5ac <malloc>
 800a668:	4602      	mov	r2, r0
 800a66a:	6268      	str	r0, [r5, #36]	; 0x24
 800a66c:	b920      	cbnz	r0, 800a678 <_Bfree+0x20>
 800a66e:	4b09      	ldr	r3, [pc, #36]	; (800a694 <_Bfree+0x3c>)
 800a670:	4809      	ldr	r0, [pc, #36]	; (800a698 <_Bfree+0x40>)
 800a672:	218a      	movs	r1, #138	; 0x8a
 800a674:	f000 fd96 	bl	800b1a4 <__assert_func>
 800a678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a67c:	6006      	str	r6, [r0, #0]
 800a67e:	60c6      	str	r6, [r0, #12]
 800a680:	b13c      	cbz	r4, 800a692 <_Bfree+0x3a>
 800a682:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a684:	6862      	ldr	r2, [r4, #4]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a68c:	6021      	str	r1, [r4, #0]
 800a68e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	0800c069 	.word	0x0800c069
 800a698:	0800c0ec 	.word	0x0800c0ec

0800a69c <__multadd>:
 800a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a0:	690d      	ldr	r5, [r1, #16]
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	461e      	mov	r6, r3
 800a6a8:	f101 0c14 	add.w	ip, r1, #20
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a6b2:	b299      	uxth	r1, r3
 800a6b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6b8:	0c1e      	lsrs	r6, r3, #16
 800a6ba:	0c0b      	lsrs	r3, r1, #16
 800a6bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a6c0:	b289      	uxth	r1, r1
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6c8:	4285      	cmp	r5, r0
 800a6ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6d2:	dcec      	bgt.n	800a6ae <__multadd+0x12>
 800a6d4:	b30e      	cbz	r6, 800a71a <__multadd+0x7e>
 800a6d6:	68a3      	ldr	r3, [r4, #8]
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dc19      	bgt.n	800a710 <__multadd+0x74>
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	4638      	mov	r0, r7
 800a6e0:	3101      	adds	r1, #1
 800a6e2:	f7ff ff79 	bl	800a5d8 <_Balloc>
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	b928      	cbnz	r0, 800a6f6 <__multadd+0x5a>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	4b0c      	ldr	r3, [pc, #48]	; (800a720 <__multadd+0x84>)
 800a6ee:	480d      	ldr	r0, [pc, #52]	; (800a724 <__multadd+0x88>)
 800a6f0:	21b5      	movs	r1, #181	; 0xb5
 800a6f2:	f000 fd57 	bl	800b1a4 <__assert_func>
 800a6f6:	6922      	ldr	r2, [r4, #16]
 800a6f8:	3202      	adds	r2, #2
 800a6fa:	f104 010c 	add.w	r1, r4, #12
 800a6fe:	0092      	lsls	r2, r2, #2
 800a700:	300c      	adds	r0, #12
 800a702:	f7ff ff5b 	bl	800a5bc <memcpy>
 800a706:	4621      	mov	r1, r4
 800a708:	4638      	mov	r0, r7
 800a70a:	f7ff ffa5 	bl	800a658 <_Bfree>
 800a70e:	4644      	mov	r4, r8
 800a710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a714:	3501      	adds	r5, #1
 800a716:	615e      	str	r6, [r3, #20]
 800a718:	6125      	str	r5, [r4, #16]
 800a71a:	4620      	mov	r0, r4
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	0800c0db 	.word	0x0800c0db
 800a724:	0800c0ec 	.word	0x0800c0ec

0800a728 <__hi0bits>:
 800a728:	0c03      	lsrs	r3, r0, #16
 800a72a:	041b      	lsls	r3, r3, #16
 800a72c:	b9d3      	cbnz	r3, 800a764 <__hi0bits+0x3c>
 800a72e:	0400      	lsls	r0, r0, #16
 800a730:	2310      	movs	r3, #16
 800a732:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a736:	bf04      	itt	eq
 800a738:	0200      	lsleq	r0, r0, #8
 800a73a:	3308      	addeq	r3, #8
 800a73c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a740:	bf04      	itt	eq
 800a742:	0100      	lsleq	r0, r0, #4
 800a744:	3304      	addeq	r3, #4
 800a746:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a74a:	bf04      	itt	eq
 800a74c:	0080      	lsleq	r0, r0, #2
 800a74e:	3302      	addeq	r3, #2
 800a750:	2800      	cmp	r0, #0
 800a752:	db05      	blt.n	800a760 <__hi0bits+0x38>
 800a754:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a758:	f103 0301 	add.w	r3, r3, #1
 800a75c:	bf08      	it	eq
 800a75e:	2320      	moveq	r3, #32
 800a760:	4618      	mov	r0, r3
 800a762:	4770      	bx	lr
 800a764:	2300      	movs	r3, #0
 800a766:	e7e4      	b.n	800a732 <__hi0bits+0xa>

0800a768 <__lo0bits>:
 800a768:	6803      	ldr	r3, [r0, #0]
 800a76a:	f013 0207 	ands.w	r2, r3, #7
 800a76e:	4601      	mov	r1, r0
 800a770:	d00b      	beq.n	800a78a <__lo0bits+0x22>
 800a772:	07da      	lsls	r2, r3, #31
 800a774:	d423      	bmi.n	800a7be <__lo0bits+0x56>
 800a776:	0798      	lsls	r0, r3, #30
 800a778:	bf49      	itett	mi
 800a77a:	085b      	lsrmi	r3, r3, #1
 800a77c:	089b      	lsrpl	r3, r3, #2
 800a77e:	2001      	movmi	r0, #1
 800a780:	600b      	strmi	r3, [r1, #0]
 800a782:	bf5c      	itt	pl
 800a784:	600b      	strpl	r3, [r1, #0]
 800a786:	2002      	movpl	r0, #2
 800a788:	4770      	bx	lr
 800a78a:	b298      	uxth	r0, r3
 800a78c:	b9a8      	cbnz	r0, 800a7ba <__lo0bits+0x52>
 800a78e:	0c1b      	lsrs	r3, r3, #16
 800a790:	2010      	movs	r0, #16
 800a792:	b2da      	uxtb	r2, r3
 800a794:	b90a      	cbnz	r2, 800a79a <__lo0bits+0x32>
 800a796:	3008      	adds	r0, #8
 800a798:	0a1b      	lsrs	r3, r3, #8
 800a79a:	071a      	lsls	r2, r3, #28
 800a79c:	bf04      	itt	eq
 800a79e:	091b      	lsreq	r3, r3, #4
 800a7a0:	3004      	addeq	r0, #4
 800a7a2:	079a      	lsls	r2, r3, #30
 800a7a4:	bf04      	itt	eq
 800a7a6:	089b      	lsreq	r3, r3, #2
 800a7a8:	3002      	addeq	r0, #2
 800a7aa:	07da      	lsls	r2, r3, #31
 800a7ac:	d403      	bmi.n	800a7b6 <__lo0bits+0x4e>
 800a7ae:	085b      	lsrs	r3, r3, #1
 800a7b0:	f100 0001 	add.w	r0, r0, #1
 800a7b4:	d005      	beq.n	800a7c2 <__lo0bits+0x5a>
 800a7b6:	600b      	str	r3, [r1, #0]
 800a7b8:	4770      	bx	lr
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	e7e9      	b.n	800a792 <__lo0bits+0x2a>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	4770      	bx	lr
 800a7c2:	2020      	movs	r0, #32
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <__i2b>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	f7ff ff03 	bl	800a5d8 <_Balloc>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	b928      	cbnz	r0, 800a7e2 <__i2b+0x1a>
 800a7d6:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <__i2b+0x24>)
 800a7d8:	4805      	ldr	r0, [pc, #20]	; (800a7f0 <__i2b+0x28>)
 800a7da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7de:	f000 fce1 	bl	800b1a4 <__assert_func>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	6144      	str	r4, [r0, #20]
 800a7e6:	6103      	str	r3, [r0, #16]
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0800c0db 	.word	0x0800c0db
 800a7f0:	0800c0ec 	.word	0x0800c0ec

0800a7f4 <__multiply>:
 800a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f8:	4691      	mov	r9, r2
 800a7fa:	690a      	ldr	r2, [r1, #16]
 800a7fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a800:	429a      	cmp	r2, r3
 800a802:	bfb8      	it	lt
 800a804:	460b      	movlt	r3, r1
 800a806:	460c      	mov	r4, r1
 800a808:	bfbc      	itt	lt
 800a80a:	464c      	movlt	r4, r9
 800a80c:	4699      	movlt	r9, r3
 800a80e:	6927      	ldr	r7, [r4, #16]
 800a810:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a814:	68a3      	ldr	r3, [r4, #8]
 800a816:	6861      	ldr	r1, [r4, #4]
 800a818:	eb07 060a 	add.w	r6, r7, sl
 800a81c:	42b3      	cmp	r3, r6
 800a81e:	b085      	sub	sp, #20
 800a820:	bfb8      	it	lt
 800a822:	3101      	addlt	r1, #1
 800a824:	f7ff fed8 	bl	800a5d8 <_Balloc>
 800a828:	b930      	cbnz	r0, 800a838 <__multiply+0x44>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b44      	ldr	r3, [pc, #272]	; (800a940 <__multiply+0x14c>)
 800a82e:	4845      	ldr	r0, [pc, #276]	; (800a944 <__multiply+0x150>)
 800a830:	f240 115d 	movw	r1, #349	; 0x15d
 800a834:	f000 fcb6 	bl	800b1a4 <__assert_func>
 800a838:	f100 0514 	add.w	r5, r0, #20
 800a83c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a840:	462b      	mov	r3, r5
 800a842:	2200      	movs	r2, #0
 800a844:	4543      	cmp	r3, r8
 800a846:	d321      	bcc.n	800a88c <__multiply+0x98>
 800a848:	f104 0314 	add.w	r3, r4, #20
 800a84c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a850:	f109 0314 	add.w	r3, r9, #20
 800a854:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a858:	9202      	str	r2, [sp, #8]
 800a85a:	1b3a      	subs	r2, r7, r4
 800a85c:	3a15      	subs	r2, #21
 800a85e:	f022 0203 	bic.w	r2, r2, #3
 800a862:	3204      	adds	r2, #4
 800a864:	f104 0115 	add.w	r1, r4, #21
 800a868:	428f      	cmp	r7, r1
 800a86a:	bf38      	it	cc
 800a86c:	2204      	movcc	r2, #4
 800a86e:	9201      	str	r2, [sp, #4]
 800a870:	9a02      	ldr	r2, [sp, #8]
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	429a      	cmp	r2, r3
 800a876:	d80c      	bhi.n	800a892 <__multiply+0x9e>
 800a878:	2e00      	cmp	r6, #0
 800a87a:	dd03      	ble.n	800a884 <__multiply+0x90>
 800a87c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a880:	2b00      	cmp	r3, #0
 800a882:	d05a      	beq.n	800a93a <__multiply+0x146>
 800a884:	6106      	str	r6, [r0, #16]
 800a886:	b005      	add	sp, #20
 800a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	f843 2b04 	str.w	r2, [r3], #4
 800a890:	e7d8      	b.n	800a844 <__multiply+0x50>
 800a892:	f8b3 a000 	ldrh.w	sl, [r3]
 800a896:	f1ba 0f00 	cmp.w	sl, #0
 800a89a:	d024      	beq.n	800a8e6 <__multiply+0xf2>
 800a89c:	f104 0e14 	add.w	lr, r4, #20
 800a8a0:	46a9      	mov	r9, r5
 800a8a2:	f04f 0c00 	mov.w	ip, #0
 800a8a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8aa:	f8d9 1000 	ldr.w	r1, [r9]
 800a8ae:	fa1f fb82 	uxth.w	fp, r2
 800a8b2:	b289      	uxth	r1, r1
 800a8b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a8c0:	4461      	add	r1, ip
 800a8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8ce:	b289      	uxth	r1, r1
 800a8d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8d4:	4577      	cmp	r7, lr
 800a8d6:	f849 1b04 	str.w	r1, [r9], #4
 800a8da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8de:	d8e2      	bhi.n	800a8a6 <__multiply+0xb2>
 800a8e0:	9a01      	ldr	r2, [sp, #4]
 800a8e2:	f845 c002 	str.w	ip, [r5, r2]
 800a8e6:	9a03      	ldr	r2, [sp, #12]
 800a8e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	f1b9 0f00 	cmp.w	r9, #0
 800a8f2:	d020      	beq.n	800a936 <__multiply+0x142>
 800a8f4:	6829      	ldr	r1, [r5, #0]
 800a8f6:	f104 0c14 	add.w	ip, r4, #20
 800a8fa:	46ae      	mov	lr, r5
 800a8fc:	f04f 0a00 	mov.w	sl, #0
 800a900:	f8bc b000 	ldrh.w	fp, [ip]
 800a904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a908:	fb09 220b 	mla	r2, r9, fp, r2
 800a90c:	4492      	add	sl, r2
 800a90e:	b289      	uxth	r1, r1
 800a910:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a914:	f84e 1b04 	str.w	r1, [lr], #4
 800a918:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a91c:	f8be 1000 	ldrh.w	r1, [lr]
 800a920:	0c12      	lsrs	r2, r2, #16
 800a922:	fb09 1102 	mla	r1, r9, r2, r1
 800a926:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a92a:	4567      	cmp	r7, ip
 800a92c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a930:	d8e6      	bhi.n	800a900 <__multiply+0x10c>
 800a932:	9a01      	ldr	r2, [sp, #4]
 800a934:	50a9      	str	r1, [r5, r2]
 800a936:	3504      	adds	r5, #4
 800a938:	e79a      	b.n	800a870 <__multiply+0x7c>
 800a93a:	3e01      	subs	r6, #1
 800a93c:	e79c      	b.n	800a878 <__multiply+0x84>
 800a93e:	bf00      	nop
 800a940:	0800c0db 	.word	0x0800c0db
 800a944:	0800c0ec 	.word	0x0800c0ec

0800a948 <__pow5mult>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4615      	mov	r5, r2
 800a94e:	f012 0203 	ands.w	r2, r2, #3
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	d007      	beq.n	800a968 <__pow5mult+0x20>
 800a958:	4c25      	ldr	r4, [pc, #148]	; (800a9f0 <__pow5mult+0xa8>)
 800a95a:	3a01      	subs	r2, #1
 800a95c:	2300      	movs	r3, #0
 800a95e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a962:	f7ff fe9b 	bl	800a69c <__multadd>
 800a966:	4607      	mov	r7, r0
 800a968:	10ad      	asrs	r5, r5, #2
 800a96a:	d03d      	beq.n	800a9e8 <__pow5mult+0xa0>
 800a96c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a96e:	b97c      	cbnz	r4, 800a990 <__pow5mult+0x48>
 800a970:	2010      	movs	r0, #16
 800a972:	f7ff fe1b 	bl	800a5ac <malloc>
 800a976:	4602      	mov	r2, r0
 800a978:	6270      	str	r0, [r6, #36]	; 0x24
 800a97a:	b928      	cbnz	r0, 800a988 <__pow5mult+0x40>
 800a97c:	4b1d      	ldr	r3, [pc, #116]	; (800a9f4 <__pow5mult+0xac>)
 800a97e:	481e      	ldr	r0, [pc, #120]	; (800a9f8 <__pow5mult+0xb0>)
 800a980:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a984:	f000 fc0e 	bl	800b1a4 <__assert_func>
 800a988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a98c:	6004      	str	r4, [r0, #0]
 800a98e:	60c4      	str	r4, [r0, #12]
 800a990:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a998:	b94c      	cbnz	r4, 800a9ae <__pow5mult+0x66>
 800a99a:	f240 2171 	movw	r1, #625	; 0x271
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ff12 	bl	800a7c8 <__i2b>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	6003      	str	r3, [r0, #0]
 800a9ae:	f04f 0900 	mov.w	r9, #0
 800a9b2:	07eb      	lsls	r3, r5, #31
 800a9b4:	d50a      	bpl.n	800a9cc <__pow5mult+0x84>
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f7ff ff1a 	bl	800a7f4 <__multiply>
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff fe47 	bl	800a658 <_Bfree>
 800a9ca:	4647      	mov	r7, r8
 800a9cc:	106d      	asrs	r5, r5, #1
 800a9ce:	d00b      	beq.n	800a9e8 <__pow5mult+0xa0>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	b938      	cbnz	r0, 800a9e4 <__pow5mult+0x9c>
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7ff ff0b 	bl	800a7f4 <__multiply>
 800a9de:	6020      	str	r0, [r4, #0]
 800a9e0:	f8c0 9000 	str.w	r9, [r0]
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	e7e4      	b.n	800a9b2 <__pow5mult+0x6a>
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ee:	bf00      	nop
 800a9f0:	0800c238 	.word	0x0800c238
 800a9f4:	0800c069 	.word	0x0800c069
 800a9f8:	0800c0ec 	.word	0x0800c0ec

0800a9fc <__lshift>:
 800a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa00:	460c      	mov	r4, r1
 800aa02:	6849      	ldr	r1, [r1, #4]
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	4691      	mov	r9, r2
 800aa10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa14:	f108 0601 	add.w	r6, r8, #1
 800aa18:	42b3      	cmp	r3, r6
 800aa1a:	db0b      	blt.n	800aa34 <__lshift+0x38>
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f7ff fddb 	bl	800a5d8 <_Balloc>
 800aa22:	4605      	mov	r5, r0
 800aa24:	b948      	cbnz	r0, 800aa3a <__lshift+0x3e>
 800aa26:	4602      	mov	r2, r0
 800aa28:	4b2a      	ldr	r3, [pc, #168]	; (800aad4 <__lshift+0xd8>)
 800aa2a:	482b      	ldr	r0, [pc, #172]	; (800aad8 <__lshift+0xdc>)
 800aa2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa30:	f000 fbb8 	bl	800b1a4 <__assert_func>
 800aa34:	3101      	adds	r1, #1
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	e7ee      	b.n	800aa18 <__lshift+0x1c>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f100 0114 	add.w	r1, r0, #20
 800aa40:	f100 0210 	add.w	r2, r0, #16
 800aa44:	4618      	mov	r0, r3
 800aa46:	4553      	cmp	r3, sl
 800aa48:	db37      	blt.n	800aaba <__lshift+0xbe>
 800aa4a:	6920      	ldr	r0, [r4, #16]
 800aa4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa50:	f104 0314 	add.w	r3, r4, #20
 800aa54:	f019 091f 	ands.w	r9, r9, #31
 800aa58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa60:	d02f      	beq.n	800aac2 <__lshift+0xc6>
 800aa62:	f1c9 0e20 	rsb	lr, r9, #32
 800aa66:	468a      	mov	sl, r1
 800aa68:	f04f 0c00 	mov.w	ip, #0
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	fa02 f209 	lsl.w	r2, r2, r9
 800aa72:	ea42 020c 	orr.w	r2, r2, ip
 800aa76:	f84a 2b04 	str.w	r2, [sl], #4
 800aa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7e:	4298      	cmp	r0, r3
 800aa80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa84:	d8f2      	bhi.n	800aa6c <__lshift+0x70>
 800aa86:	1b03      	subs	r3, r0, r4
 800aa88:	3b15      	subs	r3, #21
 800aa8a:	f023 0303 	bic.w	r3, r3, #3
 800aa8e:	3304      	adds	r3, #4
 800aa90:	f104 0215 	add.w	r2, r4, #21
 800aa94:	4290      	cmp	r0, r2
 800aa96:	bf38      	it	cc
 800aa98:	2304      	movcc	r3, #4
 800aa9a:	f841 c003 	str.w	ip, [r1, r3]
 800aa9e:	f1bc 0f00 	cmp.w	ip, #0
 800aaa2:	d001      	beq.n	800aaa8 <__lshift+0xac>
 800aaa4:	f108 0602 	add.w	r6, r8, #2
 800aaa8:	3e01      	subs	r6, #1
 800aaaa:	4638      	mov	r0, r7
 800aaac:	612e      	str	r6, [r5, #16]
 800aaae:	4621      	mov	r1, r4
 800aab0:	f7ff fdd2 	bl	800a658 <_Bfree>
 800aab4:	4628      	mov	r0, r5
 800aab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaba:	f842 0f04 	str.w	r0, [r2, #4]!
 800aabe:	3301      	adds	r3, #1
 800aac0:	e7c1      	b.n	800aa46 <__lshift+0x4a>
 800aac2:	3904      	subs	r1, #4
 800aac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aacc:	4298      	cmp	r0, r3
 800aace:	d8f9      	bhi.n	800aac4 <__lshift+0xc8>
 800aad0:	e7ea      	b.n	800aaa8 <__lshift+0xac>
 800aad2:	bf00      	nop
 800aad4:	0800c0db 	.word	0x0800c0db
 800aad8:	0800c0ec 	.word	0x0800c0ec

0800aadc <__mcmp>:
 800aadc:	b530      	push	{r4, r5, lr}
 800aade:	6902      	ldr	r2, [r0, #16]
 800aae0:	690c      	ldr	r4, [r1, #16]
 800aae2:	1b12      	subs	r2, r2, r4
 800aae4:	d10e      	bne.n	800ab04 <__mcmp+0x28>
 800aae6:	f100 0314 	add.w	r3, r0, #20
 800aaea:	3114      	adds	r1, #20
 800aaec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aaf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aaf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aaf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aafc:	42a5      	cmp	r5, r4
 800aafe:	d003      	beq.n	800ab08 <__mcmp+0x2c>
 800ab00:	d305      	bcc.n	800ab0e <__mcmp+0x32>
 800ab02:	2201      	movs	r2, #1
 800ab04:	4610      	mov	r0, r2
 800ab06:	bd30      	pop	{r4, r5, pc}
 800ab08:	4283      	cmp	r3, r0
 800ab0a:	d3f3      	bcc.n	800aaf4 <__mcmp+0x18>
 800ab0c:	e7fa      	b.n	800ab04 <__mcmp+0x28>
 800ab0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab12:	e7f7      	b.n	800ab04 <__mcmp+0x28>

0800ab14 <__mdiff>:
 800ab14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	460c      	mov	r4, r1
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	4620      	mov	r0, r4
 800ab20:	4690      	mov	r8, r2
 800ab22:	f7ff ffdb 	bl	800aadc <__mcmp>
 800ab26:	1e05      	subs	r5, r0, #0
 800ab28:	d110      	bne.n	800ab4c <__mdiff+0x38>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff fd53 	bl	800a5d8 <_Balloc>
 800ab32:	b930      	cbnz	r0, 800ab42 <__mdiff+0x2e>
 800ab34:	4b3a      	ldr	r3, [pc, #232]	; (800ac20 <__mdiff+0x10c>)
 800ab36:	4602      	mov	r2, r0
 800ab38:	f240 2132 	movw	r1, #562	; 0x232
 800ab3c:	4839      	ldr	r0, [pc, #228]	; (800ac24 <__mdiff+0x110>)
 800ab3e:	f000 fb31 	bl	800b1a4 <__assert_func>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4c:	bfa4      	itt	ge
 800ab4e:	4643      	movge	r3, r8
 800ab50:	46a0      	movge	r8, r4
 800ab52:	4630      	mov	r0, r6
 800ab54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab58:	bfa6      	itte	ge
 800ab5a:	461c      	movge	r4, r3
 800ab5c:	2500      	movge	r5, #0
 800ab5e:	2501      	movlt	r5, #1
 800ab60:	f7ff fd3a 	bl	800a5d8 <_Balloc>
 800ab64:	b920      	cbnz	r0, 800ab70 <__mdiff+0x5c>
 800ab66:	4b2e      	ldr	r3, [pc, #184]	; (800ac20 <__mdiff+0x10c>)
 800ab68:	4602      	mov	r2, r0
 800ab6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab6e:	e7e5      	b.n	800ab3c <__mdiff+0x28>
 800ab70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab74:	6926      	ldr	r6, [r4, #16]
 800ab76:	60c5      	str	r5, [r0, #12]
 800ab78:	f104 0914 	add.w	r9, r4, #20
 800ab7c:	f108 0514 	add.w	r5, r8, #20
 800ab80:	f100 0e14 	add.w	lr, r0, #20
 800ab84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab8c:	f108 0210 	add.w	r2, r8, #16
 800ab90:	46f2      	mov	sl, lr
 800ab92:	2100      	movs	r1, #0
 800ab94:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab9c:	fa1f f883 	uxth.w	r8, r3
 800aba0:	fa11 f18b 	uxtah	r1, r1, fp
 800aba4:	0c1b      	lsrs	r3, r3, #16
 800aba6:	eba1 0808 	sub.w	r8, r1, r8
 800abaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abb2:	fa1f f888 	uxth.w	r8, r8
 800abb6:	1419      	asrs	r1, r3, #16
 800abb8:	454e      	cmp	r6, r9
 800abba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abbe:	f84a 3b04 	str.w	r3, [sl], #4
 800abc2:	d8e7      	bhi.n	800ab94 <__mdiff+0x80>
 800abc4:	1b33      	subs	r3, r6, r4
 800abc6:	3b15      	subs	r3, #21
 800abc8:	f023 0303 	bic.w	r3, r3, #3
 800abcc:	3304      	adds	r3, #4
 800abce:	3415      	adds	r4, #21
 800abd0:	42a6      	cmp	r6, r4
 800abd2:	bf38      	it	cc
 800abd4:	2304      	movcc	r3, #4
 800abd6:	441d      	add	r5, r3
 800abd8:	4473      	add	r3, lr
 800abda:	469e      	mov	lr, r3
 800abdc:	462e      	mov	r6, r5
 800abde:	4566      	cmp	r6, ip
 800abe0:	d30e      	bcc.n	800ac00 <__mdiff+0xec>
 800abe2:	f10c 0203 	add.w	r2, ip, #3
 800abe6:	1b52      	subs	r2, r2, r5
 800abe8:	f022 0203 	bic.w	r2, r2, #3
 800abec:	3d03      	subs	r5, #3
 800abee:	45ac      	cmp	ip, r5
 800abf0:	bf38      	it	cc
 800abf2:	2200      	movcc	r2, #0
 800abf4:	441a      	add	r2, r3
 800abf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abfa:	b17b      	cbz	r3, 800ac1c <__mdiff+0x108>
 800abfc:	6107      	str	r7, [r0, #16]
 800abfe:	e7a3      	b.n	800ab48 <__mdiff+0x34>
 800ac00:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac04:	fa11 f288 	uxtah	r2, r1, r8
 800ac08:	1414      	asrs	r4, r2, #16
 800ac0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac0e:	b292      	uxth	r2, r2
 800ac10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac14:	f84e 2b04 	str.w	r2, [lr], #4
 800ac18:	1421      	asrs	r1, r4, #16
 800ac1a:	e7e0      	b.n	800abde <__mdiff+0xca>
 800ac1c:	3f01      	subs	r7, #1
 800ac1e:	e7ea      	b.n	800abf6 <__mdiff+0xe2>
 800ac20:	0800c0db 	.word	0x0800c0db
 800ac24:	0800c0ec 	.word	0x0800c0ec

0800ac28 <__d2b>:
 800ac28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	4689      	mov	r9, r1
 800ac2e:	2101      	movs	r1, #1
 800ac30:	ec57 6b10 	vmov	r6, r7, d0
 800ac34:	4690      	mov	r8, r2
 800ac36:	f7ff fccf 	bl	800a5d8 <_Balloc>
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	b930      	cbnz	r0, 800ac4c <__d2b+0x24>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	4b25      	ldr	r3, [pc, #148]	; (800acd8 <__d2b+0xb0>)
 800ac42:	4826      	ldr	r0, [pc, #152]	; (800acdc <__d2b+0xb4>)
 800ac44:	f240 310a 	movw	r1, #778	; 0x30a
 800ac48:	f000 faac 	bl	800b1a4 <__assert_func>
 800ac4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac54:	bb35      	cbnz	r5, 800aca4 <__d2b+0x7c>
 800ac56:	2e00      	cmp	r6, #0
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	d028      	beq.n	800acae <__d2b+0x86>
 800ac5c:	4668      	mov	r0, sp
 800ac5e:	9600      	str	r6, [sp, #0]
 800ac60:	f7ff fd82 	bl	800a768 <__lo0bits>
 800ac64:	9900      	ldr	r1, [sp, #0]
 800ac66:	b300      	cbz	r0, 800acaa <__d2b+0x82>
 800ac68:	9a01      	ldr	r2, [sp, #4]
 800ac6a:	f1c0 0320 	rsb	r3, r0, #32
 800ac6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac72:	430b      	orrs	r3, r1
 800ac74:	40c2      	lsrs	r2, r0
 800ac76:	6163      	str	r3, [r4, #20]
 800ac78:	9201      	str	r2, [sp, #4]
 800ac7a:	9b01      	ldr	r3, [sp, #4]
 800ac7c:	61a3      	str	r3, [r4, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bf14      	ite	ne
 800ac82:	2202      	movne	r2, #2
 800ac84:	2201      	moveq	r2, #1
 800ac86:	6122      	str	r2, [r4, #16]
 800ac88:	b1d5      	cbz	r5, 800acc0 <__d2b+0x98>
 800ac8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac8e:	4405      	add	r5, r0
 800ac90:	f8c9 5000 	str.w	r5, [r9]
 800ac94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac98:	f8c8 0000 	str.w	r0, [r8]
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	b003      	add	sp, #12
 800aca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aca8:	e7d5      	b.n	800ac56 <__d2b+0x2e>
 800acaa:	6161      	str	r1, [r4, #20]
 800acac:	e7e5      	b.n	800ac7a <__d2b+0x52>
 800acae:	a801      	add	r0, sp, #4
 800acb0:	f7ff fd5a 	bl	800a768 <__lo0bits>
 800acb4:	9b01      	ldr	r3, [sp, #4]
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	2201      	movs	r2, #1
 800acba:	6122      	str	r2, [r4, #16]
 800acbc:	3020      	adds	r0, #32
 800acbe:	e7e3      	b.n	800ac88 <__d2b+0x60>
 800acc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acc8:	f8c9 0000 	str.w	r0, [r9]
 800accc:	6918      	ldr	r0, [r3, #16]
 800acce:	f7ff fd2b 	bl	800a728 <__hi0bits>
 800acd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acd6:	e7df      	b.n	800ac98 <__d2b+0x70>
 800acd8:	0800c0db 	.word	0x0800c0db
 800acdc:	0800c0ec 	.word	0x0800c0ec

0800ace0 <_calloc_r>:
 800ace0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ace2:	fba1 2402 	umull	r2, r4, r1, r2
 800ace6:	b94c      	cbnz	r4, 800acfc <_calloc_r+0x1c>
 800ace8:	4611      	mov	r1, r2
 800acea:	9201      	str	r2, [sp, #4]
 800acec:	f000 f87a 	bl	800ade4 <_malloc_r>
 800acf0:	9a01      	ldr	r2, [sp, #4]
 800acf2:	4605      	mov	r5, r0
 800acf4:	b930      	cbnz	r0, 800ad04 <_calloc_r+0x24>
 800acf6:	4628      	mov	r0, r5
 800acf8:	b003      	add	sp, #12
 800acfa:	bd30      	pop	{r4, r5, pc}
 800acfc:	220c      	movs	r2, #12
 800acfe:	6002      	str	r2, [r0, #0]
 800ad00:	2500      	movs	r5, #0
 800ad02:	e7f8      	b.n	800acf6 <_calloc_r+0x16>
 800ad04:	4621      	mov	r1, r4
 800ad06:	f7fe f941 	bl	8008f8c <memset>
 800ad0a:	e7f4      	b.n	800acf6 <_calloc_r+0x16>

0800ad0c <_free_r>:
 800ad0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad0e:	2900      	cmp	r1, #0
 800ad10:	d044      	beq.n	800ad9c <_free_r+0x90>
 800ad12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad16:	9001      	str	r0, [sp, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad1e:	bfb8      	it	lt
 800ad20:	18e4      	addlt	r4, r4, r3
 800ad22:	f000 fa9b 	bl	800b25c <__malloc_lock>
 800ad26:	4a1e      	ldr	r2, [pc, #120]	; (800ada0 <_free_r+0x94>)
 800ad28:	9801      	ldr	r0, [sp, #4]
 800ad2a:	6813      	ldr	r3, [r2, #0]
 800ad2c:	b933      	cbnz	r3, 800ad3c <_free_r+0x30>
 800ad2e:	6063      	str	r3, [r4, #4]
 800ad30:	6014      	str	r4, [r2, #0]
 800ad32:	b003      	add	sp, #12
 800ad34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad38:	f000 ba96 	b.w	800b268 <__malloc_unlock>
 800ad3c:	42a3      	cmp	r3, r4
 800ad3e:	d908      	bls.n	800ad52 <_free_r+0x46>
 800ad40:	6825      	ldr	r5, [r4, #0]
 800ad42:	1961      	adds	r1, r4, r5
 800ad44:	428b      	cmp	r3, r1
 800ad46:	bf01      	itttt	eq
 800ad48:	6819      	ldreq	r1, [r3, #0]
 800ad4a:	685b      	ldreq	r3, [r3, #4]
 800ad4c:	1949      	addeq	r1, r1, r5
 800ad4e:	6021      	streq	r1, [r4, #0]
 800ad50:	e7ed      	b.n	800ad2e <_free_r+0x22>
 800ad52:	461a      	mov	r2, r3
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	b10b      	cbz	r3, 800ad5c <_free_r+0x50>
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	d9fa      	bls.n	800ad52 <_free_r+0x46>
 800ad5c:	6811      	ldr	r1, [r2, #0]
 800ad5e:	1855      	adds	r5, r2, r1
 800ad60:	42a5      	cmp	r5, r4
 800ad62:	d10b      	bne.n	800ad7c <_free_r+0x70>
 800ad64:	6824      	ldr	r4, [r4, #0]
 800ad66:	4421      	add	r1, r4
 800ad68:	1854      	adds	r4, r2, r1
 800ad6a:	42a3      	cmp	r3, r4
 800ad6c:	6011      	str	r1, [r2, #0]
 800ad6e:	d1e0      	bne.n	800ad32 <_free_r+0x26>
 800ad70:	681c      	ldr	r4, [r3, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	6053      	str	r3, [r2, #4]
 800ad76:	4421      	add	r1, r4
 800ad78:	6011      	str	r1, [r2, #0]
 800ad7a:	e7da      	b.n	800ad32 <_free_r+0x26>
 800ad7c:	d902      	bls.n	800ad84 <_free_r+0x78>
 800ad7e:	230c      	movs	r3, #12
 800ad80:	6003      	str	r3, [r0, #0]
 800ad82:	e7d6      	b.n	800ad32 <_free_r+0x26>
 800ad84:	6825      	ldr	r5, [r4, #0]
 800ad86:	1961      	adds	r1, r4, r5
 800ad88:	428b      	cmp	r3, r1
 800ad8a:	bf04      	itt	eq
 800ad8c:	6819      	ldreq	r1, [r3, #0]
 800ad8e:	685b      	ldreq	r3, [r3, #4]
 800ad90:	6063      	str	r3, [r4, #4]
 800ad92:	bf04      	itt	eq
 800ad94:	1949      	addeq	r1, r1, r5
 800ad96:	6021      	streq	r1, [r4, #0]
 800ad98:	6054      	str	r4, [r2, #4]
 800ad9a:	e7ca      	b.n	800ad32 <_free_r+0x26>
 800ad9c:	b003      	add	sp, #12
 800ad9e:	bd30      	pop	{r4, r5, pc}
 800ada0:	20000aa4 	.word	0x20000aa4

0800ada4 <sbrk_aligned>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4e0e      	ldr	r6, [pc, #56]	; (800ade0 <sbrk_aligned+0x3c>)
 800ada8:	460c      	mov	r4, r1
 800adaa:	6831      	ldr	r1, [r6, #0]
 800adac:	4605      	mov	r5, r0
 800adae:	b911      	cbnz	r1, 800adb6 <sbrk_aligned+0x12>
 800adb0:	f000 f9e8 	bl	800b184 <_sbrk_r>
 800adb4:	6030      	str	r0, [r6, #0]
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 f9e3 	bl	800b184 <_sbrk_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d00a      	beq.n	800add8 <sbrk_aligned+0x34>
 800adc2:	1cc4      	adds	r4, r0, #3
 800adc4:	f024 0403 	bic.w	r4, r4, #3
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d007      	beq.n	800addc <sbrk_aligned+0x38>
 800adcc:	1a21      	subs	r1, r4, r0
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f9d8 	bl	800b184 <_sbrk_r>
 800add4:	3001      	adds	r0, #1
 800add6:	d101      	bne.n	800addc <sbrk_aligned+0x38>
 800add8:	f04f 34ff 	mov.w	r4, #4294967295
 800addc:	4620      	mov	r0, r4
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	20000aa8 	.word	0x20000aa8

0800ade4 <_malloc_r>:
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	1ccd      	adds	r5, r1, #3
 800adea:	f025 0503 	bic.w	r5, r5, #3
 800adee:	3508      	adds	r5, #8
 800adf0:	2d0c      	cmp	r5, #12
 800adf2:	bf38      	it	cc
 800adf4:	250c      	movcc	r5, #12
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	4607      	mov	r7, r0
 800adfa:	db01      	blt.n	800ae00 <_malloc_r+0x1c>
 800adfc:	42a9      	cmp	r1, r5
 800adfe:	d905      	bls.n	800ae0c <_malloc_r+0x28>
 800ae00:	230c      	movs	r3, #12
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	2600      	movs	r6, #0
 800ae06:	4630      	mov	r0, r6
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	4e2e      	ldr	r6, [pc, #184]	; (800aec8 <_malloc_r+0xe4>)
 800ae0e:	f000 fa25 	bl	800b25c <__malloc_lock>
 800ae12:	6833      	ldr	r3, [r6, #0]
 800ae14:	461c      	mov	r4, r3
 800ae16:	bb34      	cbnz	r4, 800ae66 <_malloc_r+0x82>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	f7ff ffc2 	bl	800ada4 <sbrk_aligned>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	4604      	mov	r4, r0
 800ae24:	d14d      	bne.n	800aec2 <_malloc_r+0xde>
 800ae26:	6834      	ldr	r4, [r6, #0]
 800ae28:	4626      	mov	r6, r4
 800ae2a:	2e00      	cmp	r6, #0
 800ae2c:	d140      	bne.n	800aeb0 <_malloc_r+0xcc>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	4631      	mov	r1, r6
 800ae32:	4638      	mov	r0, r7
 800ae34:	eb04 0803 	add.w	r8, r4, r3
 800ae38:	f000 f9a4 	bl	800b184 <_sbrk_r>
 800ae3c:	4580      	cmp	r8, r0
 800ae3e:	d13a      	bne.n	800aeb6 <_malloc_r+0xd2>
 800ae40:	6821      	ldr	r1, [r4, #0]
 800ae42:	3503      	adds	r5, #3
 800ae44:	1a6d      	subs	r5, r5, r1
 800ae46:	f025 0503 	bic.w	r5, r5, #3
 800ae4a:	3508      	adds	r5, #8
 800ae4c:	2d0c      	cmp	r5, #12
 800ae4e:	bf38      	it	cc
 800ae50:	250c      	movcc	r5, #12
 800ae52:	4629      	mov	r1, r5
 800ae54:	4638      	mov	r0, r7
 800ae56:	f7ff ffa5 	bl	800ada4 <sbrk_aligned>
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d02b      	beq.n	800aeb6 <_malloc_r+0xd2>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	442b      	add	r3, r5
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	e00e      	b.n	800ae84 <_malloc_r+0xa0>
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	1b52      	subs	r2, r2, r5
 800ae6a:	d41e      	bmi.n	800aeaa <_malloc_r+0xc6>
 800ae6c:	2a0b      	cmp	r2, #11
 800ae6e:	d916      	bls.n	800ae9e <_malloc_r+0xba>
 800ae70:	1961      	adds	r1, r4, r5
 800ae72:	42a3      	cmp	r3, r4
 800ae74:	6025      	str	r5, [r4, #0]
 800ae76:	bf18      	it	ne
 800ae78:	6059      	strne	r1, [r3, #4]
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	bf08      	it	eq
 800ae7e:	6031      	streq	r1, [r6, #0]
 800ae80:	5162      	str	r2, [r4, r5]
 800ae82:	604b      	str	r3, [r1, #4]
 800ae84:	4638      	mov	r0, r7
 800ae86:	f104 060b 	add.w	r6, r4, #11
 800ae8a:	f000 f9ed 	bl	800b268 <__malloc_unlock>
 800ae8e:	f026 0607 	bic.w	r6, r6, #7
 800ae92:	1d23      	adds	r3, r4, #4
 800ae94:	1af2      	subs	r2, r6, r3
 800ae96:	d0b6      	beq.n	800ae06 <_malloc_r+0x22>
 800ae98:	1b9b      	subs	r3, r3, r6
 800ae9a:	50a3      	str	r3, [r4, r2]
 800ae9c:	e7b3      	b.n	800ae06 <_malloc_r+0x22>
 800ae9e:	6862      	ldr	r2, [r4, #4]
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	bf0c      	ite	eq
 800aea4:	6032      	streq	r2, [r6, #0]
 800aea6:	605a      	strne	r2, [r3, #4]
 800aea8:	e7ec      	b.n	800ae84 <_malloc_r+0xa0>
 800aeaa:	4623      	mov	r3, r4
 800aeac:	6864      	ldr	r4, [r4, #4]
 800aeae:	e7b2      	b.n	800ae16 <_malloc_r+0x32>
 800aeb0:	4634      	mov	r4, r6
 800aeb2:	6876      	ldr	r6, [r6, #4]
 800aeb4:	e7b9      	b.n	800ae2a <_malloc_r+0x46>
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	603b      	str	r3, [r7, #0]
 800aeba:	4638      	mov	r0, r7
 800aebc:	f000 f9d4 	bl	800b268 <__malloc_unlock>
 800aec0:	e7a1      	b.n	800ae06 <_malloc_r+0x22>
 800aec2:	6025      	str	r5, [r4, #0]
 800aec4:	e7de      	b.n	800ae84 <_malloc_r+0xa0>
 800aec6:	bf00      	nop
 800aec8:	20000aa4 	.word	0x20000aa4

0800aecc <__ssputs_r>:
 800aecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	688e      	ldr	r6, [r1, #8]
 800aed2:	429e      	cmp	r6, r3
 800aed4:	4682      	mov	sl, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4690      	mov	r8, r2
 800aeda:	461f      	mov	r7, r3
 800aedc:	d838      	bhi.n	800af50 <__ssputs_r+0x84>
 800aede:	898a      	ldrh	r2, [r1, #12]
 800aee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aee4:	d032      	beq.n	800af4c <__ssputs_r+0x80>
 800aee6:	6825      	ldr	r5, [r4, #0]
 800aee8:	6909      	ldr	r1, [r1, #16]
 800aeea:	eba5 0901 	sub.w	r9, r5, r1
 800aeee:	6965      	ldr	r5, [r4, #20]
 800aef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aef8:	3301      	adds	r3, #1
 800aefa:	444b      	add	r3, r9
 800aefc:	106d      	asrs	r5, r5, #1
 800aefe:	429d      	cmp	r5, r3
 800af00:	bf38      	it	cc
 800af02:	461d      	movcc	r5, r3
 800af04:	0553      	lsls	r3, r2, #21
 800af06:	d531      	bpl.n	800af6c <__ssputs_r+0xa0>
 800af08:	4629      	mov	r1, r5
 800af0a:	f7ff ff6b 	bl	800ade4 <_malloc_r>
 800af0e:	4606      	mov	r6, r0
 800af10:	b950      	cbnz	r0, 800af28 <__ssputs_r+0x5c>
 800af12:	230c      	movs	r3, #12
 800af14:	f8ca 3000 	str.w	r3, [sl]
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af28:	6921      	ldr	r1, [r4, #16]
 800af2a:	464a      	mov	r2, r9
 800af2c:	f7ff fb46 	bl	800a5bc <memcpy>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	6126      	str	r6, [r4, #16]
 800af3e:	6165      	str	r5, [r4, #20]
 800af40:	444e      	add	r6, r9
 800af42:	eba5 0509 	sub.w	r5, r5, r9
 800af46:	6026      	str	r6, [r4, #0]
 800af48:	60a5      	str	r5, [r4, #8]
 800af4a:	463e      	mov	r6, r7
 800af4c:	42be      	cmp	r6, r7
 800af4e:	d900      	bls.n	800af52 <__ssputs_r+0x86>
 800af50:	463e      	mov	r6, r7
 800af52:	6820      	ldr	r0, [r4, #0]
 800af54:	4632      	mov	r2, r6
 800af56:	4641      	mov	r1, r8
 800af58:	f000 f966 	bl	800b228 <memmove>
 800af5c:	68a3      	ldr	r3, [r4, #8]
 800af5e:	1b9b      	subs	r3, r3, r6
 800af60:	60a3      	str	r3, [r4, #8]
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	4433      	add	r3, r6
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	2000      	movs	r0, #0
 800af6a:	e7db      	b.n	800af24 <__ssputs_r+0x58>
 800af6c:	462a      	mov	r2, r5
 800af6e:	f000 f981 	bl	800b274 <_realloc_r>
 800af72:	4606      	mov	r6, r0
 800af74:	2800      	cmp	r0, #0
 800af76:	d1e1      	bne.n	800af3c <__ssputs_r+0x70>
 800af78:	6921      	ldr	r1, [r4, #16]
 800af7a:	4650      	mov	r0, sl
 800af7c:	f7ff fec6 	bl	800ad0c <_free_r>
 800af80:	e7c7      	b.n	800af12 <__ssputs_r+0x46>
	...

0800af84 <_svfiprintf_r>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	4698      	mov	r8, r3
 800af8a:	898b      	ldrh	r3, [r1, #12]
 800af8c:	061b      	lsls	r3, r3, #24
 800af8e:	b09d      	sub	sp, #116	; 0x74
 800af90:	4607      	mov	r7, r0
 800af92:	460d      	mov	r5, r1
 800af94:	4614      	mov	r4, r2
 800af96:	d50e      	bpl.n	800afb6 <_svfiprintf_r+0x32>
 800af98:	690b      	ldr	r3, [r1, #16]
 800af9a:	b963      	cbnz	r3, 800afb6 <_svfiprintf_r+0x32>
 800af9c:	2140      	movs	r1, #64	; 0x40
 800af9e:	f7ff ff21 	bl	800ade4 <_malloc_r>
 800afa2:	6028      	str	r0, [r5, #0]
 800afa4:	6128      	str	r0, [r5, #16]
 800afa6:	b920      	cbnz	r0, 800afb2 <_svfiprintf_r+0x2e>
 800afa8:	230c      	movs	r3, #12
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	e0d1      	b.n	800b156 <_svfiprintf_r+0x1d2>
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	616b      	str	r3, [r5, #20]
 800afb6:	2300      	movs	r3, #0
 800afb8:	9309      	str	r3, [sp, #36]	; 0x24
 800afba:	2320      	movs	r3, #32
 800afbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800afc4:	2330      	movs	r3, #48	; 0x30
 800afc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b170 <_svfiprintf_r+0x1ec>
 800afca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afce:	f04f 0901 	mov.w	r9, #1
 800afd2:	4623      	mov	r3, r4
 800afd4:	469a      	mov	sl, r3
 800afd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afda:	b10a      	cbz	r2, 800afe0 <_svfiprintf_r+0x5c>
 800afdc:	2a25      	cmp	r2, #37	; 0x25
 800afde:	d1f9      	bne.n	800afd4 <_svfiprintf_r+0x50>
 800afe0:	ebba 0b04 	subs.w	fp, sl, r4
 800afe4:	d00b      	beq.n	800affe <_svfiprintf_r+0x7a>
 800afe6:	465b      	mov	r3, fp
 800afe8:	4622      	mov	r2, r4
 800afea:	4629      	mov	r1, r5
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff ff6d 	bl	800aecc <__ssputs_r>
 800aff2:	3001      	adds	r0, #1
 800aff4:	f000 80aa 	beq.w	800b14c <_svfiprintf_r+0x1c8>
 800aff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800affa:	445a      	add	r2, fp
 800affc:	9209      	str	r2, [sp, #36]	; 0x24
 800affe:	f89a 3000 	ldrb.w	r3, [sl]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 80a2 	beq.w	800b14c <_svfiprintf_r+0x1c8>
 800b008:	2300      	movs	r3, #0
 800b00a:	f04f 32ff 	mov.w	r2, #4294967295
 800b00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b012:	f10a 0a01 	add.w	sl, sl, #1
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	9307      	str	r3, [sp, #28]
 800b01a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b01e:	931a      	str	r3, [sp, #104]	; 0x68
 800b020:	4654      	mov	r4, sl
 800b022:	2205      	movs	r2, #5
 800b024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b028:	4851      	ldr	r0, [pc, #324]	; (800b170 <_svfiprintf_r+0x1ec>)
 800b02a:	f7f5 f8f9 	bl	8000220 <memchr>
 800b02e:	9a04      	ldr	r2, [sp, #16]
 800b030:	b9d8      	cbnz	r0, 800b06a <_svfiprintf_r+0xe6>
 800b032:	06d0      	lsls	r0, r2, #27
 800b034:	bf44      	itt	mi
 800b036:	2320      	movmi	r3, #32
 800b038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b03c:	0711      	lsls	r1, r2, #28
 800b03e:	bf44      	itt	mi
 800b040:	232b      	movmi	r3, #43	; 0x2b
 800b042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b046:	f89a 3000 	ldrb.w	r3, [sl]
 800b04a:	2b2a      	cmp	r3, #42	; 0x2a
 800b04c:	d015      	beq.n	800b07a <_svfiprintf_r+0xf6>
 800b04e:	9a07      	ldr	r2, [sp, #28]
 800b050:	4654      	mov	r4, sl
 800b052:	2000      	movs	r0, #0
 800b054:	f04f 0c0a 	mov.w	ip, #10
 800b058:	4621      	mov	r1, r4
 800b05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b05e:	3b30      	subs	r3, #48	; 0x30
 800b060:	2b09      	cmp	r3, #9
 800b062:	d94e      	bls.n	800b102 <_svfiprintf_r+0x17e>
 800b064:	b1b0      	cbz	r0, 800b094 <_svfiprintf_r+0x110>
 800b066:	9207      	str	r2, [sp, #28]
 800b068:	e014      	b.n	800b094 <_svfiprintf_r+0x110>
 800b06a:	eba0 0308 	sub.w	r3, r0, r8
 800b06e:	fa09 f303 	lsl.w	r3, r9, r3
 800b072:	4313      	orrs	r3, r2
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	46a2      	mov	sl, r4
 800b078:	e7d2      	b.n	800b020 <_svfiprintf_r+0x9c>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	1d19      	adds	r1, r3, #4
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	9103      	str	r1, [sp, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	bfbb      	ittet	lt
 800b086:	425b      	neglt	r3, r3
 800b088:	f042 0202 	orrlt.w	r2, r2, #2
 800b08c:	9307      	strge	r3, [sp, #28]
 800b08e:	9307      	strlt	r3, [sp, #28]
 800b090:	bfb8      	it	lt
 800b092:	9204      	strlt	r2, [sp, #16]
 800b094:	7823      	ldrb	r3, [r4, #0]
 800b096:	2b2e      	cmp	r3, #46	; 0x2e
 800b098:	d10c      	bne.n	800b0b4 <_svfiprintf_r+0x130>
 800b09a:	7863      	ldrb	r3, [r4, #1]
 800b09c:	2b2a      	cmp	r3, #42	; 0x2a
 800b09e:	d135      	bne.n	800b10c <_svfiprintf_r+0x188>
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	9203      	str	r2, [sp, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfb8      	it	lt
 800b0ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0b0:	3402      	adds	r4, #2
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b180 <_svfiprintf_r+0x1fc>
 800b0b8:	7821      	ldrb	r1, [r4, #0]
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	4650      	mov	r0, sl
 800b0be:	f7f5 f8af 	bl	8000220 <memchr>
 800b0c2:	b140      	cbz	r0, 800b0d6 <_svfiprintf_r+0x152>
 800b0c4:	2340      	movs	r3, #64	; 0x40
 800b0c6:	eba0 000a 	sub.w	r0, r0, sl
 800b0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ce:	9b04      	ldr	r3, [sp, #16]
 800b0d0:	4303      	orrs	r3, r0
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0da:	4826      	ldr	r0, [pc, #152]	; (800b174 <_svfiprintf_r+0x1f0>)
 800b0dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0e0:	2206      	movs	r2, #6
 800b0e2:	f7f5 f89d 	bl	8000220 <memchr>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d038      	beq.n	800b15c <_svfiprintf_r+0x1d8>
 800b0ea:	4b23      	ldr	r3, [pc, #140]	; (800b178 <_svfiprintf_r+0x1f4>)
 800b0ec:	bb1b      	cbnz	r3, 800b136 <_svfiprintf_r+0x1b2>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	3307      	adds	r3, #7
 800b0f2:	f023 0307 	bic.w	r3, r3, #7
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fc:	4433      	add	r3, r6
 800b0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b100:	e767      	b.n	800afd2 <_svfiprintf_r+0x4e>
 800b102:	fb0c 3202 	mla	r2, ip, r2, r3
 800b106:	460c      	mov	r4, r1
 800b108:	2001      	movs	r0, #1
 800b10a:	e7a5      	b.n	800b058 <_svfiprintf_r+0xd4>
 800b10c:	2300      	movs	r3, #0
 800b10e:	3401      	adds	r4, #1
 800b110:	9305      	str	r3, [sp, #20]
 800b112:	4619      	mov	r1, r3
 800b114:	f04f 0c0a 	mov.w	ip, #10
 800b118:	4620      	mov	r0, r4
 800b11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b11e:	3a30      	subs	r2, #48	; 0x30
 800b120:	2a09      	cmp	r2, #9
 800b122:	d903      	bls.n	800b12c <_svfiprintf_r+0x1a8>
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0c5      	beq.n	800b0b4 <_svfiprintf_r+0x130>
 800b128:	9105      	str	r1, [sp, #20]
 800b12a:	e7c3      	b.n	800b0b4 <_svfiprintf_r+0x130>
 800b12c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b130:	4604      	mov	r4, r0
 800b132:	2301      	movs	r3, #1
 800b134:	e7f0      	b.n	800b118 <_svfiprintf_r+0x194>
 800b136:	ab03      	add	r3, sp, #12
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	462a      	mov	r2, r5
 800b13c:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <_svfiprintf_r+0x1f8>)
 800b13e:	a904      	add	r1, sp, #16
 800b140:	4638      	mov	r0, r7
 800b142:	f7fd ffcb 	bl	80090dc <_printf_float>
 800b146:	1c42      	adds	r2, r0, #1
 800b148:	4606      	mov	r6, r0
 800b14a:	d1d6      	bne.n	800b0fa <_svfiprintf_r+0x176>
 800b14c:	89ab      	ldrh	r3, [r5, #12]
 800b14e:	065b      	lsls	r3, r3, #25
 800b150:	f53f af2c 	bmi.w	800afac <_svfiprintf_r+0x28>
 800b154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b156:	b01d      	add	sp, #116	; 0x74
 800b158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15c:	ab03      	add	r3, sp, #12
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	462a      	mov	r2, r5
 800b162:	4b06      	ldr	r3, [pc, #24]	; (800b17c <_svfiprintf_r+0x1f8>)
 800b164:	a904      	add	r1, sp, #16
 800b166:	4638      	mov	r0, r7
 800b168:	f7fe fa5c 	bl	8009624 <_printf_i>
 800b16c:	e7eb      	b.n	800b146 <_svfiprintf_r+0x1c2>
 800b16e:	bf00      	nop
 800b170:	0800c244 	.word	0x0800c244
 800b174:	0800c24e 	.word	0x0800c24e
 800b178:	080090dd 	.word	0x080090dd
 800b17c:	0800aecd 	.word	0x0800aecd
 800b180:	0800c24a 	.word	0x0800c24a

0800b184 <_sbrk_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d06      	ldr	r5, [pc, #24]	; (800b1a0 <_sbrk_r+0x1c>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	f7f8 fa04 	bl	800359c <_sbrk>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_sbrk_r+0x1a>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_sbrk_r+0x1a>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	20000aac 	.word	0x20000aac

0800b1a4 <__assert_func>:
 800b1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1a6:	4614      	mov	r4, r2
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <__assert_func+0x2c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	68d8      	ldr	r0, [r3, #12]
 800b1b2:	b14c      	cbz	r4, 800b1c8 <__assert_func+0x24>
 800b1b4:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <__assert_func+0x30>)
 800b1b6:	9100      	str	r1, [sp, #0]
 800b1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1bc:	4906      	ldr	r1, [pc, #24]	; (800b1d8 <__assert_func+0x34>)
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f000 f80e 	bl	800b1e0 <fiprintf>
 800b1c4:	f000 faac 	bl	800b720 <abort>
 800b1c8:	4b04      	ldr	r3, [pc, #16]	; (800b1dc <__assert_func+0x38>)
 800b1ca:	461c      	mov	r4, r3
 800b1cc:	e7f3      	b.n	800b1b6 <__assert_func+0x12>
 800b1ce:	bf00      	nop
 800b1d0:	200000c4 	.word	0x200000c4
 800b1d4:	0800c255 	.word	0x0800c255
 800b1d8:	0800c262 	.word	0x0800c262
 800b1dc:	0800c290 	.word	0x0800c290

0800b1e0 <fiprintf>:
 800b1e0:	b40e      	push	{r1, r2, r3}
 800b1e2:	b503      	push	{r0, r1, lr}
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	ab03      	add	r3, sp, #12
 800b1e8:	4805      	ldr	r0, [pc, #20]	; (800b200 <fiprintf+0x20>)
 800b1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ee:	6800      	ldr	r0, [r0, #0]
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	f000 f897 	bl	800b324 <_vfiprintf_r>
 800b1f6:	b002      	add	sp, #8
 800b1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1fc:	b003      	add	sp, #12
 800b1fe:	4770      	bx	lr
 800b200:	200000c4 	.word	0x200000c4

0800b204 <__ascii_mbtowc>:
 800b204:	b082      	sub	sp, #8
 800b206:	b901      	cbnz	r1, 800b20a <__ascii_mbtowc+0x6>
 800b208:	a901      	add	r1, sp, #4
 800b20a:	b142      	cbz	r2, 800b21e <__ascii_mbtowc+0x1a>
 800b20c:	b14b      	cbz	r3, 800b222 <__ascii_mbtowc+0x1e>
 800b20e:	7813      	ldrb	r3, [r2, #0]
 800b210:	600b      	str	r3, [r1, #0]
 800b212:	7812      	ldrb	r2, [r2, #0]
 800b214:	1e10      	subs	r0, r2, #0
 800b216:	bf18      	it	ne
 800b218:	2001      	movne	r0, #1
 800b21a:	b002      	add	sp, #8
 800b21c:	4770      	bx	lr
 800b21e:	4610      	mov	r0, r2
 800b220:	e7fb      	b.n	800b21a <__ascii_mbtowc+0x16>
 800b222:	f06f 0001 	mvn.w	r0, #1
 800b226:	e7f8      	b.n	800b21a <__ascii_mbtowc+0x16>

0800b228 <memmove>:
 800b228:	4288      	cmp	r0, r1
 800b22a:	b510      	push	{r4, lr}
 800b22c:	eb01 0402 	add.w	r4, r1, r2
 800b230:	d902      	bls.n	800b238 <memmove+0x10>
 800b232:	4284      	cmp	r4, r0
 800b234:	4623      	mov	r3, r4
 800b236:	d807      	bhi.n	800b248 <memmove+0x20>
 800b238:	1e43      	subs	r3, r0, #1
 800b23a:	42a1      	cmp	r1, r4
 800b23c:	d008      	beq.n	800b250 <memmove+0x28>
 800b23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b246:	e7f8      	b.n	800b23a <memmove+0x12>
 800b248:	4402      	add	r2, r0
 800b24a:	4601      	mov	r1, r0
 800b24c:	428a      	cmp	r2, r1
 800b24e:	d100      	bne.n	800b252 <memmove+0x2a>
 800b250:	bd10      	pop	{r4, pc}
 800b252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b25a:	e7f7      	b.n	800b24c <memmove+0x24>

0800b25c <__malloc_lock>:
 800b25c:	4801      	ldr	r0, [pc, #4]	; (800b264 <__malloc_lock+0x8>)
 800b25e:	f000 bc1f 	b.w	800baa0 <__retarget_lock_acquire_recursive>
 800b262:	bf00      	nop
 800b264:	20000ab0 	.word	0x20000ab0

0800b268 <__malloc_unlock>:
 800b268:	4801      	ldr	r0, [pc, #4]	; (800b270 <__malloc_unlock+0x8>)
 800b26a:	f000 bc1a 	b.w	800baa2 <__retarget_lock_release_recursive>
 800b26e:	bf00      	nop
 800b270:	20000ab0 	.word	0x20000ab0

0800b274 <_realloc_r>:
 800b274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b278:	4680      	mov	r8, r0
 800b27a:	4614      	mov	r4, r2
 800b27c:	460e      	mov	r6, r1
 800b27e:	b921      	cbnz	r1, 800b28a <_realloc_r+0x16>
 800b280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	4611      	mov	r1, r2
 800b286:	f7ff bdad 	b.w	800ade4 <_malloc_r>
 800b28a:	b92a      	cbnz	r2, 800b298 <_realloc_r+0x24>
 800b28c:	f7ff fd3e 	bl	800ad0c <_free_r>
 800b290:	4625      	mov	r5, r4
 800b292:	4628      	mov	r0, r5
 800b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b298:	f000 fc6a 	bl	800bb70 <_malloc_usable_size_r>
 800b29c:	4284      	cmp	r4, r0
 800b29e:	4607      	mov	r7, r0
 800b2a0:	d802      	bhi.n	800b2a8 <_realloc_r+0x34>
 800b2a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2a6:	d812      	bhi.n	800b2ce <_realloc_r+0x5a>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	f7ff fd9a 	bl	800ade4 <_malloc_r>
 800b2b0:	4605      	mov	r5, r0
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d0ed      	beq.n	800b292 <_realloc_r+0x1e>
 800b2b6:	42bc      	cmp	r4, r7
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	bf28      	it	cs
 800b2be:	463a      	movcs	r2, r7
 800b2c0:	f7ff f97c 	bl	800a5bc <memcpy>
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4640      	mov	r0, r8
 800b2c8:	f7ff fd20 	bl	800ad0c <_free_r>
 800b2cc:	e7e1      	b.n	800b292 <_realloc_r+0x1e>
 800b2ce:	4635      	mov	r5, r6
 800b2d0:	e7df      	b.n	800b292 <_realloc_r+0x1e>

0800b2d2 <__sfputc_r>:
 800b2d2:	6893      	ldr	r3, [r2, #8]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	b410      	push	{r4}
 800b2da:	6093      	str	r3, [r2, #8]
 800b2dc:	da08      	bge.n	800b2f0 <__sfputc_r+0x1e>
 800b2de:	6994      	ldr	r4, [r2, #24]
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	db01      	blt.n	800b2e8 <__sfputc_r+0x16>
 800b2e4:	290a      	cmp	r1, #10
 800b2e6:	d103      	bne.n	800b2f0 <__sfputc_r+0x1e>
 800b2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ec:	f000 b94a 	b.w	800b584 <__swbuf_r>
 800b2f0:	6813      	ldr	r3, [r2, #0]
 800b2f2:	1c58      	adds	r0, r3, #1
 800b2f4:	6010      	str	r0, [r2, #0]
 800b2f6:	7019      	strb	r1, [r3, #0]
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <__sfputs_r>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	4606      	mov	r6, r0
 800b304:	460f      	mov	r7, r1
 800b306:	4614      	mov	r4, r2
 800b308:	18d5      	adds	r5, r2, r3
 800b30a:	42ac      	cmp	r4, r5
 800b30c:	d101      	bne.n	800b312 <__sfputs_r+0x12>
 800b30e:	2000      	movs	r0, #0
 800b310:	e007      	b.n	800b322 <__sfputs_r+0x22>
 800b312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b316:	463a      	mov	r2, r7
 800b318:	4630      	mov	r0, r6
 800b31a:	f7ff ffda 	bl	800b2d2 <__sfputc_r>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	d1f3      	bne.n	800b30a <__sfputs_r+0xa>
 800b322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b324 <_vfiprintf_r>:
 800b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	460d      	mov	r5, r1
 800b32a:	b09d      	sub	sp, #116	; 0x74
 800b32c:	4614      	mov	r4, r2
 800b32e:	4698      	mov	r8, r3
 800b330:	4606      	mov	r6, r0
 800b332:	b118      	cbz	r0, 800b33c <_vfiprintf_r+0x18>
 800b334:	6983      	ldr	r3, [r0, #24]
 800b336:	b90b      	cbnz	r3, 800b33c <_vfiprintf_r+0x18>
 800b338:	f000 fb14 	bl	800b964 <__sinit>
 800b33c:	4b89      	ldr	r3, [pc, #548]	; (800b564 <_vfiprintf_r+0x240>)
 800b33e:	429d      	cmp	r5, r3
 800b340:	d11b      	bne.n	800b37a <_vfiprintf_r+0x56>
 800b342:	6875      	ldr	r5, [r6, #4]
 800b344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b346:	07d9      	lsls	r1, r3, #31
 800b348:	d405      	bmi.n	800b356 <_vfiprintf_r+0x32>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	059a      	lsls	r2, r3, #22
 800b34e:	d402      	bmi.n	800b356 <_vfiprintf_r+0x32>
 800b350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b352:	f000 fba5 	bl	800baa0 <__retarget_lock_acquire_recursive>
 800b356:	89ab      	ldrh	r3, [r5, #12]
 800b358:	071b      	lsls	r3, r3, #28
 800b35a:	d501      	bpl.n	800b360 <_vfiprintf_r+0x3c>
 800b35c:	692b      	ldr	r3, [r5, #16]
 800b35e:	b9eb      	cbnz	r3, 800b39c <_vfiprintf_r+0x78>
 800b360:	4629      	mov	r1, r5
 800b362:	4630      	mov	r0, r6
 800b364:	f000 f96e 	bl	800b644 <__swsetup_r>
 800b368:	b1c0      	cbz	r0, 800b39c <_vfiprintf_r+0x78>
 800b36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b36c:	07dc      	lsls	r4, r3, #31
 800b36e:	d50e      	bpl.n	800b38e <_vfiprintf_r+0x6a>
 800b370:	f04f 30ff 	mov.w	r0, #4294967295
 800b374:	b01d      	add	sp, #116	; 0x74
 800b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37a:	4b7b      	ldr	r3, [pc, #492]	; (800b568 <_vfiprintf_r+0x244>)
 800b37c:	429d      	cmp	r5, r3
 800b37e:	d101      	bne.n	800b384 <_vfiprintf_r+0x60>
 800b380:	68b5      	ldr	r5, [r6, #8]
 800b382:	e7df      	b.n	800b344 <_vfiprintf_r+0x20>
 800b384:	4b79      	ldr	r3, [pc, #484]	; (800b56c <_vfiprintf_r+0x248>)
 800b386:	429d      	cmp	r5, r3
 800b388:	bf08      	it	eq
 800b38a:	68f5      	ldreq	r5, [r6, #12]
 800b38c:	e7da      	b.n	800b344 <_vfiprintf_r+0x20>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	0598      	lsls	r0, r3, #22
 800b392:	d4ed      	bmi.n	800b370 <_vfiprintf_r+0x4c>
 800b394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b396:	f000 fb84 	bl	800baa2 <__retarget_lock_release_recursive>
 800b39a:	e7e9      	b.n	800b370 <_vfiprintf_r+0x4c>
 800b39c:	2300      	movs	r3, #0
 800b39e:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a0:	2320      	movs	r3, #32
 800b3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3aa:	2330      	movs	r3, #48	; 0x30
 800b3ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b570 <_vfiprintf_r+0x24c>
 800b3b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3b4:	f04f 0901 	mov.w	r9, #1
 800b3b8:	4623      	mov	r3, r4
 800b3ba:	469a      	mov	sl, r3
 800b3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c0:	b10a      	cbz	r2, 800b3c6 <_vfiprintf_r+0xa2>
 800b3c2:	2a25      	cmp	r2, #37	; 0x25
 800b3c4:	d1f9      	bne.n	800b3ba <_vfiprintf_r+0x96>
 800b3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ca:	d00b      	beq.n	800b3e4 <_vfiprintf_r+0xc0>
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7ff ff94 	bl	800b300 <__sfputs_r>
 800b3d8:	3001      	adds	r0, #1
 800b3da:	f000 80aa 	beq.w	800b532 <_vfiprintf_r+0x20e>
 800b3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e0:	445a      	add	r2, fp
 800b3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 80a2 	beq.w	800b532 <_vfiprintf_r+0x20e>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3f8:	f10a 0a01 	add.w	sl, sl, #1
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	9307      	str	r3, [sp, #28]
 800b400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b404:	931a      	str	r3, [sp, #104]	; 0x68
 800b406:	4654      	mov	r4, sl
 800b408:	2205      	movs	r2, #5
 800b40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b40e:	4858      	ldr	r0, [pc, #352]	; (800b570 <_vfiprintf_r+0x24c>)
 800b410:	f7f4 ff06 	bl	8000220 <memchr>
 800b414:	9a04      	ldr	r2, [sp, #16]
 800b416:	b9d8      	cbnz	r0, 800b450 <_vfiprintf_r+0x12c>
 800b418:	06d1      	lsls	r1, r2, #27
 800b41a:	bf44      	itt	mi
 800b41c:	2320      	movmi	r3, #32
 800b41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b422:	0713      	lsls	r3, r2, #28
 800b424:	bf44      	itt	mi
 800b426:	232b      	movmi	r3, #43	; 0x2b
 800b428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b42c:	f89a 3000 	ldrb.w	r3, [sl]
 800b430:	2b2a      	cmp	r3, #42	; 0x2a
 800b432:	d015      	beq.n	800b460 <_vfiprintf_r+0x13c>
 800b434:	9a07      	ldr	r2, [sp, #28]
 800b436:	4654      	mov	r4, sl
 800b438:	2000      	movs	r0, #0
 800b43a:	f04f 0c0a 	mov.w	ip, #10
 800b43e:	4621      	mov	r1, r4
 800b440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b444:	3b30      	subs	r3, #48	; 0x30
 800b446:	2b09      	cmp	r3, #9
 800b448:	d94e      	bls.n	800b4e8 <_vfiprintf_r+0x1c4>
 800b44a:	b1b0      	cbz	r0, 800b47a <_vfiprintf_r+0x156>
 800b44c:	9207      	str	r2, [sp, #28]
 800b44e:	e014      	b.n	800b47a <_vfiprintf_r+0x156>
 800b450:	eba0 0308 	sub.w	r3, r0, r8
 800b454:	fa09 f303 	lsl.w	r3, r9, r3
 800b458:	4313      	orrs	r3, r2
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	46a2      	mov	sl, r4
 800b45e:	e7d2      	b.n	800b406 <_vfiprintf_r+0xe2>
 800b460:	9b03      	ldr	r3, [sp, #12]
 800b462:	1d19      	adds	r1, r3, #4
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	9103      	str	r1, [sp, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	bfbb      	ittet	lt
 800b46c:	425b      	neglt	r3, r3
 800b46e:	f042 0202 	orrlt.w	r2, r2, #2
 800b472:	9307      	strge	r3, [sp, #28]
 800b474:	9307      	strlt	r3, [sp, #28]
 800b476:	bfb8      	it	lt
 800b478:	9204      	strlt	r2, [sp, #16]
 800b47a:	7823      	ldrb	r3, [r4, #0]
 800b47c:	2b2e      	cmp	r3, #46	; 0x2e
 800b47e:	d10c      	bne.n	800b49a <_vfiprintf_r+0x176>
 800b480:	7863      	ldrb	r3, [r4, #1]
 800b482:	2b2a      	cmp	r3, #42	; 0x2a
 800b484:	d135      	bne.n	800b4f2 <_vfiprintf_r+0x1ce>
 800b486:	9b03      	ldr	r3, [sp, #12]
 800b488:	1d1a      	adds	r2, r3, #4
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	9203      	str	r2, [sp, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	bfb8      	it	lt
 800b492:	f04f 33ff 	movlt.w	r3, #4294967295
 800b496:	3402      	adds	r4, #2
 800b498:	9305      	str	r3, [sp, #20]
 800b49a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b580 <_vfiprintf_r+0x25c>
 800b49e:	7821      	ldrb	r1, [r4, #0]
 800b4a0:	2203      	movs	r2, #3
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	f7f4 febc 	bl	8000220 <memchr>
 800b4a8:	b140      	cbz	r0, 800b4bc <_vfiprintf_r+0x198>
 800b4aa:	2340      	movs	r3, #64	; 0x40
 800b4ac:	eba0 000a 	sub.w	r0, r0, sl
 800b4b0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4b4:	9b04      	ldr	r3, [sp, #16]
 800b4b6:	4303      	orrs	r3, r0
 800b4b8:	3401      	adds	r4, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c0:	482c      	ldr	r0, [pc, #176]	; (800b574 <_vfiprintf_r+0x250>)
 800b4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4c6:	2206      	movs	r2, #6
 800b4c8:	f7f4 feaa 	bl	8000220 <memchr>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d03f      	beq.n	800b550 <_vfiprintf_r+0x22c>
 800b4d0:	4b29      	ldr	r3, [pc, #164]	; (800b578 <_vfiprintf_r+0x254>)
 800b4d2:	bb1b      	cbnz	r3, 800b51c <_vfiprintf_r+0x1f8>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	3307      	adds	r3, #7
 800b4d8:	f023 0307 	bic.w	r3, r3, #7
 800b4dc:	3308      	adds	r3, #8
 800b4de:	9303      	str	r3, [sp, #12]
 800b4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e2:	443b      	add	r3, r7
 800b4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e6:	e767      	b.n	800b3b8 <_vfiprintf_r+0x94>
 800b4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	e7a5      	b.n	800b43e <_vfiprintf_r+0x11a>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	3401      	adds	r4, #1
 800b4f6:	9305      	str	r3, [sp, #20]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	f04f 0c0a 	mov.w	ip, #10
 800b4fe:	4620      	mov	r0, r4
 800b500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b504:	3a30      	subs	r2, #48	; 0x30
 800b506:	2a09      	cmp	r2, #9
 800b508:	d903      	bls.n	800b512 <_vfiprintf_r+0x1ee>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0c5      	beq.n	800b49a <_vfiprintf_r+0x176>
 800b50e:	9105      	str	r1, [sp, #20]
 800b510:	e7c3      	b.n	800b49a <_vfiprintf_r+0x176>
 800b512:	fb0c 2101 	mla	r1, ip, r1, r2
 800b516:	4604      	mov	r4, r0
 800b518:	2301      	movs	r3, #1
 800b51a:	e7f0      	b.n	800b4fe <_vfiprintf_r+0x1da>
 800b51c:	ab03      	add	r3, sp, #12
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	462a      	mov	r2, r5
 800b522:	4b16      	ldr	r3, [pc, #88]	; (800b57c <_vfiprintf_r+0x258>)
 800b524:	a904      	add	r1, sp, #16
 800b526:	4630      	mov	r0, r6
 800b528:	f7fd fdd8 	bl	80090dc <_printf_float>
 800b52c:	4607      	mov	r7, r0
 800b52e:	1c78      	adds	r0, r7, #1
 800b530:	d1d6      	bne.n	800b4e0 <_vfiprintf_r+0x1bc>
 800b532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b534:	07d9      	lsls	r1, r3, #31
 800b536:	d405      	bmi.n	800b544 <_vfiprintf_r+0x220>
 800b538:	89ab      	ldrh	r3, [r5, #12]
 800b53a:	059a      	lsls	r2, r3, #22
 800b53c:	d402      	bmi.n	800b544 <_vfiprintf_r+0x220>
 800b53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b540:	f000 faaf 	bl	800baa2 <__retarget_lock_release_recursive>
 800b544:	89ab      	ldrh	r3, [r5, #12]
 800b546:	065b      	lsls	r3, r3, #25
 800b548:	f53f af12 	bmi.w	800b370 <_vfiprintf_r+0x4c>
 800b54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b54e:	e711      	b.n	800b374 <_vfiprintf_r+0x50>
 800b550:	ab03      	add	r3, sp, #12
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	462a      	mov	r2, r5
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <_vfiprintf_r+0x258>)
 800b558:	a904      	add	r1, sp, #16
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7fe f862 	bl	8009624 <_printf_i>
 800b560:	e7e4      	b.n	800b52c <_vfiprintf_r+0x208>
 800b562:	bf00      	nop
 800b564:	0800c3bc 	.word	0x0800c3bc
 800b568:	0800c3dc 	.word	0x0800c3dc
 800b56c:	0800c39c 	.word	0x0800c39c
 800b570:	0800c244 	.word	0x0800c244
 800b574:	0800c24e 	.word	0x0800c24e
 800b578:	080090dd 	.word	0x080090dd
 800b57c:	0800b301 	.word	0x0800b301
 800b580:	0800c24a 	.word	0x0800c24a

0800b584 <__swbuf_r>:
 800b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b586:	460e      	mov	r6, r1
 800b588:	4614      	mov	r4, r2
 800b58a:	4605      	mov	r5, r0
 800b58c:	b118      	cbz	r0, 800b596 <__swbuf_r+0x12>
 800b58e:	6983      	ldr	r3, [r0, #24]
 800b590:	b90b      	cbnz	r3, 800b596 <__swbuf_r+0x12>
 800b592:	f000 f9e7 	bl	800b964 <__sinit>
 800b596:	4b21      	ldr	r3, [pc, #132]	; (800b61c <__swbuf_r+0x98>)
 800b598:	429c      	cmp	r4, r3
 800b59a:	d12b      	bne.n	800b5f4 <__swbuf_r+0x70>
 800b59c:	686c      	ldr	r4, [r5, #4]
 800b59e:	69a3      	ldr	r3, [r4, #24]
 800b5a0:	60a3      	str	r3, [r4, #8]
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	071a      	lsls	r2, r3, #28
 800b5a6:	d52f      	bpl.n	800b608 <__swbuf_r+0x84>
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	b36b      	cbz	r3, 800b608 <__swbuf_r+0x84>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	6820      	ldr	r0, [r4, #0]
 800b5b0:	1ac0      	subs	r0, r0, r3
 800b5b2:	6963      	ldr	r3, [r4, #20]
 800b5b4:	b2f6      	uxtb	r6, r6
 800b5b6:	4283      	cmp	r3, r0
 800b5b8:	4637      	mov	r7, r6
 800b5ba:	dc04      	bgt.n	800b5c6 <__swbuf_r+0x42>
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f000 f93c 	bl	800b83c <_fflush_r>
 800b5c4:	bb30      	cbnz	r0, 800b614 <__swbuf_r+0x90>
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	60a3      	str	r3, [r4, #8]
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	6022      	str	r2, [r4, #0]
 800b5d2:	701e      	strb	r6, [r3, #0]
 800b5d4:	6963      	ldr	r3, [r4, #20]
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	4283      	cmp	r3, r0
 800b5da:	d004      	beq.n	800b5e6 <__swbuf_r+0x62>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	07db      	lsls	r3, r3, #31
 800b5e0:	d506      	bpl.n	800b5f0 <__swbuf_r+0x6c>
 800b5e2:	2e0a      	cmp	r6, #10
 800b5e4:	d104      	bne.n	800b5f0 <__swbuf_r+0x6c>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f000 f927 	bl	800b83c <_fflush_r>
 800b5ee:	b988      	cbnz	r0, 800b614 <__swbuf_r+0x90>
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <__swbuf_r+0x9c>)
 800b5f6:	429c      	cmp	r4, r3
 800b5f8:	d101      	bne.n	800b5fe <__swbuf_r+0x7a>
 800b5fa:	68ac      	ldr	r4, [r5, #8]
 800b5fc:	e7cf      	b.n	800b59e <__swbuf_r+0x1a>
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <__swbuf_r+0xa0>)
 800b600:	429c      	cmp	r4, r3
 800b602:	bf08      	it	eq
 800b604:	68ec      	ldreq	r4, [r5, #12]
 800b606:	e7ca      	b.n	800b59e <__swbuf_r+0x1a>
 800b608:	4621      	mov	r1, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 f81a 	bl	800b644 <__swsetup_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	d0cb      	beq.n	800b5ac <__swbuf_r+0x28>
 800b614:	f04f 37ff 	mov.w	r7, #4294967295
 800b618:	e7ea      	b.n	800b5f0 <__swbuf_r+0x6c>
 800b61a:	bf00      	nop
 800b61c:	0800c3bc 	.word	0x0800c3bc
 800b620:	0800c3dc 	.word	0x0800c3dc
 800b624:	0800c39c 	.word	0x0800c39c

0800b628 <__ascii_wctomb>:
 800b628:	b149      	cbz	r1, 800b63e <__ascii_wctomb+0x16>
 800b62a:	2aff      	cmp	r2, #255	; 0xff
 800b62c:	bf85      	ittet	hi
 800b62e:	238a      	movhi	r3, #138	; 0x8a
 800b630:	6003      	strhi	r3, [r0, #0]
 800b632:	700a      	strbls	r2, [r1, #0]
 800b634:	f04f 30ff 	movhi.w	r0, #4294967295
 800b638:	bf98      	it	ls
 800b63a:	2001      	movls	r0, #1
 800b63c:	4770      	bx	lr
 800b63e:	4608      	mov	r0, r1
 800b640:	4770      	bx	lr
	...

0800b644 <__swsetup_r>:
 800b644:	4b32      	ldr	r3, [pc, #200]	; (800b710 <__swsetup_r+0xcc>)
 800b646:	b570      	push	{r4, r5, r6, lr}
 800b648:	681d      	ldr	r5, [r3, #0]
 800b64a:	4606      	mov	r6, r0
 800b64c:	460c      	mov	r4, r1
 800b64e:	b125      	cbz	r5, 800b65a <__swsetup_r+0x16>
 800b650:	69ab      	ldr	r3, [r5, #24]
 800b652:	b913      	cbnz	r3, 800b65a <__swsetup_r+0x16>
 800b654:	4628      	mov	r0, r5
 800b656:	f000 f985 	bl	800b964 <__sinit>
 800b65a:	4b2e      	ldr	r3, [pc, #184]	; (800b714 <__swsetup_r+0xd0>)
 800b65c:	429c      	cmp	r4, r3
 800b65e:	d10f      	bne.n	800b680 <__swsetup_r+0x3c>
 800b660:	686c      	ldr	r4, [r5, #4]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b668:	0719      	lsls	r1, r3, #28
 800b66a:	d42c      	bmi.n	800b6c6 <__swsetup_r+0x82>
 800b66c:	06dd      	lsls	r5, r3, #27
 800b66e:	d411      	bmi.n	800b694 <__swsetup_r+0x50>
 800b670:	2309      	movs	r3, #9
 800b672:	6033      	str	r3, [r6, #0]
 800b674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	f04f 30ff 	mov.w	r0, #4294967295
 800b67e:	e03e      	b.n	800b6fe <__swsetup_r+0xba>
 800b680:	4b25      	ldr	r3, [pc, #148]	; (800b718 <__swsetup_r+0xd4>)
 800b682:	429c      	cmp	r4, r3
 800b684:	d101      	bne.n	800b68a <__swsetup_r+0x46>
 800b686:	68ac      	ldr	r4, [r5, #8]
 800b688:	e7eb      	b.n	800b662 <__swsetup_r+0x1e>
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <__swsetup_r+0xd8>)
 800b68c:	429c      	cmp	r4, r3
 800b68e:	bf08      	it	eq
 800b690:	68ec      	ldreq	r4, [r5, #12]
 800b692:	e7e6      	b.n	800b662 <__swsetup_r+0x1e>
 800b694:	0758      	lsls	r0, r3, #29
 800b696:	d512      	bpl.n	800b6be <__swsetup_r+0x7a>
 800b698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b69a:	b141      	cbz	r1, 800b6ae <__swsetup_r+0x6a>
 800b69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6a0:	4299      	cmp	r1, r3
 800b6a2:	d002      	beq.n	800b6aa <__swsetup_r+0x66>
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f7ff fb31 	bl	800ad0c <_free_r>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6063      	str	r3, [r4, #4]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f043 0308 	orr.w	r3, r3, #8
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	b94b      	cbnz	r3, 800b6de <__swsetup_r+0x9a>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d4:	d003      	beq.n	800b6de <__swsetup_r+0x9a>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f000 fa09 	bl	800baf0 <__smakebuf_r>
 800b6de:	89a0      	ldrh	r0, [r4, #12]
 800b6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e4:	f010 0301 	ands.w	r3, r0, #1
 800b6e8:	d00a      	beq.n	800b700 <__swsetup_r+0xbc>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60a3      	str	r3, [r4, #8]
 800b6ee:	6963      	ldr	r3, [r4, #20]
 800b6f0:	425b      	negs	r3, r3
 800b6f2:	61a3      	str	r3, [r4, #24]
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	b943      	cbnz	r3, 800b70a <__swsetup_r+0xc6>
 800b6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6fc:	d1ba      	bne.n	800b674 <__swsetup_r+0x30>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	0781      	lsls	r1, r0, #30
 800b702:	bf58      	it	pl
 800b704:	6963      	ldrpl	r3, [r4, #20]
 800b706:	60a3      	str	r3, [r4, #8]
 800b708:	e7f4      	b.n	800b6f4 <__swsetup_r+0xb0>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e7f7      	b.n	800b6fe <__swsetup_r+0xba>
 800b70e:	bf00      	nop
 800b710:	200000c4 	.word	0x200000c4
 800b714:	0800c3bc 	.word	0x0800c3bc
 800b718:	0800c3dc 	.word	0x0800c3dc
 800b71c:	0800c39c 	.word	0x0800c39c

0800b720 <abort>:
 800b720:	b508      	push	{r3, lr}
 800b722:	2006      	movs	r0, #6
 800b724:	f000 fa54 	bl	800bbd0 <raise>
 800b728:	2001      	movs	r0, #1
 800b72a:	f7f7 febf 	bl	80034ac <_exit>
	...

0800b730 <__sflush_r>:
 800b730:	898a      	ldrh	r2, [r1, #12]
 800b732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b736:	4605      	mov	r5, r0
 800b738:	0710      	lsls	r0, r2, #28
 800b73a:	460c      	mov	r4, r1
 800b73c:	d458      	bmi.n	800b7f0 <__sflush_r+0xc0>
 800b73e:	684b      	ldr	r3, [r1, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	dc05      	bgt.n	800b750 <__sflush_r+0x20>
 800b744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b746:	2b00      	cmp	r3, #0
 800b748:	dc02      	bgt.n	800b750 <__sflush_r+0x20>
 800b74a:	2000      	movs	r0, #0
 800b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b752:	2e00      	cmp	r6, #0
 800b754:	d0f9      	beq.n	800b74a <__sflush_r+0x1a>
 800b756:	2300      	movs	r3, #0
 800b758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b75c:	682f      	ldr	r7, [r5, #0]
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	d032      	beq.n	800b7c8 <__sflush_r+0x98>
 800b762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	075a      	lsls	r2, r3, #29
 800b768:	d505      	bpl.n	800b776 <__sflush_r+0x46>
 800b76a:	6863      	ldr	r3, [r4, #4]
 800b76c:	1ac0      	subs	r0, r0, r3
 800b76e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b770:	b10b      	cbz	r3, 800b776 <__sflush_r+0x46>
 800b772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b774:	1ac0      	subs	r0, r0, r3
 800b776:	2300      	movs	r3, #0
 800b778:	4602      	mov	r2, r0
 800b77a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b77c:	6a21      	ldr	r1, [r4, #32]
 800b77e:	4628      	mov	r0, r5
 800b780:	47b0      	blx	r6
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	d106      	bne.n	800b796 <__sflush_r+0x66>
 800b788:	6829      	ldr	r1, [r5, #0]
 800b78a:	291d      	cmp	r1, #29
 800b78c:	d82c      	bhi.n	800b7e8 <__sflush_r+0xb8>
 800b78e:	4a2a      	ldr	r2, [pc, #168]	; (800b838 <__sflush_r+0x108>)
 800b790:	40ca      	lsrs	r2, r1
 800b792:	07d6      	lsls	r6, r2, #31
 800b794:	d528      	bpl.n	800b7e8 <__sflush_r+0xb8>
 800b796:	2200      	movs	r2, #0
 800b798:	6062      	str	r2, [r4, #4]
 800b79a:	04d9      	lsls	r1, r3, #19
 800b79c:	6922      	ldr	r2, [r4, #16]
 800b79e:	6022      	str	r2, [r4, #0]
 800b7a0:	d504      	bpl.n	800b7ac <__sflush_r+0x7c>
 800b7a2:	1c42      	adds	r2, r0, #1
 800b7a4:	d101      	bne.n	800b7aa <__sflush_r+0x7a>
 800b7a6:	682b      	ldr	r3, [r5, #0]
 800b7a8:	b903      	cbnz	r3, 800b7ac <__sflush_r+0x7c>
 800b7aa:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ae:	602f      	str	r7, [r5, #0]
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	d0ca      	beq.n	800b74a <__sflush_r+0x1a>
 800b7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b8:	4299      	cmp	r1, r3
 800b7ba:	d002      	beq.n	800b7c2 <__sflush_r+0x92>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f7ff faa5 	bl	800ad0c <_free_r>
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b7c6:	e7c1      	b.n	800b74c <__sflush_r+0x1c>
 800b7c8:	6a21      	ldr	r1, [r4, #32]
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b0      	blx	r6
 800b7d0:	1c41      	adds	r1, r0, #1
 800b7d2:	d1c7      	bne.n	800b764 <__sflush_r+0x34>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0c4      	beq.n	800b764 <__sflush_r+0x34>
 800b7da:	2b1d      	cmp	r3, #29
 800b7dc:	d001      	beq.n	800b7e2 <__sflush_r+0xb2>
 800b7de:	2b16      	cmp	r3, #22
 800b7e0:	d101      	bne.n	800b7e6 <__sflush_r+0xb6>
 800b7e2:	602f      	str	r7, [r5, #0]
 800b7e4:	e7b1      	b.n	800b74a <__sflush_r+0x1a>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ec:	81a3      	strh	r3, [r4, #12]
 800b7ee:	e7ad      	b.n	800b74c <__sflush_r+0x1c>
 800b7f0:	690f      	ldr	r7, [r1, #16]
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	d0a9      	beq.n	800b74a <__sflush_r+0x1a>
 800b7f6:	0793      	lsls	r3, r2, #30
 800b7f8:	680e      	ldr	r6, [r1, #0]
 800b7fa:	bf08      	it	eq
 800b7fc:	694b      	ldreq	r3, [r1, #20]
 800b7fe:	600f      	str	r7, [r1, #0]
 800b800:	bf18      	it	ne
 800b802:	2300      	movne	r3, #0
 800b804:	eba6 0807 	sub.w	r8, r6, r7
 800b808:	608b      	str	r3, [r1, #8]
 800b80a:	f1b8 0f00 	cmp.w	r8, #0
 800b80e:	dd9c      	ble.n	800b74a <__sflush_r+0x1a>
 800b810:	6a21      	ldr	r1, [r4, #32]
 800b812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b814:	4643      	mov	r3, r8
 800b816:	463a      	mov	r2, r7
 800b818:	4628      	mov	r0, r5
 800b81a:	47b0      	blx	r6
 800b81c:	2800      	cmp	r0, #0
 800b81e:	dc06      	bgt.n	800b82e <__sflush_r+0xfe>
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	f04f 30ff 	mov.w	r0, #4294967295
 800b82c:	e78e      	b.n	800b74c <__sflush_r+0x1c>
 800b82e:	4407      	add	r7, r0
 800b830:	eba8 0800 	sub.w	r8, r8, r0
 800b834:	e7e9      	b.n	800b80a <__sflush_r+0xda>
 800b836:	bf00      	nop
 800b838:	20400001 	.word	0x20400001

0800b83c <_fflush_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	690b      	ldr	r3, [r1, #16]
 800b840:	4605      	mov	r5, r0
 800b842:	460c      	mov	r4, r1
 800b844:	b913      	cbnz	r3, 800b84c <_fflush_r+0x10>
 800b846:	2500      	movs	r5, #0
 800b848:	4628      	mov	r0, r5
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	b118      	cbz	r0, 800b856 <_fflush_r+0x1a>
 800b84e:	6983      	ldr	r3, [r0, #24]
 800b850:	b90b      	cbnz	r3, 800b856 <_fflush_r+0x1a>
 800b852:	f000 f887 	bl	800b964 <__sinit>
 800b856:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <_fflush_r+0x6c>)
 800b858:	429c      	cmp	r4, r3
 800b85a:	d11b      	bne.n	800b894 <_fflush_r+0x58>
 800b85c:	686c      	ldr	r4, [r5, #4]
 800b85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0ef      	beq.n	800b846 <_fflush_r+0xa>
 800b866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b868:	07d0      	lsls	r0, r2, #31
 800b86a:	d404      	bmi.n	800b876 <_fflush_r+0x3a>
 800b86c:	0599      	lsls	r1, r3, #22
 800b86e:	d402      	bmi.n	800b876 <_fflush_r+0x3a>
 800b870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b872:	f000 f915 	bl	800baa0 <__retarget_lock_acquire_recursive>
 800b876:	4628      	mov	r0, r5
 800b878:	4621      	mov	r1, r4
 800b87a:	f7ff ff59 	bl	800b730 <__sflush_r>
 800b87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b880:	07da      	lsls	r2, r3, #31
 800b882:	4605      	mov	r5, r0
 800b884:	d4e0      	bmi.n	800b848 <_fflush_r+0xc>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	059b      	lsls	r3, r3, #22
 800b88a:	d4dd      	bmi.n	800b848 <_fflush_r+0xc>
 800b88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b88e:	f000 f908 	bl	800baa2 <__retarget_lock_release_recursive>
 800b892:	e7d9      	b.n	800b848 <_fflush_r+0xc>
 800b894:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <_fflush_r+0x70>)
 800b896:	429c      	cmp	r4, r3
 800b898:	d101      	bne.n	800b89e <_fflush_r+0x62>
 800b89a:	68ac      	ldr	r4, [r5, #8]
 800b89c:	e7df      	b.n	800b85e <_fflush_r+0x22>
 800b89e:	4b04      	ldr	r3, [pc, #16]	; (800b8b0 <_fflush_r+0x74>)
 800b8a0:	429c      	cmp	r4, r3
 800b8a2:	bf08      	it	eq
 800b8a4:	68ec      	ldreq	r4, [r5, #12]
 800b8a6:	e7da      	b.n	800b85e <_fflush_r+0x22>
 800b8a8:	0800c3bc 	.word	0x0800c3bc
 800b8ac:	0800c3dc 	.word	0x0800c3dc
 800b8b0:	0800c39c 	.word	0x0800c39c

0800b8b4 <std>:
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	b510      	push	{r4, lr}
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8c2:	6083      	str	r3, [r0, #8]
 800b8c4:	8181      	strh	r1, [r0, #12]
 800b8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800b8c8:	81c2      	strh	r2, [r0, #14]
 800b8ca:	6183      	str	r3, [r0, #24]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	2208      	movs	r2, #8
 800b8d0:	305c      	adds	r0, #92	; 0x5c
 800b8d2:	f7fd fb5b 	bl	8008f8c <memset>
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <std+0x38>)
 800b8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800b8da:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <std+0x3c>)
 800b8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <std+0x40>)
 800b8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8e2:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <std+0x44>)
 800b8e4:	6224      	str	r4, [r4, #32]
 800b8e6:	6323      	str	r3, [r4, #48]	; 0x30
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	bf00      	nop
 800b8ec:	0800bc09 	.word	0x0800bc09
 800b8f0:	0800bc2b 	.word	0x0800bc2b
 800b8f4:	0800bc63 	.word	0x0800bc63
 800b8f8:	0800bc87 	.word	0x0800bc87

0800b8fc <_cleanup_r>:
 800b8fc:	4901      	ldr	r1, [pc, #4]	; (800b904 <_cleanup_r+0x8>)
 800b8fe:	f000 b8af 	b.w	800ba60 <_fwalk_reent>
 800b902:	bf00      	nop
 800b904:	0800b83d 	.word	0x0800b83d

0800b908 <__sfmoreglue>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	2268      	movs	r2, #104	; 0x68
 800b90c:	1e4d      	subs	r5, r1, #1
 800b90e:	4355      	muls	r5, r2
 800b910:	460e      	mov	r6, r1
 800b912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b916:	f7ff fa65 	bl	800ade4 <_malloc_r>
 800b91a:	4604      	mov	r4, r0
 800b91c:	b140      	cbz	r0, 800b930 <__sfmoreglue+0x28>
 800b91e:	2100      	movs	r1, #0
 800b920:	e9c0 1600 	strd	r1, r6, [r0]
 800b924:	300c      	adds	r0, #12
 800b926:	60a0      	str	r0, [r4, #8]
 800b928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b92c:	f7fd fb2e 	bl	8008f8c <memset>
 800b930:	4620      	mov	r0, r4
 800b932:	bd70      	pop	{r4, r5, r6, pc}

0800b934 <__sfp_lock_acquire>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__sfp_lock_acquire+0x8>)
 800b936:	f000 b8b3 	b.w	800baa0 <__retarget_lock_acquire_recursive>
 800b93a:	bf00      	nop
 800b93c:	20000ab1 	.word	0x20000ab1

0800b940 <__sfp_lock_release>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__sfp_lock_release+0x8>)
 800b942:	f000 b8ae 	b.w	800baa2 <__retarget_lock_release_recursive>
 800b946:	bf00      	nop
 800b948:	20000ab1 	.word	0x20000ab1

0800b94c <__sinit_lock_acquire>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__sinit_lock_acquire+0x8>)
 800b94e:	f000 b8a7 	b.w	800baa0 <__retarget_lock_acquire_recursive>
 800b952:	bf00      	nop
 800b954:	20000ab2 	.word	0x20000ab2

0800b958 <__sinit_lock_release>:
 800b958:	4801      	ldr	r0, [pc, #4]	; (800b960 <__sinit_lock_release+0x8>)
 800b95a:	f000 b8a2 	b.w	800baa2 <__retarget_lock_release_recursive>
 800b95e:	bf00      	nop
 800b960:	20000ab2 	.word	0x20000ab2

0800b964 <__sinit>:
 800b964:	b510      	push	{r4, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	f7ff fff0 	bl	800b94c <__sinit_lock_acquire>
 800b96c:	69a3      	ldr	r3, [r4, #24]
 800b96e:	b11b      	cbz	r3, 800b978 <__sinit+0x14>
 800b970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b974:	f7ff bff0 	b.w	800b958 <__sinit_lock_release>
 800b978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b97c:	6523      	str	r3, [r4, #80]	; 0x50
 800b97e:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <__sinit+0x68>)
 800b980:	4a13      	ldr	r2, [pc, #76]	; (800b9d0 <__sinit+0x6c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	62a2      	str	r2, [r4, #40]	; 0x28
 800b986:	42a3      	cmp	r3, r4
 800b988:	bf04      	itt	eq
 800b98a:	2301      	moveq	r3, #1
 800b98c:	61a3      	streq	r3, [r4, #24]
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 f820 	bl	800b9d4 <__sfp>
 800b994:	6060      	str	r0, [r4, #4]
 800b996:	4620      	mov	r0, r4
 800b998:	f000 f81c 	bl	800b9d4 <__sfp>
 800b99c:	60a0      	str	r0, [r4, #8]
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 f818 	bl	800b9d4 <__sfp>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	60e0      	str	r0, [r4, #12]
 800b9a8:	2104      	movs	r1, #4
 800b9aa:	6860      	ldr	r0, [r4, #4]
 800b9ac:	f7ff ff82 	bl	800b8b4 <std>
 800b9b0:	68a0      	ldr	r0, [r4, #8]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	2109      	movs	r1, #9
 800b9b6:	f7ff ff7d 	bl	800b8b4 <std>
 800b9ba:	68e0      	ldr	r0, [r4, #12]
 800b9bc:	2202      	movs	r2, #2
 800b9be:	2112      	movs	r1, #18
 800b9c0:	f7ff ff78 	bl	800b8b4 <std>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	61a3      	str	r3, [r4, #24]
 800b9c8:	e7d2      	b.n	800b970 <__sinit+0xc>
 800b9ca:	bf00      	nop
 800b9cc:	0800c024 	.word	0x0800c024
 800b9d0:	0800b8fd 	.word	0x0800b8fd

0800b9d4 <__sfp>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	f7ff ffac 	bl	800b934 <__sfp_lock_acquire>
 800b9dc:	4b1e      	ldr	r3, [pc, #120]	; (800ba58 <__sfp+0x84>)
 800b9de:	681e      	ldr	r6, [r3, #0]
 800b9e0:	69b3      	ldr	r3, [r6, #24]
 800b9e2:	b913      	cbnz	r3, 800b9ea <__sfp+0x16>
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff ffbd 	bl	800b964 <__sinit>
 800b9ea:	3648      	adds	r6, #72	; 0x48
 800b9ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	d503      	bpl.n	800b9fc <__sfp+0x28>
 800b9f4:	6833      	ldr	r3, [r6, #0]
 800b9f6:	b30b      	cbz	r3, 800ba3c <__sfp+0x68>
 800b9f8:	6836      	ldr	r6, [r6, #0]
 800b9fa:	e7f7      	b.n	800b9ec <__sfp+0x18>
 800b9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba00:	b9d5      	cbnz	r5, 800ba38 <__sfp+0x64>
 800ba02:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <__sfp+0x88>)
 800ba04:	60e3      	str	r3, [r4, #12]
 800ba06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba0a:	6665      	str	r5, [r4, #100]	; 0x64
 800ba0c:	f000 f847 	bl	800ba9e <__retarget_lock_init_recursive>
 800ba10:	f7ff ff96 	bl	800b940 <__sfp_lock_release>
 800ba14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba1c:	6025      	str	r5, [r4, #0]
 800ba1e:	61a5      	str	r5, [r4, #24]
 800ba20:	2208      	movs	r2, #8
 800ba22:	4629      	mov	r1, r5
 800ba24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba28:	f7fd fab0 	bl	8008f8c <memset>
 800ba2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba34:	4620      	mov	r0, r4
 800ba36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba38:	3468      	adds	r4, #104	; 0x68
 800ba3a:	e7d9      	b.n	800b9f0 <__sfp+0x1c>
 800ba3c:	2104      	movs	r1, #4
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f7ff ff62 	bl	800b908 <__sfmoreglue>
 800ba44:	4604      	mov	r4, r0
 800ba46:	6030      	str	r0, [r6, #0]
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d1d5      	bne.n	800b9f8 <__sfp+0x24>
 800ba4c:	f7ff ff78 	bl	800b940 <__sfp_lock_release>
 800ba50:	230c      	movs	r3, #12
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	e7ee      	b.n	800ba34 <__sfp+0x60>
 800ba56:	bf00      	nop
 800ba58:	0800c024 	.word	0x0800c024
 800ba5c:	ffff0001 	.word	0xffff0001

0800ba60 <_fwalk_reent>:
 800ba60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba64:	4606      	mov	r6, r0
 800ba66:	4688      	mov	r8, r1
 800ba68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba6c:	2700      	movs	r7, #0
 800ba6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba72:	f1b9 0901 	subs.w	r9, r9, #1
 800ba76:	d505      	bpl.n	800ba84 <_fwalk_reent+0x24>
 800ba78:	6824      	ldr	r4, [r4, #0]
 800ba7a:	2c00      	cmp	r4, #0
 800ba7c:	d1f7      	bne.n	800ba6e <_fwalk_reent+0xe>
 800ba7e:	4638      	mov	r0, r7
 800ba80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba84:	89ab      	ldrh	r3, [r5, #12]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d907      	bls.n	800ba9a <_fwalk_reent+0x3a>
 800ba8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	d003      	beq.n	800ba9a <_fwalk_reent+0x3a>
 800ba92:	4629      	mov	r1, r5
 800ba94:	4630      	mov	r0, r6
 800ba96:	47c0      	blx	r8
 800ba98:	4307      	orrs	r7, r0
 800ba9a:	3568      	adds	r5, #104	; 0x68
 800ba9c:	e7e9      	b.n	800ba72 <_fwalk_reent+0x12>

0800ba9e <__retarget_lock_init_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <__retarget_lock_acquire_recursive>:
 800baa0:	4770      	bx	lr

0800baa2 <__retarget_lock_release_recursive>:
 800baa2:	4770      	bx	lr

0800baa4 <__swhatbuf_r>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	460e      	mov	r6, r1
 800baa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baac:	2900      	cmp	r1, #0
 800baae:	b096      	sub	sp, #88	; 0x58
 800bab0:	4614      	mov	r4, r2
 800bab2:	461d      	mov	r5, r3
 800bab4:	da08      	bge.n	800bac8 <__swhatbuf_r+0x24>
 800bab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	602a      	str	r2, [r5, #0]
 800babe:	061a      	lsls	r2, r3, #24
 800bac0:	d410      	bmi.n	800bae4 <__swhatbuf_r+0x40>
 800bac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac6:	e00e      	b.n	800bae6 <__swhatbuf_r+0x42>
 800bac8:	466a      	mov	r2, sp
 800baca:	f000 f903 	bl	800bcd4 <_fstat_r>
 800bace:	2800      	cmp	r0, #0
 800bad0:	dbf1      	blt.n	800bab6 <__swhatbuf_r+0x12>
 800bad2:	9a01      	ldr	r2, [sp, #4]
 800bad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800badc:	425a      	negs	r2, r3
 800bade:	415a      	adcs	r2, r3
 800bae0:	602a      	str	r2, [r5, #0]
 800bae2:	e7ee      	b.n	800bac2 <__swhatbuf_r+0x1e>
 800bae4:	2340      	movs	r3, #64	; 0x40
 800bae6:	2000      	movs	r0, #0
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	b016      	add	sp, #88	; 0x58
 800baec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800baf0 <__smakebuf_r>:
 800baf0:	898b      	ldrh	r3, [r1, #12]
 800baf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baf4:	079d      	lsls	r5, r3, #30
 800baf6:	4606      	mov	r6, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	d507      	bpl.n	800bb0c <__smakebuf_r+0x1c>
 800bafc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	6123      	str	r3, [r4, #16]
 800bb04:	2301      	movs	r3, #1
 800bb06:	6163      	str	r3, [r4, #20]
 800bb08:	b002      	add	sp, #8
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	ab01      	add	r3, sp, #4
 800bb0e:	466a      	mov	r2, sp
 800bb10:	f7ff ffc8 	bl	800baa4 <__swhatbuf_r>
 800bb14:	9900      	ldr	r1, [sp, #0]
 800bb16:	4605      	mov	r5, r0
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7ff f963 	bl	800ade4 <_malloc_r>
 800bb1e:	b948      	cbnz	r0, 800bb34 <__smakebuf_r+0x44>
 800bb20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb24:	059a      	lsls	r2, r3, #22
 800bb26:	d4ef      	bmi.n	800bb08 <__smakebuf_r+0x18>
 800bb28:	f023 0303 	bic.w	r3, r3, #3
 800bb2c:	f043 0302 	orr.w	r3, r3, #2
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	e7e3      	b.n	800bafc <__smakebuf_r+0xc>
 800bb34:	4b0d      	ldr	r3, [pc, #52]	; (800bb6c <__smakebuf_r+0x7c>)
 800bb36:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb40:	81a3      	strh	r3, [r4, #12]
 800bb42:	9b00      	ldr	r3, [sp, #0]
 800bb44:	6163      	str	r3, [r4, #20]
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	6120      	str	r0, [r4, #16]
 800bb4a:	b15b      	cbz	r3, 800bb64 <__smakebuf_r+0x74>
 800bb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb50:	4630      	mov	r0, r6
 800bb52:	f000 f8d1 	bl	800bcf8 <_isatty_r>
 800bb56:	b128      	cbz	r0, 800bb64 <__smakebuf_r+0x74>
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	f023 0303 	bic.w	r3, r3, #3
 800bb5e:	f043 0301 	orr.w	r3, r3, #1
 800bb62:	81a3      	strh	r3, [r4, #12]
 800bb64:	89a0      	ldrh	r0, [r4, #12]
 800bb66:	4305      	orrs	r5, r0
 800bb68:	81a5      	strh	r5, [r4, #12]
 800bb6a:	e7cd      	b.n	800bb08 <__smakebuf_r+0x18>
 800bb6c:	0800b8fd 	.word	0x0800b8fd

0800bb70 <_malloc_usable_size_r>:
 800bb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb74:	1f18      	subs	r0, r3, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bfbc      	itt	lt
 800bb7a:	580b      	ldrlt	r3, [r1, r0]
 800bb7c:	18c0      	addlt	r0, r0, r3
 800bb7e:	4770      	bx	lr

0800bb80 <_raise_r>:
 800bb80:	291f      	cmp	r1, #31
 800bb82:	b538      	push	{r3, r4, r5, lr}
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	d904      	bls.n	800bb94 <_raise_r+0x14>
 800bb8a:	2316      	movs	r3, #22
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb96:	b112      	cbz	r2, 800bb9e <_raise_r+0x1e>
 800bb98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb9c:	b94b      	cbnz	r3, 800bbb2 <_raise_r+0x32>
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 f830 	bl	800bc04 <_getpid_r>
 800bba4:	462a      	mov	r2, r5
 800bba6:	4601      	mov	r1, r0
 800bba8:	4620      	mov	r0, r4
 800bbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbae:	f000 b817 	b.w	800bbe0 <_kill_r>
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d00a      	beq.n	800bbcc <_raise_r+0x4c>
 800bbb6:	1c59      	adds	r1, r3, #1
 800bbb8:	d103      	bne.n	800bbc2 <_raise_r+0x42>
 800bbba:	2316      	movs	r3, #22
 800bbbc:	6003      	str	r3, [r0, #0]
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e7e7      	b.n	800bb92 <_raise_r+0x12>
 800bbc2:	2400      	movs	r4, #0
 800bbc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbc8:	4628      	mov	r0, r5
 800bbca:	4798      	blx	r3
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e7e0      	b.n	800bb92 <_raise_r+0x12>

0800bbd0 <raise>:
 800bbd0:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <raise+0xc>)
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	f7ff bfd3 	b.w	800bb80 <_raise_r>
 800bbda:	bf00      	nop
 800bbdc:	200000c4 	.word	0x200000c4

0800bbe0 <_kill_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4d07      	ldr	r5, [pc, #28]	; (800bc00 <_kill_r+0x20>)
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	4611      	mov	r1, r2
 800bbec:	602b      	str	r3, [r5, #0]
 800bbee:	f7f7 fc4d 	bl	800348c <_kill>
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	d102      	bne.n	800bbfc <_kill_r+0x1c>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	b103      	cbz	r3, 800bbfc <_kill_r+0x1c>
 800bbfa:	6023      	str	r3, [r4, #0]
 800bbfc:	bd38      	pop	{r3, r4, r5, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000aac 	.word	0x20000aac

0800bc04 <_getpid_r>:
 800bc04:	f7f7 bc3a 	b.w	800347c <_getpid>

0800bc08 <__sread>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc10:	f000 f894 	bl	800bd3c <_read_r>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	bfab      	itete	ge
 800bc18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc1c:	181b      	addge	r3, r3, r0
 800bc1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc22:	bfac      	ite	ge
 800bc24:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc26:	81a3      	strhlt	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__swrite>:
 800bc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2e:	461f      	mov	r7, r3
 800bc30:	898b      	ldrh	r3, [r1, #12]
 800bc32:	05db      	lsls	r3, r3, #23
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4616      	mov	r6, r2
 800bc3a:	d505      	bpl.n	800bc48 <__swrite+0x1e>
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	2302      	movs	r3, #2
 800bc42:	2200      	movs	r2, #0
 800bc44:	f000 f868 	bl	800bd18 <_lseek_r>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	4632      	mov	r2, r6
 800bc56:	463b      	mov	r3, r7
 800bc58:	4628      	mov	r0, r5
 800bc5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	f000 b817 	b.w	800bc90 <_write_r>

0800bc62 <__sseek>:
 800bc62:	b510      	push	{r4, lr}
 800bc64:	460c      	mov	r4, r1
 800bc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6a:	f000 f855 	bl	800bd18 <_lseek_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	bf15      	itete	ne
 800bc74:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc7e:	81a3      	strheq	r3, [r4, #12]
 800bc80:	bf18      	it	ne
 800bc82:	81a3      	strhne	r3, [r4, #12]
 800bc84:	bd10      	pop	{r4, pc}

0800bc86 <__sclose>:
 800bc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8a:	f000 b813 	b.w	800bcb4 <_close_r>
	...

0800bc90 <_write_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d07      	ldr	r5, [pc, #28]	; (800bcb0 <_write_r+0x20>)
 800bc94:	4604      	mov	r4, r0
 800bc96:	4608      	mov	r0, r1
 800bc98:	4611      	mov	r1, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f7f7 fc2b 	bl	80034fa <_write>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_write_r+0x1e>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_write_r+0x1e>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	20000aac 	.word	0x20000aac

0800bcb4 <_close_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d06      	ldr	r5, [pc, #24]	; (800bcd0 <_close_r+0x1c>)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	f7f7 fc37 	bl	8003532 <_close>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_close_r+0x1a>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_close_r+0x1a>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	20000aac 	.word	0x20000aac

0800bcd4 <_fstat_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d07      	ldr	r5, [pc, #28]	; (800bcf4 <_fstat_r+0x20>)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	4611      	mov	r1, r2
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	f7f7 fc32 	bl	800354a <_fstat>
 800bce6:	1c43      	adds	r3, r0, #1
 800bce8:	d102      	bne.n	800bcf0 <_fstat_r+0x1c>
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	b103      	cbz	r3, 800bcf0 <_fstat_r+0x1c>
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000aac 	.word	0x20000aac

0800bcf8 <_isatty_r>:
 800bcf8:	b538      	push	{r3, r4, r5, lr}
 800bcfa:	4d06      	ldr	r5, [pc, #24]	; (800bd14 <_isatty_r+0x1c>)
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	4604      	mov	r4, r0
 800bd00:	4608      	mov	r0, r1
 800bd02:	602b      	str	r3, [r5, #0]
 800bd04:	f7f7 fc31 	bl	800356a <_isatty>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_isatty_r+0x1a>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_isatty_r+0x1a>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	20000aac 	.word	0x20000aac

0800bd18 <_lseek_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4d07      	ldr	r5, [pc, #28]	; (800bd38 <_lseek_r+0x20>)
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	4608      	mov	r0, r1
 800bd20:	4611      	mov	r1, r2
 800bd22:	2200      	movs	r2, #0
 800bd24:	602a      	str	r2, [r5, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	f7f7 fc2a 	bl	8003580 <_lseek>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d102      	bne.n	800bd36 <_lseek_r+0x1e>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	b103      	cbz	r3, 800bd36 <_lseek_r+0x1e>
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	20000aac 	.word	0x20000aac

0800bd3c <_read_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4d07      	ldr	r5, [pc, #28]	; (800bd5c <_read_r+0x20>)
 800bd40:	4604      	mov	r4, r0
 800bd42:	4608      	mov	r0, r1
 800bd44:	4611      	mov	r1, r2
 800bd46:	2200      	movs	r2, #0
 800bd48:	602a      	str	r2, [r5, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f7f7 fbb8 	bl	80034c0 <_read>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_read_r+0x1e>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_read_r+0x1e>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20000aac 	.word	0x20000aac

0800bd60 <round>:
 800bd60:	ec51 0b10 	vmov	r0, r1, d0
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800bd6a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800bd6e:	2c13      	cmp	r4, #19
 800bd70:	ee10 2a10 	vmov	r2, s0
 800bd74:	460b      	mov	r3, r1
 800bd76:	dc19      	bgt.n	800bdac <round+0x4c>
 800bd78:	2c00      	cmp	r4, #0
 800bd7a:	da09      	bge.n	800bd90 <round+0x30>
 800bd7c:	3401      	adds	r4, #1
 800bd7e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800bd82:	d103      	bne.n	800bd8c <round+0x2c>
 800bd84:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	e028      	b.n	800bde2 <round+0x82>
 800bd90:	4d15      	ldr	r5, [pc, #84]	; (800bde8 <round+0x88>)
 800bd92:	4125      	asrs	r5, r4
 800bd94:	ea01 0605 	and.w	r6, r1, r5
 800bd98:	4332      	orrs	r2, r6
 800bd9a:	d00e      	beq.n	800bdba <round+0x5a>
 800bd9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bda0:	fa42 f404 	asr.w	r4, r2, r4
 800bda4:	4423      	add	r3, r4
 800bda6:	ea23 0305 	bic.w	r3, r3, r5
 800bdaa:	e7ef      	b.n	800bd8c <round+0x2c>
 800bdac:	2c33      	cmp	r4, #51	; 0x33
 800bdae:	dd07      	ble.n	800bdc0 <round+0x60>
 800bdb0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800bdb4:	d101      	bne.n	800bdba <round+0x5a>
 800bdb6:	f7f4 fa89 	bl	80002cc <__adddf3>
 800bdba:	ec41 0b10 	vmov	d0, r0, r1
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}
 800bdc0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800bdc4:	f04f 35ff 	mov.w	r5, #4294967295
 800bdc8:	40f5      	lsrs	r5, r6
 800bdca:	4228      	tst	r0, r5
 800bdcc:	d0f5      	beq.n	800bdba <round+0x5a>
 800bdce:	2101      	movs	r1, #1
 800bdd0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800bdd4:	fa01 f404 	lsl.w	r4, r1, r4
 800bdd8:	1912      	adds	r2, r2, r4
 800bdda:	bf28      	it	cs
 800bddc:	185b      	addcs	r3, r3, r1
 800bdde:	ea22 0205 	bic.w	r2, r2, r5
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	e7e8      	b.n	800bdba <round+0x5a>
 800bde8:	000fffff 	.word	0x000fffff

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
